
014_Counting_Semaphore_Interrupt_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08003da0  08003da0  00013da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003eec  08003eec  00013eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003ef0  08003ef0  00013ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000002c  20000000  08003ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002002c  2**0
                  CONTENTS
  7 .bss          0000c9f8  2000002c  2000002c  0002002c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000ca24  2000ca24  0002002c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c990  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001ed0  00000000  00000000  0002c9ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a50  00000000  00000000  0002e8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000958  00000000  00000000  0002f310  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004f43  00000000  00000000  0002fc68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003e8e  00000000  00000000  00034bab  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00038a39  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002aa4  00000000  00000000  00038ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0003b55c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000002c 	.word	0x2000002c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003d88 	.word	0x08003d88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000030 	.word	0x20000030
 80001cc:	08003d88 	.word	0x08003d88

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80001e8:	2300      	movs	r3, #0
 80001ea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80001ec:	4b34      	ldr	r3, [pc, #208]	; (80002c0 <EXTI_Init+0xe0>)
 80001ee:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	799b      	ldrb	r3, [r3, #6]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d04f      	beq.n	8000298 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80001f8:	4931      	ldr	r1, [pc, #196]	; (80002c0 <EXTI_Init+0xe0>)
 80001fa:	4b31      	ldr	r3, [pc, #196]	; (80002c0 <EXTI_Init+0xe0>)
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	43db      	mvns	r3, r3
 8000204:	4013      	ands	r3, r2
 8000206:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000208:	492d      	ldr	r1, [pc, #180]	; (80002c0 <EXTI_Init+0xe0>)
 800020a:	4b2d      	ldr	r3, [pc, #180]	; (80002c0 <EXTI_Init+0xe0>)
 800020c:	685a      	ldr	r2, [r3, #4]
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	43db      	mvns	r3, r3
 8000214:	4013      	ands	r3, r2
 8000216:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	791b      	ldrb	r3, [r3, #4]
 800021c:	461a      	mov	r2, r3
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	4413      	add	r3, r2
 8000222:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	68fa      	ldr	r2, [r7, #12]
 8000228:	6811      	ldr	r1, [r2, #0]
 800022a:	687a      	ldr	r2, [r7, #4]
 800022c:	6812      	ldr	r2, [r2, #0]
 800022e:	430a      	orrs	r2, r1
 8000230:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000232:	4923      	ldr	r1, [pc, #140]	; (80002c0 <EXTI_Init+0xe0>)
 8000234:	4b22      	ldr	r3, [pc, #136]	; (80002c0 <EXTI_Init+0xe0>)
 8000236:	689a      	ldr	r2, [r3, #8]
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	43db      	mvns	r3, r3
 800023e:	4013      	ands	r3, r2
 8000240:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000242:	491f      	ldr	r1, [pc, #124]	; (80002c0 <EXTI_Init+0xe0>)
 8000244:	4b1e      	ldr	r3, [pc, #120]	; (80002c0 <EXTI_Init+0xe0>)
 8000246:	68da      	ldr	r2, [r3, #12]
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	43db      	mvns	r3, r3
 800024e:	4013      	ands	r3, r2
 8000250:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	795b      	ldrb	r3, [r3, #5]
 8000256:	2b10      	cmp	r3, #16
 8000258:	d10e      	bne.n	8000278 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800025a:	4919      	ldr	r1, [pc, #100]	; (80002c0 <EXTI_Init+0xe0>)
 800025c:	4b18      	ldr	r3, [pc, #96]	; (80002c0 <EXTI_Init+0xe0>)
 800025e:	689a      	ldr	r2, [r3, #8]
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4313      	orrs	r3, r2
 8000266:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000268:	4915      	ldr	r1, [pc, #84]	; (80002c0 <EXTI_Init+0xe0>)
 800026a:	4b15      	ldr	r3, [pc, #84]	; (80002c0 <EXTI_Init+0xe0>)
 800026c:	68da      	ldr	r2, [r3, #12]
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4313      	orrs	r3, r2
 8000274:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000276:	e01d      	b.n	80002b4 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000278:	4b11      	ldr	r3, [pc, #68]	; (80002c0 <EXTI_Init+0xe0>)
 800027a:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	795b      	ldrb	r3, [r3, #5]
 8000280:	461a      	mov	r2, r3
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	4413      	add	r3, r2
 8000286:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	68fa      	ldr	r2, [r7, #12]
 800028c:	6811      	ldr	r1, [r2, #0]
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	6812      	ldr	r2, [r2, #0]
 8000292:	430a      	orrs	r2, r1
 8000294:	601a      	str	r2, [r3, #0]
}
 8000296:	e00d      	b.n	80002b4 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	791b      	ldrb	r3, [r3, #4]
 800029c:	461a      	mov	r2, r3
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	4413      	add	r3, r2
 80002a2:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	68fa      	ldr	r2, [r7, #12]
 80002a8:	6811      	ldr	r1, [r2, #0]
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	6812      	ldr	r2, [r2, #0]
 80002ae:	43d2      	mvns	r2, r2
 80002b0:	400a      	ands	r2, r1
 80002b2:	601a      	str	r2, [r3, #0]
}
 80002b4:	bf00      	nop
 80002b6:	3714      	adds	r7, #20
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr
 80002c0:	40013c00 	.word	0x40013c00

080002c4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b087      	sub	sp, #28
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80002ce:	2300      	movs	r3, #0
 80002d0:	617b      	str	r3, [r7, #20]
 80002d2:	2300      	movs	r3, #0
 80002d4:	613b      	str	r3, [r7, #16]
 80002d6:	2300      	movs	r3, #0
 80002d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002da:	2300      	movs	r3, #0
 80002dc:	617b      	str	r3, [r7, #20]
 80002de:	e076      	b.n	80003ce <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002e0:	2201      	movs	r2, #1
 80002e2:	697b      	ldr	r3, [r7, #20]
 80002e4:	fa02 f303 	lsl.w	r3, r2, r3
 80002e8:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	681a      	ldr	r2, [r3, #0]
 80002ee:	693b      	ldr	r3, [r7, #16]
 80002f0:	4013      	ands	r3, r2
 80002f2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80002f4:	68fa      	ldr	r2, [r7, #12]
 80002f6:	693b      	ldr	r3, [r7, #16]
 80002f8:	429a      	cmp	r2, r3
 80002fa:	d165      	bne.n	80003c8 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681a      	ldr	r2, [r3, #0]
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	005b      	lsls	r3, r3, #1
 8000304:	2103      	movs	r1, #3
 8000306:	fa01 f303 	lsl.w	r3, r1, r3
 800030a:	43db      	mvns	r3, r3
 800030c:	401a      	ands	r2, r3
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681a      	ldr	r2, [r3, #0]
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	791b      	ldrb	r3, [r3, #4]
 800031a:	4619      	mov	r1, r3
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	005b      	lsls	r3, r3, #1
 8000320:	fa01 f303 	lsl.w	r3, r1, r3
 8000324:	431a      	orrs	r2, r3
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	791b      	ldrb	r3, [r3, #4]
 800032e:	2b01      	cmp	r3, #1
 8000330:	d003      	beq.n	800033a <GPIO_Init+0x76>
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	791b      	ldrb	r3, [r3, #4]
 8000336:	2b02      	cmp	r3, #2
 8000338:	d12e      	bne.n	8000398 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	689a      	ldr	r2, [r3, #8]
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	005b      	lsls	r3, r3, #1
 8000342:	2103      	movs	r1, #3
 8000344:	fa01 f303 	lsl.w	r3, r1, r3
 8000348:	43db      	mvns	r3, r3
 800034a:	401a      	ands	r2, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	689a      	ldr	r2, [r3, #8]
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	795b      	ldrb	r3, [r3, #5]
 8000358:	4619      	mov	r1, r3
 800035a:	697b      	ldr	r3, [r7, #20]
 800035c:	005b      	lsls	r3, r3, #1
 800035e:	fa01 f303 	lsl.w	r3, r1, r3
 8000362:	431a      	orrs	r2, r3
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	685a      	ldr	r2, [r3, #4]
 800036c:	697b      	ldr	r3, [r7, #20]
 800036e:	b29b      	uxth	r3, r3
 8000370:	4619      	mov	r1, r3
 8000372:	2301      	movs	r3, #1
 8000374:	408b      	lsls	r3, r1
 8000376:	43db      	mvns	r3, r3
 8000378:	401a      	ands	r2, r3
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	683a      	ldr	r2, [r7, #0]
 8000384:	7992      	ldrb	r2, [r2, #6]
 8000386:	4611      	mov	r1, r2
 8000388:	697a      	ldr	r2, [r7, #20]
 800038a:	b292      	uxth	r2, r2
 800038c:	fa01 f202 	lsl.w	r2, r1, r2
 8000390:	b292      	uxth	r2, r2
 8000392:	431a      	orrs	r2, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	68da      	ldr	r2, [r3, #12]
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	b29b      	uxth	r3, r3
 80003a0:	005b      	lsls	r3, r3, #1
 80003a2:	2103      	movs	r1, #3
 80003a4:	fa01 f303 	lsl.w	r3, r1, r3
 80003a8:	43db      	mvns	r3, r3
 80003aa:	401a      	ands	r2, r3
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	68da      	ldr	r2, [r3, #12]
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	79db      	ldrb	r3, [r3, #7]
 80003b8:	4619      	mov	r1, r3
 80003ba:	697b      	ldr	r3, [r7, #20]
 80003bc:	005b      	lsls	r3, r3, #1
 80003be:	fa01 f303 	lsl.w	r3, r1, r3
 80003c2:	431a      	orrs	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	3301      	adds	r3, #1
 80003cc:	617b      	str	r3, [r7, #20]
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	2b0f      	cmp	r3, #15
 80003d2:	d985      	bls.n	80002e0 <GPIO_Init+0x1c>
    }
  }
}
 80003d4:	bf00      	nop
 80003d6:	371c      	adds	r7, #28
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr

080003e0 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	460b      	mov	r3, r1
 80003ea:	807b      	strh	r3, [r7, #2]
 80003ec:	4613      	mov	r3, r2
 80003ee:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80003f0:	2300      	movs	r3, #0
 80003f2:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80003f4:	2300      	movs	r3, #0
 80003f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003f8:	787a      	ldrb	r2, [r7, #1]
 80003fa:	887b      	ldrh	r3, [r7, #2]
 80003fc:	f003 0307 	and.w	r3, r3, #7
 8000400:	009b      	lsls	r3, r3, #2
 8000402:	fa02 f303 	lsl.w	r3, r2, r3
 8000406:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000408:	887b      	ldrh	r3, [r7, #2]
 800040a:	08db      	lsrs	r3, r3, #3
 800040c:	b29b      	uxth	r3, r3
 800040e:	4618      	mov	r0, r3
 8000410:	887b      	ldrh	r3, [r7, #2]
 8000412:	08db      	lsrs	r3, r3, #3
 8000414:	b29b      	uxth	r3, r3
 8000416:	461a      	mov	r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	3208      	adds	r2, #8
 800041c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000420:	887b      	ldrh	r3, [r7, #2]
 8000422:	f003 0307 	and.w	r3, r3, #7
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	210f      	movs	r1, #15
 800042a:	fa01 f303 	lsl.w	r3, r1, r3
 800042e:	43db      	mvns	r3, r3
 8000430:	ea02 0103 	and.w	r1, r2, r3
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	f100 0208 	add.w	r2, r0, #8
 800043a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800043e:	887b      	ldrh	r3, [r7, #2]
 8000440:	08db      	lsrs	r3, r3, #3
 8000442:	b29b      	uxth	r3, r3
 8000444:	461a      	mov	r2, r3
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	3208      	adds	r2, #8
 800044a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	4313      	orrs	r3, r2
 8000452:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000454:	887b      	ldrh	r3, [r7, #2]
 8000456:	08db      	lsrs	r3, r3, #3
 8000458:	b29b      	uxth	r3, r3
 800045a:	461a      	mov	r2, r3
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	3208      	adds	r2, #8
 8000460:	68b9      	ldr	r1, [r7, #8]
 8000462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000466:	bf00      	nop
 8000468:	3714      	adds	r7, #20
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
	...

08000474 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000478:	4a12      	ldr	r2, [pc, #72]	; (80004c4 <RCC_DeInit+0x50>)
 800047a:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <RCC_DeInit+0x50>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f043 0301 	orr.w	r3, r3, #1
 8000482:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000484:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <RCC_DeInit+0x50>)
 8000486:	2200      	movs	r2, #0
 8000488:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 800048a:	4a0e      	ldr	r2, [pc, #56]	; (80004c4 <RCC_DeInit+0x50>)
 800048c:	4b0d      	ldr	r3, [pc, #52]	; (80004c4 <RCC_DeInit+0x50>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 8000494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000498:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800049a:	4b0a      	ldr	r3, [pc, #40]	; (80004c4 <RCC_DeInit+0x50>)
 800049c:	4a0a      	ldr	r2, [pc, #40]	; (80004c8 <RCC_DeInit+0x54>)
 800049e:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80004a0:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <RCC_DeInit+0x50>)
 80004a2:	4a0a      	ldr	r2, [pc, #40]	; (80004cc <RCC_DeInit+0x58>)
 80004a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80004a8:	4a06      	ldr	r2, [pc, #24]	; (80004c4 <RCC_DeInit+0x50>)
 80004aa:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <RCC_DeInit+0x50>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80004b4:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <RCC_DeInit+0x50>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 80004ba:	bf00      	nop
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr
 80004c4:	40023800 	.word	0x40023800
 80004c8:	24003010 	.word	0x24003010
 80004cc:	20003000 	.word	0x20003000

080004d0 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b089      	sub	sp, #36	; 0x24
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80004d8:	2300      	movs	r3, #0
 80004da:	61bb      	str	r3, [r7, #24]
 80004dc:	2300      	movs	r3, #0
 80004de:	617b      	str	r3, [r7, #20]
 80004e0:	2300      	movs	r3, #0
 80004e2:	61fb      	str	r3, [r7, #28]
 80004e4:	2302      	movs	r3, #2
 80004e6:	613b      	str	r3, [r7, #16]
 80004e8:	2300      	movs	r3, #0
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	2302      	movs	r3, #2
 80004ee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80004f0:	4b47      	ldr	r3, [pc, #284]	; (8000610 <RCC_GetClocksFreq+0x140>)
 80004f2:	689b      	ldr	r3, [r3, #8]
 80004f4:	f003 030c 	and.w	r3, r3, #12
 80004f8:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80004fa:	69bb      	ldr	r3, [r7, #24]
 80004fc:	2b04      	cmp	r3, #4
 80004fe:	d007      	beq.n	8000510 <RCC_GetClocksFreq+0x40>
 8000500:	2b08      	cmp	r3, #8
 8000502:	d009      	beq.n	8000518 <RCC_GetClocksFreq+0x48>
 8000504:	2b00      	cmp	r3, #0
 8000506:	d13d      	bne.n	8000584 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4a42      	ldr	r2, [pc, #264]	; (8000614 <RCC_GetClocksFreq+0x144>)
 800050c:	601a      	str	r2, [r3, #0]
      break;
 800050e:	e03d      	b.n	800058c <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a41      	ldr	r2, [pc, #260]	; (8000618 <RCC_GetClocksFreq+0x148>)
 8000514:	601a      	str	r2, [r3, #0]
      break;
 8000516:	e039      	b.n	800058c <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000518:	4b3d      	ldr	r3, [pc, #244]	; (8000610 <RCC_GetClocksFreq+0x140>)
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	0d9b      	lsrs	r3, r3, #22
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000524:	4b3a      	ldr	r3, [pc, #232]	; (8000610 <RCC_GetClocksFreq+0x140>)
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800052c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d00c      	beq.n	800054e <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000534:	4a38      	ldr	r2, [pc, #224]	; (8000618 <RCC_GetClocksFreq+0x148>)
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	fbb2 f3f3 	udiv	r3, r2, r3
 800053c:	4a34      	ldr	r2, [pc, #208]	; (8000610 <RCC_GetClocksFreq+0x140>)
 800053e:	6852      	ldr	r2, [r2, #4]
 8000540:	0992      	lsrs	r2, r2, #6
 8000542:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000546:	fb02 f303 	mul.w	r3, r2, r3
 800054a:	61fb      	str	r3, [r7, #28]
 800054c:	e00b      	b.n	8000566 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800054e:	4a31      	ldr	r2, [pc, #196]	; (8000614 <RCC_GetClocksFreq+0x144>)
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	fbb2 f3f3 	udiv	r3, r2, r3
 8000556:	4a2e      	ldr	r2, [pc, #184]	; (8000610 <RCC_GetClocksFreq+0x140>)
 8000558:	6852      	ldr	r2, [r2, #4]
 800055a:	0992      	lsrs	r2, r2, #6
 800055c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000560:	fb02 f303 	mul.w	r3, r2, r3
 8000564:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000566:	4b2a      	ldr	r3, [pc, #168]	; (8000610 <RCC_GetClocksFreq+0x140>)
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	f003 0303 	and.w	r3, r3, #3
 8000570:	3301      	adds	r3, #1
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000576:	69fa      	ldr	r2, [r7, #28]
 8000578:	693b      	ldr	r3, [r7, #16]
 800057a:	fbb2 f2f3 	udiv	r2, r2, r3
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	601a      	str	r2, [r3, #0]
      break;
 8000582:	e003      	b.n	800058c <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4a23      	ldr	r2, [pc, #140]	; (8000614 <RCC_GetClocksFreq+0x144>)
 8000588:	601a      	str	r2, [r3, #0]
      break;
 800058a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800058c:	4b20      	ldr	r3, [pc, #128]	; (8000610 <RCC_GetClocksFreq+0x140>)
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000594:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000596:	69bb      	ldr	r3, [r7, #24]
 8000598:	091b      	lsrs	r3, r3, #4
 800059a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800059c:	4a1f      	ldr	r2, [pc, #124]	; (800061c <RCC_GetClocksFreq+0x14c>)
 800059e:	69bb      	ldr	r3, [r7, #24]
 80005a0:	4413      	add	r3, r2
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80005b4:	4b16      	ldr	r3, [pc, #88]	; (8000610 <RCC_GetClocksFreq+0x140>)
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80005bc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80005be:	69bb      	ldr	r3, [r7, #24]
 80005c0:	0a9b      	lsrs	r3, r3, #10
 80005c2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80005c4:	4a15      	ldr	r2, [pc, #84]	; (800061c <RCC_GetClocksFreq+0x14c>)
 80005c6:	69bb      	ldr	r3, [r7, #24]
 80005c8:	4413      	add	r3, r2
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	685a      	ldr	r2, [r3, #4]
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	40da      	lsrs	r2, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <RCC_GetClocksFreq+0x140>)
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80005e4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80005e6:	69bb      	ldr	r3, [r7, #24]
 80005e8:	0b5b      	lsrs	r3, r3, #13
 80005ea:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80005ec:	4a0b      	ldr	r2, [pc, #44]	; (800061c <RCC_GetClocksFreq+0x14c>)
 80005ee:	69bb      	ldr	r3, [r7, #24]
 80005f0:	4413      	add	r3, r2
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	685a      	ldr	r2, [r3, #4]
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	40da      	lsrs	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	60da      	str	r2, [r3, #12]
}
 8000604:	bf00      	nop
 8000606:	3724      	adds	r7, #36	; 0x24
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	40023800 	.word	0x40023800
 8000614:	00f42400 	.word	0x00f42400
 8000618:	017d7840 	.word	0x017d7840
 800061c:	20000000 	.word	0x20000000

08000620 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800062c:	78fb      	ldrb	r3, [r7, #3]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d006      	beq.n	8000640 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000632:	490a      	ldr	r1, [pc, #40]	; (800065c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4313      	orrs	r3, r2
 800063c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800063e:	e006      	b.n	800064e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000640:	4906      	ldr	r1, [pc, #24]	; (800065c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	43db      	mvns	r3, r3
 800064a:	4013      	ands	r3, r2
 800064c:	630b      	str	r3, [r1, #48]	; 0x30
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800

08000660 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	460b      	mov	r3, r1
 800066a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800066c:	78fb      	ldrb	r3, [r7, #3]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d006      	beq.n	8000680 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000672:	490a      	ldr	r1, [pc, #40]	; (800069c <RCC_APB1PeriphClockCmd+0x3c>)
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <RCC_APB1PeriphClockCmd+0x3c>)
 8000676:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4313      	orrs	r3, r2
 800067c:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800067e:	e006      	b.n	800068e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000680:	4906      	ldr	r1, [pc, #24]	; (800069c <RCC_APB1PeriphClockCmd+0x3c>)
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <RCC_APB1PeriphClockCmd+0x3c>)
 8000684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	43db      	mvns	r3, r3
 800068a:	4013      	ands	r3, r2
 800068c:	640b      	str	r3, [r1, #64]	; 0x40
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800

080006a0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006ac:	78fb      	ldrb	r3, [r7, #3]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d006      	beq.n	80006c0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80006b2:	490a      	ldr	r1, [pc, #40]	; (80006dc <RCC_APB2PeriphClockCmd+0x3c>)
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <RCC_APB2PeriphClockCmd+0x3c>)
 80006b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80006be:	e006      	b.n	80006ce <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80006c0:	4906      	ldr	r1, [pc, #24]	; (80006dc <RCC_APB2PeriphClockCmd+0x3c>)
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <RCC_APB2PeriphClockCmd+0x3c>)
 80006c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	43db      	mvns	r3, r3
 80006ca:	4013      	ands	r3, r2
 80006cc:	644b      	str	r3, [r1, #68]	; 0x44
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800

080006e0 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80006e0:	b490      	push	{r4, r7}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	460a      	mov	r2, r1
 80006ea:	71fb      	strb	r3, [r7, #7]
 80006ec:	4613      	mov	r3, r2
 80006ee:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80006f4:	79bb      	ldrb	r3, [r7, #6]
 80006f6:	f003 0303 	and.w	r3, r3, #3
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	220f      	movs	r2, #15
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000704:	4916      	ldr	r1, [pc, #88]	; (8000760 <SYSCFG_EXTILineConfig+0x80>)
 8000706:	79bb      	ldrb	r3, [r7, #6]
 8000708:	089b      	lsrs	r3, r3, #2
 800070a:	b2db      	uxtb	r3, r3
 800070c:	4618      	mov	r0, r3
 800070e:	4a14      	ldr	r2, [pc, #80]	; (8000760 <SYSCFG_EXTILineConfig+0x80>)
 8000710:	79bb      	ldrb	r3, [r7, #6]
 8000712:	089b      	lsrs	r3, r3, #2
 8000714:	b2db      	uxtb	r3, r3
 8000716:	3302      	adds	r3, #2
 8000718:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	43db      	mvns	r3, r3
 8000720:	401a      	ands	r2, r3
 8000722:	1c83      	adds	r3, r0, #2
 8000724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000728:	480d      	ldr	r0, [pc, #52]	; (8000760 <SYSCFG_EXTILineConfig+0x80>)
 800072a:	79bb      	ldrb	r3, [r7, #6]
 800072c:	089b      	lsrs	r3, r3, #2
 800072e:	b2db      	uxtb	r3, r3
 8000730:	461c      	mov	r4, r3
 8000732:	4a0b      	ldr	r2, [pc, #44]	; (8000760 <SYSCFG_EXTILineConfig+0x80>)
 8000734:	79bb      	ldrb	r3, [r7, #6]
 8000736:	089b      	lsrs	r3, r3, #2
 8000738:	b2db      	uxtb	r3, r3
 800073a:	3302      	adds	r3, #2
 800073c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000740:	79f9      	ldrb	r1, [r7, #7]
 8000742:	79bb      	ldrb	r3, [r7, #6]
 8000744:	f003 0303 	and.w	r3, r3, #3
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	431a      	orrs	r2, r3
 8000750:	1ca3      	adds	r3, r4, #2
 8000752:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000756:	bf00      	nop
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bc90      	pop	{r4, r7}
 800075e:	4770      	bx	lr
 8000760:	40013800 	.word	0x40013800

08000764 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	; 0x28
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800076e:	2300      	movs	r3, #0
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
 8000772:	2300      	movs	r3, #0
 8000774:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	8a1b      	ldrh	r3, [r3, #16]
 8000782:	b29b      	uxth	r3, r3
 8000784:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000788:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800078c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	88db      	ldrh	r3, [r3, #6]
 8000792:	461a      	mov	r2, r3
 8000794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000796:	4313      	orrs	r3, r2
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800079a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079c:	b29a      	uxth	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	899b      	ldrh	r3, [r3, #12]
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80007aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ac:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80007b0:	f023 030c 	bic.w	r3, r3, #12
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	889a      	ldrh	r2, [r3, #4]
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	891b      	ldrh	r3, [r3, #8]
 80007be:	4313      	orrs	r3, r2
 80007c0:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80007c6:	4313      	orrs	r3, r2
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	461a      	mov	r2, r3
 80007cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ce:	4313      	orrs	r3, r2
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80007d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	8a9b      	ldrh	r3, [r3, #20]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80007e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	899b      	ldrh	r3, [r3, #12]
 80007ee:	461a      	mov	r2, r3
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	4313      	orrs	r3, r2
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80007f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fe64 	bl	80004d0 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4a30      	ldr	r2, [pc, #192]	; (80008cc <USART_Init+0x168>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d003      	beq.n	8000818 <USART_Init+0xb4>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a2f      	ldr	r2, [pc, #188]	; (80008d0 <USART_Init+0x16c>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d102      	bne.n	800081e <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	623b      	str	r3, [r7, #32]
 800081c:	e001      	b.n	8000822 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	899b      	ldrh	r3, [r3, #12]
 8000826:	b29b      	uxth	r3, r3
 8000828:	b21b      	sxth	r3, r3
 800082a:	2b00      	cmp	r3, #0
 800082c:	da0c      	bge.n	8000848 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800082e:	6a3a      	ldr	r2, [r7, #32]
 8000830:	4613      	mov	r3, r2
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	4413      	add	r3, r2
 8000836:	009a      	lsls	r2, r3, #2
 8000838:	441a      	add	r2, r3
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	fbb2 f3f3 	udiv	r3, r2, r3
 8000844:	61fb      	str	r3, [r7, #28]
 8000846:	e00b      	b.n	8000860 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000848:	6a3a      	ldr	r2, [r7, #32]
 800084a:	4613      	mov	r3, r2
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	4413      	add	r3, r2
 8000850:	009a      	lsls	r2, r3, #2
 8000852:	441a      	add	r2, r3
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	fbb2 f3f3 	udiv	r3, r2, r3
 800085e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	4a1c      	ldr	r2, [pc, #112]	; (80008d4 <USART_Init+0x170>)
 8000864:	fba2 2303 	umull	r2, r3, r2, r3
 8000868:	095b      	lsrs	r3, r3, #5
 800086a:	011b      	lsls	r3, r3, #4
 800086c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000870:	091b      	lsrs	r3, r3, #4
 8000872:	2264      	movs	r2, #100	; 0x64
 8000874:	fb02 f303 	mul.w	r3, r2, r3
 8000878:	69fa      	ldr	r2, [r7, #28]
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	899b      	ldrh	r3, [r3, #12]
 8000882:	b29b      	uxth	r3, r3
 8000884:	b21b      	sxth	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	da0c      	bge.n	80008a4 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	3332      	adds	r3, #50	; 0x32
 8000890:	4a10      	ldr	r2, [pc, #64]	; (80008d4 <USART_Init+0x170>)
 8000892:	fba2 2303 	umull	r2, r3, r2, r3
 8000896:	095b      	lsrs	r3, r3, #5
 8000898:	f003 0307 	and.w	r3, r3, #7
 800089c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800089e:	4313      	orrs	r3, r2
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
 80008a2:	e00b      	b.n	80008bc <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80008a4:	69bb      	ldr	r3, [r7, #24]
 80008a6:	011b      	lsls	r3, r3, #4
 80008a8:	3332      	adds	r3, #50	; 0x32
 80008aa:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <USART_Init+0x170>)
 80008ac:	fba2 2303 	umull	r2, r3, r2, r3
 80008b0:	095b      	lsrs	r3, r3, #5
 80008b2:	f003 030f 	and.w	r3, r3, #15
 80008b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008b8:	4313      	orrs	r3, r2
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80008bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008be:	b29a      	uxth	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	811a      	strh	r2, [r3, #8]
}
 80008c4:	bf00      	nop
 80008c6:	3728      	adds	r7, #40	; 0x28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40011000 	.word	0x40011000
 80008d0:	40011400 	.word	0x40011400
 80008d4:	51eb851f 	.word	0x51eb851f

080008d8 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	460b      	mov	r3, r1
 80008e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80008e4:	78fb      	ldrb	r3, [r7, #3]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d008      	beq.n	80008fc <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	899b      	ldrh	r3, [r3, #12]
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 80008fa:	e007      	b.n	800090c <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	899b      	ldrh	r3, [r3, #12]
 8000900:	b29b      	uxth	r3, r3
 8000902:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000906:	b29a      	uxth	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	819a      	strh	r2, [r3, #12]
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000924:	887b      	ldrh	r3, [r7, #2]
 8000926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800092a:	b29a      	uxth	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	809a      	strh	r2, [r3, #4]
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	460b      	mov	r3, r1
 8000946:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000948:	2300      	movs	r3, #0
 800094a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	b29a      	uxth	r2, r3
 8000952:	887b      	ldrh	r3, [r7, #2]
 8000954:	4013      	ands	r3, r2
 8000956:	b29b      	uxth	r3, r3
 8000958:	2b00      	cmp	r3, #0
 800095a:	d002      	beq.n	8000962 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 800095c:	2301      	movs	r3, #1
 800095e:	73fb      	strb	r3, [r7, #15]
 8000960:	e001      	b.n	8000966 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000962:	2300      	movs	r3, #0
 8000964:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000966:	7bfb      	ldrb	r3, [r7, #15]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f103 0208 	add.w	r2, r3, #8
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f04f 32ff 	mov.w	r2, #4294967295
 800098c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f103 0208 	add.w	r2, r3, #8
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f103 0208 	add.w	r2, r3, #8
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80009ce:	b480      	push	{r7}
 80009d0:	b085      	sub	sp, #20
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
 80009d6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e4:	d103      	bne.n	80009ee <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	691b      	ldr	r3, [r3, #16]
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	e00c      	b.n	8000a08 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3308      	adds	r3, #8
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	e002      	b.n	80009fc <vListInsert+0x2e>
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d9f6      	bls.n	80009f6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	685a      	ldr	r2, [r3, #4]
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	683a      	ldr	r2, [r7, #0]
 8000a16:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	683a      	ldr	r2, [r7, #0]
 8000a22:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	1c5a      	adds	r2, r3, #1
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	601a      	str	r2, [r3, #0]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	691b      	ldr	r3, [r3, #16]
 8000a4c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	6892      	ldr	r2, [r2, #8]
 8000a56:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	6852      	ldr	r2, [r2, #4]
 8000a60:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	685a      	ldr	r2, [r3, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d103      	bne.n	8000a74 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	1e5a      	subs	r2, r3, #1
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	3b04      	subs	r3, #4
 8000aa4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000aac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	3b04      	subs	r3, #4
 8000ab2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	f023 0201 	bic.w	r2, r3, #1
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	3b04      	subs	r3, #4
 8000ac2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000ac4:	4a0c      	ldr	r2, [pc, #48]	; (8000af8 <pxPortInitialiseStack+0x64>)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	3b14      	subs	r3, #20
 8000ace:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	3b04      	subs	r3, #4
 8000ada:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f06f 0202 	mvn.w	r2, #2
 8000ae2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	3b20      	subs	r3, #32
 8000ae8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000aea:	68fb      	ldr	r3, [r7, #12]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	08000afd 	.word	0x08000afd

08000afc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <prvTaskExitError+0x50>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b0e:	d009      	beq.n	8000b24 <prvTaskExitError+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b14:	f383 8811 	msr	BASEPRI, r3
 8000b18:	f3bf 8f6f 	isb	sy
 8000b1c:	f3bf 8f4f 	dsb	sy
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	e7fe      	b.n	8000b22 <prvTaskExitError+0x26>
 8000b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b28:	f383 8811 	msr	BASEPRI, r3
 8000b2c:	f3bf 8f6f 	isb	sy
 8000b30:	f3bf 8f4f 	dsb	sy
 8000b34:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000b36:	bf00      	nop
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d0fc      	beq.n	8000b38 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000010 	.word	0x20000010

08000b50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <pxCurrentTCBConst2>)
 8000b52:	6819      	ldr	r1, [r3, #0]
 8000b54:	6808      	ldr	r0, [r1, #0]
 8000b56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b5a:	f380 8809 	msr	PSP, r0
 8000b5e:	f3bf 8f6f 	isb	sy
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	f380 8811 	msr	BASEPRI, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f3af 8000 	nop.w

08000b70 <pxCurrentTCBConst2>:
 8000b70:	2000c86c 	.word	0x2000c86c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000b74:	bf00      	nop
 8000b76:	bf00      	nop

08000b78 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8000b78:	4808      	ldr	r0, [pc, #32]	; (8000b9c <prvPortStartFirstTask+0x24>)
 8000b7a:	6800      	ldr	r0, [r0, #0]
 8000b7c:	6800      	ldr	r0, [r0, #0]
 8000b7e:	f380 8808 	msr	MSP, r0
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	f380 8814 	msr	CONTROL, r0
 8000b8a:	b662      	cpsie	i
 8000b8c:	b661      	cpsie	f
 8000b8e:	f3bf 8f4f 	dsb	sy
 8000b92:	f3bf 8f6f 	isb	sy
 8000b96:	df00      	svc	0
 8000b98:	bf00      	nop
 8000b9a:	0000      	.short	0x0000
 8000b9c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000ba0:	bf00      	nop
 8000ba2:	bf00      	nop

08000ba4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000baa:	4b44      	ldr	r3, [pc, #272]	; (8000cbc <xPortStartScheduler+0x118>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a44      	ldr	r2, [pc, #272]	; (8000cc0 <xPortStartScheduler+0x11c>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d109      	bne.n	8000bc8 <xPortStartScheduler+0x24>
 8000bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bb8:	f383 8811 	msr	BASEPRI, r3
 8000bbc:	f3bf 8f6f 	isb	sy
 8000bc0:	f3bf 8f4f 	dsb	sy
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	e7fe      	b.n	8000bc6 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000bc8:	4b3c      	ldr	r3, [pc, #240]	; (8000cbc <xPortStartScheduler+0x118>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a3d      	ldr	r2, [pc, #244]	; (8000cc4 <xPortStartScheduler+0x120>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d109      	bne.n	8000be6 <xPortStartScheduler+0x42>
 8000bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bd6:	f383 8811 	msr	BASEPRI, r3
 8000bda:	f3bf 8f6f 	isb	sy
 8000bde:	f3bf 8f4f 	dsb	sy
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	e7fe      	b.n	8000be4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000be6:	4b38      	ldr	r3, [pc, #224]	; (8000cc8 <xPortStartScheduler+0x124>)
 8000be8:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	22ff      	movs	r2, #255	; 0xff
 8000bf6:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000c00:	78fb      	ldrb	r3, [r7, #3]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4b30      	ldr	r3, [pc, #192]	; (8000ccc <xPortStartScheduler+0x128>)
 8000c0c:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000c0e:	4b30      	ldr	r3, [pc, #192]	; (8000cd0 <xPortStartScheduler+0x12c>)
 8000c10:	2207      	movs	r2, #7
 8000c12:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000c14:	e009      	b.n	8000c2a <xPortStartScheduler+0x86>
        {
            ulMaxPRIGROUPValue--;
 8000c16:	4b2e      	ldr	r3, [pc, #184]	; (8000cd0 <xPortStartScheduler+0x12c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	4a2c      	ldr	r2, [pc, #176]	; (8000cd0 <xPortStartScheduler+0x12c>)
 8000c1e:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000c20:	78fb      	ldrb	r3, [r7, #3]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000c2a:	78fb      	ldrb	r3, [r7, #3]
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c32:	2b80      	cmp	r3, #128	; 0x80
 8000c34:	d0ef      	beq.n	8000c16 <xPortStartScheduler+0x72>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000c36:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <xPortStartScheduler+0x12c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f1c3 0307 	rsb	r3, r3, #7
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	d009      	beq.n	8000c56 <xPortStartScheduler+0xb2>
 8000c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c46:	f383 8811 	msr	BASEPRI, r3
 8000c4a:	f3bf 8f6f 	isb	sy
 8000c4e:	f3bf 8f4f 	dsb	sy
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	e7fe      	b.n	8000c54 <xPortStartScheduler+0xb0>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000c56:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <xPortStartScheduler+0x12c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	021b      	lsls	r3, r3, #8
 8000c5c:	4a1c      	ldr	r2, [pc, #112]	; (8000cd0 <xPortStartScheduler+0x12c>)
 8000c5e:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <xPortStartScheduler+0x12c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000c68:	4a19      	ldr	r2, [pc, #100]	; (8000cd0 <xPortStartScheduler+0x12c>)
 8000c6a:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8000c74:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <xPortStartScheduler+0x130>)
 8000c76:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <xPortStartScheduler+0x130>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c7e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8000c80:	4a14      	ldr	r2, [pc, #80]	; (8000cd4 <xPortStartScheduler+0x130>)
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <xPortStartScheduler+0x130>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000c8a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8000c8c:	f000 f8d4 	bl	8000e38 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <xPortStartScheduler+0x134>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8000c96:	f000 f8f3 	bl	8000e80 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8000c9a:	4a10      	ldr	r2, [pc, #64]	; (8000cdc <xPortStartScheduler+0x138>)
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <xPortStartScheduler+0x138>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000ca4:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000ca6:	f7ff ff67 	bl	8000b78 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8000caa:	f001 fbfd 	bl	80024a8 <vTaskSwitchContext>
    prvTaskExitError();
 8000cae:	f7ff ff25 	bl	8000afc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8000cb2:	2300      	movs	r3, #0
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	e000ed00 	.word	0xe000ed00
 8000cc0:	410fc271 	.word	0x410fc271
 8000cc4:	410fc270 	.word	0x410fc270
 8000cc8:	e000e400 	.word	0xe000e400
 8000ccc:	20000048 	.word	0x20000048
 8000cd0:	2000004c 	.word	0x2000004c
 8000cd4:	e000ed20 	.word	0xe000ed20
 8000cd8:	20000010 	.word	0x20000010
 8000cdc:	e000ef34 	.word	0xe000ef34

08000ce0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cea:	f383 8811 	msr	BASEPRI, r3
 8000cee:	f3bf 8f6f 	isb	sy
 8000cf2:	f3bf 8f4f 	dsb	sy
 8000cf6:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <vPortEnterCritical+0x54>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <vPortEnterCritical+0x54>)
 8000d00:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <vPortEnterCritical+0x54>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d10e      	bne.n	8000d28 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <vPortEnterCritical+0x58>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d009      	beq.n	8000d28 <vPortEnterCritical+0x48>
 8000d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d18:	f383 8811 	msr	BASEPRI, r3
 8000d1c:	f3bf 8f6f 	isb	sy
 8000d20:	f3bf 8f4f 	dsb	sy
 8000d24:	603b      	str	r3, [r7, #0]
 8000d26:	e7fe      	b.n	8000d26 <vPortEnterCritical+0x46>
    }
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	20000010 	.word	0x20000010
 8000d38:	e000ed04 	.word	0xe000ed04

08000d3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <vPortExitCritical+0x4c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d109      	bne.n	8000d5e <vPortExitCritical+0x22>
 8000d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d4e:	f383 8811 	msr	BASEPRI, r3
 8000d52:	f3bf 8f6f 	isb	sy
 8000d56:	f3bf 8f4f 	dsb	sy
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	e7fe      	b.n	8000d5c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <vPortExitCritical+0x4c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <vPortExitCritical+0x4c>)
 8000d66:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8000d68:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <vPortExitCritical+0x4c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d104      	bne.n	8000d7a <vPortExitCritical+0x3e>
 8000d70:	2300      	movs	r3, #0
 8000d72:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000010 	.word	0x20000010
 8000d8c:	00000000 	.word	0x00000000

08000d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000d90:	f3ef 8009 	mrs	r0, PSP
 8000d94:	f3bf 8f6f 	isb	sy
 8000d98:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <pxCurrentTCBConst>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	f01e 0f10 	tst.w	lr, #16
 8000da0:	bf08      	it	eq
 8000da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000daa:	6010      	str	r0, [r2, #0]
 8000dac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000db0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000db4:	f380 8811 	msr	BASEPRI, r0
 8000db8:	f3bf 8f4f 	dsb	sy
 8000dbc:	f3bf 8f6f 	isb	sy
 8000dc0:	f001 fb72 	bl	80024a8 <vTaskSwitchContext>
 8000dc4:	f04f 0000 	mov.w	r0, #0
 8000dc8:	f380 8811 	msr	BASEPRI, r0
 8000dcc:	bc09      	pop	{r0, r3}
 8000dce:	6819      	ldr	r1, [r3, #0]
 8000dd0:	6808      	ldr	r0, [r1, #0]
 8000dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dd6:	f01e 0f10 	tst.w	lr, #16
 8000dda:	bf08      	it	eq
 8000ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000de0:	f380 8809 	msr	PSP, r0
 8000de4:	f3bf 8f6f 	isb	sy
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	f3af 8000 	nop.w

08000df0 <pxCurrentTCBConst>:
 8000df0:	2000c86c 	.word	0x2000c86c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop

08000df8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
        __asm volatile
 8000dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e02:	f383 8811 	msr	BASEPRI, r3
 8000e06:	f3bf 8f6f 	isb	sy
 8000e0a:	f3bf 8f4f 	dsb	sy
 8000e0e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000e10:	f001 fa34 	bl	800227c <xTaskIncrementTick>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <SysTick_Handler+0x3c>)
 8000e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	2300      	movs	r3, #0
 8000e24:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	e000ed04 	.word	0xe000ed04

08000e38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <vPortSetupTimerInterrupt+0x34>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <vPortSetupTimerInterrupt+0x38>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000e48:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <vPortSetupTimerInterrupt+0x3c>)
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <vPortSetupTimerInterrupt+0x40>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	490b      	ldr	r1, [pc, #44]	; (8000e7c <vPortSetupTimerInterrupt+0x44>)
 8000e50:	fba1 1303 	umull	r1, r3, r1, r3
 8000e54:	099b      	lsrs	r3, r3, #6
 8000e56:	3b01      	subs	r3, #1
 8000e58:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000e5a:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <vPortSetupTimerInterrupt+0x34>)
 8000e5c:	2207      	movs	r2, #7
 8000e5e:	601a      	str	r2, [r3, #0]
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000e010 	.word	0xe000e010
 8000e70:	e000e018 	.word	0xe000e018
 8000e74:	e000e014 	.word	0xe000e014
 8000e78:	20000018 	.word	0x20000018
 8000e7c:	10624dd3 	.word	0x10624dd3

08000e80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8000e80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000e90 <vPortEnableVFP+0x10>
 8000e84:	6801      	ldr	r1, [r0, #0]
 8000e86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000e8a:	6001      	str	r1, [r0, #0]
 8000e8c:	4770      	bx	lr
 8000e8e:	0000      	.short	0x0000
 8000e90:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8000e94:	bf00      	nop
 8000e96:	bf00      	nop

08000e98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8000e9e:	f3ef 8305 	mrs	r3, IPSR
 8000ea2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2b0f      	cmp	r3, #15
 8000ea8:	d913      	bls.n	8000ed2 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000eaa:	4a16      	ldr	r2, [pc, #88]	; (8000f04 <vPortValidateInterruptPriority+0x6c>)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4413      	add	r3, r2
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000eb4:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <vPortValidateInterruptPriority+0x70>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	7afa      	ldrb	r2, [r7, #11]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d209      	bcs.n	8000ed2 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 8000ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ec2:	f383 8811 	msr	BASEPRI, r3
 8000ec6:	f3bf 8f6f 	isb	sy
 8000eca:	f3bf 8f4f 	dsb	sy
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	e7fe      	b.n	8000ed0 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <vPortValidateInterruptPriority+0x74>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <vPortValidateInterruptPriority+0x78>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d909      	bls.n	8000ef6 <vPortValidateInterruptPriority+0x5e>
 8000ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ee6:	f383 8811 	msr	BASEPRI, r3
 8000eea:	f3bf 8f6f 	isb	sy
 8000eee:	f3bf 8f4f 	dsb	sy
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	e7fe      	b.n	8000ef4 <vPortValidateInterruptPriority+0x5c>
    }
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e3f0 	.word	0xe000e3f0
 8000f08:	20000048 	.word	0x20000048
 8000f0c:	e000ed0c 	.word	0xe000ed0c
 8000f10:	2000004c 	.word	0x2000004c

08000f14 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8000f20:	f001 f888 	bl	8002034 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8000f24:	4b52      	ldr	r3, [pc, #328]	; (8001070 <pvPortMalloc+0x15c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d101      	bne.n	8000f30 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8000f2c:	f000 f900 	bl	8001130 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d012      	beq.n	8000f5c <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8000f36:	2208      	movs	r2, #8
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	3308      	adds	r3, #8
 8000f42:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	43da      	mvns	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d304      	bcc.n	8000f58 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	4413      	add	r3, r2
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	e001      	b.n	8000f5c <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	db6f      	blt.n	8001042 <pvPortMalloc+0x12e>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d06c      	beq.n	8001042 <pvPortMalloc+0x12e>
 8000f68:	4b42      	ldr	r3, [pc, #264]	; (8001074 <pvPortMalloc+0x160>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d867      	bhi.n	8001042 <pvPortMalloc+0x12e>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8000f72:	4b41      	ldr	r3, [pc, #260]	; (8001078 <pvPortMalloc+0x164>)
 8000f74:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8000f76:	4b40      	ldr	r3, [pc, #256]	; (8001078 <pvPortMalloc+0x164>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000f7c:	e004      	b.n	8000f88 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f80:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d203      	bcs.n	8000f9a <pvPortMalloc+0x86>
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f1      	bne.n	8000f7e <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8000f9a:	4b35      	ldr	r3, [pc, #212]	; (8001070 <pvPortMalloc+0x15c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d04e      	beq.n	8001042 <pvPortMalloc+0x12e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000fa4:	6a3b      	ldr	r3, [r7, #32]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2208      	movs	r2, #8
 8000faa:	4413      	add	r3, r2
 8000fac:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	6a3b      	ldr	r3, [r7, #32]
 8000fb4:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	1ad2      	subs	r2, r2, r3
 8000fbe:	2308      	movs	r3, #8
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d91e      	bls.n	8001004 <pvPortMalloc+0xf0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4413      	add	r3, r2
 8000fcc:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	f003 0307 	and.w	r3, r3, #7
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d009      	beq.n	8000fec <pvPortMalloc+0xd8>
 8000fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fdc:	f383 8811 	msr	BASEPRI, r3
 8000fe0:	f3bf 8f6f 	isb	sy
 8000fe4:	f3bf 8f4f 	dsb	sy
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	e7fe      	b.n	8000fea <pvPortMalloc+0xd6>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	1ad2      	subs	r2, r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000ffe:	6978      	ldr	r0, [r7, #20]
 8001000:	f000 f8f2 	bl	80011e8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001004:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <pvPortMalloc+0x160>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	4a19      	ldr	r2, [pc, #100]	; (8001074 <pvPortMalloc+0x160>)
 8001010:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <pvPortMalloc+0x160>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4b19      	ldr	r3, [pc, #100]	; (800107c <pvPortMalloc+0x168>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	429a      	cmp	r2, r3
 800101c:	d203      	bcs.n	8001026 <pvPortMalloc+0x112>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <pvPortMalloc+0x160>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a16      	ldr	r2, [pc, #88]	; (800107c <pvPortMalloc+0x168>)
 8001024:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001030:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001038:	4b11      	ldr	r3, [pc, #68]	; (8001080 <pvPortMalloc+0x16c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	3301      	adds	r3, #1
 800103e:	4a10      	ldr	r2, [pc, #64]	; (8001080 <pvPortMalloc+0x16c>)
 8001040:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001042:	f001 f805 	bl	8002050 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	2b00      	cmp	r3, #0
 800104e:	d009      	beq.n	8001064 <pvPortMalloc+0x150>
 8001050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001054:	f383 8811 	msr	BASEPRI, r3
 8001058:	f3bf 8f6f 	isb	sy
 800105c:	f3bf 8f4f 	dsb	sy
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	e7fe      	b.n	8001062 <pvPortMalloc+0x14e>
    return pvReturn;
 8001064:	69fb      	ldr	r3, [r7, #28]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3728      	adds	r7, #40	; 0x28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	2000c858 	.word	0x2000c858
 8001074:	2000c85c 	.word	0x2000c85c
 8001078:	2000c850 	.word	0x2000c850
 800107c:	2000c860 	.word	0x2000c860
 8001080:	2000c864 	.word	0x2000c864

08001084 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d043      	beq.n	800111e <vPortFree+0x9a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001096:	2308      	movs	r3, #8
 8001098:	425b      	negs	r3, r3
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	4413      	add	r3, r2
 800109e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	db09      	blt.n	80010c0 <vPortFree+0x3c>
 80010ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010b0:	f383 8811 	msr	BASEPRI, r3
 80010b4:	f3bf 8f6f 	isb	sy
 80010b8:	f3bf 8f4f 	dsb	sy
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	e7fe      	b.n	80010be <vPortFree+0x3a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d009      	beq.n	80010dc <vPortFree+0x58>
 80010c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010cc:	f383 8811 	msr	BASEPRI, r3
 80010d0:	f3bf 8f6f 	isb	sy
 80010d4:	f3bf 8f4f 	dsb	sy
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	e7fe      	b.n	80010da <vPortFree+0x56>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	da1c      	bge.n	800111e <vPortFree+0x9a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d118      	bne.n	800111e <vPortFree+0x9a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80010f8:	f000 ff9c 	bl	8002034 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <vPortFree+0xa4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4413      	add	r3, r2
 8001106:	4a08      	ldr	r2, [pc, #32]	; (8001128 <vPortFree+0xa4>)
 8001108:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800110a:	6938      	ldr	r0, [r7, #16]
 800110c:	f000 f86c 	bl	80011e8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <vPortFree+0xa8>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	4a05      	ldr	r2, [pc, #20]	; (800112c <vPortFree+0xa8>)
 8001118:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800111a:	f000 ff99 	bl	8002050 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000c85c 	.word	0x2000c85c
 800112c:	2000c868 	.word	0x2000c868

08001130 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001136:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 800113a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800113c:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <prvHeapInit+0xa4>)
 800113e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00c      	beq.n	8001164 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	3307      	adds	r3, #7
 800114e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f023 0307 	bic.w	r3, r3, #7
 8001156:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001158:	68ba      	ldr	r2, [r7, #8]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	4a1d      	ldr	r2, [pc, #116]	; (80011d4 <prvHeapInit+0xa4>)
 8001160:	4413      	add	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001168:	4a1b      	ldr	r2, [pc, #108]	; (80011d8 <prvHeapInit+0xa8>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800116e:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <prvHeapInit+0xa8>)
 8001170:	2200      	movs	r2, #0
 8001172:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	4413      	add	r3, r2
 800117a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800117c:	2208      	movs	r2, #8
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	1a9b      	subs	r3, r3, r2
 8001182:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f023 0307 	bic.w	r3, r3, #7
 800118a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4a13      	ldr	r2, [pc, #76]	; (80011dc <prvHeapInit+0xac>)
 8001190:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <prvHeapInit+0xac>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2200      	movs	r2, #0
 8001198:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <prvHeapInit+0xac>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	1ad2      	subs	r2, r2, r3
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <prvHeapInit+0xac>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	4a08      	ldr	r2, [pc, #32]	; (80011e0 <prvHeapInit+0xb0>)
 80011be:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <prvHeapInit+0xb4>)
 80011c6:	6013      	str	r3, [r2, #0]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	20000050 	.word	0x20000050
 80011d8:	2000c850 	.word	0x2000c850
 80011dc:	2000c858 	.word	0x2000c858
 80011e0:	2000c860 	.word	0x2000c860
 80011e4:	2000c85c 	.word	0x2000c85c

080011e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80011f0:	4b28      	ldr	r3, [pc, #160]	; (8001294 <prvInsertBlockIntoFreeList+0xac>)
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	e002      	b.n	80011fc <prvInsertBlockIntoFreeList+0x14>
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	429a      	cmp	r2, r3
 8001204:	d3f7      	bcc.n	80011f6 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	441a      	add	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	429a      	cmp	r2, r3
 8001216:	d108      	bne.n	800122a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	441a      	add	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	441a      	add	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	429a      	cmp	r2, r3
 800123c:	d118      	bne.n	8001270 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <prvInsertBlockIntoFreeList+0xb0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	429a      	cmp	r2, r3
 8001248:	d00d      	beq.n	8001266 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	441a      	add	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	e008      	b.n	8001278 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <prvInsertBlockIntoFreeList+0xb0>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	e003      	b.n	8001278 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001278:	68fa      	ldr	r2, [r7, #12]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	429a      	cmp	r2, r3
 800127e:	d002      	beq.n	8001286 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	2000c850 	.word	0x2000c850
 8001298:	2000c858 	.word	0x2000c858

0800129c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80012a6:	2301      	movs	r3, #1
 80012a8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d109      	bne.n	80012c8 <xQueueGenericReset+0x2c>
 80012b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012b8:	f383 8811 	msr	BASEPRI, r3
 80012bc:	f3bf 8f6f 	isb	sy
 80012c0:	f3bf 8f4f 	dsb	sy
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	e7fe      	b.n	80012c6 <xQueueGenericReset+0x2a>

    if( ( pxQueue != NULL ) &&
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d05a      	beq.n	8001384 <xQueueGenericReset+0xe8>
        ( pxQueue->uxLength >= 1U ) &&
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d056      	beq.n	8001384 <xQueueGenericReset+0xe8>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012da:	f04f 32ff 	mov.w	r2, #4294967295
 80012de:	fbb2 f2f3 	udiv	r2, r2, r3
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        ( pxQueue->uxLength >= 1U ) &&
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d34c      	bcc.n	8001384 <xQueueGenericReset+0xe8>
    {
        taskENTER_CRITICAL();
 80012ea:	f7ff fcf9 	bl	8000ce0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012f6:	6939      	ldr	r1, [r7, #16]
 80012f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80012fa:	fb01 f303 	mul.w	r3, r1, r3
 80012fe:	441a      	add	r2, r3
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	2200      	movs	r2, #0
 8001308:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800131a:	3b01      	subs	r3, #1
 800131c:	6939      	ldr	r1, [r7, #16]
 800131e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001320:	fb01 f303 	mul.w	r3, r1, r3
 8001324:	441a      	add	r2, r3
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	22ff      	movs	r2, #255	; 0xff
 800132e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	22ff      	movs	r2, #255	; 0xff
 8001336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d114      	bne.n	800136a <xQueueGenericReset+0xce>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d01a      	beq.n	800137e <xQueueGenericReset+0xe2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	3310      	adds	r3, #16
 800134c:	4618      	mov	r0, r3
 800134e:	f001 f96d 	bl	800262c <xTaskRemoveFromEventList>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d012      	beq.n	800137e <xQueueGenericReset+0xe2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <xQueueGenericReset+0x110>)
 800135a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	f3bf 8f4f 	dsb	sy
 8001364:	f3bf 8f6f 	isb	sy
 8001368:	e009      	b.n	800137e <xQueueGenericReset+0xe2>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	3310      	adds	r3, #16
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fb00 	bl	8000974 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	3324      	adds	r3, #36	; 0x24
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fafb 	bl	8000974 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800137e:	f7ff fcdd 	bl	8000d3c <vPortExitCritical>
 8001382:	e001      	b.n	8001388 <xQueueGenericReset+0xec>
    }
    else
    {
        xReturn = pdFAIL;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d109      	bne.n	80013a2 <xQueueGenericReset+0x106>
 800138e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001392:	f383 8811 	msr	BASEPRI, r3
 8001396:	f3bf 8f6f 	isb	sy
 800139a:	f3bf 8f4f 	dsb	sy
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	e7fe      	b.n	80013a0 <xQueueGenericReset+0x104>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80013a2:	697b      	ldr	r3, [r7, #20]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	e000ed04 	.word	0xe000ed04

080013b0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	; 0x28
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	4613      	mov	r3, r2
 80013bc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d02b      	beq.n	8001420 <xQueueGenericCreate+0x70>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	fbb2 f2f3 	udiv	r2, r2, r3
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d323      	bcc.n	8001420 <xQueueGenericCreate+0x70>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80013e0:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80013e4:	d81c      	bhi.n	8001420 <xQueueGenericCreate+0x70>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	68ba      	ldr	r2, [r7, #8]
 80013ea:	fb02 f303 	mul.w	r3, r2, r3
 80013ee:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	3350      	adds	r3, #80	; 0x50
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fd8d 	bl	8000f14 <pvPortMalloc>
 80013fa:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d01b      	beq.n	800143a <xQueueGenericCreate+0x8a>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3350      	adds	r3, #80	; 0x50
 800140a:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800140c:	79fa      	ldrb	r2, [r7, #7]
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	4613      	mov	r3, r2
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	68b9      	ldr	r1, [r7, #8]
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f000 f813 	bl	8001444 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800141e:	e00c      	b.n	800143a <xQueueGenericCreate+0x8a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d109      	bne.n	800143a <xQueueGenericCreate+0x8a>
 8001426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800142a:	f383 8811 	msr	BASEPRI, r3
 800142e:	f3bf 8f6f 	isb	sy
 8001432:	f3bf 8f4f 	dsb	sy
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	e7fe      	b.n	8001438 <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800143a:	69fb      	ldr	r3, [r7, #28]
    }
 800143c:	4618      	mov	r0, r3
 800143e:	3720      	adds	r7, #32
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
 8001450:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d103      	bne.n	8001460 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	e002      	b.n	8001466 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001472:	2101      	movs	r1, #1
 8001474:	69b8      	ldr	r0, [r7, #24]
 8001476:	f7ff ff11 	bl	800129c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	78fa      	ldrb	r2, [r7, #3]
 800147e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 800148a:	b580      	push	{r7, lr}
 800148c:	b084      	sub	sp, #16
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]

        if( ( uxMaxCount != 0 ) &&
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d010      	beq.n	80014c0 <xQueueCreateCountingSemaphore+0x36>
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d80c      	bhi.n	80014c0 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80014a6:	2202      	movs	r2, #2
 80014a8:	2100      	movs	r1, #0
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ff80 	bl	80013b0 <xQueueGenericCreate>
 80014b0:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d010      	beq.n	80014da <xQueueCreateCountingSemaphore+0x50>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	639a      	str	r2, [r3, #56]	; 0x38
            if( xHandle != NULL )
 80014be:	e00c      	b.n	80014da <xQueueCreateCountingSemaphore+0x50>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d109      	bne.n	80014da <xQueueCreateCountingSemaphore+0x50>
 80014c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014ca:	f383 8811 	msr	BASEPRI, r3
 80014ce:	f3bf 8f6f 	isb	sy
 80014d2:	f3bf 8f4f 	dsb	sy
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	e7fe      	b.n	80014d8 <xQueueCreateCountingSemaphore+0x4e>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 80014da:	68fb      	ldr	r3, [r7, #12]
    }
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <xQueueGiveFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b090      	sub	sp, #64	; 0x40
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	63bb      	str	r3, [r7, #56]	; 0x38
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 80014f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d109      	bne.n	800150c <xQueueGiveFromISR+0x28>
 80014f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014fc:	f383 8811 	msr	BASEPRI, r3
 8001500:	f3bf 8f6f 	isb	sy
 8001504:	f3bf 8f4f 	dsb	sy
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
 800150a:	e7fe      	b.n	800150a <xQueueGiveFromISR+0x26>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800150c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	2b00      	cmp	r3, #0
 8001512:	d009      	beq.n	8001528 <xQueueGiveFromISR+0x44>
 8001514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001518:	f383 8811 	msr	BASEPRI, r3
 800151c:	f3bf 8f6f 	isb	sy
 8001520:	f3bf 8f4f 	dsb	sy
 8001524:	623b      	str	r3, [r7, #32]
 8001526:	e7fe      	b.n	8001526 <xQueueGiveFromISR+0x42>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8001528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d103      	bne.n	8001538 <xQueueGiveFromISR+0x54>
 8001530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <xQueueGiveFromISR+0x58>
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <xQueueGiveFromISR+0x5a>
 800153c:	2300      	movs	r3, #0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d109      	bne.n	8001556 <xQueueGiveFromISR+0x72>
 8001542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001546:	f383 8811 	msr	BASEPRI, r3
 800154a:	f3bf 8f6f 	isb	sy
 800154e:	f3bf 8f4f 	dsb	sy
 8001552:	61fb      	str	r3, [r7, #28]
 8001554:	e7fe      	b.n	8001554 <xQueueGiveFromISR+0x70>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001556:	f7ff fc9f 	bl	8000e98 <vPortValidateInterruptPriority>
        __asm volatile
 800155a:	f3ef 8211 	mrs	r2, BASEPRI
 800155e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001562:	f383 8811 	msr	BASEPRI, r3
 8001566:	f3bf 8f6f 	isb	sy
 800156a:	f3bf 8f4f 	dsb	sy
 800156e:	61ba      	str	r2, [r7, #24]
 8001570:	617b      	str	r3, [r7, #20]
        return ulOriginalBASEPRI;
 8001572:	69bb      	ldr	r3, [r7, #24]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001574:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157a:	633b      	str	r3, [r7, #48]	; 0x30

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 800157c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800157e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001582:	429a      	cmp	r2, r3
 8001584:	d941      	bls.n	800160a <xQueueGiveFromISR+0x126>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8001586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001588:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800158c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001596:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8001598:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800159c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a0:	d112      	bne.n	80015c8 <xQueueGiveFromISR+0xe4>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80015a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d02c      	beq.n	8001604 <xQueueGiveFromISR+0x120>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80015aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ac:	3324      	adds	r3, #36	; 0x24
 80015ae:	4618      	mov	r0, r3
 80015b0:	f001 f83c 	bl	800262c <xTaskRemoveFromEventList>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d024      	beq.n	8001604 <xQueueGiveFromISR+0x120>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d021      	beq.n	8001604 <xQueueGiveFromISR+0x120>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	2201      	movs	r2, #1
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	e01d      	b.n	8001604 <xQueueGiveFromISR+0x120>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 80015c8:	f000 fe4c 	bl	8002264 <uxTaskGetNumberOfTasks>
 80015cc:	62b8      	str	r0, [r7, #40]	; 0x28
 80015ce:	f997 202f 	ldrsb.w	r2, [r7, #47]	; 0x2f
 80015d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d215      	bcs.n	8001604 <xQueueGiveFromISR+0x120>
 80015d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80015dc:	2b7f      	cmp	r3, #127	; 0x7f
 80015de:	d109      	bne.n	80015f4 <xQueueGiveFromISR+0x110>
        __asm volatile
 80015e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015e4:	f383 8811 	msr	BASEPRI, r3
 80015e8:	f3bf 8f6f 	isb	sy
 80015ec:	f3bf 8f4f 	dsb	sy
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	e7fe      	b.n	80015f2 <xQueueGiveFromISR+0x10e>
 80015f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015f8:	3301      	adds	r3, #1
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	b25a      	sxtb	r2, r3
 80015fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8001604:	2301      	movs	r3, #1
 8001606:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001608:	e001      	b.n	800160e <xQueueGiveFromISR+0x12a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800160a:	2300      	movs	r3, #0
 800160c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800160e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001610:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800161a:	4618      	mov	r0, r3
 800161c:	3740      	adds	r7, #64	; 0x40
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08c      	sub	sp, #48	; 0x30
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001630:	2300      	movs	r3, #0
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163a:	2b00      	cmp	r3, #0
 800163c:	d109      	bne.n	8001652 <xQueueReceive+0x2e>
        __asm volatile
 800163e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001642:	f383 8811 	msr	BASEPRI, r3
 8001646:	f3bf 8f6f 	isb	sy
 800164a:	f3bf 8f4f 	dsb	sy
 800164e:	623b      	str	r3, [r7, #32]
 8001650:	e7fe      	b.n	8001650 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d103      	bne.n	8001660 <xQueueReceive+0x3c>
 8001658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <xQueueReceive+0x40>
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <xQueueReceive+0x42>
 8001664:	2300      	movs	r3, #0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d109      	bne.n	800167e <xQueueReceive+0x5a>
 800166a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800166e:	f383 8811 	msr	BASEPRI, r3
 8001672:	f3bf 8f6f 	isb	sy
 8001676:	f3bf 8f4f 	dsb	sy
 800167a:	61fb      	str	r3, [r7, #28]
 800167c:	e7fe      	b.n	800167c <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800167e:	f001 f9e1 	bl	8002a44 <xTaskGetSchedulerState>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <xQueueReceive+0x6a>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <xQueueReceive+0x6e>
 800168e:	2301      	movs	r3, #1
 8001690:	e000      	b.n	8001694 <xQueueReceive+0x70>
 8001692:	2300      	movs	r3, #0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d109      	bne.n	80016ac <xQueueReceive+0x88>
 8001698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800169c:	f383 8811 	msr	BASEPRI, r3
 80016a0:	f3bf 8f6f 	isb	sy
 80016a4:	f3bf 8f4f 	dsb	sy
 80016a8:	61bb      	str	r3, [r7, #24]
 80016aa:	e7fe      	b.n	80016aa <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80016ac:	f7ff fb18 	bl	8000ce0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80016b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d01f      	beq.n	80016fc <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016c0:	f000 f9bb 	bl	8001a3a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	1e5a      	subs	r2, r3, #1
 80016c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ca:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80016cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00f      	beq.n	80016f4 <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80016d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d6:	3310      	adds	r3, #16
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 ffa7 	bl	800262c <xTaskRemoveFromEventList>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d007      	beq.n	80016f4 <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80016e4:	4b3c      	ldr	r3, [pc, #240]	; (80017d8 <xQueueReceive+0x1b4>)
 80016e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	f3bf 8f4f 	dsb	sy
 80016f0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80016f4:	f7ff fb22 	bl	8000d3c <vPortExitCritical>
                return pdPASS;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e069      	b.n	80017d0 <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d103      	bne.n	800170a <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001702:	f7ff fb1b 	bl	8000d3c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001706:	2300      	movs	r3, #0
 8001708:	e062      	b.n	80017d0 <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 800170a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170c:	2b00      	cmp	r3, #0
 800170e:	d106      	bne.n	800171e <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001710:	f107 0310 	add.w	r3, r7, #16
 8001714:	4618      	mov	r0, r3
 8001716:	f001 f85f 	bl	80027d8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800171a:	2301      	movs	r3, #1
 800171c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800171e:	f7ff fb0d 	bl	8000d3c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001722:	f000 fc87 	bl	8002034 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001726:	f7ff fadb 	bl	8000ce0 <vPortEnterCritical>
 800172a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001730:	b25b      	sxtb	r3, r3
 8001732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001736:	d103      	bne.n	8001740 <xQueueReceive+0x11c>
 8001738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001742:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001746:	b25b      	sxtb	r3, r3
 8001748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800174c:	d103      	bne.n	8001756 <xQueueReceive+0x132>
 800174e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001756:	f7ff faf1 	bl	8000d3c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800175a:	1d3a      	adds	r2, r7, #4
 800175c:	f107 0310 	add.w	r3, r7, #16
 8001760:	4611      	mov	r1, r2
 8001762:	4618      	mov	r0, r3
 8001764:	f001 f84e 	bl	8002804 <xTaskCheckForTimeOut>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d123      	bne.n	80017b6 <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800176e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001770:	f000 f9db 	bl	8001b2a <prvIsQueueEmpty>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d017      	beq.n	80017aa <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800177a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800177c:	3324      	adds	r3, #36	; 0x24
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	4611      	mov	r1, r2
 8001782:	4618      	mov	r0, r3
 8001784:	f000 feea 	bl	800255c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800178a:	f000 f97c 	bl	8001a86 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800178e:	f000 fc5f 	bl	8002050 <xTaskResumeAll>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d189      	bne.n	80016ac <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <xQueueReceive+0x1b4>)
 800179a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	f3bf 8f4f 	dsb	sy
 80017a4:	f3bf 8f6f 	isb	sy
 80017a8:	e780      	b.n	80016ac <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80017aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017ac:	f000 f96b 	bl	8001a86 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80017b0:	f000 fc4e 	bl	8002050 <xTaskResumeAll>
 80017b4:	e77a      	b.n	80016ac <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80017b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017b8:	f000 f965 	bl	8001a86 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80017bc:	f000 fc48 	bl	8002050 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80017c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017c2:	f000 f9b2 	bl	8001b2a <prvIsQueueEmpty>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f43f af6f 	beq.w	80016ac <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80017ce:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3730      	adds	r7, #48	; 0x30
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	e000ed04 	.word	0xe000ed04

080017dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08c      	sub	sp, #48	; 0x30
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d109      	bne.n	800180c <xQueueSemaphoreTake+0x30>
 80017f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017fc:	f383 8811 	msr	BASEPRI, r3
 8001800:	f3bf 8f6f 	isb	sy
 8001804:	f3bf 8f4f 	dsb	sy
 8001808:	61bb      	str	r3, [r7, #24]
 800180a:	e7fe      	b.n	800180a <xQueueSemaphoreTake+0x2e>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	2b00      	cmp	r3, #0
 8001812:	d009      	beq.n	8001828 <xQueueSemaphoreTake+0x4c>
 8001814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001818:	f383 8811 	msr	BASEPRI, r3
 800181c:	f3bf 8f6f 	isb	sy
 8001820:	f3bf 8f4f 	dsb	sy
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	e7fe      	b.n	8001826 <xQueueSemaphoreTake+0x4a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001828:	f001 f90c 	bl	8002a44 <xTaskGetSchedulerState>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d102      	bne.n	8001838 <xQueueSemaphoreTake+0x5c>
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <xQueueSemaphoreTake+0x60>
 8001838:	2301      	movs	r3, #1
 800183a:	e000      	b.n	800183e <xQueueSemaphoreTake+0x62>
 800183c:	2300      	movs	r3, #0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d109      	bne.n	8001856 <xQueueSemaphoreTake+0x7a>
 8001842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001846:	f383 8811 	msr	BASEPRI, r3
 800184a:	f3bf 8f6f 	isb	sy
 800184e:	f3bf 8f4f 	dsb	sy
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	e7fe      	b.n	8001854 <xQueueSemaphoreTake+0x78>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001856:	f7ff fa43 	bl	8000ce0 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800185e:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d024      	beq.n	80018b0 <xQueueSemaphoreTake+0xd4>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	1e5a      	subs	r2, r3, #1
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d104      	bne.n	8001880 <xQueueSemaphoreTake+0xa4>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001876:	f001 fa57 	bl	8002d28 <pvTaskIncrementMutexHeldCount>
 800187a:	4602      	mov	r2, r0
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00f      	beq.n	80018a8 <xQueueSemaphoreTake+0xcc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	3310      	adds	r3, #16
 800188c:	4618      	mov	r0, r3
 800188e:	f000 fecd 	bl	800262c <xTaskRemoveFromEventList>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d007      	beq.n	80018a8 <xQueueSemaphoreTake+0xcc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001898:	4b4c      	ldr	r3, [pc, #304]	; (80019cc <xQueueSemaphoreTake+0x1f0>)
 800189a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	f3bf 8f4f 	dsb	sy
 80018a4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80018a8:	f7ff fa48 	bl	8000d3c <vPortExitCritical>
                return pdPASS;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e089      	b.n	80019c4 <xQueueSemaphoreTake+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d103      	bne.n	80018be <xQueueSemaphoreTake+0xe2>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80018b6:	f7ff fa41 	bl	8000d3c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e082      	b.n	80019c4 <xQueueSemaphoreTake+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80018be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d106      	bne.n	80018d2 <xQueueSemaphoreTake+0xf6>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80018c4:	f107 0308 	add.w	r3, r7, #8
 80018c8:	4618      	mov	r0, r3
 80018ca:	f000 ff85 	bl	80027d8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80018ce:	2301      	movs	r3, #1
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80018d2:	f7ff fa33 	bl	8000d3c <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80018d6:	f000 fbad 	bl	8002034 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80018da:	f7ff fa01 	bl	8000ce0 <vPortEnterCritical>
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018e4:	b25b      	sxtb	r3, r3
 80018e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ea:	d103      	bne.n	80018f4 <xQueueSemaphoreTake+0x118>
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018fa:	b25b      	sxtb	r3, r3
 80018fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001900:	d103      	bne.n	800190a <xQueueSemaphoreTake+0x12e>
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800190a:	f7ff fa17 	bl	8000d3c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800190e:	463a      	mov	r2, r7
 8001910:	f107 0308 	add.w	r3, r7, #8
 8001914:	4611      	mov	r1, r2
 8001916:	4618      	mov	r0, r3
 8001918:	f000 ff74 	bl	8002804 <xTaskCheckForTimeOut>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d132      	bne.n	8001988 <xQueueSemaphoreTake+0x1ac>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001922:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001924:	f000 f901 	bl	8001b2a <prvIsQueueEmpty>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d026      	beq.n	800197c <xQueueSemaphoreTake+0x1a0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d109      	bne.n	800194a <xQueueSemaphoreTake+0x16e>
                    {
                        taskENTER_CRITICAL();
 8001936:	f7ff f9d3 	bl	8000ce0 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	4618      	mov	r0, r3
 8001940:	f001 f89e 	bl	8002a80 <xTaskPriorityInherit>
 8001944:	62b8      	str	r0, [r7, #40]	; 0x28
                        }
                        taskEXIT_CRITICAL();
 8001946:	f7ff f9f9 	bl	8000d3c <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	3324      	adds	r3, #36	; 0x24
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	4611      	mov	r1, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f000 fe02 	bl	800255c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001958:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800195a:	f000 f894 	bl	8001a86 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800195e:	f000 fb77 	bl	8002050 <xTaskResumeAll>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	f47f af76 	bne.w	8001856 <xQueueSemaphoreTake+0x7a>
                {
                    portYIELD_WITHIN_API();
 800196a:	4b18      	ldr	r3, [pc, #96]	; (80019cc <xQueueSemaphoreTake+0x1f0>)
 800196c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	f3bf 8f4f 	dsb	sy
 8001976:	f3bf 8f6f 	isb	sy
 800197a:	e76c      	b.n	8001856 <xQueueSemaphoreTake+0x7a>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800197c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800197e:	f000 f882 	bl	8001a86 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001982:	f000 fb65 	bl	8002050 <xTaskResumeAll>
 8001986:	e766      	b.n	8001856 <xQueueSemaphoreTake+0x7a>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8001988:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800198a:	f000 f87c 	bl	8001a86 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800198e:	f000 fb5f 	bl	8002050 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001992:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001994:	f000 f8c9 	bl	8001b2a <prvIsQueueEmpty>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	f43f af5b 	beq.w	8001856 <xQueueSemaphoreTake+0x7a>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80019a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00d      	beq.n	80019c2 <xQueueSemaphoreTake+0x1e6>
                    {
                        taskENTER_CRITICAL();
 80019a6:	f7ff f99b 	bl	8000ce0 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80019aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019ac:	f000 f82d 	bl	8001a0a <prvGetDisinheritPriorityAfterTimeout>
 80019b0:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	69f9      	ldr	r1, [r7, #28]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f001 f8ff 	bl	8002bbc <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 80019be:	f7ff f9bd 	bl	8000d3c <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80019c2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3730      	adds	r7, #48	; 0x30
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	e000ed04 	.word	0xe000ed04

080019d0 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d109      	bne.n	80019f2 <uxQueueMessagesWaiting+0x22>
 80019de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019e2:	f383 8811 	msr	BASEPRI, r3
 80019e6:	f3bf 8f6f 	isb	sy
 80019ea:	f3bf 8f4f 	dsb	sy
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	e7fe      	b.n	80019f0 <uxQueueMessagesWaiting+0x20>

    taskENTER_CRITICAL();
 80019f2:	f7ff f975 	bl	8000ce0 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019fa:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80019fc:	f7ff f99e 	bl	8000d3c <vPortExitCritical>

    return uxReturn;
 8001a00:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8001a0a:	b480      	push	{r7}
 8001a0c:	b085      	sub	sp, #20
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d006      	beq.n	8001a28 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f1c3 0305 	rsb	r3, r3, #5
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	e001      	b.n	8001a2c <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
    }
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d018      	beq.n	8001a7e <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	441a      	add	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d303      	bcc.n	8001a6e <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68d9      	ldr	r1, [r3, #12]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	461a      	mov	r2, r3
 8001a78:	6838      	ldr	r0, [r7, #0]
 8001a7a:	f002 f971 	bl	8003d60 <memcpy>
    }
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b084      	sub	sp, #16
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001a8e:	f7ff f927 	bl	8000ce0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a98:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001a9a:	e011      	b.n	8001ac0 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d012      	beq.n	8001aca <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3324      	adds	r3, #36	; 0x24
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 fdbf 	bl	800262c <xTaskRemoveFromEventList>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001ab4:	f000 ff0a 	bl	80028cc <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	dce9      	bgt.n	8001a9c <prvUnlockQueue+0x16>
 8001ac8:	e000      	b.n	8001acc <prvUnlockQueue+0x46>
                    break;
 8001aca:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	22ff      	movs	r2, #255	; 0xff
 8001ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001ad4:	f7ff f932 	bl	8000d3c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001ad8:	f7ff f902 	bl	8000ce0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ae2:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001ae4:	e011      	b.n	8001b0a <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d012      	beq.n	8001b14 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3310      	adds	r3, #16
 8001af2:	4618      	mov	r0, r3
 8001af4:	f000 fd9a 	bl	800262c <xTaskRemoveFromEventList>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001afe:	f000 fee5 	bl	80028cc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001b02:	7bbb      	ldrb	r3, [r7, #14]
 8001b04:	3b01      	subs	r3, #1
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001b0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	dce9      	bgt.n	8001ae6 <prvUnlockQueue+0x60>
 8001b12:	e000      	b.n	8001b16 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001b14:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	22ff      	movs	r2, #255	; 0xff
 8001b1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001b1e:	f7ff f90d 	bl	8000d3c <vPortExitCritical>
}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b084      	sub	sp, #16
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001b32:	f7ff f8d5 	bl	8000ce0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d102      	bne.n	8001b44 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	e001      	b.n	8001b48 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001b48:	f7ff f8f8 	bl	8000d3c <vPortExitCritical>

    return xReturn;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001b58:	b480      	push	{r7}
 8001b5a:	b087      	sub	sp, #28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d109      	bne.n	8001b80 <vQueueAddToRegistry+0x28>
 8001b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b70:	f383 8811 	msr	BASEPRI, r3
 8001b74:	f3bf 8f6f 	isb	sy
 8001b78:	f3bf 8f4f 	dsb	sy
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	e7fe      	b.n	8001b7e <vQueueAddToRegistry+0x26>

        if( pcQueueName != NULL )
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d024      	beq.n	8001bd0 <vQueueAddToRegistry+0x78>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	e01e      	b.n	8001bca <vQueueAddToRegistry+0x72>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001b8c:	4a18      	ldr	r2, [pc, #96]	; (8001bf0 <vQueueAddToRegistry+0x98>)
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4413      	add	r3, r2
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d105      	bne.n	8001ba8 <vQueueAddToRegistry+0x50>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4a13      	ldr	r2, [pc, #76]	; (8001bf0 <vQueueAddToRegistry+0x98>)
 8001ba2:	4413      	add	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
                    break;
 8001ba6:	e013      	b.n	8001bd0 <vQueueAddToRegistry+0x78>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10a      	bne.n	8001bc4 <vQueueAddToRegistry+0x6c>
 8001bae:	4a10      	ldr	r2, [pc, #64]	; (8001bf0 <vQueueAddToRegistry+0x98>)
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d104      	bne.n	8001bc4 <vQueueAddToRegistry+0x6c>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	4a0c      	ldr	r2, [pc, #48]	; (8001bf0 <vQueueAddToRegistry+0x98>)
 8001bc0:	4413      	add	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	2b07      	cmp	r3, #7
 8001bce:	d9dd      	bls.n	8001b8c <vQueueAddToRegistry+0x34>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d005      	beq.n	8001be2 <vQueueAddToRegistry+0x8a>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8001be2:	bf00      	nop
 8001be4:	371c      	adds	r7, #28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	2000c9b0 	.word	0x2000c9b0

08001bf4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001c04:	f7ff f86c 	bl	8000ce0 <vPortEnterCritical>
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c0e:	b25b      	sxtb	r3, r3
 8001c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c14:	d103      	bne.n	8001c1e <vQueueWaitForMessageRestricted+0x2a>
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c24:	b25b      	sxtb	r3, r3
 8001c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c2a:	d103      	bne.n	8001c34 <vQueueWaitForMessageRestricted+0x40>
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c34:	f7ff f882 	bl	8000d3c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d106      	bne.n	8001c4e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	3324      	adds	r3, #36	; 0x24
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	68b9      	ldr	r1, [r7, #8]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 fcab 	bl	80025a4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001c4e:	6978      	ldr	r0, [r7, #20]
 8001c50:	f7ff ff19 	bl	8001a86 <prvUnlockQueue>
    }
 8001c54:	bf00      	nop
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08c      	sub	sp, #48	; 0x30
 8001c60:	af04      	add	r7, sp, #16
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001c6c:	88fb      	ldrh	r3, [r7, #6]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff f94f 	bl	8000f14 <pvPortMalloc>
 8001c76:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d013      	beq.n	8001ca6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001c7e:	2058      	movs	r0, #88	; 0x58
 8001c80:	f7ff f948 	bl	8000f14 <pvPortMalloc>
 8001c84:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d008      	beq.n	8001c9e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001c8c:	2258      	movs	r2, #88	; 0x58
 8001c8e:	2100      	movs	r1, #0
 8001c90:	69f8      	ldr	r0, [r7, #28]
 8001c92:	f002 f870 	bl	8003d76 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c9c:	e005      	b.n	8001caa <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001c9e:	6978      	ldr	r0, [r7, #20]
 8001ca0:	f7ff f9f0 	bl	8001084 <vPortFree>
 8001ca4:	e001      	b.n	8001caa <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d013      	beq.n	8001cd8 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001cb0:	88fa      	ldrh	r2, [r7, #6]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	9303      	str	r3, [sp, #12]
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	9302      	str	r3, [sp, #8]
 8001cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cbc:	9301      	str	r3, [sp, #4]
 8001cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 f80e 	bl	8001ce8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001ccc:	69f8      	ldr	r0, [r7, #28]
 8001cce:	f000 f897 	bl	8001e00 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	61bb      	str	r3, [r7, #24]
 8001cd6:	e002      	b.n	8001cde <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cdc:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001cde:	69bb      	ldr	r3, [r7, #24]
    }
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3720      	adds	r7, #32
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	461a      	mov	r2, r3
 8001d00:	21a5      	movs	r1, #165	; 0xa5
 8001d02:	f002 f838 	bl	8003d76 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d10:	3b01      	subs	r3, #1
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	f023 0307 	bic.w	r3, r3, #7
 8001d1e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d009      	beq.n	8001d3e <prvInitialiseNewTask+0x56>
 8001d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d2e:	f383 8811 	msr	BASEPRI, r3
 8001d32:	f3bf 8f6f 	isb	sy
 8001d36:	f3bf 8f4f 	dsb	sy
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	e7fe      	b.n	8001d3c <prvInitialiseNewTask+0x54>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d01e      	beq.n	8001d82 <prvInitialiseNewTask+0x9a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d44:	2300      	movs	r3, #0
 8001d46:	61fb      	str	r3, [r7, #28]
 8001d48:	e012      	b.n	8001d70 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	4413      	add	r3, r2
 8001d50:	7819      	ldrb	r1, [r3, #0]
 8001d52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	4413      	add	r3, r2
 8001d58:	3334      	adds	r3, #52	; 0x34
 8001d5a:	460a      	mov	r2, r1
 8001d5c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	4413      	add	r3, r2
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d006      	beq.n	8001d78 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	2b09      	cmp	r3, #9
 8001d74:	d9e9      	bls.n	8001d4a <prvInitialiseNewTask+0x62>
 8001d76:	e000      	b.n	8001d7a <prvInitialiseNewTask+0x92>
            {
                break;
 8001d78:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	d909      	bls.n	8001d9c <prvInitialiseNewTask+0xb4>
 8001d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d8c:	f383 8811 	msr	BASEPRI, r3
 8001d90:	f3bf 8f6f 	isb	sy
 8001d94:	f3bf 8f4f 	dsb	sy
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	e7fe      	b.n	8001d9a <prvInitialiseNewTask+0xb2>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d901      	bls.n	8001da6 <prvInitialiseNewTask+0xbe>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001da2:	2304      	movs	r3, #4
 8001da4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001daa:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001db0:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db4:	3304      	adds	r3, #4
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fdfc 	bl	80009b4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dbe:	3318      	adds	r3, #24
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fdf7 	bl	80009b4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dca:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dce:	f1c3 0205 	rsb	r2, r3, #5
 8001dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dda:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	68f9      	ldr	r1, [r7, #12]
 8001de0:	69b8      	ldr	r0, [r7, #24]
 8001de2:	f7fe fe57 	bl	8000a94 <pxPortInitialiseStack>
 8001de6:	4602      	mov	r2, r0
 8001de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dea:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d002      	beq.n	8001df8 <prvInitialiseNewTask+0x110>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001df6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001df8:	bf00      	nop
 8001dfa:	3720      	adds	r7, #32
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001e08:	f7fe ff6a 	bl	8000ce0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001e0c:	4b40      	ldr	r3, [pc, #256]	; (8001f10 <prvAddNewTaskToReadyList+0x110>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	3301      	adds	r3, #1
 8001e12:	4a3f      	ldr	r2, [pc, #252]	; (8001f10 <prvAddNewTaskToReadyList+0x110>)
 8001e14:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001e16:	4b3f      	ldr	r3, [pc, #252]	; (8001f14 <prvAddNewTaskToReadyList+0x114>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d109      	bne.n	8001e32 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001e1e:	4a3d      	ldr	r2, [pc, #244]	; (8001f14 <prvAddNewTaskToReadyList+0x114>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001e24:	4b3a      	ldr	r3, [pc, #232]	; (8001f10 <prvAddNewTaskToReadyList+0x110>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d110      	bne.n	8001e4e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001e2c:	f000 fd72 	bl	8002914 <prvInitialiseTaskLists>
 8001e30:	e00d      	b.n	8001e4e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001e32:	4b39      	ldr	r3, [pc, #228]	; (8001f18 <prvAddNewTaskToReadyList+0x118>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d109      	bne.n	8001e4e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001e3a:	4b36      	ldr	r3, [pc, #216]	; (8001f14 <prvAddNewTaskToReadyList+0x114>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d802      	bhi.n	8001e4e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001e48:	4a32      	ldr	r2, [pc, #200]	; (8001f14 <prvAddNewTaskToReadyList+0x114>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001e4e:	4b33      	ldr	r3, [pc, #204]	; (8001f1c <prvAddNewTaskToReadyList+0x11c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	3301      	adds	r3, #1
 8001e54:	4a31      	ldr	r2, [pc, #196]	; (8001f1c <prvAddNewTaskToReadyList+0x11c>)
 8001e56:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001e58:	4b30      	ldr	r3, [pc, #192]	; (8001f1c <prvAddNewTaskToReadyList+0x11c>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	2201      	movs	r2, #1
 8001e66:	409a      	lsls	r2, r3
 8001e68:	4b2d      	ldr	r3, [pc, #180]	; (8001f20 <prvAddNewTaskToReadyList+0x120>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	4a2c      	ldr	r2, [pc, #176]	; (8001f20 <prvAddNewTaskToReadyList+0x120>)
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e76:	492b      	ldr	r1, [pc, #172]	; (8001f24 <prvAddNewTaskToReadyList+0x124>)
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	3304      	adds	r3, #4
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	3204      	adds	r2, #4
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	1d1a      	adds	r2, r3, #4
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4a1b      	ldr	r2, [pc, #108]	; (8001f24 <prvAddNewTaskToReadyList+0x124>)
 8001eb6:	441a      	add	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	615a      	str	r2, [r3, #20]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec0:	4918      	ldr	r1, [pc, #96]	; (8001f24 <prvAddNewTaskToReadyList+0x124>)
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	1c59      	adds	r1, r3, #1
 8001ed0:	4814      	ldr	r0, [pc, #80]	; (8001f24 <prvAddNewTaskToReadyList+0x124>)
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4403      	add	r3, r0
 8001edc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001ede:	f7fe ff2d 	bl	8000d3c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001ee2:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <prvAddNewTaskToReadyList+0x118>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00e      	beq.n	8001f08 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001eea:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <prvAddNewTaskToReadyList+0x114>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d207      	bcs.n	8001f08 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <prvAddNewTaskToReadyList+0x128>)
 8001efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	f3bf 8f4f 	dsb	sy
 8001f04:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001f08:	bf00      	nop
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	2000c944 	.word	0x2000c944
 8001f14:	2000c86c 	.word	0x2000c86c
 8001f18:	2000c950 	.word	0x2000c950
 8001f1c:	2000c960 	.word	0x2000c960
 8001f20:	2000c94c 	.word	0x2000c94c
 8001f24:	2000c870 	.word	0x2000c870
 8001f28:	e000ed04 	.word	0xe000ed04

08001f2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d016      	beq.n	8001f6c <vTaskDelay+0x40>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001f3e:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <vTaskDelay+0x60>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d009      	beq.n	8001f5a <vTaskDelay+0x2e>
 8001f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f4a:	f383 8811 	msr	BASEPRI, r3
 8001f4e:	f3bf 8f6f 	isb	sy
 8001f52:	f3bf 8f4f 	dsb	sy
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	e7fe      	b.n	8001f58 <vTaskDelay+0x2c>
            vTaskSuspendAll();
 8001f5a:	f000 f86b 	bl	8002034 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001f5e:	2100      	movs	r1, #0
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 fef5 	bl	8002d50 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001f66:	f000 f873 	bl	8002050 <xTaskResumeAll>
 8001f6a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d107      	bne.n	8001f82 <vTaskDelay+0x56>
        {
            portYIELD_WITHIN_API();
 8001f72:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <vTaskDelay+0x64>)
 8001f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	f3bf 8f4f 	dsb	sy
 8001f7e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001f82:	bf00      	nop
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	2000c96c 	.word	0x2000c96c
 8001f90:	e000ed04 	.word	0xe000ed04

08001f94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8001f9a:	4b1f      	ldr	r3, [pc, #124]	; (8002018 <vTaskStartScheduler+0x84>)
 8001f9c:	9301      	str	r3, [sp, #4]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	2282      	movs	r2, #130	; 0x82
 8001fa6:	491d      	ldr	r1, [pc, #116]	; (800201c <vTaskStartScheduler+0x88>)
 8001fa8:	481d      	ldr	r0, [pc, #116]	; (8002020 <vTaskStartScheduler+0x8c>)
 8001faa:	f7ff fe57 	bl	8001c5c <xTaskCreate>
 8001fae:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d102      	bne.n	8001fbc <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8001fb6:	f000 ff4b 	bl	8002e50 <xTimerCreateTimerTask>
 8001fba:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d115      	bne.n	8001fee <vTaskStartScheduler+0x5a>
 8001fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc6:	f383 8811 	msr	BASEPRI, r3
 8001fca:	f3bf 8f6f 	isb	sy
 8001fce:	f3bf 8f4f 	dsb	sy
 8001fd2:	60bb      	str	r3, [r7, #8]
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001fd4:	4b13      	ldr	r3, [pc, #76]	; (8002024 <vTaskStartScheduler+0x90>)
 8001fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8001fda:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001fdc:	4b12      	ldr	r3, [pc, #72]	; (8002028 <vTaskStartScheduler+0x94>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001fe2:	4b12      	ldr	r3, [pc, #72]	; (800202c <vTaskStartScheduler+0x98>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001fe8:	f7fe fddc 	bl	8000ba4 <xPortStartScheduler>
 8001fec:	e00d      	b.n	800200a <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff4:	d109      	bne.n	800200a <vTaskStartScheduler+0x76>
 8001ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ffa:	f383 8811 	msr	BASEPRI, r3
 8001ffe:	f3bf 8f6f 	isb	sy
 8002002:	f3bf 8f4f 	dsb	sy
 8002006:	607b      	str	r3, [r7, #4]
 8002008:	e7fe      	b.n	8002008 <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <vTaskStartScheduler+0x9c>)
 800200c:	681b      	ldr	r3, [r3, #0]
}
 800200e:	bf00      	nop
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	2000c968 	.word	0x2000c968
 800201c:	08003da0 	.word	0x08003da0
 8002020:	080028e5 	.word	0x080028e5
 8002024:	2000c964 	.word	0x2000c964
 8002028:	2000c950 	.word	0x2000c950
 800202c:	2000c948 	.word	0x2000c948
 8002030:	20000014 	.word	0x20000014

08002034 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <vTaskSuspendAll+0x18>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	3301      	adds	r3, #1
 800203e:	4a03      	ldr	r2, [pc, #12]	; (800204c <vTaskSuspendAll+0x18>)
 8002040:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	2000c96c 	.word	0x2000c96c

08002050 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800205a:	2300      	movs	r3, #0
 800205c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800205e:	4b70      	ldr	r3, [pc, #448]	; (8002220 <xTaskResumeAll+0x1d0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d109      	bne.n	800207a <xTaskResumeAll+0x2a>
 8002066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800206a:	f383 8811 	msr	BASEPRI, r3
 800206e:	f3bf 8f6f 	isb	sy
 8002072:	f3bf 8f4f 	dsb	sy
 8002076:	607b      	str	r3, [r7, #4]
 8002078:	e7fe      	b.n	8002078 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800207a:	f7fe fe31 	bl	8000ce0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800207e:	4b68      	ldr	r3, [pc, #416]	; (8002220 <xTaskResumeAll+0x1d0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	3b01      	subs	r3, #1
 8002084:	4a66      	ldr	r2, [pc, #408]	; (8002220 <xTaskResumeAll+0x1d0>)
 8002086:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002088:	4b65      	ldr	r3, [pc, #404]	; (8002220 <xTaskResumeAll+0x1d0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	f040 80c0 	bne.w	8002212 <xTaskResumeAll+0x1c2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002092:	4b64      	ldr	r3, [pc, #400]	; (8002224 <xTaskResumeAll+0x1d4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 80bb 	beq.w	8002212 <xTaskResumeAll+0x1c2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800209c:	e08a      	b.n	80021b4 <xTaskResumeAll+0x164>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800209e:	4b62      	ldr	r3, [pc, #392]	; (8002228 <xTaskResumeAll+0x1d8>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	69fa      	ldr	r2, [r7, #28]
 80020b2:	6a12      	ldr	r2, [r2, #32]
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	69fa      	ldr	r2, [r7, #28]
 80020bc:	69d2      	ldr	r2, [r2, #28]
 80020be:	605a      	str	r2, [r3, #4]
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	3318      	adds	r3, #24
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d103      	bne.n	80020d4 <xTaskResumeAll+0x84>
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	6a1a      	ldr	r2, [r3, #32]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	605a      	str	r2, [r3, #4]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	2200      	movs	r2, #0
 80020d8:	629a      	str	r2, [r3, #40]	; 0x28
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	1e5a      	subs	r2, r3, #1
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	69fa      	ldr	r2, [r7, #28]
 80020f0:	68d2      	ldr	r2, [r2, #12]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	69fa      	ldr	r2, [r7, #28]
 80020fa:	6892      	ldr	r2, [r2, #8]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3304      	adds	r3, #4
 8002106:	429a      	cmp	r2, r3
 8002108:	d103      	bne.n	8002112 <xTaskResumeAll+0xc2>
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	2200      	movs	r2, #0
 8002116:	615a      	str	r2, [r3, #20]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	1e5a      	subs	r2, r3, #1
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002126:	2201      	movs	r2, #1
 8002128:	409a      	lsls	r2, r3
 800212a:	4b40      	ldr	r3, [pc, #256]	; (800222c <xTaskResumeAll+0x1dc>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4313      	orrs	r3, r2
 8002130:	4a3e      	ldr	r2, [pc, #248]	; (800222c <xTaskResumeAll+0x1dc>)
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002138:	493d      	ldr	r1, [pc, #244]	; (8002230 <xTaskResumeAll+0x1e0>)
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	440b      	add	r3, r1
 8002144:	3304      	adds	r3, #4
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	60da      	str	r2, [r3, #12]
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	69fa      	ldr	r2, [r7, #28]
 800215e:	3204      	adds	r2, #4
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	1d1a      	adds	r2, r3, #4
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4a2e      	ldr	r2, [pc, #184]	; (8002230 <xTaskResumeAll+0x1e0>)
 8002178:	441a      	add	r2, r3
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	615a      	str	r2, [r3, #20]
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002182:	492b      	ldr	r1, [pc, #172]	; (8002230 <xTaskResumeAll+0x1e0>)
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	1c59      	adds	r1, r3, #1
 8002192:	4827      	ldr	r0, [pc, #156]	; (8002230 <xTaskResumeAll+0x1e0>)
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4403      	add	r3, r0
 800219e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a4:	4b23      	ldr	r3, [pc, #140]	; (8002234 <xTaskResumeAll+0x1e4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d302      	bcc.n	80021b4 <xTaskResumeAll+0x164>
                    {
                        xYieldPending = pdTRUE;
 80021ae:	4b22      	ldr	r3, [pc, #136]	; (8002238 <xTaskResumeAll+0x1e8>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80021b4:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <xTaskResumeAll+0x1d8>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f47f af70 	bne.w	800209e <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <xTaskResumeAll+0x178>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80021c4:	f000 fc22 	bl	8002a0c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80021c8:	4b1c      	ldr	r3, [pc, #112]	; (800223c <xTaskResumeAll+0x1ec>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d010      	beq.n	80021f6 <xTaskResumeAll+0x1a6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80021d4:	f000 f852 	bl	800227c <xTaskIncrementTick>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <xTaskResumeAll+0x194>
                            {
                                xYieldPending = pdTRUE;
 80021de:	4b16      	ldr	r3, [pc, #88]	; (8002238 <xTaskResumeAll+0x1e8>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f1      	bne.n	80021d4 <xTaskResumeAll+0x184>

                        xPendedTicks = 0;
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <xTaskResumeAll+0x1ec>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80021f6:	4b10      	ldr	r3, [pc, #64]	; (8002238 <xTaskResumeAll+0x1e8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d009      	beq.n	8002212 <xTaskResumeAll+0x1c2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80021fe:	2301      	movs	r3, #1
 8002200:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002202:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <xTaskResumeAll+0x1f0>)
 8002204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	f3bf 8f4f 	dsb	sy
 800220e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002212:	f7fe fd93 	bl	8000d3c <vPortExitCritical>

    return xAlreadyYielded;
 8002216:	69bb      	ldr	r3, [r7, #24]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3720      	adds	r7, #32
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	2000c96c 	.word	0x2000c96c
 8002224:	2000c944 	.word	0x2000c944
 8002228:	2000c904 	.word	0x2000c904
 800222c:	2000c94c 	.word	0x2000c94c
 8002230:	2000c870 	.word	0x2000c870
 8002234:	2000c86c 	.word	0x2000c86c
 8002238:	2000c958 	.word	0x2000c958
 800223c:	2000c954 	.word	0x2000c954
 8002240:	e000ed04 	.word	0xe000ed04

08002244 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800224a:	4b05      	ldr	r3, [pc, #20]	; (8002260 <xTaskGetTickCount+0x1c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002250:	687b      	ldr	r3, [r7, #4]
}
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	2000c948 	.word	0x2000c948

08002264 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8002268:	4b03      	ldr	r3, [pc, #12]	; (8002278 <uxTaskGetNumberOfTasks+0x14>)
 800226a:	681b      	ldr	r3, [r3, #0]
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	2000c944 	.word	0x2000c944

0800227c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	; 0x28
 8002280:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002282:	2300      	movs	r3, #0
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002286:	4b7d      	ldr	r3, [pc, #500]	; (800247c <xTaskIncrementTick+0x200>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	f040 80eb 	bne.w	8002466 <xTaskIncrementTick+0x1ea>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002290:	4b7b      	ldr	r3, [pc, #492]	; (8002480 <xTaskIncrementTick+0x204>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	3301      	adds	r3, #1
 8002296:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002298:	4a79      	ldr	r2, [pc, #484]	; (8002480 <xTaskIncrementTick+0x204>)
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800229e:	6a3b      	ldr	r3, [r7, #32]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d11f      	bne.n	80022e4 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80022a4:	4b77      	ldr	r3, [pc, #476]	; (8002484 <xTaskIncrementTick+0x208>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d009      	beq.n	80022c2 <xTaskIncrementTick+0x46>
 80022ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b2:	f383 8811 	msr	BASEPRI, r3
 80022b6:	f3bf 8f6f 	isb	sy
 80022ba:	f3bf 8f4f 	dsb	sy
 80022be:	607b      	str	r3, [r7, #4]
 80022c0:	e7fe      	b.n	80022c0 <xTaskIncrementTick+0x44>
 80022c2:	4b70      	ldr	r3, [pc, #448]	; (8002484 <xTaskIncrementTick+0x208>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	61fb      	str	r3, [r7, #28]
 80022c8:	4b6f      	ldr	r3, [pc, #444]	; (8002488 <xTaskIncrementTick+0x20c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a6d      	ldr	r2, [pc, #436]	; (8002484 <xTaskIncrementTick+0x208>)
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	4a6d      	ldr	r2, [pc, #436]	; (8002488 <xTaskIncrementTick+0x20c>)
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	4b6d      	ldr	r3, [pc, #436]	; (800248c <xTaskIncrementTick+0x210>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	3301      	adds	r3, #1
 80022dc:	4a6b      	ldr	r2, [pc, #428]	; (800248c <xTaskIncrementTick+0x210>)
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	f000 fb94 	bl	8002a0c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80022e4:	4b6a      	ldr	r3, [pc, #424]	; (8002490 <xTaskIncrementTick+0x214>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6a3a      	ldr	r2, [r7, #32]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	f0c0 80a6 	bcc.w	800243c <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022f0:	4b64      	ldr	r3, [pc, #400]	; (8002484 <xTaskIncrementTick+0x208>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d104      	bne.n	8002304 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022fa:	4b65      	ldr	r3, [pc, #404]	; (8002490 <xTaskIncrementTick+0x214>)
 80022fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002300:	601a      	str	r2, [r3, #0]
                    break;
 8002302:	e09b      	b.n	800243c <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002304:	4b5f      	ldr	r3, [pc, #380]	; (8002484 <xTaskIncrementTick+0x208>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002314:	6a3a      	ldr	r2, [r7, #32]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	429a      	cmp	r2, r3
 800231a:	d203      	bcs.n	8002324 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800231c:	4a5c      	ldr	r2, [pc, #368]	; (8002490 <xTaskIncrementTick+0x214>)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002322:	e08b      	b.n	800243c <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	613b      	str	r3, [r7, #16]
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	68d2      	ldr	r2, [r2, #12]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	6892      	ldr	r2, [r2, #8]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	3304      	adds	r3, #4
 8002346:	429a      	cmp	r2, r3
 8002348:	d103      	bne.n	8002352 <xTaskIncrementTick+0xd6>
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	2200      	movs	r2, #0
 8002356:	615a      	str	r2, [r3, #20]
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	1e5a      	subs	r2, r3, #1
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002366:	2b00      	cmp	r3, #0
 8002368:	d01e      	beq.n	80023a8 <xTaskIncrementTick+0x12c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	6a12      	ldr	r2, [r2, #32]
 8002378:	609a      	str	r2, [r3, #8]
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	69d2      	ldr	r2, [r2, #28]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	3318      	adds	r3, #24
 800238c:	429a      	cmp	r2, r3
 800238e:	d103      	bne.n	8002398 <xTaskIncrementTick+0x11c>
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	6a1a      	ldr	r2, [r3, #32]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	2200      	movs	r2, #0
 800239c:	629a      	str	r2, [r3, #40]	; 0x28
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	1e5a      	subs	r2, r3, #1
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	2201      	movs	r2, #1
 80023ae:	409a      	lsls	r2, r3
 80023b0:	4b38      	ldr	r3, [pc, #224]	; (8002494 <xTaskIncrementTick+0x218>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	4a37      	ldr	r2, [pc, #220]	; (8002494 <xTaskIncrementTick+0x218>)
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023be:	4936      	ldr	r1, [pc, #216]	; (8002498 <xTaskIncrementTick+0x21c>)
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	3304      	adds	r3, #4
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	609a      	str	r2, [r3, #8]
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	3204      	adds	r2, #4
 80023e6:	605a      	str	r2, [r3, #4]
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	1d1a      	adds	r2, r3, #4
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4a26      	ldr	r2, [pc, #152]	; (8002498 <xTaskIncrementTick+0x21c>)
 80023fe:	441a      	add	r2, r3
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	615a      	str	r2, [r3, #20]
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002408:	4923      	ldr	r1, [pc, #140]	; (8002498 <xTaskIncrementTick+0x21c>)
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	1c59      	adds	r1, r3, #1
 8002418:	481f      	ldr	r0, [pc, #124]	; (8002498 <xTaskIncrementTick+0x21c>)
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4403      	add	r3, r0
 8002424:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800242a:	4b1c      	ldr	r3, [pc, #112]	; (800249c <xTaskIncrementTick+0x220>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	429a      	cmp	r2, r3
 8002432:	f67f af5d 	bls.w	80022f0 <xTaskIncrementTick+0x74>
                        {
                            xSwitchRequired = pdTRUE;
 8002436:	2301      	movs	r3, #1
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800243a:	e759      	b.n	80022f0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800243c:	4b17      	ldr	r3, [pc, #92]	; (800249c <xTaskIncrementTick+0x220>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002442:	4915      	ldr	r1, [pc, #84]	; (8002498 <xTaskIncrementTick+0x21c>)
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d901      	bls.n	8002458 <xTaskIncrementTick+0x1dc>
            {
                xSwitchRequired = pdTRUE;
 8002454:	2301      	movs	r3, #1
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002458:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <xTaskIncrementTick+0x224>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d007      	beq.n	8002470 <xTaskIncrementTick+0x1f4>
            {
                xSwitchRequired = pdTRUE;
 8002460:	2301      	movs	r3, #1
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
 8002464:	e004      	b.n	8002470 <xTaskIncrementTick+0x1f4>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002466:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <xTaskIncrementTick+0x228>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	3301      	adds	r3, #1
 800246c:	4a0d      	ldr	r2, [pc, #52]	; (80024a4 <xTaskIncrementTick+0x228>)
 800246e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002472:	4618      	mov	r0, r3
 8002474:	3728      	adds	r7, #40	; 0x28
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	2000c96c 	.word	0x2000c96c
 8002480:	2000c948 	.word	0x2000c948
 8002484:	2000c8fc 	.word	0x2000c8fc
 8002488:	2000c900 	.word	0x2000c900
 800248c:	2000c95c 	.word	0x2000c95c
 8002490:	2000c964 	.word	0x2000c964
 8002494:	2000c94c 	.word	0x2000c94c
 8002498:	2000c870 	.word	0x2000c870
 800249c:	2000c86c 	.word	0x2000c86c
 80024a0:	2000c958 	.word	0x2000c958
 80024a4:	2000c954 	.word	0x2000c954

080024a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80024ae:	4b26      	ldr	r3, [pc, #152]	; (8002548 <vTaskSwitchContext+0xa0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80024b6:	4b25      	ldr	r3, [pc, #148]	; (800254c <vTaskSwitchContext+0xa4>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80024bc:	e03e      	b.n	800253c <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 80024be:	4b23      	ldr	r3, [pc, #140]	; (800254c <vTaskSwitchContext+0xa4>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024c4:	4b22      	ldr	r3, [pc, #136]	; (8002550 <vTaskSwitchContext+0xa8>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	fab3 f383 	clz	r3, r3
 80024d0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80024d2:	7afb      	ldrb	r3, [r7, #11]
 80024d4:	f1c3 031f 	rsb	r3, r3, #31
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	491e      	ldr	r1, [pc, #120]	; (8002554 <vTaskSwitchContext+0xac>)
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d109      	bne.n	8002502 <vTaskSwitchContext+0x5a>
        __asm volatile
 80024ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f2:	f383 8811 	msr	BASEPRI, r3
 80024f6:	f3bf 8f6f 	isb	sy
 80024fa:	f3bf 8f4f 	dsb	sy
 80024fe:	607b      	str	r3, [r7, #4]
 8002500:	e7fe      	b.n	8002500 <vTaskSwitchContext+0x58>
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4a11      	ldr	r2, [pc, #68]	; (8002554 <vTaskSwitchContext+0xac>)
 800250e:	4413      	add	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	605a      	str	r2, [r3, #4]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	3308      	adds	r3, #8
 8002524:	429a      	cmp	r2, r3
 8002526:	d104      	bne.n	8002532 <vTaskSwitchContext+0x8a>
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4a07      	ldr	r2, [pc, #28]	; (8002558 <vTaskSwitchContext+0xb0>)
 800253a:	6013      	str	r3, [r2, #0]
}
 800253c:	bf00      	nop
 800253e:	371c      	adds	r7, #28
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	2000c96c 	.word	0x2000c96c
 800254c:	2000c958 	.word	0x2000c958
 8002550:	2000c94c 	.word	0x2000c94c
 8002554:	2000c870 	.word	0x2000c870
 8002558:	2000c86c 	.word	0x2000c86c

0800255c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d109      	bne.n	8002580 <vTaskPlaceOnEventList+0x24>
 800256c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002570:	f383 8811 	msr	BASEPRI, r3
 8002574:	f3bf 8f6f 	isb	sy
 8002578:	f3bf 8f4f 	dsb	sy
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	e7fe      	b.n	800257e <vTaskPlaceOnEventList+0x22>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002580:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <vTaskPlaceOnEventList+0x44>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	3318      	adds	r3, #24
 8002586:	4619      	mov	r1, r3
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7fe fa20 	bl	80009ce <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800258e:	2101      	movs	r1, #1
 8002590:	6838      	ldr	r0, [r7, #0]
 8002592:	f000 fbdd 	bl	8002d50 <prvAddCurrentTaskToDelayedList>
}
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	2000c86c 	.word	0x2000c86c

080025a4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d109      	bne.n	80025ca <vTaskPlaceOnEventListRestricted+0x26>
 80025b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ba:	f383 8811 	msr	BASEPRI, r3
 80025be:	f3bf 8f6f 	isb	sy
 80025c2:	f3bf 8f4f 	dsb	sy
 80025c6:	613b      	str	r3, [r7, #16]
 80025c8:	e7fe      	b.n	80025c8 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	4b15      	ldr	r3, [pc, #84]	; (8002628 <vTaskPlaceOnEventListRestricted+0x84>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	61da      	str	r2, [r3, #28]
 80025d8:	4b13      	ldr	r3, [pc, #76]	; (8002628 <vTaskPlaceOnEventListRestricted+0x84>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	6892      	ldr	r2, [r2, #8]
 80025e0:	621a      	str	r2, [r3, #32]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	4a10      	ldr	r2, [pc, #64]	; (8002628 <vTaskPlaceOnEventListRestricted+0x84>)
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	3218      	adds	r2, #24
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <vTaskPlaceOnEventListRestricted+0x84>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f103 0218 	add.w	r2, r3, #24
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <vTaskPlaceOnEventListRestricted+0x84>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	629a      	str	r2, [r3, #40]	; 0x28
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d002      	beq.n	8002618 <vTaskPlaceOnEventListRestricted+0x74>
        {
            xTicksToWait = portMAX_DELAY;
 8002612:	f04f 33ff 	mov.w	r3, #4294967295
 8002616:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	68b8      	ldr	r0, [r7, #8]
 800261c:	f000 fb98 	bl	8002d50 <prvAddCurrentTaskToDelayedList>
    }
 8002620:	bf00      	nop
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	2000c86c 	.word	0x2000c86c

0800262c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800262c:	b480      	push	{r7}
 800262e:	b08b      	sub	sp, #44	; 0x2c
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d109      	bne.n	8002656 <xTaskRemoveFromEventList+0x2a>
 8002642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002646:	f383 8811 	msr	BASEPRI, r3
 800264a:	f3bf 8f6f 	isb	sy
 800264e:	f3bf 8f4f 	dsb	sy
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	e7fe      	b.n	8002654 <xTaskRemoveFromEventList+0x28>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265a:	61fb      	str	r3, [r7, #28]
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	6a3a      	ldr	r2, [r7, #32]
 8002662:	6a12      	ldr	r2, [r2, #32]
 8002664:	609a      	str	r2, [r3, #8]
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	6a3a      	ldr	r2, [r7, #32]
 800266c:	69d2      	ldr	r2, [r2, #28]
 800266e:	605a      	str	r2, [r3, #4]
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	6a3b      	ldr	r3, [r7, #32]
 8002676:	3318      	adds	r3, #24
 8002678:	429a      	cmp	r2, r3
 800267a:	d103      	bne.n	8002684 <xTaskRemoveFromEventList+0x58>
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	6a1a      	ldr	r2, [r3, #32]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	605a      	str	r2, [r3, #4]
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	2200      	movs	r2, #0
 8002688:	629a      	str	r2, [r3, #40]	; 0x28
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	1e5a      	subs	r2, r3, #1
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002694:	4b4a      	ldr	r3, [pc, #296]	; (80027c0 <xTaskRemoveFromEventList+0x194>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d15e      	bne.n	800275a <xTaskRemoveFromEventList+0x12e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	61bb      	str	r3, [r7, #24]
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	6a3a      	ldr	r2, [r7, #32]
 80026a8:	68d2      	ldr	r2, [r2, #12]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	6a3a      	ldr	r2, [r7, #32]
 80026b2:	6892      	ldr	r2, [r2, #8]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	3304      	adds	r3, #4
 80026be:	429a      	cmp	r2, r3
 80026c0:	d103      	bne.n	80026ca <xTaskRemoveFromEventList+0x9e>
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	2200      	movs	r2, #0
 80026ce:	615a      	str	r2, [r3, #20]
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	1e5a      	subs	r2, r3, #1
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	2201      	movs	r2, #1
 80026e0:	409a      	lsls	r2, r3
 80026e2:	4b38      	ldr	r3, [pc, #224]	; (80027c4 <xTaskRemoveFromEventList+0x198>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	4a36      	ldr	r2, [pc, #216]	; (80027c4 <xTaskRemoveFromEventList+0x198>)
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f0:	4935      	ldr	r1, [pc, #212]	; (80027c8 <xTaskRemoveFromEventList+0x19c>)
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	3304      	adds	r3, #4
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	60da      	str	r2, [r3, #12]
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	6a3a      	ldr	r2, [r7, #32]
 8002716:	3204      	adds	r2, #4
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	1d1a      	adds	r2, r3, #4
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	609a      	str	r2, [r3, #8]
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4a26      	ldr	r2, [pc, #152]	; (80027c8 <xTaskRemoveFromEventList+0x19c>)
 8002730:	441a      	add	r2, r3
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	615a      	str	r2, [r3, #20]
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800273a:	4923      	ldr	r1, [pc, #140]	; (80027c8 <xTaskRemoveFromEventList+0x19c>)
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	1c59      	adds	r1, r3, #1
 800274a:	481f      	ldr	r0, [pc, #124]	; (80027c8 <xTaskRemoveFromEventList+0x19c>)
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4403      	add	r3, r0
 8002756:	6019      	str	r1, [r3, #0]
 8002758:	e01b      	b.n	8002792 <xTaskRemoveFromEventList+0x166>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800275a:	4b1c      	ldr	r3, [pc, #112]	; (80027cc <xTaskRemoveFromEventList+0x1a0>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	61da      	str	r2, [r3, #28]
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	621a      	str	r2, [r3, #32]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	6a3a      	ldr	r2, [r7, #32]
 8002774:	3218      	adds	r2, #24
 8002776:	605a      	str	r2, [r3, #4]
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	f103 0218 	add.w	r2, r3, #24
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	4a11      	ldr	r2, [pc, #68]	; (80027cc <xTaskRemoveFromEventList+0x1a0>)
 8002786:	629a      	str	r2, [r3, #40]	; 0x28
 8002788:	4b10      	ldr	r3, [pc, #64]	; (80027cc <xTaskRemoveFromEventList+0x1a0>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	3301      	adds	r3, #1
 800278e:	4a0f      	ldr	r2, [pc, #60]	; (80027cc <xTaskRemoveFromEventList+0x1a0>)
 8002790:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002796:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <xTaskRemoveFromEventList+0x1a4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	429a      	cmp	r2, r3
 800279e:	d905      	bls.n	80027ac <xTaskRemoveFromEventList+0x180>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80027a0:	2301      	movs	r3, #1
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80027a4:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <xTaskRemoveFromEventList+0x1a8>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	e001      	b.n	80027b0 <xTaskRemoveFromEventList+0x184>
    }
    else
    {
        xReturn = pdFALSE;
 80027ac:	2300      	movs	r3, #0
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	372c      	adds	r7, #44	; 0x2c
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	2000c96c 	.word	0x2000c96c
 80027c4:	2000c94c 	.word	0x2000c94c
 80027c8:	2000c870 	.word	0x2000c870
 80027cc:	2000c904 	.word	0x2000c904
 80027d0:	2000c86c 	.word	0x2000c86c
 80027d4:	2000c958 	.word	0x2000c958

080027d8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <vTaskInternalSetTimeOutState+0x24>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <vTaskInternalSetTimeOutState+0x28>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	605a      	str	r2, [r3, #4]
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	2000c95c 	.word	0x2000c95c
 8002800:	2000c948 	.word	0x2000c948

08002804 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b088      	sub	sp, #32
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d109      	bne.n	8002828 <xTaskCheckForTimeOut+0x24>
 8002814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002818:	f383 8811 	msr	BASEPRI, r3
 800281c:	f3bf 8f6f 	isb	sy
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	e7fe      	b.n	8002826 <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d109      	bne.n	8002842 <xTaskCheckForTimeOut+0x3e>
 800282e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002832:	f383 8811 	msr	BASEPRI, r3
 8002836:	f3bf 8f6f 	isb	sy
 800283a:	f3bf 8f4f 	dsb	sy
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	e7fe      	b.n	8002840 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8002842:	f7fe fa4d 	bl	8000ce0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002846:	4b1f      	ldr	r3, [pc, #124]	; (80028c4 <xTaskCheckForTimeOut+0xc0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285e:	d102      	bne.n	8002866 <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002860:	2300      	movs	r3, #0
 8002862:	61fb      	str	r3, [r7, #28]
 8002864:	e026      	b.n	80028b4 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	4b17      	ldr	r3, [pc, #92]	; (80028c8 <xTaskCheckForTimeOut+0xc4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d00a      	beq.n	8002888 <xTaskCheckForTimeOut+0x84>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	429a      	cmp	r2, r3
 800287a:	d805      	bhi.n	8002888 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800287c:	2301      	movs	r3, #1
 800287e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	e015      	b.n	80028b4 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	429a      	cmp	r2, r3
 8002890:	d90b      	bls.n	80028aa <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	1ad2      	subs	r2, r2, r3
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff ff9a 	bl	80027d8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80028a4:	2300      	movs	r3, #0
 80028a6:	61fb      	str	r3, [r7, #28]
 80028a8:	e004      	b.n	80028b4 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80028b0:	2301      	movs	r3, #1
 80028b2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80028b4:	f7fe fa42 	bl	8000d3c <vPortExitCritical>

    return xReturn;
 80028b8:	69fb      	ldr	r3, [r7, #28]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3720      	adds	r7, #32
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	2000c948 	.word	0x2000c948
 80028c8:	2000c95c 	.word	0x2000c95c

080028cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80028d0:	4b03      	ldr	r3, [pc, #12]	; (80028e0 <vTaskMissedYield+0x14>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	601a      	str	r2, [r3, #0]
}
 80028d6:	bf00      	nop
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	2000c958 	.word	0x2000c958

080028e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80028ec:	f000 f852 	bl	8002994 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <prvIdleTask+0x28>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d9f9      	bls.n	80028ec <prvIdleTask+0x8>
            {
                taskYIELD();
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <prvIdleTask+0x2c>)
 80028fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002908:	e7f0      	b.n	80028ec <prvIdleTask+0x8>
 800290a:	bf00      	nop
 800290c:	2000c870 	.word	0x2000c870
 8002910:	e000ed04 	.word	0xe000ed04

08002914 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800291a:	2300      	movs	r3, #0
 800291c:	607b      	str	r3, [r7, #4]
 800291e:	e00c      	b.n	800293a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4a12      	ldr	r2, [pc, #72]	; (8002974 <prvInitialiseTaskLists+0x60>)
 800292c:	4413      	add	r3, r2
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe f820 	bl	8000974 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3301      	adds	r3, #1
 8002938:	607b      	str	r3, [r7, #4]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b04      	cmp	r3, #4
 800293e:	d9ef      	bls.n	8002920 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002940:	480d      	ldr	r0, [pc, #52]	; (8002978 <prvInitialiseTaskLists+0x64>)
 8002942:	f7fe f817 	bl	8000974 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002946:	480d      	ldr	r0, [pc, #52]	; (800297c <prvInitialiseTaskLists+0x68>)
 8002948:	f7fe f814 	bl	8000974 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800294c:	480c      	ldr	r0, [pc, #48]	; (8002980 <prvInitialiseTaskLists+0x6c>)
 800294e:	f7fe f811 	bl	8000974 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002952:	480c      	ldr	r0, [pc, #48]	; (8002984 <prvInitialiseTaskLists+0x70>)
 8002954:	f7fe f80e 	bl	8000974 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002958:	480b      	ldr	r0, [pc, #44]	; (8002988 <prvInitialiseTaskLists+0x74>)
 800295a:	f7fe f80b 	bl	8000974 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800295e:	4b0b      	ldr	r3, [pc, #44]	; (800298c <prvInitialiseTaskLists+0x78>)
 8002960:	4a05      	ldr	r2, [pc, #20]	; (8002978 <prvInitialiseTaskLists+0x64>)
 8002962:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002964:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <prvInitialiseTaskLists+0x7c>)
 8002966:	4a05      	ldr	r2, [pc, #20]	; (800297c <prvInitialiseTaskLists+0x68>)
 8002968:	601a      	str	r2, [r3, #0]
}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	2000c870 	.word	0x2000c870
 8002978:	2000c8d4 	.word	0x2000c8d4
 800297c:	2000c8e8 	.word	0x2000c8e8
 8002980:	2000c904 	.word	0x2000c904
 8002984:	2000c918 	.word	0x2000c918
 8002988:	2000c930 	.word	0x2000c930
 800298c:	2000c8fc 	.word	0x2000c8fc
 8002990:	2000c900 	.word	0x2000c900

08002994 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800299a:	e019      	b.n	80029d0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800299c:	f7fe f9a0 	bl	8000ce0 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029a0:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <prvCheckTasksWaitingTermination+0x4c>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3304      	adds	r3, #4
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fe f847 	bl	8000a40 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80029b2:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <prvCheckTasksWaitingTermination+0x50>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	4a0a      	ldr	r2, [pc, #40]	; (80029e4 <prvCheckTasksWaitingTermination+0x50>)
 80029ba:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80029bc:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <prvCheckTasksWaitingTermination+0x54>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	3b01      	subs	r3, #1
 80029c2:	4a09      	ldr	r2, [pc, #36]	; (80029e8 <prvCheckTasksWaitingTermination+0x54>)
 80029c4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80029c6:	f7fe f9b9 	bl	8000d3c <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f80e 	bl	80029ec <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <prvCheckTasksWaitingTermination+0x54>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1e1      	bne.n	800299c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80029d8:	bf00      	nop
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	2000c918 	.word	0x2000c918
 80029e4:	2000c944 	.word	0x2000c944
 80029e8:	2000c92c 	.word	0x2000c92c

080029ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fe fb43 	bl	8001084 <vPortFree>
            vPortFree( pxTCB );
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7fe fb40 	bl	8001084 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a10:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <prvResetNextTaskUnblockTime+0x30>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d104      	bne.n	8002a24 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002a1a:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <prvResetNextTaskUnblockTime+0x34>)
 8002a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a20:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002a22:	e005      	b.n	8002a30 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a24:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <prvResetNextTaskUnblockTime+0x30>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a04      	ldr	r2, [pc, #16]	; (8002a40 <prvResetNextTaskUnblockTime+0x34>)
 8002a2e:	6013      	str	r3, [r2, #0]
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	2000c8fc 	.word	0x2000c8fc
 8002a40:	2000c964 	.word	0x2000c964

08002a44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002a4a:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <xTaskGetSchedulerState+0x34>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d102      	bne.n	8002a58 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002a52:	2301      	movs	r3, #1
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	e008      	b.n	8002a6a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a58:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <xTaskGetSchedulerState+0x38>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002a60:	2302      	movs	r3, #2
 8002a62:	607b      	str	r3, [r7, #4]
 8002a64:	e001      	b.n	8002a6a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002a66:	2300      	movs	r3, #0
 8002a68:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002a6a:	687b      	ldr	r3, [r7, #4]
    }
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	2000c950 	.word	0x2000c950
 8002a7c:	2000c96c 	.word	0x2000c96c

08002a80 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 8087 	beq.w	8002ba6 <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a9c:	4b44      	ldr	r3, [pc, #272]	; (8002bb0 <xTaskPriorityInherit+0x130>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d276      	bcs.n	8002b94 <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	db06      	blt.n	8002abc <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002aae:	4b40      	ldr	r3, [pc, #256]	; (8002bb0 <xTaskPriorityInherit+0x130>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab4:	f1c3 0205 	rsb	r2, r3, #5
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	6959      	ldr	r1, [r3, #20]
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4a39      	ldr	r2, [pc, #228]	; (8002bb4 <xTaskPriorityInherit+0x134>)
 8002ace:	4413      	add	r3, r2
 8002ad0:	4299      	cmp	r1, r3
 8002ad2:	d157      	bne.n	8002b84 <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fd ffb1 	bl	8000a40 <uxListRemove>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10a      	bne.n	8002afa <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	2201      	movs	r2, #1
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43da      	mvns	r2, r3
 8002af0:	4b31      	ldr	r3, [pc, #196]	; (8002bb8 <xTaskPriorityInherit+0x138>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4013      	ands	r3, r2
 8002af6:	4a30      	ldr	r2, [pc, #192]	; (8002bb8 <xTaskPriorityInherit+0x138>)
 8002af8:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002afa:	4b2d      	ldr	r3, [pc, #180]	; (8002bb0 <xTaskPriorityInherit+0x130>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	2201      	movs	r2, #1
 8002b0a:	409a      	lsls	r2, r3
 8002b0c:	4b2a      	ldr	r3, [pc, #168]	; (8002bb8 <xTaskPriorityInherit+0x138>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	4a29      	ldr	r2, [pc, #164]	; (8002bb8 <xTaskPriorityInherit+0x138>)
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b1a:	4926      	ldr	r1, [pc, #152]	; (8002bb4 <xTaskPriorityInherit+0x134>)
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	3304      	adds	r3, #4
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	609a      	str	r2, [r3, #8]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	60da      	str	r2, [r3, #12]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	3204      	adds	r2, #4
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1d1a      	adds	r2, r3, #4
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4a16      	ldr	r2, [pc, #88]	; (8002bb4 <xTaskPriorityInherit+0x134>)
 8002b5a:	441a      	add	r2, r3
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	615a      	str	r2, [r3, #20]
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b64:	4913      	ldr	r1, [pc, #76]	; (8002bb4 <xTaskPriorityInherit+0x134>)
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	1c59      	adds	r1, r3, #1
 8002b74:	480f      	ldr	r0, [pc, #60]	; (8002bb4 <xTaskPriorityInherit+0x134>)
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4403      	add	r3, r0
 8002b80:	6019      	str	r1, [r3, #0]
 8002b82:	e004      	b.n	8002b8e <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002b84:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <xTaskPriorityInherit+0x130>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	e008      	b.n	8002ba6 <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <xTaskPriorityInherit+0x130>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d201      	bcs.n	8002ba6 <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002ba6:	697b      	ldr	r3, [r7, #20]
    }
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	2000c86c 	.word	0x2000c86c
 8002bb4:	2000c870 	.word	0x2000c870
 8002bb8:	2000c94c 	.word	0x2000c94c

08002bbc <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08a      	sub	sp, #40	; 0x28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 809e 	beq.w	8002d12 <vTaskPriorityDisinheritAfterTimeout+0x156>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d109      	bne.n	8002bf2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8002bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be2:	f383 8811 	msr	BASEPRI, r3
 8002be6:	f3bf 8f6f 	isb	sy
 8002bea:	f3bf 8f4f 	dsb	sy
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	e7fe      	b.n	8002bf0 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d202      	bcs.n	8002c02 <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8002c00:	e002      	b.n	8002c08 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c06:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d07f      	beq.n	8002d12 <vTaskPriorityDisinheritAfterTimeout+0x156>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d17a      	bne.n	8002d12 <vTaskPriorityDisinheritAfterTimeout+0x156>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8002c1c:	4b3f      	ldr	r3, [pc, #252]	; (8002d1c <vTaskPriorityDisinheritAfterTimeout+0x160>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6a3a      	ldr	r2, [r7, #32]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d109      	bne.n	8002c3a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8002c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2a:	f383 8811 	msr	BASEPRI, r3
 8002c2e:	f3bf 8f6f 	isb	sy
 8002c32:	f3bf 8f4f 	dsb	sy
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	e7fe      	b.n	8002c38 <vTaskPriorityDisinheritAfterTimeout+0x7c>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3e:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c44:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	db04      	blt.n	8002c58 <vTaskPriorityDisinheritAfterTimeout+0x9c>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	f1c3 0205 	rsb	r2, r3, #5
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	6959      	ldr	r1, [r3, #20]
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4a2e      	ldr	r2, [pc, #184]	; (8002d20 <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8002c68:	4413      	add	r3, r2
 8002c6a:	4299      	cmp	r1, r3
 8002c6c:	d151      	bne.n	8002d12 <vTaskPriorityDisinheritAfterTimeout+0x156>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	3304      	adds	r3, #4
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fd fee4 	bl	8000a40 <uxListRemove>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10a      	bne.n	8002c94 <vTaskPriorityDisinheritAfterTimeout+0xd8>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c82:	2201      	movs	r2, #1
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43da      	mvns	r2, r3
 8002c8a:	4b26      	ldr	r3, [pc, #152]	; (8002d24 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	4a24      	ldr	r2, [pc, #144]	; (8002d24 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8002c92:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	2201      	movs	r2, #1
 8002c9a:	409a      	lsls	r2, r3
 8002c9c:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	4a20      	ldr	r2, [pc, #128]	; (8002d24 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002caa:	491d      	ldr	r1, [pc, #116]	; (8002d20 <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	609a      	str	r2, [r3, #8]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	60da      	str	r2, [r3, #12]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	6a3a      	ldr	r2, [r7, #32]
 8002cd0:	3204      	adds	r2, #4
 8002cd2:	605a      	str	r2, [r3, #4]
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	1d1a      	adds	r2, r3, #4
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4a0d      	ldr	r2, [pc, #52]	; (8002d20 <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8002cea:	441a      	add	r2, r3
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	615a      	str	r2, [r3, #20]
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf4:	490a      	ldr	r1, [pc, #40]	; (8002d20 <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	440b      	add	r3, r1
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	1c59      	adds	r1, r3, #1
 8002d04:	4806      	ldr	r0, [pc, #24]	; (8002d20 <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4403      	add	r3, r0
 8002d10:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002d12:	bf00      	nop
 8002d14:	3728      	adds	r7, #40	; 0x28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	2000c86c 	.word	0x2000c86c
 8002d20:	2000c870 	.word	0x2000c870
 8002d24:	2000c94c 	.word	0x2000c94c

08002d28 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8002d2c:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <pvTaskIncrementMutexHeldCount+0x24>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d004      	beq.n	8002d3e <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8002d34:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <pvTaskIncrementMutexHeldCount+0x24>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d3a:	3201      	adds	r2, #1
 8002d3c:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8002d3e:	4b03      	ldr	r3, [pc, #12]	; (8002d4c <pvTaskIncrementMutexHeldCount+0x24>)
 8002d40:	681b      	ldr	r3, [r3, #0]
    }
 8002d42:	4618      	mov	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	2000c86c 	.word	0x2000c86c

08002d50 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002d5a:	4b36      	ldr	r3, [pc, #216]	; (8002e34 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d60:	4b35      	ldr	r3, [pc, #212]	; (8002e38 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	3304      	adds	r3, #4
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fd fe6a 	bl	8000a40 <uxListRemove>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10b      	bne.n	8002d8a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002d72:	4b31      	ldr	r3, [pc, #196]	; (8002e38 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	2201      	movs	r2, #1
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43da      	mvns	r2, r3
 8002d80:	4b2e      	ldr	r3, [pc, #184]	; (8002e3c <prvAddCurrentTaskToDelayedList+0xec>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4013      	ands	r3, r2
 8002d86:	4a2d      	ldr	r2, [pc, #180]	; (8002e3c <prvAddCurrentTaskToDelayedList+0xec>)
 8002d88:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d90:	d124      	bne.n	8002ddc <prvAddCurrentTaskToDelayedList+0x8c>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d021      	beq.n	8002ddc <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d98:	4b29      	ldr	r3, [pc, #164]	; (8002e40 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	4b26      	ldr	r3, [pc, #152]	; (8002e38 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	609a      	str	r2, [r3, #8]
 8002da6:	4b24      	ldr	r3, [pc, #144]	; (8002e38 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	6892      	ldr	r2, [r2, #8]
 8002dae:	60da      	str	r2, [r3, #12]
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	4a20      	ldr	r2, [pc, #128]	; (8002e38 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002db6:	6812      	ldr	r2, [r2, #0]
 8002db8:	3204      	adds	r2, #4
 8002dba:	605a      	str	r2, [r3, #4]
 8002dbc:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	1d1a      	adds	r2, r3, #4
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	609a      	str	r2, [r3, #8]
 8002dc6:	4b1c      	ldr	r3, [pc, #112]	; (8002e38 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a1d      	ldr	r2, [pc, #116]	; (8002e40 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002dcc:	615a      	str	r2, [r3, #20]
 8002dce:	4b1c      	ldr	r3, [pc, #112]	; (8002e40 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	4a1a      	ldr	r2, [pc, #104]	; (8002e40 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002dda:	e026      	b.n	8002e2a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002de4:	4b14      	ldr	r3, [pc, #80]	; (8002e38 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d209      	bcs.n	8002e08 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002df4:	4b13      	ldr	r3, [pc, #76]	; (8002e44 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4610      	mov	r0, r2
 8002e02:	f7fd fde4 	bl	80009ce <vListInsert>
}
 8002e06:	e010      	b.n	8002e2a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e08:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3304      	adds	r3, #4
 8002e12:	4619      	mov	r1, r3
 8002e14:	4610      	mov	r0, r2
 8002e16:	f7fd fdda 	bl	80009ce <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002e1a:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <prvAddCurrentTaskToDelayedList+0xfc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d202      	bcs.n	8002e2a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8002e24:	4a09      	ldr	r2, [pc, #36]	; (8002e4c <prvAddCurrentTaskToDelayedList+0xfc>)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6013      	str	r3, [r2, #0]
}
 8002e2a:	bf00      	nop
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	2000c948 	.word	0x2000c948
 8002e38:	2000c86c 	.word	0x2000c86c
 8002e3c:	2000c94c 	.word	0x2000c94c
 8002e40:	2000c930 	.word	0x2000c930
 8002e44:	2000c900 	.word	0x2000c900
 8002e48:	2000c8fc 	.word	0x2000c8fc
 8002e4c:	2000c964 	.word	0x2000c964

08002e50 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002e5a:	f000 fa43 	bl	80032e4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002e5e:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <xTimerCreateTimerTask+0x54>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00b      	beq.n	8002e7e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8002e66:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <xTimerCreateTimerTask+0x58>)
 8002e68:	9301      	str	r3, [sp, #4]
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e74:	490d      	ldr	r1, [pc, #52]	; (8002eac <xTimerCreateTimerTask+0x5c>)
 8002e76:	480e      	ldr	r0, [pc, #56]	; (8002eb0 <xTimerCreateTimerTask+0x60>)
 8002e78:	f7fe fef0 	bl	8001c5c <xTaskCreate>
 8002e7c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d109      	bne.n	8002e98 <xTimerCreateTimerTask+0x48>
 8002e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e88:	f383 8811 	msr	BASEPRI, r3
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	603b      	str	r3, [r7, #0]
 8002e96:	e7fe      	b.n	8002e96 <xTimerCreateTimerTask+0x46>
        return xReturn;
 8002e98:	687b      	ldr	r3, [r7, #4]
    }
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	2000c9a0 	.word	0x2000c9a0
 8002ea8:	2000c9a4 	.word	0x2000c9a4
 8002eac:	08003da8 	.word	0x08003da8
 8002eb0:	08002f55 	.word	0x08002f55

08002eb4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002ec0:	e008      	b.n	8002ed4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	4413      	add	r3, r2
 8002eca:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	699a      	ldr	r2, [r3, #24]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	18d1      	adds	r1, r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 f8db 	bl	800309c <prvInsertTimerInActiveList>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1ea      	bne.n	8002ec2 <prvReloadTimer+0xe>
        }
    }
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002efe:	4b14      	ldr	r3, [pc, #80]	; (8002f50 <prvProcessExpiredTimer+0x5c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fd fd97 	bl	8000a40 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f7ff ffc5 	bl	8002eb4 <prvReloadTimer>
 8002f2a:	e008      	b.n	8002f3e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f32:	f023 0301 	bic.w	r3, r3, #1
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	4798      	blx	r3
    }
 8002f46:	bf00      	nop
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	2000c998 	.word	0x2000c998

08002f54 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002f5c:	f107 0308 	add.w	r3, r7, #8
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 f857 	bl	8003014 <prvGetNextExpireTime>
 8002f66:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 f803 	bl	8002f78 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002f72:	f000 f8d5 	bl	8003120 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002f76:	e7f1      	b.n	8002f5c <prvTimerTask+0x8>

08002f78 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002f82:	f7ff f857 	bl	8002034 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002f86:	f107 0308 	add.w	r3, r7, #8
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 f866 	bl	800305c <prvSampleTimeNow>
 8002f90:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d130      	bne.n	8002ffa <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10a      	bne.n	8002fb4 <prvProcessTimerOrBlockTask+0x3c>
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d806      	bhi.n	8002fb4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002fa6:	f7ff f853 	bl	8002050 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002faa:	68f9      	ldr	r1, [r7, #12]
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff ffa1 	bl	8002ef4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002fb2:	e024      	b.n	8002ffe <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d008      	beq.n	8002fcc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002fba:	4b13      	ldr	r3, [pc, #76]	; (8003008 <prvProcessTimerOrBlockTask+0x90>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <prvProcessTimerOrBlockTask+0x50>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <prvProcessTimerOrBlockTask+0x52>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002fcc:	4b0f      	ldr	r3, [pc, #60]	; (800300c <prvProcessTimerOrBlockTask+0x94>)
 8002fce:	6818      	ldr	r0, [r3, #0]
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f7fe fe0b 	bl	8001bf4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002fde:	f7ff f837 	bl	8002050 <xTaskResumeAll>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10a      	bne.n	8002ffe <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002fe8:	4b09      	ldr	r3, [pc, #36]	; (8003010 <prvProcessTimerOrBlockTask+0x98>)
 8002fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	f3bf 8f4f 	dsb	sy
 8002ff4:	f3bf 8f6f 	isb	sy
    }
 8002ff8:	e001      	b.n	8002ffe <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002ffa:	f7ff f829 	bl	8002050 <xTaskResumeAll>
    }
 8002ffe:	bf00      	nop
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	2000c99c 	.word	0x2000c99c
 800300c:	2000c9a0 	.word	0x2000c9a0
 8003010:	e000ed04 	.word	0xe000ed04

08003014 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800301c:	4b0e      	ldr	r3, [pc, #56]	; (8003058 <prvGetNextExpireTime+0x44>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <prvGetNextExpireTime+0x16>
 8003026:	2201      	movs	r2, #1
 8003028:	e000      	b.n	800302c <prvGetNextExpireTime+0x18>
 800302a:	2200      	movs	r2, #0
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d105      	bne.n	8003044 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003038:	4b07      	ldr	r3, [pc, #28]	; (8003058 <prvGetNextExpireTime+0x44>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	e001      	b.n	8003048 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003048:	68fb      	ldr	r3, [r7, #12]
    }
 800304a:	4618      	mov	r0, r3
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	2000c998 	.word	0x2000c998

0800305c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003064:	f7ff f8ee 	bl	8002244 <xTaskGetTickCount>
 8003068:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800306a:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <prvSampleTimeNow+0x3c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	429a      	cmp	r2, r3
 8003072:	d205      	bcs.n	8003080 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003074:	f000 f910 	bl	8003298 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	e002      	b.n	8003086 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003086:	4a04      	ldr	r2, [pc, #16]	; (8003098 <prvSampleTimeNow+0x3c>)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800308c:	68fb      	ldr	r3, [r7, #12]
    }
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	2000c9a8 	.word	0x2000c9a8

0800309c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
 80030a8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d812      	bhi.n	80030e8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	1ad2      	subs	r2, r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d302      	bcc.n	80030d6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80030d0:	2301      	movs	r3, #1
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	e01b      	b.n	800310e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80030d6:	4b10      	ldr	r3, [pc, #64]	; (8003118 <prvInsertTimerInActiveList+0x7c>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	3304      	adds	r3, #4
 80030de:	4619      	mov	r1, r3
 80030e0:	4610      	mov	r0, r2
 80030e2:	f7fd fc74 	bl	80009ce <vListInsert>
 80030e6:	e012      	b.n	800310e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d206      	bcs.n	80030fe <prvInsertTimerInActiveList+0x62>
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d302      	bcc.n	80030fe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80030f8:	2301      	movs	r3, #1
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	e007      	b.n	800310e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80030fe:	4b07      	ldr	r3, [pc, #28]	; (800311c <prvInsertTimerInActiveList+0x80>)
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	3304      	adds	r3, #4
 8003106:	4619      	mov	r1, r3
 8003108:	4610      	mov	r0, r2
 800310a:	f7fd fc60 	bl	80009ce <vListInsert>
            }
        }

        return xProcessTimerNow;
 800310e:	697b      	ldr	r3, [r7, #20]
    }
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	2000c99c 	.word	0x2000c99c
 800311c:	2000c998 	.word	0x2000c998

08003120 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003126:	e0a5      	b.n	8003274 <prvProcessReceivedCommands+0x154>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	f2c0 80a2 	blt.w	8003274 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d004      	beq.n	8003146 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	3304      	adds	r3, #4
 8003140:	4618      	mov	r0, r3
 8003142:	f7fd fc7d 	bl	8000a40 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003146:	1d3b      	adds	r3, r7, #4
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff ff87 	bl	800305c <prvSampleTimeNow>
 800314e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	3b01      	subs	r3, #1
 8003154:	2b08      	cmp	r3, #8
 8003156:	f200 808c 	bhi.w	8003272 <prvProcessReceivedCommands+0x152>
 800315a:	a201      	add	r2, pc, #4	; (adr r2, 8003160 <prvProcessReceivedCommands+0x40>)
 800315c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003160:	08003185 	.word	0x08003185
 8003164:	08003185 	.word	0x08003185
 8003168:	080031ed 	.word	0x080031ed
 800316c:	08003201 	.word	0x08003201
 8003170:	08003249 	.word	0x08003249
 8003174:	08003185 	.word	0x08003185
 8003178:	08003185 	.word	0x08003185
 800317c:	080031ed 	.word	0x080031ed
 8003180:	08003201 	.word	0x08003201
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	b2da      	uxtb	r2, r3
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	18d1      	adds	r1, r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	69f8      	ldr	r0, [r7, #28]
 80031a4:	f7ff ff7a 	bl	800309c <prvInsertTimerInActiveList>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d062      	beq.n	8003274 <prvProcessReceivedCommands+0x154>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d009      	beq.n	80031d0 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	4413      	add	r3, r2
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4619      	mov	r1, r3
 80031c8:	69f8      	ldr	r0, [r7, #28]
 80031ca:	f7ff fe73 	bl	8002eb4 <prvReloadTimer>
 80031ce:	e008      	b.n	80031e2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031d6:	f023 0301 	bic.w	r3, r3, #1
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	69f8      	ldr	r0, [r7, #28]
 80031e8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80031ea:	e043      	b.n	8003274 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031f2:	f023 0301 	bic.w	r3, r3, #1
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80031fe:	e039      	b.n	8003274 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	b2da      	uxtb	r2, r3
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d109      	bne.n	8003234 <prvProcessReceivedCommands+0x114>
 8003220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003224:	f383 8811 	msr	BASEPRI, r3
 8003228:	f3bf 8f6f 	isb	sy
 800322c:	f3bf 8f4f 	dsb	sy
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	e7fe      	b.n	8003232 <prvProcessReceivedCommands+0x112>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	699a      	ldr	r2, [r3, #24]
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	18d1      	adds	r1, r2, r3
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	69f8      	ldr	r0, [r7, #28]
 8003242:	f7ff ff2b 	bl	800309c <prvInsertTimerInActiveList>
                        break;
 8003246:	e015      	b.n	8003274 <prvProcessReceivedCommands+0x154>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d103      	bne.n	800325e <prvProcessReceivedCommands+0x13e>
                            {
                                vPortFree( pxTimer );
 8003256:	69f8      	ldr	r0, [r7, #28]
 8003258:	f7fd ff14 	bl	8001084 <vPortFree>
 800325c:	e00a      	b.n	8003274 <prvProcessReceivedCommands+0x154>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003264:	f023 0301 	bic.w	r3, r3, #1
 8003268:	b2da      	uxtb	r2, r3
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003270:	e000      	b.n	8003274 <prvProcessReceivedCommands+0x154>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003272:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003274:	4b07      	ldr	r3, [pc, #28]	; (8003294 <prvProcessReceivedCommands+0x174>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f107 0108 	add.w	r1, r7, #8
 800327c:	2200      	movs	r2, #0
 800327e:	4618      	mov	r0, r3
 8003280:	f7fe f9d0 	bl	8001624 <xQueueReceive>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	f47f af4e 	bne.w	8003128 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800328c:	bf00      	nop
 800328e:	3720      	adds	r7, #32
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	2000c9a0 	.word	0x2000c9a0

08003298 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800329e:	e009      	b.n	80032b4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80032a0:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <prvSwitchTimerLists+0x44>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	607b      	str	r3, [r7, #4]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80032aa:	f04f 31ff 	mov.w	r1, #4294967295
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff fe20 	bl	8002ef4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80032b4:	4b09      	ldr	r3, [pc, #36]	; (80032dc <prvSwitchTimerLists+0x44>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f0      	bne.n	80032a0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80032be:	4b07      	ldr	r3, [pc, #28]	; (80032dc <prvSwitchTimerLists+0x44>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	603b      	str	r3, [r7, #0]
        pxCurrentTimerList = pxOverflowTimerList;
 80032c4:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <prvSwitchTimerLists+0x48>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a04      	ldr	r2, [pc, #16]	; (80032dc <prvSwitchTimerLists+0x44>)
 80032ca:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80032cc:	4a04      	ldr	r2, [pc, #16]	; (80032e0 <prvSwitchTimerLists+0x48>)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	6013      	str	r3, [r2, #0]
    }
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	2000c998 	.word	0x2000c998
 80032e0:	2000c99c 	.word	0x2000c99c

080032e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80032e8:	f7fd fcfa 	bl	8000ce0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80032ec:	4b12      	ldr	r3, [pc, #72]	; (8003338 <prvCheckForValidListAndQueue+0x54>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d11d      	bne.n	8003330 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80032f4:	4811      	ldr	r0, [pc, #68]	; (800333c <prvCheckForValidListAndQueue+0x58>)
 80032f6:	f7fd fb3d 	bl	8000974 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80032fa:	4811      	ldr	r0, [pc, #68]	; (8003340 <prvCheckForValidListAndQueue+0x5c>)
 80032fc:	f7fd fb3a 	bl	8000974 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003300:	4b10      	ldr	r3, [pc, #64]	; (8003344 <prvCheckForValidListAndQueue+0x60>)
 8003302:	4a0e      	ldr	r2, [pc, #56]	; (800333c <prvCheckForValidListAndQueue+0x58>)
 8003304:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003306:	4b10      	ldr	r3, [pc, #64]	; (8003348 <prvCheckForValidListAndQueue+0x64>)
 8003308:	4a0d      	ldr	r2, [pc, #52]	; (8003340 <prvCheckForValidListAndQueue+0x5c>)
 800330a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800330c:	2200      	movs	r2, #0
 800330e:	210c      	movs	r1, #12
 8003310:	200a      	movs	r0, #10
 8003312:	f7fe f84d 	bl	80013b0 <xQueueGenericCreate>
 8003316:	4602      	mov	r2, r0
 8003318:	4b07      	ldr	r3, [pc, #28]	; (8003338 <prvCheckForValidListAndQueue+0x54>)
 800331a:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800331c:	4b06      	ldr	r3, [pc, #24]	; (8003338 <prvCheckForValidListAndQueue+0x54>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003324:	4b04      	ldr	r3, [pc, #16]	; (8003338 <prvCheckForValidListAndQueue+0x54>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4908      	ldr	r1, [pc, #32]	; (800334c <prvCheckForValidListAndQueue+0x68>)
 800332a:	4618      	mov	r0, r3
 800332c:	f7fe fc14 	bl	8001b58 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003330:	f7fd fd04 	bl	8000d3c <vPortExitCritical>
    }
 8003334:	bf00      	nop
 8003336:	bd80      	pop	{r7, pc}
 8003338:	2000c9a0 	.word	0x2000c9a0
 800333c:	2000c970 	.word	0x2000c970
 8003340:	2000c984 	.word	0x2000c984
 8003344:	2000c998 	.word	0x2000c998
 8003348:	2000c99c 	.word	0x2000c99c
 800334c:	08003db0 	.word	0x08003db0

08003350 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800335a:	4909      	ldr	r1, [pc, #36]	; (8003380 <NVIC_EnableIRQ+0x30>)
 800335c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	79fa      	ldrb	r2, [r7, #7]
 8003364:	f002 021f 	and.w	r2, r2, #31
 8003368:	2001      	movs	r0, #1
 800336a:	fa00 f202 	lsl.w	r2, r0, r2
 800336e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	e000e100 	.word	0xe000e100

08003384 <NVIC_SetPendingIRQ>:
    The function sets the pending bit of an external interrupt.

    \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 800338e:	4909      	ldr	r1, [pc, #36]	; (80033b4 <NVIC_SetPendingIRQ+0x30>)
 8003390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	79fa      	ldrb	r2, [r7, #7]
 8003398:	f002 021f 	and.w	r2, r2, #31
 800339c:	2001      	movs	r0, #1
 800339e:	fa00 f202 	lsl.w	r2, r0, r2
 80033a2:	3340      	adds	r3, #64	; 0x40
 80033a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	e000e100 	.word	0xe000e100

080033b8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	6039      	str	r1, [r7, #0]
 80033c2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80033c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	da0b      	bge.n	80033e4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80033cc:	490d      	ldr	r1, [pc, #52]	; (8003404 <NVIC_SetPriority+0x4c>)
 80033ce:	79fb      	ldrb	r3, [r7, #7]
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	3b04      	subs	r3, #4
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	0112      	lsls	r2, r2, #4
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	440b      	add	r3, r1
 80033e0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80033e2:	e009      	b.n	80033f8 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80033e4:	4908      	ldr	r1, [pc, #32]	; (8003408 <NVIC_SetPriority+0x50>)
 80033e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	0112      	lsls	r2, r2, #4
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	440b      	add	r3, r1
 80033f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	e000ed00 	.word	0xe000ed00
 8003408:	e000e100 	.word	0xe000e100

0800340c <main>:
void Handler_Task_Handler(void *params);
void Periodic_Task_Handler(void *params);


int main(void)
{
 800340c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800340e:	b083      	sub	sp, #12
 8003410:	af02      	add	r7, sp, #8

	RCC_DeInit(); //HSI ON  | HSE OFF | PLL OFF | Systemclock 16 Mhz;
 8003412:	f7fd f82f 	bl	8000474 <RCC_DeInit>
	SystemCoreClockUpdate(); // Update SystemClock to 16MHz
 8003416:	f000 fa91 	bl	800393c <SystemCoreClockUpdate>
    GPIO_Config();
 800341a:	f000 f88b 	bl	8003534 <GPIO_Config>
    UART_Config();
 800341e:	f000 f959 	bl	80036d4 <UART_Config>
    EXTI_Config();
 8003422:	f000 f8c1 	bl	80035a8 <EXTI_Config>
    sprintf(myMSG,"This is Counting Semaphore Interrupt Application!\r\n");
 8003426:	4b3a      	ldr	r3, [pc, #232]	; (8003510 <main+0x104>)
 8003428:	4a3a      	ldr	r2, [pc, #232]	; (8003514 <main+0x108>)
 800342a:	4614      	mov	r4, r2
 800342c:	469e      	mov	lr, r3
 800342e:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8003432:	4675      	mov	r5, lr
 8003434:	4626      	mov	r6, r4
 8003436:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003438:	6028      	str	r0, [r5, #0]
 800343a:	6069      	str	r1, [r5, #4]
 800343c:	60aa      	str	r2, [r5, #8]
 800343e:	60eb      	str	r3, [r5, #12]
 8003440:	3410      	adds	r4, #16
 8003442:	f10e 0e10 	add.w	lr, lr, #16
 8003446:	4564      	cmp	r4, ip
 8003448:	d1f3      	bne.n	8003432 <main+0x26>
 800344a:	4673      	mov	r3, lr
 800344c:	4622      	mov	r2, r4
 800344e:	6810      	ldr	r0, [r2, #0]
 8003450:	6018      	str	r0, [r3, #0]
    printMsg(myMSG);
 8003452:	482f      	ldr	r0, [pc, #188]	; (8003510 <main+0x104>)
 8003454:	f000 f968 	bl	8003728 <printMsg>

    xCountingSemaphore = xSemaphoreCreateCounting(10,0); // Create Counting Semaphore with 5 Key
 8003458:	2100      	movs	r1, #0
 800345a:	200a      	movs	r0, #10
 800345c:	f7fe f815 	bl	800148a <xQueueCreateCountingSemaphore>
 8003460:	4602      	mov	r2, r0
 8003462:	4b2d      	ldr	r3, [pc, #180]	; (8003518 <main+0x10c>)
 8003464:	601a      	str	r2, [r3, #0]

    if(xCountingSemaphore != NULL)
 8003466:	4b2c      	ldr	r3, [pc, #176]	; (8003518 <main+0x10c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d033      	beq.n	80034d6 <main+0xca>
    {
        sprintf(myMSG,"Semaphore and Tasks are Created!\r\n");
 800346e:	4b28      	ldr	r3, [pc, #160]	; (8003510 <main+0x104>)
 8003470:	4a2a      	ldr	r2, [pc, #168]	; (800351c <main+0x110>)
 8003472:	4614      	mov	r4, r2
 8003474:	469e      	mov	lr, r3
 8003476:	f104 0c20 	add.w	ip, r4, #32
 800347a:	4675      	mov	r5, lr
 800347c:	4626      	mov	r6, r4
 800347e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003480:	6028      	str	r0, [r5, #0]
 8003482:	6069      	str	r1, [r5, #4]
 8003484:	60aa      	str	r2, [r5, #8]
 8003486:	60eb      	str	r3, [r5, #12]
 8003488:	3410      	adds	r4, #16
 800348a:	f10e 0e10 	add.w	lr, lr, #16
 800348e:	4564      	cmp	r4, ip
 8003490:	d1f3      	bne.n	800347a <main+0x6e>
 8003492:	4673      	mov	r3, lr
 8003494:	4622      	mov	r2, r4
 8003496:	8811      	ldrh	r1, [r2, #0]
 8003498:	7892      	ldrb	r2, [r2, #2]
 800349a:	8019      	strh	r1, [r3, #0]
 800349c:	709a      	strb	r2, [r3, #2]
        printMsg(myMSG);
 800349e:	481c      	ldr	r0, [pc, #112]	; (8003510 <main+0x104>)
 80034a0:	f000 f942 	bl	8003728 <printMsg>
        xTaskCreate(Handler_Task_Handler,"Handler Task",300,NULL,1,NULL);
 80034a4:	2300      	movs	r3, #0
 80034a6:	9301      	str	r3, [sp, #4]
 80034a8:	2301      	movs	r3, #1
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	2300      	movs	r3, #0
 80034ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034b2:	491b      	ldr	r1, [pc, #108]	; (8003520 <main+0x114>)
 80034b4:	481b      	ldr	r0, [pc, #108]	; (8003524 <main+0x118>)
 80034b6:	f7fe fbd1 	bl	8001c5c <xTaskCreate>
        xTaskCreate(Periodic_Task_Handler,"Periodic Task",300,NULL,3,NULL);
 80034ba:	2300      	movs	r3, #0
 80034bc:	9301      	str	r3, [sp, #4]
 80034be:	2303      	movs	r3, #3
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	2300      	movs	r3, #0
 80034c4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034c8:	4917      	ldr	r1, [pc, #92]	; (8003528 <main+0x11c>)
 80034ca:	4818      	ldr	r0, [pc, #96]	; (800352c <main+0x120>)
 80034cc:	f7fe fbc6 	bl	8001c5c <xTaskCreate>
        vTaskStartScheduler();
 80034d0:	f7fe fd60 	bl	8001f94 <vTaskStartScheduler>
 80034d4:	e01b      	b.n	800350e <main+0x102>
    }
    else
    {
        sprintf(myMSG,"Semaphore and Tasks Could Not Created!\r\n");
 80034d6:	4b0e      	ldr	r3, [pc, #56]	; (8003510 <main+0x104>)
 80034d8:	4a15      	ldr	r2, [pc, #84]	; (8003530 <main+0x124>)
 80034da:	4614      	mov	r4, r2
 80034dc:	469e      	mov	lr, r3
 80034de:	f104 0c20 	add.w	ip, r4, #32
 80034e2:	4675      	mov	r5, lr
 80034e4:	4626      	mov	r6, r4
 80034e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80034e8:	6028      	str	r0, [r5, #0]
 80034ea:	6069      	str	r1, [r5, #4]
 80034ec:	60aa      	str	r2, [r5, #8]
 80034ee:	60eb      	str	r3, [r5, #12]
 80034f0:	3410      	adds	r4, #16
 80034f2:	f10e 0e10 	add.w	lr, lr, #16
 80034f6:	4564      	cmp	r4, ip
 80034f8:	d1f3      	bne.n	80034e2 <main+0xd6>
 80034fa:	4672      	mov	r2, lr
 80034fc:	4623      	mov	r3, r4
 80034fe:	cb03      	ldmia	r3!, {r0, r1}
 8003500:	6010      	str	r0, [r2, #0]
 8003502:	6051      	str	r1, [r2, #4]
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	7213      	strb	r3, [r2, #8]
        printMsg(myMSG);
 8003508:	4801      	ldr	r0, [pc, #4]	; (8003510 <main+0x104>)
 800350a:	f000 f90d 	bl	8003728 <printMsg>
    }



  while (1)
 800350e:	e7fe      	b.n	800350e <main+0x102>
 8003510:	2000c9f0 	.word	0x2000c9f0
 8003514:	08003db8 	.word	0x08003db8
 8003518:	2000c9ac 	.word	0x2000c9ac
 800351c:	08003dec 	.word	0x08003dec
 8003520:	08003e10 	.word	0x08003e10
 8003524:	08003779 	.word	0x08003779
 8003528:	08003e20 	.word	0x08003e20
 800352c:	080037c9 	.word	0x080037c9
 8003530:	08003e30 	.word	0x08003e30

08003534 <GPIO_Config>:

  }
}

void GPIO_Config(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0

     RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE); // GPIOA ENABLED
 800353a:	2101      	movs	r1, #1
 800353c:	2001      	movs	r0, #1
 800353e:	f7fd f86f 	bl	8000620 <RCC_AHB1PeriphClockCmd>

     GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003542:	463b      	mov	r3, r7
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	605a      	str	r2, [r3, #4]


	 GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2); // TX GPIOA PIN 2
 800354a:	2207      	movs	r2, #7
 800354c:	2102      	movs	r1, #2
 800354e:	4815      	ldr	r0, [pc, #84]	; (80035a4 <GPIO_Config+0x70>)
 8003550:	f7fc ff46 	bl	80003e0 <GPIO_PinAFConfig>
	 GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2); // RX GPIOA PIN 3
 8003554:	2207      	movs	r2, #7
 8003556:	2103      	movs	r1, #3
 8003558:	4812      	ldr	r0, [pc, #72]	; (80035a4 <GPIO_Config+0x70>)
 800355a:	f7fc ff41 	bl	80003e0 <GPIO_PinAFConfig>

	 GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 800355e:	2302      	movs	r3, #2
 8003560:	713b      	strb	r3, [r7, #4]
	 GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8003562:	2300      	movs	r3, #0
 8003564:	71bb      	strb	r3, [r7, #6]
	 GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8003566:	230c      	movs	r3, #12
 8003568:	603b      	str	r3, [r7, #0]
	 GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800356a:	2300      	movs	r3, #0
 800356c:	71fb      	strb	r3, [r7, #7]
	 GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800356e:	2303      	movs	r3, #3
 8003570:	717b      	strb	r3, [r7, #5]

	  GPIO_Init(GPIOA,&GPIO_InitStruct);
 8003572:	463b      	mov	r3, r7
 8003574:	4619      	mov	r1, r3
 8003576:	480b      	ldr	r0, [pc, #44]	; (80035a4 <GPIO_Config+0x70>)
 8003578:	f7fc fea4 	bl	80002c4 <GPIO_Init>

	  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_5;
 800357c:	2320      	movs	r3, #32
 800357e:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8003580:	2301      	movs	r3, #1
 8003582:	713b      	strb	r3, [r7, #4]
	  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8003584:	2300      	movs	r3, #0
 8003586:	71bb      	strb	r3, [r7, #6]
	  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003588:	2300      	movs	r3, #0
 800358a:	71fb      	strb	r3, [r7, #7]
	  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800358c:	2303      	movs	r3, #3
 800358e:	717b      	strb	r3, [r7, #5]
	  GPIO_Init(GPIOA,&GPIO_InitStruct);
 8003590:	463b      	mov	r3, r7
 8003592:	4619      	mov	r1, r3
 8003594:	4803      	ldr	r0, [pc, #12]	; (80035a4 <GPIO_Config+0x70>)
 8003596:	f7fc fe95 	bl	80002c4 <GPIO_Init>



}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40020000 	.word	0x40020000

080035a8 <EXTI_Config>:
void EXTI_Config(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
	  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);
 80035ae:	2101      	movs	r1, #1
 80035b0:	2004      	movs	r0, #4
 80035b2:	f7fd f835 	bl	8000620 <RCC_AHB1PeriphClockCmd>
	  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE); //ENABLE SYSCFG FOR EXTI LINE
 80035b6:	2101      	movs	r1, #1
 80035b8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80035bc:	f7fd f870 	bl	80006a0 <RCC_APB2PeriphClockCmd>

	  SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC,EXTI_PinSource13);//Selecting port and pin for EXTI
 80035c0:	210d      	movs	r1, #13
 80035c2:	2002      	movs	r0, #2
 80035c4:	f7fd f88c 	bl	80006e0 <SYSCFG_EXTILineConfig>

	  EXTI_InitTypeDef EXTI_InitStruct = {0};
 80035c8:	f107 0308 	add.w	r3, r7, #8
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	605a      	str	r2, [r3, #4]
	  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80035d2:	463b      	mov	r3, r7
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	605a      	str	r2, [r3, #4]

	  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_13;
 80035da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035de:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 80035e0:	2300      	movs	r3, #0
 80035e2:	713b      	strb	r3, [r7, #4]
	  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80035e4:	2300      	movs	r3, #0
 80035e6:	71bb      	strb	r3, [r7, #6]
	  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 80035e8:	2302      	movs	r3, #2
 80035ea:	71fb      	strb	r3, [r7, #7]
	  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80035ec:	2303      	movs	r3, #3
 80035ee:	717b      	strb	r3, [r7, #5]
	  GPIO_Init(GPIOC,&GPIO_InitStruct);
 80035f0:	463b      	mov	r3, r7
 80035f2:	4619      	mov	r1, r3
 80035f4:	480d      	ldr	r0, [pc, #52]	; (800362c <EXTI_Config+0x84>)
 80035f6:	f7fc fe65 	bl	80002c4 <GPIO_Init>

	  EXTI_InitStruct.EXTI_Line = EXTI_Line13;
 80035fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035fe:	60bb      	str	r3, [r7, #8]
	  EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8003600:	2301      	movs	r3, #1
 8003602:	73bb      	strb	r3, [r7, #14]
	  EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 8003604:	2300      	movs	r3, #0
 8003606:	733b      	strb	r3, [r7, #12]
	  EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising;
 8003608:	2308      	movs	r3, #8
 800360a:	737b      	strb	r3, [r7, #13]

	  EXTI_Init(&EXTI_InitStruct);
 800360c:	f107 0308 	add.w	r3, r7, #8
 8003610:	4618      	mov	r0, r3
 8003612:	f7fc fde5 	bl	80001e0 <EXTI_Init>

	  NVIC_SetPriority(EXTI15_10_IRQn,5);
 8003616:	2105      	movs	r1, #5
 8003618:	2028      	movs	r0, #40	; 0x28
 800361a:	f7ff fecd 	bl	80033b8 <NVIC_SetPriority>
	  NVIC_EnableIRQ(EXTI15_10_IRQn);
 800361e:	2028      	movs	r0, #40	; 0x28
 8003620:	f7ff fe96 	bl	8003350 <NVIC_EnableIRQ>


}
 8003624:	bf00      	nop
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40020800 	.word	0x40020800

08003630 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler()
{
 8003630:	b5b0      	push	{r4, r5, r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8003636:	2300      	movs	r3, #0
 8003638:	607b      	str	r3, [r7, #4]
    sprintf(myMSG,"Interrupt is Active.\r\n");
 800363a:	4a22      	ldr	r2, [pc, #136]	; (80036c4 <EXTI15_10_IRQHandler+0x94>)
 800363c:	4b22      	ldr	r3, [pc, #136]	; (80036c8 <EXTI15_10_IRQHandler+0x98>)
 800363e:	4614      	mov	r4, r2
 8003640:	461d      	mov	r5, r3
 8003642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003644:	6020      	str	r0, [r4, #0]
 8003646:	6061      	str	r1, [r4, #4]
 8003648:	60a2      	str	r2, [r4, #8]
 800364a:	60e3      	str	r3, [r4, #12]
 800364c:	6828      	ldr	r0, [r5, #0]
 800364e:	6120      	str	r0, [r4, #16]
 8003650:	88ab      	ldrh	r3, [r5, #4]
 8003652:	79aa      	ldrb	r2, [r5, #6]
 8003654:	82a3      	strh	r3, [r4, #20]
 8003656:	4613      	mov	r3, r2
 8003658:	75a3      	strb	r3, [r4, #22]
    printMsg(myMSG);
 800365a:	481a      	ldr	r0, [pc, #104]	; (80036c4 <EXTI15_10_IRQHandler+0x94>)
 800365c:	f000 f864 	bl	8003728 <printMsg>

    xSemaphoreGiveFromISR(xCountingSemaphore,&xHigherPriorityTaskWoken);
 8003660:	4b1a      	ldr	r3, [pc, #104]	; (80036cc <EXTI15_10_IRQHandler+0x9c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	1d3a      	adds	r2, r7, #4
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f7fd ff3b 	bl	80014e4 <xQueueGiveFromISR>
    xSemaphoreGiveFromISR(xCountingSemaphore,&xHigherPriorityTaskWoken);
 800366e:	4b17      	ldr	r3, [pc, #92]	; (80036cc <EXTI15_10_IRQHandler+0x9c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	1d3a      	adds	r2, r7, #4
 8003674:	4611      	mov	r1, r2
 8003676:	4618      	mov	r0, r3
 8003678:	f7fd ff34 	bl	80014e4 <xQueueGiveFromISR>
    xSemaphoreGiveFromISR(xCountingSemaphore,&xHigherPriorityTaskWoken);
 800367c:	4b13      	ldr	r3, [pc, #76]	; (80036cc <EXTI15_10_IRQHandler+0x9c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	1d3a      	adds	r2, r7, #4
 8003682:	4611      	mov	r1, r2
 8003684:	4618      	mov	r0, r3
 8003686:	f7fd ff2d 	bl	80014e4 <xQueueGiveFromISR>
    xSemaphoreGiveFromISR(xCountingSemaphore,&xHigherPriorityTaskWoken);
 800368a:	4b10      	ldr	r3, [pc, #64]	; (80036cc <EXTI15_10_IRQHandler+0x9c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1d3a      	adds	r2, r7, #4
 8003690:	4611      	mov	r1, r2
 8003692:	4618      	mov	r0, r3
 8003694:	f7fd ff26 	bl	80014e4 <xQueueGiveFromISR>
    xSemaphoreGiveFromISR(xCountingSemaphore,&xHigherPriorityTaskWoken);
 8003698:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <EXTI15_10_IRQHandler+0x9c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	1d3a      	adds	r2, r7, #4
 800369e:	4611      	mov	r1, r2
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fd ff1f 	bl	80014e4 <xQueueGiveFromISR>


    portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d007      	beq.n	80036bc <EXTI15_10_IRQHandler+0x8c>
 80036ac:	4b08      	ldr	r3, [pc, #32]	; (80036d0 <EXTI15_10_IRQHandler+0xa0>)
 80036ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	f3bf 8f4f 	dsb	sy
 80036b8:	f3bf 8f6f 	isb	sy

}
 80036bc:	bf00      	nop
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bdb0      	pop	{r4, r5, r7, pc}
 80036c4:	2000c9f0 	.word	0x2000c9f0
 80036c8:	08003e5c 	.word	0x08003e5c
 80036cc:	2000c9ac 	.word	0x2000c9ac
 80036d0:	e000ed04 	.word	0xe000ed04

080036d4 <UART_Config>:
void UART_Config(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0

	 USART_InitTypeDef USART_InitStruct = {0};
 80036da:	463b      	mov	r3, r7
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	605a      	str	r2, [r3, #4]
 80036e2:	609a      	str	r2, [r3, #8]
 80036e4:	60da      	str	r2, [r3, #12]

	 RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE); // USART2 ENABLED
 80036e6:	2101      	movs	r1, #1
 80036e8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80036ec:	f7fc ffb8 	bl	8000660 <RCC_APB1PeriphClockCmd>


	 USART_InitStruct.USART_BaudRate = 9600;
 80036f0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80036f4:	603b      	str	r3, [r7, #0]
	 USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80036f6:	2300      	movs	r3, #0
 80036f8:	81bb      	strh	r3, [r7, #12]
	 USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 80036fa:	230c      	movs	r3, #12
 80036fc:	817b      	strh	r3, [r7, #10]
	 USART_InitStruct.USART_Parity = USART_Parity_No;
 80036fe:	2300      	movs	r3, #0
 8003700:	813b      	strh	r3, [r7, #8]
	 USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8003702:	2300      	movs	r3, #0
 8003704:	80fb      	strh	r3, [r7, #6]
	 USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8003706:	2300      	movs	r3, #0
 8003708:	80bb      	strh	r3, [r7, #4]

	 USART_Init(USART2,&USART_InitStruct);
 800370a:	463b      	mov	r3, r7
 800370c:	4619      	mov	r1, r3
 800370e:	4805      	ldr	r0, [pc, #20]	; (8003724 <UART_Config+0x50>)
 8003710:	f7fd f828 	bl	8000764 <USART_Init>

	 USART_Cmd(USART2,ENABLE);
 8003714:	2101      	movs	r1, #1
 8003716:	4803      	ldr	r0, [pc, #12]	; (8003724 <UART_Config+0x50>)
 8003718:	f7fd f8de 	bl	80008d8 <USART_Cmd>


}
 800371c:	bf00      	nop
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40004400 	.word	0x40004400

08003728 <printMsg>:

void printMsg(char *msg)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
   for(int i = 0 ; i< strlen(msg);i++)
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	e013      	b.n	800375e <printMsg+0x36>
   {
	   while(USART_GetFlagStatus(USART2,USART_FLAG_TXE)!=SET);
 8003736:	bf00      	nop
 8003738:	2180      	movs	r1, #128	; 0x80
 800373a:	480e      	ldr	r0, [pc, #56]	; (8003774 <printMsg+0x4c>)
 800373c:	f7fd f8fe 	bl	800093c <USART_GetFlagStatus>
 8003740:	4603      	mov	r3, r0
 8003742:	2b01      	cmp	r3, #1
 8003744:	d1f8      	bne.n	8003738 <printMsg+0x10>
	   USART_SendData(USART2,msg[i]);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	4413      	add	r3, r2
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	b29b      	uxth	r3, r3
 8003750:	4619      	mov	r1, r3
 8003752:	4808      	ldr	r0, [pc, #32]	; (8003774 <printMsg+0x4c>)
 8003754:	f7fd f8e0 	bl	8000918 <USART_SendData>
   for(int i = 0 ; i< strlen(msg);i++)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	3301      	adds	r3, #1
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7fc fd36 	bl	80001d0 <strlen>
 8003764:	4602      	mov	r2, r0
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	429a      	cmp	r2, r3
 800376a:	d8e4      	bhi.n	8003736 <printMsg+0xe>

   }

}
 800376c:	bf00      	nop
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40004400 	.word	0x40004400

08003778 <Handler_Task_Handler>:

void Handler_Task_Handler(void *params)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]

	while(xSemaphoreTake(xCountingSemaphore,portMAX_DELAY))
 8003780:	e00d      	b.n	800379e <Handler_Task_Handler+0x26>
	{
	      sprintf(myMSG,"Handler Task Processing Event.\r\nRemaining Keys:%u\r\n",
 8003782:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <Handler_Task_Handler+0x44>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f7fe f922 	bl	80019d0 <uxQueueMessagesWaiting>
 800378c:	4603      	mov	r3, r0
 800378e:	461a      	mov	r2, r3
 8003790:	490b      	ldr	r1, [pc, #44]	; (80037c0 <Handler_Task_Handler+0x48>)
 8003792:	480c      	ldr	r0, [pc, #48]	; (80037c4 <Handler_Task_Handler+0x4c>)
 8003794:	f000 faaa 	bl	8003cec <siprintf>
	    		  uxSemaphoreGetCount(xCountingSemaphore));
	      printMsg(myMSG);
 8003798:	480a      	ldr	r0, [pc, #40]	; (80037c4 <Handler_Task_Handler+0x4c>)
 800379a:	f7ff ffc5 	bl	8003728 <printMsg>
	while(xSemaphoreTake(xCountingSemaphore,portMAX_DELAY))
 800379e:	4b07      	ldr	r3, [pc, #28]	; (80037bc <Handler_Task_Handler+0x44>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f04f 31ff 	mov.w	r1, #4294967295
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fe f818 	bl	80017dc <xQueueSemaphoreTake>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1e7      	bne.n	8003782 <Handler_Task_Handler+0xa>

	}



}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	2000c9ac 	.word	0x2000c9ac
 80037c0:	08003e74 	.word	0x08003e74
 80037c4:	2000c9f0 	.word	0x2000c9f0

080037c8 <Periodic_Task_Handler>:


void Periodic_Task_Handler(void *params)
{
 80037c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
	while(1)
	{
      vTaskDelay(pdMS_TO_TICKS(500));
 80037d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80037d4:	f7fe fbaa 	bl	8001f2c <vTaskDelay>

      sprintf(myMSG,"Periodic Task: Pending the Interrupt \r\n");
 80037d8:	4b18      	ldr	r3, [pc, #96]	; (800383c <Periodic_Task_Handler+0x74>)
 80037da:	4a19      	ldr	r2, [pc, #100]	; (8003840 <Periodic_Task_Handler+0x78>)
 80037dc:	4614      	mov	r4, r2
 80037de:	469e      	mov	lr, r3
 80037e0:	f104 0c20 	add.w	ip, r4, #32
 80037e4:	4675      	mov	r5, lr
 80037e6:	4626      	mov	r6, r4
 80037e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80037ea:	6028      	str	r0, [r5, #0]
 80037ec:	6069      	str	r1, [r5, #4]
 80037ee:	60aa      	str	r2, [r5, #8]
 80037f0:	60eb      	str	r3, [r5, #12]
 80037f2:	3410      	adds	r4, #16
 80037f4:	f10e 0e10 	add.w	lr, lr, #16
 80037f8:	4564      	cmp	r4, ip
 80037fa:	d1f3      	bne.n	80037e4 <Periodic_Task_Handler+0x1c>
 80037fc:	4672      	mov	r2, lr
 80037fe:	4623      	mov	r3, r4
 8003800:	cb03      	ldmia	r3!, {r0, r1}
 8003802:	6010      	str	r0, [r2, #0]
 8003804:	6051      	str	r1, [r2, #4]
      printMsg(myMSG);
 8003806:	480d      	ldr	r0, [pc, #52]	; (800383c <Periodic_Task_Handler+0x74>)
 8003808:	f7ff ff8e 	bl	8003728 <printMsg>

      NVIC_SetPendingIRQ(EXTI15_10_IRQn);
 800380c:	2028      	movs	r0, #40	; 0x28
 800380e:	f7ff fdb9 	bl	8003384 <NVIC_SetPendingIRQ>

      sprintf(myMSG,"Periodic Task: Resuming \r\n");
 8003812:	4a0a      	ldr	r2, [pc, #40]	; (800383c <Periodic_Task_Handler+0x74>)
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <Periodic_Task_Handler+0x7c>)
 8003816:	4615      	mov	r5, r2
 8003818:	461c      	mov	r4, r3
 800381a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800381c:	6028      	str	r0, [r5, #0]
 800381e:	6069      	str	r1, [r5, #4]
 8003820:	60aa      	str	r2, [r5, #8]
 8003822:	60eb      	str	r3, [r5, #12]
 8003824:	cc03      	ldmia	r4!, {r0, r1}
 8003826:	6128      	str	r0, [r5, #16]
 8003828:	6169      	str	r1, [r5, #20]
 800382a:	8823      	ldrh	r3, [r4, #0]
 800382c:	78a2      	ldrb	r2, [r4, #2]
 800382e:	832b      	strh	r3, [r5, #24]
 8003830:	4613      	mov	r3, r2
 8003832:	76ab      	strb	r3, [r5, #26]
      printMsg(myMSG);
 8003834:	4801      	ldr	r0, [pc, #4]	; (800383c <Periodic_Task_Handler+0x74>)
 8003836:	f7ff ff77 	bl	8003728 <printMsg>
      vTaskDelay(pdMS_TO_TICKS(500));
 800383a:	e7c9      	b.n	80037d0 <Periodic_Task_Handler+0x8>
 800383c:	2000c9f0 	.word	0x2000c9f0
 8003840:	08003ea8 	.word	0x08003ea8
 8003844:	08003ed0 	.word	0x08003ed0

08003848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003880 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800384c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800384e:	e003      	b.n	8003858 <LoopCopyDataInit>

08003850 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003850:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003852:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003854:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003856:	3104      	adds	r1, #4

08003858 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003858:	480b      	ldr	r0, [pc, #44]	; (8003888 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800385a:	4b0c      	ldr	r3, [pc, #48]	; (800388c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800385c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800385e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003860:	d3f6      	bcc.n	8003850 <CopyDataInit>
  ldr  r2, =_sbss
 8003862:	4a0b      	ldr	r2, [pc, #44]	; (8003890 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003864:	e002      	b.n	800386c <LoopFillZerobss>

08003866 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003866:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003868:	f842 3b04 	str.w	r3, [r2], #4

0800386c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800386c:	4b09      	ldr	r3, [pc, #36]	; (8003894 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800386e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003870:	d3f9      	bcc.n	8003866 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003872:	f000 f82d 	bl	80038d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003876:	f000 fa4f 	bl	8003d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800387a:	f7ff fdc7 	bl	800340c <main>
  bx  lr    
 800387e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003880:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8003884:	08003ef4 	.word	0x08003ef4
  ldr  r0, =_sdata
 8003888:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800388c:	2000002c 	.word	0x2000002c
  ldr  r2, =_sbss
 8003890:	2000002c 	.word	0x2000002c
  ldr  r3, = _ebss
 8003894:	2000ca24 	.word	0x2000ca24

08003898 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003898:	e7fe      	b.n	8003898 <ADC_IRQHandler>

0800389a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800389a:	b480      	push	{r7}
 800389c:	af00      	add	r7, sp, #0
}
 800389e:	bf00      	nop
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80038ac:	e7fe      	b.n	80038ac <HardFault_Handler+0x4>

080038ae <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80038ae:	b480      	push	{r7}
 80038b0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80038b2:	e7fe      	b.n	80038b2 <MemManage_Handler+0x4>

080038b4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80038b8:	e7fe      	b.n	80038b8 <BusFault_Handler+0x4>

080038ba <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80038ba:	b480      	push	{r7}
 80038bc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80038be:	e7fe      	b.n	80038be <UsageFault_Handler+0x4>

080038c0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
}
 80038c4:	bf00      	nop
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
	...

080038d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038d4:	4a16      	ldr	r2, [pc, #88]	; (8003930 <SystemInit+0x60>)
 80038d6:	4b16      	ldr	r3, [pc, #88]	; (8003930 <SystemInit+0x60>)
 80038d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80038e4:	4a13      	ldr	r2, [pc, #76]	; (8003934 <SystemInit+0x64>)
 80038e6:	4b13      	ldr	r3, [pc, #76]	; (8003934 <SystemInit+0x64>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80038f0:	4b10      	ldr	r3, [pc, #64]	; (8003934 <SystemInit+0x64>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80038f6:	4a0f      	ldr	r2, [pc, #60]	; (8003934 <SystemInit+0x64>)
 80038f8:	4b0e      	ldr	r3, [pc, #56]	; (8003934 <SystemInit+0x64>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003900:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003904:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003906:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <SystemInit+0x64>)
 8003908:	4a0b      	ldr	r2, [pc, #44]	; (8003938 <SystemInit+0x68>)
 800390a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800390c:	4a09      	ldr	r2, [pc, #36]	; (8003934 <SystemInit+0x64>)
 800390e:	4b09      	ldr	r3, [pc, #36]	; (8003934 <SystemInit+0x64>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003916:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003918:	4b06      	ldr	r3, [pc, #24]	; (8003934 <SystemInit+0x64>)
 800391a:	2200      	movs	r2, #0
 800391c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800391e:	f000 f889 	bl	8003a34 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003922:	4b03      	ldr	r3, [pc, #12]	; (8003930 <SystemInit+0x60>)
 8003924:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003928:	609a      	str	r2, [r3, #8]
#endif
}
 800392a:	bf00      	nop
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	e000ed00 	.word	0xe000ed00
 8003934:	40023800 	.word	0x40023800
 8003938:	24003010 	.word	0x24003010

0800393c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8003942:	2300      	movs	r3, #0
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	2302      	movs	r3, #2
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	2300      	movs	r3, #0
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	2302      	movs	r3, #2
 8003954:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003956:	4b32      	ldr	r3, [pc, #200]	; (8003a20 <SystemCoreClockUpdate+0xe4>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	2b04      	cmp	r3, #4
 8003964:	d007      	beq.n	8003976 <SystemCoreClockUpdate+0x3a>
 8003966:	2b08      	cmp	r3, #8
 8003968:	d009      	beq.n	800397e <SystemCoreClockUpdate+0x42>
 800396a:	2b00      	cmp	r3, #0
 800396c:	d13d      	bne.n	80039ea <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800396e:	4b2d      	ldr	r3, [pc, #180]	; (8003a24 <SystemCoreClockUpdate+0xe8>)
 8003970:	4a2d      	ldr	r2, [pc, #180]	; (8003a28 <SystemCoreClockUpdate+0xec>)
 8003972:	601a      	str	r2, [r3, #0]
      break;
 8003974:	e03d      	b.n	80039f2 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003976:	4b2b      	ldr	r3, [pc, #172]	; (8003a24 <SystemCoreClockUpdate+0xe8>)
 8003978:	4a2c      	ldr	r2, [pc, #176]	; (8003a2c <SystemCoreClockUpdate+0xf0>)
 800397a:	601a      	str	r2, [r3, #0]
      break;
 800397c:	e039      	b.n	80039f2 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800397e:	4b28      	ldr	r3, [pc, #160]	; (8003a20 <SystemCoreClockUpdate+0xe4>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	0d9b      	lsrs	r3, r3, #22
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800398a:	4b25      	ldr	r3, [pc, #148]	; (8003a20 <SystemCoreClockUpdate+0xe4>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003992:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00c      	beq.n	80039b4 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800399a:	4a24      	ldr	r2, [pc, #144]	; (8003a2c <SystemCoreClockUpdate+0xf0>)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a2:	4a1f      	ldr	r2, [pc, #124]	; (8003a20 <SystemCoreClockUpdate+0xe4>)
 80039a4:	6852      	ldr	r2, [r2, #4]
 80039a6:	0992      	lsrs	r2, r2, #6
 80039a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039ac:	fb02 f303 	mul.w	r3, r2, r3
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	e00b      	b.n	80039cc <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80039b4:	4a1c      	ldr	r2, [pc, #112]	; (8003a28 <SystemCoreClockUpdate+0xec>)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039bc:	4a18      	ldr	r2, [pc, #96]	; (8003a20 <SystemCoreClockUpdate+0xe4>)
 80039be:	6852      	ldr	r2, [r2, #4]
 80039c0:	0992      	lsrs	r2, r2, #6
 80039c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039c6:	fb02 f303 	mul.w	r3, r2, r3
 80039ca:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80039cc:	4b14      	ldr	r3, [pc, #80]	; (8003a20 <SystemCoreClockUpdate+0xe4>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	0c1b      	lsrs	r3, r3, #16
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	3301      	adds	r3, #1
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e4:	4a0f      	ldr	r2, [pc, #60]	; (8003a24 <SystemCoreClockUpdate+0xe8>)
 80039e6:	6013      	str	r3, [r2, #0]
      break;
 80039e8:	e003      	b.n	80039f2 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 80039ea:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <SystemCoreClockUpdate+0xe8>)
 80039ec:	4a0e      	ldr	r2, [pc, #56]	; (8003a28 <SystemCoreClockUpdate+0xec>)
 80039ee:	601a      	str	r2, [r3, #0]
      break;
 80039f0:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80039f2:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <SystemCoreClockUpdate+0xe4>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	091b      	lsrs	r3, r3, #4
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	4a0c      	ldr	r2, [pc, #48]	; (8003a30 <SystemCoreClockUpdate+0xf4>)
 80039fe:	5cd3      	ldrb	r3, [r2, r3]
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003a04:	4b07      	ldr	r3, [pc, #28]	; (8003a24 <SystemCoreClockUpdate+0xe8>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a0e:	4a05      	ldr	r2, [pc, #20]	; (8003a24 <SystemCoreClockUpdate+0xe8>)
 8003a10:	6013      	str	r3, [r2, #0]
}
 8003a12:	bf00      	nop
 8003a14:	371c      	adds	r7, #28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40023800 	.word	0x40023800
 8003a24:	20000018 	.word	0x20000018
 8003a28:	00f42400 	.word	0x00f42400
 8003a2c:	017d7840 	.word	0x017d7840
 8003a30:	2000001c 	.word	0x2000001c

08003a34 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	607b      	str	r3, [r7, #4]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003a42:	4a36      	ldr	r2, [pc, #216]	; (8003b1c <SetSysClock+0xe8>)
 8003a44:	4b35      	ldr	r3, [pc, #212]	; (8003b1c <SetSysClock+0xe8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a4c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003a4e:	4b33      	ldr	r3, [pc, #204]	; (8003b1c <SetSysClock+0xe8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d103      	bne.n	8003a6c <SetSysClock+0x38>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003a6a:	d1f0      	bne.n	8003a4e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003a6c:	4b2b      	ldr	r3, [pc, #172]	; (8003b1c <SetSysClock+0xe8>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	603b      	str	r3, [r7, #0]
 8003a7c:	e001      	b.n	8003a82 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d142      	bne.n	8003b0e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003a88:	4a24      	ldr	r2, [pc, #144]	; (8003b1c <SetSysClock+0xe8>)
 8003a8a:	4b24      	ldr	r3, [pc, #144]	; (8003b1c <SetSysClock+0xe8>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a92:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003a94:	4a22      	ldr	r2, [pc, #136]	; (8003b20 <SetSysClock+0xec>)
 8003a96:	4b22      	ldr	r3, [pc, #136]	; (8003b20 <SetSysClock+0xec>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a9e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003aa0:	4a1e      	ldr	r2, [pc, #120]	; (8003b1c <SetSysClock+0xe8>)
 8003aa2:	4b1e      	ldr	r3, [pc, #120]	; (8003b1c <SetSysClock+0xe8>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003aa8:	4a1c      	ldr	r2, [pc, #112]	; (8003b1c <SetSysClock+0xe8>)
 8003aaa:	4b1c      	ldr	r3, [pc, #112]	; (8003b1c <SetSysClock+0xe8>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ab2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003ab4:	4a19      	ldr	r2, [pc, #100]	; (8003b1c <SetSysClock+0xe8>)
 8003ab6:	4b19      	ldr	r3, [pc, #100]	; (8003b1c <SetSysClock+0xe8>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003abe:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003ac0:	4b16      	ldr	r3, [pc, #88]	; (8003b1c <SetSysClock+0xe8>)
 8003ac2:	4a18      	ldr	r2, [pc, #96]	; (8003b24 <SetSysClock+0xf0>)
 8003ac4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003ac6:	4a15      	ldr	r2, [pc, #84]	; (8003b1c <SetSysClock+0xe8>)
 8003ac8:	4b14      	ldr	r3, [pc, #80]	; (8003b1c <SetSysClock+0xe8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ad0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003ad2:	bf00      	nop
 8003ad4:	4b11      	ldr	r3, [pc, #68]	; (8003b1c <SetSysClock+0xe8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f9      	beq.n	8003ad4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003ae0:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <SetSysClock+0xf4>)
 8003ae2:	f240 7205 	movw	r2, #1797	; 0x705
 8003ae6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003ae8:	4a0c      	ldr	r2, [pc, #48]	; (8003b1c <SetSysClock+0xe8>)
 8003aea:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <SetSysClock+0xe8>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f023 0303 	bic.w	r3, r3, #3
 8003af2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003af4:	4a09      	ldr	r2, [pc, #36]	; (8003b1c <SetSysClock+0xe8>)
 8003af6:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <SetSysClock+0xe8>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f043 0302 	orr.w	r3, r3, #2
 8003afe:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003b00:	bf00      	nop
 8003b02:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <SetSysClock+0xe8>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d1f9      	bne.n	8003b02 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	40007000 	.word	0x40007000
 8003b24:	07405419 	.word	0x07405419
 8003b28:	40023c00 	.word	0x40023c00

08003b2c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
	int div = 1;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003b3c:	e004      	b.n	8003b48 <ts_itoa+0x1c>
		div *= base;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	fb02 f303 	mul.w	r3, r2, r3
 8003b46:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d2f3      	bcs.n	8003b3e <ts_itoa+0x12>

	while (div != 0)
 8003b56:	e029      	b.n	8003bac <ts_itoa+0x80>
	{
		int num = d/div;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b60:	613b      	str	r3, [r7, #16]
		d = d%div;
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b6a:	fb02 f201 	mul.w	r2, r2, r1
 8003b6e:	1a9b      	subs	r3, r3, r2
 8003b70:	60bb      	str	r3, [r7, #8]
		div /= base;
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	fb92 f3f3 	sdiv	r3, r2, r3
 8003b7a:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	2b09      	cmp	r3, #9
 8003b80:	dd0a      	ble.n	8003b98 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	1c59      	adds	r1, r3, #1
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	6011      	str	r1, [r2, #0]
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	3237      	adds	r2, #55	; 0x37
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]
 8003b96:	e009      	b.n	8003bac <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	1c59      	adds	r1, r3, #1
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	6011      	str	r1, [r2, #0]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	3230      	adds	r2, #48	; 0x30
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1d2      	bne.n	8003b58 <ts_itoa+0x2c>
	}
}
 8003bb2:	bf00      	nop
 8003bb4:	371c      	adds	r7, #28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b088      	sub	sp, #32
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	60f8      	str	r0, [r7, #12]
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8003bce:	e07d      	b.n	8003ccc <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b25      	cmp	r3, #37	; 0x25
 8003bd6:	d171      	bne.n	8003cbc <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	60bb      	str	r3, [r7, #8]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b64      	cmp	r3, #100	; 0x64
 8003be4:	d01e      	beq.n	8003c24 <ts_formatstring+0x66>
 8003be6:	2b64      	cmp	r3, #100	; 0x64
 8003be8:	dc06      	bgt.n	8003bf8 <ts_formatstring+0x3a>
 8003bea:	2b58      	cmp	r3, #88	; 0x58
 8003bec:	d050      	beq.n	8003c90 <ts_formatstring+0xd2>
 8003bee:	2b63      	cmp	r3, #99	; 0x63
 8003bf0:	d00e      	beq.n	8003c10 <ts_formatstring+0x52>
 8003bf2:	2b25      	cmp	r3, #37	; 0x25
 8003bf4:	d058      	beq.n	8003ca8 <ts_formatstring+0xea>
 8003bf6:	e05d      	b.n	8003cb4 <ts_formatstring+0xf6>
 8003bf8:	2b73      	cmp	r3, #115	; 0x73
 8003bfa:	d02b      	beq.n	8003c54 <ts_formatstring+0x96>
 8003bfc:	2b73      	cmp	r3, #115	; 0x73
 8003bfe:	dc02      	bgt.n	8003c06 <ts_formatstring+0x48>
 8003c00:	2b69      	cmp	r3, #105	; 0x69
 8003c02:	d00f      	beq.n	8003c24 <ts_formatstring+0x66>
 8003c04:	e056      	b.n	8003cb4 <ts_formatstring+0xf6>
 8003c06:	2b75      	cmp	r3, #117	; 0x75
 8003c08:	d037      	beq.n	8003c7a <ts_formatstring+0xbc>
 8003c0a:	2b78      	cmp	r3, #120	; 0x78
 8003c0c:	d040      	beq.n	8003c90 <ts_formatstring+0xd2>
 8003c0e:	e051      	b.n	8003cb4 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	60fa      	str	r2, [r7, #12]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	1d11      	adds	r1, r2, #4
 8003c1a:	6079      	str	r1, [r7, #4]
 8003c1c:	6812      	ldr	r2, [r2, #0]
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	701a      	strb	r2, [r3, #0]
				break;
 8003c22:	e047      	b.n	8003cb4 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	1d1a      	adds	r2, r3, #4
 8003c28:	607a      	str	r2, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	da07      	bge.n	8003c44 <ts_formatstring+0x86>
					{
						val *= -1;
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	425b      	negs	r3, r3
 8003c38:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	60fa      	str	r2, [r7, #12]
 8003c40:	222d      	movs	r2, #45	; 0x2d
 8003c42:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8003c44:	69f9      	ldr	r1, [r7, #28]
 8003c46:	f107 030c 	add.w	r3, r7, #12
 8003c4a:	220a      	movs	r2, #10
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff ff6d 	bl	8003b2c <ts_itoa>
				}
				break;
 8003c52:	e02f      	b.n	8003cb4 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	1d1a      	adds	r2, r3, #4
 8003c58:	607a      	str	r2, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8003c5e:	e007      	b.n	8003c70 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	60fa      	str	r2, [r7, #12]
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	1c51      	adds	r1, r2, #1
 8003c6a:	61b9      	str	r1, [r7, #24]
 8003c6c:	7812      	ldrb	r2, [r2, #0]
 8003c6e:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1f3      	bne.n	8003c60 <ts_formatstring+0xa2>
					}
				}
				break;
 8003c78:	e01c      	b.n	8003cb4 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	1d1a      	adds	r2, r3, #4
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	6819      	ldr	r1, [r3, #0]
 8003c82:	f107 030c 	add.w	r3, r7, #12
 8003c86:	220a      	movs	r2, #10
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff ff4f 	bl	8003b2c <ts_itoa>
				break;
 8003c8e:	e011      	b.n	8003cb4 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	1d1a      	adds	r2, r3, #4
 8003c94:	607a      	str	r2, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4619      	mov	r1, r3
 8003c9a:	f107 030c 	add.w	r3, r7, #12
 8003c9e:	2210      	movs	r2, #16
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff ff43 	bl	8003b2c <ts_itoa>
				break;
 8003ca6:	e005      	b.n	8003cb4 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	60fa      	str	r2, [r7, #12]
 8003cae:	2225      	movs	r2, #37	; 0x25
 8003cb0:	701a      	strb	r2, [r3, #0]
				  break;
 8003cb2:	bf00      	nop
			}
			fmt++;
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	e007      	b.n	8003ccc <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	60fa      	str	r2, [r7, #12]
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	1c51      	adds	r1, r2, #1
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	7812      	ldrb	r2, [r2, #0]
 8003cca:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f47f af7d 	bne.w	8003bd0 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	1ad3      	subs	r3, r2, r3
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3720      	adds	r7, #32
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8003cec:	b40e      	push	{r1, r2, r3}
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b085      	sub	sp, #20
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8003cf6:	f107 0320 	add.w	r3, r7, #32
 8003cfa:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	69f9      	ldr	r1, [r7, #28]
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff ff5c 	bl	8003bbe <ts_formatstring>
 8003d06:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8003d08:	68fb      	ldr	r3, [r7, #12]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d14:	b003      	add	sp, #12
 8003d16:	4770      	bx	lr

08003d18 <__libc_init_array>:
 8003d18:	b570      	push	{r4, r5, r6, lr}
 8003d1a:	4e0d      	ldr	r6, [pc, #52]	; (8003d50 <__libc_init_array+0x38>)
 8003d1c:	4c0d      	ldr	r4, [pc, #52]	; (8003d54 <__libc_init_array+0x3c>)
 8003d1e:	1ba4      	subs	r4, r4, r6
 8003d20:	10a4      	asrs	r4, r4, #2
 8003d22:	2500      	movs	r5, #0
 8003d24:	42a5      	cmp	r5, r4
 8003d26:	d109      	bne.n	8003d3c <__libc_init_array+0x24>
 8003d28:	4e0b      	ldr	r6, [pc, #44]	; (8003d58 <__libc_init_array+0x40>)
 8003d2a:	4c0c      	ldr	r4, [pc, #48]	; (8003d5c <__libc_init_array+0x44>)
 8003d2c:	f000 f82c 	bl	8003d88 <_init>
 8003d30:	1ba4      	subs	r4, r4, r6
 8003d32:	10a4      	asrs	r4, r4, #2
 8003d34:	2500      	movs	r5, #0
 8003d36:	42a5      	cmp	r5, r4
 8003d38:	d105      	bne.n	8003d46 <__libc_init_array+0x2e>
 8003d3a:	bd70      	pop	{r4, r5, r6, pc}
 8003d3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d40:	4798      	blx	r3
 8003d42:	3501      	adds	r5, #1
 8003d44:	e7ee      	b.n	8003d24 <__libc_init_array+0xc>
 8003d46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d4a:	4798      	blx	r3
 8003d4c:	3501      	adds	r5, #1
 8003d4e:	e7f2      	b.n	8003d36 <__libc_init_array+0x1e>
 8003d50:	08003eec 	.word	0x08003eec
 8003d54:	08003eec 	.word	0x08003eec
 8003d58:	08003eec 	.word	0x08003eec
 8003d5c:	08003ef0 	.word	0x08003ef0

08003d60 <memcpy>:
 8003d60:	b510      	push	{r4, lr}
 8003d62:	1e43      	subs	r3, r0, #1
 8003d64:	440a      	add	r2, r1
 8003d66:	4291      	cmp	r1, r2
 8003d68:	d100      	bne.n	8003d6c <memcpy+0xc>
 8003d6a:	bd10      	pop	{r4, pc}
 8003d6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d74:	e7f7      	b.n	8003d66 <memcpy+0x6>

08003d76 <memset>:
 8003d76:	4402      	add	r2, r0
 8003d78:	4603      	mov	r3, r0
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d100      	bne.n	8003d80 <memset+0xa>
 8003d7e:	4770      	bx	lr
 8003d80:	f803 1b01 	strb.w	r1, [r3], #1
 8003d84:	e7f9      	b.n	8003d7a <memset+0x4>
	...

08003d88 <_init>:
 8003d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8a:	bf00      	nop
 8003d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8e:	bc08      	pop	{r3}
 8003d90:	469e      	mov	lr, r3
 8003d92:	4770      	bx	lr

08003d94 <_fini>:
 8003d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d96:	bf00      	nop
 8003d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d9a:	bc08      	pop	{r3}
 8003d9c:	469e      	mov	lr, r3
 8003d9e:	4770      	bx	lr
