
002_Hello_World_FreeRTOS_SEGGER_SysView.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004894  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08004a24  08004a24  00014a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004b64  08004b64  00014b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004b68  08004b68  00014b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000030  20000000  08004b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020030  2**0
                  CONTENTS
  7 .bss          000154a4  20000030  20000030  00020030  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200154d4  200154d4  00020030  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001109e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002111  00000000  00000000  000310fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d08  00000000  00000000  00033210  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c00  00000000  00000000  00033f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000697f  00000000  00000000  00034b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000047c9  00000000  00000000  0003b497  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003fc60  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003734  00000000  00000000  0003fcdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00043410  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000030 	.word	0x20000030
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a0c 	.word	0x08004a0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000034 	.word	0x20000034
 80001cc:	08004a0c 	.word	0x08004a0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80001e0:	b480      	push	{r7}
 80001e2:	b087      	sub	sp, #28
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
 80001e8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80001ea:	2300      	movs	r3, #0
 80001ec:	617b      	str	r3, [r7, #20]
 80001ee:	2300      	movs	r3, #0
 80001f0:	613b      	str	r3, [r7, #16]
 80001f2:	2300      	movs	r3, #0
 80001f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001f6:	2300      	movs	r3, #0
 80001f8:	617b      	str	r3, [r7, #20]
 80001fa:	e076      	b.n	80002ea <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80001fc:	2201      	movs	r2, #1
 80001fe:	697b      	ldr	r3, [r7, #20]
 8000200:	fa02 f303 	lsl.w	r3, r2, r3
 8000204:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	681a      	ldr	r2, [r3, #0]
 800020a:	693b      	ldr	r3, [r7, #16]
 800020c:	4013      	ands	r3, r2
 800020e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000210:	68fa      	ldr	r2, [r7, #12]
 8000212:	693b      	ldr	r3, [r7, #16]
 8000214:	429a      	cmp	r2, r3
 8000216:	d165      	bne.n	80002e4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	681a      	ldr	r2, [r3, #0]
 800021c:	697b      	ldr	r3, [r7, #20]
 800021e:	005b      	lsls	r3, r3, #1
 8000220:	2103      	movs	r1, #3
 8000222:	fa01 f303 	lsl.w	r3, r1, r3
 8000226:	43db      	mvns	r3, r3
 8000228:	401a      	ands	r2, r3
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	681a      	ldr	r2, [r3, #0]
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	791b      	ldrb	r3, [r3, #4]
 8000236:	4619      	mov	r1, r3
 8000238:	697b      	ldr	r3, [r7, #20]
 800023a:	005b      	lsls	r3, r3, #1
 800023c:	fa01 f303 	lsl.w	r3, r1, r3
 8000240:	431a      	orrs	r2, r3
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	791b      	ldrb	r3, [r3, #4]
 800024a:	2b01      	cmp	r3, #1
 800024c:	d003      	beq.n	8000256 <GPIO_Init+0x76>
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	791b      	ldrb	r3, [r3, #4]
 8000252:	2b02      	cmp	r3, #2
 8000254:	d12e      	bne.n	80002b4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	689a      	ldr	r2, [r3, #8]
 800025a:	697b      	ldr	r3, [r7, #20]
 800025c:	005b      	lsls	r3, r3, #1
 800025e:	2103      	movs	r1, #3
 8000260:	fa01 f303 	lsl.w	r3, r1, r3
 8000264:	43db      	mvns	r3, r3
 8000266:	401a      	ands	r2, r3
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	689a      	ldr	r2, [r3, #8]
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	795b      	ldrb	r3, [r3, #5]
 8000274:	4619      	mov	r1, r3
 8000276:	697b      	ldr	r3, [r7, #20]
 8000278:	005b      	lsls	r3, r3, #1
 800027a:	fa01 f303 	lsl.w	r3, r1, r3
 800027e:	431a      	orrs	r2, r3
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	685a      	ldr	r2, [r3, #4]
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	b29b      	uxth	r3, r3
 800028c:	4619      	mov	r1, r3
 800028e:	2301      	movs	r3, #1
 8000290:	408b      	lsls	r3, r1
 8000292:	43db      	mvns	r3, r3
 8000294:	401a      	ands	r2, r3
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	683a      	ldr	r2, [r7, #0]
 80002a0:	7992      	ldrb	r2, [r2, #6]
 80002a2:	4611      	mov	r1, r2
 80002a4:	697a      	ldr	r2, [r7, #20]
 80002a6:	b292      	uxth	r2, r2
 80002a8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ac:	b292      	uxth	r2, r2
 80002ae:	431a      	orrs	r2, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	68da      	ldr	r2, [r3, #12]
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	b29b      	uxth	r3, r3
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	2103      	movs	r1, #3
 80002c0:	fa01 f303 	lsl.w	r3, r1, r3
 80002c4:	43db      	mvns	r3, r3
 80002c6:	401a      	ands	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	68da      	ldr	r2, [r3, #12]
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	79db      	ldrb	r3, [r3, #7]
 80002d4:	4619      	mov	r1, r3
 80002d6:	697b      	ldr	r3, [r7, #20]
 80002d8:	005b      	lsls	r3, r3, #1
 80002da:	fa01 f303 	lsl.w	r3, r1, r3
 80002de:	431a      	orrs	r2, r3
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002e4:	697b      	ldr	r3, [r7, #20]
 80002e6:	3301      	adds	r3, #1
 80002e8:	617b      	str	r3, [r7, #20]
 80002ea:	697b      	ldr	r3, [r7, #20]
 80002ec:	2b0f      	cmp	r3, #15
 80002ee:	d985      	bls.n	80001fc <GPIO_Init+0x1c>
    }
  }
}
 80002f0:	bf00      	nop
 80002f2:	371c      	adds	r7, #28
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr

080002fc <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b085      	sub	sp, #20
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	460b      	mov	r3, r1
 8000306:	807b      	strh	r3, [r7, #2]
 8000308:	4613      	mov	r3, r2
 800030a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800030c:	2300      	movs	r3, #0
 800030e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000310:	2300      	movs	r3, #0
 8000312:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000314:	787a      	ldrb	r2, [r7, #1]
 8000316:	887b      	ldrh	r3, [r7, #2]
 8000318:	f003 0307 	and.w	r3, r3, #7
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	fa02 f303 	lsl.w	r3, r2, r3
 8000322:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000324:	887b      	ldrh	r3, [r7, #2]
 8000326:	08db      	lsrs	r3, r3, #3
 8000328:	b29b      	uxth	r3, r3
 800032a:	4618      	mov	r0, r3
 800032c:	887b      	ldrh	r3, [r7, #2]
 800032e:	08db      	lsrs	r3, r3, #3
 8000330:	b29b      	uxth	r3, r3
 8000332:	461a      	mov	r2, r3
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	3208      	adds	r2, #8
 8000338:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800033c:	887b      	ldrh	r3, [r7, #2]
 800033e:	f003 0307 	and.w	r3, r3, #7
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	210f      	movs	r1, #15
 8000346:	fa01 f303 	lsl.w	r3, r1, r3
 800034a:	43db      	mvns	r3, r3
 800034c:	ea02 0103 	and.w	r1, r2, r3
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	f100 0208 	add.w	r2, r0, #8
 8000356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800035a:	887b      	ldrh	r3, [r7, #2]
 800035c:	08db      	lsrs	r3, r3, #3
 800035e:	b29b      	uxth	r3, r3
 8000360:	461a      	mov	r2, r3
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	3208      	adds	r2, #8
 8000366:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	4313      	orrs	r3, r2
 800036e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000370:	887b      	ldrh	r3, [r7, #2]
 8000372:	08db      	lsrs	r3, r3, #3
 8000374:	b29b      	uxth	r3, r3
 8000376:	461a      	mov	r2, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3208      	adds	r2, #8
 800037c:	68b9      	ldr	r1, [r7, #8]
 800037e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000382:	bf00      	nop
 8000384:	3714      	adds	r7, #20
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
	...

08000390 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000394:	4a12      	ldr	r2, [pc, #72]	; (80003e0 <RCC_DeInit+0x50>)
 8000396:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <RCC_DeInit+0x50>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f043 0301 	orr.w	r3, r3, #1
 800039e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003a0:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <RCC_DeInit+0x50>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 80003a6:	4a0e      	ldr	r2, [pc, #56]	; (80003e0 <RCC_DeInit+0x50>)
 80003a8:	4b0d      	ldr	r3, [pc, #52]	; (80003e0 <RCC_DeInit+0x50>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 80003b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80003b6:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <RCC_DeInit+0x50>)
 80003b8:	4a0a      	ldr	r2, [pc, #40]	; (80003e4 <RCC_DeInit+0x54>)
 80003ba:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80003bc:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <RCC_DeInit+0x50>)
 80003be:	4a0a      	ldr	r2, [pc, #40]	; (80003e8 <RCC_DeInit+0x58>)
 80003c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80003c4:	4a06      	ldr	r2, [pc, #24]	; (80003e0 <RCC_DeInit+0x50>)
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <RCC_DeInit+0x50>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80003d0:	4b03      	ldr	r3, [pc, #12]	; (80003e0 <RCC_DeInit+0x50>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 80003d6:	bf00      	nop
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	40023800 	.word	0x40023800
 80003e4:	24003010 	.word	0x24003010
 80003e8:	20003000 	.word	0x20003000

080003ec <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b089      	sub	sp, #36	; 0x24
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80003f4:	2300      	movs	r3, #0
 80003f6:	61bb      	str	r3, [r7, #24]
 80003f8:	2300      	movs	r3, #0
 80003fa:	617b      	str	r3, [r7, #20]
 80003fc:	2300      	movs	r3, #0
 80003fe:	61fb      	str	r3, [r7, #28]
 8000400:	2302      	movs	r3, #2
 8000402:	613b      	str	r3, [r7, #16]
 8000404:	2300      	movs	r3, #0
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	2302      	movs	r3, #2
 800040a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800040c:	4b47      	ldr	r3, [pc, #284]	; (800052c <RCC_GetClocksFreq+0x140>)
 800040e:	689b      	ldr	r3, [r3, #8]
 8000410:	f003 030c 	and.w	r3, r3, #12
 8000414:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000416:	69bb      	ldr	r3, [r7, #24]
 8000418:	2b04      	cmp	r3, #4
 800041a:	d007      	beq.n	800042c <RCC_GetClocksFreq+0x40>
 800041c:	2b08      	cmp	r3, #8
 800041e:	d009      	beq.n	8000434 <RCC_GetClocksFreq+0x48>
 8000420:	2b00      	cmp	r3, #0
 8000422:	d13d      	bne.n	80004a0 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a42      	ldr	r2, [pc, #264]	; (8000530 <RCC_GetClocksFreq+0x144>)
 8000428:	601a      	str	r2, [r3, #0]
      break;
 800042a:	e03d      	b.n	80004a8 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a41      	ldr	r2, [pc, #260]	; (8000534 <RCC_GetClocksFreq+0x148>)
 8000430:	601a      	str	r2, [r3, #0]
      break;
 8000432:	e039      	b.n	80004a8 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000434:	4b3d      	ldr	r3, [pc, #244]	; (800052c <RCC_GetClocksFreq+0x140>)
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	0d9b      	lsrs	r3, r3, #22
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000440:	4b3a      	ldr	r3, [pc, #232]	; (800052c <RCC_GetClocksFreq+0x140>)
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000448:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d00c      	beq.n	800046a <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000450:	4a38      	ldr	r2, [pc, #224]	; (8000534 <RCC_GetClocksFreq+0x148>)
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	fbb2 f3f3 	udiv	r3, r2, r3
 8000458:	4a34      	ldr	r2, [pc, #208]	; (800052c <RCC_GetClocksFreq+0x140>)
 800045a:	6852      	ldr	r2, [r2, #4]
 800045c:	0992      	lsrs	r2, r2, #6
 800045e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000462:	fb02 f303 	mul.w	r3, r2, r3
 8000466:	61fb      	str	r3, [r7, #28]
 8000468:	e00b      	b.n	8000482 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800046a:	4a31      	ldr	r2, [pc, #196]	; (8000530 <RCC_GetClocksFreq+0x144>)
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000472:	4a2e      	ldr	r2, [pc, #184]	; (800052c <RCC_GetClocksFreq+0x140>)
 8000474:	6852      	ldr	r2, [r2, #4]
 8000476:	0992      	lsrs	r2, r2, #6
 8000478:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800047c:	fb02 f303 	mul.w	r3, r2, r3
 8000480:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000482:	4b2a      	ldr	r3, [pc, #168]	; (800052c <RCC_GetClocksFreq+0x140>)
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	0c1b      	lsrs	r3, r3, #16
 8000488:	f003 0303 	and.w	r3, r3, #3
 800048c:	3301      	adds	r3, #1
 800048e:	005b      	lsls	r3, r3, #1
 8000490:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000492:	69fa      	ldr	r2, [r7, #28]
 8000494:	693b      	ldr	r3, [r7, #16]
 8000496:	fbb2 f2f3 	udiv	r2, r2, r3
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	601a      	str	r2, [r3, #0]
      break;
 800049e:	e003      	b.n	80004a8 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4a23      	ldr	r2, [pc, #140]	; (8000530 <RCC_GetClocksFreq+0x144>)
 80004a4:	601a      	str	r2, [r3, #0]
      break;
 80004a6:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80004a8:	4b20      	ldr	r3, [pc, #128]	; (800052c <RCC_GetClocksFreq+0x140>)
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80004b0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80004b2:	69bb      	ldr	r3, [r7, #24]
 80004b4:	091b      	lsrs	r3, r3, #4
 80004b6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80004b8:	4a1f      	ldr	r2, [pc, #124]	; (8000538 <RCC_GetClocksFreq+0x14c>)
 80004ba:	69bb      	ldr	r3, [r7, #24]
 80004bc:	4413      	add	r3, r2
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	40da      	lsrs	r2, r3
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80004d0:	4b16      	ldr	r3, [pc, #88]	; (800052c <RCC_GetClocksFreq+0x140>)
 80004d2:	689b      	ldr	r3, [r3, #8]
 80004d4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80004d8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80004da:	69bb      	ldr	r3, [r7, #24]
 80004dc:	0a9b      	lsrs	r3, r3, #10
 80004de:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80004e0:	4a15      	ldr	r2, [pc, #84]	; (8000538 <RCC_GetClocksFreq+0x14c>)
 80004e2:	69bb      	ldr	r3, [r7, #24]
 80004e4:	4413      	add	r3, r2
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	685a      	ldr	r2, [r3, #4]
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	40da      	lsrs	r2, r3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80004f8:	4b0c      	ldr	r3, [pc, #48]	; (800052c <RCC_GetClocksFreq+0x140>)
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000500:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000502:	69bb      	ldr	r3, [r7, #24]
 8000504:	0b5b      	lsrs	r3, r3, #13
 8000506:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000508:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <RCC_GetClocksFreq+0x14c>)
 800050a:	69bb      	ldr	r3, [r7, #24]
 800050c:	4413      	add	r3, r2
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	b2db      	uxtb	r3, r3
 8000512:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	685a      	ldr	r2, [r3, #4]
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	40da      	lsrs	r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	60da      	str	r2, [r3, #12]
}
 8000520:	bf00      	nop
 8000522:	3724      	adds	r7, #36	; 0x24
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	40023800 	.word	0x40023800
 8000530:	00f42400 	.word	0x00f42400
 8000534:	007a1200 	.word	0x007a1200
 8000538:	20000000 	.word	0x20000000

0800053c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	460b      	mov	r3, r1
 8000546:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000548:	78fb      	ldrb	r3, [r7, #3]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d006      	beq.n	800055c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800054e:	490a      	ldr	r1, [pc, #40]	; (8000578 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000550:	4b09      	ldr	r3, [pc, #36]	; (8000578 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4313      	orrs	r3, r2
 8000558:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800055a:	e006      	b.n	800056a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800055c:	4906      	ldr	r1, [pc, #24]	; (8000578 <RCC_AHB1PeriphClockCmd+0x3c>)
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	43db      	mvns	r3, r3
 8000566:	4013      	ands	r3, r2
 8000568:	630b      	str	r3, [r1, #48]	; 0x30
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	40023800 	.word	0x40023800

0800057c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	460b      	mov	r3, r1
 8000586:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000588:	78fb      	ldrb	r3, [r7, #3]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d006      	beq.n	800059c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800058e:	490a      	ldr	r1, [pc, #40]	; (80005b8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000590:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000592:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4313      	orrs	r3, r2
 8000598:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800059a:	e006      	b.n	80005aa <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800059c:	4906      	ldr	r1, [pc, #24]	; (80005b8 <RCC_APB1PeriphClockCmd+0x3c>)
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <RCC_APB1PeriphClockCmd+0x3c>)
 80005a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	43db      	mvns	r3, r3
 80005a6:	4013      	ands	r3, r2
 80005a8:	640b      	str	r3, [r1, #64]	; 0x40
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	40023800 	.word	0x40023800

080005bc <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	; 0x28
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80005c6:	2300      	movs	r3, #0
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
 80005ca:	2300      	movs	r3, #0
 80005cc:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	8a1b      	ldrh	r3, [r3, #16]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80005de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80005e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	88db      	ldrh	r3, [r3, #6]
 80005ea:	461a      	mov	r2, r3
 80005ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ee:	4313      	orrs	r3, r2
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80005f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	899b      	ldrh	r3, [r3, #12]
 80005fe:	b29b      	uxth	r3, r3
 8000600:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000604:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000608:	f023 030c 	bic.w	r3, r3, #12
 800060c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	889a      	ldrh	r2, [r3, #4]
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	891b      	ldrh	r3, [r3, #8]
 8000616:	4313      	orrs	r3, r2
 8000618:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800061e:	4313      	orrs	r3, r2
 8000620:	b29b      	uxth	r3, r3
 8000622:	461a      	mov	r2, r3
 8000624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000626:	4313      	orrs	r3, r2
 8000628:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800062a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062c:	b29a      	uxth	r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	8a9b      	ldrh	r3, [r3, #20]
 8000636:	b29b      	uxth	r3, r3
 8000638:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800063a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800063c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000640:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	899b      	ldrh	r3, [r3, #12]
 8000646:	461a      	mov	r2, r3
 8000648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064a:	4313      	orrs	r3, r2
 800064c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800064e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000650:	b29a      	uxth	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000656:	f107 0308 	add.w	r3, r7, #8
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fec6 	bl	80003ec <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4a30      	ldr	r2, [pc, #192]	; (8000724 <USART_Init+0x168>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d003      	beq.n	8000670 <USART_Init+0xb4>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a2f      	ldr	r2, [pc, #188]	; (8000728 <USART_Init+0x16c>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d102      	bne.n	8000676 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	623b      	str	r3, [r7, #32]
 8000674:	e001      	b.n	800067a <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	899b      	ldrh	r3, [r3, #12]
 800067e:	b29b      	uxth	r3, r3
 8000680:	b21b      	sxth	r3, r3
 8000682:	2b00      	cmp	r3, #0
 8000684:	da0c      	bge.n	80006a0 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000686:	6a3a      	ldr	r2, [r7, #32]
 8000688:	4613      	mov	r3, r2
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	4413      	add	r3, r2
 800068e:	009a      	lsls	r2, r3, #2
 8000690:	441a      	add	r2, r3
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	fbb2 f3f3 	udiv	r3, r2, r3
 800069c:	61fb      	str	r3, [r7, #28]
 800069e:	e00b      	b.n	80006b8 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80006a0:	6a3a      	ldr	r2, [r7, #32]
 80006a2:	4613      	mov	r3, r2
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	4413      	add	r3, r2
 80006a8:	009a      	lsls	r2, r3, #2
 80006aa:	441a      	add	r2, r3
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b6:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	4a1c      	ldr	r2, [pc, #112]	; (800072c <USART_Init+0x170>)
 80006bc:	fba2 2303 	umull	r2, r3, r2, r3
 80006c0:	095b      	lsrs	r3, r3, #5
 80006c2:	011b      	lsls	r3, r3, #4
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80006c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c8:	091b      	lsrs	r3, r3, #4
 80006ca:	2264      	movs	r2, #100	; 0x64
 80006cc:	fb02 f303 	mul.w	r3, r2, r3
 80006d0:	69fa      	ldr	r2, [r7, #28]
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	899b      	ldrh	r3, [r3, #12]
 80006da:	b29b      	uxth	r3, r3
 80006dc:	b21b      	sxth	r3, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	da0c      	bge.n	80006fc <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80006e2:	69bb      	ldr	r3, [r7, #24]
 80006e4:	00db      	lsls	r3, r3, #3
 80006e6:	3332      	adds	r3, #50	; 0x32
 80006e8:	4a10      	ldr	r2, [pc, #64]	; (800072c <USART_Init+0x170>)
 80006ea:	fba2 2303 	umull	r2, r3, r2, r3
 80006ee:	095b      	lsrs	r3, r3, #5
 80006f0:	f003 0307 	and.w	r3, r3, #7
 80006f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006f6:	4313      	orrs	r3, r2
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
 80006fa:	e00b      	b.n	8000714 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	011b      	lsls	r3, r3, #4
 8000700:	3332      	adds	r3, #50	; 0x32
 8000702:	4a0a      	ldr	r2, [pc, #40]	; (800072c <USART_Init+0x170>)
 8000704:	fba2 2303 	umull	r2, r3, r2, r3
 8000708:	095b      	lsrs	r3, r3, #5
 800070a:	f003 030f 	and.w	r3, r3, #15
 800070e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000710:	4313      	orrs	r3, r2
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000716:	b29a      	uxth	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	811a      	strh	r2, [r3, #8]
}
 800071c:	bf00      	nop
 800071e:	3728      	adds	r7, #40	; 0x28
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40011000 	.word	0x40011000
 8000728:	40011400 	.word	0x40011400
 800072c:	51eb851f 	.word	0x51eb851f

08000730 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	460b      	mov	r3, r1
 800073a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800073c:	78fb      	ldrb	r3, [r7, #3]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d008      	beq.n	8000754 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	899b      	ldrh	r3, [r3, #12]
 8000746:	b29b      	uxth	r3, r3
 8000748:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800074c:	b29a      	uxth	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000752:	e007      	b.n	8000764 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	899b      	ldrh	r3, [r3, #12]
 8000758:	b29b      	uxth	r3, r3
 800075a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800075e:	b29a      	uxth	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	819a      	strh	r2, [r3, #12]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	460b      	mov	r3, r1
 800077a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800077c:	887b      	ldrh	r3, [r7, #2]
 800077e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000782:	b29a      	uxth	r2, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	809a      	strh	r2, [r3, #4]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	460b      	mov	r3, r1
 800079e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80007a0:	2300      	movs	r3, #0
 80007a2:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	887b      	ldrh	r3, [r7, #2]
 80007ac:	4013      	ands	r3, r2
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d002      	beq.n	80007ba <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80007b4:	2301      	movs	r3, #1
 80007b6:	73fb      	strb	r3, [r7, #15]
 80007b8:	e001      	b.n	80007be <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80007ba:	2300      	movs	r3, #0
 80007bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80007be:	7bfb      	ldrb	r3, [r7, #15]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3714      	adds	r7, #20
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f103 0208 	add.w	r2, r3, #8
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	f04f 32ff 	mov.w	r2, #4294967295
 80007e4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	f103 0208 	add.w	r2, r3, #8
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f103 0208 	add.w	r2, r3, #8
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000826:	b480      	push	{r7}
 8000828:	b085      	sub	sp, #20
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
 800082e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800083c:	d103      	bne.n	8000846 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	691b      	ldr	r3, [r3, #16]
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	e00c      	b.n	8000860 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	3308      	adds	r3, #8
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	e002      	b.n	8000854 <vListInsert+0x2e>
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	429a      	cmp	r2, r3
 800085e:	d9f6      	bls.n	800084e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	683a      	ldr	r2, [r7, #0]
 800086e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	683a      	ldr	r2, [r7, #0]
 800087a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	1c5a      	adds	r2, r3, #1
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	601a      	str	r2, [r3, #0]
}
 800088c:	bf00      	nop
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	691b      	ldr	r3, [r3, #16]
 80008a4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	6892      	ldr	r2, [r2, #8]
 80008ae:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	6852      	ldr	r2, [r2, #4]
 80008b8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	685a      	ldr	r2, [r3, #4]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d103      	bne.n	80008cc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	689a      	ldr	r2, [r3, #8]
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	1e5a      	subs	r2, r3, #1
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	681b      	ldr	r3, [r3, #0]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	3b04      	subs	r3, #4
 80008fc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000904:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	3b04      	subs	r3, #4
 800090a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	f023 0201 	bic.w	r2, r3, #1
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	3b04      	subs	r3, #4
 800091a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800091c:	4a0c      	ldr	r2, [pc, #48]	; (8000950 <pxPortInitialiseStack+0x64>)
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	3b14      	subs	r3, #20
 8000926:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	3b04      	subs	r3, #4
 8000932:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f06f 0202 	mvn.w	r2, #2
 800093a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	3b20      	subs	r3, #32
 8000940:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000942:	68fb      	ldr	r3, [r7, #12]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	08000955 	.word	0x08000955

08000954 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <prvTaskExitError+0x50>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000966:	d009      	beq.n	800097c <prvTaskExitError+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800096c:	f383 8811 	msr	BASEPRI, r3
 8000970:	f3bf 8f6f 	isb	sy
 8000974:	f3bf 8f4f 	dsb	sy
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	e7fe      	b.n	800097a <prvTaskExitError+0x26>
 800097c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000980:	f383 8811 	msr	BASEPRI, r3
 8000984:	f3bf 8f6f 	isb	sy
 8000988:	f3bf 8f4f 	dsb	sy
 800098c:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800098e:	bf00      	nop
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d0fc      	beq.n	8000990 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000996:	bf00      	nop
 8000998:	3714      	adds	r7, #20
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20000010 	.word	0x20000010
	...

080009b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <pxCurrentTCBConst2>)
 80009b2:	6819      	ldr	r1, [r3, #0]
 80009b4:	6808      	ldr	r0, [r1, #0]
 80009b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009ba:	f380 8809 	msr	PSP, r0
 80009be:	f3bf 8f6f 	isb	sy
 80009c2:	f04f 0000 	mov.w	r0, #0
 80009c6:	f380 8811 	msr	BASEPRI, r0
 80009ca:	4770      	bx	lr
 80009cc:	f3af 8000 	nop.w

080009d0 <pxCurrentTCBConst2>:
 80009d0:	20012c70 	.word	0x20012c70
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80009d4:	bf00      	nop
 80009d6:	bf00      	nop

080009d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80009d8:	4808      	ldr	r0, [pc, #32]	; (80009fc <prvPortStartFirstTask+0x24>)
 80009da:	6800      	ldr	r0, [r0, #0]
 80009dc:	6800      	ldr	r0, [r0, #0]
 80009de:	f380 8808 	msr	MSP, r0
 80009e2:	f04f 0000 	mov.w	r0, #0
 80009e6:	f380 8814 	msr	CONTROL, r0
 80009ea:	b662      	cpsie	i
 80009ec:	b661      	cpsie	f
 80009ee:	f3bf 8f4f 	dsb	sy
 80009f2:	f3bf 8f6f 	isb	sy
 80009f6:	df00      	svc	0
 80009f8:	bf00      	nop
 80009fa:	0000      	.short	0x0000
 80009fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000a00:	bf00      	nop
 8000a02:	bf00      	nop

08000a04 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000a0a:	4b44      	ldr	r3, [pc, #272]	; (8000b1c <xPortStartScheduler+0x118>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a44      	ldr	r2, [pc, #272]	; (8000b20 <xPortStartScheduler+0x11c>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d109      	bne.n	8000a28 <xPortStartScheduler+0x24>
 8000a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a18:	f383 8811 	msr	BASEPRI, r3
 8000a1c:	f3bf 8f6f 	isb	sy
 8000a20:	f3bf 8f4f 	dsb	sy
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	e7fe      	b.n	8000a26 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000a28:	4b3c      	ldr	r3, [pc, #240]	; (8000b1c <xPortStartScheduler+0x118>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a3d      	ldr	r2, [pc, #244]	; (8000b24 <xPortStartScheduler+0x120>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d109      	bne.n	8000a46 <xPortStartScheduler+0x42>
 8000a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a36:	f383 8811 	msr	BASEPRI, r3
 8000a3a:	f3bf 8f6f 	isb	sy
 8000a3e:	f3bf 8f4f 	dsb	sy
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	e7fe      	b.n	8000a44 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000a46:	4b38      	ldr	r3, [pc, #224]	; (8000b28 <xPortStartScheduler+0x124>)
 8000a48:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	22ff      	movs	r2, #255	; 0xff
 8000a56:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000a60:	78fb      	ldrb	r3, [r7, #3]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4b30      	ldr	r3, [pc, #192]	; (8000b2c <xPortStartScheduler+0x128>)
 8000a6c:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000a6e:	4b30      	ldr	r3, [pc, #192]	; (8000b30 <xPortStartScheduler+0x12c>)
 8000a70:	2207      	movs	r2, #7
 8000a72:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000a74:	e009      	b.n	8000a8a <xPortStartScheduler+0x86>
        {
            ulMaxPRIGROUPValue--;
 8000a76:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <xPortStartScheduler+0x12c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	4a2c      	ldr	r2, [pc, #176]	; (8000b30 <xPortStartScheduler+0x12c>)
 8000a7e:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000a80:	78fb      	ldrb	r3, [r7, #3]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000a8a:	78fb      	ldrb	r3, [r7, #3]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a92:	2b80      	cmp	r3, #128	; 0x80
 8000a94:	d0ef      	beq.n	8000a76 <xPortStartScheduler+0x72>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000a96:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <xPortStartScheduler+0x12c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f1c3 0307 	rsb	r3, r3, #7
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d009      	beq.n	8000ab6 <xPortStartScheduler+0xb2>
 8000aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aa6:	f383 8811 	msr	BASEPRI, r3
 8000aaa:	f3bf 8f6f 	isb	sy
 8000aae:	f3bf 8f4f 	dsb	sy
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	e7fe      	b.n	8000ab4 <xPortStartScheduler+0xb0>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000ab6:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <xPortStartScheduler+0x12c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	021b      	lsls	r3, r3, #8
 8000abc:	4a1c      	ldr	r2, [pc, #112]	; (8000b30 <xPortStartScheduler+0x12c>)
 8000abe:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <xPortStartScheduler+0x12c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000ac8:	4a19      	ldr	r2, [pc, #100]	; (8000b30 <xPortStartScheduler+0x12c>)
 8000aca:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8000ad4:	4a17      	ldr	r2, [pc, #92]	; (8000b34 <xPortStartScheduler+0x130>)
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <xPortStartScheduler+0x130>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ade:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8000ae0:	4a14      	ldr	r2, [pc, #80]	; (8000b34 <xPortStartScheduler+0x130>)
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <xPortStartScheduler+0x130>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000aea:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8000aec:	f000 f8d4 	bl	8000c98 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <xPortStartScheduler+0x134>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8000af6:	f000 f8f3 	bl	8000ce0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8000afa:	4a10      	ldr	r2, [pc, #64]	; (8000b3c <xPortStartScheduler+0x138>)
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <xPortStartScheduler+0x138>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000b04:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000b06:	f7ff ff67 	bl	80009d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8000b0a:	f001 fa4f 	bl	8001fac <vTaskSwitchContext>
    prvTaskExitError();
 8000b0e:	f7ff ff21 	bl	8000954 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8000b12:	2300      	movs	r3, #0
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	e000ed00 	.word	0xe000ed00
 8000b20:	410fc271 	.word	0x410fc271
 8000b24:	410fc270 	.word	0x410fc270
 8000b28:	e000e400 	.word	0xe000e400
 8000b2c:	2000004c 	.word	0x2000004c
 8000b30:	20000050 	.word	0x20000050
 8000b34:	e000ed20 	.word	0xe000ed20
 8000b38:	20000010 	.word	0x20000010
 8000b3c:	e000ef34 	.word	0xe000ef34

08000b40 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b4a:	f383 8811 	msr	BASEPRI, r3
 8000b4e:	f3bf 8f6f 	isb	sy
 8000b52:	f3bf 8f4f 	dsb	sy
 8000b56:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000b58:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <vPortEnterCritical+0x54>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <vPortEnterCritical+0x54>)
 8000b60:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <vPortEnterCritical+0x54>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d10e      	bne.n	8000b88 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <vPortEnterCritical+0x58>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d009      	beq.n	8000b88 <vPortEnterCritical+0x48>
 8000b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b78:	f383 8811 	msr	BASEPRI, r3
 8000b7c:	f3bf 8f6f 	isb	sy
 8000b80:	f3bf 8f4f 	dsb	sy
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	e7fe      	b.n	8000b86 <vPortEnterCritical+0x46>
    }
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	20000010 	.word	0x20000010
 8000b98:	e000ed04 	.word	0xe000ed04

08000b9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <vPortExitCritical+0x4c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d109      	bne.n	8000bbe <vPortExitCritical+0x22>
 8000baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bae:	f383 8811 	msr	BASEPRI, r3
 8000bb2:	f3bf 8f6f 	isb	sy
 8000bb6:	f3bf 8f4f 	dsb	sy
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	e7fe      	b.n	8000bbc <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <vPortExitCritical+0x4c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <vPortExitCritical+0x4c>)
 8000bc6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8000bc8:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <vPortExitCritical+0x4c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d104      	bne.n	8000bda <vPortExitCritical+0x3e>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000010 	.word	0x20000010
 8000bec:	00000000 	.word	0x00000000

08000bf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000bf0:	f3ef 8009 	mrs	r0, PSP
 8000bf4:	f3bf 8f6f 	isb	sy
 8000bf8:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <pxCurrentTCBConst>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	f01e 0f10 	tst.w	lr, #16
 8000c00:	bf08      	it	eq
 8000c02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000c06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c0a:	6010      	str	r0, [r2, #0]
 8000c0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000c10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000c14:	f380 8811 	msr	BASEPRI, r0
 8000c18:	f3bf 8f4f 	dsb	sy
 8000c1c:	f3bf 8f6f 	isb	sy
 8000c20:	f001 f9c4 	bl	8001fac <vTaskSwitchContext>
 8000c24:	f04f 0000 	mov.w	r0, #0
 8000c28:	f380 8811 	msr	BASEPRI, r0
 8000c2c:	bc09      	pop	{r0, r3}
 8000c2e:	6819      	ldr	r1, [r3, #0]
 8000c30:	6808      	ldr	r0, [r1, #0]
 8000c32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c36:	f01e 0f10 	tst.w	lr, #16
 8000c3a:	bf08      	it	eq
 8000c3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000c40:	f380 8809 	msr	PSP, r0
 8000c44:	f3bf 8f6f 	isb	sy
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	f3af 8000 	nop.w

08000c50 <pxCurrentTCBConst>:
 8000c50:	20012c70 	.word	0x20012c70
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop

08000c58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
        __asm volatile
 8000c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c62:	f383 8811 	msr	BASEPRI, r3
 8000c66:	f3bf 8f6f 	isb	sy
 8000c6a:	f3bf 8f4f 	dsb	sy
 8000c6e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000c70:	f001 f882 	bl	8001d78 <xTaskIncrementTick>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d003      	beq.n	8000c82 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <SysTick_Handler+0x3c>)
 8000c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	2300      	movs	r3, #0
 8000c84:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	e000ed04 	.word	0xe000ed04

08000c98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <vPortSetupTimerInterrupt+0x34>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <vPortSetupTimerInterrupt+0x38>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000ca8:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <vPortSetupTimerInterrupt+0x3c>)
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <vPortSetupTimerInterrupt+0x40>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	490b      	ldr	r1, [pc, #44]	; (8000cdc <vPortSetupTimerInterrupt+0x44>)
 8000cb0:	fba1 1303 	umull	r1, r3, r1, r3
 8000cb4:	099b      	lsrs	r3, r3, #6
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000cba:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <vPortSetupTimerInterrupt+0x34>)
 8000cbc:	2207      	movs	r2, #7
 8000cbe:	601a      	str	r2, [r3, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000e010 	.word	0xe000e010
 8000cd0:	e000e018 	.word	0xe000e018
 8000cd4:	e000e014 	.word	0xe000e014
 8000cd8:	2000001c 	.word	0x2000001c
 8000cdc:	10624dd3 	.word	0x10624dd3

08000ce0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8000ce0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000cf0 <vPortEnableVFP+0x10>
 8000ce4:	6801      	ldr	r1, [r0, #0]
 8000ce6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000cea:	6001      	str	r1, [r0, #0]
 8000cec:	4770      	bx	lr
 8000cee:	0000      	.short	0x0000
 8000cf0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8000cf4:	bf00      	nop
 8000cf6:	bf00      	nop

08000cf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8000cfe:	f3ef 8305 	mrs	r3, IPSR
 8000d02:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	2b0f      	cmp	r3, #15
 8000d08:	d913      	bls.n	8000d32 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000d0a:	4a16      	ldr	r2, [pc, #88]	; (8000d64 <vPortValidateInterruptPriority+0x6c>)
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4413      	add	r3, r2
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <vPortValidateInterruptPriority+0x70>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	7afa      	ldrb	r2, [r7, #11]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d209      	bcs.n	8000d32 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 8000d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d22:	f383 8811 	msr	BASEPRI, r3
 8000d26:	f3bf 8f6f 	isb	sy
 8000d2a:	f3bf 8f4f 	dsb	sy
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	e7fe      	b.n	8000d30 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <vPortValidateInterruptPriority+0x74>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <vPortValidateInterruptPriority+0x78>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d909      	bls.n	8000d56 <vPortValidateInterruptPriority+0x5e>
 8000d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d46:	f383 8811 	msr	BASEPRI, r3
 8000d4a:	f3bf 8f6f 	isb	sy
 8000d4e:	f3bf 8f4f 	dsb	sy
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	e7fe      	b.n	8000d54 <vPortValidateInterruptPriority+0x5c>
    }
 8000d56:	bf00      	nop
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000e3f0 	.word	0xe000e3f0
 8000d68:	2000004c 	.word	0x2000004c
 8000d6c:	e000ed0c 	.word	0xe000ed0c
 8000d70:	20000050 	.word	0x20000050

08000d74 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8000d80:	f000 fecc 	bl	8001b1c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8000d84:	4b52      	ldr	r3, [pc, #328]	; (8000ed0 <pvPortMalloc+0x15c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d101      	bne.n	8000d90 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8000d8c:	f000 f900 	bl	8000f90 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d012      	beq.n	8000dbc <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8000d96:	2208      	movs	r2, #8
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	3308      	adds	r3, #8
 8000da2:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	43da      	mvns	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d304      	bcc.n	8000db8 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	4413      	add	r3, r2
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	e001      	b.n	8000dbc <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	db6f      	blt.n	8000ea2 <pvPortMalloc+0x12e>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d06c      	beq.n	8000ea2 <pvPortMalloc+0x12e>
 8000dc8:	4b42      	ldr	r3, [pc, #264]	; (8000ed4 <pvPortMalloc+0x160>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d867      	bhi.n	8000ea2 <pvPortMalloc+0x12e>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8000dd2:	4b41      	ldr	r3, [pc, #260]	; (8000ed8 <pvPortMalloc+0x164>)
 8000dd4:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8000dd6:	4b40      	ldr	r3, [pc, #256]	; (8000ed8 <pvPortMalloc+0x164>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000ddc:	e004      	b.n	8000de8 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8000dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de0:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8000de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dea:	685a      	ldr	r2, [r3, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d203      	bcs.n	8000dfa <pvPortMalloc+0x86>
 8000df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1f1      	bne.n	8000dde <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8000dfa:	4b35      	ldr	r3, [pc, #212]	; (8000ed0 <pvPortMalloc+0x15c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d04e      	beq.n	8000ea2 <pvPortMalloc+0x12e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000e04:	6a3b      	ldr	r3, [r7, #32]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2208      	movs	r2, #8
 8000e0a:	4413      	add	r3, r2
 8000e0c:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	6a3b      	ldr	r3, [r7, #32]
 8000e14:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	1ad2      	subs	r2, r2, r3
 8000e1e:	2308      	movs	r3, #8
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d91e      	bls.n	8000e64 <pvPortMalloc+0xf0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	f003 0307 	and.w	r3, r3, #7
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d009      	beq.n	8000e4c <pvPortMalloc+0xd8>
 8000e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e3c:	f383 8811 	msr	BASEPRI, r3
 8000e40:	f3bf 8f6f 	isb	sy
 8000e44:	f3bf 8f4f 	dsb	sy
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	e7fe      	b.n	8000e4a <pvPortMalloc+0xd6>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	1ad2      	subs	r2, r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8000e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000e5e:	6978      	ldr	r0, [r7, #20]
 8000e60:	f000 f8f2 	bl	8001048 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000e64:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <pvPortMalloc+0x160>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	4a19      	ldr	r2, [pc, #100]	; (8000ed4 <pvPortMalloc+0x160>)
 8000e70:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <pvPortMalloc+0x160>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	4b19      	ldr	r3, [pc, #100]	; (8000edc <pvPortMalloc+0x168>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d203      	bcs.n	8000e86 <pvPortMalloc+0x112>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <pvPortMalloc+0x160>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a16      	ldr	r2, [pc, #88]	; (8000edc <pvPortMalloc+0x168>)
 8000e84:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e90:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8000e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <pvPortMalloc+0x16c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	4a10      	ldr	r2, [pc, #64]	; (8000ee0 <pvPortMalloc+0x16c>)
 8000ea0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8000ea2:	f000 fe49 	bl	8001b38 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	f003 0307 	and.w	r3, r3, #7
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d009      	beq.n	8000ec4 <pvPortMalloc+0x150>
 8000eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eb4:	f383 8811 	msr	BASEPRI, r3
 8000eb8:	f3bf 8f6f 	isb	sy
 8000ebc:	f3bf 8f4f 	dsb	sy
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	e7fe      	b.n	8000ec2 <pvPortMalloc+0x14e>
    return pvReturn;
 8000ec4:	69fb      	ldr	r3, [r7, #28]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3728      	adds	r7, #40	; 0x28
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20012c5c 	.word	0x20012c5c
 8000ed4:	20012c60 	.word	0x20012c60
 8000ed8:	20012c54 	.word	0x20012c54
 8000edc:	20012c64 	.word	0x20012c64
 8000ee0:	20012c68 	.word	0x20012c68

08000ee4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d043      	beq.n	8000f7e <vPortFree+0x9a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8000ef6:	2308      	movs	r3, #8
 8000ef8:	425b      	negs	r3, r3
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	4413      	add	r3, r2
 8000efe:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	db09      	blt.n	8000f20 <vPortFree+0x3c>
 8000f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f10:	f383 8811 	msr	BASEPRI, r3
 8000f14:	f3bf 8f6f 	isb	sy
 8000f18:	f3bf 8f4f 	dsb	sy
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	e7fe      	b.n	8000f1e <vPortFree+0x3a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d009      	beq.n	8000f3c <vPortFree+0x58>
 8000f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f2c:	f383 8811 	msr	BASEPRI, r3
 8000f30:	f3bf 8f6f 	isb	sy
 8000f34:	f3bf 8f4f 	dsb	sy
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	e7fe      	b.n	8000f3a <vPortFree+0x56>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	da1c      	bge.n	8000f7e <vPortFree+0x9a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d118      	bne.n	8000f7e <vPortFree+0x9a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8000f58:	f000 fde0 	bl	8001b1c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <vPortFree+0xa4>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4413      	add	r3, r2
 8000f66:	4a08      	ldr	r2, [pc, #32]	; (8000f88 <vPortFree+0xa4>)
 8000f68:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000f6a:	6938      	ldr	r0, [r7, #16]
 8000f6c:	f000 f86c 	bl	8001048 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <vPortFree+0xa8>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	3301      	adds	r3, #1
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <vPortFree+0xa8>)
 8000f78:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8000f7a:	f000 fddd 	bl	8001b38 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20012c60 	.word	0x20012c60
 8000f8c:	20012c6c 	.word	0x20012c6c

08000f90 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000f96:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000f9a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8000f9c:	4b25      	ldr	r3, [pc, #148]	; (8001034 <prvHeapInit+0xa4>)
 8000f9e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00c      	beq.n	8000fc4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3307      	adds	r3, #7
 8000fae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f023 0307 	bic.w	r3, r3, #7
 8000fb6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	4a1d      	ldr	r2, [pc, #116]	; (8001034 <prvHeapInit+0xa4>)
 8000fc0:	4413      	add	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000fc8:	4a1b      	ldr	r2, [pc, #108]	; (8001038 <prvHeapInit+0xa8>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8000fce:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <prvHeapInit+0xa8>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	4413      	add	r3, r2
 8000fda:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8000fdc:	2208      	movs	r2, #8
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	1a9b      	subs	r3, r3, r2
 8000fe2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f023 0307 	bic.w	r3, r3, #7
 8000fea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4a13      	ldr	r2, [pc, #76]	; (800103c <prvHeapInit+0xac>)
 8000ff0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <prvHeapInit+0xac>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <prvHeapInit+0xac>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	1ad2      	subs	r2, r2, r3
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <prvHeapInit+0xac>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	4a08      	ldr	r2, [pc, #32]	; (8001040 <prvHeapInit+0xb0>)
 800101e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	4a07      	ldr	r2, [pc, #28]	; (8001044 <prvHeapInit+0xb4>)
 8001026:	6013      	str	r3, [r2, #0]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	20000054 	.word	0x20000054
 8001038:	20012c54 	.word	0x20012c54
 800103c:	20012c5c 	.word	0x20012c5c
 8001040:	20012c64 	.word	0x20012c64
 8001044:	20012c60 	.word	0x20012c60

08001048 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001050:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <prvInsertBlockIntoFreeList+0xac>)
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	e002      	b.n	800105c <prvInsertBlockIntoFreeList+0x14>
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	429a      	cmp	r2, r3
 8001064:	d3f7      	bcc.n	8001056 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	441a      	add	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	d108      	bne.n	800108a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	441a      	add	r2, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	441a      	add	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	429a      	cmp	r2, r3
 800109c:	d118      	bne.n	80010d0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <prvInsertBlockIntoFreeList+0xb0>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d00d      	beq.n	80010c6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	441a      	add	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	e008      	b.n	80010d8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <prvInsertBlockIntoFreeList+0xb0>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	e003      	b.n	80010d8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d002      	beq.n	80010e6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80010e6:	bf00      	nop
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20012c54 	.word	0x20012c54
 80010f8:	20012c5c 	.word	0x20012c5c

080010fc <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001106:	2301      	movs	r3, #1
 8001108:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d109      	bne.n	8001128 <xQueueGenericReset+0x2c>
 8001114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001118:	f383 8811 	msr	BASEPRI, r3
 800111c:	f3bf 8f6f 	isb	sy
 8001120:	f3bf 8f4f 	dsb	sy
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	e7fe      	b.n	8001126 <xQueueGenericReset+0x2a>

    if( ( pxQueue != NULL ) &&
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d05a      	beq.n	80011e4 <xQueueGenericReset+0xe8>
        ( pxQueue->uxLength >= 1U ) &&
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001132:	2b00      	cmp	r3, #0
 8001134:	d056      	beq.n	80011e4 <xQueueGenericReset+0xe8>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800113a:	f04f 32ff 	mov.w	r2, #4294967295
 800113e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        ( pxQueue->uxLength >= 1U ) &&
 8001146:	429a      	cmp	r2, r3
 8001148:	d34c      	bcc.n	80011e4 <xQueueGenericReset+0xe8>
    {
        taskENTER_CRITICAL();
 800114a:	f7ff fcf9 	bl	8000b40 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001156:	6939      	ldr	r1, [r7, #16]
 8001158:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800115a:	fb01 f303 	mul.w	r3, r1, r3
 800115e:	441a      	add	r2, r3
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	2200      	movs	r2, #0
 8001168:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800117a:	3b01      	subs	r3, #1
 800117c:	6939      	ldr	r1, [r7, #16]
 800117e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001180:	fb01 f303 	mul.w	r3, r1, r3
 8001184:	441a      	add	r2, r3
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	22ff      	movs	r2, #255	; 0xff
 800118e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	22ff      	movs	r2, #255	; 0xff
 8001196:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d114      	bne.n	80011ca <xQueueGenericReset+0xce>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d01a      	beq.n	80011de <xQueueGenericReset+0xe2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	3310      	adds	r3, #16
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 ffd1 	bl	8002154 <xTaskRemoveFromEventList>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d012      	beq.n	80011de <xQueueGenericReset+0xe2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <xQueueGenericReset+0x110>)
 80011ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	f3bf 8f4f 	dsb	sy
 80011c4:	f3bf 8f6f 	isb	sy
 80011c8:	e009      	b.n	80011de <xQueueGenericReset+0xe2>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	3310      	adds	r3, #16
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fafc 	bl	80007cc <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	3324      	adds	r3, #36	; 0x24
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff faf7 	bl	80007cc <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80011de:	f7ff fcdd 	bl	8000b9c <vPortExitCritical>
 80011e2:	e001      	b.n	80011e8 <xQueueGenericReset+0xec>
    }
    else
    {
        xReturn = pdFAIL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d109      	bne.n	8001202 <xQueueGenericReset+0x106>
 80011ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011f2:	f383 8811 	msr	BASEPRI, r3
 80011f6:	f3bf 8f6f 	isb	sy
 80011fa:	f3bf 8f4f 	dsb	sy
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	e7fe      	b.n	8001200 <xQueueGenericReset+0x104>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001202:	697b      	ldr	r3, [r7, #20]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	e000ed04 	.word	0xe000ed04

08001210 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af02      	add	r7, sp, #8
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	4613      	mov	r3, r2
 800121c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d02b      	beq.n	8001280 <xQueueGenericCreate+0x70>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001228:	f04f 32ff 	mov.w	r2, #4294967295
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	fbb2 f2f3 	udiv	r2, r2, r3
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	429a      	cmp	r2, r3
 8001236:	d323      	bcc.n	8001280 <xQueueGenericCreate+0x70>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001240:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001244:	d81c      	bhi.n	8001280 <xQueueGenericCreate+0x70>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	68ba      	ldr	r2, [r7, #8]
 800124a:	fb02 f303 	mul.w	r3, r2, r3
 800124e:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	3350      	adds	r3, #80	; 0x50
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fd8d 	bl	8000d74 <pvPortMalloc>
 800125a:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d01b      	beq.n	800129a <xQueueGenericCreate+0x8a>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	3350      	adds	r3, #80	; 0x50
 800126a:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800126c:	79fa      	ldrb	r2, [r7, #7]
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	4613      	mov	r3, r2
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	68b9      	ldr	r1, [r7, #8]
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f000 f813 	bl	80012a4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800127e:	e00c      	b.n	800129a <xQueueGenericCreate+0x8a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d109      	bne.n	800129a <xQueueGenericCreate+0x8a>
 8001286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800128a:	f383 8811 	msr	BASEPRI, r3
 800128e:	f3bf 8f6f 	isb	sy
 8001292:	f3bf 8f4f 	dsb	sy
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	e7fe      	b.n	8001298 <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800129a:	69fb      	ldr	r3, [r7, #28]
    }
 800129c:	4618      	mov	r0, r3
 800129e:	3720      	adds	r7, #32
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
 80012b0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d103      	bne.n	80012c0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	e002      	b.n	80012c6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80012d2:	2101      	movs	r1, #1
 80012d4:	69b8      	ldr	r0, [r7, #24]
 80012d6:	f7ff ff11 	bl	80010fc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	78fa      	ldrb	r2, [r7, #3]
 80012de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80012e2:	78fb      	ldrb	r3, [r7, #3]
 80012e4:	68ba      	ldr	r2, [r7, #8]
 80012e6:	68f9      	ldr	r1, [r7, #12]
 80012e8:	2073      	movs	r0, #115	; 0x73
 80012ea:	f002 fabb 	bl	8003864 <SEGGER_SYSVIEW_RecordU32x3>
}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b08f      	sub	sp, #60	; 0x3c
 80012fc:	af02      	add	r7, sp, #8
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001304:	2300      	movs	r3, #0
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800130c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130e:	2b00      	cmp	r3, #0
 8001310:	d109      	bne.n	8001326 <xQueueReceive+0x2e>
 8001312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001316:	f383 8811 	msr	BASEPRI, r3
 800131a:	f3bf 8f6f 	isb	sy
 800131e:	f3bf 8f4f 	dsb	sy
 8001322:	623b      	str	r3, [r7, #32]
 8001324:	e7fe      	b.n	8001324 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d103      	bne.n	8001334 <xQueueReceive+0x3c>
 800132c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	2b00      	cmp	r3, #0
 8001332:	d101      	bne.n	8001338 <xQueueReceive+0x40>
 8001334:	2301      	movs	r3, #1
 8001336:	e000      	b.n	800133a <xQueueReceive+0x42>
 8001338:	2300      	movs	r3, #0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d109      	bne.n	8001352 <xQueueReceive+0x5a>
 800133e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001342:	f383 8811 	msr	BASEPRI, r3
 8001346:	f3bf 8f6f 	isb	sy
 800134a:	f3bf 8f4f 	dsb	sy
 800134e:	61fb      	str	r3, [r7, #28]
 8001350:	e7fe      	b.n	8001350 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001352:	f001 f90d 	bl	8002570 <xTaskGetSchedulerState>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d102      	bne.n	8001362 <xQueueReceive+0x6a>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <xQueueReceive+0x6e>
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <xQueueReceive+0x70>
 8001366:	2300      	movs	r3, #0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d109      	bne.n	8001380 <xQueueReceive+0x88>
 800136c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001370:	f383 8811 	msr	BASEPRI, r3
 8001374:	f3bf 8f6f 	isb	sy
 8001378:	f3bf 8f4f 	dsb	sy
 800137c:	61bb      	str	r3, [r7, #24]
 800137e:	e7fe      	b.n	800137e <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001380:	f7ff fbde 	bl	8000b40 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001388:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	2b00      	cmp	r3, #0
 800138e:	d031      	beq.n	80013f4 <xQueueReceive+0xfc>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001390:	68b9      	ldr	r1, [r7, #8]
 8001392:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001394:	f000 f8c4 	bl	8001520 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8001398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800139a:	4618      	mov	r0, r3
 800139c:	f002 ff18 	bl	80041d0 <SEGGER_SYSVIEW_ShrinkId>
 80013a0:	4604      	mov	r4, r0
 80013a2:	2000      	movs	r0, #0
 80013a4:	f002 ff14 	bl	80041d0 <SEGGER_SYSVIEW_ShrinkId>
 80013a8:	4601      	mov	r1, r0
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	2301      	movs	r3, #1
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	4613      	mov	r3, r2
 80013b2:	460a      	mov	r2, r1
 80013b4:	4621      	mov	r1, r4
 80013b6:	205c      	movs	r0, #92	; 0x5c
 80013b8:	f002 faca 	bl	8003950 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	1e5a      	subs	r2, r3, #1
 80013c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c2:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d00f      	beq.n	80013ec <xQueueReceive+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80013cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ce:	3310      	adds	r3, #16
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 febf 	bl	8002154 <xTaskRemoveFromEventList>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d007      	beq.n	80013ec <xQueueReceive+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80013dc:	4b4f      	ldr	r3, [pc, #316]	; (800151c <xQueueReceive+0x224>)
 80013de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	f3bf 8f4f 	dsb	sy
 80013e8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80013ec:	f7ff fbd6 	bl	8000b9c <vPortExitCritical>
                return pdPASS;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e08e      	b.n	8001512 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d115      	bne.n	8001426 <xQueueReceive+0x12e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80013fa:	f7ff fbcf 	bl	8000b9c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80013fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001400:	4618      	mov	r0, r3
 8001402:	f002 fee5 	bl	80041d0 <SEGGER_SYSVIEW_ShrinkId>
 8001406:	4604      	mov	r4, r0
 8001408:	2000      	movs	r0, #0
 800140a:	f002 fee1 	bl	80041d0 <SEGGER_SYSVIEW_ShrinkId>
 800140e:	4601      	mov	r1, r0
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	2301      	movs	r3, #1
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	4613      	mov	r3, r2
 8001418:	460a      	mov	r2, r1
 800141a:	4621      	mov	r1, r4
 800141c:	205c      	movs	r0, #92	; 0x5c
 800141e:	f002 fa97 	bl	8003950 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8001422:	2300      	movs	r3, #0
 8001424:	e075      	b.n	8001512 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001428:	2b00      	cmp	r3, #0
 800142a:	d106      	bne.n	800143a <xQueueReceive+0x142>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800142c:	f107 0310 	add.w	r3, r7, #16
 8001430:	4618      	mov	r0, r3
 8001432:	f000 ff67 	bl	8002304 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001436:	2301      	movs	r3, #1
 8001438:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800143a:	f7ff fbaf 	bl	8000b9c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800143e:	f000 fb6d 	bl	8001b1c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001442:	f7ff fb7d 	bl	8000b40 <vPortEnterCritical>
 8001446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001448:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800144c:	b25b      	sxtb	r3, r3
 800144e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001452:	d103      	bne.n	800145c <xQueueReceive+0x164>
 8001454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800145c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800145e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001462:	b25b      	sxtb	r3, r3
 8001464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001468:	d103      	bne.n	8001472 <xQueueReceive+0x17a>
 800146a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001472:	f7ff fb93 	bl	8000b9c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001476:	1d3a      	adds	r2, r7, #4
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f000 ff56 	bl	8002330 <xTaskCheckForTimeOut>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d124      	bne.n	80014d4 <xQueueReceive+0x1dc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800148a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800148c:	f000 f8c0 	bl	8001610 <prvIsQueueEmpty>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d018      	beq.n	80014c8 <xQueueReceive+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001498:	3324      	adds	r3, #36	; 0x24
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	4611      	mov	r1, r2
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 fdec 	bl	800207c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80014a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014a6:	f000 f861 	bl	800156c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80014aa:	f000 fb45 	bl	8001b38 <xTaskResumeAll>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f47f af65 	bne.w	8001380 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <xQueueReceive+0x224>)
 80014b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	f3bf 8f4f 	dsb	sy
 80014c2:	f3bf 8f6f 	isb	sy
 80014c6:	e75b      	b.n	8001380 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80014c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014ca:	f000 f84f 	bl	800156c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80014ce:	f000 fb33 	bl	8001b38 <xTaskResumeAll>
 80014d2:	e755      	b.n	8001380 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80014d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014d6:	f000 f849 	bl	800156c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80014da:	f000 fb2d 	bl	8001b38 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80014de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014e0:	f000 f896 	bl	8001610 <prvIsQueueEmpty>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f43f af4a 	beq.w	8001380 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80014ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ee:	4618      	mov	r0, r3
 80014f0:	f002 fe6e 	bl	80041d0 <SEGGER_SYSVIEW_ShrinkId>
 80014f4:	4604      	mov	r4, r0
 80014f6:	2000      	movs	r0, #0
 80014f8:	f002 fe6a 	bl	80041d0 <SEGGER_SYSVIEW_ShrinkId>
 80014fc:	4601      	mov	r1, r0
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	2301      	movs	r3, #1
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	4613      	mov	r3, r2
 8001506:	460a      	mov	r2, r1
 8001508:	4621      	mov	r1, r4
 800150a:	205c      	movs	r0, #92	; 0x5c
 800150c:	f002 fa20 	bl	8003950 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8001510:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001512:	4618      	mov	r0, r3
 8001514:	3734      	adds	r7, #52	; 0x34
 8001516:	46bd      	mov	sp, r7
 8001518:	bd90      	pop	{r4, r7, pc}
 800151a:	bf00      	nop
 800151c:	e000ed04 	.word	0xe000ed04

08001520 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	2b00      	cmp	r3, #0
 8001530:	d018      	beq.n	8001564 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68da      	ldr	r2, [r3, #12]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	441a      	add	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68da      	ldr	r2, [r3, #12]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	429a      	cmp	r2, r3
 800154a:	d303      	bcc.n	8001554 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68d9      	ldr	r1, [r3, #12]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	461a      	mov	r2, r3
 800155e:	6838      	ldr	r0, [r7, #0]
 8001560:	f003 fa41 	bl	80049e6 <memcpy>
    }
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001574:	f7ff fae4 	bl	8000b40 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800157e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001580:	e011      	b.n	80015a6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001586:	2b00      	cmp	r3, #0
 8001588:	d012      	beq.n	80015b0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3324      	adds	r3, #36	; 0x24
 800158e:	4618      	mov	r0, r3
 8001590:	f000 fde0 	bl	8002154 <xTaskRemoveFromEventList>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800159a:	f000 ff2d 	bl	80023f8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	3b01      	subs	r3, #1
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80015a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	dce9      	bgt.n	8001582 <prvUnlockQueue+0x16>
 80015ae:	e000      	b.n	80015b2 <prvUnlockQueue+0x46>
                    break;
 80015b0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	22ff      	movs	r2, #255	; 0xff
 80015b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80015ba:	f7ff faef 	bl	8000b9c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80015be:	f7ff fabf 	bl	8000b40 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80015c8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80015ca:	e011      	b.n	80015f0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d012      	beq.n	80015fa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3310      	adds	r3, #16
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 fdbb 	bl	8002154 <xTaskRemoveFromEventList>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80015e4:	f000 ff08 	bl	80023f8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80015e8:	7bbb      	ldrb	r3, [r7, #14]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80015f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	dce9      	bgt.n	80015cc <prvUnlockQueue+0x60>
 80015f8:	e000      	b.n	80015fc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80015fa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	22ff      	movs	r2, #255	; 0xff
 8001600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001604:	f7ff faca 	bl	8000b9c <vPortExitCritical>
}
 8001608:	bf00      	nop
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001618:	f7ff fa92 	bl	8000b40 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001620:	2b00      	cmp	r3, #0
 8001622:	d102      	bne.n	800162a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001624:	2301      	movs	r3, #1
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	e001      	b.n	800162e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800162e:	f7ff fab5 	bl	8000b9c <vPortExitCritical>

    return xReturn;
 8001632:	68fb      	ldr	r3, [r7, #12]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d109      	bne.n	8001664 <vQueueAddToRegistry+0x28>
 8001650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001654:	f383 8811 	msr	BASEPRI, r3
 8001658:	f3bf 8f6f 	isb	sy
 800165c:	f3bf 8f4f 	dsb	sy
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	e7fe      	b.n	8001662 <vQueueAddToRegistry+0x26>

        if( pcQueueName != NULL )
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d024      	beq.n	80016b4 <vQueueAddToRegistry+0x78>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	e01e      	b.n	80016ae <vQueueAddToRegistry+0x72>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001670:	4a1c      	ldr	r2, [pc, #112]	; (80016e4 <vQueueAddToRegistry+0xa8>)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4413      	add	r3, r2
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	429a      	cmp	r2, r3
 800167e:	d105      	bne.n	800168c <vQueueAddToRegistry+0x50>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <vQueueAddToRegistry+0xa8>)
 8001686:	4413      	add	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
                    break;
 800168a:	e013      	b.n	80016b4 <vQueueAddToRegistry+0x78>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10a      	bne.n	80016a8 <vQueueAddToRegistry+0x6c>
 8001692:	4a14      	ldr	r2, [pc, #80]	; (80016e4 <vQueueAddToRegistry+0xa8>)
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d104      	bne.n	80016a8 <vQueueAddToRegistry+0x6c>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	4a10      	ldr	r2, [pc, #64]	; (80016e4 <vQueueAddToRegistry+0xa8>)
 80016a4:	4413      	add	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	3301      	adds	r3, #1
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	2b07      	cmp	r3, #7
 80016b2:	d9dd      	bls.n	8001670 <vQueueAddToRegistry+0x34>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00f      	beq.n	80016da <vQueueAddToRegistry+0x9e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f002 fd81 	bl	80041d0 <SEGGER_SYSVIEW_ShrinkId>
 80016ce:	4601      	mov	r1, r0
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	461a      	mov	r2, r3
 80016d4:	2071      	movs	r0, #113	; 0x71
 80016d6:	f002 f86b 	bl	80037b0 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80016da:	bf00      	nop
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20015388 	.word	0x20015388

080016e8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80016f8:	f7ff fa22 	bl	8000b40 <vPortEnterCritical>
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001702:	b25b      	sxtb	r3, r3
 8001704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001708:	d103      	bne.n	8001712 <vQueueWaitForMessageRestricted+0x2a>
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001718:	b25b      	sxtb	r3, r3
 800171a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800171e:	d103      	bne.n	8001728 <vQueueWaitForMessageRestricted+0x40>
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001728:	f7ff fa38 	bl	8000b9c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001730:	2b00      	cmp	r3, #0
 8001732:	d106      	bne.n	8001742 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	3324      	adds	r3, #36	; 0x24
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	68b9      	ldr	r1, [r7, #8]
 800173c:	4618      	mov	r0, r3
 800173e:	f000 fcc1 	bl	80020c4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001742:	6978      	ldr	r0, [r7, #20]
 8001744:	f7ff ff12 	bl	800156c <prvUnlockQueue>
    }
 8001748:	bf00      	nop
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001750:	b580      	push	{r7, lr}
 8001752:	b08c      	sub	sp, #48	; 0x30
 8001754:	af04      	add	r7, sp, #16
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	4613      	mov	r3, r2
 800175e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001760:	88fb      	ldrh	r3, [r7, #6]
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fb05 	bl	8000d74 <pvPortMalloc>
 800176a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d013      	beq.n	800179a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001772:	2058      	movs	r0, #88	; 0x58
 8001774:	f7ff fafe 	bl	8000d74 <pvPortMalloc>
 8001778:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d008      	beq.n	8001792 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001780:	2258      	movs	r2, #88	; 0x58
 8001782:	2100      	movs	r1, #0
 8001784:	69f8      	ldr	r0, [r7, #28]
 8001786:	f003 f939 	bl	80049fc <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	631a      	str	r2, [r3, #48]	; 0x30
 8001790:	e005      	b.n	800179e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001792:	6978      	ldr	r0, [r7, #20]
 8001794:	f7ff fba6 	bl	8000ee4 <vPortFree>
 8001798:	e001      	b.n	800179e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d013      	beq.n	80017cc <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80017a4:	88fa      	ldrh	r2, [r7, #6]
 80017a6:	2300      	movs	r3, #0
 80017a8:	9303      	str	r3, [sp, #12]
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	9302      	str	r3, [sp, #8]
 80017ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	68b9      	ldr	r1, [r7, #8]
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f000 f80e 	bl	80017dc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80017c0:	69f8      	ldr	r0, [r7, #28]
 80017c2:	f000 f897 	bl	80018f4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80017c6:	2301      	movs	r3, #1
 80017c8:	61bb      	str	r3, [r7, #24]
 80017ca:	e002      	b.n	80017d2 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295
 80017d0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80017d2:	69bb      	ldr	r3, [r7, #24]
    }
 80017d4:	4618      	mov	r0, r3
 80017d6:	3720      	adds	r7, #32
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
 80017e8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80017ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	461a      	mov	r2, r3
 80017f4:	21a5      	movs	r1, #165	; 0xa5
 80017f6:	f003 f901 	bl	80049fc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80017fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001804:	3b01      	subs	r3, #1
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	f023 0307 	bic.w	r3, r3, #7
 8001812:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	2b00      	cmp	r3, #0
 800181c:	d009      	beq.n	8001832 <prvInitialiseNewTask+0x56>
 800181e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001822:	f383 8811 	msr	BASEPRI, r3
 8001826:	f3bf 8f6f 	isb	sy
 800182a:	f3bf 8f4f 	dsb	sy
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	e7fe      	b.n	8001830 <prvInitialiseNewTask+0x54>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d01e      	beq.n	8001876 <prvInitialiseNewTask+0x9a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001838:	2300      	movs	r3, #0
 800183a:	61fb      	str	r3, [r7, #28]
 800183c:	e012      	b.n	8001864 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	4413      	add	r3, r2
 8001844:	7819      	ldrb	r1, [r3, #0]
 8001846:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	4413      	add	r3, r2
 800184c:	3334      	adds	r3, #52	; 0x34
 800184e:	460a      	mov	r2, r1
 8001850:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	4413      	add	r3, r2
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d006      	beq.n	800186c <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3301      	adds	r3, #1
 8001862:	61fb      	str	r3, [r7, #28]
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	2b09      	cmp	r3, #9
 8001868:	d9e9      	bls.n	800183e <prvInitialiseNewTask+0x62>
 800186a:	e000      	b.n	800186e <prvInitialiseNewTask+0x92>
            {
                break;
 800186c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800186e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001870:	2200      	movs	r2, #0
 8001872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001878:	2b04      	cmp	r3, #4
 800187a:	d909      	bls.n	8001890 <prvInitialiseNewTask+0xb4>
 800187c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001880:	f383 8811 	msr	BASEPRI, r3
 8001884:	f3bf 8f6f 	isb	sy
 8001888:	f3bf 8f4f 	dsb	sy
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	e7fe      	b.n	800188e <prvInitialiseNewTask+0xb2>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001892:	2b04      	cmp	r3, #4
 8001894:	d901      	bls.n	800189a <prvInitialiseNewTask+0xbe>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001896:	2304      	movs	r3, #4
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800189a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800189e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80018a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018a4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80018a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018a8:	3304      	adds	r3, #4
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe ffae 	bl	800080c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80018b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b2:	3318      	adds	r3, #24
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe ffa9 	bl	800080c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80018ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018be:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c2:	f1c3 0205 	rsb	r2, r3, #5
 80018c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018c8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80018ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018ce:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	68f9      	ldr	r1, [r7, #12]
 80018d4:	69b8      	ldr	r0, [r7, #24]
 80018d6:	f7ff f809 	bl	80008ec <pxPortInitialiseStack>
 80018da:	4602      	mov	r2, r0
 80018dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018de:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80018e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d002      	beq.n	80018ec <prvInitialiseNewTask+0x110>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80018e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018ea:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80018ec:	bf00      	nop
 80018ee:	3720      	adds	r7, #32
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80018f4:	b5b0      	push	{r4, r5, r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80018fc:	f7ff f920 	bl	8000b40 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001900:	4b4f      	ldr	r3, [pc, #316]	; (8001a40 <prvAddNewTaskToReadyList+0x14c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	3301      	adds	r3, #1
 8001906:	4a4e      	ldr	r2, [pc, #312]	; (8001a40 <prvAddNewTaskToReadyList+0x14c>)
 8001908:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800190a:	4b4e      	ldr	r3, [pc, #312]	; (8001a44 <prvAddNewTaskToReadyList+0x150>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d109      	bne.n	8001926 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001912:	4a4c      	ldr	r2, [pc, #304]	; (8001a44 <prvAddNewTaskToReadyList+0x150>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001918:	4b49      	ldr	r3, [pc, #292]	; (8001a40 <prvAddNewTaskToReadyList+0x14c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d110      	bne.n	8001942 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001920:	f000 fd8e 	bl	8002440 <prvInitialiseTaskLists>
 8001924:	e00d      	b.n	8001942 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001926:	4b48      	ldr	r3, [pc, #288]	; (8001a48 <prvAddNewTaskToReadyList+0x154>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d109      	bne.n	8001942 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800192e:	4b45      	ldr	r3, [pc, #276]	; (8001a44 <prvAddNewTaskToReadyList+0x150>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001938:	429a      	cmp	r2, r3
 800193a:	d802      	bhi.n	8001942 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800193c:	4a41      	ldr	r2, [pc, #260]	; (8001a44 <prvAddNewTaskToReadyList+0x150>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001942:	4b42      	ldr	r3, [pc, #264]	; (8001a4c <prvAddNewTaskToReadyList+0x158>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	3301      	adds	r3, #1
 8001948:	4a40      	ldr	r2, [pc, #256]	; (8001a4c <prvAddNewTaskToReadyList+0x158>)
 800194a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800194c:	4b3f      	ldr	r3, [pc, #252]	; (8001a4c <prvAddNewTaskToReadyList+0x158>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d016      	beq.n	8001988 <prvAddNewTaskToReadyList+0x94>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4618      	mov	r0, r3
 800195e:	f002 fb6b 	bl	8004038 <SEGGER_SYSVIEW_OnTaskCreate>
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	461d      	mov	r5, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	461c      	mov	r4, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	1ae3      	subs	r3, r4, r3
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	462b      	mov	r3, r5
 8001984:	f001 f9b4 	bl	8002cf0 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4618      	mov	r0, r3
 800198c:	f002 fbdc 	bl	8004148 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001994:	2201      	movs	r2, #1
 8001996:	409a      	lsls	r2, r3
 8001998:	4b2d      	ldr	r3, [pc, #180]	; (8001a50 <prvAddNewTaskToReadyList+0x15c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4313      	orrs	r3, r2
 800199e:	4a2c      	ldr	r2, [pc, #176]	; (8001a50 <prvAddNewTaskToReadyList+0x15c>)
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a6:	492b      	ldr	r1, [pc, #172]	; (8001a54 <prvAddNewTaskToReadyList+0x160>)
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	3304      	adds	r3, #4
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	3204      	adds	r2, #4
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	1d1a      	adds	r2, r3, #4
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4a1b      	ldr	r2, [pc, #108]	; (8001a54 <prvAddNewTaskToReadyList+0x160>)
 80019e6:	441a      	add	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	615a      	str	r2, [r3, #20]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f0:	4918      	ldr	r1, [pc, #96]	; (8001a54 <prvAddNewTaskToReadyList+0x160>)
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	1c59      	adds	r1, r3, #1
 8001a00:	4814      	ldr	r0, [pc, #80]	; (8001a54 <prvAddNewTaskToReadyList+0x160>)
 8001a02:	4613      	mov	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4403      	add	r3, r0
 8001a0c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001a0e:	f7ff f8c5 	bl	8000b9c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <prvAddNewTaskToReadyList+0x154>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00e      	beq.n	8001a38 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <prvAddNewTaskToReadyList+0x150>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d207      	bcs.n	8001a38 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <prvAddNewTaskToReadyList+0x164>)
 8001a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	f3bf 8f4f 	dsb	sy
 8001a34:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001a38:	bf00      	nop
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a40:	20012d48 	.word	0x20012d48
 8001a44:	20012c70 	.word	0x20012c70
 8001a48:	20012d54 	.word	0x20012d54
 8001a4c:	20012d64 	.word	0x20012d64
 8001a50:	20012d50 	.word	0x20012d50
 8001a54:	20012c74 	.word	0x20012c74
 8001a58:	e000ed04 	.word	0xe000ed04

08001a5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8001a62:	4b26      	ldr	r3, [pc, #152]	; (8001afc <vTaskStartScheduler+0xa0>)
 8001a64:	9301      	str	r3, [sp, #4]
 8001a66:	2300      	movs	r3, #0
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	2282      	movs	r2, #130	; 0x82
 8001a6e:	4924      	ldr	r1, [pc, #144]	; (8001b00 <vTaskStartScheduler+0xa4>)
 8001a70:	4824      	ldr	r0, [pc, #144]	; (8001b04 <vTaskStartScheduler+0xa8>)
 8001a72:	f7ff fe6d 	bl	8001750 <xTaskCreate>
 8001a76:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d102      	bne.n	8001a84 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8001a7e:	f000 fe15 	bl	80026ac <xTimerCreateTimerTask>
 8001a82:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d123      	bne.n	8001ad2 <vTaskStartScheduler+0x76>
 8001a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a8e:	f383 8811 	msr	BASEPRI, r3
 8001a92:	f3bf 8f6f 	isb	sy
 8001a96:	f3bf 8f4f 	dsb	sy
 8001a9a:	60bb      	str	r3, [r7, #8]
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <vTaskStartScheduler+0xac>)
 8001a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <vTaskStartScheduler+0xb0>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001aaa:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <vTaskStartScheduler+0xb4>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001ab0:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <vTaskStartScheduler+0xb8>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <vTaskStartScheduler+0xa0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d102      	bne.n	8001ac2 <vTaskStartScheduler+0x66>
 8001abc:	f002 faa0 	bl	8004000 <SEGGER_SYSVIEW_OnIdle>
 8001ac0:	e004      	b.n	8001acc <vTaskStartScheduler+0x70>
 8001ac2:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <vTaskStartScheduler+0xb8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f002 fafa 	bl	80040c0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001acc:	f7fe ff9a 	bl	8000a04 <xPortStartScheduler>
 8001ad0:	e00d      	b.n	8001aee <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad8:	d109      	bne.n	8001aee <vTaskStartScheduler+0x92>
 8001ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ade:	f383 8811 	msr	BASEPRI, r3
 8001ae2:	f3bf 8f6f 	isb	sy
 8001ae6:	f3bf 8f4f 	dsb	sy
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	e7fe      	b.n	8001aec <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <vTaskStartScheduler+0xbc>)
 8001af0:	681b      	ldr	r3, [r3, #0]
}
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20012d6c 	.word	0x20012d6c
 8001b00:	08004a24 	.word	0x08004a24
 8001b04:	08002411 	.word	0x08002411
 8001b08:	20012d68 	.word	0x20012d68
 8001b0c:	20012d54 	.word	0x20012d54
 8001b10:	20012d4c 	.word	0x20012d4c
 8001b14:	20012c70 	.word	0x20012c70
 8001b18:	20000014 	.word	0x20000014

08001b1c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001b20:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <vTaskSuspendAll+0x18>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	3301      	adds	r3, #1
 8001b26:	4a03      	ldr	r2, [pc, #12]	; (8001b34 <vTaskSuspendAll+0x18>)
 8001b28:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	20012d70 	.word	0x20012d70

08001b38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001b46:	4b72      	ldr	r3, [pc, #456]	; (8001d10 <xTaskResumeAll+0x1d8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d109      	bne.n	8001b62 <xTaskResumeAll+0x2a>
 8001b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b52:	f383 8811 	msr	BASEPRI, r3
 8001b56:	f3bf 8f6f 	isb	sy
 8001b5a:	f3bf 8f4f 	dsb	sy
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	e7fe      	b.n	8001b60 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001b62:	f7fe ffed 	bl	8000b40 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001b66:	4b6a      	ldr	r3, [pc, #424]	; (8001d10 <xTaskResumeAll+0x1d8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	4a68      	ldr	r2, [pc, #416]	; (8001d10 <xTaskResumeAll+0x1d8>)
 8001b6e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b70:	4b67      	ldr	r3, [pc, #412]	; (8001d10 <xTaskResumeAll+0x1d8>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f040 80c4 	bne.w	8001d02 <xTaskResumeAll+0x1ca>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001b7a:	4b66      	ldr	r3, [pc, #408]	; (8001d14 <xTaskResumeAll+0x1dc>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 80bf 	beq.w	8001d02 <xTaskResumeAll+0x1ca>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b84:	e08e      	b.n	8001ca4 <xTaskResumeAll+0x16c>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b86:	4b64      	ldr	r3, [pc, #400]	; (8001d18 <xTaskResumeAll+0x1e0>)
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	69fa      	ldr	r2, [r7, #28]
 8001b9a:	6a12      	ldr	r2, [r2, #32]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	69fa      	ldr	r2, [r7, #28]
 8001ba4:	69d2      	ldr	r2, [r2, #28]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	3318      	adds	r3, #24
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d103      	bne.n	8001bbc <xTaskResumeAll+0x84>
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	6a1a      	ldr	r2, [r3, #32]
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	629a      	str	r2, [r3, #40]	; 0x28
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	1e5a      	subs	r2, r3, #1
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	68d2      	ldr	r2, [r2, #12]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	69fa      	ldr	r2, [r7, #28]
 8001be2:	6892      	ldr	r2, [r2, #8]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3304      	adds	r3, #4
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d103      	bne.n	8001bfa <xTaskResumeAll+0xc2>
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	68da      	ldr	r2, [r3, #12]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	615a      	str	r2, [r3, #20]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	1e5a      	subs	r2, r3, #1
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f002 fa9b 	bl	8004148 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c16:	2201      	movs	r2, #1
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	4b40      	ldr	r3, [pc, #256]	; (8001d1c <xTaskResumeAll+0x1e4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	4a3e      	ldr	r2, [pc, #248]	; (8001d1c <xTaskResumeAll+0x1e4>)
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c28:	493d      	ldr	r1, [pc, #244]	; (8001d20 <xTaskResumeAll+0x1e8>)
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	440b      	add	r3, r1
 8001c34:	3304      	adds	r3, #4
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	60da      	str	r2, [r3, #12]
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	69fa      	ldr	r2, [r7, #28]
 8001c4e:	3204      	adds	r2, #4
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	1d1a      	adds	r2, r3, #4
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4a2e      	ldr	r2, [pc, #184]	; (8001d20 <xTaskResumeAll+0x1e8>)
 8001c68:	441a      	add	r2, r3
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	615a      	str	r2, [r3, #20]
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c72:	492b      	ldr	r1, [pc, #172]	; (8001d20 <xTaskResumeAll+0x1e8>)
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	1c59      	adds	r1, r3, #1
 8001c82:	4827      	ldr	r0, [pc, #156]	; (8001d20 <xTaskResumeAll+0x1e8>)
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4403      	add	r3, r0
 8001c8e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c94:	4b23      	ldr	r3, [pc, #140]	; (8001d24 <xTaskResumeAll+0x1ec>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d302      	bcc.n	8001ca4 <xTaskResumeAll+0x16c>
                    {
                        xYieldPending = pdTRUE;
 8001c9e:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <xTaskResumeAll+0x1f0>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001ca4:	4b1c      	ldr	r3, [pc, #112]	; (8001d18 <xTaskResumeAll+0x1e0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f47f af6c 	bne.w	8001b86 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <xTaskResumeAll+0x180>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001cb4:	f000 fc40 	bl	8002538 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001cb8:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <xTaskResumeAll+0x1f4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d010      	beq.n	8001ce6 <xTaskResumeAll+0x1ae>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001cc4:	f000 f858 	bl	8001d78 <xTaskIncrementTick>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d002      	beq.n	8001cd4 <xTaskResumeAll+0x19c>
                            {
                                xYieldPending = pdTRUE;
 8001cce:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <xTaskResumeAll+0x1f0>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1f1      	bne.n	8001cc4 <xTaskResumeAll+0x18c>

                        xPendedTicks = 0;
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <xTaskResumeAll+0x1f4>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <xTaskResumeAll+0x1f0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d009      	beq.n	8001d02 <xTaskResumeAll+0x1ca>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <xTaskResumeAll+0x1f8>)
 8001cf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	f3bf 8f4f 	dsb	sy
 8001cfe:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001d02:	f7fe ff4b 	bl	8000b9c <vPortExitCritical>

    return xAlreadyYielded;
 8001d06:	69bb      	ldr	r3, [r7, #24]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3720      	adds	r7, #32
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20012d70 	.word	0x20012d70
 8001d14:	20012d48 	.word	0x20012d48
 8001d18:	20012d08 	.word	0x20012d08
 8001d1c:	20012d50 	.word	0x20012d50
 8001d20:	20012c74 	.word	0x20012c74
 8001d24:	20012c70 	.word	0x20012c70
 8001d28:	20012d5c 	.word	0x20012d5c
 8001d2c:	20012d58 	.word	0x20012d58
 8001d30:	e000ed04 	.word	0xe000ed04

08001d34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001d3a:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <xTaskGetTickCount+0x1c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001d40:	687b      	ldr	r3, [r7, #4]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20012d4c 	.word	0x20012d4c

08001d54 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001d5a:	f7fe ffcd 	bl	8000cf8 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001d62:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <xTaskGetTickCountFromISR+0x20>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001d68:	683b      	ldr	r3, [r7, #0]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20012d4c 	.word	0x20012d4c

08001d78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d82:	4b7f      	ldr	r3, [pc, #508]	; (8001f80 <xTaskIncrementTick+0x208>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f040 80ef 	bne.w	8001f6a <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001d8c:	4b7d      	ldr	r3, [pc, #500]	; (8001f84 <xTaskIncrementTick+0x20c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	3301      	adds	r3, #1
 8001d92:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001d94:	4a7b      	ldr	r2, [pc, #492]	; (8001f84 <xTaskIncrementTick+0x20c>)
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001d9a:	6a3b      	ldr	r3, [r7, #32]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d11f      	bne.n	8001de0 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8001da0:	4b79      	ldr	r3, [pc, #484]	; (8001f88 <xTaskIncrementTick+0x210>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d009      	beq.n	8001dbe <xTaskIncrementTick+0x46>
 8001daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dae:	f383 8811 	msr	BASEPRI, r3
 8001db2:	f3bf 8f6f 	isb	sy
 8001db6:	f3bf 8f4f 	dsb	sy
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	e7fe      	b.n	8001dbc <xTaskIncrementTick+0x44>
 8001dbe:	4b72      	ldr	r3, [pc, #456]	; (8001f88 <xTaskIncrementTick+0x210>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	61fb      	str	r3, [r7, #28]
 8001dc4:	4b71      	ldr	r3, [pc, #452]	; (8001f8c <xTaskIncrementTick+0x214>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a6f      	ldr	r2, [pc, #444]	; (8001f88 <xTaskIncrementTick+0x210>)
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	4a6f      	ldr	r2, [pc, #444]	; (8001f8c <xTaskIncrementTick+0x214>)
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	4b6f      	ldr	r3, [pc, #444]	; (8001f90 <xTaskIncrementTick+0x218>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	4a6d      	ldr	r2, [pc, #436]	; (8001f90 <xTaskIncrementTick+0x218>)
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	f000 fbac 	bl	8002538 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001de0:	4b6c      	ldr	r3, [pc, #432]	; (8001f94 <xTaskIncrementTick+0x21c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6a3a      	ldr	r2, [r7, #32]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	f0c0 80aa 	bcc.w	8001f40 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001dec:	4b66      	ldr	r3, [pc, #408]	; (8001f88 <xTaskIncrementTick+0x210>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d104      	bne.n	8001e00 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001df6:	4b67      	ldr	r3, [pc, #412]	; (8001f94 <xTaskIncrementTick+0x21c>)
 8001df8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dfc:	601a      	str	r2, [r3, #0]
                    break;
 8001dfe:	e09f      	b.n	8001f40 <xTaskIncrementTick+0x1c8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e00:	4b61      	ldr	r3, [pc, #388]	; (8001f88 <xTaskIncrementTick+0x210>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001e10:	6a3a      	ldr	r2, [r7, #32]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d203      	bcs.n	8001e20 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001e18:	4a5e      	ldr	r2, [pc, #376]	; (8001f94 <xTaskIncrementTick+0x21c>)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001e1e:	e08f      	b.n	8001f40 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	68d2      	ldr	r2, [r2, #12]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	6892      	ldr	r2, [r2, #8]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	3304      	adds	r3, #4
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d103      	bne.n	8001e4e <xTaskIncrementTick+0xd6>
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	2200      	movs	r2, #0
 8001e52:	615a      	str	r2, [r3, #20]
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	1e5a      	subs	r2, r3, #1
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d01e      	beq.n	8001ea4 <xTaskIncrementTick+0x12c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	6a12      	ldr	r2, [r2, #32]
 8001e74:	609a      	str	r2, [r3, #8]
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	69d2      	ldr	r2, [r2, #28]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	3318      	adds	r3, #24
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d103      	bne.n	8001e94 <xTaskIncrementTick+0x11c>
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	6a1a      	ldr	r2, [r3, #32]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	2200      	movs	r2, #0
 8001e98:	629a      	str	r2, [r3, #40]	; 0x28
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	1e5a      	subs	r2, r3, #1
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f002 f94e 	bl	8004148 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	4b38      	ldr	r3, [pc, #224]	; (8001f98 <xTaskIncrementTick+0x220>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	4a37      	ldr	r2, [pc, #220]	; (8001f98 <xTaskIncrementTick+0x220>)
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec2:	4936      	ldr	r1, [pc, #216]	; (8001f9c <xTaskIncrementTick+0x224>)
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	3304      	adds	r3, #4
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	3204      	adds	r2, #4
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	1d1a      	adds	r2, r3, #4
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4a26      	ldr	r2, [pc, #152]	; (8001f9c <xTaskIncrementTick+0x224>)
 8001f02:	441a      	add	r2, r3
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	615a      	str	r2, [r3, #20]
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f0c:	4923      	ldr	r1, [pc, #140]	; (8001f9c <xTaskIncrementTick+0x224>)
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	440b      	add	r3, r1
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	1c59      	adds	r1, r3, #1
 8001f1c:	481f      	ldr	r0, [pc, #124]	; (8001f9c <xTaskIncrementTick+0x224>)
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4403      	add	r3, r0
 8001f28:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f2e:	4b1c      	ldr	r3, [pc, #112]	; (8001fa0 <xTaskIncrementTick+0x228>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f34:	429a      	cmp	r2, r3
 8001f36:	f67f af59 	bls.w	8001dec <xTaskIncrementTick+0x74>
                        {
                            xSwitchRequired = pdTRUE;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f3e:	e755      	b.n	8001dec <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001f40:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <xTaskIncrementTick+0x228>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f46:	4915      	ldr	r1, [pc, #84]	; (8001f9c <xTaskIncrementTick+0x224>)
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d901      	bls.n	8001f5c <xTaskIncrementTick+0x1e4>
            {
                xSwitchRequired = pdTRUE;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <xTaskIncrementTick+0x22c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d007      	beq.n	8001f74 <xTaskIncrementTick+0x1fc>
            {
                xSwitchRequired = pdTRUE;
 8001f64:	2301      	movs	r3, #1
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
 8001f68:	e004      	b.n	8001f74 <xTaskIncrementTick+0x1fc>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <xTaskIncrementTick+0x230>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	4a0d      	ldr	r2, [pc, #52]	; (8001fa8 <xTaskIncrementTick+0x230>)
 8001f72:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3728      	adds	r7, #40	; 0x28
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20012d70 	.word	0x20012d70
 8001f84:	20012d4c 	.word	0x20012d4c
 8001f88:	20012d00 	.word	0x20012d00
 8001f8c:	20012d04 	.word	0x20012d04
 8001f90:	20012d60 	.word	0x20012d60
 8001f94:	20012d68 	.word	0x20012d68
 8001f98:	20012d50 	.word	0x20012d50
 8001f9c:	20012c74 	.word	0x20012c74
 8001fa0:	20012c70 	.word	0x20012c70
 8001fa4:	20012d5c 	.word	0x20012d5c
 8001fa8:	20012d58 	.word	0x20012d58

08001fac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001fb2:	4b2c      	ldr	r3, [pc, #176]	; (8002064 <vTaskSwitchContext+0xb8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001fba:	4b2b      	ldr	r3, [pc, #172]	; (8002068 <vTaskSwitchContext+0xbc>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001fc0:	e04c      	b.n	800205c <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 8001fc2:	4b29      	ldr	r3, [pc, #164]	; (8002068 <vTaskSwitchContext+0xbc>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001fc8:	4b28      	ldr	r3, [pc, #160]	; (800206c <vTaskSwitchContext+0xc0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	fab3 f383 	clz	r3, r3
 8001fd4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001fd6:	7afb      	ldrb	r3, [r7, #11]
 8001fd8:	f1c3 031f 	rsb	r3, r3, #31
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	4924      	ldr	r1, [pc, #144]	; (8002070 <vTaskSwitchContext+0xc4>)
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	440b      	add	r3, r1
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d109      	bne.n	8002006 <vTaskSwitchContext+0x5a>
        __asm volatile
 8001ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff6:	f383 8811 	msr	BASEPRI, r3
 8001ffa:	f3bf 8f6f 	isb	sy
 8001ffe:	f3bf 8f4f 	dsb	sy
 8002002:	607b      	str	r3, [r7, #4]
 8002004:	e7fe      	b.n	8002004 <vTaskSwitchContext+0x58>
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4613      	mov	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4a17      	ldr	r2, [pc, #92]	; (8002070 <vTaskSwitchContext+0xc4>)
 8002012:	4413      	add	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	3308      	adds	r3, #8
 8002028:	429a      	cmp	r2, r3
 800202a:	d104      	bne.n	8002036 <vTaskSwitchContext+0x8a>
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	4a0d      	ldr	r2, [pc, #52]	; (8002074 <vTaskSwitchContext+0xc8>)
 800203e:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <vTaskSwitchContext+0xc8>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <vTaskSwitchContext+0xcc>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d102      	bne.n	8002052 <vTaskSwitchContext+0xa6>
 800204c:	f001 ffd8 	bl	8004000 <SEGGER_SYSVIEW_OnIdle>
}
 8002050:	e004      	b.n	800205c <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <vTaskSwitchContext+0xc8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f002 f832 	bl	80040c0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800205c:	bf00      	nop
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20012d70 	.word	0x20012d70
 8002068:	20012d5c 	.word	0x20012d5c
 800206c:	20012d50 	.word	0x20012d50
 8002070:	20012c74 	.word	0x20012c74
 8002074:	20012c70 	.word	0x20012c70
 8002078:	20012d6c 	.word	0x20012d6c

0800207c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d109      	bne.n	80020a0 <vTaskPlaceOnEventList+0x24>
 800208c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002090:	f383 8811 	msr	BASEPRI, r3
 8002094:	f3bf 8f6f 	isb	sy
 8002098:	f3bf 8f4f 	dsb	sy
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	e7fe      	b.n	800209e <vTaskPlaceOnEventList+0x22>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <vTaskPlaceOnEventList+0x44>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	3318      	adds	r3, #24
 80020a6:	4619      	mov	r1, r3
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7fe fbbc 	bl	8000826 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80020ae:	2101      	movs	r1, #1
 80020b0:	6838      	ldr	r0, [r7, #0]
 80020b2:	f000 fa7b 	bl	80025ac <prvAddCurrentTaskToDelayedList>
}
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20012c70 	.word	0x20012c70

080020c4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d109      	bne.n	80020ea <vTaskPlaceOnEventListRestricted+0x26>
 80020d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020da:	f383 8811 	msr	BASEPRI, r3
 80020de:	f3bf 8f6f 	isb	sy
 80020e2:	f3bf 8f4f 	dsb	sy
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	e7fe      	b.n	80020e8 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	4b17      	ldr	r3, [pc, #92]	; (8002150 <vTaskPlaceOnEventListRestricted+0x8c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	61da      	str	r2, [r3, #28]
 80020f8:	4b15      	ldr	r3, [pc, #84]	; (8002150 <vTaskPlaceOnEventListRestricted+0x8c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	6892      	ldr	r2, [r2, #8]
 8002100:	621a      	str	r2, [r3, #32]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	4a12      	ldr	r2, [pc, #72]	; (8002150 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002108:	6812      	ldr	r2, [r2, #0]
 800210a:	3218      	adds	r2, #24
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f103 0218 	add.w	r2, r3, #24
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	609a      	str	r2, [r3, #8]
 800211a:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <vTaskPlaceOnEventListRestricted+0x8c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	629a      	str	r2, [r3, #40]	; 0x28
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d002      	beq.n	8002138 <vTaskPlaceOnEventListRestricted+0x74>
        {
            xTicksToWait = portMAX_DELAY;
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
 8002136:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002138:	2024      	movs	r0, #36	; 0x24
 800213a:	f001 fadf 	bl	80036fc <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	68b8      	ldr	r0, [r7, #8]
 8002142:	f000 fa33 	bl	80025ac <prvAddCurrentTaskToDelayedList>
    }
 8002146:	bf00      	nop
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20012c70 	.word	0x20012c70

08002154 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	; 0x28
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d109      	bne.n	800217e <xTaskRemoveFromEventList+0x2a>
 800216a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800216e:	f383 8811 	msr	BASEPRI, r3
 8002172:	f3bf 8f6f 	isb	sy
 8002176:	f3bf 8f4f 	dsb	sy
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	e7fe      	b.n	800217c <xTaskRemoveFromEventList+0x28>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002182:	61fb      	str	r3, [r7, #28]
 8002184:	6a3b      	ldr	r3, [r7, #32]
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	6a3a      	ldr	r2, [r7, #32]
 800218a:	6a12      	ldr	r2, [r2, #32]
 800218c:	609a      	str	r2, [r3, #8]
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	6a3a      	ldr	r2, [r7, #32]
 8002194:	69d2      	ldr	r2, [r2, #28]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	3318      	adds	r3, #24
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d103      	bne.n	80021ac <xTaskRemoveFromEventList+0x58>
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	6a1a      	ldr	r2, [r3, #32]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	6a3b      	ldr	r3, [r7, #32]
 80021ae:	2200      	movs	r2, #0
 80021b0:	629a      	str	r2, [r3, #40]	; 0x28
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	1e5a      	subs	r2, r3, #1
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021bc:	4b4b      	ldr	r3, [pc, #300]	; (80022ec <xTaskRemoveFromEventList+0x198>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d162      	bne.n	800228a <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	61bb      	str	r3, [r7, #24]
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	6a3a      	ldr	r2, [r7, #32]
 80021d0:	68d2      	ldr	r2, [r2, #12]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	6a3a      	ldr	r2, [r7, #32]
 80021da:	6892      	ldr	r2, [r2, #8]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	3304      	adds	r3, #4
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d103      	bne.n	80021f2 <xTaskRemoveFromEventList+0x9e>
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	2200      	movs	r2, #0
 80021f6:	615a      	str	r2, [r3, #20]
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	1e5a      	subs	r2, r3, #1
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	4618      	mov	r0, r3
 8002206:	f001 ff9f 	bl	8004148 <SEGGER_SYSVIEW_OnTaskStartReady>
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220e:	2201      	movs	r2, #1
 8002210:	409a      	lsls	r2, r3
 8002212:	4b37      	ldr	r3, [pc, #220]	; (80022f0 <xTaskRemoveFromEventList+0x19c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4313      	orrs	r3, r2
 8002218:	4a35      	ldr	r2, [pc, #212]	; (80022f0 <xTaskRemoveFromEventList+0x19c>)
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	6a3b      	ldr	r3, [r7, #32]
 800221e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002220:	4934      	ldr	r1, [pc, #208]	; (80022f4 <xTaskRemoveFromEventList+0x1a0>)
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	3304      	adds	r3, #4
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	60da      	str	r2, [r3, #12]
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	6a3a      	ldr	r2, [r7, #32]
 8002246:	3204      	adds	r2, #4
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	1d1a      	adds	r2, r3, #4
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	609a      	str	r2, [r3, #8]
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4a25      	ldr	r2, [pc, #148]	; (80022f4 <xTaskRemoveFromEventList+0x1a0>)
 8002260:	441a      	add	r2, r3
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	615a      	str	r2, [r3, #20]
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800226a:	4922      	ldr	r1, [pc, #136]	; (80022f4 <xTaskRemoveFromEventList+0x1a0>)
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	1c59      	adds	r1, r3, #1
 800227a:	481e      	ldr	r0, [pc, #120]	; (80022f4 <xTaskRemoveFromEventList+0x1a0>)
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4403      	add	r3, r0
 8002286:	6019      	str	r1, [r3, #0]
 8002288:	e01b      	b.n	80022c2 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800228a:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <xTaskRemoveFromEventList+0x1a4>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	61da      	str	r2, [r3, #28]
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	621a      	str	r2, [r3, #32]
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	6a3a      	ldr	r2, [r7, #32]
 80022a4:	3218      	adds	r2, #24
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	f103 0218 	add.w	r2, r3, #24
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	609a      	str	r2, [r3, #8]
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	4a10      	ldr	r2, [pc, #64]	; (80022f8 <xTaskRemoveFromEventList+0x1a4>)
 80022b6:	629a      	str	r2, [r3, #40]	; 0x28
 80022b8:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <xTaskRemoveFromEventList+0x1a4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	3301      	adds	r3, #1
 80022be:	4a0e      	ldr	r2, [pc, #56]	; (80022f8 <xTaskRemoveFromEventList+0x1a4>)
 80022c0:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c6:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <xTaskRemoveFromEventList+0x1a8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d905      	bls.n	80022dc <xTaskRemoveFromEventList+0x188>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80022d0:	2301      	movs	r3, #1
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80022d4:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <xTaskRemoveFromEventList+0x1ac>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	e001      	b.n	80022e0 <xTaskRemoveFromEventList+0x18c>
    }
    else
    {
        xReturn = pdFALSE;
 80022dc:	2300      	movs	r3, #0
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3728      	adds	r7, #40	; 0x28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20012d70 	.word	0x20012d70
 80022f0:	20012d50 	.word	0x20012d50
 80022f4:	20012c74 	.word	0x20012c74
 80022f8:	20012d08 	.word	0x20012d08
 80022fc:	20012c70 	.word	0x20012c70
 8002300:	20012d5c 	.word	0x20012d5c

08002304 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <vTaskInternalSetTimeOutState+0x24>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002314:	4b05      	ldr	r3, [pc, #20]	; (800232c <vTaskInternalSetTimeOutState+0x28>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	605a      	str	r2, [r3, #4]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	20012d60 	.word	0x20012d60
 800232c:	20012d4c 	.word	0x20012d4c

08002330 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d109      	bne.n	8002354 <xTaskCheckForTimeOut+0x24>
 8002340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002344:	f383 8811 	msr	BASEPRI, r3
 8002348:	f3bf 8f6f 	isb	sy
 800234c:	f3bf 8f4f 	dsb	sy
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	e7fe      	b.n	8002352 <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d109      	bne.n	800236e <xTaskCheckForTimeOut+0x3e>
 800235a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800235e:	f383 8811 	msr	BASEPRI, r3
 8002362:	f3bf 8f6f 	isb	sy
 8002366:	f3bf 8f4f 	dsb	sy
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	e7fe      	b.n	800236c <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 800236e:	f7fe fbe7 	bl	8000b40 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002372:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <xTaskCheckForTimeOut+0xc0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238a:	d102      	bne.n	8002392 <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800238c:	2300      	movs	r3, #0
 800238e:	61fb      	str	r3, [r7, #28]
 8002390:	e026      	b.n	80023e0 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <xTaskCheckForTimeOut+0xc4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d00a      	beq.n	80023b4 <xTaskCheckForTimeOut+0x84>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d805      	bhi.n	80023b4 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80023a8:	2301      	movs	r3, #1
 80023aa:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	e015      	b.n	80023e0 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d90b      	bls.n	80023d6 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	1ad2      	subs	r2, r2, r3
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff ff9a 	bl	8002304 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
 80023d4:	e004      	b.n	80023e0 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80023dc:	2301      	movs	r3, #1
 80023de:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80023e0:	f7fe fbdc 	bl	8000b9c <vPortExitCritical>

    return xReturn;
 80023e4:	69fb      	ldr	r3, [r7, #28]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3720      	adds	r7, #32
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20012d4c 	.word	0x20012d4c
 80023f4:	20012d60 	.word	0x20012d60

080023f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80023fc:	4b03      	ldr	r3, [pc, #12]	; (800240c <vTaskMissedYield+0x14>)
 80023fe:	2201      	movs	r2, #1
 8002400:	601a      	str	r2, [r3, #0]
}
 8002402:	bf00      	nop
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	20012d5c 	.word	0x20012d5c

08002410 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002418:	f000 f852 	bl	80024c0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <prvIdleTask+0x28>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d9f9      	bls.n	8002418 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002424:	4b05      	ldr	r3, [pc, #20]	; (800243c <prvIdleTask+0x2c>)
 8002426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	f3bf 8f4f 	dsb	sy
 8002430:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002434:	e7f0      	b.n	8002418 <prvIdleTask+0x8>
 8002436:	bf00      	nop
 8002438:	20012c74 	.word	0x20012c74
 800243c:	e000ed04 	.word	0xe000ed04

08002440 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002446:	2300      	movs	r3, #0
 8002448:	607b      	str	r3, [r7, #4]
 800244a:	e00c      	b.n	8002466 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4a12      	ldr	r2, [pc, #72]	; (80024a0 <prvInitialiseTaskLists+0x60>)
 8002458:	4413      	add	r3, r2
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe f9b6 	bl	80007cc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3301      	adds	r3, #1
 8002464:	607b      	str	r3, [r7, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b04      	cmp	r3, #4
 800246a:	d9ef      	bls.n	800244c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800246c:	480d      	ldr	r0, [pc, #52]	; (80024a4 <prvInitialiseTaskLists+0x64>)
 800246e:	f7fe f9ad 	bl	80007cc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002472:	480d      	ldr	r0, [pc, #52]	; (80024a8 <prvInitialiseTaskLists+0x68>)
 8002474:	f7fe f9aa 	bl	80007cc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002478:	480c      	ldr	r0, [pc, #48]	; (80024ac <prvInitialiseTaskLists+0x6c>)
 800247a:	f7fe f9a7 	bl	80007cc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800247e:	480c      	ldr	r0, [pc, #48]	; (80024b0 <prvInitialiseTaskLists+0x70>)
 8002480:	f7fe f9a4 	bl	80007cc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002484:	480b      	ldr	r0, [pc, #44]	; (80024b4 <prvInitialiseTaskLists+0x74>)
 8002486:	f7fe f9a1 	bl	80007cc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800248a:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <prvInitialiseTaskLists+0x78>)
 800248c:	4a05      	ldr	r2, [pc, #20]	; (80024a4 <prvInitialiseTaskLists+0x64>)
 800248e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002490:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <prvInitialiseTaskLists+0x7c>)
 8002492:	4a05      	ldr	r2, [pc, #20]	; (80024a8 <prvInitialiseTaskLists+0x68>)
 8002494:	601a      	str	r2, [r3, #0]
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20012c74 	.word	0x20012c74
 80024a4:	20012cd8 	.word	0x20012cd8
 80024a8:	20012cec 	.word	0x20012cec
 80024ac:	20012d08 	.word	0x20012d08
 80024b0:	20012d1c 	.word	0x20012d1c
 80024b4:	20012d34 	.word	0x20012d34
 80024b8:	20012d00 	.word	0x20012d00
 80024bc:	20012d04 	.word	0x20012d04

080024c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80024c6:	e019      	b.n	80024fc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80024c8:	f7fe fb3a 	bl	8000b40 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <prvCheckTasksWaitingTermination+0x4c>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3304      	adds	r3, #4
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe f9dd 	bl	8000898 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80024de:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <prvCheckTasksWaitingTermination+0x50>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <prvCheckTasksWaitingTermination+0x50>)
 80024e6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80024e8:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <prvCheckTasksWaitingTermination+0x54>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	3b01      	subs	r3, #1
 80024ee:	4a09      	ldr	r2, [pc, #36]	; (8002514 <prvCheckTasksWaitingTermination+0x54>)
 80024f0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80024f2:	f7fe fb53 	bl	8000b9c <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f80e 	bl	8002518 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <prvCheckTasksWaitingTermination+0x54>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1e1      	bne.n	80024c8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002504:	bf00      	nop
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20012d1c 	.word	0x20012d1c
 8002510:	20012d48 	.word	0x20012d48
 8002514:	20012d30 	.word	0x20012d30

08002518 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe fcdd 	bl	8000ee4 <vPortFree>
            vPortFree( pxTCB );
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7fe fcda 	bl	8000ee4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800253c:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <prvResetNextTaskUnblockTime+0x30>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d104      	bne.n	8002550 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <prvResetNextTaskUnblockTime+0x34>)
 8002548:	f04f 32ff 	mov.w	r2, #4294967295
 800254c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800254e:	e005      	b.n	800255c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <prvResetNextTaskUnblockTime+0x30>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a04      	ldr	r2, [pc, #16]	; (800256c <prvResetNextTaskUnblockTime+0x34>)
 800255a:	6013      	str	r3, [r2, #0]
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20012d00 	.word	0x20012d00
 800256c:	20012d68 	.word	0x20012d68

08002570 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002576:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <xTaskGetSchedulerState+0x34>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d102      	bne.n	8002584 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800257e:	2301      	movs	r3, #1
 8002580:	607b      	str	r3, [r7, #4]
 8002582:	e008      	b.n	8002596 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002584:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <xTaskGetSchedulerState+0x38>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d102      	bne.n	8002592 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800258c:	2302      	movs	r3, #2
 800258e:	607b      	str	r3, [r7, #4]
 8002590:	e001      	b.n	8002596 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002592:	2300      	movs	r3, #0
 8002594:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002596:	687b      	ldr	r3, [r7, #4]
    }
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	20012d54 	.word	0x20012d54
 80025a8:	20012d70 	.word	0x20012d70

080025ac <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80025b6:	4b36      	ldr	r3, [pc, #216]	; (8002690 <prvAddCurrentTaskToDelayedList+0xe4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025bc:	4b35      	ldr	r3, [pc, #212]	; (8002694 <prvAddCurrentTaskToDelayedList+0xe8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	3304      	adds	r3, #4
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe f968 	bl	8000898 <uxListRemove>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10b      	bne.n	80025e6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80025ce:	4b31      	ldr	r3, [pc, #196]	; (8002694 <prvAddCurrentTaskToDelayedList+0xe8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d4:	2201      	movs	r2, #1
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43da      	mvns	r2, r3
 80025dc:	4b2e      	ldr	r3, [pc, #184]	; (8002698 <prvAddCurrentTaskToDelayedList+0xec>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4013      	ands	r3, r2
 80025e2:	4a2d      	ldr	r2, [pc, #180]	; (8002698 <prvAddCurrentTaskToDelayedList+0xec>)
 80025e4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ec:	d124      	bne.n	8002638 <prvAddCurrentTaskToDelayedList+0x8c>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d021      	beq.n	8002638 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80025f4:	4b29      	ldr	r3, [pc, #164]	; (800269c <prvAddCurrentTaskToDelayedList+0xf0>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	4b26      	ldr	r3, [pc, #152]	; (8002694 <prvAddCurrentTaskToDelayedList+0xe8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	609a      	str	r2, [r3, #8]
 8002602:	4b24      	ldr	r3, [pc, #144]	; (8002694 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	6892      	ldr	r2, [r2, #8]
 800260a:	60da      	str	r2, [r3, #12]
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	4a20      	ldr	r2, [pc, #128]	; (8002694 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	3204      	adds	r2, #4
 8002616:	605a      	str	r2, [r3, #4]
 8002618:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <prvAddCurrentTaskToDelayedList+0xe8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	1d1a      	adds	r2, r3, #4
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	609a      	str	r2, [r3, #8]
 8002622:	4b1c      	ldr	r3, [pc, #112]	; (8002694 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a1d      	ldr	r2, [pc, #116]	; (800269c <prvAddCurrentTaskToDelayedList+0xf0>)
 8002628:	615a      	str	r2, [r3, #20]
 800262a:	4b1c      	ldr	r3, [pc, #112]	; (800269c <prvAddCurrentTaskToDelayedList+0xf0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	3301      	adds	r3, #1
 8002630:	4a1a      	ldr	r2, [pc, #104]	; (800269c <prvAddCurrentTaskToDelayedList+0xf0>)
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002636:	e026      	b.n	8002686 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002640:	4b14      	ldr	r3, [pc, #80]	; (8002694 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	429a      	cmp	r2, r3
 800264e:	d209      	bcs.n	8002664 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002650:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	3304      	adds	r3, #4
 800265a:	4619      	mov	r1, r3
 800265c:	4610      	mov	r0, r2
 800265e:	f7fe f8e2 	bl	8000826 <vListInsert>
}
 8002662:	e010      	b.n	8002686 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002664:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <prvAddCurrentTaskToDelayedList+0xe8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	3304      	adds	r3, #4
 800266e:	4619      	mov	r1, r3
 8002670:	4610      	mov	r0, r2
 8002672:	f7fe f8d8 	bl	8000826 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	429a      	cmp	r2, r3
 800267e:	d202      	bcs.n	8002686 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8002680:	4a09      	ldr	r2, [pc, #36]	; (80026a8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6013      	str	r3, [r2, #0]
}
 8002686:	bf00      	nop
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20012d4c 	.word	0x20012d4c
 8002694:	20012c70 	.word	0x20012c70
 8002698:	20012d50 	.word	0x20012d50
 800269c:	20012d34 	.word	0x20012d34
 80026a0:	20012d04 	.word	0x20012d04
 80026a4:	20012d00 	.word	0x20012d00
 80026a8:	20012d68 	.word	0x20012d68

080026ac <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80026b6:	f000 fa43 	bl	8002b40 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80026ba:	4b11      	ldr	r3, [pc, #68]	; (8002700 <xTimerCreateTimerTask+0x54>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00b      	beq.n	80026da <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80026c2:	4b10      	ldr	r3, [pc, #64]	; (8002704 <xTimerCreateTimerTask+0x58>)
 80026c4:	9301      	str	r3, [sp, #4]
 80026c6:	2302      	movs	r3, #2
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	2300      	movs	r3, #0
 80026cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026d0:	490d      	ldr	r1, [pc, #52]	; (8002708 <xTimerCreateTimerTask+0x5c>)
 80026d2:	480e      	ldr	r0, [pc, #56]	; (800270c <xTimerCreateTimerTask+0x60>)
 80026d4:	f7ff f83c 	bl	8001750 <xTaskCreate>
 80026d8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d109      	bne.n	80026f4 <xTimerCreateTimerTask+0x48>
 80026e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e4:	f383 8811 	msr	BASEPRI, r3
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	603b      	str	r3, [r7, #0]
 80026f2:	e7fe      	b.n	80026f2 <xTimerCreateTimerTask+0x46>
        return xReturn;
 80026f4:	687b      	ldr	r3, [r7, #4]
    }
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20012da4 	.word	0x20012da4
 8002704:	20012da8 	.word	0x20012da8
 8002708:	08004a2c 	.word	0x08004a2c
 800270c:	080027b1 	.word	0x080027b1

08002710 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800271c:	e008      	b.n	8002730 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	4413      	add	r3, r2
 8002726:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	699a      	ldr	r2, [r3, #24]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	18d1      	adds	r1, r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 f8db 	bl	80028f8 <prvInsertTimerInActiveList>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1ea      	bne.n	800271e <prvReloadTimer+0xe>
        }
    }
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800275a:	4b14      	ldr	r3, [pc, #80]	; (80027ac <prvProcessExpiredTimer+0x5c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	3304      	adds	r3, #4
 8002768:	4618      	mov	r0, r3
 800276a:	f7fe f895 	bl	8000898 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f7ff ffc5 	bl	8002710 <prvReloadTimer>
 8002786:	e008      	b.n	800279a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800278e:	f023 0301 	bic.w	r3, r3, #1
 8002792:	b2da      	uxtb	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	4798      	blx	r3
    }
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20012d9c 	.word	0x20012d9c

080027b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80027b8:	f107 0308 	add.w	r3, r7, #8
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 f857 	bl	8002870 <prvGetNextExpireTime>
 80027c2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4619      	mov	r1, r3
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 f803 	bl	80027d4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80027ce:	f000 f8d5 	bl	800297c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80027d2:	e7f1      	b.n	80027b8 <prvTimerTask+0x8>

080027d4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80027de:	f7ff f99d 	bl	8001b1c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80027e2:	f107 0308 	add.w	r3, r7, #8
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f866 	bl	80028b8 <prvSampleTimeNow>
 80027ec:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d130      	bne.n	8002856 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10a      	bne.n	8002810 <prvProcessTimerOrBlockTask+0x3c>
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d806      	bhi.n	8002810 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002802:	f7ff f999 	bl	8001b38 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002806:	68f9      	ldr	r1, [r7, #12]
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff ffa1 	bl	8002750 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800280e:	e024      	b.n	800285a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d008      	beq.n	8002828 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002816:	4b13      	ldr	r3, [pc, #76]	; (8002864 <prvProcessTimerOrBlockTask+0x90>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <prvProcessTimerOrBlockTask+0x50>
 8002820:	2301      	movs	r3, #1
 8002822:	e000      	b.n	8002826 <prvProcessTimerOrBlockTask+0x52>
 8002824:	2300      	movs	r3, #0
 8002826:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002828:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <prvProcessTimerOrBlockTask+0x94>)
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	4619      	mov	r1, r3
 8002836:	f7fe ff57 	bl	80016e8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800283a:	f7ff f97d 	bl	8001b38 <xTaskResumeAll>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10a      	bne.n	800285a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <prvProcessTimerOrBlockTask+0x98>)
 8002846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	f3bf 8f4f 	dsb	sy
 8002850:	f3bf 8f6f 	isb	sy
    }
 8002854:	e001      	b.n	800285a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002856:	f7ff f96f 	bl	8001b38 <xTaskResumeAll>
    }
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20012da0 	.word	0x20012da0
 8002868:	20012da4 	.word	0x20012da4
 800286c:	e000ed04 	.word	0xe000ed04

08002870 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002878:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <prvGetNextExpireTime+0x44>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <prvGetNextExpireTime+0x16>
 8002882:	2201      	movs	r2, #1
 8002884:	e000      	b.n	8002888 <prvGetNextExpireTime+0x18>
 8002886:	2200      	movs	r2, #0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d105      	bne.n	80028a0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002894:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <prvGetNextExpireTime+0x44>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	e001      	b.n	80028a4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80028a4:	68fb      	ldr	r3, [r7, #12]
    }
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	20012d9c 	.word	0x20012d9c

080028b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80028c0:	f7ff fa38 	bl	8001d34 <xTaskGetTickCount>
 80028c4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80028c6:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <prvSampleTimeNow+0x3c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d205      	bcs.n	80028dc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80028d0:	f000 f910 	bl	8002af4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	e002      	b.n	80028e2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80028e2:	4a04      	ldr	r2, [pc, #16]	; (80028f4 <prvSampleTimeNow+0x3c>)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80028e8:	68fb      	ldr	r3, [r7, #12]
    }
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20012dac 	.word	0x20012dac

080028f8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	429a      	cmp	r2, r3
 800291c:	d812      	bhi.n	8002944 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	1ad2      	subs	r2, r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	429a      	cmp	r2, r3
 800292a:	d302      	bcc.n	8002932 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800292c:	2301      	movs	r3, #1
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	e01b      	b.n	800296a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002932:	4b10      	ldr	r3, [pc, #64]	; (8002974 <prvInsertTimerInActiveList+0x7c>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	3304      	adds	r3, #4
 800293a:	4619      	mov	r1, r3
 800293c:	4610      	mov	r0, r2
 800293e:	f7fd ff72 	bl	8000826 <vListInsert>
 8002942:	e012      	b.n	800296a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d206      	bcs.n	800295a <prvInsertTimerInActiveList+0x62>
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d302      	bcc.n	800295a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002954:	2301      	movs	r3, #1
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	e007      	b.n	800296a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800295a:	4b07      	ldr	r3, [pc, #28]	; (8002978 <prvInsertTimerInActiveList+0x80>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	3304      	adds	r3, #4
 8002962:	4619      	mov	r1, r3
 8002964:	4610      	mov	r0, r2
 8002966:	f7fd ff5e 	bl	8000826 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800296a:	697b      	ldr	r3, [r7, #20]
    }
 800296c:	4618      	mov	r0, r3
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	20012da0 	.word	0x20012da0
 8002978:	20012d9c 	.word	0x20012d9c

0800297c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002982:	e0a5      	b.n	8002ad0 <prvProcessReceivedCommands+0x154>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	f2c0 80a2 	blt.w	8002ad0 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d004      	beq.n	80029a2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	3304      	adds	r3, #4
 800299c:	4618      	mov	r0, r3
 800299e:	f7fd ff7b 	bl	8000898 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80029a2:	1d3b      	adds	r3, r7, #4
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ff87 	bl	80028b8 <prvSampleTimeNow>
 80029aa:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	f200 808c 	bhi.w	8002ace <prvProcessReceivedCommands+0x152>
 80029b6:	a201      	add	r2, pc, #4	; (adr r2, 80029bc <prvProcessReceivedCommands+0x40>)
 80029b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029bc:	080029e1 	.word	0x080029e1
 80029c0:	080029e1 	.word	0x080029e1
 80029c4:	08002a49 	.word	0x08002a49
 80029c8:	08002a5d 	.word	0x08002a5d
 80029cc:	08002aa5 	.word	0x08002aa5
 80029d0:	080029e1 	.word	0x080029e1
 80029d4:	080029e1 	.word	0x080029e1
 80029d8:	08002a49 	.word	0x08002a49
 80029dc:	08002a5d 	.word	0x08002a5d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	18d1      	adds	r1, r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	69f8      	ldr	r0, [r7, #28]
 8002a00:	f7ff ff7a 	bl	80028f8 <prvInsertTimerInActiveList>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d062      	beq.n	8002ad0 <prvProcessReceivedCommands+0x154>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d009      	beq.n	8002a2c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	4413      	add	r3, r2
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4619      	mov	r1, r3
 8002a24:	69f8      	ldr	r0, [r7, #28]
 8002a26:	f7ff fe73 	bl	8002710 <prvReloadTimer>
 8002a2a:	e008      	b.n	8002a3e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a32:	f023 0301 	bic.w	r3, r3, #1
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	69f8      	ldr	r0, [r7, #28]
 8002a44:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002a46:	e043      	b.n	8002ad0 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a4e:	f023 0301 	bic.w	r3, r3, #1
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002a5a:	e039      	b.n	8002ad0 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d109      	bne.n	8002a90 <prvProcessReceivedCommands+0x114>
 8002a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a80:	f383 8811 	msr	BASEPRI, r3
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	e7fe      	b.n	8002a8e <prvProcessReceivedCommands+0x112>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	699a      	ldr	r2, [r3, #24]
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	18d1      	adds	r1, r2, r3
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	69f8      	ldr	r0, [r7, #28]
 8002a9e:	f7ff ff2b 	bl	80028f8 <prvInsertTimerInActiveList>
                        break;
 8002aa2:	e015      	b.n	8002ad0 <prvProcessReceivedCommands+0x154>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d103      	bne.n	8002aba <prvProcessReceivedCommands+0x13e>
                            {
                                vPortFree( pxTimer );
 8002ab2:	69f8      	ldr	r0, [r7, #28]
 8002ab4:	f7fe fa16 	bl	8000ee4 <vPortFree>
 8002ab8:	e00a      	b.n	8002ad0 <prvProcessReceivedCommands+0x154>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ac0:	f023 0301 	bic.w	r3, r3, #1
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002acc:	e000      	b.n	8002ad0 <prvProcessReceivedCommands+0x154>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002ace:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002ad0:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <prvProcessReceivedCommands+0x174>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f107 0108 	add.w	r1, r7, #8
 8002ad8:	2200      	movs	r2, #0
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe fc0c 	bl	80012f8 <xQueueReceive>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f47f af4e 	bne.w	8002984 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002ae8:	bf00      	nop
 8002aea:	3720      	adds	r7, #32
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20012da4 	.word	0x20012da4

08002af4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002afa:	e009      	b.n	8002b10 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002afc:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <prvSwitchTimerLists+0x44>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	607b      	str	r3, [r7, #4]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002b06:	f04f 31ff 	mov.w	r1, #4294967295
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff fe20 	bl	8002750 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002b10:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <prvSwitchTimerLists+0x44>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f0      	bne.n	8002afc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002b1a:	4b07      	ldr	r3, [pc, #28]	; (8002b38 <prvSwitchTimerLists+0x44>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	603b      	str	r3, [r7, #0]
        pxCurrentTimerList = pxOverflowTimerList;
 8002b20:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <prvSwitchTimerLists+0x48>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a04      	ldr	r2, [pc, #16]	; (8002b38 <prvSwitchTimerLists+0x44>)
 8002b26:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002b28:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <prvSwitchTimerLists+0x48>)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	6013      	str	r3, [r2, #0]
    }
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20012d9c 	.word	0x20012d9c
 8002b3c:	20012da0 	.word	0x20012da0

08002b40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002b44:	f7fd fffc 	bl	8000b40 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002b48:	4b12      	ldr	r3, [pc, #72]	; (8002b94 <prvCheckForValidListAndQueue+0x54>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d11d      	bne.n	8002b8c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002b50:	4811      	ldr	r0, [pc, #68]	; (8002b98 <prvCheckForValidListAndQueue+0x58>)
 8002b52:	f7fd fe3b 	bl	80007cc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002b56:	4811      	ldr	r0, [pc, #68]	; (8002b9c <prvCheckForValidListAndQueue+0x5c>)
 8002b58:	f7fd fe38 	bl	80007cc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002b5c:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <prvCheckForValidListAndQueue+0x60>)
 8002b5e:	4a0e      	ldr	r2, [pc, #56]	; (8002b98 <prvCheckForValidListAndQueue+0x58>)
 8002b60:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002b62:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <prvCheckForValidListAndQueue+0x64>)
 8002b64:	4a0d      	ldr	r2, [pc, #52]	; (8002b9c <prvCheckForValidListAndQueue+0x5c>)
 8002b66:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002b68:	2200      	movs	r2, #0
 8002b6a:	210c      	movs	r1, #12
 8002b6c:	200a      	movs	r0, #10
 8002b6e:	f7fe fb4f 	bl	8001210 <xQueueGenericCreate>
 8002b72:	4602      	mov	r2, r0
 8002b74:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <prvCheckForValidListAndQueue+0x54>)
 8002b76:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <prvCheckForValidListAndQueue+0x54>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002b80:	4b04      	ldr	r3, [pc, #16]	; (8002b94 <prvCheckForValidListAndQueue+0x54>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4908      	ldr	r1, [pc, #32]	; (8002ba8 <prvCheckForValidListAndQueue+0x68>)
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe fd58 	bl	800163c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002b8c:	f7fe f806 	bl	8000b9c <vPortExitCritical>
    }
 8002b90:	bf00      	nop
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20012da4 	.word	0x20012da4
 8002b98:	20012d74 	.word	0x20012d74
 8002b9c:	20012d88 	.word	0x20012d88
 8002ba0:	20012d9c 	.word	0x20012d9c
 8002ba4:	20012da0 	.word	0x20012da0
 8002ba8:	08004a34 	.word	0x08004a34

08002bac <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8002bb0:	4803      	ldr	r0, [pc, #12]	; (8002bc0 <_cbSendSystemDesc+0x14>)
 8002bb2:	f001 f9d5 	bl	8003f60 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002bb6:	4803      	ldr	r0, [pc, #12]	; (8002bc4 <_cbSendSystemDesc+0x18>)
 8002bb8:	f001 f9d2 	bl	8003f60 <SEGGER_SYSVIEW_SendSysDesc>
}
 8002bbc:	bf00      	nop
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	08004a3c 	.word	0x08004a3c
 8002bc4:	08004a88 	.word	0x08004a88

08002bc8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002bcc:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <SEGGER_SYSVIEW_Conf+0x20>)
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <SEGGER_SYSVIEW_Conf+0x20>)
 8002bd2:	6819      	ldr	r1, [r3, #0]
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <SEGGER_SYSVIEW_Conf+0x24>)
 8002bd6:	4a06      	ldr	r2, [pc, #24]	; (8002bf0 <SEGGER_SYSVIEW_Conf+0x28>)
 8002bd8:	f000 fd42 	bl	8003660 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002bdc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002be0:	f000 fd7c 	bl	80036dc <SEGGER_SYSVIEW_SetRAMBase>
}
 8002be4:	bf00      	nop
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	2000001c 	.word	0x2000001c
 8002bec:	08002bad 	.word	0x08002bad
 8002bf0:	08004b50 	.word	0x08004b50

08002bf4 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	607b      	str	r3, [r7, #4]
 8002bfe:	e034      	b.n	8002c6a <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002c00:	491e      	ldr	r1, [pc, #120]	; (8002c7c <_cbSendTaskList+0x88>)
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	6818      	ldr	r0, [r3, #0]
 8002c10:	491a      	ldr	r1, [pc, #104]	; (8002c7c <_cbSendTaskList+0x88>)
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	3304      	adds	r3, #4
 8002c20:	681c      	ldr	r4, [r3, #0]
 8002c22:	4916      	ldr	r1, [pc, #88]	; (8002c7c <_cbSendTaskList+0x88>)
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	440b      	add	r3, r1
 8002c30:	3308      	adds	r3, #8
 8002c32:	681d      	ldr	r5, [r3, #0]
 8002c34:	4911      	ldr	r1, [pc, #68]	; (8002c7c <_cbSendTaskList+0x88>)
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	330c      	adds	r3, #12
 8002c44:	681e      	ldr	r6, [r3, #0]
 8002c46:	490d      	ldr	r1, [pc, #52]	; (8002c7c <_cbSendTaskList+0x88>)
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	3310      	adds	r3, #16
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	4633      	mov	r3, r6
 8002c5c:	462a      	mov	r2, r5
 8002c5e:	4621      	mov	r1, r4
 8002c60:	f000 f8ae 	bl	8002dc0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3301      	adds	r3, #1
 8002c68:	607b      	str	r3, [r7, #4]
 8002c6a:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <_cbSendTaskList+0x8c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d3c5      	bcc.n	8002c00 <_cbSendTaskList+0xc>
  }
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c7c:	20012db0 	.word	0x20012db0
 8002c80:	20012e50 	.word	0x20012e50

08002c84 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002c8c:	f7ff f862 	bl	8001d54 <xTaskGetTickCountFromISR>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f04f 0400 	mov.w	r4, #0
 8002c96:	e887 0018 	stmia.w	r7, {r3, r4}
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002c9a:	e897 0006 	ldmia.w	r7, {r1, r2}
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4614      	mov	r4, r2
 8002ca2:	ea4f 1b44 	mov.w	fp, r4, lsl #5
 8002ca6:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
 8002caa:	ea4f 1a43 	mov.w	sl, r3, lsl #5
 8002cae:	4653      	mov	r3, sl
 8002cb0:	465c      	mov	r4, fp
 8002cb2:	1a5b      	subs	r3, r3, r1
 8002cb4:	eb64 0402 	sbc.w	r4, r4, r2
 8002cb8:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8002cbc:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
 8002cc0:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8002cc4:	4643      	mov	r3, r8
 8002cc6:	464c      	mov	r4, r9
 8002cc8:	185b      	adds	r3, r3, r1
 8002cca:	eb44 0402 	adc.w	r4, r4, r2
 8002cce:	00e6      	lsls	r6, r4, #3
 8002cd0:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8002cd4:	00dd      	lsls	r5, r3, #3
 8002cd6:	462b      	mov	r3, r5
 8002cd8:	4634      	mov	r4, r6
 8002cda:	e887 0018 	stmia.w	r7, {r3, r4}
  return Time;
 8002cde:	e897 0018 	ldmia.w	r7, {r3, r4}
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	4621      	mov	r1, r4
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002cf0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002cfe:	2205      	movs	r2, #5
 8002d00:	492b      	ldr	r1, [pc, #172]	; (8002db0 <SYSVIEW_AddTask+0xc0>)
 8002d02:	68b8      	ldr	r0, [r7, #8]
 8002d04:	f001 fe60 	bl	80049c8 <memcmp>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d04b      	beq.n	8002da6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002d0e:	4b29      	ldr	r3, [pc, #164]	; (8002db4 <SYSVIEW_AddTask+0xc4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b07      	cmp	r3, #7
 8002d14:	d903      	bls.n	8002d1e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002d16:	4828      	ldr	r0, [pc, #160]	; (8002db8 <SYSVIEW_AddTask+0xc8>)
 8002d18:	f001 fb48 	bl	80043ac <SEGGER_SYSVIEW_Warn>
    return;
 8002d1c:	e044      	b.n	8002da8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002d1e:	4b25      	ldr	r3, [pc, #148]	; (8002db4 <SYSVIEW_AddTask+0xc4>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	4926      	ldr	r1, [pc, #152]	; (8002dbc <SYSVIEW_AddTask+0xcc>)
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002d32:	4b20      	ldr	r3, [pc, #128]	; (8002db4 <SYSVIEW_AddTask+0xc4>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	4921      	ldr	r1, [pc, #132]	; (8002dbc <SYSVIEW_AddTask+0xcc>)
 8002d38:	4613      	mov	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	3304      	adds	r3, #4
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002d48:	4b1a      	ldr	r3, [pc, #104]	; (8002db4 <SYSVIEW_AddTask+0xc4>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	491b      	ldr	r1, [pc, #108]	; (8002dbc <SYSVIEW_AddTask+0xcc>)
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	3308      	adds	r3, #8
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002d5e:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <SYSVIEW_AddTask+0xc4>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	4916      	ldr	r1, [pc, #88]	; (8002dbc <SYSVIEW_AddTask+0xcc>)
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	330c      	adds	r3, #12
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002d74:	4b0f      	ldr	r3, [pc, #60]	; (8002db4 <SYSVIEW_AddTask+0xc4>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4910      	ldr	r1, [pc, #64]	; (8002dbc <SYSVIEW_AddTask+0xcc>)
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	3310      	adds	r3, #16
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002d8a:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <SYSVIEW_AddTask+0xc4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	4a08      	ldr	r2, [pc, #32]	; (8002db4 <SYSVIEW_AddTask+0xc4>)
 8002d92:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	68b9      	ldr	r1, [r7, #8]
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 f80e 	bl	8002dc0 <SYSVIEW_SendTaskInfo>
 8002da4:	e000      	b.n	8002da8 <SYSVIEW_AddTask+0xb8>
    return;
 8002da6:	bf00      	nop

}
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	08004a98 	.word	0x08004a98
 8002db4:	20012e50 	.word	0x20012e50
 8002db8:	08004aa0 	.word	0x08004aa0
 8002dbc:	20012db0 	.word	0x20012db0

08002dc0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08a      	sub	sp, #40	; 0x28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002dce:	f107 0314 	add.w	r3, r7, #20
 8002dd2:	2214      	movs	r2, #20
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f001 fe10 	bl	80049fc <memset>
  TaskInfo.TaskID     = TaskID;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002df0:	f107 0314 	add.w	r3, r7, #20
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 ffb9 	bl	8003d6c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002dfa:	bf00      	nop
 8002dfc:	3728      	adds	r7, #40	; 0x28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8002e0a:	4b21      	ldr	r3, [pc, #132]	; (8002e90 <_DoInit+0x8c>)
 8002e0c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2203      	movs	r2, #3
 8002e12:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2203      	movs	r2, #3
 8002e18:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a1d      	ldr	r2, [pc, #116]	; (8002e94 <_DoInit+0x90>)
 8002e1e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a1d      	ldr	r2, [pc, #116]	; (8002e98 <_DoInit+0x94>)
 8002e24:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e2c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a14      	ldr	r2, [pc, #80]	; (8002e94 <_DoInit+0x90>)
 8002e44:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a14      	ldr	r2, [pc, #80]	; (8002e9c <_DoInit+0x98>)
 8002e4a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2210      	movs	r2, #16
 8002e50:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3307      	adds	r3, #7
 8002e68:	4a0d      	ldr	r2, [pc, #52]	; (8002ea0 <_DoInit+0x9c>)
 8002e6a:	6810      	ldr	r0, [r2, #0]
 8002e6c:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a0c      	ldr	r2, [pc, #48]	; (8002ea4 <_DoInit+0xa0>)
 8002e72:	6810      	ldr	r0, [r2, #0]
 8002e74:	6018      	str	r0, [r3, #0]
 8002e76:	8891      	ldrh	r1, [r2, #4]
 8002e78:	7992      	ldrb	r2, [r2, #6]
 8002e7a:	8099      	strh	r1, [r3, #4]
 8002e7c:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2220      	movs	r2, #32
 8002e82:	719a      	strb	r2, [r3, #6]
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	200153c8 	.word	0x200153c8
 8002e94:	08004af0 	.word	0x08004af0
 8002e98:	20012e54 	.word	0x20012e54
 8002e9c:	20013254 	.word	0x20013254
 8002ea0:	08004afc 	.word	0x08004afc
 8002ea4:	08004b00 	.word	0x08004b00

08002ea8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08a      	sub	sp, #40	; 0x28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8002eb4:	4b3c      	ldr	r3, [pc, #240]	; (8002fa8 <SEGGER_RTT_ReadNoLock+0x100>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <SEGGER_RTT_ReadNoLock+0x18>
 8002ebc:	f7ff ffa2 	bl	8002e04 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4413      	add	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	3360      	adds	r3, #96	; 0x60
 8002ecc:	4a36      	ldr	r2, [pc, #216]	; (8002fa8 <SEGGER_RTT_ReadNoLock+0x100>)
 8002ece:	4413      	add	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002ee6:	6a3a      	ldr	r2, [r7, #32]
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d92a      	bls.n	8002f44 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4293      	cmp	r3, r2
 8002efe:	bf28      	it	cs
 8002f00:	4613      	movcs	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4619      	mov	r1, r3
 8002f10:	69f8      	ldr	r0, [r7, #28]
 8002f12:	f001 fd68 	bl	80049e6 <memcpy>
    NumBytesRead += NumBytesRem;
 8002f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4413      	add	r3, r2
 8002f24:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002f2e:	6a3a      	ldr	r2, [r7, #32]
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4413      	add	r3, r2
 8002f34:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d101      	bne.n	8002f44 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8002f40:	2300      	movs	r3, #0
 8002f42:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4293      	cmp	r3, r2
 8002f52:	bf28      	it	cs
 8002f54:	4613      	movcs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d018      	beq.n	8002f90 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	4413      	add	r3, r2
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4619      	mov	r1, r3
 8002f6a:	69f8      	ldr	r0, [r7, #28]
 8002f6c:	f001 fd3b 	bl	80049e6 <memcpy>
    NumBytesRead += NumBytesRem;
 8002f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4413      	add	r3, r2
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8002f78:	69fa      	ldr	r2, [r7, #28]
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002f88:	6a3a      	ldr	r2, [r7, #32]
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	6a3a      	ldr	r2, [r7, #32]
 8002f9a:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3728      	adds	r7, #40	; 0x28
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	200153c8 	.word	0x200153c8

08002fac <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b08a      	sub	sp, #40	; 0x28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	4413      	add	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	4a3f      	ldr	r2, [pc, #252]	; (80030c8 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8002fca:	4413      	add	r3, r2
 8002fcc:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d854      	bhi.n	800308c <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d30f      	bcc.n	8003016 <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003002:	4618      	mov	r0, r3
 8003004:	f001 fcef 	bl	80049e6 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	441a      	add	r2, r3
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8003012:	2301      	movs	r3, #1
 8003014:	e054      	b.n	80030c0 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	4413      	add	r3, r2
 800301c:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	429a      	cmp	r2, r3
 8003024:	d34b      	bcc.n	80030be <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	429a      	cmp	r2, r3
 8003036:	d90e      	bls.n	8003056 <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	4413      	add	r3, r2
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003044:	4618      	mov	r0, r3
 8003046:	f001 fcce 	bl	80049e6 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	441a      	add	r2, r3
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	60da      	str	r2, [r3, #12]
 8003054:	e018      	b.n	8003088 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	4413      	add	r3, r2
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003062:	4618      	mov	r0, r3
 8003064:	f001 fcbf 	bl	80049e6 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	6858      	ldr	r0, [r3, #4]
 800306c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	18d1      	adds	r1, r2, r3
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	461a      	mov	r2, r3
 800307a:	f001 fcb4 	bl	80049e6 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad2      	subs	r2, r2, r3
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8003088:	2301      	movs	r3, #1
 800308a:	e019      	b.n	80030c0 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 800308c:	69fa      	ldr	r2, [r7, #28]
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	3b01      	subs	r3, #1
 8003094:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	429a      	cmp	r2, r3
 800309c:	d30f      	bcc.n	80030be <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	4413      	add	r3, r2
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030aa:	4618      	mov	r0, r3
 80030ac:	f001 fc9b 	bl	80049e6 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	441a      	add	r2, r3
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3728      	adds	r7, #40	; 0x28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	200153c8 	.word	0x200153c8

080030cc <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
 80030d8:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80030da:	4b30      	ldr	r3, [pc, #192]	; (800319c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 80030e2:	f7ff fe8f 	bl	8002e04 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 80030e6:	4b2d      	ldr	r3, [pc, #180]	; (800319c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	461a      	mov	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d94c      	bls.n	800318c <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 80030f2:	f3ef 8311 	mrs	r3, BASEPRI
 80030f6:	f04f 0120 	mov.w	r1, #32
 80030fa:	f381 8811 	msr	BASEPRI, r1
 80030fe:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d032      	beq.n	800316c <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8003106:	4925      	ldr	r1, [pc, #148]	; (800319c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	4613      	mov	r3, r2
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	4413      	add	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	440b      	add	r3, r1
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800311a:	4920      	ldr	r1, [pc, #128]	; (800319c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	4613      	mov	r3, r2
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4413      	add	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	440b      	add	r3, r1
 800312a:	3304      	adds	r3, #4
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003130:	491a      	ldr	r1, [pc, #104]	; (800319c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	4613      	mov	r3, r2
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	4413      	add	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	440b      	add	r3, r1
 800313e:	3320      	adds	r3, #32
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8003144:	4915      	ldr	r1, [pc, #84]	; (800319c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	4613      	mov	r3, r2
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	4413      	add	r3, r2
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	440b      	add	r3, r1
 8003152:	3328      	adds	r3, #40	; 0x28
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8003158:	4910      	ldr	r1, [pc, #64]	; (800319c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4613      	mov	r3, r2
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	4413      	add	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	440b      	add	r3, r1
 8003166:	3324      	adds	r3, #36	; 0x24
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 800316c:	490b      	ldr	r1, [pc, #44]	; (800319c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	4613      	mov	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4413      	add	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	440b      	add	r3, r1
 800317a:	332c      	adds	r3, #44	; 0x2c
 800317c:	6a3a      	ldr	r2, [r7, #32]
 800317e:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	e002      	b.n	8003192 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 800318c:	f04f 33ff 	mov.w	r3, #4294967295
 8003190:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003192:	697b      	ldr	r3, [r7, #20]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	200153c8 	.word	0x200153c8

080031a0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
 80031ac:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80031ae:	4b30      	ldr	r3, [pc, #192]	; (8003270 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <SEGGER_RTT_ConfigDownBuffer+0x1a>
 80031b6:	f7ff fe25 	bl	8002e04 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 80031ba:	4b2d      	ldr	r3, [pc, #180]	; (8003270 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	461a      	mov	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d94b      	bls.n	800325e <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 80031c6:	f3ef 8311 	mrs	r3, BASEPRI
 80031ca:	f04f 0120 	mov.w	r1, #32
 80031ce:	f381 8811 	msr	BASEPRI, r1
 80031d2:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d031      	beq.n	800323e <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 80031da:	4925      	ldr	r1, [pc, #148]	; (8003270 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	4613      	mov	r3, r2
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	4413      	add	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	440b      	add	r3, r1
 80031e8:	3360      	adds	r3, #96	; 0x60
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80031ee:	4920      	ldr	r1, [pc, #128]	; (8003270 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	4613      	mov	r3, r2
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	4413      	add	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	440b      	add	r3, r1
 80031fc:	3364      	adds	r3, #100	; 0x64
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003202:	491b      	ldr	r1, [pc, #108]	; (8003270 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	4613      	mov	r3, r2
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	4413      	add	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	440b      	add	r3, r1
 8003210:	3368      	adds	r3, #104	; 0x68
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8003216:	4916      	ldr	r1, [pc, #88]	; (8003270 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	4613      	mov	r3, r2
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	4413      	add	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	440b      	add	r3, r1
 8003224:	3370      	adds	r3, #112	; 0x70
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 800322a:	4911      	ldr	r1, [pc, #68]	; (8003270 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4613      	mov	r3, r2
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	4413      	add	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	440b      	add	r3, r1
 8003238:	336c      	adds	r3, #108	; 0x6c
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 800323e:	490c      	ldr	r1, [pc, #48]	; (8003270 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4613      	mov	r3, r2
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	4413      	add	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	440b      	add	r3, r1
 800324c:	3374      	adds	r3, #116	; 0x74
 800324e:	6a3a      	ldr	r2, [r7, #32]
 8003250:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	e002      	b.n	8003264 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 800325e:	f04f 33ff 	mov.w	r3, #4294967295
 8003262:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003264:	697b      	ldr	r3, [r7, #20]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3718      	adds	r7, #24
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	200153c8 	.word	0x200153c8

08003274 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003280:	2300      	movs	r3, #0
 8003282:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003284:	e002      	b.n	800328c <_EncodeStr+0x18>
    Len++;
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	3301      	adds	r3, #1
 800328a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4413      	add	r3, r2
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1f6      	bne.n	8003286 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	429a      	cmp	r2, r3
 800329e:	d901      	bls.n	80032a4 <_EncodeStr+0x30>
    Len = Limit;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	2bfe      	cmp	r3, #254	; 0xfe
 80032a8:	d806      	bhi.n	80032b8 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	60fa      	str	r2, [r7, #12]
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	e011      	b.n	80032dc <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	60fa      	str	r2, [r7, #12]
 80032be:	22ff      	movs	r2, #255	; 0xff
 80032c0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	60fa      	str	r2, [r7, #12]
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	60fa      	str	r2, [r7, #12]
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	0a12      	lsrs	r2, r2, #8
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80032e0:	e00a      	b.n	80032f8 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	60fa      	str	r2, [r7, #12]
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	1c51      	adds	r1, r2, #1
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	7812      	ldrb	r2, [r2, #0]
 80032f0:	701a      	strb	r2, [r3, #0]
    n++;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	3301      	adds	r3, #1
 80032f6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d3f0      	bcc.n	80032e2 <_EncodeStr+0x6e>
  }
  return pPayload;
 8003300:	68fb      	ldr	r3, [r7, #12]
}
 8003302:	4618      	mov	r0, r3
 8003304:	371c      	adds	r7, #28
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	3304      	adds	r3, #4
}
 800331a:	4618      	mov	r0, r3
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800332c:	1cfb      	adds	r3, r7, #3
 800332e:	2201      	movs	r2, #1
 8003330:	4619      	mov	r1, r3
 8003332:	2001      	movs	r0, #1
 8003334:	f7ff fdb8 	bl	8002ea8 <SEGGER_RTT_ReadNoLock>
 8003338:	4603      	mov	r3, r0
 800333a:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	dd47      	ble.n	80033d2 <_HandleIncomingPacket+0xac>
    switch (Cmd) {
 8003342:	78fb      	ldrb	r3, [r7, #3]
 8003344:	2b04      	cmp	r3, #4
 8003346:	d01a      	beq.n	800337e <_HandleIncomingPacket+0x58>
 8003348:	2b04      	cmp	r3, #4
 800334a:	dc06      	bgt.n	800335a <_HandleIncomingPacket+0x34>
 800334c:	2b02      	cmp	r3, #2
 800334e:	d010      	beq.n	8003372 <_HandleIncomingPacket+0x4c>
 8003350:	2b02      	cmp	r3, #2
 8003352:	dc11      	bgt.n	8003378 <_HandleIncomingPacket+0x52>
 8003354:	2b01      	cmp	r3, #1
 8003356:	d009      	beq.n	800336c <_HandleIncomingPacket+0x46>
 8003358:	e02d      	b.n	80033b6 <_HandleIncomingPacket+0x90>
 800335a:	2b06      	cmp	r3, #6
 800335c:	d015      	beq.n	800338a <_HandleIncomingPacket+0x64>
 800335e:	2b06      	cmp	r3, #6
 8003360:	db10      	blt.n	8003384 <_HandleIncomingPacket+0x5e>
 8003362:	2b07      	cmp	r3, #7
 8003364:	d014      	beq.n	8003390 <_HandleIncomingPacket+0x6a>
 8003366:	2b80      	cmp	r3, #128	; 0x80
 8003368:	d015      	beq.n	8003396 <_HandleIncomingPacket+0x70>
 800336a:	e024      	b.n	80033b6 <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800336c:	f000 fb82 	bl	8003a74 <SEGGER_SYSVIEW_Start>
      break;
 8003370:	e02f      	b.n	80033d2 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003372:	f000 fc3b 	bl	8003bec <SEGGER_SYSVIEW_Stop>
      break;
 8003376:	e02c      	b.n	80033d2 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003378:	f000 fe16 	bl	8003fa8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800337c:	e029      	b.n	80033d2 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800337e:	f000 fddb 	bl	8003f38 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003382:	e026      	b.n	80033d2 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003384:	f000 fc58 	bl	8003c38 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003388:	e023      	b.n	80033d2 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800338a:	f000 ffd1 	bl	8004330 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800338e:	e020      	b.n	80033d2 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003390:	f000 ffb0 	bl	80042f4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003394:	e01d      	b.n	80033d2 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003396:	1cfb      	adds	r3, r7, #3
 8003398:	2201      	movs	r2, #1
 800339a:	4619      	mov	r1, r3
 800339c:	2001      	movs	r0, #1
 800339e:	f7ff fd83 	bl	8002ea8 <SEGGER_RTT_ReadNoLock>
 80033a2:	4603      	mov	r3, r0
 80033a4:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	dd0f      	ble.n	80033cc <_HandleIncomingPacket+0xa6>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 ff20 	bl	80041f4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80033b4:	e00a      	b.n	80033cc <_HandleIncomingPacket+0xa6>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80033b6:	78fb      	ldrb	r3, [r7, #3]
 80033b8:	b25b      	sxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	da08      	bge.n	80033d0 <_HandleIncomingPacket+0xaa>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80033be:	1cfb      	adds	r3, r7, #3
 80033c0:	2201      	movs	r2, #1
 80033c2:	4619      	mov	r1, r3
 80033c4:	2001      	movs	r0, #1
 80033c6:	f7ff fd6f 	bl	8002ea8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80033ca:	e001      	b.n	80033d0 <_HandleIncomingPacket+0xaa>
      break;
 80033cc:	bf00      	nop
 80033ce:	e000      	b.n	80033d2 <_HandleIncomingPacket+0xac>
      break;
 80033d0:	bf00      	nop
    }
  }
}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08c      	sub	sp, #48	; 0x30
 80033e0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80033e2:	2301      	movs	r3, #1
 80033e4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80033e6:	1d3b      	adds	r3, r7, #4
 80033e8:	3301      	adds	r3, #1
 80033ea:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033f0:	4b30      	ldr	r3, [pc, #192]	; (80034b4 <_TrySendOverflowPacket+0xd8>)
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80033f6:	e00b      	b.n	8003410 <_TrySendOverflowPacket+0x34>
 80033f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	701a      	strb	r2, [r3, #0]
 800340a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340c:	09db      	lsrs	r3, r3, #7
 800340e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003412:	2b7f      	cmp	r3, #127	; 0x7f
 8003414:	d8f0      	bhi.n	80033f8 <_TrySendOverflowPacket+0x1c>
 8003416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800341c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	701a      	strb	r2, [r3, #0]
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003426:	4b24      	ldr	r3, [pc, #144]	; (80034b8 <_TrySendOverflowPacket+0xdc>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800342c:	4b21      	ldr	r3, [pc, #132]	; (80034b4 <_TrySendOverflowPacket+0xd8>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	623b      	str	r3, [r7, #32]
 800343e:	e00b      	b.n	8003458 <_TrySendOverflowPacket+0x7c>
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	627a      	str	r2, [r7, #36]	; 0x24
 8003446:	6a3a      	ldr	r2, [r7, #32]
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	701a      	strb	r2, [r3, #0]
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	09db      	lsrs	r3, r3, #7
 8003456:	623b      	str	r3, [r7, #32]
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	2b7f      	cmp	r3, #127	; 0x7f
 800345c:	d8f0      	bhi.n	8003440 <_TrySendOverflowPacket+0x64>
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	1c5a      	adds	r2, r3, #1
 8003462:	627a      	str	r2, [r7, #36]	; 0x24
 8003464:	6a3a      	ldr	r2, [r7, #32]
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	701a      	strb	r2, [r3, #0]
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800346e:	69fa      	ldr	r2, [r7, #28]
 8003470:	1d3b      	adds	r3, r7, #4
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	461a      	mov	r2, r3
 8003476:	1d3b      	adds	r3, r7, #4
 8003478:	4619      	mov	r1, r3
 800347a:	2001      	movs	r0, #1
 800347c:	f7ff fd96 	bl	8002fac <SEGGER_RTT_WriteSkipNoLock>
 8003480:	4603      	mov	r3, r0
 8003482:	613b      	str	r3, [r7, #16]
  if (Status) {
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800348a:	4a0a      	ldr	r2, [pc, #40]	; (80034b4 <_TrySendOverflowPacket+0xd8>)
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003490:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <_TrySendOverflowPacket+0xd8>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	3b01      	subs	r3, #1
 8003496:	b2da      	uxtb	r2, r3
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <_TrySendOverflowPacket+0xd8>)
 800349a:	701a      	strb	r2, [r3, #0]
 800349c:	e004      	b.n	80034a8 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800349e:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <_TrySendOverflowPacket+0xd8>)
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	3301      	adds	r3, #1
 80034a4:	4a03      	ldr	r2, [pc, #12]	; (80034b4 <_TrySendOverflowPacket+0xd8>)
 80034a6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80034a8:	693b      	ldr	r3, [r7, #16]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3730      	adds	r7, #48	; 0x30
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	2001526c 	.word	0x2001526c
 80034b8:	e0001004 	.word	0xe0001004

080034bc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08a      	sub	sp, #40	; 0x28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80034c8:	4b62      	ldr	r3, [pc, #392]	; (8003654 <_SendPacket+0x198>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d010      	beq.n	80034f2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80034d0:	4b60      	ldr	r3, [pc, #384]	; (8003654 <_SendPacket+0x198>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 809f 	beq.w	8003618 <_SendPacket+0x15c>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80034da:	4b5e      	ldr	r3, [pc, #376]	; (8003654 <_SendPacket+0x198>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d108      	bne.n	80034f4 <_SendPacket+0x38>
    _TrySendOverflowPacket();
 80034e2:	f7ff ff7b 	bl	80033dc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80034e6:	4b5b      	ldr	r3, [pc, #364]	; (8003654 <_SendPacket+0x198>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	f040 8096 	bne.w	800361c <_SendPacket+0x160>
 80034f0:	e000      	b.n	80034f4 <_SendPacket+0x38>
    goto Send;
 80034f2:	bf00      	nop
Send:
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b1f      	cmp	r3, #31
 80034f8:	d809      	bhi.n	800350e <_SendPacket+0x52>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80034fa:	4b56      	ldr	r3, [pc, #344]	; (8003654 <_SendPacket+0x198>)
 80034fc:	69da      	ldr	r2, [r3, #28]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	fa22 f303 	lsr.w	r3, r2, r3
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	f040 8089 	bne.w	8003620 <_SendPacket+0x164>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b17      	cmp	r3, #23
 8003512:	d807      	bhi.n	8003524 <_SendPacket+0x68>
    *--pStartPacket = EventId;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	3b01      	subs	r3, #1
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	b2da      	uxtb	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	701a      	strb	r2, [r3, #0]
 8003522:	e03d      	b.n	80035a0 <_SendPacket+0xe4>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	2b7f      	cmp	r3, #127	; 0x7f
 8003530:	d912      	bls.n	8003558 <_SendPacket+0x9c>
      *--pStartPacket = (NumBytes >> 7);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	3b01      	subs	r3, #1
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	09db      	lsrs	r3, r3, #7
 800353c:	b2da      	uxtb	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	3b01      	subs	r3, #1
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003550:	b2da      	uxtb	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	701a      	strb	r2, [r3, #0]
 8003556:	e006      	b.n	8003566 <_SendPacket+0xaa>
    } else {
      *--pStartPacket = NumBytes;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	3b01      	subs	r3, #1
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	b2da      	uxtb	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b7f      	cmp	r3, #127	; 0x7f
 800356a:	d912      	bls.n	8003592 <_SendPacket+0xd6>
      *--pStartPacket = (EventId >> 7);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	3b01      	subs	r3, #1
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	09db      	lsrs	r3, r3, #7
 8003576:	b2da      	uxtb	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	3b01      	subs	r3, #1
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800358a:	b2da      	uxtb	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	701a      	strb	r2, [r3, #0]
 8003590:	e006      	b.n	80035a0 <_SendPacket+0xe4>
    } else {
      *--pStartPacket = EventId;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	3b01      	subs	r3, #1
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	b2da      	uxtb	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80035a0:	4b2d      	ldr	r3, [pc, #180]	; (8003658 <_SendPacket+0x19c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80035a6:	4b2b      	ldr	r3, [pc, #172]	; (8003654 <_SendPacket+0x198>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	623b      	str	r3, [r7, #32]
 80035b8:	e00b      	b.n	80035d2 <_SendPacket+0x116>
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	627a      	str	r2, [r7, #36]	; 0x24
 80035c0:	6a3a      	ldr	r2, [r7, #32]
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	09db      	lsrs	r3, r3, #7
 80035d0:	623b      	str	r3, [r7, #32]
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	2b7f      	cmp	r3, #127	; 0x7f
 80035d6:	d8f0      	bhi.n	80035ba <_SendPacket+0xfe>
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	627a      	str	r2, [r7, #36]	; 0x24
 80035de:	6a3a      	ldr	r2, [r7, #32]
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	701a      	strb	r2, [r3, #0]
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	461a      	mov	r2, r3
 80035f0:	68f9      	ldr	r1, [r7, #12]
 80035f2:	2001      	movs	r0, #1
 80035f4:	f7ff fcda 	bl	8002fac <SEGGER_RTT_WriteSkipNoLock>
 80035f8:	4603      	mov	r3, r0
 80035fa:	613b      	str	r3, [r7, #16]
  if (Status) {
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <_SendPacket+0x14e>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003602:	4a14      	ldr	r2, [pc, #80]	; (8003654 <_SendPacket+0x198>)
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	60d3      	str	r3, [r2, #12]
 8003608:	e00b      	b.n	8003622 <_SendPacket+0x166>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800360a:	4b12      	ldr	r3, [pc, #72]	; (8003654 <_SendPacket+0x198>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	3301      	adds	r3, #1
 8003610:	b2da      	uxtb	r2, r3
 8003612:	4b10      	ldr	r3, [pc, #64]	; (8003654 <_SendPacket+0x198>)
 8003614:	701a      	strb	r2, [r3, #0]
 8003616:	e004      	b.n	8003622 <_SendPacket+0x166>
    goto SendDone;
 8003618:	bf00      	nop
 800361a:	e002      	b.n	8003622 <_SendPacket+0x166>
      goto SendDone;
 800361c:	bf00      	nop
 800361e:	e000      	b.n	8003622 <_SendPacket+0x166>
      goto SendDone;
 8003620:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003622:	4b0e      	ldr	r3, [pc, #56]	; (800365c <_SendPacket+0x1a0>)
 8003624:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003628:	4b0c      	ldr	r3, [pc, #48]	; (800365c <_SendPacket+0x1a0>)
 800362a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362e:	429a      	cmp	r2, r3
 8003630:	d00b      	beq.n	800364a <_SendPacket+0x18e>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003632:	4b08      	ldr	r3, [pc, #32]	; (8003654 <_SendPacket+0x198>)
 8003634:	789b      	ldrb	r3, [r3, #2]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d107      	bne.n	800364a <_SendPacket+0x18e>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800363a:	4b06      	ldr	r3, [pc, #24]	; (8003654 <_SendPacket+0x198>)
 800363c:	2201      	movs	r2, #1
 800363e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003640:	f7ff fe71 	bl	8003326 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003644:	4b03      	ldr	r3, [pc, #12]	; (8003654 <_SendPacket+0x198>)
 8003646:	2200      	movs	r2, #0
 8003648:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800364a:	bf00      	nop
 800364c:	3728      	adds	r7, #40	; 0x28
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	2001526c 	.word	0x2001526c
 8003658:	e0001004 	.word	0xe0001004
 800365c:	200153c8 	.word	0x200153c8

08003660 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af02      	add	r7, sp, #8
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800366e:	2300      	movs	r3, #0
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003676:	4a14      	ldr	r2, [pc, #80]	; (80036c8 <SEGGER_SYSVIEW_Init+0x68>)
 8003678:	4914      	ldr	r1, [pc, #80]	; (80036cc <SEGGER_SYSVIEW_Init+0x6c>)
 800367a:	2001      	movs	r0, #1
 800367c:	f7ff fd26 	bl	80030cc <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003680:	2300      	movs	r3, #0
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	2308      	movs	r3, #8
 8003686:	4a12      	ldr	r2, [pc, #72]	; (80036d0 <SEGGER_SYSVIEW_Init+0x70>)
 8003688:	4910      	ldr	r1, [pc, #64]	; (80036cc <SEGGER_SYSVIEW_Init+0x6c>)
 800368a:	2001      	movs	r0, #1
 800368c:	f7ff fd88 	bl	80031a0 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003690:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <SEGGER_SYSVIEW_Init+0x74>)
 8003692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003696:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003698:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <SEGGER_SYSVIEW_Init+0x78>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a0d      	ldr	r2, [pc, #52]	; (80036d4 <SEGGER_SYSVIEW_Init+0x74>)
 800369e:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80036a0:	4a0c      	ldr	r2, [pc, #48]	; (80036d4 <SEGGER_SYSVIEW_Init+0x74>)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80036a6:	4a0b      	ldr	r2, [pc, #44]	; (80036d4 <SEGGER_SYSVIEW_Init+0x74>)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80036ac:	4a09      	ldr	r2, [pc, #36]	; (80036d4 <SEGGER_SYSVIEW_Init+0x74>)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80036b2:	4a08      	ldr	r2, [pc, #32]	; (80036d4 <SEGGER_SYSVIEW_Init+0x74>)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <SEGGER_SYSVIEW_Init+0x74>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80036be:	bf00      	nop
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20013264 	.word	0x20013264
 80036cc:	08004b08 	.word	0x08004b08
 80036d0:	20015264 	.word	0x20015264
 80036d4:	2001526c 	.word	0x2001526c
 80036d8:	e0001004 	.word	0xe0001004

080036dc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80036e4:	4a04      	ldr	r2, [pc, #16]	; (80036f8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6113      	str	r3, [r2, #16]
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	2001526c 	.word	0x2001526c

080036fc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003704:	f3ef 8311 	mrs	r3, BASEPRI
 8003708:	f04f 0120 	mov.w	r1, #32
 800370c:	f381 8811 	msr	BASEPRI, r1
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	4808      	ldr	r0, [pc, #32]	; (8003734 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003714:	f7ff fdfb 	bl	800330e <_PreparePacket>
 8003718:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	68b9      	ldr	r1, [r7, #8]
 800371e:	68b8      	ldr	r0, [r7, #8]
 8003720:	f7ff fecc 	bl	80034bc <_SendPacket>
  RECORD_END();
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f383 8811 	msr	BASEPRI, r3
}
 800372a:	bf00      	nop
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	2001529c 	.word	0x2001529c

08003738 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003742:	f3ef 8311 	mrs	r3, BASEPRI
 8003746:	f04f 0120 	mov.w	r1, #32
 800374a:	f381 8811 	msr	BASEPRI, r1
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	4816      	ldr	r0, [pc, #88]	; (80037ac <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003752:	f7ff fddc 	bl	800330e <_PreparePacket>
 8003756:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	61fb      	str	r3, [r7, #28]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	61bb      	str	r3, [r7, #24]
 8003764:	e00b      	b.n	800377e <SEGGER_SYSVIEW_RecordU32+0x46>
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	61fa      	str	r2, [r7, #28]
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	701a      	strb	r2, [r3, #0]
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	09db      	lsrs	r3, r3, #7
 800377c:	61bb      	str	r3, [r7, #24]
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	2b7f      	cmp	r3, #127	; 0x7f
 8003782:	d8f0      	bhi.n	8003766 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	61fa      	str	r2, [r7, #28]
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	701a      	strb	r2, [r3, #0]
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	68f9      	ldr	r1, [r7, #12]
 8003798:	6938      	ldr	r0, [r7, #16]
 800379a:	f7ff fe8f 	bl	80034bc <_SendPacket>
  RECORD_END();
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f383 8811 	msr	BASEPRI, r3
}
 80037a4:	bf00      	nop
 80037a6:	3720      	adds	r7, #32
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	2001529c 	.word	0x2001529c

080037b0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08c      	sub	sp, #48	; 0x30
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80037bc:	f3ef 8311 	mrs	r3, BASEPRI
 80037c0:	f04f 0120 	mov.w	r1, #32
 80037c4:	f381 8811 	msr	BASEPRI, r1
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	4825      	ldr	r0, [pc, #148]	; (8003860 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80037cc:	f7ff fd9f 	bl	800330e <_PreparePacket>
 80037d0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80037de:	e00b      	b.n	80037f8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80037e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	701a      	strb	r2, [r3, #0]
 80037f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f4:	09db      	lsrs	r3, r3, #7
 80037f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80037f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fa:	2b7f      	cmp	r3, #127	; 0x7f
 80037fc:	d8f0      	bhi.n	80037e0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80037fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	701a      	strb	r2, [r3, #0]
 800380a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	627b      	str	r3, [r7, #36]	; 0x24
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	623b      	str	r3, [r7, #32]
 8003816:	e00b      	b.n	8003830 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	1c5a      	adds	r2, r3, #1
 800381c:	627a      	str	r2, [r7, #36]	; 0x24
 800381e:	6a3a      	ldr	r2, [r7, #32]
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	701a      	strb	r2, [r3, #0]
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	09db      	lsrs	r3, r3, #7
 800382e:	623b      	str	r3, [r7, #32]
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	2b7f      	cmp	r3, #127	; 0x7f
 8003834:	d8f0      	bhi.n	8003818 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	627a      	str	r2, [r7, #36]	; 0x24
 800383c:	6a3a      	ldr	r2, [r7, #32]
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	701a      	strb	r2, [r3, #0]
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	6979      	ldr	r1, [r7, #20]
 800384a:	69b8      	ldr	r0, [r7, #24]
 800384c:	f7ff fe36 	bl	80034bc <_SendPacket>
  RECORD_END();
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f383 8811 	msr	BASEPRI, r3
}
 8003856:	bf00      	nop
 8003858:	3730      	adds	r7, #48	; 0x30
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	2001529c 	.word	0x2001529c

08003864 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8003864:	b580      	push	{r7, lr}
 8003866:	b08e      	sub	sp, #56	; 0x38
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8003872:	f3ef 8311 	mrs	r3, BASEPRI
 8003876:	f04f 0120 	mov.w	r1, #32
 800387a:	f381 8811 	msr	BASEPRI, r1
 800387e:	61fb      	str	r3, [r7, #28]
 8003880:	4832      	ldr	r0, [pc, #200]	; (800394c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8003882:	f7ff fd44 	bl	800330e <_PreparePacket>
 8003886:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	637b      	str	r3, [r7, #52]	; 0x34
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	633b      	str	r3, [r7, #48]	; 0x30
 8003894:	e00b      	b.n	80038ae <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8003896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	637a      	str	r2, [r7, #52]	; 0x34
 800389c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	701a      	strb	r2, [r3, #0]
 80038a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038aa:	09db      	lsrs	r3, r3, #7
 80038ac:	633b      	str	r3, [r7, #48]	; 0x30
 80038ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b0:	2b7f      	cmp	r3, #127	; 0x7f
 80038b2:	d8f0      	bhi.n	8003896 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80038b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b6:	1c5a      	adds	r2, r3, #1
 80038b8:	637a      	str	r2, [r7, #52]	; 0x34
 80038ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	701a      	strb	r2, [r3, #0]
 80038c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80038cc:	e00b      	b.n	80038e6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80038ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	701a      	strb	r2, [r3, #0]
 80038e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e2:	09db      	lsrs	r3, r3, #7
 80038e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80038e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e8:	2b7f      	cmp	r3, #127	; 0x7f
 80038ea:	d8f0      	bhi.n	80038ce <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80038ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	701a      	strb	r2, [r3, #0]
 80038f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	623b      	str	r3, [r7, #32]
 8003904:	e00b      	b.n	800391e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	627a      	str	r2, [r7, #36]	; 0x24
 800390c:	6a3a      	ldr	r2, [r7, #32]
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	701a      	strb	r2, [r3, #0]
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	09db      	lsrs	r3, r3, #7
 800391c:	623b      	str	r3, [r7, #32]
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	2b7f      	cmp	r3, #127	; 0x7f
 8003922:	d8f0      	bhi.n	8003906 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	1c5a      	adds	r2, r3, #1
 8003928:	627a      	str	r2, [r7, #36]	; 0x24
 800392a:	6a3a      	ldr	r2, [r7, #32]
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	701a      	strb	r2, [r3, #0]
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	6979      	ldr	r1, [r7, #20]
 8003938:	69b8      	ldr	r0, [r7, #24]
 800393a:	f7ff fdbf 	bl	80034bc <_SendPacket>
  RECORD_END();
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f383 8811 	msr	BASEPRI, r3
}
 8003944:	bf00      	nop
 8003946:	3738      	adds	r7, #56	; 0x38
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	2001529c 	.word	0x2001529c

08003950 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003950:	b580      	push	{r7, lr}
 8003952:	b090      	sub	sp, #64	; 0x40
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
 800395c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800395e:	f3ef 8311 	mrs	r3, BASEPRI
 8003962:	f04f 0120 	mov.w	r1, #32
 8003966:	f381 8811 	msr	BASEPRI, r1
 800396a:	61fb      	str	r3, [r7, #28]
 800396c:	4840      	ldr	r0, [pc, #256]	; (8003a70 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800396e:	f7ff fcce 	bl	800330e <_PreparePacket>
 8003972:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003980:	e00b      	b.n	800399a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8003982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003988:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	701a      	strb	r2, [r3, #0]
 8003994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003996:	09db      	lsrs	r3, r3, #7
 8003998:	63bb      	str	r3, [r7, #56]	; 0x38
 800399a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399c:	2b7f      	cmp	r3, #127	; 0x7f
 800399e:	d8f0      	bhi.n	8003982 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80039a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	701a      	strb	r2, [r3, #0]
 80039ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	637b      	str	r3, [r7, #52]	; 0x34
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	633b      	str	r3, [r7, #48]	; 0x30
 80039b8:	e00b      	b.n	80039d2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80039ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	637a      	str	r2, [r7, #52]	; 0x34
 80039c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	701a      	strb	r2, [r3, #0]
 80039cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ce:	09db      	lsrs	r3, r3, #7
 80039d0:	633b      	str	r3, [r7, #48]	; 0x30
 80039d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d4:	2b7f      	cmp	r3, #127	; 0x7f
 80039d6:	d8f0      	bhi.n	80039ba <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80039d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	637a      	str	r2, [r7, #52]	; 0x34
 80039de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039e0:	b2d2      	uxtb	r2, r2
 80039e2:	701a      	strb	r2, [r3, #0]
 80039e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80039f0:	e00b      	b.n	8003a0a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80039f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	701a      	strb	r2, [r3, #0]
 8003a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a06:	09db      	lsrs	r3, r3, #7
 8003a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0c:	2b7f      	cmp	r3, #127	; 0x7f
 8003a0e:	d8f0      	bhi.n	80039f2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	701a      	strb	r2, [r3, #0]
 8003a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
 8003a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a26:	623b      	str	r3, [r7, #32]
 8003a28:	e00b      	b.n	8003a42 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	627a      	str	r2, [r7, #36]	; 0x24
 8003a30:	6a3a      	ldr	r2, [r7, #32]
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	701a      	strb	r2, [r3, #0]
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	09db      	lsrs	r3, r3, #7
 8003a40:	623b      	str	r3, [r7, #32]
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	2b7f      	cmp	r3, #127	; 0x7f
 8003a46:	d8f0      	bhi.n	8003a2a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	627a      	str	r2, [r7, #36]	; 0x24
 8003a4e:	6a3a      	ldr	r2, [r7, #32]
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	701a      	strb	r2, [r3, #0]
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	6979      	ldr	r1, [r7, #20]
 8003a5c:	69b8      	ldr	r0, [r7, #24]
 8003a5e:	f7ff fd2d 	bl	80034bc <_SendPacket>
  RECORD_END();
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	f383 8811 	msr	BASEPRI, r3
}
 8003a68:	bf00      	nop
 8003a6a:	3740      	adds	r7, #64	; 0x40
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	2001529c 	.word	0x2001529c

08003a74 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b08c      	sub	sp, #48	; 0x30
 8003a78:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003a7a:	4b59      	ldr	r3, [pc, #356]	; (8003be0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f040 80aa 	bne.w	8003bd8 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8003a84:	4b56      	ldr	r3, [pc, #344]	; (8003be0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003a8a:	f3ef 8311 	mrs	r3, BASEPRI
 8003a8e:	f04f 0120 	mov.w	r1, #32
 8003a92:	f381 8811 	msr	BASEPRI, r1
 8003a96:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003a98:	220a      	movs	r2, #10
 8003a9a:	4952      	ldr	r1, [pc, #328]	; (8003be4 <SEGGER_SYSVIEW_Start+0x170>)
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	f7ff fa85 	bl	8002fac <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003aa8:	200a      	movs	r0, #10
 8003aaa:	f7ff fe27 	bl	80036fc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003aae:	f3ef 8311 	mrs	r3, BASEPRI
 8003ab2:	f04f 0120 	mov.w	r1, #32
 8003ab6:	f381 8811 	msr	BASEPRI, r1
 8003aba:	60bb      	str	r3, [r7, #8]
 8003abc:	484a      	ldr	r0, [pc, #296]	; (8003be8 <SEGGER_SYSVIEW_Start+0x174>)
 8003abe:	f7ff fc26 	bl	800330e <_PreparePacket>
 8003ac2:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003acc:	4b44      	ldr	r3, [pc, #272]	; (8003be0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ad2:	e00b      	b.n	8003aec <SEGGER_SYSVIEW_Start+0x78>
 8003ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]
 8003ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae8:	09db      	lsrs	r3, r3, #7
 8003aea:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aee:	2b7f      	cmp	r3, #127	; 0x7f
 8003af0:	d8f0      	bhi.n	8003ad4 <SEGGER_SYSVIEW_Start+0x60>
 8003af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	701a      	strb	r2, [r3, #0]
 8003afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b00:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
 8003b06:	4b36      	ldr	r3, [pc, #216]	; (8003be0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	623b      	str	r3, [r7, #32]
 8003b0c:	e00b      	b.n	8003b26 <SEGGER_SYSVIEW_Start+0xb2>
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	627a      	str	r2, [r7, #36]	; 0x24
 8003b14:	6a3a      	ldr	r2, [r7, #32]
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	701a      	strb	r2, [r3, #0]
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	09db      	lsrs	r3, r3, #7
 8003b24:	623b      	str	r3, [r7, #32]
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	2b7f      	cmp	r3, #127	; 0x7f
 8003b2a:	d8f0      	bhi.n	8003b0e <SEGGER_SYSVIEW_Start+0x9a>
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	627a      	str	r2, [r7, #36]	; 0x24
 8003b32:	6a3a      	ldr	r2, [r7, #32]
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	701a      	strb	r2, [r3, #0]
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	61fb      	str	r3, [r7, #28]
 8003b40:	4b27      	ldr	r3, [pc, #156]	; (8003be0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	61bb      	str	r3, [r7, #24]
 8003b46:	e00b      	b.n	8003b60 <SEGGER_SYSVIEW_Start+0xec>
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	61fa      	str	r2, [r7, #28]
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	701a      	strb	r2, [r3, #0]
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	09db      	lsrs	r3, r3, #7
 8003b5e:	61bb      	str	r3, [r7, #24]
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	2b7f      	cmp	r3, #127	; 0x7f
 8003b64:	d8f0      	bhi.n	8003b48 <SEGGER_SYSVIEW_Start+0xd4>
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	61fa      	str	r2, [r7, #28]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	701a      	strb	r2, [r3, #0]
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	613b      	str	r3, [r7, #16]
 8003b7e:	e00b      	b.n	8003b98 <SEGGER_SYSVIEW_Start+0x124>
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	1c5a      	adds	r2, r3, #1
 8003b84:	617a      	str	r2, [r7, #20]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	701a      	strb	r2, [r3, #0]
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	09db      	lsrs	r3, r3, #7
 8003b96:	613b      	str	r3, [r7, #16]
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8003b9c:	d8f0      	bhi.n	8003b80 <SEGGER_SYSVIEW_Start+0x10c>
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	617a      	str	r2, [r7, #20]
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	701a      	strb	r2, [r3, #0]
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003bae:	2218      	movs	r2, #24
 8003bb0:	6839      	ldr	r1, [r7, #0]
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff fc82 	bl	80034bc <_SendPacket>
      RECORD_END();
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003bbe:	4b08      	ldr	r3, [pc, #32]	; (8003be0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003bc6:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003bcc:	f000 f9ec 	bl	8003fa8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003bd0:	f000 f9b2 	bl	8003f38 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003bd4:	f000 fbac 	bl	8004330 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8003bd8:	bf00      	nop
 8003bda:	3730      	adds	r7, #48	; 0x30
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	2001526c 	.word	0x2001526c
 8003be4:	08004b58 	.word	0x08004b58
 8003be8:	2001529c 	.word	0x2001529c

08003bec <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003bf2:	f3ef 8311 	mrs	r3, BASEPRI
 8003bf6:	f04f 0120 	mov.w	r1, #32
 8003bfa:	f381 8811 	msr	BASEPRI, r1
 8003bfe:	607b      	str	r3, [r7, #4]
 8003c00:	480b      	ldr	r0, [pc, #44]	; (8003c30 <SEGGER_SYSVIEW_Stop+0x44>)
 8003c02:	f7ff fb84 	bl	800330e <_PreparePacket>
 8003c06:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003c08:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <SEGGER_SYSVIEW_Stop+0x48>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d007      	beq.n	8003c20 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003c10:	220b      	movs	r2, #11
 8003c12:	6839      	ldr	r1, [r7, #0]
 8003c14:	6838      	ldr	r0, [r7, #0]
 8003c16:	f7ff fc51 	bl	80034bc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003c1a:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <SEGGER_SYSVIEW_Stop+0x48>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f383 8811 	msr	BASEPRI, r3
}
 8003c26:	bf00      	nop
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	2001529c 	.word	0x2001529c
 8003c34:	2001526c 	.word	0x2001526c

08003c38 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08c      	sub	sp, #48	; 0x30
 8003c3c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003c3e:	f3ef 8311 	mrs	r3, BASEPRI
 8003c42:	f04f 0120 	mov.w	r1, #32
 8003c46:	f381 8811 	msr	BASEPRI, r1
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	4845      	ldr	r0, [pc, #276]	; (8003d64 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003c4e:	f7ff fb5e 	bl	800330e <_PreparePacket>
 8003c52:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c5c:	4b42      	ldr	r3, [pc, #264]	; (8003d68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c62:	e00b      	b.n	8003c7c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c66:	1c5a      	adds	r2, r3, #1
 8003c68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c6c:	b2d2      	uxtb	r2, r2
 8003c6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	701a      	strb	r2, [r3, #0]
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c78:	09db      	lsrs	r3, r3, #7
 8003c7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7e:	2b7f      	cmp	r3, #127	; 0x7f
 8003c80:	d8f0      	bhi.n	8003c64 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	701a      	strb	r2, [r3, #0]
 8003c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c90:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
 8003c96:	4b34      	ldr	r3, [pc, #208]	; (8003d68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	623b      	str	r3, [r7, #32]
 8003c9c:	e00b      	b.n	8003cb6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	627a      	str	r2, [r7, #36]	; 0x24
 8003ca4:	6a3a      	ldr	r2, [r7, #32]
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	701a      	strb	r2, [r3, #0]
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	09db      	lsrs	r3, r3, #7
 8003cb4:	623b      	str	r3, [r7, #32]
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	2b7f      	cmp	r3, #127	; 0x7f
 8003cba:	d8f0      	bhi.n	8003c9e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	627a      	str	r2, [r7, #36]	; 0x24
 8003cc2:	6a3a      	ldr	r2, [r7, #32]
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	701a      	strb	r2, [r3, #0]
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	61fb      	str	r3, [r7, #28]
 8003cd0:	4b25      	ldr	r3, [pc, #148]	; (8003d68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	61bb      	str	r3, [r7, #24]
 8003cd6:	e00b      	b.n	8003cf0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	61fa      	str	r2, [r7, #28]
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	701a      	strb	r2, [r3, #0]
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	09db      	lsrs	r3, r3, #7
 8003cee:	61bb      	str	r3, [r7, #24]
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	2b7f      	cmp	r3, #127	; 0x7f
 8003cf4:	d8f0      	bhi.n	8003cd8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	61fa      	str	r2, [r7, #28]
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	701a      	strb	r2, [r3, #0]
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	613b      	str	r3, [r7, #16]
 8003d0e:	e00b      	b.n	8003d28 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	617a      	str	r2, [r7, #20]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	b2d2      	uxtb	r2, r2
 8003d1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	701a      	strb	r2, [r3, #0]
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	09db      	lsrs	r3, r3, #7
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	2b7f      	cmp	r3, #127	; 0x7f
 8003d2c:	d8f0      	bhi.n	8003d10 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	1c5a      	adds	r2, r3, #1
 8003d32:	617a      	str	r2, [r7, #20]
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	701a      	strb	r2, [r3, #0]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003d3e:	2218      	movs	r2, #24
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	68b8      	ldr	r0, [r7, #8]
 8003d44:	f7ff fbba 	bl	80034bc <_SendPacket>
  RECORD_END();
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003d4e:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003d56:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	4798      	blx	r3
  }
}
 8003d5c:	bf00      	nop
 8003d5e:	3730      	adds	r7, #48	; 0x30
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	2001529c 	.word	0x2001529c
 8003d68:	2001526c 	.word	0x2001526c

08003d6c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b092      	sub	sp, #72	; 0x48
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003d74:	f3ef 8311 	mrs	r3, BASEPRI
 8003d78:	f04f 0120 	mov.w	r1, #32
 8003d7c:	f381 8811 	msr	BASEPRI, r1
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	486b      	ldr	r0, [pc, #428]	; (8003f30 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003d84:	f7ff fac3 	bl	800330e <_PreparePacket>
 8003d88:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	647b      	str	r3, [r7, #68]	; 0x44
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	4b67      	ldr	r3, [pc, #412]	; (8003f34 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	089b      	lsrs	r3, r3, #2
 8003d9e:	643b      	str	r3, [r7, #64]	; 0x40
 8003da0:	e00b      	b.n	8003dba <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8003da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	647a      	str	r2, [r7, #68]	; 0x44
 8003da8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	701a      	strb	r2, [r3, #0]
 8003db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db6:	09db      	lsrs	r3, r3, #7
 8003db8:	643b      	str	r3, [r7, #64]	; 0x40
 8003dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dbc:	2b7f      	cmp	r3, #127	; 0x7f
 8003dbe:	d8f0      	bhi.n	8003da2 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8003dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	647a      	str	r2, [r7, #68]	; 0x44
 8003dc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	701a      	strb	r2, [r3, #0]
 8003dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dda:	e00b      	b.n	8003df4 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8003ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003de2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]
 8003dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df0:	09db      	lsrs	r3, r3, #7
 8003df2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df6:	2b7f      	cmp	r3, #127	; 0x7f
 8003df8:	d8f0      	bhi.n	8003ddc <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8003dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	701a      	strb	r2, [r3, #0]
 8003e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e08:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	4619      	mov	r1, r3
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f7ff fa2e 	bl	8003274 <_EncodeStr>
 8003e18:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003e1a:	2209      	movs	r2, #9
 8003e1c:	68f9      	ldr	r1, [r7, #12]
 8003e1e:	6938      	ldr	r0, [r7, #16]
 8003e20:	f7ff fb4c 	bl	80034bc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	4b40      	ldr	r3, [pc, #256]	; (8003f34 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	089b      	lsrs	r3, r3, #2
 8003e38:	633b      	str	r3, [r7, #48]	; 0x30
 8003e3a:	e00b      	b.n	8003e54 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8003e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	637a      	str	r2, [r7, #52]	; 0x34
 8003e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	701a      	strb	r2, [r3, #0]
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e50:	09db      	lsrs	r3, r3, #7
 8003e52:	633b      	str	r3, [r7, #48]	; 0x30
 8003e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e56:	2b7f      	cmp	r3, #127	; 0x7f
 8003e58:	d8f0      	bhi.n	8003e3c <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8003e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	637a      	str	r2, [r7, #52]	; 0x34
 8003e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	701a      	strb	r2, [r3, #0]
 8003e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e68:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e74:	e00b      	b.n	8003e8e <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8003e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	701a      	strb	r2, [r3, #0]
 8003e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8a:	09db      	lsrs	r3, r3, #7
 8003e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e90:	2b7f      	cmp	r3, #127	; 0x7f
 8003e92:	d8f0      	bhi.n	8003e76 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8003e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e9c:	b2d2      	uxtb	r2, r2
 8003e9e:	701a      	strb	r2, [r3, #0]
 8003ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	623b      	str	r3, [r7, #32]
 8003eae:	e00b      	b.n	8003ec8 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	627a      	str	r2, [r7, #36]	; 0x24
 8003eb6:	6a3a      	ldr	r2, [r7, #32]
 8003eb8:	b2d2      	uxtb	r2, r2
 8003eba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	701a      	strb	r2, [r3, #0]
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	09db      	lsrs	r3, r3, #7
 8003ec6:	623b      	str	r3, [r7, #32]
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	2b7f      	cmp	r3, #127	; 0x7f
 8003ecc:	d8f0      	bhi.n	8003eb0 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	1c5a      	adds	r2, r3, #1
 8003ed2:	627a      	str	r2, [r7, #36]	; 0x24
 8003ed4:	6a3a      	ldr	r2, [r7, #32]
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	701a      	strb	r2, [r3, #0]
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	61fb      	str	r3, [r7, #28]
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61bb      	str	r3, [r7, #24]
 8003ee6:	e00b      	b.n	8003f00 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	61fa      	str	r2, [r7, #28]
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	701a      	strb	r2, [r3, #0]
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	09db      	lsrs	r3, r3, #7
 8003efe:	61bb      	str	r3, [r7, #24]
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	2b7f      	cmp	r3, #127	; 0x7f
 8003f04:	d8f0      	bhi.n	8003ee8 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	61fa      	str	r2, [r7, #28]
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	701a      	strb	r2, [r3, #0]
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003f16:	2215      	movs	r2, #21
 8003f18:	68f9      	ldr	r1, [r7, #12]
 8003f1a:	6938      	ldr	r0, [r7, #16]
 8003f1c:	f7ff face 	bl	80034bc <_SendPacket>
  RECORD_END();
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f383 8811 	msr	BASEPRI, r3
}
 8003f26:	bf00      	nop
 8003f28:	3748      	adds	r7, #72	; 0x48
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	2001529c 	.word	0x2001529c
 8003f34:	2001526c 	.word	0x2001526c

08003f38 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003f3c:	4b07      	ldr	r3, [pc, #28]	; (8003f5c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d008      	beq.n	8003f56 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003f44:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003f4e:	4b03      	ldr	r3, [pc, #12]	; (8003f5c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	4798      	blx	r3
  }
}
 8003f56:	bf00      	nop
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	2001526c 	.word	0x2001526c

08003f60 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003f68:	f3ef 8311 	mrs	r3, BASEPRI
 8003f6c:	f04f 0120 	mov.w	r1, #32
 8003f70:	f381 8811 	msr	BASEPRI, r1
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	480b      	ldr	r0, [pc, #44]	; (8003fa4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8003f78:	f7ff f9c9 	bl	800330e <_PreparePacket>
 8003f7c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003f7e:	2280      	movs	r2, #128	; 0x80
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	6938      	ldr	r0, [r7, #16]
 8003f84:	f7ff f976 	bl	8003274 <_EncodeStr>
 8003f88:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8003f8a:	220e      	movs	r2, #14
 8003f8c:	68f9      	ldr	r1, [r7, #12]
 8003f8e:	6938      	ldr	r0, [r7, #16]
 8003f90:	f7ff fa94 	bl	80034bc <_SendPacket>
  RECORD_END();
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f383 8811 	msr	BASEPRI, r3
}
 8003f9a:	bf00      	nop
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	2001529c 	.word	0x2001529c

08003fa8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003fae:	4b12      	ldr	r3, [pc, #72]	; (8003ff8 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d015      	beq.n	8003fe2 <SEGGER_SYSVIEW_RecordSystime+0x3a>
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d010      	beq.n	8003fe2 <SEGGER_SYSVIEW_RecordSystime+0x3a>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003fc0:	4b0d      	ldr	r3, [pc, #52]	; (8003ff8 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4798      	blx	r3
 8003fc8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003fcc:	6839      	ldr	r1, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003fce:	e897 0018 	ldmia.w	r7, {r3, r4}
 8003fd2:	0025      	movs	r5, r4
 8003fd4:	2600      	movs	r6, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003fd6:	462b      	mov	r3, r5
 8003fd8:	461a      	mov	r2, r3
 8003fda:	200d      	movs	r0, #13
 8003fdc:	f7ff fbe8 	bl	80037b0 <SEGGER_SYSVIEW_RecordU32x2>
 8003fe0:	e005      	b.n	8003fee <SEGGER_SYSVIEW_RecordSystime+0x46>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003fe2:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <SEGGER_SYSVIEW_RecordSystime+0x54>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	200c      	movs	r0, #12
 8003fea:	f7ff fba5 	bl	8003738 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	2001526c 	.word	0x2001526c
 8003ffc:	e0001004 	.word	0xe0001004

08004000 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004006:	f3ef 8311 	mrs	r3, BASEPRI
 800400a:	f04f 0120 	mov.w	r1, #32
 800400e:	f381 8811 	msr	BASEPRI, r1
 8004012:	607b      	str	r3, [r7, #4]
 8004014:	4807      	ldr	r0, [pc, #28]	; (8004034 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004016:	f7ff f97a 	bl	800330e <_PreparePacket>
 800401a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800401c:	2211      	movs	r2, #17
 800401e:	6839      	ldr	r1, [r7, #0]
 8004020:	6838      	ldr	r0, [r7, #0]
 8004022:	f7ff fa4b 	bl	80034bc <_SendPacket>
  RECORD_END();
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f383 8811 	msr	BASEPRI, r3
}
 800402c:	bf00      	nop
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	2001529c 	.word	0x2001529c

08004038 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004038:	b580      	push	{r7, lr}
 800403a:	b088      	sub	sp, #32
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004040:	f3ef 8311 	mrs	r3, BASEPRI
 8004044:	f04f 0120 	mov.w	r1, #32
 8004048:	f381 8811 	msr	BASEPRI, r1
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	481a      	ldr	r0, [pc, #104]	; (80040b8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004050:	f7ff f95d 	bl	800330e <_PreparePacket>
 8004054:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800405a:	4b18      	ldr	r3, [pc, #96]	; (80040bc <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	089b      	lsrs	r3, r3, #2
 8004064:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	61fb      	str	r3, [r7, #28]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	61bb      	str	r3, [r7, #24]
 800406e:	e00b      	b.n	8004088 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	1c5a      	adds	r2, r3, #1
 8004074:	61fa      	str	r2, [r7, #28]
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	701a      	strb	r2, [r3, #0]
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	09db      	lsrs	r3, r3, #7
 8004086:	61bb      	str	r3, [r7, #24]
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	2b7f      	cmp	r3, #127	; 0x7f
 800408c:	d8f0      	bhi.n	8004070 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	61fa      	str	r2, [r7, #28]
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	701a      	strb	r2, [r3, #0]
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800409e:	2208      	movs	r2, #8
 80040a0:	68f9      	ldr	r1, [r7, #12]
 80040a2:	6938      	ldr	r0, [r7, #16]
 80040a4:	f7ff fa0a 	bl	80034bc <_SendPacket>
  RECORD_END();
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f383 8811 	msr	BASEPRI, r3
}
 80040ae:	bf00      	nop
 80040b0:	3720      	adds	r7, #32
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	2001529c 	.word	0x2001529c
 80040bc:	2001526c 	.word	0x2001526c

080040c0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80040c8:	f3ef 8311 	mrs	r3, BASEPRI
 80040cc:	f04f 0120 	mov.w	r1, #32
 80040d0:	f381 8811 	msr	BASEPRI, r1
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	481a      	ldr	r0, [pc, #104]	; (8004140 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80040d8:	f7ff f919 	bl	800330e <_PreparePacket>
 80040dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80040e2:	4b18      	ldr	r3, [pc, #96]	; (8004144 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	089b      	lsrs	r3, r3, #2
 80040ec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	61fb      	str	r3, [r7, #28]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	61bb      	str	r3, [r7, #24]
 80040f6:	e00b      	b.n	8004110 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	61fa      	str	r2, [r7, #28]
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	701a      	strb	r2, [r3, #0]
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	09db      	lsrs	r3, r3, #7
 800410e:	61bb      	str	r3, [r7, #24]
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	2b7f      	cmp	r3, #127	; 0x7f
 8004114:	d8f0      	bhi.n	80040f8 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	61fa      	str	r2, [r7, #28]
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	701a      	strb	r2, [r3, #0]
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004126:	2204      	movs	r2, #4
 8004128:	68f9      	ldr	r1, [r7, #12]
 800412a:	6938      	ldr	r0, [r7, #16]
 800412c:	f7ff f9c6 	bl	80034bc <_SendPacket>
  RECORD_END();
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f383 8811 	msr	BASEPRI, r3
}
 8004136:	bf00      	nop
 8004138:	3720      	adds	r7, #32
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	2001529c 	.word	0x2001529c
 8004144:	2001526c 	.word	0x2001526c

08004148 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004148:	b580      	push	{r7, lr}
 800414a:	b088      	sub	sp, #32
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004150:	f3ef 8311 	mrs	r3, BASEPRI
 8004154:	f04f 0120 	mov.w	r1, #32
 8004158:	f381 8811 	msr	BASEPRI, r1
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	481a      	ldr	r0, [pc, #104]	; (80041c8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004160:	f7ff f8d5 	bl	800330e <_PreparePacket>
 8004164:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800416a:	4b18      	ldr	r3, [pc, #96]	; (80041cc <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	089b      	lsrs	r3, r3, #2
 8004174:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	61fb      	str	r3, [r7, #28]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	61bb      	str	r3, [r7, #24]
 800417e:	e00b      	b.n	8004198 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	61fa      	str	r2, [r7, #28]
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	701a      	strb	r2, [r3, #0]
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	09db      	lsrs	r3, r3, #7
 8004196:	61bb      	str	r3, [r7, #24]
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	2b7f      	cmp	r3, #127	; 0x7f
 800419c:	d8f0      	bhi.n	8004180 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	61fa      	str	r2, [r7, #28]
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80041ae:	2206      	movs	r2, #6
 80041b0:	68f9      	ldr	r1, [r7, #12]
 80041b2:	6938      	ldr	r0, [r7, #16]
 80041b4:	f7ff f982 	bl	80034bc <_SendPacket>
  RECORD_END();
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f383 8811 	msr	BASEPRI, r3
}
 80041be:	bf00      	nop
 80041c0:	3720      	adds	r7, #32
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	2001529c 	.word	0x2001529c
 80041cc:	2001526c 	.word	0x2001526c

080041d0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80041d8:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	089b      	lsrs	r3, r3, #2
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	2001526c 	.word	0x2001526c

080041f4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08c      	sub	sp, #48	; 0x30
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	4603      	mov	r3, r0
 80041fc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80041fe:	4b3b      	ldr	r3, [pc, #236]	; (80042ec <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d06d      	beq.n	80042e2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004206:	4b39      	ldr	r3, [pc, #228]	; (80042ec <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800420c:	2300      	movs	r3, #0
 800420e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004210:	e008      	b.n	8004224 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421a:	2b00      	cmp	r3, #0
 800421c:	d007      	beq.n	800422e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800421e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004220:	3301      	adds	r3, #1
 8004222:	62bb      	str	r3, [r7, #40]	; 0x28
 8004224:	79fa      	ldrb	r2, [r7, #7]
 8004226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004228:	429a      	cmp	r2, r3
 800422a:	d8f2      	bhi.n	8004212 <SEGGER_SYSVIEW_SendModule+0x1e>
 800422c:	e000      	b.n	8004230 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800422e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004232:	2b00      	cmp	r3, #0
 8004234:	d055      	beq.n	80042e2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004236:	f3ef 8311 	mrs	r3, BASEPRI
 800423a:	f04f 0120 	mov.w	r1, #32
 800423e:	f381 8811 	msr	BASEPRI, r1
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	482a      	ldr	r0, [pc, #168]	; (80042f0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004246:	f7ff f862 	bl	800330e <_PreparePacket>
 800424a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	627b      	str	r3, [r7, #36]	; 0x24
 8004254:	79fb      	ldrb	r3, [r7, #7]
 8004256:	623b      	str	r3, [r7, #32]
 8004258:	e00b      	b.n	8004272 <SEGGER_SYSVIEW_SendModule+0x7e>
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	627a      	str	r2, [r7, #36]	; 0x24
 8004260:	6a3a      	ldr	r2, [r7, #32]
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	701a      	strb	r2, [r3, #0]
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	09db      	lsrs	r3, r3, #7
 8004270:	623b      	str	r3, [r7, #32]
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	2b7f      	cmp	r3, #127	; 0x7f
 8004276:	d8f0      	bhi.n	800425a <SEGGER_SYSVIEW_SendModule+0x66>
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	627a      	str	r2, [r7, #36]	; 0x24
 800427e:	6a3a      	ldr	r2, [r7, #32]
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	701a      	strb	r2, [r3, #0]
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	61fb      	str	r3, [r7, #28]
 800428c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	61bb      	str	r3, [r7, #24]
 8004292:	e00b      	b.n	80042ac <SEGGER_SYSVIEW_SendModule+0xb8>
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	61fa      	str	r2, [r7, #28]
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	701a      	strb	r2, [r3, #0]
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	09db      	lsrs	r3, r3, #7
 80042aa:	61bb      	str	r3, [r7, #24]
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	2b7f      	cmp	r3, #127	; 0x7f
 80042b0:	d8f0      	bhi.n	8004294 <SEGGER_SYSVIEW_SendModule+0xa0>
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	61fa      	str	r2, [r7, #28]
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	701a      	strb	r2, [r3, #0]
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80042c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2280      	movs	r2, #128	; 0x80
 80042c8:	4619      	mov	r1, r3
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f7fe ffd2 	bl	8003274 <_EncodeStr>
 80042d0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80042d2:	2216      	movs	r2, #22
 80042d4:	68f9      	ldr	r1, [r7, #12]
 80042d6:	6938      	ldr	r0, [r7, #16]
 80042d8:	f7ff f8f0 	bl	80034bc <_SendPacket>
      RECORD_END();
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80042e2:	bf00      	nop
 80042e4:	3730      	adds	r7, #48	; 0x30
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20015294 	.word	0x20015294
 80042f0:	2001529c 	.word	0x2001529c

080042f4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80042fa:	4b0c      	ldr	r3, [pc, #48]	; (800432c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00f      	beq.n	8004322 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004302:	4b0a      	ldr	r3, [pc, #40]	; (800432c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d002      	beq.n	8004316 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1f2      	bne.n	8004308 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004322:	bf00      	nop
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	20015294 	.word	0x20015294

08004330 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004336:	f3ef 8311 	mrs	r3, BASEPRI
 800433a:	f04f 0120 	mov.w	r1, #32
 800433e:	f381 8811 	msr	BASEPRI, r1
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	4817      	ldr	r0, [pc, #92]	; (80043a4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004346:	f7fe ffe2 	bl	800330e <_PreparePacket>
 800434a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	4b14      	ldr	r3, [pc, #80]	; (80043a8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	613b      	str	r3, [r7, #16]
 800435a:	e00b      	b.n	8004374 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	617a      	str	r2, [r7, #20]
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	b2d2      	uxtb	r2, r2
 8004366:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	09db      	lsrs	r3, r3, #7
 8004372:	613b      	str	r3, [r7, #16]
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	2b7f      	cmp	r3, #127	; 0x7f
 8004378:	d8f0      	bhi.n	800435c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	617a      	str	r2, [r7, #20]
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800438a:	221b      	movs	r2, #27
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	68b8      	ldr	r0, [r7, #8]
 8004390:	f7ff f894 	bl	80034bc <_SendPacket>
  RECORD_END();
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f383 8811 	msr	BASEPRI, r3
}
 800439a:	bf00      	nop
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	2001529c 	.word	0x2001529c
 80043a8:	20015298 	.word	0x20015298

080043ac <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b08a      	sub	sp, #40	; 0x28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80043b4:	f3ef 8311 	mrs	r3, BASEPRI
 80043b8:	f04f 0120 	mov.w	r1, #32
 80043bc:	f381 8811 	msr	BASEPRI, r1
 80043c0:	617b      	str	r3, [r7, #20]
 80043c2:	4827      	ldr	r0, [pc, #156]	; (8004460 <SEGGER_SYSVIEW_Warn+0xb4>)
 80043c4:	f7fe ffa3 	bl	800330e <_PreparePacket>
 80043c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80043ca:	2280      	movs	r2, #128	; 0x80
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	6938      	ldr	r0, [r7, #16]
 80043d0:	f7fe ff50 	bl	8003274 <_EncodeStr>
 80043d4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
 80043da:	2301      	movs	r3, #1
 80043dc:	623b      	str	r3, [r7, #32]
 80043de:	e00b      	b.n	80043f8 <SEGGER_SYSVIEW_Warn+0x4c>
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	627a      	str	r2, [r7, #36]	; 0x24
 80043e6:	6a3a      	ldr	r2, [r7, #32]
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	701a      	strb	r2, [r3, #0]
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	09db      	lsrs	r3, r3, #7
 80043f6:	623b      	str	r3, [r7, #32]
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	2b7f      	cmp	r3, #127	; 0x7f
 80043fc:	d8f0      	bhi.n	80043e0 <SEGGER_SYSVIEW_Warn+0x34>
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	627a      	str	r2, [r7, #36]	; 0x24
 8004404:	6a3a      	ldr	r2, [r7, #32]
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	701a      	strb	r2, [r3, #0]
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	61fb      	str	r3, [r7, #28]
 8004412:	2300      	movs	r3, #0
 8004414:	61bb      	str	r3, [r7, #24]
 8004416:	e00b      	b.n	8004430 <SEGGER_SYSVIEW_Warn+0x84>
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	61fa      	str	r2, [r7, #28]
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	701a      	strb	r2, [r3, #0]
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	09db      	lsrs	r3, r3, #7
 800442e:	61bb      	str	r3, [r7, #24]
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	2b7f      	cmp	r3, #127	; 0x7f
 8004434:	d8f0      	bhi.n	8004418 <SEGGER_SYSVIEW_Warn+0x6c>
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	61fa      	str	r2, [r7, #28]
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	701a      	strb	r2, [r3, #0]
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004446:	221a      	movs	r2, #26
 8004448:	68f9      	ldr	r1, [r7, #12]
 800444a:	6938      	ldr	r0, [r7, #16]
 800444c:	f7ff f836 	bl	80034bc <_SendPacket>
  RECORD_END();
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f383 8811 	msr	BASEPRI, r3
}
 8004456:	bf00      	nop
 8004458:	3728      	adds	r7, #40	; 0x28
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	2001529c 	.word	0x2001529c

08004464 <main>:
void Setup(void);
void GPIO_Config(void);
void USART_Config(void);
void USART_TX(char *msg);
int main(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af02      	add	r7, sp, #8

	DWT->CTRL |= (1<<0);  // ENABLE TIMESTAMP
 800446a:	4a17      	ldr	r2, [pc, #92]	; (80044c8 <main+0x64>)
 800446c:	4b16      	ldr	r3, [pc, #88]	; (80044c8 <main+0x64>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	6013      	str	r3, [r2, #0]
   /* CONFIGURE SYSTEM CLOCK AS HSI || HSI ON ||HSE AND PLL OFF || SYSTEM CLOCK 16 MHz*/
	RCC_DeInit();
 8004476:	f7fb ff8b 	bl	8000390 <RCC_DeInit>
   /*Update System Clock as 16MHz*/
   SystemCoreClockUpdate();
 800447a:	f000 f989 	bl	8004790 <SystemCoreClockUpdate>
   Setup();
 800447e:	f000 f891 	bl	80045a4 <Setup>
   /* DO SEGGER SYSVIEW CONFIG AND START SYSVIEW*/
   SEGGER_SYSVIEW_Conf();
 8004482:	f7fe fba1 	bl	8002bc8 <SEGGER_SYSVIEW_Conf>
   SEGGER_SYSVIEW_Start();
 8004486:	f7ff faf5 	bl	8003a74 <SEGGER_SYSVIEW_Start>

   snprintf(myMessage,sizeof(myMessage),"Hello\r\n");
 800448a:	4a10      	ldr	r2, [pc, #64]	; (80044cc <main+0x68>)
 800448c:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <main+0x6c>)
 800448e:	cb03      	ldmia	r3!, {r0, r1}
 8004490:	6010      	str	r0, [r2, #0]
 8004492:	6051      	str	r1, [r2, #4]
   USART_TX(myMessage);
 8004494:	480d      	ldr	r0, [pc, #52]	; (80044cc <main+0x68>)
 8004496:	f000 f8e3 	bl	8004660 <USART_TX>
   /*TASK1 Create*/
   xTaskCreate(Task1_Handler,"Task 1",configMINIMAL_STACK_SIZE,NULL,3,&myTask1Handle);
 800449a:	4b0e      	ldr	r3, [pc, #56]	; (80044d4 <main+0x70>)
 800449c:	9301      	str	r3, [sp, #4]
 800449e:	2303      	movs	r3, #3
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	2300      	movs	r3, #0
 80044a4:	2282      	movs	r2, #130	; 0x82
 80044a6:	490c      	ldr	r1, [pc, #48]	; (80044d8 <main+0x74>)
 80044a8:	480c      	ldr	r0, [pc, #48]	; (80044dc <main+0x78>)
 80044aa:	f7fd f951 	bl	8001750 <xTaskCreate>
   /*TASK2 Create*/
   xTaskCreate(Task2_Handler,"Task 2",configMINIMAL_STACK_SIZE,NULL,3,&myTask2Handle);
 80044ae:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <main+0x7c>)
 80044b0:	9301      	str	r3, [sp, #4]
 80044b2:	2303      	movs	r3, #3
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	2300      	movs	r3, #0
 80044b8:	2282      	movs	r2, #130	; 0x82
 80044ba:	490a      	ldr	r1, [pc, #40]	; (80044e4 <main+0x80>)
 80044bc:	480a      	ldr	r0, [pc, #40]	; (80044e8 <main+0x84>)
 80044be:	f7fd f947 	bl	8001750 <xTaskCreate>

   vTaskStartScheduler();
 80044c2:	f7fd facb 	bl	8001a5c <vTaskStartScheduler>

  while (1)
 80044c6:	e7fe      	b.n	80044c6 <main+0x62>
 80044c8:	e0001000 	.word	0xe0001000
 80044cc:	20015470 	.word	0x20015470
 80044d0:	08004b10 	.word	0x08004b10
 80044d4:	20015380 	.word	0x20015380
 80044d8:	08004b18 	.word	0x08004b18
 80044dc:	080044ed 	.word	0x080044ed
 80044e0:	20015384 	.word	0x20015384
 80044e4:	08004b20 	.word	0x08004b20
 80044e8:	08004549 	.word	0x08004549

080044ec <Task1_Handler>:
  }

}

void Task1_Handler(void *params)
{
 80044ec:	b5b0      	push	{r4, r5, r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
    while(1)
     {
    	   if(UART_ACCESS_KEY ==1)
 80044f4:	4b10      	ldr	r3, [pc, #64]	; (8004538 <Task1_Handler+0x4c>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0fb      	beq.n	80044f4 <Task1_Handler+0x8>
    	   {
    		 UART_ACCESS_KEY = 0;
 80044fc:	4b0e      	ldr	r3, [pc, #56]	; (8004538 <Task1_Handler+0x4c>)
 80044fe:	2200      	movs	r2, #0
 8004500:	701a      	strb	r2, [r3, #0]
    	     snprintf(myMessage,sizeof(myMessage),"This is task 1\r\n");
 8004502:	4a0e      	ldr	r2, [pc, #56]	; (800453c <Task1_Handler+0x50>)
 8004504:	4b0e      	ldr	r3, [pc, #56]	; (8004540 <Task1_Handler+0x54>)
 8004506:	4615      	mov	r5, r2
 8004508:	461c      	mov	r4, r3
 800450a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800450c:	6028      	str	r0, [r5, #0]
 800450e:	6069      	str	r1, [r5, #4]
 8004510:	60aa      	str	r2, [r5, #8]
 8004512:	60eb      	str	r3, [r5, #12]
 8004514:	7823      	ldrb	r3, [r4, #0]
 8004516:	742b      	strb	r3, [r5, #16]
    	     USART_TX(myMessage);
 8004518:	4808      	ldr	r0, [pc, #32]	; (800453c <Task1_Handler+0x50>)
 800451a:	f000 f8a1 	bl	8004660 <USART_TX>
    	     UART_ACCESS_KEY = 1;
 800451e:	4b06      	ldr	r3, [pc, #24]	; (8004538 <Task1_Handler+0x4c>)
 8004520:	2201      	movs	r2, #1
 8004522:	701a      	strb	r2, [r3, #0]
    	     taskYIELD();
 8004524:	4b07      	ldr	r3, [pc, #28]	; (8004544 <Task1_Handler+0x58>)
 8004526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	f3bf 8f6f 	isb	sy
    	   if(UART_ACCESS_KEY ==1)
 8004534:	e7de      	b.n	80044f4 <Task1_Handler+0x8>
 8004536:	bf00      	nop
 8004538:	20000018 	.word	0x20000018
 800453c:	20015470 	.word	0x20015470
 8004540:	08004b28 	.word	0x08004b28
 8004544:	e000ed04 	.word	0xe000ed04

08004548 <Task2_Handler>:
    	   }
     }
}

void Task2_Handler(void *params)
{
 8004548:	b5b0      	push	{r4, r5, r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
	while(1)
	 {
		if(UART_ACCESS_KEY == 1)
 8004550:	4b10      	ldr	r3, [pc, #64]	; (8004594 <Task2_Handler+0x4c>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0fb      	beq.n	8004550 <Task2_Handler+0x8>
		{
		UART_ACCESS_KEY = 0;
 8004558:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <Task2_Handler+0x4c>)
 800455a:	2200      	movs	r2, #0
 800455c:	701a      	strb	r2, [r3, #0]
 	    snprintf(myMessage,sizeof(myMessage),"This is task 2\r\n");
 800455e:	4a0e      	ldr	r2, [pc, #56]	; (8004598 <Task2_Handler+0x50>)
 8004560:	4b0e      	ldr	r3, [pc, #56]	; (800459c <Task2_Handler+0x54>)
 8004562:	4615      	mov	r5, r2
 8004564:	461c      	mov	r4, r3
 8004566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004568:	6028      	str	r0, [r5, #0]
 800456a:	6069      	str	r1, [r5, #4]
 800456c:	60aa      	str	r2, [r5, #8]
 800456e:	60eb      	str	r3, [r5, #12]
 8004570:	7823      	ldrb	r3, [r4, #0]
 8004572:	742b      	strb	r3, [r5, #16]
 	    USART_TX(myMessage);
 8004574:	4808      	ldr	r0, [pc, #32]	; (8004598 <Task2_Handler+0x50>)
 8004576:	f000 f873 	bl	8004660 <USART_TX>
 	    UART_ACCESS_KEY = 1;
 800457a:	4b06      	ldr	r3, [pc, #24]	; (8004594 <Task2_Handler+0x4c>)
 800457c:	2201      	movs	r2, #1
 800457e:	701a      	strb	r2, [r3, #0]
 	    taskYIELD();
 8004580:	4b07      	ldr	r3, [pc, #28]	; (80045a0 <Task2_Handler+0x58>)
 8004582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	f3bf 8f6f 	isb	sy
		if(UART_ACCESS_KEY == 1)
 8004590:	e7de      	b.n	8004550 <Task2_Handler+0x8>
 8004592:	bf00      	nop
 8004594:	20000018 	.word	0x20000018
 8004598:	20015470 	.word	0x20015470
 800459c:	08004b3c 	.word	0x08004b3c
 80045a0:	e000ed04 	.word	0xe000ed04

080045a4 <Setup>:

		}
	 }
}
void Setup(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  GPIO_Config();
 80045a8:	f000 f804 	bl	80045b4 <GPIO_Config>
  USART_Config();
 80045ac:	f000 f82e 	bl	800460c <USART_Config>
}
 80045b0:	bf00      	nop
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <GPIO_Config>:
void GPIO_Config(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct;
	 memset(&GPIO_InitStruct,0,sizeof(GPIO_InitStruct));
 80045ba:	463b      	mov	r3, r7
 80045bc:	2208      	movs	r2, #8
 80045be:	2100      	movs	r1, #0
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fa1b 	bl	80049fc <memset>

	 RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 80045c6:	2101      	movs	r1, #1
 80045c8:	2001      	movs	r0, #1
 80045ca:	f7fb ffb7 	bl	800053c <RCC_AHB1PeriphClockCmd>

	 GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2); // USART2 TX
 80045ce:	2207      	movs	r2, #7
 80045d0:	2102      	movs	r1, #2
 80045d2:	480d      	ldr	r0, [pc, #52]	; (8004608 <GPIO_Config+0x54>)
 80045d4:	f7fb fe92 	bl	80002fc <GPIO_PinAFConfig>
	 GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2); // USART2 RX
 80045d8:	2207      	movs	r2, #7
 80045da:	2103      	movs	r1, #3
 80045dc:	480a      	ldr	r0, [pc, #40]	; (8004608 <GPIO_Config+0x54>)
 80045de:	f7fb fe8d 	bl	80002fc <GPIO_PinAFConfig>

	 GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 80045e2:	2302      	movs	r3, #2
 80045e4:	713b      	strb	r3, [r7, #4]
	 GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80045e6:	2300      	movs	r3, #0
 80045e8:	71bb      	strb	r3, [r7, #6]
	 GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 80045ea:	230c      	movs	r3, #12
 80045ec:	603b      	str	r3, [r7, #0]
	 GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80045ee:	2301      	movs	r3, #1
 80045f0:	71fb      	strb	r3, [r7, #7]
	 GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80045f2:	2303      	movs	r3, #3
 80045f4:	717b      	strb	r3, [r7, #5]

	 GPIO_Init(GPIOA,&GPIO_InitStruct);
 80045f6:	463b      	mov	r3, r7
 80045f8:	4619      	mov	r1, r3
 80045fa:	4803      	ldr	r0, [pc, #12]	; (8004608 <GPIO_Config+0x54>)
 80045fc:	f7fb fdf0 	bl	80001e0 <GPIO_Init>

}
 8004600:	bf00      	nop
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40020000 	.word	0x40020000

0800460c <USART_Config>:
void USART_Config(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
	USART_InitTypeDef USART_InitStruct;
	memset(&USART_InitStruct,0,sizeof(USART_InitStruct));
 8004612:	463b      	mov	r3, r7
 8004614:	2210      	movs	r2, #16
 8004616:	2100      	movs	r1, #0
 8004618:	4618      	mov	r0, r3
 800461a:	f000 f9ef 	bl	80049fc <memset>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
 800461e:	2101      	movs	r1, #1
 8004620:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004624:	f7fb ffaa 	bl	800057c <RCC_APB1PeriphClockCmd>

	USART_InitStruct.USART_BaudRate = 115200;
 8004628:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800462c:	603b      	str	r3, [r7, #0]
	USART_InitStruct.USART_WordLength =  USART_WordLength_8b;
 800462e:	2300      	movs	r3, #0
 8004630:	80bb      	strh	r3, [r7, #4]
	USART_InitStruct.USART_Mode = USART_Mode_Tx;
 8004632:	2308      	movs	r3, #8
 8004634:	817b      	strh	r3, [r7, #10]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8004636:	2300      	movs	r3, #0
 8004638:	81bb      	strh	r3, [r7, #12]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 800463a:	2300      	movs	r3, #0
 800463c:	813b      	strh	r3, [r7, #8]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 800463e:	2300      	movs	r3, #0
 8004640:	80fb      	strh	r3, [r7, #6]

	USART_Init(USART2,&USART_InitStruct);
 8004642:	463b      	mov	r3, r7
 8004644:	4619      	mov	r1, r3
 8004646:	4805      	ldr	r0, [pc, #20]	; (800465c <USART_Config+0x50>)
 8004648:	f7fb ffb8 	bl	80005bc <USART_Init>

	USART_Cmd(USART2,ENABLE);
 800464c:	2101      	movs	r1, #1
 800464e:	4803      	ldr	r0, [pc, #12]	; (800465c <USART_Config+0x50>)
 8004650:	f7fc f86e 	bl	8000730 <USART_Cmd>
}
 8004654:	bf00      	nop
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40004400 	.word	0x40004400

08004660 <USART_TX>:
void USART_TX(char *msg)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]

 for(int i = 0; i < strlen(msg);i++)
 8004668:	2300      	movs	r3, #0
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	e013      	b.n	8004696 <USART_TX+0x36>
 {

	while(USART_GetFlagStatus(USART2,USART_FLAG_TXE)!= SET);
 800466e:	bf00      	nop
 8004670:	2180      	movs	r1, #128	; 0x80
 8004672:	480e      	ldr	r0, [pc, #56]	; (80046ac <USART_TX+0x4c>)
 8004674:	f7fc f88e 	bl	8000794 <USART_GetFlagStatus>
 8004678:	4603      	mov	r3, r0
 800467a:	2b01      	cmp	r3, #1
 800467c:	d1f8      	bne.n	8004670 <USART_TX+0x10>
	USART_SendData(USART2, msg[i]);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	4413      	add	r3, r2
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	b29b      	uxth	r3, r3
 8004688:	4619      	mov	r1, r3
 800468a:	4808      	ldr	r0, [pc, #32]	; (80046ac <USART_TX+0x4c>)
 800468c:	f7fc f870 	bl	8000770 <USART_SendData>
 for(int i = 0; i < strlen(msg);i++)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	3301      	adds	r3, #1
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fb fd9a 	bl	80001d0 <strlen>
 800469c:	4602      	mov	r2, r0
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d8e4      	bhi.n	800466e <USART_TX+0xe>
 }

}
 80046a4:	bf00      	nop
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40004400 	.word	0x40004400

080046b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80046b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80046e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80046b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80046b6:	e003      	b.n	80046c0 <LoopCopyDataInit>

080046b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80046b8:	4b0c      	ldr	r3, [pc, #48]	; (80046ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80046ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80046bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80046be:	3104      	adds	r1, #4

080046c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80046c0:	480b      	ldr	r0, [pc, #44]	; (80046f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80046c2:	4b0c      	ldr	r3, [pc, #48]	; (80046f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80046c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80046c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80046c8:	d3f6      	bcc.n	80046b8 <CopyDataInit>
  ldr  r2, =_sbss
 80046ca:	4a0b      	ldr	r2, [pc, #44]	; (80046f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80046cc:	e002      	b.n	80046d4 <LoopFillZerobss>

080046ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80046ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80046d0:	f842 3b04 	str.w	r3, [r2], #4

080046d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80046d4:	4b09      	ldr	r3, [pc, #36]	; (80046fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80046d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80046d8:	d3f9      	bcc.n	80046ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80046da:	f000 f823 	bl	8004724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046de:	f000 f94f 	bl	8004980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046e2:	f7ff febf 	bl	8004464 <main>
  bx  lr    
 80046e6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80046e8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80046ec:	08004b6c 	.word	0x08004b6c
  ldr  r0, =_sdata
 80046f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80046f4:	20000030 	.word	0x20000030
  ldr  r2, =_sbss
 80046f8:	20000030 	.word	0x20000030
  ldr  r3, = _ebss
 80046fc:	200154d4 	.word	0x200154d4

08004700 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004700:	e7fe      	b.n	8004700 <ADC_IRQHandler>

08004702 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8004702:	b480      	push	{r7}
 8004704:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8004706:	e7fe      	b.n	8004706 <MemManage_Handler+0x4>

08004708 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800470c:	e7fe      	b.n	800470c <BusFault_Handler+0x4>

0800470e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800470e:	b480      	push	{r7}
 8004710:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004712:	e7fe      	b.n	8004712 <UsageFault_Handler+0x4>

08004714 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
}
 8004718:	bf00      	nop
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
	...

08004724 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004728:	4a16      	ldr	r2, [pc, #88]	; (8004784 <SystemInit+0x60>)
 800472a:	4b16      	ldr	r3, [pc, #88]	; (8004784 <SystemInit+0x60>)
 800472c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004738:	4a13      	ldr	r2, [pc, #76]	; (8004788 <SystemInit+0x64>)
 800473a:	4b13      	ldr	r3, [pc, #76]	; (8004788 <SystemInit+0x64>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f043 0301 	orr.w	r3, r3, #1
 8004742:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004744:	4b10      	ldr	r3, [pc, #64]	; (8004788 <SystemInit+0x64>)
 8004746:	2200      	movs	r2, #0
 8004748:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800474a:	4a0f      	ldr	r2, [pc, #60]	; (8004788 <SystemInit+0x64>)
 800474c:	4b0e      	ldr	r3, [pc, #56]	; (8004788 <SystemInit+0x64>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004758:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800475a:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <SystemInit+0x64>)
 800475c:	4a0b      	ldr	r2, [pc, #44]	; (800478c <SystemInit+0x68>)
 800475e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004760:	4a09      	ldr	r2, [pc, #36]	; (8004788 <SystemInit+0x64>)
 8004762:	4b09      	ldr	r3, [pc, #36]	; (8004788 <SystemInit+0x64>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800476a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800476c:	4b06      	ldr	r3, [pc, #24]	; (8004788 <SystemInit+0x64>)
 800476e:	2200      	movs	r2, #0
 8004770:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8004772:	f000 f889 	bl	8004888 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004776:	4b03      	ldr	r3, [pc, #12]	; (8004784 <SystemInit+0x60>)
 8004778:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800477c:	609a      	str	r2, [r3, #8]
#endif
}
 800477e:	bf00      	nop
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	e000ed00 	.word	0xe000ed00
 8004788:	40023800 	.word	0x40023800
 800478c:	24003010 	.word	0x24003010

08004790 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004790:	b480      	push	{r7}
 8004792:	b087      	sub	sp, #28
 8004794:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8004796:	2300      	movs	r3, #0
 8004798:	613b      	str	r3, [r7, #16]
 800479a:	2300      	movs	r3, #0
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	2302      	movs	r3, #2
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	2300      	movs	r3, #0
 80047a4:	60bb      	str	r3, [r7, #8]
 80047a6:	2302      	movs	r3, #2
 80047a8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80047aa:	4b32      	ldr	r3, [pc, #200]	; (8004874 <SystemCoreClockUpdate+0xe4>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 030c 	and.w	r3, r3, #12
 80047b2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d007      	beq.n	80047ca <SystemCoreClockUpdate+0x3a>
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d009      	beq.n	80047d2 <SystemCoreClockUpdate+0x42>
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d13d      	bne.n	800483e <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80047c2:	4b2d      	ldr	r3, [pc, #180]	; (8004878 <SystemCoreClockUpdate+0xe8>)
 80047c4:	4a2d      	ldr	r2, [pc, #180]	; (800487c <SystemCoreClockUpdate+0xec>)
 80047c6:	601a      	str	r2, [r3, #0]
      break;
 80047c8:	e03d      	b.n	8004846 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80047ca:	4b2b      	ldr	r3, [pc, #172]	; (8004878 <SystemCoreClockUpdate+0xe8>)
 80047cc:	4a2c      	ldr	r2, [pc, #176]	; (8004880 <SystemCoreClockUpdate+0xf0>)
 80047ce:	601a      	str	r2, [r3, #0]
      break;
 80047d0:	e039      	b.n	8004846 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80047d2:	4b28      	ldr	r3, [pc, #160]	; (8004874 <SystemCoreClockUpdate+0xe4>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	0d9b      	lsrs	r3, r3, #22
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047de:	4b25      	ldr	r3, [pc, #148]	; (8004874 <SystemCoreClockUpdate+0xe4>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047e6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00c      	beq.n	8004808 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80047ee:	4a24      	ldr	r2, [pc, #144]	; (8004880 <SystemCoreClockUpdate+0xf0>)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f6:	4a1f      	ldr	r2, [pc, #124]	; (8004874 <SystemCoreClockUpdate+0xe4>)
 80047f8:	6852      	ldr	r2, [r2, #4]
 80047fa:	0992      	lsrs	r2, r2, #6
 80047fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004800:	fb02 f303 	mul.w	r3, r2, r3
 8004804:	617b      	str	r3, [r7, #20]
 8004806:	e00b      	b.n	8004820 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8004808:	4a1c      	ldr	r2, [pc, #112]	; (800487c <SystemCoreClockUpdate+0xec>)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004810:	4a18      	ldr	r2, [pc, #96]	; (8004874 <SystemCoreClockUpdate+0xe4>)
 8004812:	6852      	ldr	r2, [r2, #4]
 8004814:	0992      	lsrs	r2, r2, #6
 8004816:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800481a:	fb02 f303 	mul.w	r3, r2, r3
 800481e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004820:	4b14      	ldr	r3, [pc, #80]	; (8004874 <SystemCoreClockUpdate+0xe4>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	0c1b      	lsrs	r3, r3, #16
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	3301      	adds	r3, #1
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	fbb2 f3f3 	udiv	r3, r2, r3
 8004838:	4a0f      	ldr	r2, [pc, #60]	; (8004878 <SystemCoreClockUpdate+0xe8>)
 800483a:	6013      	str	r3, [r2, #0]
      break;
 800483c:	e003      	b.n	8004846 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800483e:	4b0e      	ldr	r3, [pc, #56]	; (8004878 <SystemCoreClockUpdate+0xe8>)
 8004840:	4a0e      	ldr	r2, [pc, #56]	; (800487c <SystemCoreClockUpdate+0xec>)
 8004842:	601a      	str	r2, [r3, #0]
      break;
 8004844:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004846:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <SystemCoreClockUpdate+0xe4>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	091b      	lsrs	r3, r3, #4
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	4a0c      	ldr	r2, [pc, #48]	; (8004884 <SystemCoreClockUpdate+0xf4>)
 8004852:	5cd3      	ldrb	r3, [r2, r3]
 8004854:	b2db      	uxtb	r3, r3
 8004856:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8004858:	4b07      	ldr	r3, [pc, #28]	; (8004878 <SystemCoreClockUpdate+0xe8>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	fa22 f303 	lsr.w	r3, r2, r3
 8004862:	4a05      	ldr	r2, [pc, #20]	; (8004878 <SystemCoreClockUpdate+0xe8>)
 8004864:	6013      	str	r3, [r2, #0]
}
 8004866:	bf00      	nop
 8004868:	371c      	adds	r7, #28
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	40023800 	.word	0x40023800
 8004878:	2000001c 	.word	0x2000001c
 800487c:	00f42400 	.word	0x00f42400
 8004880:	007a1200 	.word	0x007a1200
 8004884:	20000020 	.word	0x20000020

08004888 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800488e:	2300      	movs	r3, #0
 8004890:	607b      	str	r3, [r7, #4]
 8004892:	2300      	movs	r3, #0
 8004894:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8004896:	4a36      	ldr	r2, [pc, #216]	; (8004970 <SetSysClock+0xe8>)
 8004898:	4b35      	ldr	r3, [pc, #212]	; (8004970 <SetSysClock+0xe8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80048a2:	4b33      	ldr	r3, [pc, #204]	; (8004970 <SetSysClock+0xe8>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048aa:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3301      	adds	r3, #1
 80048b0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d103      	bne.n	80048c0 <SetSysClock+0x38>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80048be:	d1f0      	bne.n	80048a2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80048c0:	4b2b      	ldr	r3, [pc, #172]	; (8004970 <SetSysClock+0xe8>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80048cc:	2301      	movs	r3, #1
 80048ce:	603b      	str	r3, [r7, #0]
 80048d0:	e001      	b.n	80048d6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80048d2:	2300      	movs	r3, #0
 80048d4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d142      	bne.n	8004962 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80048dc:	4a24      	ldr	r2, [pc, #144]	; (8004970 <SetSysClock+0xe8>)
 80048de:	4b24      	ldr	r3, [pc, #144]	; (8004970 <SetSysClock+0xe8>)
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048e6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80048e8:	4a22      	ldr	r2, [pc, #136]	; (8004974 <SetSysClock+0xec>)
 80048ea:	4b22      	ldr	r3, [pc, #136]	; (8004974 <SetSysClock+0xec>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048f2:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80048f4:	4a1e      	ldr	r2, [pc, #120]	; (8004970 <SetSysClock+0xe8>)
 80048f6:	4b1e      	ldr	r3, [pc, #120]	; (8004970 <SetSysClock+0xe8>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80048fc:	4a1c      	ldr	r2, [pc, #112]	; (8004970 <SetSysClock+0xe8>)
 80048fe:	4b1c      	ldr	r3, [pc, #112]	; (8004970 <SetSysClock+0xe8>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004906:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004908:	4a19      	ldr	r2, [pc, #100]	; (8004970 <SetSysClock+0xe8>)
 800490a:	4b19      	ldr	r3, [pc, #100]	; (8004970 <SetSysClock+0xe8>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8004912:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8004914:	4b16      	ldr	r3, [pc, #88]	; (8004970 <SetSysClock+0xe8>)
 8004916:	4a18      	ldr	r2, [pc, #96]	; (8004978 <SetSysClock+0xf0>)
 8004918:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800491a:	4a15      	ldr	r2, [pc, #84]	; (8004970 <SetSysClock+0xe8>)
 800491c:	4b14      	ldr	r3, [pc, #80]	; (8004970 <SetSysClock+0xe8>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004924:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8004926:	bf00      	nop
 8004928:	4b11      	ldr	r3, [pc, #68]	; (8004970 <SetSysClock+0xe8>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0f9      	beq.n	8004928 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8004934:	4b11      	ldr	r3, [pc, #68]	; (800497c <SetSysClock+0xf4>)
 8004936:	f240 7205 	movw	r2, #1797	; 0x705
 800493a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800493c:	4a0c      	ldr	r2, [pc, #48]	; (8004970 <SetSysClock+0xe8>)
 800493e:	4b0c      	ldr	r3, [pc, #48]	; (8004970 <SetSysClock+0xe8>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f023 0303 	bic.w	r3, r3, #3
 8004946:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004948:	4a09      	ldr	r2, [pc, #36]	; (8004970 <SetSysClock+0xe8>)
 800494a:	4b09      	ldr	r3, [pc, #36]	; (8004970 <SetSysClock+0xe8>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f043 0302 	orr.w	r3, r3, #2
 8004952:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8004954:	bf00      	nop
 8004956:	4b06      	ldr	r3, [pc, #24]	; (8004970 <SetSysClock+0xe8>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 030c 	and.w	r3, r3, #12
 800495e:	2b08      	cmp	r3, #8
 8004960:	d1f9      	bne.n	8004956 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	40023800 	.word	0x40023800
 8004974:	40007000 	.word	0x40007000
 8004978:	07405419 	.word	0x07405419
 800497c:	40023c00 	.word	0x40023c00

08004980 <__libc_init_array>:
 8004980:	b570      	push	{r4, r5, r6, lr}
 8004982:	4e0d      	ldr	r6, [pc, #52]	; (80049b8 <__libc_init_array+0x38>)
 8004984:	4c0d      	ldr	r4, [pc, #52]	; (80049bc <__libc_init_array+0x3c>)
 8004986:	1ba4      	subs	r4, r4, r6
 8004988:	10a4      	asrs	r4, r4, #2
 800498a:	2500      	movs	r5, #0
 800498c:	42a5      	cmp	r5, r4
 800498e:	d109      	bne.n	80049a4 <__libc_init_array+0x24>
 8004990:	4e0b      	ldr	r6, [pc, #44]	; (80049c0 <__libc_init_array+0x40>)
 8004992:	4c0c      	ldr	r4, [pc, #48]	; (80049c4 <__libc_init_array+0x44>)
 8004994:	f000 f83a 	bl	8004a0c <_init>
 8004998:	1ba4      	subs	r4, r4, r6
 800499a:	10a4      	asrs	r4, r4, #2
 800499c:	2500      	movs	r5, #0
 800499e:	42a5      	cmp	r5, r4
 80049a0:	d105      	bne.n	80049ae <__libc_init_array+0x2e>
 80049a2:	bd70      	pop	{r4, r5, r6, pc}
 80049a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049a8:	4798      	blx	r3
 80049aa:	3501      	adds	r5, #1
 80049ac:	e7ee      	b.n	800498c <__libc_init_array+0xc>
 80049ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049b2:	4798      	blx	r3
 80049b4:	3501      	adds	r5, #1
 80049b6:	e7f2      	b.n	800499e <__libc_init_array+0x1e>
 80049b8:	08004b64 	.word	0x08004b64
 80049bc:	08004b64 	.word	0x08004b64
 80049c0:	08004b64 	.word	0x08004b64
 80049c4:	08004b68 	.word	0x08004b68

080049c8 <memcmp>:
 80049c8:	b510      	push	{r4, lr}
 80049ca:	3901      	subs	r1, #1
 80049cc:	4402      	add	r2, r0
 80049ce:	4290      	cmp	r0, r2
 80049d0:	d101      	bne.n	80049d6 <memcmp+0xe>
 80049d2:	2000      	movs	r0, #0
 80049d4:	bd10      	pop	{r4, pc}
 80049d6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80049da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80049de:	42a3      	cmp	r3, r4
 80049e0:	d0f5      	beq.n	80049ce <memcmp+0x6>
 80049e2:	1b18      	subs	r0, r3, r4
 80049e4:	bd10      	pop	{r4, pc}

080049e6 <memcpy>:
 80049e6:	b510      	push	{r4, lr}
 80049e8:	1e43      	subs	r3, r0, #1
 80049ea:	440a      	add	r2, r1
 80049ec:	4291      	cmp	r1, r2
 80049ee:	d100      	bne.n	80049f2 <memcpy+0xc>
 80049f0:	bd10      	pop	{r4, pc}
 80049f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049fa:	e7f7      	b.n	80049ec <memcpy+0x6>

080049fc <memset>:
 80049fc:	4402      	add	r2, r0
 80049fe:	4603      	mov	r3, r0
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d100      	bne.n	8004a06 <memset+0xa>
 8004a04:	4770      	bx	lr
 8004a06:	f803 1b01 	strb.w	r1, [r3], #1
 8004a0a:	e7f9      	b.n	8004a00 <memset+0x4>

08004a0c <_init>:
 8004a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0e:	bf00      	nop
 8004a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a12:	bc08      	pop	{r3}
 8004a14:	469e      	mov	lr, r3
 8004a16:	4770      	bx	lr

08004a18 <_fini>:
 8004a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1a:	bf00      	nop
 8004a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a1e:	bc08      	pop	{r3}
 8004a20:	469e      	mov	lr, r3
 8004a22:	4770      	bx	lr
