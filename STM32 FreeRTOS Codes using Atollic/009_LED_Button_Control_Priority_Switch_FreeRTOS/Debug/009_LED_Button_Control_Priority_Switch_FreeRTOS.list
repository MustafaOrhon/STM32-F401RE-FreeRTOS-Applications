
009_LED_Button_Control_Priority_Switch_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cdc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08003e6c  08003e6c  00013e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003f20  08003f20  00013f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003f24  08003f24  00013f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000090  20000000  08003f28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
  7 .bss          00012e10  20000090  20000090  00020090  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20012ea0  20012ea0  00020090  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000bd17  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001c6c  00000000  00000000  0002bdd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009e0  00000000  00000000  0002da48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008f8  00000000  00000000  0002e428  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004c85  00000000  00000000  0002ed20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003dce  00000000  00000000  000339a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00037773  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002bb8  00000000  00000000  000377f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0003a3a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003e54 	.word	0x08003e54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08003e54 	.word	0x08003e54

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 800028c:	4b34      	ldr	r3, [pc, #208]	; (8000360 <EXTI_Init+0xe0>)
 800028e:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	799b      	ldrb	r3, [r3, #6]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d04f      	beq.n	8000338 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000298:	4931      	ldr	r1, [pc, #196]	; (8000360 <EXTI_Init+0xe0>)
 800029a:	4b31      	ldr	r3, [pc, #196]	; (8000360 <EXTI_Init+0xe0>)
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	43db      	mvns	r3, r3
 80002a4:	4013      	ands	r3, r2
 80002a6:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80002a8:	492d      	ldr	r1, [pc, #180]	; (8000360 <EXTI_Init+0xe0>)
 80002aa:	4b2d      	ldr	r3, [pc, #180]	; (8000360 <EXTI_Init+0xe0>)
 80002ac:	685a      	ldr	r2, [r3, #4]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	43db      	mvns	r3, r3
 80002b4:	4013      	ands	r3, r2
 80002b6:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	791b      	ldrb	r3, [r3, #4]
 80002bc:	461a      	mov	r2, r3
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	4413      	add	r3, r2
 80002c2:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	68fa      	ldr	r2, [r7, #12]
 80002c8:	6811      	ldr	r1, [r2, #0]
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	6812      	ldr	r2, [r2, #0]
 80002ce:	430a      	orrs	r2, r1
 80002d0:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80002d2:	4923      	ldr	r1, [pc, #140]	; (8000360 <EXTI_Init+0xe0>)
 80002d4:	4b22      	ldr	r3, [pc, #136]	; (8000360 <EXTI_Init+0xe0>)
 80002d6:	689a      	ldr	r2, [r3, #8]
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	43db      	mvns	r3, r3
 80002de:	4013      	ands	r3, r2
 80002e0:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80002e2:	491f      	ldr	r1, [pc, #124]	; (8000360 <EXTI_Init+0xe0>)
 80002e4:	4b1e      	ldr	r3, [pc, #120]	; (8000360 <EXTI_Init+0xe0>)
 80002e6:	68da      	ldr	r2, [r3, #12]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	43db      	mvns	r3, r3
 80002ee:	4013      	ands	r3, r2
 80002f0:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	795b      	ldrb	r3, [r3, #5]
 80002f6:	2b10      	cmp	r3, #16
 80002f8:	d10e      	bne.n	8000318 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80002fa:	4919      	ldr	r1, [pc, #100]	; (8000360 <EXTI_Init+0xe0>)
 80002fc:	4b18      	ldr	r3, [pc, #96]	; (8000360 <EXTI_Init+0xe0>)
 80002fe:	689a      	ldr	r2, [r3, #8]
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4313      	orrs	r3, r2
 8000306:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000308:	4915      	ldr	r1, [pc, #84]	; (8000360 <EXTI_Init+0xe0>)
 800030a:	4b15      	ldr	r3, [pc, #84]	; (8000360 <EXTI_Init+0xe0>)
 800030c:	68da      	ldr	r2, [r3, #12]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4313      	orrs	r3, r2
 8000314:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000316:	e01d      	b.n	8000354 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000318:	4b11      	ldr	r3, [pc, #68]	; (8000360 <EXTI_Init+0xe0>)
 800031a:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	795b      	ldrb	r3, [r3, #5]
 8000320:	461a      	mov	r2, r3
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	4413      	add	r3, r2
 8000326:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	68fa      	ldr	r2, [r7, #12]
 800032c:	6811      	ldr	r1, [r2, #0]
 800032e:	687a      	ldr	r2, [r7, #4]
 8000330:	6812      	ldr	r2, [r2, #0]
 8000332:	430a      	orrs	r2, r1
 8000334:	601a      	str	r2, [r3, #0]
}
 8000336:	e00d      	b.n	8000354 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	791b      	ldrb	r3, [r3, #4]
 800033c:	461a      	mov	r2, r3
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	4413      	add	r3, r2
 8000342:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	68fa      	ldr	r2, [r7, #12]
 8000348:	6811      	ldr	r1, [r2, #0]
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	6812      	ldr	r2, [r2, #0]
 800034e:	43d2      	mvns	r2, r2
 8000350:	400a      	ands	r2, r1
 8000352:	601a      	str	r2, [r3, #0]
}
 8000354:	bf00      	nop
 8000356:	3714      	adds	r7, #20
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	40013c00 	.word	0x40013c00

08000364 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800036c:	4a04      	ldr	r2, [pc, #16]	; (8000380 <EXTI_ClearITPendingBit+0x1c>)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	6153      	str	r3, [r2, #20]
}
 8000372:	bf00      	nop
 8000374:	370c      	adds	r7, #12
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40013c00 	.word	0x40013c00

08000384 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000384:	b480      	push	{r7}
 8000386:	b087      	sub	sp, #28
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800038e:	2300      	movs	r3, #0
 8000390:	617b      	str	r3, [r7, #20]
 8000392:	2300      	movs	r3, #0
 8000394:	613b      	str	r3, [r7, #16]
 8000396:	2300      	movs	r3, #0
 8000398:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800039a:	2300      	movs	r3, #0
 800039c:	617b      	str	r3, [r7, #20]
 800039e:	e076      	b.n	800048e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80003a0:	2201      	movs	r2, #1
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	fa02 f303 	lsl.w	r3, r2, r3
 80003a8:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	693b      	ldr	r3, [r7, #16]
 80003b0:	4013      	ands	r3, r2
 80003b2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80003b4:	68fa      	ldr	r2, [r7, #12]
 80003b6:	693b      	ldr	r3, [r7, #16]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d165      	bne.n	8000488 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	005b      	lsls	r3, r3, #1
 80003c4:	2103      	movs	r1, #3
 80003c6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ca:	43db      	mvns	r3, r3
 80003cc:	401a      	ands	r2, r3
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	791b      	ldrb	r3, [r3, #4]
 80003da:	4619      	mov	r1, r3
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	fa01 f303 	lsl.w	r3, r1, r3
 80003e4:	431a      	orrs	r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	791b      	ldrb	r3, [r3, #4]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d003      	beq.n	80003fa <GPIO_Init+0x76>
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	791b      	ldrb	r3, [r3, #4]
 80003f6:	2b02      	cmp	r3, #2
 80003f8:	d12e      	bne.n	8000458 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	689a      	ldr	r2, [r3, #8]
 80003fe:	697b      	ldr	r3, [r7, #20]
 8000400:	005b      	lsls	r3, r3, #1
 8000402:	2103      	movs	r1, #3
 8000404:	fa01 f303 	lsl.w	r3, r1, r3
 8000408:	43db      	mvns	r3, r3
 800040a:	401a      	ands	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	689a      	ldr	r2, [r3, #8]
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	795b      	ldrb	r3, [r3, #5]
 8000418:	4619      	mov	r1, r3
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	fa01 f303 	lsl.w	r3, r1, r3
 8000422:	431a      	orrs	r2, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	685a      	ldr	r2, [r3, #4]
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	b29b      	uxth	r3, r3
 8000430:	4619      	mov	r1, r3
 8000432:	2301      	movs	r3, #1
 8000434:	408b      	lsls	r3, r1
 8000436:	43db      	mvns	r3, r3
 8000438:	401a      	ands	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	683a      	ldr	r2, [r7, #0]
 8000444:	7992      	ldrb	r2, [r2, #6]
 8000446:	4611      	mov	r1, r2
 8000448:	697a      	ldr	r2, [r7, #20]
 800044a:	b292      	uxth	r2, r2
 800044c:	fa01 f202 	lsl.w	r2, r1, r2
 8000450:	b292      	uxth	r2, r2
 8000452:	431a      	orrs	r2, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	68da      	ldr	r2, [r3, #12]
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	b29b      	uxth	r3, r3
 8000460:	005b      	lsls	r3, r3, #1
 8000462:	2103      	movs	r1, #3
 8000464:	fa01 f303 	lsl.w	r3, r1, r3
 8000468:	43db      	mvns	r3, r3
 800046a:	401a      	ands	r2, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	68da      	ldr	r2, [r3, #12]
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	79db      	ldrb	r3, [r3, #7]
 8000478:	4619      	mov	r1, r3
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	fa01 f303 	lsl.w	r3, r1, r3
 8000482:	431a      	orrs	r2, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	3301      	adds	r3, #1
 800048c:	617b      	str	r3, [r7, #20]
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	2b0f      	cmp	r3, #15
 8000492:	d985      	bls.n	80003a0 <GPIO_Init+0x1c>
    }
  }
}
 8000494:	bf00      	nop
 8000496:	371c      	adds	r7, #28
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr

080004a0 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	460b      	mov	r3, r1
 80004aa:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80004ac:	2300      	movs	r3, #0
 80004ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	691a      	ldr	r2, [r3, #16]
 80004b4:	887b      	ldrh	r3, [r7, #2]
 80004b6:	4013      	ands	r3, r2
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d002      	beq.n	80004c2 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80004bc:	2301      	movs	r3, #1
 80004be:	73fb      	strb	r3, [r7, #15]
 80004c0:	e001      	b.n	80004c6 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80004c2:	2300      	movs	r3, #0
 80004c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80004c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	460b      	mov	r3, r1
 80004de:	807b      	strh	r3, [r7, #2]
 80004e0:	4613      	mov	r3, r2
 80004e2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80004e4:	2300      	movs	r3, #0
 80004e6:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80004e8:	2300      	movs	r3, #0
 80004ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80004ec:	787a      	ldrb	r2, [r7, #1]
 80004ee:	887b      	ldrh	r3, [r7, #2]
 80004f0:	f003 0307 	and.w	r3, r3, #7
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	fa02 f303 	lsl.w	r3, r2, r3
 80004fa:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80004fc:	887b      	ldrh	r3, [r7, #2]
 80004fe:	08db      	lsrs	r3, r3, #3
 8000500:	b29b      	uxth	r3, r3
 8000502:	4618      	mov	r0, r3
 8000504:	887b      	ldrh	r3, [r7, #2]
 8000506:	08db      	lsrs	r3, r3, #3
 8000508:	b29b      	uxth	r3, r3
 800050a:	461a      	mov	r2, r3
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	3208      	adds	r2, #8
 8000510:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000514:	887b      	ldrh	r3, [r7, #2]
 8000516:	f003 0307 	and.w	r3, r3, #7
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	210f      	movs	r1, #15
 800051e:	fa01 f303 	lsl.w	r3, r1, r3
 8000522:	43db      	mvns	r3, r3
 8000524:	ea02 0103 	and.w	r1, r2, r3
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	f100 0208 	add.w	r2, r0, #8
 800052e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000532:	887b      	ldrh	r3, [r7, #2]
 8000534:	08db      	lsrs	r3, r3, #3
 8000536:	b29b      	uxth	r3, r3
 8000538:	461a      	mov	r2, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	3208      	adds	r2, #8
 800053e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	4313      	orrs	r3, r2
 8000546:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000548:	887b      	ldrh	r3, [r7, #2]
 800054a:	08db      	lsrs	r3, r3, #3
 800054c:	b29b      	uxth	r3, r3
 800054e:	461a      	mov	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3208      	adds	r2, #8
 8000554:	68b9      	ldr	r1, [r7, #8]
 8000556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
	...

08000568 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800056c:	4a12      	ldr	r2, [pc, #72]	; (80005b8 <RCC_DeInit+0x50>)
 800056e:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <RCC_DeInit+0x50>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <RCC_DeInit+0x50>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 800057e:	4a0e      	ldr	r2, [pc, #56]	; (80005b8 <RCC_DeInit+0x50>)
 8000580:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <RCC_DeInit+0x50>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 8000588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800058c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <RCC_DeInit+0x50>)
 8000590:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <RCC_DeInit+0x54>)
 8000592:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <RCC_DeInit+0x50>)
 8000596:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <RCC_DeInit+0x58>)
 8000598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <RCC_DeInit+0x50>)
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <RCC_DeInit+0x50>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <RCC_DeInit+0x50>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	40023800 	.word	0x40023800
 80005bc:	24003010 	.word	0x24003010
 80005c0:	20003000 	.word	0x20003000

080005c4 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b089      	sub	sp, #36	; 0x24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
 80005d4:	2300      	movs	r3, #0
 80005d6:	61fb      	str	r3, [r7, #28]
 80005d8:	2302      	movs	r3, #2
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	2302      	movs	r3, #2
 80005e2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80005e4:	4b47      	ldr	r3, [pc, #284]	; (8000704 <RCC_GetClocksFreq+0x140>)
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	f003 030c 	and.w	r3, r3, #12
 80005ec:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80005ee:	69bb      	ldr	r3, [r7, #24]
 80005f0:	2b04      	cmp	r3, #4
 80005f2:	d007      	beq.n	8000604 <RCC_GetClocksFreq+0x40>
 80005f4:	2b08      	cmp	r3, #8
 80005f6:	d009      	beq.n	800060c <RCC_GetClocksFreq+0x48>
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d13d      	bne.n	8000678 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4a42      	ldr	r2, [pc, #264]	; (8000708 <RCC_GetClocksFreq+0x144>)
 8000600:	601a      	str	r2, [r3, #0]
      break;
 8000602:	e03d      	b.n	8000680 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4a41      	ldr	r2, [pc, #260]	; (800070c <RCC_GetClocksFreq+0x148>)
 8000608:	601a      	str	r2, [r3, #0]
      break;
 800060a:	e039      	b.n	8000680 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800060c:	4b3d      	ldr	r3, [pc, #244]	; (8000704 <RCC_GetClocksFreq+0x140>)
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	0d9b      	lsrs	r3, r3, #22
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000618:	4b3a      	ldr	r3, [pc, #232]	; (8000704 <RCC_GetClocksFreq+0x140>)
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000620:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d00c      	beq.n	8000642 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000628:	4a38      	ldr	r2, [pc, #224]	; (800070c <RCC_GetClocksFreq+0x148>)
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000630:	4a34      	ldr	r2, [pc, #208]	; (8000704 <RCC_GetClocksFreq+0x140>)
 8000632:	6852      	ldr	r2, [r2, #4]
 8000634:	0992      	lsrs	r2, r2, #6
 8000636:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800063a:	fb02 f303 	mul.w	r3, r2, r3
 800063e:	61fb      	str	r3, [r7, #28]
 8000640:	e00b      	b.n	800065a <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000642:	4a31      	ldr	r2, [pc, #196]	; (8000708 <RCC_GetClocksFreq+0x144>)
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	fbb2 f3f3 	udiv	r3, r2, r3
 800064a:	4a2e      	ldr	r2, [pc, #184]	; (8000704 <RCC_GetClocksFreq+0x140>)
 800064c:	6852      	ldr	r2, [r2, #4]
 800064e:	0992      	lsrs	r2, r2, #6
 8000650:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000654:	fb02 f303 	mul.w	r3, r2, r3
 8000658:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800065a:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <RCC_GetClocksFreq+0x140>)
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	0c1b      	lsrs	r3, r3, #16
 8000660:	f003 0303 	and.w	r3, r3, #3
 8000664:	3301      	adds	r3, #1
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800066a:	69fa      	ldr	r2, [r7, #28]
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	601a      	str	r2, [r3, #0]
      break;
 8000676:	e003      	b.n	8000680 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4a23      	ldr	r2, [pc, #140]	; (8000708 <RCC_GetClocksFreq+0x144>)
 800067c:	601a      	str	r2, [r3, #0]
      break;
 800067e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000680:	4b20      	ldr	r3, [pc, #128]	; (8000704 <RCC_GetClocksFreq+0x140>)
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000688:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800068a:	69bb      	ldr	r3, [r7, #24]
 800068c:	091b      	lsrs	r3, r3, #4
 800068e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000690:	4a1f      	ldr	r2, [pc, #124]	; (8000710 <RCC_GetClocksFreq+0x14c>)
 8000692:	69bb      	ldr	r3, [r7, #24]
 8000694:	4413      	add	r3, r2
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	40da      	lsrs	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80006a8:	4b16      	ldr	r3, [pc, #88]	; (8000704 <RCC_GetClocksFreq+0x140>)
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80006b0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80006b2:	69bb      	ldr	r3, [r7, #24]
 80006b4:	0a9b      	lsrs	r3, r3, #10
 80006b6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80006b8:	4a15      	ldr	r2, [pc, #84]	; (8000710 <RCC_GetClocksFreq+0x14c>)
 80006ba:	69bb      	ldr	r3, [r7, #24]
 80006bc:	4413      	add	r3, r2
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	685a      	ldr	r2, [r3, #4]
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <RCC_GetClocksFreq+0x140>)
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80006d8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80006da:	69bb      	ldr	r3, [r7, #24]
 80006dc:	0b5b      	lsrs	r3, r3, #13
 80006de:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80006e0:	4a0b      	ldr	r2, [pc, #44]	; (8000710 <RCC_GetClocksFreq+0x14c>)
 80006e2:	69bb      	ldr	r3, [r7, #24]
 80006e4:	4413      	add	r3, r2
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	685a      	ldr	r2, [r3, #4]
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	40da      	lsrs	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	60da      	str	r2, [r3, #12]
}
 80006f8:	bf00      	nop
 80006fa:	3724      	adds	r7, #36	; 0x24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	40023800 	.word	0x40023800
 8000708:	00f42400 	.word	0x00f42400
 800070c:	017d7840 	.word	0x017d7840
 8000710:	20000000 	.word	0x20000000

08000714 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000720:	78fb      	ldrb	r3, [r7, #3]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d006      	beq.n	8000734 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000726:	490a      	ldr	r1, [pc, #40]	; (8000750 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <RCC_AHB1PeriphClockCmd+0x3c>)
 800072a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4313      	orrs	r3, r2
 8000730:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000732:	e006      	b.n	8000742 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000734:	4906      	ldr	r1, [pc, #24]	; (8000750 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	43db      	mvns	r3, r3
 800073e:	4013      	ands	r3, r2
 8000740:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800

08000754 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000760:	78fb      	ldrb	r3, [r7, #3]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d006      	beq.n	8000774 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000766:	490a      	ldr	r1, [pc, #40]	; (8000790 <RCC_APB1PeriphClockCmd+0x3c>)
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <RCC_APB1PeriphClockCmd+0x3c>)
 800076a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4313      	orrs	r3, r2
 8000770:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000772:	e006      	b.n	8000782 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000774:	4906      	ldr	r1, [pc, #24]	; (8000790 <RCC_APB1PeriphClockCmd+0x3c>)
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <RCC_APB1PeriphClockCmd+0x3c>)
 8000778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	43db      	mvns	r3, r3
 800077e:	4013      	ands	r3, r2
 8000780:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800

08000794 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	460b      	mov	r3, r1
 800079e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d006      	beq.n	80007b4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80007a6:	490a      	ldr	r1, [pc, #40]	; (80007d0 <RCC_APB2PeriphClockCmd+0x3c>)
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <RCC_APB2PeriphClockCmd+0x3c>)
 80007aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80007b2:	e006      	b.n	80007c2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80007b4:	4906      	ldr	r1, [pc, #24]	; (80007d0 <RCC_APB2PeriphClockCmd+0x3c>)
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <RCC_APB2PeriphClockCmd+0x3c>)
 80007b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	43db      	mvns	r3, r3
 80007be:	4013      	ands	r3, r2
 80007c0:	644b      	str	r3, [r1, #68]	; 0x44
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800

080007d4 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80007d4:	b490      	push	{r4, r7}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	460a      	mov	r2, r1
 80007de:	71fb      	strb	r3, [r7, #7]
 80007e0:	4613      	mov	r3, r2
 80007e2:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80007e8:	79bb      	ldrb	r3, [r7, #6]
 80007ea:	f003 0303 	and.w	r3, r3, #3
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	220f      	movs	r2, #15
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80007f8:	4916      	ldr	r1, [pc, #88]	; (8000854 <SYSCFG_EXTILineConfig+0x80>)
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	089b      	lsrs	r3, r3, #2
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	4618      	mov	r0, r3
 8000802:	4a14      	ldr	r2, [pc, #80]	; (8000854 <SYSCFG_EXTILineConfig+0x80>)
 8000804:	79bb      	ldrb	r3, [r7, #6]
 8000806:	089b      	lsrs	r3, r3, #2
 8000808:	b2db      	uxtb	r3, r3
 800080a:	3302      	adds	r3, #2
 800080c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	43db      	mvns	r3, r3
 8000814:	401a      	ands	r2, r3
 8000816:	1c83      	adds	r3, r0, #2
 8000818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800081c:	480d      	ldr	r0, [pc, #52]	; (8000854 <SYSCFG_EXTILineConfig+0x80>)
 800081e:	79bb      	ldrb	r3, [r7, #6]
 8000820:	089b      	lsrs	r3, r3, #2
 8000822:	b2db      	uxtb	r3, r3
 8000824:	461c      	mov	r4, r3
 8000826:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <SYSCFG_EXTILineConfig+0x80>)
 8000828:	79bb      	ldrb	r3, [r7, #6]
 800082a:	089b      	lsrs	r3, r3, #2
 800082c:	b2db      	uxtb	r3, r3
 800082e:	3302      	adds	r3, #2
 8000830:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000834:	79f9      	ldrb	r1, [r7, #7]
 8000836:	79bb      	ldrb	r3, [r7, #6]
 8000838:	f003 0303 	and.w	r3, r3, #3
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	fa01 f303 	lsl.w	r3, r1, r3
 8000842:	431a      	orrs	r2, r3
 8000844:	1ca3      	adds	r3, r4, #2
 8000846:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bc90      	pop	{r4, r7}
 8000852:	4770      	bx	lr
 8000854:	40013800 	.word	0x40013800

08000858 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	8a1b      	ldrh	r3, [r3, #16]
 8000876:	b29b      	uxth	r3, r3
 8000878:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800087a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000880:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	88db      	ldrh	r3, [r3, #6]
 8000886:	461a      	mov	r2, r3
 8000888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088a:	4313      	orrs	r3, r2
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000890:	b29a      	uxth	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	899b      	ldrh	r3, [r3, #12]
 800089a:	b29b      	uxth	r3, r3
 800089c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800089e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80008a4:	f023 030c 	bic.w	r3, r3, #12
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	889a      	ldrh	r2, [r3, #4]
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	891b      	ldrh	r3, [r3, #8]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80008ba:	4313      	orrs	r3, r2
 80008bc:	b29b      	uxth	r3, r3
 80008be:	461a      	mov	r2, r3
 80008c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c2:	4313      	orrs	r3, r2
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	8a9b      	ldrh	r3, [r3, #20]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80008d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	899b      	ldrh	r3, [r3, #12]
 80008e2:	461a      	mov	r2, r3
 80008e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e6:	4313      	orrs	r3, r2
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80008ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fe64 	bl	80005c4 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a30      	ldr	r2, [pc, #192]	; (80009c0 <USART_Init+0x168>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d003      	beq.n	800090c <USART_Init+0xb4>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4a2f      	ldr	r2, [pc, #188]	; (80009c4 <USART_Init+0x16c>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d102      	bne.n	8000912 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	623b      	str	r3, [r7, #32]
 8000910:	e001      	b.n	8000916 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	899b      	ldrh	r3, [r3, #12]
 800091a:	b29b      	uxth	r3, r3
 800091c:	b21b      	sxth	r3, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	da0c      	bge.n	800093c <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000922:	6a3a      	ldr	r2, [r7, #32]
 8000924:	4613      	mov	r3, r2
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	4413      	add	r3, r2
 800092a:	009a      	lsls	r2, r3, #2
 800092c:	441a      	add	r2, r3
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	fbb2 f3f3 	udiv	r3, r2, r3
 8000938:	61fb      	str	r3, [r7, #28]
 800093a:	e00b      	b.n	8000954 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800093c:	6a3a      	ldr	r2, [r7, #32]
 800093e:	4613      	mov	r3, r2
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	4413      	add	r3, r2
 8000944:	009a      	lsls	r2, r3, #2
 8000946:	441a      	add	r2, r3
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000952:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <USART_Init+0x170>)
 8000958:	fba2 2303 	umull	r2, r3, r2, r3
 800095c:	095b      	lsrs	r3, r3, #5
 800095e:	011b      	lsls	r3, r3, #4
 8000960:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000964:	091b      	lsrs	r3, r3, #4
 8000966:	2264      	movs	r2, #100	; 0x64
 8000968:	fb02 f303 	mul.w	r3, r2, r3
 800096c:	69fa      	ldr	r2, [r7, #28]
 800096e:	1ad3      	subs	r3, r2, r3
 8000970:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	899b      	ldrh	r3, [r3, #12]
 8000976:	b29b      	uxth	r3, r3
 8000978:	b21b      	sxth	r3, r3
 800097a:	2b00      	cmp	r3, #0
 800097c:	da0c      	bge.n	8000998 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	00db      	lsls	r3, r3, #3
 8000982:	3332      	adds	r3, #50	; 0x32
 8000984:	4a10      	ldr	r2, [pc, #64]	; (80009c8 <USART_Init+0x170>)
 8000986:	fba2 2303 	umull	r2, r3, r2, r3
 800098a:	095b      	lsrs	r3, r3, #5
 800098c:	f003 0307 	and.w	r3, r3, #7
 8000990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000992:	4313      	orrs	r3, r2
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
 8000996:	e00b      	b.n	80009b0 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	011b      	lsls	r3, r3, #4
 800099c:	3332      	adds	r3, #50	; 0x32
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <USART_Init+0x170>)
 80009a0:	fba2 2303 	umull	r2, r3, r2, r3
 80009a4:	095b      	lsrs	r3, r3, #5
 80009a6:	f003 030f 	and.w	r3, r3, #15
 80009aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009ac:	4313      	orrs	r3, r2
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80009b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	811a      	strh	r2, [r3, #8]
}
 80009b8:	bf00      	nop
 80009ba:	3728      	adds	r7, #40	; 0x28
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40011000 	.word	0x40011000
 80009c4:	40011400 	.word	0x40011400
 80009c8:	51eb851f 	.word	0x51eb851f

080009cc <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	460b      	mov	r3, r1
 80009d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80009d8:	78fb      	ldrb	r3, [r7, #3]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d008      	beq.n	80009f0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	899b      	ldrh	r3, [r3, #12]
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 80009ee:	e007      	b.n	8000a00 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	899b      	ldrh	r3, [r3, #12]
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	819a      	strh	r2, [r3, #12]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	460b      	mov	r3, r1
 8000a16:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000a18:	887b      	ldrh	r3, [r7, #2]
 8000a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	809a      	strh	r2, [r3, #4]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	887b      	ldrh	r3, [r7, #2]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d002      	beq.n	8000a56 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000a50:	2301      	movs	r3, #1
 8000a52:	73fb      	strb	r3, [r7, #15]
 8000a54:	e001      	b.n	8000a5a <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000a56:	2300      	movs	r3, #0
 8000a58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f103 0208 	add.w	r2, r3, #8
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a80:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f103 0208 	add.w	r2, r3, #8
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f103 0208 	add.w	r2, r3, #8
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b085      	sub	sp, #20
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
 8000aca:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad8:	d103      	bne.n	8000ae2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	691b      	ldr	r3, [r3, #16]
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	e00c      	b.n	8000afc <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	3308      	adds	r3, #8
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	e002      	b.n	8000af0 <vListInsert+0x2e>
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d9f6      	bls.n	8000aea <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	685a      	ldr	r2, [r3, #4]
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	683a      	ldr	r2, [r7, #0]
 8000b0a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	683a      	ldr	r2, [r7, #0]
 8000b16:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	1c5a      	adds	r2, r3, #1
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	601a      	str	r2, [r3, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	691b      	ldr	r3, [r3, #16]
 8000b40:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	6892      	ldr	r2, [r2, #8]
 8000b4a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	6852      	ldr	r2, [r2, #4]
 8000b54:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	685a      	ldr	r2, [r3, #4]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d103      	bne.n	8000b68 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	689a      	ldr	r2, [r3, #8]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	1e5a      	subs	r2, r3, #1
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	3b04      	subs	r3, #4
 8000b98:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ba0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	3b04      	subs	r3, #4
 8000ba6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	f023 0201 	bic.w	r2, r3, #1
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	3b04      	subs	r3, #4
 8000bb6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000bb8:	4a0c      	ldr	r2, [pc, #48]	; (8000bec <pxPortInitialiseStack+0x64>)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	3b14      	subs	r3, #20
 8000bc2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	3b04      	subs	r3, #4
 8000bce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f06f 0202 	mvn.w	r2, #2
 8000bd6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	3b20      	subs	r3, #32
 8000bdc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000bde:	68fb      	ldr	r3, [r7, #12]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	08000bf1 	.word	0x08000bf1

08000bf0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <prvTaskExitError+0x50>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c02:	d009      	beq.n	8000c18 <prvTaskExitError+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c08:	f383 8811 	msr	BASEPRI, r3
 8000c0c:	f3bf 8f6f 	isb	sy
 8000c10:	f3bf 8f4f 	dsb	sy
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	e7fe      	b.n	8000c16 <prvTaskExitError+0x26>
 8000c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c1c:	f383 8811 	msr	BASEPRI, r3
 8000c20:	f3bf 8f6f 	isb	sy
 8000c24:	f3bf 8f4f 	dsb	sy
 8000c28:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000c2a:	bf00      	nop
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d0fc      	beq.n	8000c2c <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000c32:	bf00      	nop
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000010 	.word	0x20000010
	...

08000c50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <pxCurrentTCBConst2>)
 8000c52:	6819      	ldr	r1, [r3, #0]
 8000c54:	6808      	ldr	r0, [r1, #0]
 8000c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c5a:	f380 8809 	msr	PSP, r0
 8000c5e:	f3bf 8f6f 	isb	sy
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	f380 8811 	msr	BASEPRI, r0
 8000c6a:	4770      	bx	lr
 8000c6c:	f3af 8000 	nop.w

08000c70 <pxCurrentTCBConst2>:
 8000c70:	20012cd0 	.word	0x20012cd0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000c74:	bf00      	nop
 8000c76:	bf00      	nop

08000c78 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8000c78:	4808      	ldr	r0, [pc, #32]	; (8000c9c <prvPortStartFirstTask+0x24>)
 8000c7a:	6800      	ldr	r0, [r0, #0]
 8000c7c:	6800      	ldr	r0, [r0, #0]
 8000c7e:	f380 8808 	msr	MSP, r0
 8000c82:	f04f 0000 	mov.w	r0, #0
 8000c86:	f380 8814 	msr	CONTROL, r0
 8000c8a:	b662      	cpsie	i
 8000c8c:	b661      	cpsie	f
 8000c8e:	f3bf 8f4f 	dsb	sy
 8000c92:	f3bf 8f6f 	isb	sy
 8000c96:	df00      	svc	0
 8000c98:	bf00      	nop
 8000c9a:	0000      	.short	0x0000
 8000c9c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000ca0:	bf00      	nop
 8000ca2:	bf00      	nop

08000ca4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000caa:	4b44      	ldr	r3, [pc, #272]	; (8000dbc <xPortStartScheduler+0x118>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a44      	ldr	r2, [pc, #272]	; (8000dc0 <xPortStartScheduler+0x11c>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d109      	bne.n	8000cc8 <xPortStartScheduler+0x24>
 8000cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cb8:	f383 8811 	msr	BASEPRI, r3
 8000cbc:	f3bf 8f6f 	isb	sy
 8000cc0:	f3bf 8f4f 	dsb	sy
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	e7fe      	b.n	8000cc6 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000cc8:	4b3c      	ldr	r3, [pc, #240]	; (8000dbc <xPortStartScheduler+0x118>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a3d      	ldr	r2, [pc, #244]	; (8000dc4 <xPortStartScheduler+0x120>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d109      	bne.n	8000ce6 <xPortStartScheduler+0x42>
 8000cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cd6:	f383 8811 	msr	BASEPRI, r3
 8000cda:	f3bf 8f6f 	isb	sy
 8000cde:	f3bf 8f4f 	dsb	sy
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	e7fe      	b.n	8000ce4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000ce6:	4b38      	ldr	r3, [pc, #224]	; (8000dc8 <xPortStartScheduler+0x124>)
 8000ce8:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	22ff      	movs	r2, #255	; 0xff
 8000cf6:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000d00:	78fb      	ldrb	r3, [r7, #3]
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4b30      	ldr	r3, [pc, #192]	; (8000dcc <xPortStartScheduler+0x128>)
 8000d0c:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000d0e:	4b30      	ldr	r3, [pc, #192]	; (8000dd0 <xPortStartScheduler+0x12c>)
 8000d10:	2207      	movs	r2, #7
 8000d12:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000d14:	e009      	b.n	8000d2a <xPortStartScheduler+0x86>
        {
            ulMaxPRIGROUPValue--;
 8000d16:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <xPortStartScheduler+0x12c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	4a2c      	ldr	r2, [pc, #176]	; (8000dd0 <xPortStartScheduler+0x12c>)
 8000d1e:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000d20:	78fb      	ldrb	r3, [r7, #3]
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000d2a:	78fb      	ldrb	r3, [r7, #3]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d32:	2b80      	cmp	r3, #128	; 0x80
 8000d34:	d0ef      	beq.n	8000d16 <xPortStartScheduler+0x72>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000d36:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <xPortStartScheduler+0x12c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	d009      	beq.n	8000d56 <xPortStartScheduler+0xb2>
 8000d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d46:	f383 8811 	msr	BASEPRI, r3
 8000d4a:	f3bf 8f6f 	isb	sy
 8000d4e:	f3bf 8f4f 	dsb	sy
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	e7fe      	b.n	8000d54 <xPortStartScheduler+0xb0>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <xPortStartScheduler+0x12c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	021b      	lsls	r3, r3, #8
 8000d5c:	4a1c      	ldr	r2, [pc, #112]	; (8000dd0 <xPortStartScheduler+0x12c>)
 8000d5e:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000d60:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <xPortStartScheduler+0x12c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000d68:	4a19      	ldr	r2, [pc, #100]	; (8000dd0 <xPortStartScheduler+0x12c>)
 8000d6a:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8000d74:	4a17      	ldr	r2, [pc, #92]	; (8000dd4 <xPortStartScheduler+0x130>)
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <xPortStartScheduler+0x130>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d7e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8000d80:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <xPortStartScheduler+0x130>)
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <xPortStartScheduler+0x130>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000d8a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8000d8c:	f000 f8d4 	bl	8000f38 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <xPortStartScheduler+0x134>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8000d96:	f000 f8f3 	bl	8000f80 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8000d9a:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <xPortStartScheduler+0x138>)
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <xPortStartScheduler+0x138>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000da4:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000da6:	f7ff ff67 	bl	8000c78 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8000daa:	f001 fa6f 	bl	800228c <vTaskSwitchContext>
    prvTaskExitError();
 8000dae:	f7ff ff1f 	bl	8000bf0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8000db2:	2300      	movs	r3, #0
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	e000ed00 	.word	0xe000ed00
 8000dc0:	410fc271 	.word	0x410fc271
 8000dc4:	410fc270 	.word	0x410fc270
 8000dc8:	e000e400 	.word	0xe000e400
 8000dcc:	200000ac 	.word	0x200000ac
 8000dd0:	200000b0 	.word	0x200000b0
 8000dd4:	e000ed20 	.word	0xe000ed20
 8000dd8:	20000010 	.word	0x20000010
 8000ddc:	e000ef34 	.word	0xe000ef34

08000de0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dea:	f383 8811 	msr	BASEPRI, r3
 8000dee:	f3bf 8f6f 	isb	sy
 8000df2:	f3bf 8f4f 	dsb	sy
 8000df6:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <vPortEnterCritical+0x54>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <vPortEnterCritical+0x54>)
 8000e00:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <vPortEnterCritical+0x54>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d10e      	bne.n	8000e28 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <vPortEnterCritical+0x58>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d009      	beq.n	8000e28 <vPortEnterCritical+0x48>
 8000e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e18:	f383 8811 	msr	BASEPRI, r3
 8000e1c:	f3bf 8f6f 	isb	sy
 8000e20:	f3bf 8f4f 	dsb	sy
 8000e24:	603b      	str	r3, [r7, #0]
 8000e26:	e7fe      	b.n	8000e26 <vPortEnterCritical+0x46>
    }
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	20000010 	.word	0x20000010
 8000e38:	e000ed04 	.word	0xe000ed04

08000e3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <vPortExitCritical+0x4c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d109      	bne.n	8000e5e <vPortExitCritical+0x22>
 8000e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e4e:	f383 8811 	msr	BASEPRI, r3
 8000e52:	f3bf 8f6f 	isb	sy
 8000e56:	f3bf 8f4f 	dsb	sy
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	e7fe      	b.n	8000e5c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <vPortExitCritical+0x4c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	4a08      	ldr	r2, [pc, #32]	; (8000e88 <vPortExitCritical+0x4c>)
 8000e66:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <vPortExitCritical+0x4c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d104      	bne.n	8000e7a <vPortExitCritical+0x3e>
 8000e70:	2300      	movs	r3, #0
 8000e72:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000010 	.word	0x20000010
 8000e8c:	00000000 	.word	0x00000000

08000e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000e90:	f3ef 8009 	mrs	r0, PSP
 8000e94:	f3bf 8f6f 	isb	sy
 8000e98:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <pxCurrentTCBConst>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	f01e 0f10 	tst.w	lr, #16
 8000ea0:	bf08      	it	eq
 8000ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000eaa:	6010      	str	r0, [r2, #0]
 8000eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000eb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000eb4:	f380 8811 	msr	BASEPRI, r0
 8000eb8:	f3bf 8f4f 	dsb	sy
 8000ebc:	f3bf 8f6f 	isb	sy
 8000ec0:	f001 f9e4 	bl	800228c <vTaskSwitchContext>
 8000ec4:	f04f 0000 	mov.w	r0, #0
 8000ec8:	f380 8811 	msr	BASEPRI, r0
 8000ecc:	bc09      	pop	{r0, r3}
 8000ece:	6819      	ldr	r1, [r3, #0]
 8000ed0:	6808      	ldr	r0, [r1, #0]
 8000ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ed6:	f01e 0f10 	tst.w	lr, #16
 8000eda:	bf08      	it	eq
 8000edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000ee0:	f380 8809 	msr	PSP, r0
 8000ee4:	f3bf 8f6f 	isb	sy
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	f3af 8000 	nop.w

08000ef0 <pxCurrentTCBConst>:
 8000ef0:	20012cd0 	.word	0x20012cd0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000ef4:	bf00      	nop
 8000ef6:	bf00      	nop

08000ef8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
        __asm volatile
 8000efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f02:	f383 8811 	msr	BASEPRI, r3
 8000f06:	f3bf 8f6f 	isb	sy
 8000f0a:	f3bf 8f4f 	dsb	sy
 8000f0e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000f10:	f001 f8a6 	bl	8002060 <xTaskIncrementTick>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <SysTick_Handler+0x3c>)
 8000f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	2300      	movs	r3, #0
 8000f24:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	e000ed04 	.word	0xe000ed04

08000f38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <vPortSetupTimerInterrupt+0x34>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000f42:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <vPortSetupTimerInterrupt+0x38>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000f48:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <vPortSetupTimerInterrupt+0x3c>)
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <vPortSetupTimerInterrupt+0x40>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	490b      	ldr	r1, [pc, #44]	; (8000f7c <vPortSetupTimerInterrupt+0x44>)
 8000f50:	fba1 1303 	umull	r1, r3, r1, r3
 8000f54:	099b      	lsrs	r3, r3, #6
 8000f56:	3b01      	subs	r3, #1
 8000f58:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <vPortSetupTimerInterrupt+0x34>)
 8000f5c:	2207      	movs	r2, #7
 8000f5e:	601a      	str	r2, [r3, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000e010 	.word	0xe000e010
 8000f70:	e000e018 	.word	0xe000e018
 8000f74:	e000e014 	.word	0xe000e014
 8000f78:	20000018 	.word	0x20000018
 8000f7c:	10624dd3 	.word	0x10624dd3

08000f80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8000f80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000f90 <vPortEnableVFP+0x10>
 8000f84:	6801      	ldr	r1, [r0, #0]
 8000f86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000f8a:	6001      	str	r1, [r0, #0]
 8000f8c:	4770      	bx	lr
 8000f8e:	0000      	.short	0x0000
 8000f90:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop

08000f98 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8000fa4:	f000 ff44 	bl	8001e30 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8000fa8:	4b52      	ldr	r3, [pc, #328]	; (80010f4 <pvPortMalloc+0x15c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8000fb0:	f000 f900 	bl	80011b4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d012      	beq.n	8000fe0 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8000fba:	2208      	movs	r2, #8
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	3308      	adds	r3, #8
 8000fc6:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	43da      	mvns	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d304      	bcc.n	8000fdc <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	e001      	b.n	8000fe0 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	db6f      	blt.n	80010c6 <pvPortMalloc+0x12e>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d06c      	beq.n	80010c6 <pvPortMalloc+0x12e>
 8000fec:	4b42      	ldr	r3, [pc, #264]	; (80010f8 <pvPortMalloc+0x160>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d867      	bhi.n	80010c6 <pvPortMalloc+0x12e>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8000ff6:	4b41      	ldr	r3, [pc, #260]	; (80010fc <pvPortMalloc+0x164>)
 8000ff8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8000ffa:	4b40      	ldr	r3, [pc, #256]	; (80010fc <pvPortMalloc+0x164>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001000:	e004      	b.n	800100c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	429a      	cmp	r2, r3
 8001014:	d203      	bcs.n	800101e <pvPortMalloc+0x86>
 8001016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1f1      	bne.n	8001002 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800101e:	4b35      	ldr	r3, [pc, #212]	; (80010f4 <pvPortMalloc+0x15c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001024:	429a      	cmp	r2, r3
 8001026:	d04e      	beq.n	80010c6 <pvPortMalloc+0x12e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001028:	6a3b      	ldr	r3, [r7, #32]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2208      	movs	r2, #8
 800102e:	4413      	add	r3, r2
 8001030:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	6a3b      	ldr	r3, [r7, #32]
 8001038:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	1ad2      	subs	r2, r2, r3
 8001042:	2308      	movs	r3, #8
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	429a      	cmp	r2, r3
 8001048:	d91e      	bls.n	8001088 <pvPortMalloc+0xf0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800104a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4413      	add	r3, r2
 8001050:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	2b00      	cmp	r3, #0
 800105a:	d009      	beq.n	8001070 <pvPortMalloc+0xd8>
        __asm volatile
 800105c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001060:	f383 8811 	msr	BASEPRI, r3
 8001064:	f3bf 8f6f 	isb	sy
 8001068:	f3bf 8f4f 	dsb	sy
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	e7fe      	b.n	800106e <pvPortMalloc+0xd6>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	1ad2      	subs	r2, r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001082:	6978      	ldr	r0, [r7, #20]
 8001084:	f000 f8f2 	bl	800126c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <pvPortMalloc+0x160>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	4a19      	ldr	r2, [pc, #100]	; (80010f8 <pvPortMalloc+0x160>)
 8001094:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <pvPortMalloc+0x160>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	4b19      	ldr	r3, [pc, #100]	; (8001100 <pvPortMalloc+0x168>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d203      	bcs.n	80010aa <pvPortMalloc+0x112>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <pvPortMalloc+0x160>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a16      	ldr	r2, [pc, #88]	; (8001100 <pvPortMalloc+0x168>)
 80010a8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80010b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b4:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80010b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <pvPortMalloc+0x16c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	3301      	adds	r3, #1
 80010c2:	4a10      	ldr	r2, [pc, #64]	; (8001104 <pvPortMalloc+0x16c>)
 80010c4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80010c6:	f000 fec1 	bl	8001e4c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	f003 0307 	and.w	r3, r3, #7
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d009      	beq.n	80010e8 <pvPortMalloc+0x150>
 80010d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010d8:	f383 8811 	msr	BASEPRI, r3
 80010dc:	f3bf 8f6f 	isb	sy
 80010e0:	f3bf 8f4f 	dsb	sy
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	e7fe      	b.n	80010e6 <pvPortMalloc+0x14e>
    return pvReturn;
 80010e8:	69fb      	ldr	r3, [r7, #28]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3728      	adds	r7, #40	; 0x28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20012cbc 	.word	0x20012cbc
 80010f8:	20012cc0 	.word	0x20012cc0
 80010fc:	20012cb4 	.word	0x20012cb4
 8001100:	20012cc4 	.word	0x20012cc4
 8001104:	20012cc8 	.word	0x20012cc8

08001108 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d043      	beq.n	80011a2 <vPortFree+0x9a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800111a:	2308      	movs	r3, #8
 800111c:	425b      	negs	r3, r3
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	4413      	add	r3, r2
 8001122:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db09      	blt.n	8001144 <vPortFree+0x3c>
 8001130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001134:	f383 8811 	msr	BASEPRI, r3
 8001138:	f3bf 8f6f 	isb	sy
 800113c:	f3bf 8f4f 	dsb	sy
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	e7fe      	b.n	8001142 <vPortFree+0x3a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d009      	beq.n	8001160 <vPortFree+0x58>
 800114c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001150:	f383 8811 	msr	BASEPRI, r3
 8001154:	f3bf 8f6f 	isb	sy
 8001158:	f3bf 8f4f 	dsb	sy
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	e7fe      	b.n	800115e <vPortFree+0x56>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	da1c      	bge.n	80011a2 <vPortFree+0x9a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d118      	bne.n	80011a2 <vPortFree+0x9a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800117c:	f000 fe58 	bl	8001e30 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <vPortFree+0xa4>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4413      	add	r3, r2
 800118a:	4a08      	ldr	r2, [pc, #32]	; (80011ac <vPortFree+0xa4>)
 800118c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800118e:	6938      	ldr	r0, [r7, #16]
 8001190:	f000 f86c 	bl	800126c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <vPortFree+0xa8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3301      	adds	r3, #1
 800119a:	4a05      	ldr	r2, [pc, #20]	; (80011b0 <vPortFree+0xa8>)
 800119c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800119e:	f000 fe55 	bl	8001e4c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80011a2:	bf00      	nop
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20012cc0 	.word	0x20012cc0
 80011b0:	20012ccc 	.word	0x20012ccc

080011b4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80011ba:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80011be:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80011c0:	4b25      	ldr	r3, [pc, #148]	; (8001258 <prvHeapInit+0xa4>)
 80011c2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d00c      	beq.n	80011e8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	3307      	adds	r3, #7
 80011d2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f023 0307 	bic.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80011dc:	68ba      	ldr	r2, [r7, #8]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	4a1d      	ldr	r2, [pc, #116]	; (8001258 <prvHeapInit+0xa4>)
 80011e4:	4413      	add	r3, r2
 80011e6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80011ec:	4a1b      	ldr	r2, [pc, #108]	; (800125c <prvHeapInit+0xa8>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80011f2:	4b1a      	ldr	r3, [pc, #104]	; (800125c <prvHeapInit+0xa8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	4413      	add	r3, r2
 80011fe:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001200:	2208      	movs	r2, #8
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	1a9b      	subs	r3, r3, r2
 8001206:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f023 0307 	bic.w	r3, r3, #7
 800120e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4a13      	ldr	r2, [pc, #76]	; (8001260 <prvHeapInit+0xac>)
 8001214:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <prvHeapInit+0xac>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2200      	movs	r2, #0
 800121c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <prvHeapInit+0xac>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <prvHeapInit+0xac>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	4a08      	ldr	r2, [pc, #32]	; (8001264 <prvHeapInit+0xb0>)
 8001242:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	4a07      	ldr	r2, [pc, #28]	; (8001268 <prvHeapInit+0xb4>)
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	bf00      	nop
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	200000b4 	.word	0x200000b4
 800125c:	20012cb4 	.word	0x20012cb4
 8001260:	20012cbc 	.word	0x20012cbc
 8001264:	20012cc4 	.word	0x20012cc4
 8001268:	20012cc0 	.word	0x20012cc0

0800126c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001274:	4b28      	ldr	r3, [pc, #160]	; (8001318 <prvInsertBlockIntoFreeList+0xac>)
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	e002      	b.n	8001280 <prvInsertBlockIntoFreeList+0x14>
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	429a      	cmp	r2, r3
 8001288:	d3f7      	bcc.n	800127a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	441a      	add	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	429a      	cmp	r2, r3
 800129a:	d108      	bne.n	80012ae <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	441a      	add	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	441a      	add	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d118      	bne.n	80012f4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <prvInsertBlockIntoFreeList+0xb0>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d00d      	beq.n	80012ea <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	441a      	add	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	e008      	b.n	80012fc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80012ea:	4b0c      	ldr	r3, [pc, #48]	; (800131c <prvInsertBlockIntoFreeList+0xb0>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	e003      	b.n	80012fc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	429a      	cmp	r2, r3
 8001302:	d002      	beq.n	800130a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800130a:	bf00      	nop
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20012cb4 	.word	0x20012cb4
 800131c:	20012cbc 	.word	0x20012cbc

08001320 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800132a:	2301      	movs	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d109      	bne.n	800134c <xQueueGenericReset+0x2c>
 8001338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800133c:	f383 8811 	msr	BASEPRI, r3
 8001340:	f3bf 8f6f 	isb	sy
 8001344:	f3bf 8f4f 	dsb	sy
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	e7fe      	b.n	800134a <xQueueGenericReset+0x2a>

    if( ( pxQueue != NULL ) &&
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d05a      	beq.n	8001408 <xQueueGenericReset+0xe8>
        ( pxQueue->uxLength >= 1U ) &&
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001356:	2b00      	cmp	r3, #0
 8001358:	d056      	beq.n	8001408 <xQueueGenericReset+0xe8>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800135e:	f04f 32ff 	mov.w	r2, #4294967295
 8001362:	fbb2 f2f3 	udiv	r2, r2, r3
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        ( pxQueue->uxLength >= 1U ) &&
 800136a:	429a      	cmp	r2, r3
 800136c:	d34c      	bcc.n	8001408 <xQueueGenericReset+0xe8>
    {
        taskENTER_CRITICAL();
 800136e:	f7ff fd37 	bl	8000de0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800137a:	6939      	ldr	r1, [r7, #16]
 800137c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800137e:	fb01 f303 	mul.w	r3, r1, r3
 8001382:	441a      	add	r2, r3
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	2200      	movs	r2, #0
 800138c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800139e:	3b01      	subs	r3, #1
 80013a0:	6939      	ldr	r1, [r7, #16]
 80013a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80013a4:	fb01 f303 	mul.w	r3, r1, r3
 80013a8:	441a      	add	r2, r3
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	22ff      	movs	r2, #255	; 0xff
 80013b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	22ff      	movs	r2, #255	; 0xff
 80013ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d114      	bne.n	80013ee <xQueueGenericReset+0xce>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d01a      	beq.n	8001402 <xQueueGenericReset+0xe2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	3310      	adds	r3, #16
 80013d0:	4618      	mov	r0, r3
 80013d2:	f001 f81d 	bl	8002410 <xTaskRemoveFromEventList>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d012      	beq.n	8001402 <xQueueGenericReset+0xe2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80013dc:	4b14      	ldr	r3, [pc, #80]	; (8001430 <xQueueGenericReset+0x110>)
 80013de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	f3bf 8f4f 	dsb	sy
 80013e8:	f3bf 8f6f 	isb	sy
 80013ec:	e009      	b.n	8001402 <xQueueGenericReset+0xe2>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	3310      	adds	r3, #16
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fb38 	bl	8000a68 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	3324      	adds	r3, #36	; 0x24
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fb33 	bl	8000a68 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001402:	f7ff fd1b 	bl	8000e3c <vPortExitCritical>
 8001406:	e001      	b.n	800140c <xQueueGenericReset+0xec>
    }
    else
    {
        xReturn = pdFAIL;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d109      	bne.n	8001426 <xQueueGenericReset+0x106>
 8001412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001416:	f383 8811 	msr	BASEPRI, r3
 800141a:	f3bf 8f6f 	isb	sy
 800141e:	f3bf 8f4f 	dsb	sy
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	e7fe      	b.n	8001424 <xQueueGenericReset+0x104>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001426:	697b      	ldr	r3, [r7, #20]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	e000ed04 	.word	0xe000ed04

08001434 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	; 0x28
 8001438:	af02      	add	r7, sp, #8
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	4613      	mov	r3, r2
 8001440:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d02b      	beq.n	80014a4 <xQueueGenericCreate+0x70>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800144c:	f04f 32ff 	mov.w	r2, #4294967295
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	fbb2 f2f3 	udiv	r2, r2, r3
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	429a      	cmp	r2, r3
 800145a:	d323      	bcc.n	80014a4 <xQueueGenericCreate+0x70>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001464:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001468:	d81c      	bhi.n	80014a4 <xQueueGenericCreate+0x70>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	68ba      	ldr	r2, [r7, #8]
 800146e:	fb02 f303 	mul.w	r3, r2, r3
 8001472:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	3350      	adds	r3, #80	; 0x50
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fd8d 	bl	8000f98 <pvPortMalloc>
 800147e:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d01b      	beq.n	80014be <xQueueGenericCreate+0x8a>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	3350      	adds	r3, #80	; 0x50
 800148e:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001490:	79fa      	ldrb	r2, [r7, #7]
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	4613      	mov	r3, r2
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	68b9      	ldr	r1, [r7, #8]
 800149c:	68f8      	ldr	r0, [r7, #12]
 800149e:	f000 f813 	bl	80014c8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80014a2:	e00c      	b.n	80014be <xQueueGenericCreate+0x8a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d109      	bne.n	80014be <xQueueGenericCreate+0x8a>
 80014aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014ae:	f383 8811 	msr	BASEPRI, r3
 80014b2:	f3bf 8f6f 	isb	sy
 80014b6:	f3bf 8f4f 	dsb	sy
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	e7fe      	b.n	80014bc <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80014be:	69fb      	ldr	r3, [r7, #28]
    }
 80014c0:	4618      	mov	r0, r3
 80014c2:	3720      	adds	r7, #32
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
 80014d4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d103      	bne.n	80014e4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	e002      	b.n	80014ea <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80014f6:	2101      	movs	r1, #1
 80014f8:	69b8      	ldr	r0, [r7, #24]
 80014fa:	f7ff ff11 	bl	8001320 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	78fa      	ldrb	r2, [r7, #3]
 8001502:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08c      	sub	sp, #48	; 0x30
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800151c:	2300      	movs	r3, #0
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001526:	2b00      	cmp	r3, #0
 8001528:	d109      	bne.n	800153e <xQueueReceive+0x2e>
 800152a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800152e:	f383 8811 	msr	BASEPRI, r3
 8001532:	f3bf 8f6f 	isb	sy
 8001536:	f3bf 8f4f 	dsb	sy
 800153a:	623b      	str	r3, [r7, #32]
 800153c:	e7fe      	b.n	800153c <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d103      	bne.n	800154c <xQueueReceive+0x3c>
 8001544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <xQueueReceive+0x40>
 800154c:	2301      	movs	r3, #1
 800154e:	e000      	b.n	8001552 <xQueueReceive+0x42>
 8001550:	2300      	movs	r3, #0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d109      	bne.n	800156a <xQueueReceive+0x5a>
 8001556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800155a:	f383 8811 	msr	BASEPRI, r3
 800155e:	f3bf 8f6f 	isb	sy
 8001562:	f3bf 8f4f 	dsb	sy
 8001566:	61fb      	str	r3, [r7, #28]
 8001568:	e7fe      	b.n	8001568 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800156a:	f001 f95d 	bl	8002828 <xTaskGetSchedulerState>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d102      	bne.n	800157a <xQueueReceive+0x6a>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <xQueueReceive+0x6e>
 800157a:	2301      	movs	r3, #1
 800157c:	e000      	b.n	8001580 <xQueueReceive+0x70>
 800157e:	2300      	movs	r3, #0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d109      	bne.n	8001598 <xQueueReceive+0x88>
 8001584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001588:	f383 8811 	msr	BASEPRI, r3
 800158c:	f3bf 8f6f 	isb	sy
 8001590:	f3bf 8f4f 	dsb	sy
 8001594:	61bb      	str	r3, [r7, #24]
 8001596:	e7fe      	b.n	8001596 <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001598:	f7ff fc22 	bl	8000de0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800159c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d01f      	beq.n	80015e8 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80015a8:	68b9      	ldr	r1, [r7, #8]
 80015aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015ac:	f000 f88c 	bl	80016c8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	1e5a      	subs	r2, r3, #1
 80015b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b6:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80015b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00f      	beq.n	80015e0 <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80015c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c2:	3310      	adds	r3, #16
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 ff23 	bl	8002410 <xTaskRemoveFromEventList>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d007      	beq.n	80015e0 <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80015d0:	4b3c      	ldr	r3, [pc, #240]	; (80016c4 <xQueueReceive+0x1b4>)
 80015d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	f3bf 8f4f 	dsb	sy
 80015dc:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80015e0:	f7ff fc2c 	bl	8000e3c <vPortExitCritical>
                return pdPASS;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e069      	b.n	80016bc <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d103      	bne.n	80015f6 <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80015ee:	f7ff fc25 	bl	8000e3c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80015f2:	2300      	movs	r3, #0
 80015f4:	e062      	b.n	80016bc <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 80015f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d106      	bne.n	800160a <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	4618      	mov	r0, r3
 8001602:	f000 ffdb 	bl	80025bc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001606:	2301      	movs	r3, #1
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800160a:	f7ff fc17 	bl	8000e3c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800160e:	f000 fc0f 	bl	8001e30 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001612:	f7ff fbe5 	bl	8000de0 <vPortEnterCritical>
 8001616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001618:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800161c:	b25b      	sxtb	r3, r3
 800161e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001622:	d103      	bne.n	800162c <xQueueReceive+0x11c>
 8001624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800162c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001632:	b25b      	sxtb	r3, r3
 8001634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001638:	d103      	bne.n	8001642 <xQueueReceive+0x132>
 800163a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001642:	f7ff fbfb 	bl	8000e3c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001646:	1d3a      	adds	r2, r7, #4
 8001648:	f107 0310 	add.w	r3, r7, #16
 800164c:	4611      	mov	r1, r2
 800164e:	4618      	mov	r0, r3
 8001650:	f000 ffca 	bl	80025e8 <xTaskCheckForTimeOut>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d123      	bne.n	80016a2 <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800165a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800165c:	f000 f8ac 	bl	80017b8 <prvIsQueueEmpty>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d017      	beq.n	8001696 <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001668:	3324      	adds	r3, #36	; 0x24
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	4611      	mov	r1, r2
 800166e:	4618      	mov	r0, r3
 8001670:	f000 fe66 	bl	8002340 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001676:	f000 f84d 	bl	8001714 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800167a:	f000 fbe7 	bl	8001e4c <xTaskResumeAll>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d189      	bne.n	8001598 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <xQueueReceive+0x1b4>)
 8001686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	f3bf 8f4f 	dsb	sy
 8001690:	f3bf 8f6f 	isb	sy
 8001694:	e780      	b.n	8001598 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001698:	f000 f83c 	bl	8001714 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800169c:	f000 fbd6 	bl	8001e4c <xTaskResumeAll>
 80016a0:	e77a      	b.n	8001598 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80016a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016a4:	f000 f836 	bl	8001714 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80016a8:	f000 fbd0 	bl	8001e4c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80016ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016ae:	f000 f883 	bl	80017b8 <prvIsQueueEmpty>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f43f af6f 	beq.w	8001598 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80016ba:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3730      	adds	r7, #48	; 0x30
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	e000ed04 	.word	0xe000ed04

080016c8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d018      	beq.n	800170c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	441a      	add	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d303      	bcc.n	80016fc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68d9      	ldr	r1, [r3, #12]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	461a      	mov	r2, r3
 8001706:	6838      	ldr	r0, [r7, #0]
 8001708:	f001 ff60 	bl	80035cc <memcpy>
    }
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800171c:	f7ff fb60 	bl	8000de0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001726:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001728:	e011      	b.n	800174e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	2b00      	cmp	r3, #0
 8001730:	d012      	beq.n	8001758 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3324      	adds	r3, #36	; 0x24
 8001736:	4618      	mov	r0, r3
 8001738:	f000 fe6a 	bl	8002410 <xTaskRemoveFromEventList>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001742:	f000 ffb5 	bl	80026b0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	3b01      	subs	r3, #1
 800174a:	b2db      	uxtb	r3, r3
 800174c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800174e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001752:	2b00      	cmp	r3, #0
 8001754:	dce9      	bgt.n	800172a <prvUnlockQueue+0x16>
 8001756:	e000      	b.n	800175a <prvUnlockQueue+0x46>
                    break;
 8001758:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	22ff      	movs	r2, #255	; 0xff
 800175e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001762:	f7ff fb6b 	bl	8000e3c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001766:	f7ff fb3b 	bl	8000de0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001770:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001772:	e011      	b.n	8001798 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d012      	beq.n	80017a2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3310      	adds	r3, #16
 8001780:	4618      	mov	r0, r3
 8001782:	f000 fe45 	bl	8002410 <xTaskRemoveFromEventList>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800178c:	f000 ff90 	bl	80026b0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001790:	7bbb      	ldrb	r3, [r7, #14]
 8001792:	3b01      	subs	r3, #1
 8001794:	b2db      	uxtb	r3, r3
 8001796:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001798:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800179c:	2b00      	cmp	r3, #0
 800179e:	dce9      	bgt.n	8001774 <prvUnlockQueue+0x60>
 80017a0:	e000      	b.n	80017a4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80017a2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	22ff      	movs	r2, #255	; 0xff
 80017a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80017ac:	f7ff fb46 	bl	8000e3c <vPortExitCritical>
}
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80017c0:	f7ff fb0e 	bl	8000de0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d102      	bne.n	80017d2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80017cc:	2301      	movs	r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	e001      	b.n	80017d6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80017d6:	f7ff fb31 	bl	8000e3c <vPortExitCritical>

    return xReturn;
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d109      	bne.n	800180c <vQueueAddToRegistry+0x28>
 80017f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017fc:	f383 8811 	msr	BASEPRI, r3
 8001800:	f3bf 8f6f 	isb	sy
 8001804:	f3bf 8f4f 	dsb	sy
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	e7fe      	b.n	800180a <vQueueAddToRegistry+0x26>

        if( pcQueueName != NULL )
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d024      	beq.n	800185c <vQueueAddToRegistry+0x78>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	e01e      	b.n	8001856 <vQueueAddToRegistry+0x72>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001818:	4a18      	ldr	r2, [pc, #96]	; (800187c <vQueueAddToRegistry+0x98>)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	4413      	add	r3, r2
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	429a      	cmp	r2, r3
 8001826:	d105      	bne.n	8001834 <vQueueAddToRegistry+0x50>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	4a13      	ldr	r2, [pc, #76]	; (800187c <vQueueAddToRegistry+0x98>)
 800182e:	4413      	add	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
                    break;
 8001832:	e013      	b.n	800185c <vQueueAddToRegistry+0x78>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10a      	bne.n	8001850 <vQueueAddToRegistry+0x6c>
 800183a:	4a10      	ldr	r2, [pc, #64]	; (800187c <vQueueAddToRegistry+0x98>)
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d104      	bne.n	8001850 <vQueueAddToRegistry+0x6c>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4a0c      	ldr	r2, [pc, #48]	; (800187c <vQueueAddToRegistry+0x98>)
 800184c:	4413      	add	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	3301      	adds	r3, #1
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	2b07      	cmp	r3, #7
 800185a:	d9dd      	bls.n	8001818 <vQueueAddToRegistry+0x34>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d005      	beq.n	800186e <vQueueAddToRegistry+0x8a>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800186e:	bf00      	nop
 8001870:	371c      	adds	r7, #28
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20012e28 	.word	0x20012e28

08001880 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001890:	f7ff faa6 	bl	8000de0 <vPortEnterCritical>
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800189a:	b25b      	sxtb	r3, r3
 800189c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a0:	d103      	bne.n	80018aa <vQueueWaitForMessageRestricted+0x2a>
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018b0:	b25b      	sxtb	r3, r3
 80018b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b6:	d103      	bne.n	80018c0 <vQueueWaitForMessageRestricted+0x40>
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80018c0:	f7ff fabc 	bl	8000e3c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d106      	bne.n	80018da <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	3324      	adds	r3, #36	; 0x24
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	68b9      	ldr	r1, [r7, #8]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 fd57 	bl	8002388 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80018da:	6978      	ldr	r0, [r7, #20]
 80018dc:	f7ff ff1a 	bl	8001714 <prvUnlockQueue>
    }
 80018e0:	bf00      	nop
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08c      	sub	sp, #48	; 0x30
 80018ec:	af04      	add	r7, sp, #16
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	4613      	mov	r3, r2
 80018f6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80018f8:	88fb      	ldrh	r3, [r7, #6]
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fb4b 	bl	8000f98 <pvPortMalloc>
 8001902:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d013      	beq.n	8001932 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800190a:	2058      	movs	r0, #88	; 0x58
 800190c:	f7ff fb44 	bl	8000f98 <pvPortMalloc>
 8001910:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d008      	beq.n	800192a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001918:	2258      	movs	r2, #88	; 0x58
 800191a:	2100      	movs	r1, #0
 800191c:	69f8      	ldr	r0, [r7, #28]
 800191e:	f001 fe60 	bl	80035e2 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	631a      	str	r2, [r3, #48]	; 0x30
 8001928:	e005      	b.n	8001936 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f7ff fbec 	bl	8001108 <vPortFree>
 8001930:	e001      	b.n	8001936 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d013      	beq.n	8001964 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800193c:	88fa      	ldrh	r2, [r7, #6]
 800193e:	2300      	movs	r3, #0
 8001940:	9303      	str	r3, [sp, #12]
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	9302      	str	r3, [sp, #8]
 8001946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001948:	9301      	str	r3, [sp, #4]
 800194a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f000 f80e 	bl	8001974 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001958:	69f8      	ldr	r0, [r7, #28]
 800195a:	f000 f897 	bl	8001a8c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800195e:	2301      	movs	r3, #1
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	e002      	b.n	800196a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001964:	f04f 33ff 	mov.w	r3, #4294967295
 8001968:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800196a:	69bb      	ldr	r3, [r7, #24]
    }
 800196c:	4618      	mov	r0, r3
 800196e:	3720      	adds	r7, #32
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
 8001980:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001984:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	461a      	mov	r2, r3
 800198c:	21a5      	movs	r1, #165	; 0xa5
 800198e:	f001 fe28 	bl	80035e2 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800199c:	3b01      	subs	r3, #1
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	f023 0307 	bic.w	r3, r3, #7
 80019aa:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d009      	beq.n	80019ca <prvInitialiseNewTask+0x56>
 80019b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ba:	f383 8811 	msr	BASEPRI, r3
 80019be:	f3bf 8f6f 	isb	sy
 80019c2:	f3bf 8f4f 	dsb	sy
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	e7fe      	b.n	80019c8 <prvInitialiseNewTask+0x54>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d01e      	beq.n	8001a0e <prvInitialiseNewTask+0x9a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
 80019d4:	e012      	b.n	80019fc <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	4413      	add	r3, r2
 80019dc:	7819      	ldrb	r1, [r3, #0]
 80019de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	4413      	add	r3, r2
 80019e4:	3334      	adds	r3, #52	; 0x34
 80019e6:	460a      	mov	r2, r1
 80019e8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	4413      	add	r3, r2
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d006      	beq.n	8001a04 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3301      	adds	r3, #1
 80019fa:	61fb      	str	r3, [r7, #28]
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	2b09      	cmp	r3, #9
 8001a00:	d9e9      	bls.n	80019d6 <prvInitialiseNewTask+0x62>
 8001a02:	e000      	b.n	8001a06 <prvInitialiseNewTask+0x92>
            {
                break;
 8001a04:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a10:	2b04      	cmp	r3, #4
 8001a12:	d909      	bls.n	8001a28 <prvInitialiseNewTask+0xb4>
 8001a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a18:	f383 8811 	msr	BASEPRI, r3
 8001a1c:	f3bf 8f6f 	isb	sy
 8001a20:	f3bf 8f4f 	dsb	sy
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	e7fe      	b.n	8001a26 <prvInitialiseNewTask+0xb2>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d901      	bls.n	8001a32 <prvInitialiseNewTask+0xbe>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001a2e:	2304      	movs	r3, #4
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a36:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a3c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a40:	3304      	adds	r3, #4
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff f830 	bl	8000aa8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4a:	3318      	adds	r3, #24
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff f82b 	bl	8000aa8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a56:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5a:	f1c3 0205 	rsb	r2, r3, #5
 8001a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a60:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a66:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	68f9      	ldr	r1, [r7, #12]
 8001a6c:	69b8      	ldr	r0, [r7, #24]
 8001a6e:	f7ff f88b 	bl	8000b88 <pxPortInitialiseStack>
 8001a72:	4602      	mov	r2, r0
 8001a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a76:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d002      	beq.n	8001a84 <prvInitialiseNewTask+0x110>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a82:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001a84:	bf00      	nop
 8001a86:	3720      	adds	r7, #32
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001a94:	f7ff f9a4 	bl	8000de0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001a98:	4b40      	ldr	r3, [pc, #256]	; (8001b9c <prvAddNewTaskToReadyList+0x110>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	4a3f      	ldr	r2, [pc, #252]	; (8001b9c <prvAddNewTaskToReadyList+0x110>)
 8001aa0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001aa2:	4b3f      	ldr	r3, [pc, #252]	; (8001ba0 <prvAddNewTaskToReadyList+0x114>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d109      	bne.n	8001abe <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001aaa:	4a3d      	ldr	r2, [pc, #244]	; (8001ba0 <prvAddNewTaskToReadyList+0x114>)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001ab0:	4b3a      	ldr	r3, [pc, #232]	; (8001b9c <prvAddNewTaskToReadyList+0x110>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d110      	bne.n	8001ada <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001ab8:	f000 fe1e 	bl	80026f8 <prvInitialiseTaskLists>
 8001abc:	e00d      	b.n	8001ada <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001abe:	4b39      	ldr	r3, [pc, #228]	; (8001ba4 <prvAddNewTaskToReadyList+0x118>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d109      	bne.n	8001ada <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001ac6:	4b36      	ldr	r3, [pc, #216]	; (8001ba0 <prvAddNewTaskToReadyList+0x114>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d802      	bhi.n	8001ada <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001ad4:	4a32      	ldr	r2, [pc, #200]	; (8001ba0 <prvAddNewTaskToReadyList+0x114>)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001ada:	4b33      	ldr	r3, [pc, #204]	; (8001ba8 <prvAddNewTaskToReadyList+0x11c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	4a31      	ldr	r2, [pc, #196]	; (8001ba8 <prvAddNewTaskToReadyList+0x11c>)
 8001ae2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001ae4:	4b30      	ldr	r3, [pc, #192]	; (8001ba8 <prvAddNewTaskToReadyList+0x11c>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af0:	2201      	movs	r2, #1
 8001af2:	409a      	lsls	r2, r3
 8001af4:	4b2d      	ldr	r3, [pc, #180]	; (8001bac <prvAddNewTaskToReadyList+0x120>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	4a2c      	ldr	r2, [pc, #176]	; (8001bac <prvAddNewTaskToReadyList+0x120>)
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b02:	492b      	ldr	r1, [pc, #172]	; (8001bb0 <prvAddNewTaskToReadyList+0x124>)
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	3304      	adds	r3, #4
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	3204      	adds	r2, #4
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	1d1a      	adds	r2, r3, #4
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4a1b      	ldr	r2, [pc, #108]	; (8001bb0 <prvAddNewTaskToReadyList+0x124>)
 8001b42:	441a      	add	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	615a      	str	r2, [r3, #20]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b4c:	4918      	ldr	r1, [pc, #96]	; (8001bb0 <prvAddNewTaskToReadyList+0x124>)
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	440b      	add	r3, r1
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	1c59      	adds	r1, r3, #1
 8001b5c:	4814      	ldr	r0, [pc, #80]	; (8001bb0 <prvAddNewTaskToReadyList+0x124>)
 8001b5e:	4613      	mov	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4403      	add	r3, r0
 8001b68:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001b6a:	f7ff f967 	bl	8000e3c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <prvAddNewTaskToReadyList+0x118>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00e      	beq.n	8001b94 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <prvAddNewTaskToReadyList+0x114>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d207      	bcs.n	8001b94 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <prvAddNewTaskToReadyList+0x128>)
 8001b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	f3bf 8f4f 	dsb	sy
 8001b90:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20012da8 	.word	0x20012da8
 8001ba0:	20012cd0 	.word	0x20012cd0
 8001ba4:	20012db4 	.word	0x20012db4
 8001ba8:	20012dc4 	.word	0x20012dc4
 8001bac:	20012db0 	.word	0x20012db0
 8001bb0:	20012cd4 	.word	0x20012cd4
 8001bb4:	e000ed04 	.word	0xe000ed04

08001bb8 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 8001bc0:	f7ff f90e 	bl	8000de0 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d102      	bne.n	8001bd0 <uxTaskPriorityGet+0x18>
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <uxTaskPriorityGet+0x30>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	e000      	b.n	8001bd2 <uxTaskPriorityGet+0x1a>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd8:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 8001bda:	f7ff f92f 	bl	8000e3c <vPortExitCritical>

        return uxReturn;
 8001bde:	68bb      	ldr	r3, [r7, #8]
    }
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20012cd0 	.word	0x20012cd0

08001bec <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d909      	bls.n	8001c14 <vTaskPrioritySet+0x28>
 8001c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c04:	f383 8811 	msr	BASEPRI, r3
 8001c08:	f3bf 8f6f 	isb	sy
 8001c0c:	f3bf 8f4f 	dsb	sy
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	e7fe      	b.n	8001c12 <vTaskPrioritySet+0x26>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d901      	bls.n	8001c1e <vTaskPrioritySet+0x32>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8001c1e:	f7ff f8df 	bl	8000de0 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d102      	bne.n	8001c2e <vTaskPrioritySet+0x42>
 8001c28:	4b55      	ldr	r3, [pc, #340]	; (8001d80 <vTaskPrioritySet+0x194>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	e000      	b.n	8001c30 <vTaskPrioritySet+0x44>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c36:	617b      	str	r3, [r7, #20]
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	f000 8098 	beq.w	8001d72 <vTaskPrioritySet+0x186>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d90d      	bls.n	8001c66 <vTaskPrioritySet+0x7a>
                {
                    if( pxTCB != pxCurrentTCB )
 8001c4a:	4b4d      	ldr	r3, [pc, #308]	; (8001d80 <vTaskPrioritySet+0x194>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d00f      	beq.n	8001c74 <vTaskPrioritySet+0x88>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8001c54:	4b4a      	ldr	r3, [pc, #296]	; (8001d80 <vTaskPrioritySet+0x194>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d809      	bhi.n	8001c74 <vTaskPrioritySet+0x88>
                        {
                            xYieldRequired = pdTRUE;
 8001c60:	2301      	movs	r3, #1
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	e006      	b.n	8001c74 <vTaskPrioritySet+0x88>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8001c66:	4b46      	ldr	r3, [pc, #280]	; (8001d80 <vTaskPrioritySet+0x194>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d101      	bne.n	8001c74 <vTaskPrioritySet+0x88>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 8001c70:	2301      	movs	r3, #1
 8001c72:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c78:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority. */
                    if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d102      	bne.n	8001c8c <vTaskPrioritySet+0xa0>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	62da      	str	r2, [r3, #44]	; 0x2c
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	649a      	str	r2, [r3, #72]	; 0x48
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	db04      	blt.n	8001ca4 <vTaskPrioritySet+0xb8>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	f1c3 0205 	rsb	r2, r3, #5
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	6959      	ldr	r1, [r3, #20]
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4a34      	ldr	r2, [pc, #208]	; (8001d84 <vTaskPrioritySet+0x198>)
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4299      	cmp	r1, r3
 8001cb8:	d150      	bne.n	8001d5c <vTaskPrioritySet+0x170>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7fe ff38 	bl	8000b34 <uxListRemove>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d109      	bne.n	8001cde <vTaskPrioritySet+0xf2>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8001cca:	2201      	movs	r2, #1
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43da      	mvns	r2, r3
 8001cd4:	4b2c      	ldr	r3, [pc, #176]	; (8001d88 <vTaskPrioritySet+0x19c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	4a2b      	ldr	r2, [pc, #172]	; (8001d88 <vTaskPrioritySet+0x19c>)
 8001cdc:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	409a      	lsls	r2, r3
 8001ce6:	4b28      	ldr	r3, [pc, #160]	; (8001d88 <vTaskPrioritySet+0x19c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	4a26      	ldr	r2, [pc, #152]	; (8001d88 <vTaskPrioritySet+0x19c>)
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf4:	4923      	ldr	r1, [pc, #140]	; (8001d84 <vTaskPrioritySet+0x198>)
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	440b      	add	r3, r1
 8001d00:	3304      	adds	r3, #4
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	60da      	str	r2, [r3, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	3204      	adds	r2, #4
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	1d1a      	adds	r2, r3, #4
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4a14      	ldr	r2, [pc, #80]	; (8001d84 <vTaskPrioritySet+0x198>)
 8001d34:	441a      	add	r2, r3
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	615a      	str	r2, [r3, #20]
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d3e:	4911      	ldr	r1, [pc, #68]	; (8001d84 <vTaskPrioritySet+0x198>)
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	1c59      	adds	r1, r3, #1
 8001d4e:	480d      	ldr	r0, [pc, #52]	; (8001d84 <vTaskPrioritySet+0x198>)
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4403      	add	r3, r0
 8001d5a:	6019      	str	r1, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d007      	beq.n	8001d72 <vTaskPrioritySet+0x186>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8001d62:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <vTaskPrioritySet+0x1a0>)
 8001d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	f3bf 8f4f 	dsb	sy
 8001d6e:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8001d72:	f7ff f863 	bl	8000e3c <vPortExitCritical>
    }
 8001d76:	bf00      	nop
 8001d78:	3720      	adds	r7, #32
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20012cd0 	.word	0x20012cd0
 8001d84:	20012cd4 	.word	0x20012cd4
 8001d88:	20012db0 	.word	0x20012db0
 8001d8c:	e000ed04 	.word	0xe000ed04

08001d90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8001d96:	4b1f      	ldr	r3, [pc, #124]	; (8001e14 <vTaskStartScheduler+0x84>)
 8001d98:	9301      	str	r3, [sp, #4]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	2282      	movs	r2, #130	; 0x82
 8001da2:	491d      	ldr	r1, [pc, #116]	; (8001e18 <vTaskStartScheduler+0x88>)
 8001da4:	481d      	ldr	r0, [pc, #116]	; (8001e1c <vTaskStartScheduler+0x8c>)
 8001da6:	f7ff fd9f 	bl	80018e8 <xTaskCreate>
 8001daa:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d102      	bne.n	8001db8 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8001db2:	f000 fdd7 	bl	8002964 <xTimerCreateTimerTask>
 8001db6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d115      	bne.n	8001dea <vTaskStartScheduler+0x5a>
 8001dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc2:	f383 8811 	msr	BASEPRI, r3
 8001dc6:	f3bf 8f6f 	isb	sy
 8001dca:	f3bf 8f4f 	dsb	sy
 8001dce:	60bb      	str	r3, [r7, #8]
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001dd0:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <vTaskStartScheduler+0x90>)
 8001dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <vTaskStartScheduler+0x94>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001dde:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <vTaskStartScheduler+0x98>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001de4:	f7fe ff5e 	bl	8000ca4 <xPortStartScheduler>
 8001de8:	e00d      	b.n	8001e06 <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df0:	d109      	bne.n	8001e06 <vTaskStartScheduler+0x76>
 8001df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df6:	f383 8811 	msr	BASEPRI, r3
 8001dfa:	f3bf 8f6f 	isb	sy
 8001dfe:	f3bf 8f4f 	dsb	sy
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	e7fe      	b.n	8001e04 <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001e06:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <vTaskStartScheduler+0x9c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
}
 8001e0a:	bf00      	nop
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20012dcc 	.word	0x20012dcc
 8001e18:	08003e6c 	.word	0x08003e6c
 8001e1c:	080026c9 	.word	0x080026c9
 8001e20:	20012dc8 	.word	0x20012dc8
 8001e24:	20012db4 	.word	0x20012db4
 8001e28:	20012dac 	.word	0x20012dac
 8001e2c:	20000014 	.word	0x20000014

08001e30 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001e34:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <vTaskSuspendAll+0x18>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	4a03      	ldr	r2, [pc, #12]	; (8001e48 <vTaskSuspendAll+0x18>)
 8001e3c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	20012dd0 	.word	0x20012dd0

08001e4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001e5a:	4b70      	ldr	r3, [pc, #448]	; (800201c <xTaskResumeAll+0x1d0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d109      	bne.n	8001e76 <xTaskResumeAll+0x2a>
 8001e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e66:	f383 8811 	msr	BASEPRI, r3
 8001e6a:	f3bf 8f6f 	isb	sy
 8001e6e:	f3bf 8f4f 	dsb	sy
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	e7fe      	b.n	8001e74 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001e76:	f7fe ffb3 	bl	8000de0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001e7a:	4b68      	ldr	r3, [pc, #416]	; (800201c <xTaskResumeAll+0x1d0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	4a66      	ldr	r2, [pc, #408]	; (800201c <xTaskResumeAll+0x1d0>)
 8001e82:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e84:	4b65      	ldr	r3, [pc, #404]	; (800201c <xTaskResumeAll+0x1d0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f040 80c0 	bne.w	800200e <xTaskResumeAll+0x1c2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001e8e:	4b64      	ldr	r3, [pc, #400]	; (8002020 <xTaskResumeAll+0x1d4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 80bb 	beq.w	800200e <xTaskResumeAll+0x1c2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e98:	e08a      	b.n	8001fb0 <xTaskResumeAll+0x164>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e9a:	4b62      	ldr	r3, [pc, #392]	; (8002024 <xTaskResumeAll+0x1d8>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	69fa      	ldr	r2, [r7, #28]
 8001eae:	6a12      	ldr	r2, [r2, #32]
 8001eb0:	609a      	str	r2, [r3, #8]
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	69fa      	ldr	r2, [r7, #28]
 8001eb8:	69d2      	ldr	r2, [r2, #28]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	3318      	adds	r3, #24
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d103      	bne.n	8001ed0 <xTaskResumeAll+0x84>
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	6a1a      	ldr	r2, [r3, #32]
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	629a      	str	r2, [r3, #40]	; 0x28
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	1e5a      	subs	r2, r3, #1
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	68d2      	ldr	r2, [r2, #12]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	69fa      	ldr	r2, [r7, #28]
 8001ef6:	6892      	ldr	r2, [r2, #8]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3304      	adds	r3, #4
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d103      	bne.n	8001f0e <xTaskResumeAll+0xc2>
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	2200      	movs	r2, #0
 8001f12:	615a      	str	r2, [r3, #20]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	1e5a      	subs	r2, r3, #1
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f22:	2201      	movs	r2, #1
 8001f24:	409a      	lsls	r2, r3
 8001f26:	4b40      	ldr	r3, [pc, #256]	; (8002028 <xTaskResumeAll+0x1dc>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	4a3e      	ldr	r2, [pc, #248]	; (8002028 <xTaskResumeAll+0x1dc>)
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f34:	493d      	ldr	r1, [pc, #244]	; (800202c <xTaskResumeAll+0x1e0>)
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	440b      	add	r3, r1
 8001f40:	3304      	adds	r3, #4
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	60da      	str	r2, [r3, #12]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	69fa      	ldr	r2, [r7, #28]
 8001f5a:	3204      	adds	r2, #4
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	1d1a      	adds	r2, r3, #4
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4a2e      	ldr	r2, [pc, #184]	; (800202c <xTaskResumeAll+0x1e0>)
 8001f74:	441a      	add	r2, r3
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	615a      	str	r2, [r3, #20]
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f7e:	492b      	ldr	r1, [pc, #172]	; (800202c <xTaskResumeAll+0x1e0>)
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	1c59      	adds	r1, r3, #1
 8001f8e:	4827      	ldr	r0, [pc, #156]	; (800202c <xTaskResumeAll+0x1e0>)
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4403      	add	r3, r0
 8001f9a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fa0:	4b23      	ldr	r3, [pc, #140]	; (8002030 <xTaskResumeAll+0x1e4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d302      	bcc.n	8001fb0 <xTaskResumeAll+0x164>
                    {
                        xYieldPending = pdTRUE;
 8001faa:	4b22      	ldr	r3, [pc, #136]	; (8002034 <xTaskResumeAll+0x1e8>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001fb0:	4b1c      	ldr	r3, [pc, #112]	; (8002024 <xTaskResumeAll+0x1d8>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f47f af70 	bne.w	8001e9a <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <xTaskResumeAll+0x178>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001fc0:	f000 fc16 	bl	80027f0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001fc4:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <xTaskResumeAll+0x1ec>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d010      	beq.n	8001ff2 <xTaskResumeAll+0x1a6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001fd0:	f000 f846 	bl	8002060 <xTaskIncrementTick>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <xTaskResumeAll+0x194>
                            {
                                xYieldPending = pdTRUE;
 8001fda:	4b16      	ldr	r3, [pc, #88]	; (8002034 <xTaskResumeAll+0x1e8>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1f1      	bne.n	8001fd0 <xTaskResumeAll+0x184>

                        xPendedTicks = 0;
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <xTaskResumeAll+0x1ec>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <xTaskResumeAll+0x1e8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d009      	beq.n	800200e <xTaskResumeAll+0x1c2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001ffe:	4b0f      	ldr	r3, [pc, #60]	; (800203c <xTaskResumeAll+0x1f0>)
 8002000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	f3bf 8f4f 	dsb	sy
 800200a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800200e:	f7fe ff15 	bl	8000e3c <vPortExitCritical>

    return xAlreadyYielded;
 8002012:	69bb      	ldr	r3, [r7, #24]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3720      	adds	r7, #32
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20012dd0 	.word	0x20012dd0
 8002020:	20012da8 	.word	0x20012da8
 8002024:	20012d68 	.word	0x20012d68
 8002028:	20012db0 	.word	0x20012db0
 800202c:	20012cd4 	.word	0x20012cd4
 8002030:	20012cd0 	.word	0x20012cd0
 8002034:	20012dbc 	.word	0x20012dbc
 8002038:	20012db8 	.word	0x20012db8
 800203c:	e000ed04 	.word	0xe000ed04

08002040 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002046:	4b05      	ldr	r3, [pc, #20]	; (800205c <xTaskGetTickCount+0x1c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800204c:	687b      	ldr	r3, [r7, #4]
}
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	20012dac 	.word	0x20012dac

08002060 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08a      	sub	sp, #40	; 0x28
 8002064:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800206a:	4b7d      	ldr	r3, [pc, #500]	; (8002260 <xTaskIncrementTick+0x200>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	f040 80eb 	bne.w	800224a <xTaskIncrementTick+0x1ea>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002074:	4b7b      	ldr	r3, [pc, #492]	; (8002264 <xTaskIncrementTick+0x204>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	3301      	adds	r3, #1
 800207a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800207c:	4a79      	ldr	r2, [pc, #484]	; (8002264 <xTaskIncrementTick+0x204>)
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d11f      	bne.n	80020c8 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002088:	4b77      	ldr	r3, [pc, #476]	; (8002268 <xTaskIncrementTick+0x208>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d009      	beq.n	80020a6 <xTaskIncrementTick+0x46>
 8002092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002096:	f383 8811 	msr	BASEPRI, r3
 800209a:	f3bf 8f6f 	isb	sy
 800209e:	f3bf 8f4f 	dsb	sy
 80020a2:	607b      	str	r3, [r7, #4]
 80020a4:	e7fe      	b.n	80020a4 <xTaskIncrementTick+0x44>
 80020a6:	4b70      	ldr	r3, [pc, #448]	; (8002268 <xTaskIncrementTick+0x208>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	61fb      	str	r3, [r7, #28]
 80020ac:	4b6f      	ldr	r3, [pc, #444]	; (800226c <xTaskIncrementTick+0x20c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a6d      	ldr	r2, [pc, #436]	; (8002268 <xTaskIncrementTick+0x208>)
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	4a6d      	ldr	r2, [pc, #436]	; (800226c <xTaskIncrementTick+0x20c>)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	4b6d      	ldr	r3, [pc, #436]	; (8002270 <xTaskIncrementTick+0x210>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	3301      	adds	r3, #1
 80020c0:	4a6b      	ldr	r2, [pc, #428]	; (8002270 <xTaskIncrementTick+0x210>)
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	f000 fb94 	bl	80027f0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80020c8:	4b6a      	ldr	r3, [pc, #424]	; (8002274 <xTaskIncrementTick+0x214>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6a3a      	ldr	r2, [r7, #32]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	f0c0 80a6 	bcc.w	8002220 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020d4:	4b64      	ldr	r3, [pc, #400]	; (8002268 <xTaskIncrementTick+0x208>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d104      	bne.n	80020e8 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020de:	4b65      	ldr	r3, [pc, #404]	; (8002274 <xTaskIncrementTick+0x214>)
 80020e0:	f04f 32ff 	mov.w	r2, #4294967295
 80020e4:	601a      	str	r2, [r3, #0]
                    break;
 80020e6:	e09b      	b.n	8002220 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020e8:	4b5f      	ldr	r3, [pc, #380]	; (8002268 <xTaskIncrementTick+0x208>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80020f8:	6a3a      	ldr	r2, [r7, #32]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d203      	bcs.n	8002108 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002100:	4a5c      	ldr	r2, [pc, #368]	; (8002274 <xTaskIncrementTick+0x214>)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002106:	e08b      	b.n	8002220 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	68d2      	ldr	r2, [r2, #12]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	6892      	ldr	r2, [r2, #8]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	3304      	adds	r3, #4
 800212a:	429a      	cmp	r2, r3
 800212c:	d103      	bne.n	8002136 <xTaskIncrementTick+0xd6>
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	2200      	movs	r2, #0
 800213a:	615a      	str	r2, [r3, #20]
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	1e5a      	subs	r2, r3, #1
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214a:	2b00      	cmp	r3, #0
 800214c:	d01e      	beq.n	800218c <xTaskIncrementTick+0x12c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	6a12      	ldr	r2, [r2, #32]
 800215c:	609a      	str	r2, [r3, #8]
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	69d2      	ldr	r2, [r2, #28]
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	3318      	adds	r3, #24
 8002170:	429a      	cmp	r2, r3
 8002172:	d103      	bne.n	800217c <xTaskIncrementTick+0x11c>
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	6a1a      	ldr	r2, [r3, #32]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	2200      	movs	r2, #0
 8002180:	629a      	str	r2, [r3, #40]	; 0x28
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	1e5a      	subs	r2, r3, #1
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002190:	2201      	movs	r2, #1
 8002192:	409a      	lsls	r2, r3
 8002194:	4b38      	ldr	r3, [pc, #224]	; (8002278 <xTaskIncrementTick+0x218>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4313      	orrs	r3, r2
 800219a:	4a37      	ldr	r2, [pc, #220]	; (8002278 <xTaskIncrementTick+0x218>)
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a2:	4936      	ldr	r1, [pc, #216]	; (800227c <xTaskIncrementTick+0x21c>)
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	3304      	adds	r3, #4
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	3204      	adds	r2, #4
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	1d1a      	adds	r2, r3, #4
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d8:	4613      	mov	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4a26      	ldr	r2, [pc, #152]	; (800227c <xTaskIncrementTick+0x21c>)
 80021e2:	441a      	add	r2, r3
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	615a      	str	r2, [r3, #20]
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ec:	4923      	ldr	r1, [pc, #140]	; (800227c <xTaskIncrementTick+0x21c>)
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	1c59      	adds	r1, r3, #1
 80021fc:	481f      	ldr	r0, [pc, #124]	; (800227c <xTaskIncrementTick+0x21c>)
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4403      	add	r3, r0
 8002208:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800220e:	4b1c      	ldr	r3, [pc, #112]	; (8002280 <xTaskIncrementTick+0x220>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002214:	429a      	cmp	r2, r3
 8002216:	f67f af5d 	bls.w	80020d4 <xTaskIncrementTick+0x74>
                        {
                            xSwitchRequired = pdTRUE;
 800221a:	2301      	movs	r3, #1
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800221e:	e759      	b.n	80020d4 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002220:	4b17      	ldr	r3, [pc, #92]	; (8002280 <xTaskIncrementTick+0x220>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002226:	4915      	ldr	r1, [pc, #84]	; (800227c <xTaskIncrementTick+0x21c>)
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d901      	bls.n	800223c <xTaskIncrementTick+0x1dc>
            {
                xSwitchRequired = pdTRUE;
 8002238:	2301      	movs	r3, #1
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <xTaskIncrementTick+0x224>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d007      	beq.n	8002254 <xTaskIncrementTick+0x1f4>
            {
                xSwitchRequired = pdTRUE;
 8002244:	2301      	movs	r3, #1
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
 8002248:	e004      	b.n	8002254 <xTaskIncrementTick+0x1f4>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800224a:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <xTaskIncrementTick+0x228>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	3301      	adds	r3, #1
 8002250:	4a0d      	ldr	r2, [pc, #52]	; (8002288 <xTaskIncrementTick+0x228>)
 8002252:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002256:	4618      	mov	r0, r3
 8002258:	3728      	adds	r7, #40	; 0x28
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20012dd0 	.word	0x20012dd0
 8002264:	20012dac 	.word	0x20012dac
 8002268:	20012d60 	.word	0x20012d60
 800226c:	20012d64 	.word	0x20012d64
 8002270:	20012dc0 	.word	0x20012dc0
 8002274:	20012dc8 	.word	0x20012dc8
 8002278:	20012db0 	.word	0x20012db0
 800227c:	20012cd4 	.word	0x20012cd4
 8002280:	20012cd0 	.word	0x20012cd0
 8002284:	20012dbc 	.word	0x20012dbc
 8002288:	20012db8 	.word	0x20012db8

0800228c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800228c:	b480      	push	{r7}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002292:	4b26      	ldr	r3, [pc, #152]	; (800232c <vTaskSwitchContext+0xa0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800229a:	4b25      	ldr	r3, [pc, #148]	; (8002330 <vTaskSwitchContext+0xa4>)
 800229c:	2201      	movs	r2, #1
 800229e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80022a0:	e03e      	b.n	8002320 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 80022a2:	4b23      	ldr	r3, [pc, #140]	; (8002330 <vTaskSwitchContext+0xa4>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022a8:	4b22      	ldr	r3, [pc, #136]	; (8002334 <vTaskSwitchContext+0xa8>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	fab3 f383 	clz	r3, r3
 80022b4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80022b6:	7afb      	ldrb	r3, [r7, #11]
 80022b8:	f1c3 031f 	rsb	r3, r3, #31
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	491e      	ldr	r1, [pc, #120]	; (8002338 <vTaskSwitchContext+0xac>)
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	440b      	add	r3, r1
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d109      	bne.n	80022e6 <vTaskSwitchContext+0x5a>
        __asm volatile
 80022d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d6:	f383 8811 	msr	BASEPRI, r3
 80022da:	f3bf 8f6f 	isb	sy
 80022de:	f3bf 8f4f 	dsb	sy
 80022e2:	607b      	str	r3, [r7, #4]
 80022e4:	e7fe      	b.n	80022e4 <vTaskSwitchContext+0x58>
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4a11      	ldr	r2, [pc, #68]	; (8002338 <vTaskSwitchContext+0xac>)
 80022f2:	4413      	add	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	605a      	str	r2, [r3, #4]
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	3308      	adds	r3, #8
 8002308:	429a      	cmp	r2, r3
 800230a:	d104      	bne.n	8002316 <vTaskSwitchContext+0x8a>
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	4a07      	ldr	r2, [pc, #28]	; (800233c <vTaskSwitchContext+0xb0>)
 800231e:	6013      	str	r3, [r2, #0]
}
 8002320:	bf00      	nop
 8002322:	371c      	adds	r7, #28
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	20012dd0 	.word	0x20012dd0
 8002330:	20012dbc 	.word	0x20012dbc
 8002334:	20012db0 	.word	0x20012db0
 8002338:	20012cd4 	.word	0x20012cd4
 800233c:	20012cd0 	.word	0x20012cd0

08002340 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d109      	bne.n	8002364 <vTaskPlaceOnEventList+0x24>
 8002350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002354:	f383 8811 	msr	BASEPRI, r3
 8002358:	f3bf 8f6f 	isb	sy
 800235c:	f3bf 8f4f 	dsb	sy
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	e7fe      	b.n	8002362 <vTaskPlaceOnEventList+0x22>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002364:	4b07      	ldr	r3, [pc, #28]	; (8002384 <vTaskPlaceOnEventList+0x44>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	3318      	adds	r3, #24
 800236a:	4619      	mov	r1, r3
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7fe fba8 	bl	8000ac2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002372:	2101      	movs	r1, #1
 8002374:	6838      	ldr	r0, [r7, #0]
 8002376:	f000 fa75 	bl	8002864 <prvAddCurrentTaskToDelayedList>
}
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20012cd0 	.word	0x20012cd0

08002388 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <vTaskPlaceOnEventListRestricted+0x26>
 800239a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239e:	f383 8811 	msr	BASEPRI, r3
 80023a2:	f3bf 8f6f 	isb	sy
 80023a6:	f3bf 8f4f 	dsb	sy
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	e7fe      	b.n	80023ac <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	4b15      	ldr	r3, [pc, #84]	; (800240c <vTaskPlaceOnEventListRestricted+0x84>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	61da      	str	r2, [r3, #28]
 80023bc:	4b13      	ldr	r3, [pc, #76]	; (800240c <vTaskPlaceOnEventListRestricted+0x84>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	6892      	ldr	r2, [r2, #8]
 80023c4:	621a      	str	r2, [r3, #32]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	4a10      	ldr	r2, [pc, #64]	; (800240c <vTaskPlaceOnEventListRestricted+0x84>)
 80023cc:	6812      	ldr	r2, [r2, #0]
 80023ce:	3218      	adds	r2, #24
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	4b0e      	ldr	r3, [pc, #56]	; (800240c <vTaskPlaceOnEventListRestricted+0x84>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f103 0218 	add.w	r2, r3, #24
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	609a      	str	r2, [r3, #8]
 80023de:	4b0b      	ldr	r3, [pc, #44]	; (800240c <vTaskPlaceOnEventListRestricted+0x84>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	629a      	str	r2, [r3, #40]	; 0x28
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d002      	beq.n	80023fc <vTaskPlaceOnEventListRestricted+0x74>
        {
            xTicksToWait = portMAX_DELAY;
 80023f6:	f04f 33ff 	mov.w	r3, #4294967295
 80023fa:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	68b8      	ldr	r0, [r7, #8]
 8002400:	f000 fa30 	bl	8002864 <prvAddCurrentTaskToDelayedList>
    }
 8002404:	bf00      	nop
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20012cd0 	.word	0x20012cd0

08002410 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002410:	b480      	push	{r7}
 8002412:	b08b      	sub	sp, #44	; 0x2c
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d109      	bne.n	800243a <xTaskRemoveFromEventList+0x2a>
 8002426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800242a:	f383 8811 	msr	BASEPRI, r3
 800242e:	f3bf 8f6f 	isb	sy
 8002432:	f3bf 8f4f 	dsb	sy
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	e7fe      	b.n	8002438 <xTaskRemoveFromEventList+0x28>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243e:	61fb      	str	r3, [r7, #28]
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	6a3a      	ldr	r2, [r7, #32]
 8002446:	6a12      	ldr	r2, [r2, #32]
 8002448:	609a      	str	r2, [r3, #8]
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	6a3a      	ldr	r2, [r7, #32]
 8002450:	69d2      	ldr	r2, [r2, #28]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	3318      	adds	r3, #24
 800245c:	429a      	cmp	r2, r3
 800245e:	d103      	bne.n	8002468 <xTaskRemoveFromEventList+0x58>
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	6a1a      	ldr	r2, [r3, #32]
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	2200      	movs	r2, #0
 800246c:	629a      	str	r2, [r3, #40]	; 0x28
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	1e5a      	subs	r2, r3, #1
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002478:	4b4a      	ldr	r3, [pc, #296]	; (80025a4 <xTaskRemoveFromEventList+0x194>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d15e      	bne.n	800253e <xTaskRemoveFromEventList+0x12e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	61bb      	str	r3, [r7, #24]
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	6a3a      	ldr	r2, [r7, #32]
 800248c:	68d2      	ldr	r2, [r2, #12]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	6a3a      	ldr	r2, [r7, #32]
 8002496:	6892      	ldr	r2, [r2, #8]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	3304      	adds	r3, #4
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d103      	bne.n	80024ae <xTaskRemoveFromEventList+0x9e>
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	2200      	movs	r2, #0
 80024b2:	615a      	str	r2, [r3, #20]
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	1e5a      	subs	r2, r3, #1
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c2:	2201      	movs	r2, #1
 80024c4:	409a      	lsls	r2, r3
 80024c6:	4b38      	ldr	r3, [pc, #224]	; (80025a8 <xTaskRemoveFromEventList+0x198>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	4a36      	ldr	r2, [pc, #216]	; (80025a8 <xTaskRemoveFromEventList+0x198>)
 80024ce:	6013      	str	r3, [r2, #0]
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d4:	4935      	ldr	r1, [pc, #212]	; (80025ac <xTaskRemoveFromEventList+0x19c>)
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	3304      	adds	r3, #4
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	60da      	str	r2, [r3, #12]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	6a3a      	ldr	r2, [r7, #32]
 80024fa:	3204      	adds	r2, #4
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	1d1a      	adds	r2, r3, #4
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	609a      	str	r2, [r3, #8]
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4a26      	ldr	r2, [pc, #152]	; (80025ac <xTaskRemoveFromEventList+0x19c>)
 8002514:	441a      	add	r2, r3
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	615a      	str	r2, [r3, #20]
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800251e:	4923      	ldr	r1, [pc, #140]	; (80025ac <xTaskRemoveFromEventList+0x19c>)
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	1c59      	adds	r1, r3, #1
 800252e:	481f      	ldr	r0, [pc, #124]	; (80025ac <xTaskRemoveFromEventList+0x19c>)
 8002530:	4613      	mov	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4403      	add	r3, r0
 800253a:	6019      	str	r1, [r3, #0]
 800253c:	e01b      	b.n	8002576 <xTaskRemoveFromEventList+0x166>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800253e:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <xTaskRemoveFromEventList+0x1a0>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	61da      	str	r2, [r3, #28]
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	621a      	str	r2, [r3, #32]
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	6a3a      	ldr	r2, [r7, #32]
 8002558:	3218      	adds	r2, #24
 800255a:	605a      	str	r2, [r3, #4]
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	f103 0218 	add.w	r2, r3, #24
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	609a      	str	r2, [r3, #8]
 8002566:	6a3b      	ldr	r3, [r7, #32]
 8002568:	4a11      	ldr	r2, [pc, #68]	; (80025b0 <xTaskRemoveFromEventList+0x1a0>)
 800256a:	629a      	str	r2, [r3, #40]	; 0x28
 800256c:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <xTaskRemoveFromEventList+0x1a0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	3301      	adds	r3, #1
 8002572:	4a0f      	ldr	r2, [pc, #60]	; (80025b0 <xTaskRemoveFromEventList+0x1a0>)
 8002574:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002576:	6a3b      	ldr	r3, [r7, #32]
 8002578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800257a:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <xTaskRemoveFromEventList+0x1a4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	429a      	cmp	r2, r3
 8002582:	d905      	bls.n	8002590 <xTaskRemoveFromEventList+0x180>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002584:	2301      	movs	r3, #1
 8002586:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <xTaskRemoveFromEventList+0x1a8>)
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	e001      	b.n	8002594 <xTaskRemoveFromEventList+0x184>
    }
    else
    {
        xReturn = pdFALSE;
 8002590:	2300      	movs	r3, #0
 8002592:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002596:	4618      	mov	r0, r3
 8002598:	372c      	adds	r7, #44	; 0x2c
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	20012dd0 	.word	0x20012dd0
 80025a8:	20012db0 	.word	0x20012db0
 80025ac:	20012cd4 	.word	0x20012cd4
 80025b0:	20012d68 	.word	0x20012d68
 80025b4:	20012cd0 	.word	0x20012cd0
 80025b8:	20012dbc 	.word	0x20012dbc

080025bc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <vTaskInternalSetTimeOutState+0x24>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80025cc:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <vTaskInternalSetTimeOutState+0x28>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	605a      	str	r2, [r3, #4]
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	20012dc0 	.word	0x20012dc0
 80025e4:	20012dac 	.word	0x20012dac

080025e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d109      	bne.n	800260c <xTaskCheckForTimeOut+0x24>
 80025f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fc:	f383 8811 	msr	BASEPRI, r3
 8002600:	f3bf 8f6f 	isb	sy
 8002604:	f3bf 8f4f 	dsb	sy
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	e7fe      	b.n	800260a <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d109      	bne.n	8002626 <xTaskCheckForTimeOut+0x3e>
 8002612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002616:	f383 8811 	msr	BASEPRI, r3
 800261a:	f3bf 8f6f 	isb	sy
 800261e:	f3bf 8f4f 	dsb	sy
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	e7fe      	b.n	8002624 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8002626:	f7fe fbdb 	bl	8000de0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800262a:	4b1f      	ldr	r3, [pc, #124]	; (80026a8 <xTaskCheckForTimeOut+0xc0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002642:	d102      	bne.n	800264a <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002644:	2300      	movs	r3, #0
 8002646:	61fb      	str	r3, [r7, #28]
 8002648:	e026      	b.n	8002698 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	4b17      	ldr	r3, [pc, #92]	; (80026ac <xTaskCheckForTimeOut+0xc4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d00a      	beq.n	800266c <xTaskCheckForTimeOut+0x84>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	429a      	cmp	r2, r3
 800265e:	d805      	bhi.n	800266c <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002660:	2301      	movs	r3, #1
 8002662:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	e015      	b.n	8002698 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	429a      	cmp	r2, r3
 8002674:	d90b      	bls.n	800268e <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	1ad2      	subs	r2, r2, r3
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff ff9a 	bl	80025bc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002688:	2300      	movs	r3, #0
 800268a:	61fb      	str	r3, [r7, #28]
 800268c:	e004      	b.n	8002698 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002694:	2301      	movs	r3, #1
 8002696:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002698:	f7fe fbd0 	bl	8000e3c <vPortExitCritical>

    return xReturn;
 800269c:	69fb      	ldr	r3, [r7, #28]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3720      	adds	r7, #32
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20012dac 	.word	0x20012dac
 80026ac:	20012dc0 	.word	0x20012dc0

080026b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80026b4:	4b03      	ldr	r3, [pc, #12]	; (80026c4 <vTaskMissedYield+0x14>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	601a      	str	r2, [r3, #0]
}
 80026ba:	bf00      	nop
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	20012dbc 	.word	0x20012dbc

080026c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80026d0:	f000 f852 	bl	8002778 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <prvIdleTask+0x28>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d9f9      	bls.n	80026d0 <prvIdleTask+0x8>
            {
                taskYIELD();
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <prvIdleTask+0x2c>)
 80026de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	f3bf 8f4f 	dsb	sy
 80026e8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80026ec:	e7f0      	b.n	80026d0 <prvIdleTask+0x8>
 80026ee:	bf00      	nop
 80026f0:	20012cd4 	.word	0x20012cd4
 80026f4:	e000ed04 	.word	0xe000ed04

080026f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80026fe:	2300      	movs	r3, #0
 8002700:	607b      	str	r3, [r7, #4]
 8002702:	e00c      	b.n	800271e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4a12      	ldr	r2, [pc, #72]	; (8002758 <prvInitialiseTaskLists+0x60>)
 8002710:	4413      	add	r3, r2
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe f9a8 	bl	8000a68 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3301      	adds	r3, #1
 800271c:	607b      	str	r3, [r7, #4]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b04      	cmp	r3, #4
 8002722:	d9ef      	bls.n	8002704 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002724:	480d      	ldr	r0, [pc, #52]	; (800275c <prvInitialiseTaskLists+0x64>)
 8002726:	f7fe f99f 	bl	8000a68 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800272a:	480d      	ldr	r0, [pc, #52]	; (8002760 <prvInitialiseTaskLists+0x68>)
 800272c:	f7fe f99c 	bl	8000a68 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002730:	480c      	ldr	r0, [pc, #48]	; (8002764 <prvInitialiseTaskLists+0x6c>)
 8002732:	f7fe f999 	bl	8000a68 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002736:	480c      	ldr	r0, [pc, #48]	; (8002768 <prvInitialiseTaskLists+0x70>)
 8002738:	f7fe f996 	bl	8000a68 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800273c:	480b      	ldr	r0, [pc, #44]	; (800276c <prvInitialiseTaskLists+0x74>)
 800273e:	f7fe f993 	bl	8000a68 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002742:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <prvInitialiseTaskLists+0x78>)
 8002744:	4a05      	ldr	r2, [pc, #20]	; (800275c <prvInitialiseTaskLists+0x64>)
 8002746:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002748:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <prvInitialiseTaskLists+0x7c>)
 800274a:	4a05      	ldr	r2, [pc, #20]	; (8002760 <prvInitialiseTaskLists+0x68>)
 800274c:	601a      	str	r2, [r3, #0]
}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20012cd4 	.word	0x20012cd4
 800275c:	20012d38 	.word	0x20012d38
 8002760:	20012d4c 	.word	0x20012d4c
 8002764:	20012d68 	.word	0x20012d68
 8002768:	20012d7c 	.word	0x20012d7c
 800276c:	20012d94 	.word	0x20012d94
 8002770:	20012d60 	.word	0x20012d60
 8002774:	20012d64 	.word	0x20012d64

08002778 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800277e:	e019      	b.n	80027b4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002780:	f7fe fb2e 	bl	8000de0 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002784:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <prvCheckTasksWaitingTermination+0x4c>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3304      	adds	r3, #4
 8002790:	4618      	mov	r0, r3
 8002792:	f7fe f9cf 	bl	8000b34 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002796:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <prvCheckTasksWaitingTermination+0x50>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	3b01      	subs	r3, #1
 800279c:	4a0a      	ldr	r2, [pc, #40]	; (80027c8 <prvCheckTasksWaitingTermination+0x50>)
 800279e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80027a0:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <prvCheckTasksWaitingTermination+0x54>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	4a09      	ldr	r2, [pc, #36]	; (80027cc <prvCheckTasksWaitingTermination+0x54>)
 80027a8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80027aa:	f7fe fb47 	bl	8000e3c <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f80e 	bl	80027d0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <prvCheckTasksWaitingTermination+0x54>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1e1      	bne.n	8002780 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20012d7c 	.word	0x20012d7c
 80027c8:	20012da8 	.word	0x20012da8
 80027cc:	20012d90 	.word	0x20012d90

080027d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fe fc93 	bl	8001108 <vPortFree>
            vPortFree( pxTCB );
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7fe fc90 	bl	8001108 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027f4:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <prvResetNextTaskUnblockTime+0x30>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d104      	bne.n	8002808 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <prvResetNextTaskUnblockTime+0x34>)
 8002800:	f04f 32ff 	mov.w	r2, #4294967295
 8002804:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002806:	e005      	b.n	8002814 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <prvResetNextTaskUnblockTime+0x30>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a04      	ldr	r2, [pc, #16]	; (8002824 <prvResetNextTaskUnblockTime+0x34>)
 8002812:	6013      	str	r3, [r2, #0]
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	20012d60 	.word	0x20012d60
 8002824:	20012dc8 	.word	0x20012dc8

08002828 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800282e:	4b0b      	ldr	r3, [pc, #44]	; (800285c <xTaskGetSchedulerState+0x34>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d102      	bne.n	800283c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002836:	2301      	movs	r3, #1
 8002838:	607b      	str	r3, [r7, #4]
 800283a:	e008      	b.n	800284e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800283c:	4b08      	ldr	r3, [pc, #32]	; (8002860 <xTaskGetSchedulerState+0x38>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d102      	bne.n	800284a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002844:	2302      	movs	r3, #2
 8002846:	607b      	str	r3, [r7, #4]
 8002848:	e001      	b.n	800284e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800284a:	2300      	movs	r3, #0
 800284c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800284e:	687b      	ldr	r3, [r7, #4]
    }
 8002850:	4618      	mov	r0, r3
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	20012db4 	.word	0x20012db4
 8002860:	20012dd0 	.word	0x20012dd0

08002864 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800286e:	4b36      	ldr	r3, [pc, #216]	; (8002948 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002874:	4b35      	ldr	r3, [pc, #212]	; (800294c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	3304      	adds	r3, #4
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe f95a 	bl	8000b34 <uxListRemove>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10b      	bne.n	800289e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002886:	4b31      	ldr	r3, [pc, #196]	; (800294c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	2201      	movs	r2, #1
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43da      	mvns	r2, r3
 8002894:	4b2e      	ldr	r3, [pc, #184]	; (8002950 <prvAddCurrentTaskToDelayedList+0xec>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4013      	ands	r3, r2
 800289a:	4a2d      	ldr	r2, [pc, #180]	; (8002950 <prvAddCurrentTaskToDelayedList+0xec>)
 800289c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a4:	d124      	bne.n	80028f0 <prvAddCurrentTaskToDelayedList+0x8c>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d021      	beq.n	80028f0 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80028ac:	4b29      	ldr	r3, [pc, #164]	; (8002954 <prvAddCurrentTaskToDelayedList+0xf0>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	4b26      	ldr	r3, [pc, #152]	; (800294c <prvAddCurrentTaskToDelayedList+0xe8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	609a      	str	r2, [r3, #8]
 80028ba:	4b24      	ldr	r3, [pc, #144]	; (800294c <prvAddCurrentTaskToDelayedList+0xe8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	6892      	ldr	r2, [r2, #8]
 80028c2:	60da      	str	r2, [r3, #12]
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	4a20      	ldr	r2, [pc, #128]	; (800294c <prvAddCurrentTaskToDelayedList+0xe8>)
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	3204      	adds	r2, #4
 80028ce:	605a      	str	r2, [r3, #4]
 80028d0:	4b1e      	ldr	r3, [pc, #120]	; (800294c <prvAddCurrentTaskToDelayedList+0xe8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	1d1a      	adds	r2, r3, #4
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	609a      	str	r2, [r3, #8]
 80028da:	4b1c      	ldr	r3, [pc, #112]	; (800294c <prvAddCurrentTaskToDelayedList+0xe8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a1d      	ldr	r2, [pc, #116]	; (8002954 <prvAddCurrentTaskToDelayedList+0xf0>)
 80028e0:	615a      	str	r2, [r3, #20]
 80028e2:	4b1c      	ldr	r3, [pc, #112]	; (8002954 <prvAddCurrentTaskToDelayedList+0xf0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	3301      	adds	r3, #1
 80028e8:	4a1a      	ldr	r2, [pc, #104]	; (8002954 <prvAddCurrentTaskToDelayedList+0xf0>)
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80028ee:	e026      	b.n	800293e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4413      	add	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80028f8:	4b14      	ldr	r3, [pc, #80]	; (800294c <prvAddCurrentTaskToDelayedList+0xe8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	429a      	cmp	r2, r3
 8002906:	d209      	bcs.n	800291c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002908:	4b13      	ldr	r3, [pc, #76]	; (8002958 <prvAddCurrentTaskToDelayedList+0xf4>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b0f      	ldr	r3, [pc, #60]	; (800294c <prvAddCurrentTaskToDelayedList+0xe8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3304      	adds	r3, #4
 8002912:	4619      	mov	r1, r3
 8002914:	4610      	mov	r0, r2
 8002916:	f7fe f8d4 	bl	8000ac2 <vListInsert>
}
 800291a:	e010      	b.n	800293e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800291c:	4b0f      	ldr	r3, [pc, #60]	; (800295c <prvAddCurrentTaskToDelayedList+0xf8>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4b0a      	ldr	r3, [pc, #40]	; (800294c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	3304      	adds	r3, #4
 8002926:	4619      	mov	r1, r3
 8002928:	4610      	mov	r0, r2
 800292a:	f7fe f8ca 	bl	8000ac2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800292e:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	429a      	cmp	r2, r3
 8002936:	d202      	bcs.n	800293e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8002938:	4a09      	ldr	r2, [pc, #36]	; (8002960 <prvAddCurrentTaskToDelayedList+0xfc>)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6013      	str	r3, [r2, #0]
}
 800293e:	bf00      	nop
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20012dac 	.word	0x20012dac
 800294c:	20012cd0 	.word	0x20012cd0
 8002950:	20012db0 	.word	0x20012db0
 8002954:	20012d94 	.word	0x20012d94
 8002958:	20012d64 	.word	0x20012d64
 800295c:	20012d60 	.word	0x20012d60
 8002960:	20012dc8 	.word	0x20012dc8

08002964 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800296a:	2300      	movs	r3, #0
 800296c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800296e:	f000 fa43 	bl	8002df8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002972:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <xTimerCreateTimerTask+0x54>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00b      	beq.n	8002992 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <xTimerCreateTimerTask+0x58>)
 800297c:	9301      	str	r3, [sp, #4]
 800297e:	2302      	movs	r3, #2
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	2300      	movs	r3, #0
 8002984:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002988:	490d      	ldr	r1, [pc, #52]	; (80029c0 <xTimerCreateTimerTask+0x5c>)
 800298a:	480e      	ldr	r0, [pc, #56]	; (80029c4 <xTimerCreateTimerTask+0x60>)
 800298c:	f7fe ffac 	bl	80018e8 <xTaskCreate>
 8002990:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d109      	bne.n	80029ac <xTimerCreateTimerTask+0x48>
 8002998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800299c:	f383 8811 	msr	BASEPRI, r3
 80029a0:	f3bf 8f6f 	isb	sy
 80029a4:	f3bf 8f4f 	dsb	sy
 80029a8:	603b      	str	r3, [r7, #0]
 80029aa:	e7fe      	b.n	80029aa <xTimerCreateTimerTask+0x46>
        return xReturn;
 80029ac:	687b      	ldr	r3, [r7, #4]
    }
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20012e04 	.word	0x20012e04
 80029bc:	20012e08 	.word	0x20012e08
 80029c0:	08003e74 	.word	0x08003e74
 80029c4:	08002a69 	.word	0x08002a69

080029c8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80029d4:	e008      	b.n	80029e8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	4413      	add	r3, r2
 80029de:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	699a      	ldr	r2, [r3, #24]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	18d1      	adds	r1, r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 f8db 	bl	8002bb0 <prvInsertTimerInActiveList>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1ea      	bne.n	80029d6 <prvReloadTimer+0xe>
        }
    }
 8002a00:	bf00      	nop
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a12:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <prvProcessExpiredTimer+0x5c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fe f887 	bl	8000b34 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f7ff ffc5 	bl	80029c8 <prvReloadTimer>
 8002a3e:	e008      	b.n	8002a52 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a46:	f023 0301 	bic.w	r3, r3, #1
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	4798      	blx	r3
    }
 8002a5a:	bf00      	nop
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20012dfc 	.word	0x20012dfc

08002a68 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002a70:	f107 0308 	add.w	r3, r7, #8
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 f857 	bl	8002b28 <prvGetNextExpireTime>
 8002a7a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4619      	mov	r1, r3
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f803 	bl	8002a8c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002a86:	f000 f8d5 	bl	8002c34 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002a8a:	e7f1      	b.n	8002a70 <prvTimerTask+0x8>

08002a8c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002a96:	f7ff f9cb 	bl	8001e30 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002a9a:	f107 0308 	add.w	r3, r7, #8
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 f866 	bl	8002b70 <prvSampleTimeNow>
 8002aa4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d130      	bne.n	8002b0e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10a      	bne.n	8002ac8 <prvProcessTimerOrBlockTask+0x3c>
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d806      	bhi.n	8002ac8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002aba:	f7ff f9c7 	bl	8001e4c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002abe:	68f9      	ldr	r1, [r7, #12]
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff ffa1 	bl	8002a08 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002ac6:	e024      	b.n	8002b12 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d008      	beq.n	8002ae0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002ace:	4b13      	ldr	r3, [pc, #76]	; (8002b1c <prvProcessTimerOrBlockTask+0x90>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <prvProcessTimerOrBlockTask+0x50>
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e000      	b.n	8002ade <prvProcessTimerOrBlockTask+0x52>
 8002adc:	2300      	movs	r3, #0
 8002ade:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	; (8002b20 <prvProcessTimerOrBlockTask+0x94>)
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	4619      	mov	r1, r3
 8002aee:	f7fe fec7 	bl	8001880 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002af2:	f7ff f9ab 	bl	8001e4c <xTaskResumeAll>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10a      	bne.n	8002b12 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002afc:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <prvProcessTimerOrBlockTask+0x98>)
 8002afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	f3bf 8f4f 	dsb	sy
 8002b08:	f3bf 8f6f 	isb	sy
    }
 8002b0c:	e001      	b.n	8002b12 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002b0e:	f7ff f99d 	bl	8001e4c <xTaskResumeAll>
    }
 8002b12:	bf00      	nop
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20012e00 	.word	0x20012e00
 8002b20:	20012e04 	.word	0x20012e04
 8002b24:	e000ed04 	.word	0xe000ed04

08002b28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002b30:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <prvGetNextExpireTime+0x44>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <prvGetNextExpireTime+0x16>
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	e000      	b.n	8002b40 <prvGetNextExpireTime+0x18>
 8002b3e:	2200      	movs	r2, #0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d105      	bne.n	8002b58 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002b4c:	4b07      	ldr	r3, [pc, #28]	; (8002b6c <prvGetNextExpireTime+0x44>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	e001      	b.n	8002b5c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
    }
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	20012dfc 	.word	0x20012dfc

08002b70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002b78:	f7ff fa62 	bl	8002040 <xTaskGetTickCount>
 8002b7c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <prvSampleTimeNow+0x3c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d205      	bcs.n	8002b94 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002b88:	f000 f910 	bl	8002dac <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	e002      	b.n	8002b9a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002b9a:	4a04      	ldr	r2, [pc, #16]	; (8002bac <prvSampleTimeNow+0x3c>)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
    }
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20012e0c 	.word	0x20012e0c

08002bb0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d812      	bhi.n	8002bfc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	1ad2      	subs	r2, r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d302      	bcc.n	8002bea <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002be4:	2301      	movs	r3, #1
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	e01b      	b.n	8002c22 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002bea:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <prvInsertTimerInActiveList+0x7c>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	f7fd ff64 	bl	8000ac2 <vListInsert>
 8002bfa:	e012      	b.n	8002c22 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d206      	bcs.n	8002c12 <prvInsertTimerInActiveList+0x62>
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d302      	bcc.n	8002c12 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	e007      	b.n	8002c22 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002c12:	4b07      	ldr	r3, [pc, #28]	; (8002c30 <prvInsertTimerInActiveList+0x80>)
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	f7fd ff50 	bl	8000ac2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002c22:	697b      	ldr	r3, [r7, #20]
    }
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20012e00 	.word	0x20012e00
 8002c30:	20012dfc 	.word	0x20012dfc

08002c34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002c3a:	e0a5      	b.n	8002d88 <prvProcessReceivedCommands+0x154>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f2c0 80a2 	blt.w	8002d88 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d004      	beq.n	8002c5a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	3304      	adds	r3, #4
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fd ff6d 	bl	8000b34 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff ff87 	bl	8002b70 <prvSampleTimeNow>
 8002c62:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	f200 808c 	bhi.w	8002d86 <prvProcessReceivedCommands+0x152>
 8002c6e:	a201      	add	r2, pc, #4	; (adr r2, 8002c74 <prvProcessReceivedCommands+0x40>)
 8002c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c74:	08002c99 	.word	0x08002c99
 8002c78:	08002c99 	.word	0x08002c99
 8002c7c:	08002d01 	.word	0x08002d01
 8002c80:	08002d15 	.word	0x08002d15
 8002c84:	08002d5d 	.word	0x08002d5d
 8002c88:	08002c99 	.word	0x08002c99
 8002c8c:	08002c99 	.word	0x08002c99
 8002c90:	08002d01 	.word	0x08002d01
 8002c94:	08002d15 	.word	0x08002d15
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	18d1      	adds	r1, r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	69f8      	ldr	r0, [r7, #28]
 8002cb8:	f7ff ff7a 	bl	8002bb0 <prvInsertTimerInActiveList>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d062      	beq.n	8002d88 <prvProcessReceivedCommands+0x154>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d009      	beq.n	8002ce4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4619      	mov	r1, r3
 8002cdc:	69f8      	ldr	r0, [r7, #28]
 8002cde:	f7ff fe73 	bl	80029c8 <prvReloadTimer>
 8002ce2:	e008      	b.n	8002cf6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cea:	f023 0301 	bic.w	r3, r3, #1
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	69f8      	ldr	r0, [r7, #28]
 8002cfc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002cfe:	e043      	b.n	8002d88 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d06:	f023 0301 	bic.w	r3, r3, #1
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002d12:	e039      	b.n	8002d88 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d109      	bne.n	8002d48 <prvProcessReceivedCommands+0x114>
 8002d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d38:	f383 8811 	msr	BASEPRI, r3
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	e7fe      	b.n	8002d46 <prvProcessReceivedCommands+0x112>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	699a      	ldr	r2, [r3, #24]
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	18d1      	adds	r1, r2, r3
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	69f8      	ldr	r0, [r7, #28]
 8002d56:	f7ff ff2b 	bl	8002bb0 <prvInsertTimerInActiveList>
                        break;
 8002d5a:	e015      	b.n	8002d88 <prvProcessReceivedCommands+0x154>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d103      	bne.n	8002d72 <prvProcessReceivedCommands+0x13e>
                            {
                                vPortFree( pxTimer );
 8002d6a:	69f8      	ldr	r0, [r7, #28]
 8002d6c:	f7fe f9cc 	bl	8001108 <vPortFree>
 8002d70:	e00a      	b.n	8002d88 <prvProcessReceivedCommands+0x154>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d78:	f023 0301 	bic.w	r3, r3, #1
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002d84:	e000      	b.n	8002d88 <prvProcessReceivedCommands+0x154>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002d86:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002d88:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <prvProcessReceivedCommands+0x174>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f107 0108 	add.w	r1, r7, #8
 8002d90:	2200      	movs	r2, #0
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fe fbbc 	bl	8001510 <xQueueReceive>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f47f af4e 	bne.w	8002c3c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002da0:	bf00      	nop
 8002da2:	3720      	adds	r7, #32
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20012e04 	.word	0x20012e04

08002dac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002db2:	e009      	b.n	8002dc8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002db4:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <prvSwitchTimerLists+0x44>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	607b      	str	r3, [r7, #4]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002dbe:	f04f 31ff 	mov.w	r1, #4294967295
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff fe20 	bl	8002a08 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002dc8:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <prvSwitchTimerLists+0x44>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f0      	bne.n	8002db4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002dd2:	4b07      	ldr	r3, [pc, #28]	; (8002df0 <prvSwitchTimerLists+0x44>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	603b      	str	r3, [r7, #0]
        pxCurrentTimerList = pxOverflowTimerList;
 8002dd8:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <prvSwitchTimerLists+0x48>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a04      	ldr	r2, [pc, #16]	; (8002df0 <prvSwitchTimerLists+0x44>)
 8002dde:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002de0:	4a04      	ldr	r2, [pc, #16]	; (8002df4 <prvSwitchTimerLists+0x48>)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	6013      	str	r3, [r2, #0]
    }
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20012dfc 	.word	0x20012dfc
 8002df4:	20012e00 	.word	0x20012e00

08002df8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002dfc:	f7fd fff0 	bl	8000de0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002e00:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <prvCheckForValidListAndQueue+0x54>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d11d      	bne.n	8002e44 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002e08:	4811      	ldr	r0, [pc, #68]	; (8002e50 <prvCheckForValidListAndQueue+0x58>)
 8002e0a:	f7fd fe2d 	bl	8000a68 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002e0e:	4811      	ldr	r0, [pc, #68]	; (8002e54 <prvCheckForValidListAndQueue+0x5c>)
 8002e10:	f7fd fe2a 	bl	8000a68 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002e14:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <prvCheckForValidListAndQueue+0x60>)
 8002e16:	4a0e      	ldr	r2, [pc, #56]	; (8002e50 <prvCheckForValidListAndQueue+0x58>)
 8002e18:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002e1a:	4b10      	ldr	r3, [pc, #64]	; (8002e5c <prvCheckForValidListAndQueue+0x64>)
 8002e1c:	4a0d      	ldr	r2, [pc, #52]	; (8002e54 <prvCheckForValidListAndQueue+0x5c>)
 8002e1e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002e20:	2200      	movs	r2, #0
 8002e22:	210c      	movs	r1, #12
 8002e24:	200a      	movs	r0, #10
 8002e26:	f7fe fb05 	bl	8001434 <xQueueGenericCreate>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	4b07      	ldr	r3, [pc, #28]	; (8002e4c <prvCheckForValidListAndQueue+0x54>)
 8002e2e:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <prvCheckForValidListAndQueue+0x54>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002e38:	4b04      	ldr	r3, [pc, #16]	; (8002e4c <prvCheckForValidListAndQueue+0x54>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4908      	ldr	r1, [pc, #32]	; (8002e60 <prvCheckForValidListAndQueue+0x68>)
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe fcd0 	bl	80017e4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002e44:	f7fd fffa 	bl	8000e3c <vPortExitCritical>
    }
 8002e48:	bf00      	nop
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20012e04 	.word	0x20012e04
 8002e50:	20012dd4 	.word	0x20012dd4
 8002e54:	20012de8 	.word	0x20012de8
 8002e58:	20012dfc 	.word	0x20012dfc
 8002e5c:	20012e00 	.word	0x20012e00
 8002e60:	08003e7c 	.word	0x08003e7c

08002e64 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8002e6e:	4909      	ldr	r1, [pc, #36]	; (8002e94 <NVIC_EnableIRQ+0x30>)
 8002e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e74:	095b      	lsrs	r3, r3, #5
 8002e76:	79fa      	ldrb	r2, [r7, #7]
 8002e78:	f002 021f 	and.w	r2, r2, #31
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	e000e100 	.word	0xe000e100

08002e98 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	6039      	str	r1, [r7, #0]
 8002ea2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8002ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	da0b      	bge.n	8002ec4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002eac:	490d      	ldr	r1, [pc, #52]	; (8002ee4 <NVIC_SetPriority+0x4c>)
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	3b04      	subs	r3, #4
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	0112      	lsls	r2, r2, #4
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8002ec2:	e009      	b.n	8002ed8 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002ec4:	4908      	ldr	r1, [pc, #32]	; (8002ee8 <NVIC_SetPriority+0x50>)
 8002ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	0112      	lsls	r2, r2, #4
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	e000ed00 	.word	0xe000ed00
 8002ee8:	e000e100 	.word	0xe000e100

08002eec <main>:
TaskHandle_t Task1Handle = NULL ;
TaskHandle_t Task2Handle = NULL ;
uint8_t count = 0;
uint8_t buttonstate =0;
int main(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af02      	add	r7, sp, #8
  RCC_DeInit();   // HSE OFF | HSI ON |	PLL OFF |
 8002ef2:	f7fd fb39 	bl	8000568 <RCC_DeInit>
  SystemCoreClockUpdate(); // SYSTEM CLOCK 16 MHz
 8002ef6:	f000 fa4d 	bl	8003394 <SystemCoreClockUpdate>

  GPIO_Config();
 8002efa:	f000 f8fd 	bl	80030f8 <GPIO_Config>
  UART_Config();
 8002efe:	f000 f93f 	bl	8003180 <UART_Config>
  xTaskCreate(Task1Handler,"Task 1",configMINIMAL_STACK_SIZE,NULL,4,&Task1Handle);
 8002f02:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <main+0x44>)
 8002f04:	9301      	str	r3, [sp, #4]
 8002f06:	2304      	movs	r3, #4
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	2282      	movs	r2, #130	; 0x82
 8002f0e:	4909      	ldr	r1, [pc, #36]	; (8002f34 <main+0x48>)
 8002f10:	4809      	ldr	r0, [pc, #36]	; (8002f38 <main+0x4c>)
 8002f12:	f7fe fce9 	bl	80018e8 <xTaskCreate>
  xTaskCreate(Task2Handler,"Task 2",configMINIMAL_STACK_SIZE,NULL,2,&Task2Handle);
 8002f16:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <main+0x50>)
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	2282      	movs	r2, #130	; 0x82
 8002f22:	4907      	ldr	r1, [pc, #28]	; (8002f40 <main+0x54>)
 8002f24:	4807      	ldr	r0, [pc, #28]	; (8002f44 <main+0x58>)
 8002f26:	f7fe fcdf 	bl	80018e8 <xTaskCreate>

  vTaskStartScheduler(); // START SCHEDULAR
 8002f2a:	f7fe ff31 	bl	8001d90 <vTaskStartScheduler>
  while (1)
 8002f2e:	e7fe      	b.n	8002f2e <main+0x42>
 8002f30:	20012e10 	.word	0x20012e10
 8002f34:	08003e84 	.word	0x08003e84
 8002f38:	08002f49 	.word	0x08002f49
 8002f3c:	20012e14 	.word	0x20012e14
 8002f40:	08003e8c 	.word	0x08003e8c
 8002f44:	08003021 	.word	0x08003021

08002f48 <Task1Handler>:

  }
}

void Task1Handler(void *params)
{
 8002f48:	b5b0      	push	{r4, r5, r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
	UBaseType_t p1,p2;

	snprintf(myMessage,50,"Task-1 is Running\r\n");
 8002f50:	4a2c      	ldr	r2, [pc, #176]	; (8003004 <Task1Handler+0xbc>)
 8002f52:	4b2d      	ldr	r3, [pc, #180]	; (8003008 <Task1Handler+0xc0>)
 8002f54:	4615      	mov	r5, r2
 8002f56:	461c      	mov	r4, r3
 8002f58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f5a:	6028      	str	r0, [r5, #0]
 8002f5c:	6069      	str	r1, [r5, #4]
 8002f5e:	60aa      	str	r2, [r5, #8]
 8002f60:	60eb      	str	r3, [r5, #12]
 8002f62:	6820      	ldr	r0, [r4, #0]
 8002f64:	6128      	str	r0, [r5, #16]
	printMsg(myMessage);
 8002f66:	4827      	ldr	r0, [pc, #156]	; (8003004 <Task1Handler+0xbc>)
 8002f68:	f000 f972 	bl	8003250 <printMsg>

	snprintf(myMessage,50,"Task-1 priority : %d \r\n",(uint8_t)uxTaskPriorityGet(Task1Handle));
 8002f6c:	4b27      	ldr	r3, [pc, #156]	; (800300c <Task1Handler+0xc4>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fe fe21 	bl	8001bb8 <uxTaskPriorityGet>
 8002f76:	4603      	mov	r3, r0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	4a25      	ldr	r2, [pc, #148]	; (8003010 <Task1Handler+0xc8>)
 8002f7c:	2132      	movs	r1, #50	; 0x32
 8002f7e:	4821      	ldr	r0, [pc, #132]	; (8003004 <Task1Handler+0xbc>)
 8002f80:	f000 fb38 	bl	80035f4 <sniprintf>
	printMsg(myMessage);
 8002f84:	481f      	ldr	r0, [pc, #124]	; (8003004 <Task1Handler+0xbc>)
 8002f86:	f000 f963 	bl	8003250 <printMsg>

	snprintf(myMessage,50,"Task-2 priority : %d \r\n",(uint8_t)uxTaskPriorityGet(Task2Handle));
 8002f8a:	4b22      	ldr	r3, [pc, #136]	; (8003014 <Task1Handler+0xcc>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fe fe12 	bl	8001bb8 <uxTaskPriorityGet>
 8002f94:	4603      	mov	r3, r0
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	4a1f      	ldr	r2, [pc, #124]	; (8003018 <Task1Handler+0xd0>)
 8002f9a:	2132      	movs	r1, #50	; 0x32
 8002f9c:	4819      	ldr	r0, [pc, #100]	; (8003004 <Task1Handler+0xbc>)
 8002f9e:	f000 fb29 	bl	80035f4 <sniprintf>
	printMsg(myMessage);
 8002fa2:	4818      	ldr	r0, [pc, #96]	; (8003004 <Task1Handler+0xbc>)
 8002fa4:	f000 f954 	bl	8003250 <printMsg>
	   while(1)
	 {
		snprintf(myMessage,50,"Task-1 is Running\r\n");
 8002fa8:	4a16      	ldr	r2, [pc, #88]	; (8003004 <Task1Handler+0xbc>)
 8002faa:	4b17      	ldr	r3, [pc, #92]	; (8003008 <Task1Handler+0xc0>)
 8002fac:	4615      	mov	r5, r2
 8002fae:	461c      	mov	r4, r3
 8002fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb2:	6028      	str	r0, [r5, #0]
 8002fb4:	6069      	str	r1, [r5, #4]
 8002fb6:	60aa      	str	r2, [r5, #8]
 8002fb8:	60eb      	str	r3, [r5, #12]
 8002fba:	6820      	ldr	r0, [r4, #0]
 8002fbc:	6128      	str	r0, [r5, #16]
		printMsg(myMessage);
 8002fbe:	4811      	ldr	r0, [pc, #68]	; (8003004 <Task1Handler+0xbc>)
 8002fc0:	f000 f946 	bl	8003250 <printMsg>
         if(buttonstate == 1)
 8002fc4:	4b15      	ldr	r3, [pc, #84]	; (800301c <Task1Handler+0xd4>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d1ed      	bne.n	8002fa8 <Task1Handler+0x60>
         {
        	 buttonstate=0;
 8002fcc:	4b13      	ldr	r3, [pc, #76]	; (800301c <Task1Handler+0xd4>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	701a      	strb	r2, [r3, #0]
        	 p1 = uxTaskPriorityGet(Task1Handle);
 8002fd2:	4b0e      	ldr	r3, [pc, #56]	; (800300c <Task1Handler+0xc4>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe fdee 	bl	8001bb8 <uxTaskPriorityGet>
 8002fdc:	60f8      	str	r0, [r7, #12]
             p2 = uxTaskPriorityGet(Task2Handle);
 8002fde:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <Task1Handler+0xcc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe fde8 	bl	8001bb8 <uxTaskPriorityGet>
 8002fe8:	60b8      	str	r0, [r7, #8]
             vTaskPrioritySet(Task1Handle,p2);
 8002fea:	4b08      	ldr	r3, [pc, #32]	; (800300c <Task1Handler+0xc4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68b9      	ldr	r1, [r7, #8]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fe fdfb 	bl	8001bec <vTaskPrioritySet>
             vTaskPrioritySet(Task2Handle,p1);
 8002ff6:	4b07      	ldr	r3, [pc, #28]	; (8003014 <Task1Handler+0xcc>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68f9      	ldr	r1, [r7, #12]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7fe fdf5 	bl	8001bec <vTaskPrioritySet>
		snprintf(myMessage,50,"Task-1 is Running\r\n");
 8003002:	e7d1      	b.n	8002fa8 <Task1Handler+0x60>
 8003004:	20012e68 	.word	0x20012e68
 8003008:	08003e94 	.word	0x08003e94
 800300c:	20012e10 	.word	0x20012e10
 8003010:	08003ea8 	.word	0x08003ea8
 8003014:	20012e14 	.word	0x20012e14
 8003018:	08003ec0 	.word	0x08003ec0
 800301c:	20012e18 	.word	0x20012e18

08003020 <Task2Handler>:

	 }
}

void Task2Handler(void *params)
{
 8003020:	b5b0      	push	{r4, r5, r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	UBaseType_t p1,p2;

	snprintf(myMessage,50,"Task-2 is Running\r\n");
 8003028:	4a2c      	ldr	r2, [pc, #176]	; (80030dc <Task2Handler+0xbc>)
 800302a:	4b2d      	ldr	r3, [pc, #180]	; (80030e0 <Task2Handler+0xc0>)
 800302c:	4615      	mov	r5, r2
 800302e:	461c      	mov	r4, r3
 8003030:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003032:	6028      	str	r0, [r5, #0]
 8003034:	6069      	str	r1, [r5, #4]
 8003036:	60aa      	str	r2, [r5, #8]
 8003038:	60eb      	str	r3, [r5, #12]
 800303a:	6820      	ldr	r0, [r4, #0]
 800303c:	6128      	str	r0, [r5, #16]
	printMsg(myMessage);
 800303e:	4827      	ldr	r0, [pc, #156]	; (80030dc <Task2Handler+0xbc>)
 8003040:	f000 f906 	bl	8003250 <printMsg>

	snprintf(myMessage,50,"Task-1 priority : %d \r\n",(uint8_t)uxTaskPriorityGet(Task1Handle));
 8003044:	4b27      	ldr	r3, [pc, #156]	; (80030e4 <Task2Handler+0xc4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f7fe fdb5 	bl	8001bb8 <uxTaskPriorityGet>
 800304e:	4603      	mov	r3, r0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	4a25      	ldr	r2, [pc, #148]	; (80030e8 <Task2Handler+0xc8>)
 8003054:	2132      	movs	r1, #50	; 0x32
 8003056:	4821      	ldr	r0, [pc, #132]	; (80030dc <Task2Handler+0xbc>)
 8003058:	f000 facc 	bl	80035f4 <sniprintf>
	printMsg(myMessage);
 800305c:	481f      	ldr	r0, [pc, #124]	; (80030dc <Task2Handler+0xbc>)
 800305e:	f000 f8f7 	bl	8003250 <printMsg>

	snprintf(myMessage,50,"Task-2 priority : %d \r\n",(uint8_t)uxTaskPriorityGet(Task2Handle));
 8003062:	4b22      	ldr	r3, [pc, #136]	; (80030ec <Task2Handler+0xcc>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe fda6 	bl	8001bb8 <uxTaskPriorityGet>
 800306c:	4603      	mov	r3, r0
 800306e:	b2db      	uxtb	r3, r3
 8003070:	4a1f      	ldr	r2, [pc, #124]	; (80030f0 <Task2Handler+0xd0>)
 8003072:	2132      	movs	r1, #50	; 0x32
 8003074:	4819      	ldr	r0, [pc, #100]	; (80030dc <Task2Handler+0xbc>)
 8003076:	f000 fabd 	bl	80035f4 <sniprintf>
	printMsg(myMessage);
 800307a:	4818      	ldr	r0, [pc, #96]	; (80030dc <Task2Handler+0xbc>)
 800307c:	f000 f8e8 	bl	8003250 <printMsg>

	   while(1)
	 {
			snprintf(myMessage,50,"Task-2 is Running\r\n");
 8003080:	4a16      	ldr	r2, [pc, #88]	; (80030dc <Task2Handler+0xbc>)
 8003082:	4b17      	ldr	r3, [pc, #92]	; (80030e0 <Task2Handler+0xc0>)
 8003084:	4615      	mov	r5, r2
 8003086:	461c      	mov	r4, r3
 8003088:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800308a:	6028      	str	r0, [r5, #0]
 800308c:	6069      	str	r1, [r5, #4]
 800308e:	60aa      	str	r2, [r5, #8]
 8003090:	60eb      	str	r3, [r5, #12]
 8003092:	6820      	ldr	r0, [r4, #0]
 8003094:	6128      	str	r0, [r5, #16]
			printMsg(myMessage);
 8003096:	4811      	ldr	r0, [pc, #68]	; (80030dc <Task2Handler+0xbc>)
 8003098:	f000 f8da 	bl	8003250 <printMsg>
	         if(buttonstate == 1)
 800309c:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <Task2Handler+0xd4>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d1ed      	bne.n	8003080 <Task2Handler+0x60>
	         {
	        	 buttonstate=0;
 80030a4:	4b13      	ldr	r3, [pc, #76]	; (80030f4 <Task2Handler+0xd4>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	701a      	strb	r2, [r3, #0]
	        	 p1 = uxTaskPriorityGet(Task1Handle);
 80030aa:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <Task2Handler+0xc4>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fe fd82 	bl	8001bb8 <uxTaskPriorityGet>
 80030b4:	60f8      	str	r0, [r7, #12]
	             p2 = uxTaskPriorityGet(Task2Handle);
 80030b6:	4b0d      	ldr	r3, [pc, #52]	; (80030ec <Task2Handler+0xcc>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fe fd7c 	bl	8001bb8 <uxTaskPriorityGet>
 80030c0:	60b8      	str	r0, [r7, #8]
	             vTaskPrioritySet(Task1Handle,p2);
 80030c2:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <Task2Handler+0xc4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68b9      	ldr	r1, [r7, #8]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fe fd8f 	bl	8001bec <vTaskPrioritySet>
	             vTaskPrioritySet(Task2Handle,p1);
 80030ce:	4b07      	ldr	r3, [pc, #28]	; (80030ec <Task2Handler+0xcc>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68f9      	ldr	r1, [r7, #12]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fe fd89 	bl	8001bec <vTaskPrioritySet>
			snprintf(myMessage,50,"Task-2 is Running\r\n");
 80030da:	e7d1      	b.n	8003080 <Task2Handler+0x60>
 80030dc:	20012e68 	.word	0x20012e68
 80030e0:	08003ed8 	.word	0x08003ed8
 80030e4:	20012e10 	.word	0x20012e10
 80030e8:	08003ea8 	.word	0x08003ea8
 80030ec:	20012e14 	.word	0x20012e14
 80030f0:	08003ec0 	.word	0x08003ec0
 80030f4:	20012e18 	.word	0x20012e18

080030f8 <GPIO_Config>:


	 }
}
void GPIO_Config(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);
 80030fe:	2101      	movs	r1, #1
 8003100:	2004      	movs	r0, #4
 8003102:	f7fd fb07 	bl	8000714 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE); //ENABLE SYSCFG FOR EXTI LINE
 8003106:	2101      	movs	r1, #1
 8003108:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800310c:	f7fd fb42 	bl	8000794 <RCC_APB2PeriphClockCmd>

  SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC,EXTI_PinSource13);//Selecting port and pin for EXTI
 8003110:	210d      	movs	r1, #13
 8003112:	2002      	movs	r0, #2
 8003114:	f7fd fb5e 	bl	80007d4 <SYSCFG_EXTILineConfig>

  EXTI_InitTypeDef EXTI_InitStruct = {0};
 8003118:	f107 0308 	add.w	r3, r7, #8
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	605a      	str	r2, [r3, #4]
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003122:	463b      	mov	r3, r7
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	605a      	str	r2, [r3, #4]

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_13;
 800312a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800312e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8003130:	2300      	movs	r3, #0
 8003132:	713b      	strb	r3, [r7, #4]
  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8003134:	2300      	movs	r3, #0
 8003136:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8003138:	2302      	movs	r3, #2
 800313a:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800313c:	2303      	movs	r3, #3
 800313e:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOC,&GPIO_InitStruct);
 8003140:	463b      	mov	r3, r7
 8003142:	4619      	mov	r1, r3
 8003144:	480d      	ldr	r0, [pc, #52]	; (800317c <GPIO_Config+0x84>)
 8003146:	f7fd f91d 	bl	8000384 <GPIO_Init>

  EXTI_InitStruct.EXTI_Line = EXTI_Line13;
 800314a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800314e:	60bb      	str	r3, [r7, #8]
  EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8003150:	2301      	movs	r3, #1
 8003152:	73bb      	strb	r3, [r7, #14]
  EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 8003154:	2300      	movs	r3, #0
 8003156:	733b      	strb	r3, [r7, #12]
  EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising;
 8003158:	2308      	movs	r3, #8
 800315a:	737b      	strb	r3, [r7, #13]

  EXTI_Init(&EXTI_InitStruct);
 800315c:	f107 0308 	add.w	r3, r7, #8
 8003160:	4618      	mov	r0, r3
 8003162:	f7fd f88d 	bl	8000280 <EXTI_Init>

  NVIC_SetPriority(EXTI15_10_IRQn,15);
 8003166:	210f      	movs	r1, #15
 8003168:	2028      	movs	r0, #40	; 0x28
 800316a:	f7ff fe95 	bl	8002e98 <NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 800316e:	2028      	movs	r0, #40	; 0x28
 8003170:	f7ff fe78 	bl	8002e64 <NVIC_EnableIRQ>

}
 8003174:	bf00      	nop
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40020800 	.word	0x40020800

08003180 <UART_Config>:
void UART_Config(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct = {0} ;
 8003186:	f107 0310 	add.w	r3, r7, #16
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	605a      	str	r2, [r3, #4]
	 USART_InitTypeDef USART_InitStruct = {0};
 8003190:	463b      	mov	r3, r7
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	605a      	str	r2, [r3, #4]
 8003198:	609a      	str	r2, [r3, #8]
 800319a:	60da      	str	r2, [r3, #12]

	 RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE); // USART2 ENABLED
 800319c:	2101      	movs	r1, #1
 800319e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80031a2:	f7fd fad7 	bl	8000754 <RCC_APB1PeriphClockCmd>
	 RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE); // GPIOA ENABLED
 80031a6:	2101      	movs	r1, #1
 80031a8:	2001      	movs	r0, #1
 80031aa:	f7fd fab3 	bl	8000714 <RCC_AHB1PeriphClockCmd>

	 GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2); // TX GPIOA PIN 2
 80031ae:	2207      	movs	r2, #7
 80031b0:	2102      	movs	r1, #2
 80031b2:	4819      	ldr	r0, [pc, #100]	; (8003218 <UART_Config+0x98>)
 80031b4:	f7fd f98e 	bl	80004d4 <GPIO_PinAFConfig>
	 GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2); // RX GPIOA PIN 3
 80031b8:	2207      	movs	r2, #7
 80031ba:	2103      	movs	r1, #3
 80031bc:	4816      	ldr	r0, [pc, #88]	; (8003218 <UART_Config+0x98>)
 80031be:	f7fd f989 	bl	80004d4 <GPIO_PinAFConfig>

	 GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 80031c2:	2302      	movs	r3, #2
 80031c4:	753b      	strb	r3, [r7, #20]
	 GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80031c6:	2300      	movs	r3, #0
 80031c8:	75bb      	strb	r3, [r7, #22]
	 GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 80031ca:	230c      	movs	r3, #12
 80031cc:	613b      	str	r3, [r7, #16]
	 GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80031ce:	2301      	movs	r3, #1
 80031d0:	75fb      	strb	r3, [r7, #23]
	 GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80031d2:	2303      	movs	r3, #3
 80031d4:	757b      	strb	r3, [r7, #21]

	 GPIO_Init(GPIOA,&GPIO_InitStruct);
 80031d6:	f107 0310 	add.w	r3, r7, #16
 80031da:	4619      	mov	r1, r3
 80031dc:	480e      	ldr	r0, [pc, #56]	; (8003218 <UART_Config+0x98>)
 80031de:	f7fd f8d1 	bl	8000384 <GPIO_Init>

	 USART_InitStruct.USART_BaudRate = 9600;
 80031e2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80031e6:	603b      	str	r3, [r7, #0]
	 USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80031e8:	2300      	movs	r3, #0
 80031ea:	81bb      	strh	r3, [r7, #12]
	 USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 80031ec:	230c      	movs	r3, #12
 80031ee:	817b      	strh	r3, [r7, #10]
	 USART_InitStruct.USART_Parity = USART_Parity_No;
 80031f0:	2300      	movs	r3, #0
 80031f2:	813b      	strh	r3, [r7, #8]
	 USART_InitStruct.USART_StopBits = USART_StopBits_1;
 80031f4:	2300      	movs	r3, #0
 80031f6:	80fb      	strh	r3, [r7, #6]
	 USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 80031f8:	2300      	movs	r3, #0
 80031fa:	80bb      	strh	r3, [r7, #4]

	 USART_Init(USART2,&USART_InitStruct);
 80031fc:	463b      	mov	r3, r7
 80031fe:	4619      	mov	r1, r3
 8003200:	4806      	ldr	r0, [pc, #24]	; (800321c <UART_Config+0x9c>)
 8003202:	f7fd fb29 	bl	8000858 <USART_Init>

	 USART_Cmd(USART2,ENABLE);
 8003206:	2101      	movs	r1, #1
 8003208:	4804      	ldr	r0, [pc, #16]	; (800321c <UART_Config+0x9c>)
 800320a:	f7fd fbdf 	bl	80009cc <USART_Cmd>



}
 800320e:	bf00      	nop
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40020000 	.word	0x40020000
 800321c:	40004400 	.word	0x40004400

08003220 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler()
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  EXTI_ClearITPendingBit(EXTI_Line13);
 8003224:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003228:	f7fd f89c 	bl	8000364 <EXTI_ClearITPendingBit>
  if(GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_13))
 800322c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003230:	4805      	ldr	r0, [pc, #20]	; (8003248 <EXTI15_10_IRQHandler+0x28>)
 8003232:	f7fd f935 	bl	80004a0 <GPIO_ReadInputDataBit>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d002      	beq.n	8003242 <EXTI15_10_IRQHandler+0x22>
  {
		 buttonstate = 1;
 800323c:	4b03      	ldr	r3, [pc, #12]	; (800324c <EXTI15_10_IRQHandler+0x2c>)
 800323e:	2201      	movs	r2, #1
 8003240:	701a      	strb	r2, [r3, #0]
  }

}
 8003242:	bf00      	nop
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40020800 	.word	0x40020800
 800324c:	20012e18 	.word	0x20012e18

08003250 <printMsg>:
void printMsg(char *msg)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
   for(int i = 0 ; i< strlen(msg);i++)
 8003258:	2300      	movs	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	e013      	b.n	8003286 <printMsg+0x36>
   {
	   while(USART_GetFlagStatus(USART2,USART_FLAG_TXE)!=SET);
 800325e:	bf00      	nop
 8003260:	2180      	movs	r1, #128	; 0x80
 8003262:	480e      	ldr	r0, [pc, #56]	; (800329c <printMsg+0x4c>)
 8003264:	f7fd fbe4 	bl	8000a30 <USART_GetFlagStatus>
 8003268:	4603      	mov	r3, r0
 800326a:	2b01      	cmp	r3, #1
 800326c:	d1f8      	bne.n	8003260 <printMsg+0x10>
	   USART_SendData(USART2,msg[i]);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	4413      	add	r3, r2
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	b29b      	uxth	r3, r3
 8003278:	4619      	mov	r1, r3
 800327a:	4808      	ldr	r0, [pc, #32]	; (800329c <printMsg+0x4c>)
 800327c:	f7fd fbc6 	bl	8000a0c <USART_SendData>
   for(int i = 0 ; i< strlen(msg);i++)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3301      	adds	r3, #1
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7fc ffa2 	bl	80001d0 <strlen>
 800328c:	4602      	mov	r2, r0
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	429a      	cmp	r2, r3
 8003292:	d8e4      	bhi.n	800325e <printMsg+0xe>

   }

}
 8003294:	bf00      	nop
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40004400 	.word	0x40004400

080032a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80032a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80032a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80032a6:	e003      	b.n	80032b0 <LoopCopyDataInit>

080032a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80032a8:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80032aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032ae:	3104      	adds	r1, #4

080032b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80032b0:	480b      	ldr	r0, [pc, #44]	; (80032e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80032b2:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80032b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80032b8:	d3f6      	bcc.n	80032a8 <CopyDataInit>
  ldr  r2, =_sbss
 80032ba:	4a0b      	ldr	r2, [pc, #44]	; (80032e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80032bc:	e002      	b.n	80032c4 <LoopFillZerobss>

080032be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80032be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80032c0:	f842 3b04 	str.w	r3, [r2], #4

080032c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80032c4:	4b09      	ldr	r3, [pc, #36]	; (80032ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80032c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032c8:	d3f9      	bcc.n	80032be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032ca:	f000 f82d 	bl	8003328 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032ce:	f000 f959 	bl	8003584 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032d2:	f7ff fe0b 	bl	8002eec <main>
  bx  lr    
 80032d6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80032d8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80032dc:	08003f28 	.word	0x08003f28
  ldr  r0, =_sdata
 80032e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80032e4:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 80032e8:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80032ec:	20012ea0 	.word	0x20012ea0

080032f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032f0:	e7fe      	b.n	80032f0 <ADC_IRQHandler>

080032f2 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80032f2:	b480      	push	{r7}
 80032f4:	af00      	add	r7, sp, #0
}
 80032f6:	bf00      	nop
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003304:	e7fe      	b.n	8003304 <HardFault_Handler+0x4>

08003306 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003306:	b480      	push	{r7}
 8003308:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800330a:	e7fe      	b.n	800330a <MemManage_Handler+0x4>

0800330c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003310:	e7fe      	b.n	8003310 <BusFault_Handler+0x4>

08003312 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003312:	b480      	push	{r7}
 8003314:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003316:	e7fe      	b.n	8003316 <UsageFault_Handler+0x4>

08003318 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
}
 800331c:	bf00      	nop
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
	...

08003328 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800332c:	4a16      	ldr	r2, [pc, #88]	; (8003388 <SystemInit+0x60>)
 800332e:	4b16      	ldr	r3, [pc, #88]	; (8003388 <SystemInit+0x60>)
 8003330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003334:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003338:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800333c:	4a13      	ldr	r2, [pc, #76]	; (800338c <SystemInit+0x64>)
 800333e:	4b13      	ldr	r3, [pc, #76]	; (800338c <SystemInit+0x64>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003348:	4b10      	ldr	r3, [pc, #64]	; (800338c <SystemInit+0x64>)
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800334e:	4a0f      	ldr	r2, [pc, #60]	; (800338c <SystemInit+0x64>)
 8003350:	4b0e      	ldr	r3, [pc, #56]	; (800338c <SystemInit+0x64>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800335c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800335e:	4b0b      	ldr	r3, [pc, #44]	; (800338c <SystemInit+0x64>)
 8003360:	4a0b      	ldr	r2, [pc, #44]	; (8003390 <SystemInit+0x68>)
 8003362:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003364:	4a09      	ldr	r2, [pc, #36]	; (800338c <SystemInit+0x64>)
 8003366:	4b09      	ldr	r3, [pc, #36]	; (800338c <SystemInit+0x64>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800336e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003370:	4b06      	ldr	r3, [pc, #24]	; (800338c <SystemInit+0x64>)
 8003372:	2200      	movs	r2, #0
 8003374:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003376:	f000 f889 	bl	800348c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800337a:	4b03      	ldr	r3, [pc, #12]	; (8003388 <SystemInit+0x60>)
 800337c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003380:	609a      	str	r2, [r3, #8]
#endif
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	e000ed00 	.word	0xe000ed00
 800338c:	40023800 	.word	0x40023800
 8003390:	24003010 	.word	0x24003010

08003394 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800339a:	2300      	movs	r3, #0
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
 80033a2:	2302      	movs	r3, #2
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	2300      	movs	r3, #0
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	2302      	movs	r3, #2
 80033ac:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80033ae:	4b32      	ldr	r3, [pc, #200]	; (8003478 <SystemCoreClockUpdate+0xe4>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 030c 	and.w	r3, r3, #12
 80033b6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d007      	beq.n	80033ce <SystemCoreClockUpdate+0x3a>
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d009      	beq.n	80033d6 <SystemCoreClockUpdate+0x42>
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d13d      	bne.n	8003442 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80033c6:	4b2d      	ldr	r3, [pc, #180]	; (800347c <SystemCoreClockUpdate+0xe8>)
 80033c8:	4a2d      	ldr	r2, [pc, #180]	; (8003480 <SystemCoreClockUpdate+0xec>)
 80033ca:	601a      	str	r2, [r3, #0]
      break;
 80033cc:	e03d      	b.n	800344a <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80033ce:	4b2b      	ldr	r3, [pc, #172]	; (800347c <SystemCoreClockUpdate+0xe8>)
 80033d0:	4a2c      	ldr	r2, [pc, #176]	; (8003484 <SystemCoreClockUpdate+0xf0>)
 80033d2:	601a      	str	r2, [r3, #0]
      break;
 80033d4:	e039      	b.n	800344a <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80033d6:	4b28      	ldr	r3, [pc, #160]	; (8003478 <SystemCoreClockUpdate+0xe4>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	0d9b      	lsrs	r3, r3, #22
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033e2:	4b25      	ldr	r3, [pc, #148]	; (8003478 <SystemCoreClockUpdate+0xe4>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033ea:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00c      	beq.n	800340c <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80033f2:	4a24      	ldr	r2, [pc, #144]	; (8003484 <SystemCoreClockUpdate+0xf0>)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fa:	4a1f      	ldr	r2, [pc, #124]	; (8003478 <SystemCoreClockUpdate+0xe4>)
 80033fc:	6852      	ldr	r2, [r2, #4]
 80033fe:	0992      	lsrs	r2, r2, #6
 8003400:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003404:	fb02 f303 	mul.w	r3, r2, r3
 8003408:	617b      	str	r3, [r7, #20]
 800340a:	e00b      	b.n	8003424 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800340c:	4a1c      	ldr	r2, [pc, #112]	; (8003480 <SystemCoreClockUpdate+0xec>)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	fbb2 f3f3 	udiv	r3, r2, r3
 8003414:	4a18      	ldr	r2, [pc, #96]	; (8003478 <SystemCoreClockUpdate+0xe4>)
 8003416:	6852      	ldr	r2, [r2, #4]
 8003418:	0992      	lsrs	r2, r2, #6
 800341a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800341e:	fb02 f303 	mul.w	r3, r2, r3
 8003422:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003424:	4b14      	ldr	r3, [pc, #80]	; (8003478 <SystemCoreClockUpdate+0xe4>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	0c1b      	lsrs	r3, r3, #16
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	3301      	adds	r3, #1
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	fbb2 f3f3 	udiv	r3, r2, r3
 800343c:	4a0f      	ldr	r2, [pc, #60]	; (800347c <SystemCoreClockUpdate+0xe8>)
 800343e:	6013      	str	r3, [r2, #0]
      break;
 8003440:	e003      	b.n	800344a <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8003442:	4b0e      	ldr	r3, [pc, #56]	; (800347c <SystemCoreClockUpdate+0xe8>)
 8003444:	4a0e      	ldr	r2, [pc, #56]	; (8003480 <SystemCoreClockUpdate+0xec>)
 8003446:	601a      	str	r2, [r3, #0]
      break;
 8003448:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800344a:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <SystemCoreClockUpdate+0xe4>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	091b      	lsrs	r3, r3, #4
 8003450:	f003 030f 	and.w	r3, r3, #15
 8003454:	4a0c      	ldr	r2, [pc, #48]	; (8003488 <SystemCoreClockUpdate+0xf4>)
 8003456:	5cd3      	ldrb	r3, [r2, r3]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800345c:	4b07      	ldr	r3, [pc, #28]	; (800347c <SystemCoreClockUpdate+0xe8>)
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	fa22 f303 	lsr.w	r3, r2, r3
 8003466:	4a05      	ldr	r2, [pc, #20]	; (800347c <SystemCoreClockUpdate+0xe8>)
 8003468:	6013      	str	r3, [r2, #0]
}
 800346a:	bf00      	nop
 800346c:	371c      	adds	r7, #28
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40023800 	.word	0x40023800
 800347c:	20000018 	.word	0x20000018
 8003480:	00f42400 	.word	0x00f42400
 8003484:	017d7840 	.word	0x017d7840
 8003488:	2000001c 	.word	0x2000001c

0800348c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	607b      	str	r3, [r7, #4]
 8003496:	2300      	movs	r3, #0
 8003498:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800349a:	4a36      	ldr	r2, [pc, #216]	; (8003574 <SetSysClock+0xe8>)
 800349c:	4b35      	ldr	r3, [pc, #212]	; (8003574 <SetSysClock+0xe8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80034a6:	4b33      	ldr	r3, [pc, #204]	; (8003574 <SetSysClock+0xe8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3301      	adds	r3, #1
 80034b4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d103      	bne.n	80034c4 <SetSysClock+0x38>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80034c2:	d1f0      	bne.n	80034a6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80034c4:	4b2b      	ldr	r3, [pc, #172]	; (8003574 <SetSysClock+0xe8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80034d0:	2301      	movs	r3, #1
 80034d2:	603b      	str	r3, [r7, #0]
 80034d4:	e001      	b.n	80034da <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80034d6:	2300      	movs	r3, #0
 80034d8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d142      	bne.n	8003566 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80034e0:	4a24      	ldr	r2, [pc, #144]	; (8003574 <SetSysClock+0xe8>)
 80034e2:	4b24      	ldr	r3, [pc, #144]	; (8003574 <SetSysClock+0xe8>)
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ea:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80034ec:	4a22      	ldr	r2, [pc, #136]	; (8003578 <SetSysClock+0xec>)
 80034ee:	4b22      	ldr	r3, [pc, #136]	; (8003578 <SetSysClock+0xec>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034f6:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80034f8:	4a1e      	ldr	r2, [pc, #120]	; (8003574 <SetSysClock+0xe8>)
 80034fa:	4b1e      	ldr	r3, [pc, #120]	; (8003574 <SetSysClock+0xe8>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003500:	4a1c      	ldr	r2, [pc, #112]	; (8003574 <SetSysClock+0xe8>)
 8003502:	4b1c      	ldr	r3, [pc, #112]	; (8003574 <SetSysClock+0xe8>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800350a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800350c:	4a19      	ldr	r2, [pc, #100]	; (8003574 <SetSysClock+0xe8>)
 800350e:	4b19      	ldr	r3, [pc, #100]	; (8003574 <SetSysClock+0xe8>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003516:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003518:	4b16      	ldr	r3, [pc, #88]	; (8003574 <SetSysClock+0xe8>)
 800351a:	4a18      	ldr	r2, [pc, #96]	; (800357c <SetSysClock+0xf0>)
 800351c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800351e:	4a15      	ldr	r2, [pc, #84]	; (8003574 <SetSysClock+0xe8>)
 8003520:	4b14      	ldr	r3, [pc, #80]	; (8003574 <SetSysClock+0xe8>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003528:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800352a:	bf00      	nop
 800352c:	4b11      	ldr	r3, [pc, #68]	; (8003574 <SetSysClock+0xe8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0f9      	beq.n	800352c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003538:	4b11      	ldr	r3, [pc, #68]	; (8003580 <SetSysClock+0xf4>)
 800353a:	f240 7205 	movw	r2, #1797	; 0x705
 800353e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003540:	4a0c      	ldr	r2, [pc, #48]	; (8003574 <SetSysClock+0xe8>)
 8003542:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <SetSysClock+0xe8>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f023 0303 	bic.w	r3, r3, #3
 800354a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800354c:	4a09      	ldr	r2, [pc, #36]	; (8003574 <SetSysClock+0xe8>)
 800354e:	4b09      	ldr	r3, [pc, #36]	; (8003574 <SetSysClock+0xe8>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f043 0302 	orr.w	r3, r3, #2
 8003556:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003558:	bf00      	nop
 800355a:	4b06      	ldr	r3, [pc, #24]	; (8003574 <SetSysClock+0xe8>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 030c 	and.w	r3, r3, #12
 8003562:	2b08      	cmp	r3, #8
 8003564:	d1f9      	bne.n	800355a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40023800 	.word	0x40023800
 8003578:	40007000 	.word	0x40007000
 800357c:	07405419 	.word	0x07405419
 8003580:	40023c00 	.word	0x40023c00

08003584 <__libc_init_array>:
 8003584:	b570      	push	{r4, r5, r6, lr}
 8003586:	4e0d      	ldr	r6, [pc, #52]	; (80035bc <__libc_init_array+0x38>)
 8003588:	4c0d      	ldr	r4, [pc, #52]	; (80035c0 <__libc_init_array+0x3c>)
 800358a:	1ba4      	subs	r4, r4, r6
 800358c:	10a4      	asrs	r4, r4, #2
 800358e:	2500      	movs	r5, #0
 8003590:	42a5      	cmp	r5, r4
 8003592:	d109      	bne.n	80035a8 <__libc_init_array+0x24>
 8003594:	4e0b      	ldr	r6, [pc, #44]	; (80035c4 <__libc_init_array+0x40>)
 8003596:	4c0c      	ldr	r4, [pc, #48]	; (80035c8 <__libc_init_array+0x44>)
 8003598:	f000 fc5c 	bl	8003e54 <_init>
 800359c:	1ba4      	subs	r4, r4, r6
 800359e:	10a4      	asrs	r4, r4, #2
 80035a0:	2500      	movs	r5, #0
 80035a2:	42a5      	cmp	r5, r4
 80035a4:	d105      	bne.n	80035b2 <__libc_init_array+0x2e>
 80035a6:	bd70      	pop	{r4, r5, r6, pc}
 80035a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035ac:	4798      	blx	r3
 80035ae:	3501      	adds	r5, #1
 80035b0:	e7ee      	b.n	8003590 <__libc_init_array+0xc>
 80035b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035b6:	4798      	blx	r3
 80035b8:	3501      	adds	r5, #1
 80035ba:	e7f2      	b.n	80035a2 <__libc_init_array+0x1e>
 80035bc:	08003f20 	.word	0x08003f20
 80035c0:	08003f20 	.word	0x08003f20
 80035c4:	08003f20 	.word	0x08003f20
 80035c8:	08003f24 	.word	0x08003f24

080035cc <memcpy>:
 80035cc:	b510      	push	{r4, lr}
 80035ce:	1e43      	subs	r3, r0, #1
 80035d0:	440a      	add	r2, r1
 80035d2:	4291      	cmp	r1, r2
 80035d4:	d100      	bne.n	80035d8 <memcpy+0xc>
 80035d6:	bd10      	pop	{r4, pc}
 80035d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035e0:	e7f7      	b.n	80035d2 <memcpy+0x6>

080035e2 <memset>:
 80035e2:	4402      	add	r2, r0
 80035e4:	4603      	mov	r3, r0
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d100      	bne.n	80035ec <memset+0xa>
 80035ea:	4770      	bx	lr
 80035ec:	f803 1b01 	strb.w	r1, [r3], #1
 80035f0:	e7f9      	b.n	80035e6 <memset+0x4>
	...

080035f4 <sniprintf>:
 80035f4:	b40c      	push	{r2, r3}
 80035f6:	b530      	push	{r4, r5, lr}
 80035f8:	4b17      	ldr	r3, [pc, #92]	; (8003658 <sniprintf+0x64>)
 80035fa:	1e0c      	subs	r4, r1, #0
 80035fc:	b09d      	sub	sp, #116	; 0x74
 80035fe:	681d      	ldr	r5, [r3, #0]
 8003600:	da08      	bge.n	8003614 <sniprintf+0x20>
 8003602:	238b      	movs	r3, #139	; 0x8b
 8003604:	602b      	str	r3, [r5, #0]
 8003606:	f04f 30ff 	mov.w	r0, #4294967295
 800360a:	b01d      	add	sp, #116	; 0x74
 800360c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003610:	b002      	add	sp, #8
 8003612:	4770      	bx	lr
 8003614:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003618:	f8ad 3014 	strh.w	r3, [sp, #20]
 800361c:	bf14      	ite	ne
 800361e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003622:	4623      	moveq	r3, r4
 8003624:	9304      	str	r3, [sp, #16]
 8003626:	9307      	str	r3, [sp, #28]
 8003628:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800362c:	9002      	str	r0, [sp, #8]
 800362e:	9006      	str	r0, [sp, #24]
 8003630:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003634:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003636:	ab21      	add	r3, sp, #132	; 0x84
 8003638:	a902      	add	r1, sp, #8
 800363a:	4628      	mov	r0, r5
 800363c:	9301      	str	r3, [sp, #4]
 800363e:	f000 f869 	bl	8003714 <_svfiprintf_r>
 8003642:	1c43      	adds	r3, r0, #1
 8003644:	bfbc      	itt	lt
 8003646:	238b      	movlt	r3, #139	; 0x8b
 8003648:	602b      	strlt	r3, [r5, #0]
 800364a:	2c00      	cmp	r4, #0
 800364c:	d0dd      	beq.n	800360a <sniprintf+0x16>
 800364e:	9b02      	ldr	r3, [sp, #8]
 8003650:	2200      	movs	r2, #0
 8003652:	701a      	strb	r2, [r3, #0]
 8003654:	e7d9      	b.n	800360a <sniprintf+0x16>
 8003656:	bf00      	nop
 8003658:	2000002c 	.word	0x2000002c

0800365c <__ssputs_r>:
 800365c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003660:	688e      	ldr	r6, [r1, #8]
 8003662:	429e      	cmp	r6, r3
 8003664:	4682      	mov	sl, r0
 8003666:	460c      	mov	r4, r1
 8003668:	4691      	mov	r9, r2
 800366a:	4698      	mov	r8, r3
 800366c:	d835      	bhi.n	80036da <__ssputs_r+0x7e>
 800366e:	898a      	ldrh	r2, [r1, #12]
 8003670:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003674:	d031      	beq.n	80036da <__ssputs_r+0x7e>
 8003676:	6825      	ldr	r5, [r4, #0]
 8003678:	6909      	ldr	r1, [r1, #16]
 800367a:	1a6f      	subs	r7, r5, r1
 800367c:	6965      	ldr	r5, [r4, #20]
 800367e:	2302      	movs	r3, #2
 8003680:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003684:	fb95 f5f3 	sdiv	r5, r5, r3
 8003688:	f108 0301 	add.w	r3, r8, #1
 800368c:	443b      	add	r3, r7
 800368e:	429d      	cmp	r5, r3
 8003690:	bf38      	it	cc
 8003692:	461d      	movcc	r5, r3
 8003694:	0553      	lsls	r3, r2, #21
 8003696:	d531      	bpl.n	80036fc <__ssputs_r+0xa0>
 8003698:	4629      	mov	r1, r5
 800369a:	f000 fb2d 	bl	8003cf8 <_malloc_r>
 800369e:	4606      	mov	r6, r0
 80036a0:	b950      	cbnz	r0, 80036b8 <__ssputs_r+0x5c>
 80036a2:	230c      	movs	r3, #12
 80036a4:	f8ca 3000 	str.w	r3, [sl]
 80036a8:	89a3      	ldrh	r3, [r4, #12]
 80036aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036ae:	81a3      	strh	r3, [r4, #12]
 80036b0:	f04f 30ff 	mov.w	r0, #4294967295
 80036b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036b8:	463a      	mov	r2, r7
 80036ba:	6921      	ldr	r1, [r4, #16]
 80036bc:	f7ff ff86 	bl	80035cc <memcpy>
 80036c0:	89a3      	ldrh	r3, [r4, #12]
 80036c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ca:	81a3      	strh	r3, [r4, #12]
 80036cc:	6126      	str	r6, [r4, #16]
 80036ce:	6165      	str	r5, [r4, #20]
 80036d0:	443e      	add	r6, r7
 80036d2:	1bed      	subs	r5, r5, r7
 80036d4:	6026      	str	r6, [r4, #0]
 80036d6:	60a5      	str	r5, [r4, #8]
 80036d8:	4646      	mov	r6, r8
 80036da:	4546      	cmp	r6, r8
 80036dc:	bf28      	it	cs
 80036de:	4646      	movcs	r6, r8
 80036e0:	4632      	mov	r2, r6
 80036e2:	4649      	mov	r1, r9
 80036e4:	6820      	ldr	r0, [r4, #0]
 80036e6:	f000 fa9f 	bl	8003c28 <memmove>
 80036ea:	68a3      	ldr	r3, [r4, #8]
 80036ec:	1b9b      	subs	r3, r3, r6
 80036ee:	60a3      	str	r3, [r4, #8]
 80036f0:	6823      	ldr	r3, [r4, #0]
 80036f2:	441e      	add	r6, r3
 80036f4:	6026      	str	r6, [r4, #0]
 80036f6:	2000      	movs	r0, #0
 80036f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036fc:	462a      	mov	r2, r5
 80036fe:	f000 fb59 	bl	8003db4 <_realloc_r>
 8003702:	4606      	mov	r6, r0
 8003704:	2800      	cmp	r0, #0
 8003706:	d1e1      	bne.n	80036cc <__ssputs_r+0x70>
 8003708:	6921      	ldr	r1, [r4, #16]
 800370a:	4650      	mov	r0, sl
 800370c:	f000 faa6 	bl	8003c5c <_free_r>
 8003710:	e7c7      	b.n	80036a2 <__ssputs_r+0x46>
	...

08003714 <_svfiprintf_r>:
 8003714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003718:	b09d      	sub	sp, #116	; 0x74
 800371a:	4680      	mov	r8, r0
 800371c:	9303      	str	r3, [sp, #12]
 800371e:	898b      	ldrh	r3, [r1, #12]
 8003720:	061c      	lsls	r4, r3, #24
 8003722:	460d      	mov	r5, r1
 8003724:	4616      	mov	r6, r2
 8003726:	d50f      	bpl.n	8003748 <_svfiprintf_r+0x34>
 8003728:	690b      	ldr	r3, [r1, #16]
 800372a:	b96b      	cbnz	r3, 8003748 <_svfiprintf_r+0x34>
 800372c:	2140      	movs	r1, #64	; 0x40
 800372e:	f000 fae3 	bl	8003cf8 <_malloc_r>
 8003732:	6028      	str	r0, [r5, #0]
 8003734:	6128      	str	r0, [r5, #16]
 8003736:	b928      	cbnz	r0, 8003744 <_svfiprintf_r+0x30>
 8003738:	230c      	movs	r3, #12
 800373a:	f8c8 3000 	str.w	r3, [r8]
 800373e:	f04f 30ff 	mov.w	r0, #4294967295
 8003742:	e0c5      	b.n	80038d0 <_svfiprintf_r+0x1bc>
 8003744:	2340      	movs	r3, #64	; 0x40
 8003746:	616b      	str	r3, [r5, #20]
 8003748:	2300      	movs	r3, #0
 800374a:	9309      	str	r3, [sp, #36]	; 0x24
 800374c:	2320      	movs	r3, #32
 800374e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003752:	2330      	movs	r3, #48	; 0x30
 8003754:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003758:	f04f 0b01 	mov.w	fp, #1
 800375c:	4637      	mov	r7, r6
 800375e:	463c      	mov	r4, r7
 8003760:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d13c      	bne.n	80037e2 <_svfiprintf_r+0xce>
 8003768:	ebb7 0a06 	subs.w	sl, r7, r6
 800376c:	d00b      	beq.n	8003786 <_svfiprintf_r+0x72>
 800376e:	4653      	mov	r3, sl
 8003770:	4632      	mov	r2, r6
 8003772:	4629      	mov	r1, r5
 8003774:	4640      	mov	r0, r8
 8003776:	f7ff ff71 	bl	800365c <__ssputs_r>
 800377a:	3001      	adds	r0, #1
 800377c:	f000 80a3 	beq.w	80038c6 <_svfiprintf_r+0x1b2>
 8003780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003782:	4453      	add	r3, sl
 8003784:	9309      	str	r3, [sp, #36]	; 0x24
 8003786:	783b      	ldrb	r3, [r7, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 809c 	beq.w	80038c6 <_svfiprintf_r+0x1b2>
 800378e:	2300      	movs	r3, #0
 8003790:	f04f 32ff 	mov.w	r2, #4294967295
 8003794:	9304      	str	r3, [sp, #16]
 8003796:	9307      	str	r3, [sp, #28]
 8003798:	9205      	str	r2, [sp, #20]
 800379a:	9306      	str	r3, [sp, #24]
 800379c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037a0:	931a      	str	r3, [sp, #104]	; 0x68
 80037a2:	2205      	movs	r2, #5
 80037a4:	7821      	ldrb	r1, [r4, #0]
 80037a6:	4850      	ldr	r0, [pc, #320]	; (80038e8 <_svfiprintf_r+0x1d4>)
 80037a8:	f7fc fd1a 	bl	80001e0 <memchr>
 80037ac:	1c67      	adds	r7, r4, #1
 80037ae:	9b04      	ldr	r3, [sp, #16]
 80037b0:	b9d8      	cbnz	r0, 80037ea <_svfiprintf_r+0xd6>
 80037b2:	06d9      	lsls	r1, r3, #27
 80037b4:	bf44      	itt	mi
 80037b6:	2220      	movmi	r2, #32
 80037b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80037bc:	071a      	lsls	r2, r3, #28
 80037be:	bf44      	itt	mi
 80037c0:	222b      	movmi	r2, #43	; 0x2b
 80037c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80037c6:	7822      	ldrb	r2, [r4, #0]
 80037c8:	2a2a      	cmp	r2, #42	; 0x2a
 80037ca:	d016      	beq.n	80037fa <_svfiprintf_r+0xe6>
 80037cc:	9a07      	ldr	r2, [sp, #28]
 80037ce:	2100      	movs	r1, #0
 80037d0:	200a      	movs	r0, #10
 80037d2:	4627      	mov	r7, r4
 80037d4:	3401      	adds	r4, #1
 80037d6:	783b      	ldrb	r3, [r7, #0]
 80037d8:	3b30      	subs	r3, #48	; 0x30
 80037da:	2b09      	cmp	r3, #9
 80037dc:	d951      	bls.n	8003882 <_svfiprintf_r+0x16e>
 80037de:	b1c9      	cbz	r1, 8003814 <_svfiprintf_r+0x100>
 80037e0:	e011      	b.n	8003806 <_svfiprintf_r+0xf2>
 80037e2:	2b25      	cmp	r3, #37	; 0x25
 80037e4:	d0c0      	beq.n	8003768 <_svfiprintf_r+0x54>
 80037e6:	4627      	mov	r7, r4
 80037e8:	e7b9      	b.n	800375e <_svfiprintf_r+0x4a>
 80037ea:	4a3f      	ldr	r2, [pc, #252]	; (80038e8 <_svfiprintf_r+0x1d4>)
 80037ec:	1a80      	subs	r0, r0, r2
 80037ee:	fa0b f000 	lsl.w	r0, fp, r0
 80037f2:	4318      	orrs	r0, r3
 80037f4:	9004      	str	r0, [sp, #16]
 80037f6:	463c      	mov	r4, r7
 80037f8:	e7d3      	b.n	80037a2 <_svfiprintf_r+0x8e>
 80037fa:	9a03      	ldr	r2, [sp, #12]
 80037fc:	1d11      	adds	r1, r2, #4
 80037fe:	6812      	ldr	r2, [r2, #0]
 8003800:	9103      	str	r1, [sp, #12]
 8003802:	2a00      	cmp	r2, #0
 8003804:	db01      	blt.n	800380a <_svfiprintf_r+0xf6>
 8003806:	9207      	str	r2, [sp, #28]
 8003808:	e004      	b.n	8003814 <_svfiprintf_r+0x100>
 800380a:	4252      	negs	r2, r2
 800380c:	f043 0302 	orr.w	r3, r3, #2
 8003810:	9207      	str	r2, [sp, #28]
 8003812:	9304      	str	r3, [sp, #16]
 8003814:	783b      	ldrb	r3, [r7, #0]
 8003816:	2b2e      	cmp	r3, #46	; 0x2e
 8003818:	d10e      	bne.n	8003838 <_svfiprintf_r+0x124>
 800381a:	787b      	ldrb	r3, [r7, #1]
 800381c:	2b2a      	cmp	r3, #42	; 0x2a
 800381e:	f107 0101 	add.w	r1, r7, #1
 8003822:	d132      	bne.n	800388a <_svfiprintf_r+0x176>
 8003824:	9b03      	ldr	r3, [sp, #12]
 8003826:	1d1a      	adds	r2, r3, #4
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	9203      	str	r2, [sp, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	bfb8      	it	lt
 8003830:	f04f 33ff 	movlt.w	r3, #4294967295
 8003834:	3702      	adds	r7, #2
 8003836:	9305      	str	r3, [sp, #20]
 8003838:	4c2c      	ldr	r4, [pc, #176]	; (80038ec <_svfiprintf_r+0x1d8>)
 800383a:	7839      	ldrb	r1, [r7, #0]
 800383c:	2203      	movs	r2, #3
 800383e:	4620      	mov	r0, r4
 8003840:	f7fc fcce 	bl	80001e0 <memchr>
 8003844:	b138      	cbz	r0, 8003856 <_svfiprintf_r+0x142>
 8003846:	2340      	movs	r3, #64	; 0x40
 8003848:	1b00      	subs	r0, r0, r4
 800384a:	fa03 f000 	lsl.w	r0, r3, r0
 800384e:	9b04      	ldr	r3, [sp, #16]
 8003850:	4303      	orrs	r3, r0
 8003852:	9304      	str	r3, [sp, #16]
 8003854:	3701      	adds	r7, #1
 8003856:	7839      	ldrb	r1, [r7, #0]
 8003858:	4825      	ldr	r0, [pc, #148]	; (80038f0 <_svfiprintf_r+0x1dc>)
 800385a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800385e:	2206      	movs	r2, #6
 8003860:	1c7e      	adds	r6, r7, #1
 8003862:	f7fc fcbd 	bl	80001e0 <memchr>
 8003866:	2800      	cmp	r0, #0
 8003868:	d035      	beq.n	80038d6 <_svfiprintf_r+0x1c2>
 800386a:	4b22      	ldr	r3, [pc, #136]	; (80038f4 <_svfiprintf_r+0x1e0>)
 800386c:	b9fb      	cbnz	r3, 80038ae <_svfiprintf_r+0x19a>
 800386e:	9b03      	ldr	r3, [sp, #12]
 8003870:	3307      	adds	r3, #7
 8003872:	f023 0307 	bic.w	r3, r3, #7
 8003876:	3308      	adds	r3, #8
 8003878:	9303      	str	r3, [sp, #12]
 800387a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800387c:	444b      	add	r3, r9
 800387e:	9309      	str	r3, [sp, #36]	; 0x24
 8003880:	e76c      	b.n	800375c <_svfiprintf_r+0x48>
 8003882:	fb00 3202 	mla	r2, r0, r2, r3
 8003886:	2101      	movs	r1, #1
 8003888:	e7a3      	b.n	80037d2 <_svfiprintf_r+0xbe>
 800388a:	2300      	movs	r3, #0
 800388c:	9305      	str	r3, [sp, #20]
 800388e:	4618      	mov	r0, r3
 8003890:	240a      	movs	r4, #10
 8003892:	460f      	mov	r7, r1
 8003894:	3101      	adds	r1, #1
 8003896:	783a      	ldrb	r2, [r7, #0]
 8003898:	3a30      	subs	r2, #48	; 0x30
 800389a:	2a09      	cmp	r2, #9
 800389c:	d903      	bls.n	80038a6 <_svfiprintf_r+0x192>
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0ca      	beq.n	8003838 <_svfiprintf_r+0x124>
 80038a2:	9005      	str	r0, [sp, #20]
 80038a4:	e7c8      	b.n	8003838 <_svfiprintf_r+0x124>
 80038a6:	fb04 2000 	mla	r0, r4, r0, r2
 80038aa:	2301      	movs	r3, #1
 80038ac:	e7f1      	b.n	8003892 <_svfiprintf_r+0x17e>
 80038ae:	ab03      	add	r3, sp, #12
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	462a      	mov	r2, r5
 80038b4:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <_svfiprintf_r+0x1e4>)
 80038b6:	a904      	add	r1, sp, #16
 80038b8:	4640      	mov	r0, r8
 80038ba:	f3af 8000 	nop.w
 80038be:	f1b0 3fff 	cmp.w	r0, #4294967295
 80038c2:	4681      	mov	r9, r0
 80038c4:	d1d9      	bne.n	800387a <_svfiprintf_r+0x166>
 80038c6:	89ab      	ldrh	r3, [r5, #12]
 80038c8:	065b      	lsls	r3, r3, #25
 80038ca:	f53f af38 	bmi.w	800373e <_svfiprintf_r+0x2a>
 80038ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038d0:	b01d      	add	sp, #116	; 0x74
 80038d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038d6:	ab03      	add	r3, sp, #12
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	462a      	mov	r2, r5
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <_svfiprintf_r+0x1e4>)
 80038de:	a904      	add	r1, sp, #16
 80038e0:	4640      	mov	r0, r8
 80038e2:	f000 f881 	bl	80039e8 <_printf_i>
 80038e6:	e7ea      	b.n	80038be <_svfiprintf_r+0x1aa>
 80038e8:	08003eec 	.word	0x08003eec
 80038ec:	08003ef2 	.word	0x08003ef2
 80038f0:	08003ef6 	.word	0x08003ef6
 80038f4:	00000000 	.word	0x00000000
 80038f8:	0800365d 	.word	0x0800365d

080038fc <_printf_common>:
 80038fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003900:	4691      	mov	r9, r2
 8003902:	461f      	mov	r7, r3
 8003904:	688a      	ldr	r2, [r1, #8]
 8003906:	690b      	ldr	r3, [r1, #16]
 8003908:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800390c:	4293      	cmp	r3, r2
 800390e:	bfb8      	it	lt
 8003910:	4613      	movlt	r3, r2
 8003912:	f8c9 3000 	str.w	r3, [r9]
 8003916:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800391a:	4606      	mov	r6, r0
 800391c:	460c      	mov	r4, r1
 800391e:	b112      	cbz	r2, 8003926 <_printf_common+0x2a>
 8003920:	3301      	adds	r3, #1
 8003922:	f8c9 3000 	str.w	r3, [r9]
 8003926:	6823      	ldr	r3, [r4, #0]
 8003928:	0699      	lsls	r1, r3, #26
 800392a:	bf42      	ittt	mi
 800392c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003930:	3302      	addmi	r3, #2
 8003932:	f8c9 3000 	strmi.w	r3, [r9]
 8003936:	6825      	ldr	r5, [r4, #0]
 8003938:	f015 0506 	ands.w	r5, r5, #6
 800393c:	d107      	bne.n	800394e <_printf_common+0x52>
 800393e:	f104 0a19 	add.w	sl, r4, #25
 8003942:	68e3      	ldr	r3, [r4, #12]
 8003944:	f8d9 2000 	ldr.w	r2, [r9]
 8003948:	1a9b      	subs	r3, r3, r2
 800394a:	429d      	cmp	r5, r3
 800394c:	db29      	blt.n	80039a2 <_printf_common+0xa6>
 800394e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003952:	6822      	ldr	r2, [r4, #0]
 8003954:	3300      	adds	r3, #0
 8003956:	bf18      	it	ne
 8003958:	2301      	movne	r3, #1
 800395a:	0692      	lsls	r2, r2, #26
 800395c:	d42e      	bmi.n	80039bc <_printf_common+0xc0>
 800395e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003962:	4639      	mov	r1, r7
 8003964:	4630      	mov	r0, r6
 8003966:	47c0      	blx	r8
 8003968:	3001      	adds	r0, #1
 800396a:	d021      	beq.n	80039b0 <_printf_common+0xb4>
 800396c:	6823      	ldr	r3, [r4, #0]
 800396e:	68e5      	ldr	r5, [r4, #12]
 8003970:	f8d9 2000 	ldr.w	r2, [r9]
 8003974:	f003 0306 	and.w	r3, r3, #6
 8003978:	2b04      	cmp	r3, #4
 800397a:	bf08      	it	eq
 800397c:	1aad      	subeq	r5, r5, r2
 800397e:	68a3      	ldr	r3, [r4, #8]
 8003980:	6922      	ldr	r2, [r4, #16]
 8003982:	bf0c      	ite	eq
 8003984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003988:	2500      	movne	r5, #0
 800398a:	4293      	cmp	r3, r2
 800398c:	bfc4      	itt	gt
 800398e:	1a9b      	subgt	r3, r3, r2
 8003990:	18ed      	addgt	r5, r5, r3
 8003992:	f04f 0900 	mov.w	r9, #0
 8003996:	341a      	adds	r4, #26
 8003998:	454d      	cmp	r5, r9
 800399a:	d11b      	bne.n	80039d4 <_printf_common+0xd8>
 800399c:	2000      	movs	r0, #0
 800399e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a2:	2301      	movs	r3, #1
 80039a4:	4652      	mov	r2, sl
 80039a6:	4639      	mov	r1, r7
 80039a8:	4630      	mov	r0, r6
 80039aa:	47c0      	blx	r8
 80039ac:	3001      	adds	r0, #1
 80039ae:	d103      	bne.n	80039b8 <_printf_common+0xbc>
 80039b0:	f04f 30ff 	mov.w	r0, #4294967295
 80039b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039b8:	3501      	adds	r5, #1
 80039ba:	e7c2      	b.n	8003942 <_printf_common+0x46>
 80039bc:	18e1      	adds	r1, r4, r3
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	2030      	movs	r0, #48	; 0x30
 80039c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039c6:	4422      	add	r2, r4
 80039c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039d0:	3302      	adds	r3, #2
 80039d2:	e7c4      	b.n	800395e <_printf_common+0x62>
 80039d4:	2301      	movs	r3, #1
 80039d6:	4622      	mov	r2, r4
 80039d8:	4639      	mov	r1, r7
 80039da:	4630      	mov	r0, r6
 80039dc:	47c0      	blx	r8
 80039de:	3001      	adds	r0, #1
 80039e0:	d0e6      	beq.n	80039b0 <_printf_common+0xb4>
 80039e2:	f109 0901 	add.w	r9, r9, #1
 80039e6:	e7d7      	b.n	8003998 <_printf_common+0x9c>

080039e8 <_printf_i>:
 80039e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039ec:	4617      	mov	r7, r2
 80039ee:	7e0a      	ldrb	r2, [r1, #24]
 80039f0:	b085      	sub	sp, #20
 80039f2:	2a6e      	cmp	r2, #110	; 0x6e
 80039f4:	4698      	mov	r8, r3
 80039f6:	4606      	mov	r6, r0
 80039f8:	460c      	mov	r4, r1
 80039fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039fc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003a00:	f000 80bc 	beq.w	8003b7c <_printf_i+0x194>
 8003a04:	d81a      	bhi.n	8003a3c <_printf_i+0x54>
 8003a06:	2a63      	cmp	r2, #99	; 0x63
 8003a08:	d02e      	beq.n	8003a68 <_printf_i+0x80>
 8003a0a:	d80a      	bhi.n	8003a22 <_printf_i+0x3a>
 8003a0c:	2a00      	cmp	r2, #0
 8003a0e:	f000 80c8 	beq.w	8003ba2 <_printf_i+0x1ba>
 8003a12:	2a58      	cmp	r2, #88	; 0x58
 8003a14:	f000 808a 	beq.w	8003b2c <_printf_i+0x144>
 8003a18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a1c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003a20:	e02a      	b.n	8003a78 <_printf_i+0x90>
 8003a22:	2a64      	cmp	r2, #100	; 0x64
 8003a24:	d001      	beq.n	8003a2a <_printf_i+0x42>
 8003a26:	2a69      	cmp	r2, #105	; 0x69
 8003a28:	d1f6      	bne.n	8003a18 <_printf_i+0x30>
 8003a2a:	6821      	ldr	r1, [r4, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003a32:	d023      	beq.n	8003a7c <_printf_i+0x94>
 8003a34:	1d11      	adds	r1, r2, #4
 8003a36:	6019      	str	r1, [r3, #0]
 8003a38:	6813      	ldr	r3, [r2, #0]
 8003a3a:	e027      	b.n	8003a8c <_printf_i+0xa4>
 8003a3c:	2a73      	cmp	r2, #115	; 0x73
 8003a3e:	f000 80b4 	beq.w	8003baa <_printf_i+0x1c2>
 8003a42:	d808      	bhi.n	8003a56 <_printf_i+0x6e>
 8003a44:	2a6f      	cmp	r2, #111	; 0x6f
 8003a46:	d02a      	beq.n	8003a9e <_printf_i+0xb6>
 8003a48:	2a70      	cmp	r2, #112	; 0x70
 8003a4a:	d1e5      	bne.n	8003a18 <_printf_i+0x30>
 8003a4c:	680a      	ldr	r2, [r1, #0]
 8003a4e:	f042 0220 	orr.w	r2, r2, #32
 8003a52:	600a      	str	r2, [r1, #0]
 8003a54:	e003      	b.n	8003a5e <_printf_i+0x76>
 8003a56:	2a75      	cmp	r2, #117	; 0x75
 8003a58:	d021      	beq.n	8003a9e <_printf_i+0xb6>
 8003a5a:	2a78      	cmp	r2, #120	; 0x78
 8003a5c:	d1dc      	bne.n	8003a18 <_printf_i+0x30>
 8003a5e:	2278      	movs	r2, #120	; 0x78
 8003a60:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003a64:	496e      	ldr	r1, [pc, #440]	; (8003c20 <_printf_i+0x238>)
 8003a66:	e064      	b.n	8003b32 <_printf_i+0x14a>
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003a6e:	1d11      	adds	r1, r2, #4
 8003a70:	6019      	str	r1, [r3, #0]
 8003a72:	6813      	ldr	r3, [r2, #0]
 8003a74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0a3      	b.n	8003bc4 <_printf_i+0x1dc>
 8003a7c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003a80:	f102 0104 	add.w	r1, r2, #4
 8003a84:	6019      	str	r1, [r3, #0]
 8003a86:	d0d7      	beq.n	8003a38 <_printf_i+0x50>
 8003a88:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	da03      	bge.n	8003a98 <_printf_i+0xb0>
 8003a90:	222d      	movs	r2, #45	; 0x2d
 8003a92:	425b      	negs	r3, r3
 8003a94:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003a98:	4962      	ldr	r1, [pc, #392]	; (8003c24 <_printf_i+0x23c>)
 8003a9a:	220a      	movs	r2, #10
 8003a9c:	e017      	b.n	8003ace <_printf_i+0xe6>
 8003a9e:	6820      	ldr	r0, [r4, #0]
 8003aa0:	6819      	ldr	r1, [r3, #0]
 8003aa2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003aa6:	d003      	beq.n	8003ab0 <_printf_i+0xc8>
 8003aa8:	1d08      	adds	r0, r1, #4
 8003aaa:	6018      	str	r0, [r3, #0]
 8003aac:	680b      	ldr	r3, [r1, #0]
 8003aae:	e006      	b.n	8003abe <_printf_i+0xd6>
 8003ab0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ab4:	f101 0004 	add.w	r0, r1, #4
 8003ab8:	6018      	str	r0, [r3, #0]
 8003aba:	d0f7      	beq.n	8003aac <_printf_i+0xc4>
 8003abc:	880b      	ldrh	r3, [r1, #0]
 8003abe:	4959      	ldr	r1, [pc, #356]	; (8003c24 <_printf_i+0x23c>)
 8003ac0:	2a6f      	cmp	r2, #111	; 0x6f
 8003ac2:	bf14      	ite	ne
 8003ac4:	220a      	movne	r2, #10
 8003ac6:	2208      	moveq	r2, #8
 8003ac8:	2000      	movs	r0, #0
 8003aca:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003ace:	6865      	ldr	r5, [r4, #4]
 8003ad0:	60a5      	str	r5, [r4, #8]
 8003ad2:	2d00      	cmp	r5, #0
 8003ad4:	f2c0 809c 	blt.w	8003c10 <_printf_i+0x228>
 8003ad8:	6820      	ldr	r0, [r4, #0]
 8003ada:	f020 0004 	bic.w	r0, r0, #4
 8003ade:	6020      	str	r0, [r4, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d13f      	bne.n	8003b64 <_printf_i+0x17c>
 8003ae4:	2d00      	cmp	r5, #0
 8003ae6:	f040 8095 	bne.w	8003c14 <_printf_i+0x22c>
 8003aea:	4675      	mov	r5, lr
 8003aec:	2a08      	cmp	r2, #8
 8003aee:	d10b      	bne.n	8003b08 <_printf_i+0x120>
 8003af0:	6823      	ldr	r3, [r4, #0]
 8003af2:	07da      	lsls	r2, r3, #31
 8003af4:	d508      	bpl.n	8003b08 <_printf_i+0x120>
 8003af6:	6923      	ldr	r3, [r4, #16]
 8003af8:	6862      	ldr	r2, [r4, #4]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	bfde      	ittt	le
 8003afe:	2330      	movle	r3, #48	; 0x30
 8003b00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b08:	ebae 0305 	sub.w	r3, lr, r5
 8003b0c:	6123      	str	r3, [r4, #16]
 8003b0e:	f8cd 8000 	str.w	r8, [sp]
 8003b12:	463b      	mov	r3, r7
 8003b14:	aa03      	add	r2, sp, #12
 8003b16:	4621      	mov	r1, r4
 8003b18:	4630      	mov	r0, r6
 8003b1a:	f7ff feef 	bl	80038fc <_printf_common>
 8003b1e:	3001      	adds	r0, #1
 8003b20:	d155      	bne.n	8003bce <_printf_i+0x1e6>
 8003b22:	f04f 30ff 	mov.w	r0, #4294967295
 8003b26:	b005      	add	sp, #20
 8003b28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b2c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003b30:	493c      	ldr	r1, [pc, #240]	; (8003c24 <_printf_i+0x23c>)
 8003b32:	6822      	ldr	r2, [r4, #0]
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003b3a:	f100 0504 	add.w	r5, r0, #4
 8003b3e:	601d      	str	r5, [r3, #0]
 8003b40:	d001      	beq.n	8003b46 <_printf_i+0x15e>
 8003b42:	6803      	ldr	r3, [r0, #0]
 8003b44:	e002      	b.n	8003b4c <_printf_i+0x164>
 8003b46:	0655      	lsls	r5, r2, #25
 8003b48:	d5fb      	bpl.n	8003b42 <_printf_i+0x15a>
 8003b4a:	8803      	ldrh	r3, [r0, #0]
 8003b4c:	07d0      	lsls	r0, r2, #31
 8003b4e:	bf44      	itt	mi
 8003b50:	f042 0220 	orrmi.w	r2, r2, #32
 8003b54:	6022      	strmi	r2, [r4, #0]
 8003b56:	b91b      	cbnz	r3, 8003b60 <_printf_i+0x178>
 8003b58:	6822      	ldr	r2, [r4, #0]
 8003b5a:	f022 0220 	bic.w	r2, r2, #32
 8003b5e:	6022      	str	r2, [r4, #0]
 8003b60:	2210      	movs	r2, #16
 8003b62:	e7b1      	b.n	8003ac8 <_printf_i+0xe0>
 8003b64:	4675      	mov	r5, lr
 8003b66:	fbb3 f0f2 	udiv	r0, r3, r2
 8003b6a:	fb02 3310 	mls	r3, r2, r0, r3
 8003b6e:	5ccb      	ldrb	r3, [r1, r3]
 8003b70:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003b74:	4603      	mov	r3, r0
 8003b76:	2800      	cmp	r0, #0
 8003b78:	d1f5      	bne.n	8003b66 <_printf_i+0x17e>
 8003b7a:	e7b7      	b.n	8003aec <_printf_i+0x104>
 8003b7c:	6808      	ldr	r0, [r1, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	6949      	ldr	r1, [r1, #20]
 8003b82:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003b86:	d004      	beq.n	8003b92 <_printf_i+0x1aa>
 8003b88:	1d10      	adds	r0, r2, #4
 8003b8a:	6018      	str	r0, [r3, #0]
 8003b8c:	6813      	ldr	r3, [r2, #0]
 8003b8e:	6019      	str	r1, [r3, #0]
 8003b90:	e007      	b.n	8003ba2 <_printf_i+0x1ba>
 8003b92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b96:	f102 0004 	add.w	r0, r2, #4
 8003b9a:	6018      	str	r0, [r3, #0]
 8003b9c:	6813      	ldr	r3, [r2, #0]
 8003b9e:	d0f6      	beq.n	8003b8e <_printf_i+0x1a6>
 8003ba0:	8019      	strh	r1, [r3, #0]
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	6123      	str	r3, [r4, #16]
 8003ba6:	4675      	mov	r5, lr
 8003ba8:	e7b1      	b.n	8003b0e <_printf_i+0x126>
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	1d11      	adds	r1, r2, #4
 8003bae:	6019      	str	r1, [r3, #0]
 8003bb0:	6815      	ldr	r5, [r2, #0]
 8003bb2:	6862      	ldr	r2, [r4, #4]
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	f7fc fb12 	bl	80001e0 <memchr>
 8003bbc:	b108      	cbz	r0, 8003bc2 <_printf_i+0x1da>
 8003bbe:	1b40      	subs	r0, r0, r5
 8003bc0:	6060      	str	r0, [r4, #4]
 8003bc2:	6863      	ldr	r3, [r4, #4]
 8003bc4:	6123      	str	r3, [r4, #16]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bcc:	e79f      	b.n	8003b0e <_printf_i+0x126>
 8003bce:	6923      	ldr	r3, [r4, #16]
 8003bd0:	462a      	mov	r2, r5
 8003bd2:	4639      	mov	r1, r7
 8003bd4:	4630      	mov	r0, r6
 8003bd6:	47c0      	blx	r8
 8003bd8:	3001      	adds	r0, #1
 8003bda:	d0a2      	beq.n	8003b22 <_printf_i+0x13a>
 8003bdc:	6823      	ldr	r3, [r4, #0]
 8003bde:	079b      	lsls	r3, r3, #30
 8003be0:	d507      	bpl.n	8003bf2 <_printf_i+0x20a>
 8003be2:	2500      	movs	r5, #0
 8003be4:	f104 0919 	add.w	r9, r4, #25
 8003be8:	68e3      	ldr	r3, [r4, #12]
 8003bea:	9a03      	ldr	r2, [sp, #12]
 8003bec:	1a9b      	subs	r3, r3, r2
 8003bee:	429d      	cmp	r5, r3
 8003bf0:	db05      	blt.n	8003bfe <_printf_i+0x216>
 8003bf2:	68e0      	ldr	r0, [r4, #12]
 8003bf4:	9b03      	ldr	r3, [sp, #12]
 8003bf6:	4298      	cmp	r0, r3
 8003bf8:	bfb8      	it	lt
 8003bfa:	4618      	movlt	r0, r3
 8003bfc:	e793      	b.n	8003b26 <_printf_i+0x13e>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	464a      	mov	r2, r9
 8003c02:	4639      	mov	r1, r7
 8003c04:	4630      	mov	r0, r6
 8003c06:	47c0      	blx	r8
 8003c08:	3001      	adds	r0, #1
 8003c0a:	d08a      	beq.n	8003b22 <_printf_i+0x13a>
 8003c0c:	3501      	adds	r5, #1
 8003c0e:	e7eb      	b.n	8003be8 <_printf_i+0x200>
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1a7      	bne.n	8003b64 <_printf_i+0x17c>
 8003c14:	780b      	ldrb	r3, [r1, #0]
 8003c16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c1e:	e765      	b.n	8003aec <_printf_i+0x104>
 8003c20:	08003f0e 	.word	0x08003f0e
 8003c24:	08003efd 	.word	0x08003efd

08003c28 <memmove>:
 8003c28:	4288      	cmp	r0, r1
 8003c2a:	b510      	push	{r4, lr}
 8003c2c:	eb01 0302 	add.w	r3, r1, r2
 8003c30:	d803      	bhi.n	8003c3a <memmove+0x12>
 8003c32:	1e42      	subs	r2, r0, #1
 8003c34:	4299      	cmp	r1, r3
 8003c36:	d10c      	bne.n	8003c52 <memmove+0x2a>
 8003c38:	bd10      	pop	{r4, pc}
 8003c3a:	4298      	cmp	r0, r3
 8003c3c:	d2f9      	bcs.n	8003c32 <memmove+0xa>
 8003c3e:	1881      	adds	r1, r0, r2
 8003c40:	1ad2      	subs	r2, r2, r3
 8003c42:	42d3      	cmn	r3, r2
 8003c44:	d100      	bne.n	8003c48 <memmove+0x20>
 8003c46:	bd10      	pop	{r4, pc}
 8003c48:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c4c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003c50:	e7f7      	b.n	8003c42 <memmove+0x1a>
 8003c52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c56:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003c5a:	e7eb      	b.n	8003c34 <memmove+0xc>

08003c5c <_free_r>:
 8003c5c:	b538      	push	{r3, r4, r5, lr}
 8003c5e:	4605      	mov	r5, r0
 8003c60:	2900      	cmp	r1, #0
 8003c62:	d045      	beq.n	8003cf0 <_free_r+0x94>
 8003c64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c68:	1f0c      	subs	r4, r1, #4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	bfb8      	it	lt
 8003c6e:	18e4      	addlt	r4, r4, r3
 8003c70:	f000 f8d6 	bl	8003e20 <__malloc_lock>
 8003c74:	4a1f      	ldr	r2, [pc, #124]	; (8003cf4 <_free_r+0x98>)
 8003c76:	6813      	ldr	r3, [r2, #0]
 8003c78:	4610      	mov	r0, r2
 8003c7a:	b933      	cbnz	r3, 8003c8a <_free_r+0x2e>
 8003c7c:	6063      	str	r3, [r4, #4]
 8003c7e:	6014      	str	r4, [r2, #0]
 8003c80:	4628      	mov	r0, r5
 8003c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c86:	f000 b8cc 	b.w	8003e22 <__malloc_unlock>
 8003c8a:	42a3      	cmp	r3, r4
 8003c8c:	d90c      	bls.n	8003ca8 <_free_r+0x4c>
 8003c8e:	6821      	ldr	r1, [r4, #0]
 8003c90:	1862      	adds	r2, r4, r1
 8003c92:	4293      	cmp	r3, r2
 8003c94:	bf04      	itt	eq
 8003c96:	681a      	ldreq	r2, [r3, #0]
 8003c98:	685b      	ldreq	r3, [r3, #4]
 8003c9a:	6063      	str	r3, [r4, #4]
 8003c9c:	bf04      	itt	eq
 8003c9e:	1852      	addeq	r2, r2, r1
 8003ca0:	6022      	streq	r2, [r4, #0]
 8003ca2:	6004      	str	r4, [r0, #0]
 8003ca4:	e7ec      	b.n	8003c80 <_free_r+0x24>
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	b10a      	cbz	r2, 8003cb0 <_free_r+0x54>
 8003cac:	42a2      	cmp	r2, r4
 8003cae:	d9fa      	bls.n	8003ca6 <_free_r+0x4a>
 8003cb0:	6819      	ldr	r1, [r3, #0]
 8003cb2:	1858      	adds	r0, r3, r1
 8003cb4:	42a0      	cmp	r0, r4
 8003cb6:	d10b      	bne.n	8003cd0 <_free_r+0x74>
 8003cb8:	6820      	ldr	r0, [r4, #0]
 8003cba:	4401      	add	r1, r0
 8003cbc:	1858      	adds	r0, r3, r1
 8003cbe:	4282      	cmp	r2, r0
 8003cc0:	6019      	str	r1, [r3, #0]
 8003cc2:	d1dd      	bne.n	8003c80 <_free_r+0x24>
 8003cc4:	6810      	ldr	r0, [r2, #0]
 8003cc6:	6852      	ldr	r2, [r2, #4]
 8003cc8:	605a      	str	r2, [r3, #4]
 8003cca:	4401      	add	r1, r0
 8003ccc:	6019      	str	r1, [r3, #0]
 8003cce:	e7d7      	b.n	8003c80 <_free_r+0x24>
 8003cd0:	d902      	bls.n	8003cd8 <_free_r+0x7c>
 8003cd2:	230c      	movs	r3, #12
 8003cd4:	602b      	str	r3, [r5, #0]
 8003cd6:	e7d3      	b.n	8003c80 <_free_r+0x24>
 8003cd8:	6820      	ldr	r0, [r4, #0]
 8003cda:	1821      	adds	r1, r4, r0
 8003cdc:	428a      	cmp	r2, r1
 8003cde:	bf04      	itt	eq
 8003ce0:	6811      	ldreq	r1, [r2, #0]
 8003ce2:	6852      	ldreq	r2, [r2, #4]
 8003ce4:	6062      	str	r2, [r4, #4]
 8003ce6:	bf04      	itt	eq
 8003ce8:	1809      	addeq	r1, r1, r0
 8003cea:	6021      	streq	r1, [r4, #0]
 8003cec:	605c      	str	r4, [r3, #4]
 8003cee:	e7c7      	b.n	8003c80 <_free_r+0x24>
 8003cf0:	bd38      	pop	{r3, r4, r5, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20012e1c 	.word	0x20012e1c

08003cf8 <_malloc_r>:
 8003cf8:	b570      	push	{r4, r5, r6, lr}
 8003cfa:	1ccd      	adds	r5, r1, #3
 8003cfc:	f025 0503 	bic.w	r5, r5, #3
 8003d00:	3508      	adds	r5, #8
 8003d02:	2d0c      	cmp	r5, #12
 8003d04:	bf38      	it	cc
 8003d06:	250c      	movcc	r5, #12
 8003d08:	2d00      	cmp	r5, #0
 8003d0a:	4606      	mov	r6, r0
 8003d0c:	db01      	blt.n	8003d12 <_malloc_r+0x1a>
 8003d0e:	42a9      	cmp	r1, r5
 8003d10:	d903      	bls.n	8003d1a <_malloc_r+0x22>
 8003d12:	230c      	movs	r3, #12
 8003d14:	6033      	str	r3, [r6, #0]
 8003d16:	2000      	movs	r0, #0
 8003d18:	bd70      	pop	{r4, r5, r6, pc}
 8003d1a:	f000 f881 	bl	8003e20 <__malloc_lock>
 8003d1e:	4a23      	ldr	r2, [pc, #140]	; (8003dac <_malloc_r+0xb4>)
 8003d20:	6814      	ldr	r4, [r2, #0]
 8003d22:	4621      	mov	r1, r4
 8003d24:	b991      	cbnz	r1, 8003d4c <_malloc_r+0x54>
 8003d26:	4c22      	ldr	r4, [pc, #136]	; (8003db0 <_malloc_r+0xb8>)
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	b91b      	cbnz	r3, 8003d34 <_malloc_r+0x3c>
 8003d2c:	4630      	mov	r0, r6
 8003d2e:	f000 f867 	bl	8003e00 <_sbrk_r>
 8003d32:	6020      	str	r0, [r4, #0]
 8003d34:	4629      	mov	r1, r5
 8003d36:	4630      	mov	r0, r6
 8003d38:	f000 f862 	bl	8003e00 <_sbrk_r>
 8003d3c:	1c43      	adds	r3, r0, #1
 8003d3e:	d126      	bne.n	8003d8e <_malloc_r+0x96>
 8003d40:	230c      	movs	r3, #12
 8003d42:	6033      	str	r3, [r6, #0]
 8003d44:	4630      	mov	r0, r6
 8003d46:	f000 f86c 	bl	8003e22 <__malloc_unlock>
 8003d4a:	e7e4      	b.n	8003d16 <_malloc_r+0x1e>
 8003d4c:	680b      	ldr	r3, [r1, #0]
 8003d4e:	1b5b      	subs	r3, r3, r5
 8003d50:	d41a      	bmi.n	8003d88 <_malloc_r+0x90>
 8003d52:	2b0b      	cmp	r3, #11
 8003d54:	d90f      	bls.n	8003d76 <_malloc_r+0x7e>
 8003d56:	600b      	str	r3, [r1, #0]
 8003d58:	50cd      	str	r5, [r1, r3]
 8003d5a:	18cc      	adds	r4, r1, r3
 8003d5c:	4630      	mov	r0, r6
 8003d5e:	f000 f860 	bl	8003e22 <__malloc_unlock>
 8003d62:	f104 000b 	add.w	r0, r4, #11
 8003d66:	1d23      	adds	r3, r4, #4
 8003d68:	f020 0007 	bic.w	r0, r0, #7
 8003d6c:	1ac3      	subs	r3, r0, r3
 8003d6e:	d01b      	beq.n	8003da8 <_malloc_r+0xb0>
 8003d70:	425a      	negs	r2, r3
 8003d72:	50e2      	str	r2, [r4, r3]
 8003d74:	bd70      	pop	{r4, r5, r6, pc}
 8003d76:	428c      	cmp	r4, r1
 8003d78:	bf0d      	iteet	eq
 8003d7a:	6863      	ldreq	r3, [r4, #4]
 8003d7c:	684b      	ldrne	r3, [r1, #4]
 8003d7e:	6063      	strne	r3, [r4, #4]
 8003d80:	6013      	streq	r3, [r2, #0]
 8003d82:	bf18      	it	ne
 8003d84:	460c      	movne	r4, r1
 8003d86:	e7e9      	b.n	8003d5c <_malloc_r+0x64>
 8003d88:	460c      	mov	r4, r1
 8003d8a:	6849      	ldr	r1, [r1, #4]
 8003d8c:	e7ca      	b.n	8003d24 <_malloc_r+0x2c>
 8003d8e:	1cc4      	adds	r4, r0, #3
 8003d90:	f024 0403 	bic.w	r4, r4, #3
 8003d94:	42a0      	cmp	r0, r4
 8003d96:	d005      	beq.n	8003da4 <_malloc_r+0xac>
 8003d98:	1a21      	subs	r1, r4, r0
 8003d9a:	4630      	mov	r0, r6
 8003d9c:	f000 f830 	bl	8003e00 <_sbrk_r>
 8003da0:	3001      	adds	r0, #1
 8003da2:	d0cd      	beq.n	8003d40 <_malloc_r+0x48>
 8003da4:	6025      	str	r5, [r4, #0]
 8003da6:	e7d9      	b.n	8003d5c <_malloc_r+0x64>
 8003da8:	bd70      	pop	{r4, r5, r6, pc}
 8003daa:	bf00      	nop
 8003dac:	20012e1c 	.word	0x20012e1c
 8003db0:	20012e20 	.word	0x20012e20

08003db4 <_realloc_r>:
 8003db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db6:	4607      	mov	r7, r0
 8003db8:	4614      	mov	r4, r2
 8003dba:	460e      	mov	r6, r1
 8003dbc:	b921      	cbnz	r1, 8003dc8 <_realloc_r+0x14>
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003dc4:	f7ff bf98 	b.w	8003cf8 <_malloc_r>
 8003dc8:	b922      	cbnz	r2, 8003dd4 <_realloc_r+0x20>
 8003dca:	f7ff ff47 	bl	8003c5c <_free_r>
 8003dce:	4625      	mov	r5, r4
 8003dd0:	4628      	mov	r0, r5
 8003dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dd4:	f000 f826 	bl	8003e24 <_malloc_usable_size_r>
 8003dd8:	4284      	cmp	r4, r0
 8003dda:	d90f      	bls.n	8003dfc <_realloc_r+0x48>
 8003ddc:	4621      	mov	r1, r4
 8003dde:	4638      	mov	r0, r7
 8003de0:	f7ff ff8a 	bl	8003cf8 <_malloc_r>
 8003de4:	4605      	mov	r5, r0
 8003de6:	2800      	cmp	r0, #0
 8003de8:	d0f2      	beq.n	8003dd0 <_realloc_r+0x1c>
 8003dea:	4631      	mov	r1, r6
 8003dec:	4622      	mov	r2, r4
 8003dee:	f7ff fbed 	bl	80035cc <memcpy>
 8003df2:	4631      	mov	r1, r6
 8003df4:	4638      	mov	r0, r7
 8003df6:	f7ff ff31 	bl	8003c5c <_free_r>
 8003dfa:	e7e9      	b.n	8003dd0 <_realloc_r+0x1c>
 8003dfc:	4635      	mov	r5, r6
 8003dfe:	e7e7      	b.n	8003dd0 <_realloc_r+0x1c>

08003e00 <_sbrk_r>:
 8003e00:	b538      	push	{r3, r4, r5, lr}
 8003e02:	4c06      	ldr	r4, [pc, #24]	; (8003e1c <_sbrk_r+0x1c>)
 8003e04:	2300      	movs	r3, #0
 8003e06:	4605      	mov	r5, r0
 8003e08:	4608      	mov	r0, r1
 8003e0a:	6023      	str	r3, [r4, #0]
 8003e0c:	f000 f814 	bl	8003e38 <_sbrk>
 8003e10:	1c43      	adds	r3, r0, #1
 8003e12:	d102      	bne.n	8003e1a <_sbrk_r+0x1a>
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	b103      	cbz	r3, 8003e1a <_sbrk_r+0x1a>
 8003e18:	602b      	str	r3, [r5, #0]
 8003e1a:	bd38      	pop	{r3, r4, r5, pc}
 8003e1c:	20012e9c 	.word	0x20012e9c

08003e20 <__malloc_lock>:
 8003e20:	4770      	bx	lr

08003e22 <__malloc_unlock>:
 8003e22:	4770      	bx	lr

08003e24 <_malloc_usable_size_r>:
 8003e24:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	f1a0 0004 	sub.w	r0, r0, #4
 8003e2e:	bfbc      	itt	lt
 8003e30:	580b      	ldrlt	r3, [r1, r0]
 8003e32:	18c0      	addlt	r0, r0, r3
 8003e34:	4770      	bx	lr
	...

08003e38 <_sbrk>:
 8003e38:	4b04      	ldr	r3, [pc, #16]	; (8003e4c <_sbrk+0x14>)
 8003e3a:	6819      	ldr	r1, [r3, #0]
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	b909      	cbnz	r1, 8003e44 <_sbrk+0xc>
 8003e40:	4903      	ldr	r1, [pc, #12]	; (8003e50 <_sbrk+0x18>)
 8003e42:	6019      	str	r1, [r3, #0]
 8003e44:	6818      	ldr	r0, [r3, #0]
 8003e46:	4402      	add	r2, r0
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	4770      	bx	lr
 8003e4c:	20012e24 	.word	0x20012e24
 8003e50:	20012ea0 	.word	0x20012ea0

08003e54 <_init>:
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e56:	bf00      	nop
 8003e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5a:	bc08      	pop	{r3}
 8003e5c:	469e      	mov	lr, r3
 8003e5e:	4770      	bx	lr

08003e60 <_fini>:
 8003e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e62:	bf00      	nop
 8003e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e66:	bc08      	pop	{r3}
 8003e68:	469e      	mov	lr, r3
 8003e6a:	4770      	bx	lr
