
007_LED_Button_Notify_FreeRTOS_SysView.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004770  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08004900  08004900  00014900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004a04  08004a04  00014a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004a08  08004a08  00014a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  08004a0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
  7 .bss          00015444  2000001c  2000001c  0002001c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20015460  20015460  0002001c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001053b  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001f4b  00000000  00000000  00030587  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c08  00000000  00000000  000324d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b10  00000000  00000000  000330e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006196  00000000  00000000  00033bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000043b5  00000000  00000000  00039d86  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003e13b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003294  00000000  00000000  0003e1b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0004144c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080048e8 	.word	0x080048e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	080048e8 	.word	0x080048e8

080001d0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b087      	sub	sp, #28
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
 80001d8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80001da:	2300      	movs	r3, #0
 80001dc:	617b      	str	r3, [r7, #20]
 80001de:	2300      	movs	r3, #0
 80001e0:	613b      	str	r3, [r7, #16]
 80001e2:	2300      	movs	r3, #0
 80001e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001e6:	2300      	movs	r3, #0
 80001e8:	617b      	str	r3, [r7, #20]
 80001ea:	e076      	b.n	80002da <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80001ec:	2201      	movs	r2, #1
 80001ee:	697b      	ldr	r3, [r7, #20]
 80001f0:	fa02 f303 	lsl.w	r3, r2, r3
 80001f4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	681a      	ldr	r2, [r3, #0]
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	4013      	ands	r3, r2
 80001fe:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000200:	68fa      	ldr	r2, [r7, #12]
 8000202:	693b      	ldr	r3, [r7, #16]
 8000204:	429a      	cmp	r2, r3
 8000206:	d165      	bne.n	80002d4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	681a      	ldr	r2, [r3, #0]
 800020c:	697b      	ldr	r3, [r7, #20]
 800020e:	005b      	lsls	r3, r3, #1
 8000210:	2103      	movs	r1, #3
 8000212:	fa01 f303 	lsl.w	r3, r1, r3
 8000216:	43db      	mvns	r3, r3
 8000218:	401a      	ands	r2, r3
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	681a      	ldr	r2, [r3, #0]
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	791b      	ldrb	r3, [r3, #4]
 8000226:	4619      	mov	r1, r3
 8000228:	697b      	ldr	r3, [r7, #20]
 800022a:	005b      	lsls	r3, r3, #1
 800022c:	fa01 f303 	lsl.w	r3, r1, r3
 8000230:	431a      	orrs	r2, r3
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	791b      	ldrb	r3, [r3, #4]
 800023a:	2b01      	cmp	r3, #1
 800023c:	d003      	beq.n	8000246 <GPIO_Init+0x76>
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	791b      	ldrb	r3, [r3, #4]
 8000242:	2b02      	cmp	r3, #2
 8000244:	d12e      	bne.n	80002a4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	689a      	ldr	r2, [r3, #8]
 800024a:	697b      	ldr	r3, [r7, #20]
 800024c:	005b      	lsls	r3, r3, #1
 800024e:	2103      	movs	r1, #3
 8000250:	fa01 f303 	lsl.w	r3, r1, r3
 8000254:	43db      	mvns	r3, r3
 8000256:	401a      	ands	r2, r3
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	689a      	ldr	r2, [r3, #8]
 8000260:	683b      	ldr	r3, [r7, #0]
 8000262:	795b      	ldrb	r3, [r3, #5]
 8000264:	4619      	mov	r1, r3
 8000266:	697b      	ldr	r3, [r7, #20]
 8000268:	005b      	lsls	r3, r3, #1
 800026a:	fa01 f303 	lsl.w	r3, r1, r3
 800026e:	431a      	orrs	r2, r3
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	685a      	ldr	r2, [r3, #4]
 8000278:	697b      	ldr	r3, [r7, #20]
 800027a:	b29b      	uxth	r3, r3
 800027c:	4619      	mov	r1, r3
 800027e:	2301      	movs	r3, #1
 8000280:	408b      	lsls	r3, r1
 8000282:	43db      	mvns	r3, r3
 8000284:	401a      	ands	r2, r3
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	683a      	ldr	r2, [r7, #0]
 8000290:	7992      	ldrb	r2, [r2, #6]
 8000292:	4611      	mov	r1, r2
 8000294:	697a      	ldr	r2, [r7, #20]
 8000296:	b292      	uxth	r2, r2
 8000298:	fa01 f202 	lsl.w	r2, r1, r2
 800029c:	b292      	uxth	r2, r2
 800029e:	431a      	orrs	r2, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	68da      	ldr	r2, [r3, #12]
 80002a8:	697b      	ldr	r3, [r7, #20]
 80002aa:	b29b      	uxth	r3, r3
 80002ac:	005b      	lsls	r3, r3, #1
 80002ae:	2103      	movs	r1, #3
 80002b0:	fa01 f303 	lsl.w	r3, r1, r3
 80002b4:	43db      	mvns	r3, r3
 80002b6:	401a      	ands	r2, r3
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	68da      	ldr	r2, [r3, #12]
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	79db      	ldrb	r3, [r3, #7]
 80002c4:	4619      	mov	r1, r3
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	005b      	lsls	r3, r3, #1
 80002ca:	fa01 f303 	lsl.w	r3, r1, r3
 80002ce:	431a      	orrs	r2, r3
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002d4:	697b      	ldr	r3, [r7, #20]
 80002d6:	3301      	adds	r3, #1
 80002d8:	617b      	str	r3, [r7, #20]
 80002da:	697b      	ldr	r3, [r7, #20]
 80002dc:	2b0f      	cmp	r3, #15
 80002de:	d985      	bls.n	80001ec <GPIO_Init+0x1c>
    }
  }
}
 80002e0:	bf00      	nop
 80002e2:	371c      	adds	r7, #28
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr

080002ec <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	460b      	mov	r3, r1
 80002f6:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80002f8:	2300      	movs	r3, #0
 80002fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	691a      	ldr	r2, [r3, #16]
 8000300:	887b      	ldrh	r3, [r7, #2]
 8000302:	4013      	ands	r3, r2
 8000304:	2b00      	cmp	r3, #0
 8000306:	d002      	beq.n	800030e <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000308:	2301      	movs	r3, #1
 800030a:	73fb      	strb	r3, [r7, #15]
 800030c:	e001      	b.n	8000312 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800030e:	2300      	movs	r3, #0
 8000310:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000312:	7bfb      	ldrb	r3, [r7, #15]
}
 8000314:	4618      	mov	r0, r3
 8000316:	3714      	adds	r7, #20
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr

08000320 <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	460b      	mov	r3, r1
 800032a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	695a      	ldr	r2, [r3, #20]
 8000330:	887b      	ldrh	r3, [r7, #2]
 8000332:	405a      	eors	r2, r3
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	615a      	str	r2, [r3, #20]
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000348:	4a12      	ldr	r2, [pc, #72]	; (8000394 <RCC_DeInit+0x50>)
 800034a:	4b12      	ldr	r3, [pc, #72]	; (8000394 <RCC_DeInit+0x50>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f043 0301 	orr.w	r3, r3, #1
 8000352:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000354:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <RCC_DeInit+0x50>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 800035a:	4a0e      	ldr	r2, [pc, #56]	; (8000394 <RCC_DeInit+0x50>)
 800035c:	4b0d      	ldr	r3, [pc, #52]	; (8000394 <RCC_DeInit+0x50>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 8000364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000368:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800036a:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <RCC_DeInit+0x50>)
 800036c:	4a0a      	ldr	r2, [pc, #40]	; (8000398 <RCC_DeInit+0x54>)
 800036e:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000370:	4b08      	ldr	r3, [pc, #32]	; (8000394 <RCC_DeInit+0x50>)
 8000372:	4a0a      	ldr	r2, [pc, #40]	; (800039c <RCC_DeInit+0x58>)
 8000374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000378:	4a06      	ldr	r2, [pc, #24]	; (8000394 <RCC_DeInit+0x50>)
 800037a:	4b06      	ldr	r3, [pc, #24]	; (8000394 <RCC_DeInit+0x50>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000382:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000384:	4b03      	ldr	r3, [pc, #12]	; (8000394 <RCC_DeInit+0x50>)
 8000386:	2200      	movs	r2, #0
 8000388:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 800038a:	bf00      	nop
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr
 8000394:	40023800 	.word	0x40023800
 8000398:	24003010 	.word	0x24003010
 800039c:	20003000 	.word	0x20003000

080003a0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	460b      	mov	r3, r1
 80003aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80003ac:	78fb      	ldrb	r3, [r7, #3]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d006      	beq.n	80003c0 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80003b2:	490a      	ldr	r1, [pc, #40]	; (80003dc <RCC_AHB1PeriphClockCmd+0x3c>)
 80003b4:	4b09      	ldr	r3, [pc, #36]	; (80003dc <RCC_AHB1PeriphClockCmd+0x3c>)
 80003b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4313      	orrs	r3, r2
 80003bc:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80003be:	e006      	b.n	80003ce <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80003c0:	4906      	ldr	r1, [pc, #24]	; (80003dc <RCC_AHB1PeriphClockCmd+0x3c>)
 80003c2:	4b06      	ldr	r3, [pc, #24]	; (80003dc <RCC_AHB1PeriphClockCmd+0x3c>)
 80003c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	43db      	mvns	r3, r3
 80003ca:	4013      	ands	r3, r2
 80003cc:	630b      	str	r3, [r1, #48]	; 0x30
}
 80003ce:	bf00      	nop
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	40023800 	.word	0x40023800

080003e0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	f103 0208 	add.w	r2, r3, #8
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	f04f 32ff 	mov.w	r2, #4294967295
 80003f8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	f103 0208 	add.w	r2, r3, #8
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	f103 0208 	add.w	r2, r3, #8
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr

08000420 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2200      	movs	r2, #0
 800042c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800042e:	bf00      	nop
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr

0800043a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800043a:	b480      	push	{r7}
 800043c:	b085      	sub	sp, #20
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
 8000442:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000450:	d103      	bne.n	800045a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	691b      	ldr	r3, [r3, #16]
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	e00c      	b.n	8000474 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	3308      	adds	r3, #8
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	e002      	b.n	8000468 <vListInsert+0x2e>
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	681a      	ldr	r2, [r3, #0]
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	429a      	cmp	r2, r3
 8000472:	d9f6      	bls.n	8000462 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	685a      	ldr	r2, [r3, #4]
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	683a      	ldr	r2, [r7, #0]
 8000482:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	68fa      	ldr	r2, [r7, #12]
 8000488:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	683a      	ldr	r2, [r7, #0]
 800048e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	687a      	ldr	r2, [r7, #4]
 8000494:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	1c5a      	adds	r2, r3, #1
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	601a      	str	r2, [r3, #0]
}
 80004a0:	bf00      	nop
 80004a2:	3714      	adds	r7, #20
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr

080004ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	691b      	ldr	r3, [r3, #16]
 80004b8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	6892      	ldr	r2, [r2, #8]
 80004c2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	689b      	ldr	r3, [r3, #8]
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	6852      	ldr	r2, [r2, #4]
 80004cc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	685a      	ldr	r2, [r3, #4]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d103      	bne.n	80004e0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	689a      	ldr	r2, [r3, #8]
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2200      	movs	r2, #0
 80004e4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	1e5a      	subs	r2, r3, #1
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	681b      	ldr	r3, [r3, #0]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3714      	adds	r7, #20
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	3b04      	subs	r3, #4
 8000510:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000518:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	3b04      	subs	r3, #4
 800051e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	f023 0201 	bic.w	r2, r3, #1
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	3b04      	subs	r3, #4
 800052e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000530:	4a0c      	ldr	r2, [pc, #48]	; (8000564 <pxPortInitialiseStack+0x64>)
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	3b14      	subs	r3, #20
 800053a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	3b04      	subs	r3, #4
 8000546:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	f06f 0202 	mvn.w	r2, #2
 800054e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	3b20      	subs	r3, #32
 8000554:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000556:	68fb      	ldr	r3, [r7, #12]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	08000569 	.word	0x08000569

08000568 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8000572:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <prvTaskExitError+0x50>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800057a:	d009      	beq.n	8000590 <prvTaskExitError+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800057c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000580:	f383 8811 	msr	BASEPRI, r3
 8000584:	f3bf 8f6f 	isb	sy
 8000588:	f3bf 8f4f 	dsb	sy
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	e7fe      	b.n	800058e <prvTaskExitError+0x26>
 8000590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000594:	f383 8811 	msr	BASEPRI, r3
 8000598:	f3bf 8f6f 	isb	sy
 800059c:	f3bf 8f4f 	dsb	sy
 80005a0:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80005a2:	bf00      	nop
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d0fc      	beq.n	80005a4 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000000 	.word	0x20000000
 80005bc:	00000000 	.word	0x00000000

080005c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <pxCurrentTCBConst2>)
 80005c2:	6819      	ldr	r1, [r3, #0]
 80005c4:	6808      	ldr	r0, [r1, #0]
 80005c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005ca:	f380 8809 	msr	PSP, r0
 80005ce:	f3bf 8f6f 	isb	sy
 80005d2:	f04f 0000 	mov.w	r0, #0
 80005d6:	f380 8811 	msr	BASEPRI, r0
 80005da:	4770      	bx	lr
 80005dc:	f3af 8000 	nop.w

080005e0 <pxCurrentTCBConst2>:
 80005e0:	20012c5c 	.word	0x20012c5c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop

080005e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80005e8:	4808      	ldr	r0, [pc, #32]	; (800060c <prvPortStartFirstTask+0x24>)
 80005ea:	6800      	ldr	r0, [r0, #0]
 80005ec:	6800      	ldr	r0, [r0, #0]
 80005ee:	f380 8808 	msr	MSP, r0
 80005f2:	f04f 0000 	mov.w	r0, #0
 80005f6:	f380 8814 	msr	CONTROL, r0
 80005fa:	b662      	cpsie	i
 80005fc:	b661      	cpsie	f
 80005fe:	f3bf 8f4f 	dsb	sy
 8000602:	f3bf 8f6f 	isb	sy
 8000606:	df00      	svc	0
 8000608:	bf00      	nop
 800060a:	0000      	.short	0x0000
 800060c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000610:	bf00      	nop
 8000612:	bf00      	nop

08000614 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800061a:	4b44      	ldr	r3, [pc, #272]	; (800072c <xPortStartScheduler+0x118>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a44      	ldr	r2, [pc, #272]	; (8000730 <xPortStartScheduler+0x11c>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d109      	bne.n	8000638 <xPortStartScheduler+0x24>
 8000624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000628:	f383 8811 	msr	BASEPRI, r3
 800062c:	f3bf 8f6f 	isb	sy
 8000630:	f3bf 8f4f 	dsb	sy
 8000634:	613b      	str	r3, [r7, #16]
 8000636:	e7fe      	b.n	8000636 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000638:	4b3c      	ldr	r3, [pc, #240]	; (800072c <xPortStartScheduler+0x118>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a3d      	ldr	r2, [pc, #244]	; (8000734 <xPortStartScheduler+0x120>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d109      	bne.n	8000656 <xPortStartScheduler+0x42>
 8000642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000646:	f383 8811 	msr	BASEPRI, r3
 800064a:	f3bf 8f6f 	isb	sy
 800064e:	f3bf 8f4f 	dsb	sy
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	e7fe      	b.n	8000654 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000656:	4b38      	ldr	r3, [pc, #224]	; (8000738 <xPortStartScheduler+0x124>)
 8000658:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	22ff      	movs	r2, #255	; 0xff
 8000666:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000670:	78fb      	ldrb	r3, [r7, #3]
 8000672:	b2db      	uxtb	r3, r3
 8000674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b30      	ldr	r3, [pc, #192]	; (800073c <xPortStartScheduler+0x128>)
 800067c:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800067e:	4b30      	ldr	r3, [pc, #192]	; (8000740 <xPortStartScheduler+0x12c>)
 8000680:	2207      	movs	r2, #7
 8000682:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000684:	e009      	b.n	800069a <xPortStartScheduler+0x86>
        {
            ulMaxPRIGROUPValue--;
 8000686:	4b2e      	ldr	r3, [pc, #184]	; (8000740 <xPortStartScheduler+0x12c>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	3b01      	subs	r3, #1
 800068c:	4a2c      	ldr	r2, [pc, #176]	; (8000740 <xPortStartScheduler+0x12c>)
 800068e:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000690:	78fb      	ldrb	r3, [r7, #3]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	b2db      	uxtb	r3, r3
 8000698:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800069a:	78fb      	ldrb	r3, [r7, #3]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a2:	2b80      	cmp	r3, #128	; 0x80
 80006a4:	d0ef      	beq.n	8000686 <xPortStartScheduler+0x72>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80006a6:	4b26      	ldr	r3, [pc, #152]	; (8000740 <xPortStartScheduler+0x12c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f1c3 0307 	rsb	r3, r3, #7
 80006ae:	2b04      	cmp	r3, #4
 80006b0:	d009      	beq.n	80006c6 <xPortStartScheduler+0xb2>
 80006b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006b6:	f383 8811 	msr	BASEPRI, r3
 80006ba:	f3bf 8f6f 	isb	sy
 80006be:	f3bf 8f4f 	dsb	sy
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	e7fe      	b.n	80006c4 <xPortStartScheduler+0xb0>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80006c6:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <xPortStartScheduler+0x12c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	021b      	lsls	r3, r3, #8
 80006cc:	4a1c      	ldr	r2, [pc, #112]	; (8000740 <xPortStartScheduler+0x12c>)
 80006ce:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <xPortStartScheduler+0x12c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80006d8:	4a19      	ldr	r2, [pc, #100]	; (8000740 <xPortStartScheduler+0x12c>)
 80006da:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80006e4:	4a17      	ldr	r2, [pc, #92]	; (8000744 <xPortStartScheduler+0x130>)
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <xPortStartScheduler+0x130>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006ee:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80006f0:	4a14      	ldr	r2, [pc, #80]	; (8000744 <xPortStartScheduler+0x130>)
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <xPortStartScheduler+0x130>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80006fa:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80006fc:	f000 f8d4 	bl	80008a8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <xPortStartScheduler+0x134>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8000706:	f000 f8f3 	bl	80008f0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800070a:	4a10      	ldr	r2, [pc, #64]	; (800074c <xPortStartScheduler+0x138>)
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <xPortStartScheduler+0x138>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000714:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000716:	f7ff ff67 	bl	80005e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800071a:	f001 fa4f 	bl	8001bbc <vTaskSwitchContext>
    prvTaskExitError();
 800071e:	f7ff ff23 	bl	8000568 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8000722:	2300      	movs	r3, #0
}
 8000724:	4618      	mov	r0, r3
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	e000ed00 	.word	0xe000ed00
 8000730:	410fc271 	.word	0x410fc271
 8000734:	410fc270 	.word	0x410fc270
 8000738:	e000e400 	.word	0xe000e400
 800073c:	20000038 	.word	0x20000038
 8000740:	2000003c 	.word	0x2000003c
 8000744:	e000ed20 	.word	0xe000ed20
 8000748:	20000000 	.word	0x20000000
 800074c:	e000ef34 	.word	0xe000ef34

08000750 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800075a:	f383 8811 	msr	BASEPRI, r3
 800075e:	f3bf 8f6f 	isb	sy
 8000762:	f3bf 8f4f 	dsb	sy
 8000766:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000768:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <vPortEnterCritical+0x54>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	3301      	adds	r3, #1
 800076e:	4a0d      	ldr	r2, [pc, #52]	; (80007a4 <vPortEnterCritical+0x54>)
 8000770:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <vPortEnterCritical+0x54>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d10e      	bne.n	8000798 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <vPortEnterCritical+0x58>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b00      	cmp	r3, #0
 8000782:	d009      	beq.n	8000798 <vPortEnterCritical+0x48>
 8000784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000788:	f383 8811 	msr	BASEPRI, r3
 800078c:	f3bf 8f6f 	isb	sy
 8000790:	f3bf 8f4f 	dsb	sy
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	e7fe      	b.n	8000796 <vPortEnterCritical+0x46>
    }
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	20000000 	.word	0x20000000
 80007a8:	e000ed04 	.word	0xe000ed04

080007ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <vPortExitCritical+0x4c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d109      	bne.n	80007ce <vPortExitCritical+0x22>
 80007ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007be:	f383 8811 	msr	BASEPRI, r3
 80007c2:	f3bf 8f6f 	isb	sy
 80007c6:	f3bf 8f4f 	dsb	sy
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	e7fe      	b.n	80007cc <vPortExitCritical+0x20>
    uxCriticalNesting--;
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <vPortExitCritical+0x4c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	3b01      	subs	r3, #1
 80007d4:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <vPortExitCritical+0x4c>)
 80007d6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <vPortExitCritical+0x4c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d104      	bne.n	80007ea <vPortExitCritical+0x3e>
 80007e0:	2300      	movs	r3, #0
 80007e2:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	20000000 	.word	0x20000000
 80007fc:	00000000 	.word	0x00000000

08000800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000800:	f3ef 8009 	mrs	r0, PSP
 8000804:	f3bf 8f6f 	isb	sy
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <pxCurrentTCBConst>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	f01e 0f10 	tst.w	lr, #16
 8000810:	bf08      	it	eq
 8000812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800081a:	6010      	str	r0, [r2, #0]
 800081c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000820:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000824:	f380 8811 	msr	BASEPRI, r0
 8000828:	f3bf 8f4f 	dsb	sy
 800082c:	f3bf 8f6f 	isb	sy
 8000830:	f001 f9c4 	bl	8001bbc <vTaskSwitchContext>
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	f380 8811 	msr	BASEPRI, r0
 800083c:	bc09      	pop	{r0, r3}
 800083e:	6819      	ldr	r1, [r3, #0]
 8000840:	6808      	ldr	r0, [r1, #0]
 8000842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000846:	f01e 0f10 	tst.w	lr, #16
 800084a:	bf08      	it	eq
 800084c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000850:	f380 8809 	msr	PSP, r0
 8000854:	f3bf 8f6f 	isb	sy
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	f3af 8000 	nop.w

08000860 <pxCurrentTCBConst>:
 8000860:	20012c5c 	.word	0x20012c5c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000864:	bf00      	nop
 8000866:	bf00      	nop

08000868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
        __asm volatile
 800086e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000872:	f383 8811 	msr	BASEPRI, r3
 8000876:	f3bf 8f6f 	isb	sy
 800087a:	f3bf 8f4f 	dsb	sy
 800087e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000880:	f001 f882 	bl	8001988 <xTaskIncrementTick>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d003      	beq.n	8000892 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <SysTick_Handler+0x3c>)
 800088c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	e000ed04 	.word	0xe000ed04

080008a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80008ac:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <vPortSetupTimerInterrupt+0x34>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <vPortSetupTimerInterrupt+0x38>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80008b8:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <vPortSetupTimerInterrupt+0x3c>)
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <vPortSetupTimerInterrupt+0x40>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	490b      	ldr	r1, [pc, #44]	; (80008ec <vPortSetupTimerInterrupt+0x44>)
 80008c0:	fba1 1303 	umull	r1, r3, r1, r3
 80008c4:	099b      	lsrs	r3, r3, #6
 80008c6:	3b01      	subs	r3, #1
 80008c8:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80008ca:	4b04      	ldr	r3, [pc, #16]	; (80008dc <vPortSetupTimerInterrupt+0x34>)
 80008cc:	2207      	movs	r2, #7
 80008ce:	601a      	str	r2, [r3, #0]
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	e000e010 	.word	0xe000e010
 80008e0:	e000e018 	.word	0xe000e018
 80008e4:	e000e014 	.word	0xe000e014
 80008e8:	20000008 	.word	0x20000008
 80008ec:	10624dd3 	.word	0x10624dd3

080008f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80008f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000900 <vPortEnableVFP+0x10>
 80008f4:	6801      	ldr	r1, [r0, #0]
 80008f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008fa:	6001      	str	r1, [r0, #0]
 80008fc:	4770      	bx	lr
 80008fe:	0000      	.short	0x0000
 8000900:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8000904:	bf00      	nop
 8000906:	bf00      	nop

08000908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800090e:	f3ef 8305 	mrs	r3, IPSR
 8000912:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	2b0f      	cmp	r3, #15
 8000918:	d913      	bls.n	8000942 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800091a:	4a16      	ldr	r2, [pc, #88]	; (8000974 <vPortValidateInterruptPriority+0x6c>)
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	4413      	add	r3, r2
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <vPortValidateInterruptPriority+0x70>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	7afa      	ldrb	r2, [r7, #11]
 800092a:	429a      	cmp	r2, r3
 800092c:	d209      	bcs.n	8000942 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 800092e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000932:	f383 8811 	msr	BASEPRI, r3
 8000936:	f3bf 8f6f 	isb	sy
 800093a:	f3bf 8f4f 	dsb	sy
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	e7fe      	b.n	8000940 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <vPortValidateInterruptPriority+0x74>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <vPortValidateInterruptPriority+0x78>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	429a      	cmp	r2, r3
 8000950:	d909      	bls.n	8000966 <vPortValidateInterruptPriority+0x5e>
 8000952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000956:	f383 8811 	msr	BASEPRI, r3
 800095a:	f3bf 8f6f 	isb	sy
 800095e:	f3bf 8f4f 	dsb	sy
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	e7fe      	b.n	8000964 <vPortValidateInterruptPriority+0x5c>
    }
 8000966:	bf00      	nop
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000e3f0 	.word	0xe000e3f0
 8000978:	20000038 	.word	0x20000038
 800097c:	e000ed0c 	.word	0xe000ed0c
 8000980:	2000003c 	.word	0x2000003c

08000984 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8000990:	f000 fecc 	bl	800172c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8000994:	4b52      	ldr	r3, [pc, #328]	; (8000ae0 <pvPortMalloc+0x15c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d101      	bne.n	80009a0 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800099c:	f000 f900 	bl	8000ba0 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d012      	beq.n	80009cc <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80009a6:	2208      	movs	r2, #8
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	3308      	adds	r3, #8
 80009b2:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	43da      	mvns	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d304      	bcc.n	80009c8 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	4413      	add	r3, r2
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	e001      	b.n	80009cc <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	db6f      	blt.n	8000ab2 <pvPortMalloc+0x12e>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d06c      	beq.n	8000ab2 <pvPortMalloc+0x12e>
 80009d8:	4b42      	ldr	r3, [pc, #264]	; (8000ae4 <pvPortMalloc+0x160>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d867      	bhi.n	8000ab2 <pvPortMalloc+0x12e>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80009e2:	4b41      	ldr	r3, [pc, #260]	; (8000ae8 <pvPortMalloc+0x164>)
 80009e4:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80009e6:	4b40      	ldr	r3, [pc, #256]	; (8000ae8 <pvPortMalloc+0x164>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80009ec:	e004      	b.n	80009f8 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80009ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f0:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80009f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80009f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fa:	685a      	ldr	r2, [r3, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d203      	bcs.n	8000a0a <pvPortMalloc+0x86>
 8000a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1f1      	bne.n	80009ee <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8000a0a:	4b35      	ldr	r3, [pc, #212]	; (8000ae0 <pvPortMalloc+0x15c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d04e      	beq.n	8000ab2 <pvPortMalloc+0x12e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000a14:	6a3b      	ldr	r3, [r7, #32]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2208      	movs	r2, #8
 8000a1a:	4413      	add	r3, r2
 8000a1c:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	6a3b      	ldr	r3, [r7, #32]
 8000a24:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a28:	685a      	ldr	r2, [r3, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	1ad2      	subs	r2, r2, r3
 8000a2e:	2308      	movs	r3, #8
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d91e      	bls.n	8000a74 <pvPortMalloc+0xf0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	f003 0307 	and.w	r3, r3, #7
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d009      	beq.n	8000a5c <pvPortMalloc+0xd8>
 8000a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a4c:	f383 8811 	msr	BASEPRI, r3
 8000a50:	f3bf 8f6f 	isb	sy
 8000a54:	f3bf 8f4f 	dsb	sy
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	e7fe      	b.n	8000a5a <pvPortMalloc+0xd6>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5e:	685a      	ldr	r2, [r3, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	1ad2      	subs	r2, r2, r3
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8000a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000a6e:	6978      	ldr	r0, [r7, #20]
 8000a70:	f000 f8f2 	bl	8000c58 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <pvPortMalloc+0x160>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	4a19      	ldr	r2, [pc, #100]	; (8000ae4 <pvPortMalloc+0x160>)
 8000a80:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <pvPortMalloc+0x160>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4b19      	ldr	r3, [pc, #100]	; (8000aec <pvPortMalloc+0x168>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d203      	bcs.n	8000a96 <pvPortMalloc+0x112>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <pvPortMalloc+0x160>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a16      	ldr	r2, [pc, #88]	; (8000aec <pvPortMalloc+0x168>)
 8000a94:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8000a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <pvPortMalloc+0x16c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	3301      	adds	r3, #1
 8000aae:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <pvPortMalloc+0x16c>)
 8000ab0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8000ab2:	f000 fe49 	bl	8001748 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	f003 0307 	and.w	r3, r3, #7
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d009      	beq.n	8000ad4 <pvPortMalloc+0x150>
 8000ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ac4:	f383 8811 	msr	BASEPRI, r3
 8000ac8:	f3bf 8f6f 	isb	sy
 8000acc:	f3bf 8f4f 	dsb	sy
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	e7fe      	b.n	8000ad2 <pvPortMalloc+0x14e>
    return pvReturn;
 8000ad4:	69fb      	ldr	r3, [r7, #28]
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3728      	adds	r7, #40	; 0x28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20012c48 	.word	0x20012c48
 8000ae4:	20012c4c 	.word	0x20012c4c
 8000ae8:	20012c40 	.word	0x20012c40
 8000aec:	20012c50 	.word	0x20012c50
 8000af0:	20012c54 	.word	0x20012c54

08000af4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d043      	beq.n	8000b8e <vPortFree+0x9a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8000b06:	2308      	movs	r3, #8
 8000b08:	425b      	negs	r3, r3
 8000b0a:	697a      	ldr	r2, [r7, #20]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	db09      	blt.n	8000b30 <vPortFree+0x3c>
 8000b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b20:	f383 8811 	msr	BASEPRI, r3
 8000b24:	f3bf 8f6f 	isb	sy
 8000b28:	f3bf 8f4f 	dsb	sy
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	e7fe      	b.n	8000b2e <vPortFree+0x3a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d009      	beq.n	8000b4c <vPortFree+0x58>
 8000b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b3c:	f383 8811 	msr	BASEPRI, r3
 8000b40:	f3bf 8f6f 	isb	sy
 8000b44:	f3bf 8f4f 	dsb	sy
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	e7fe      	b.n	8000b4a <vPortFree+0x56>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	da1c      	bge.n	8000b8e <vPortFree+0x9a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d118      	bne.n	8000b8e <vPortFree+0x9a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8000b68:	f000 fde0 	bl	800172c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	685a      	ldr	r2, [r3, #4]
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <vPortFree+0xa4>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4413      	add	r3, r2
 8000b76:	4a08      	ldr	r2, [pc, #32]	; (8000b98 <vPortFree+0xa4>)
 8000b78:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000b7a:	6938      	ldr	r0, [r7, #16]
 8000b7c:	f000 f86c 	bl	8000c58 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <vPortFree+0xa8>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	3301      	adds	r3, #1
 8000b86:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <vPortFree+0xa8>)
 8000b88:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8000b8a:	f000 fddd 	bl	8001748 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8000b8e:	bf00      	nop
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20012c4c 	.word	0x20012c4c
 8000b9c:	20012c58 	.word	0x20012c58

08000ba0 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000ba6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000baa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8000bac:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <prvHeapInit+0xa4>)
 8000bae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d00c      	beq.n	8000bd4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	3307      	adds	r3, #7
 8000bbe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f023 0307 	bic.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8000bc8:	68ba      	ldr	r2, [r7, #8]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	4a1d      	ldr	r2, [pc, #116]	; (8000c44 <prvHeapInit+0xa4>)
 8000bd0:	4413      	add	r3, r2
 8000bd2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000bd8:	4a1b      	ldr	r2, [pc, #108]	; (8000c48 <prvHeapInit+0xa8>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8000bde:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <prvHeapInit+0xa8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	4413      	add	r3, r2
 8000bea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8000bec:	2208      	movs	r2, #8
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	1a9b      	subs	r3, r3, r2
 8000bf2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f023 0307 	bic.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4a13      	ldr	r2, [pc, #76]	; (8000c4c <prvHeapInit+0xac>)
 8000c00:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <prvHeapInit+0xac>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <prvHeapInit+0xac>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	68fa      	ldr	r2, [r7, #12]
 8000c1a:	1ad2      	subs	r2, r2, r3
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <prvHeapInit+0xac>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <prvHeapInit+0xb0>)
 8000c2e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	4a07      	ldr	r2, [pc, #28]	; (8000c54 <prvHeapInit+0xb4>)
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	20000040 	.word	0x20000040
 8000c48:	20012c40 	.word	0x20012c40
 8000c4c:	20012c48 	.word	0x20012c48
 8000c50:	20012c50 	.word	0x20012c50
 8000c54:	20012c4c 	.word	0x20012c4c

08000c58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000c60:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <prvInsertBlockIntoFreeList+0xac>)
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	e002      	b.n	8000c6c <prvInsertBlockIntoFreeList+0x14>
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d3f7      	bcc.n	8000c66 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	441a      	add	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d108      	bne.n	8000c9a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	685a      	ldr	r2, [r3, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	441a      	add	r2, r3
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	441a      	add	r2, r3
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d118      	bne.n	8000ce0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <prvInsertBlockIntoFreeList+0xb0>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d00d      	beq.n	8000cd6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	441a      	add	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	e008      	b.n	8000ce8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <prvInsertBlockIntoFreeList+0xb0>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	e003      	b.n	8000ce8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8000ce8:	68fa      	ldr	r2, [r7, #12]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d002      	beq.n	8000cf6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000cf6:	bf00      	nop
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20012c40 	.word	0x20012c40
 8000d08:	20012c48 	.word	0x20012c48

08000d0c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000d16:	2301      	movs	r3, #1
 8000d18:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d109      	bne.n	8000d38 <xQueueGenericReset+0x2c>
 8000d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d28:	f383 8811 	msr	BASEPRI, r3
 8000d2c:	f3bf 8f6f 	isb	sy
 8000d30:	f3bf 8f4f 	dsb	sy
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	e7fe      	b.n	8000d36 <xQueueGenericReset+0x2a>

    if( ( pxQueue != NULL ) &&
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d05a      	beq.n	8000df4 <xQueueGenericReset+0xe8>
        ( pxQueue->uxLength >= 1U ) &&
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d056      	beq.n	8000df4 <xQueueGenericReset+0xe8>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        ( pxQueue->uxLength >= 1U ) &&
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d34c      	bcc.n	8000df4 <xQueueGenericReset+0xe8>
    {
        taskENTER_CRITICAL();
 8000d5a:	f7ff fcf9 	bl	8000750 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d66:	6939      	ldr	r1, [r7, #16]
 8000d68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000d6a:	fb01 f303 	mul.w	r3, r1, r3
 8000d6e:	441a      	add	r2, r3
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	2200      	movs	r2, #0
 8000d78:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	6939      	ldr	r1, [r7, #16]
 8000d8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000d90:	fb01 f303 	mul.w	r3, r1, r3
 8000d94:	441a      	add	r2, r3
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	22ff      	movs	r2, #255	; 0xff
 8000d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	22ff      	movs	r2, #255	; 0xff
 8000da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d114      	bne.n	8000dda <xQueueGenericReset+0xce>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	691b      	ldr	r3, [r3, #16]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d01a      	beq.n	8000dee <xQueueGenericReset+0xe2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	3310      	adds	r3, #16
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 ffd1 	bl	8001d64 <xTaskRemoveFromEventList>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d012      	beq.n	8000dee <xQueueGenericReset+0xe2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <xQueueGenericReset+0x110>)
 8000dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	f3bf 8f4f 	dsb	sy
 8000dd4:	f3bf 8f6f 	isb	sy
 8000dd8:	e009      	b.n	8000dee <xQueueGenericReset+0xe2>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	3310      	adds	r3, #16
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fafe 	bl	80003e0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	3324      	adds	r3, #36	; 0x24
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff faf9 	bl	80003e0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000dee:	f7ff fcdd 	bl	80007ac <vPortExitCritical>
 8000df2:	e001      	b.n	8000df8 <xQueueGenericReset+0xec>
    }
    else
    {
        xReturn = pdFAIL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d109      	bne.n	8000e12 <xQueueGenericReset+0x106>
 8000dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e02:	f383 8811 	msr	BASEPRI, r3
 8000e06:	f3bf 8f6f 	isb	sy
 8000e0a:	f3bf 8f4f 	dsb	sy
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	e7fe      	b.n	8000e10 <xQueueGenericReset+0x104>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000e12:	697b      	ldr	r3, [r7, #20]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	e000ed04 	.word	0xe000ed04

08000e20 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af02      	add	r7, sp, #8
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d02b      	beq.n	8000e90 <xQueueGenericCreate+0x70>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	fbb2 f2f3 	udiv	r2, r2, r3
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d323      	bcc.n	8000e90 <xQueueGenericCreate+0x70>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000e50:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000e54:	d81c      	bhi.n	8000e90 <xQueueGenericCreate+0x70>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	68ba      	ldr	r2, [r7, #8]
 8000e5a:	fb02 f303 	mul.w	r3, r2, r3
 8000e5e:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	3350      	adds	r3, #80	; 0x50
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fd8d 	bl	8000984 <pvPortMalloc>
 8000e6a:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d01b      	beq.n	8000eaa <xQueueGenericCreate+0x8a>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3350      	adds	r3, #80	; 0x50
 8000e7a:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000e7c:	79fa      	ldrb	r2, [r7, #7]
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	4613      	mov	r3, r2
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	68b9      	ldr	r1, [r7, #8]
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	f000 f813 	bl	8000eb4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000e8e:	e00c      	b.n	8000eaa <xQueueGenericCreate+0x8a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d109      	bne.n	8000eaa <xQueueGenericCreate+0x8a>
 8000e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e9a:	f383 8811 	msr	BASEPRI, r3
 8000e9e:	f3bf 8f6f 	isb	sy
 8000ea2:	f3bf 8f4f 	dsb	sy
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	e7fe      	b.n	8000ea8 <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000eaa:	69fb      	ldr	r3, [r7, #28]
    }
 8000eac:	4618      	mov	r0, r3
 8000eae:	3720      	adds	r7, #32
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
 8000ec0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d103      	bne.n	8000ed0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	e002      	b.n	8000ed6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	69b8      	ldr	r0, [r7, #24]
 8000ee6:	f7ff ff11 	bl	8000d0c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	78fa      	ldrb	r2, [r7, #3]
 8000eee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8000ef2:	78fb      	ldrb	r3, [r7, #3]
 8000ef4:	68ba      	ldr	r2, [r7, #8]
 8000ef6:	68f9      	ldr	r1, [r7, #12]
 8000ef8:	2073      	movs	r0, #115	; 0x73
 8000efa:	f002 fb47 	bl	800358c <SEGGER_SYSVIEW_RecordU32x3>
}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b08f      	sub	sp, #60	; 0x3c
 8000f0c:	af02      	add	r7, sp, #8
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d109      	bne.n	8000f36 <xQueueReceive+0x2e>
 8000f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f26:	f383 8811 	msr	BASEPRI, r3
 8000f2a:	f3bf 8f6f 	isb	sy
 8000f2e:	f3bf 8f4f 	dsb	sy
 8000f32:	623b      	str	r3, [r7, #32]
 8000f34:	e7fe      	b.n	8000f34 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d103      	bne.n	8000f44 <xQueueReceive+0x3c>
 8000f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <xQueueReceive+0x40>
 8000f44:	2301      	movs	r3, #1
 8000f46:	e000      	b.n	8000f4a <xQueueReceive+0x42>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d109      	bne.n	8000f62 <xQueueReceive+0x5a>
 8000f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f52:	f383 8811 	msr	BASEPRI, r3
 8000f56:	f3bf 8f6f 	isb	sy
 8000f5a:	f3bf 8f4f 	dsb	sy
 8000f5e:	61fb      	str	r3, [r7, #28]
 8000f60:	e7fe      	b.n	8000f60 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000f62:	f001 f90d 	bl	8002180 <xTaskGetSchedulerState>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d102      	bne.n	8000f72 <xQueueReceive+0x6a>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <xQueueReceive+0x6e>
 8000f72:	2301      	movs	r3, #1
 8000f74:	e000      	b.n	8000f78 <xQueueReceive+0x70>
 8000f76:	2300      	movs	r3, #0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d109      	bne.n	8000f90 <xQueueReceive+0x88>
 8000f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f80:	f383 8811 	msr	BASEPRI, r3
 8000f84:	f3bf 8f6f 	isb	sy
 8000f88:	f3bf 8f4f 	dsb	sy
 8000f8c:	61bb      	str	r3, [r7, #24]
 8000f8e:	e7fe      	b.n	8000f8e <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000f90:	f7ff fbde 	bl	8000750 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d031      	beq.n	8001004 <xQueueReceive+0xfc>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000fa0:	68b9      	ldr	r1, [r7, #8]
 8000fa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000fa4:	f000 f8c4 	bl	8001130 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000faa:	4618      	mov	r0, r3
 8000fac:	f002 ffa4 	bl	8003ef8 <SEGGER_SYSVIEW_ShrinkId>
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f002 ffa0 	bl	8003ef8 <SEGGER_SYSVIEW_ShrinkId>
 8000fb8:	4601      	mov	r1, r0
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	460a      	mov	r2, r1
 8000fc4:	4621      	mov	r1, r4
 8000fc6:	205c      	movs	r0, #92	; 0x5c
 8000fc8:	f002 fb56 	bl	8003678 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fce:	1e5a      	subs	r2, r3, #1
 8000fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd2:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d00f      	beq.n	8000ffc <xQueueReceive+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fde:	3310      	adds	r3, #16
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 febf 	bl	8001d64 <xTaskRemoveFromEventList>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d007      	beq.n	8000ffc <xQueueReceive+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000fec:	4b4f      	ldr	r3, [pc, #316]	; (800112c <xQueueReceive+0x224>)
 8000fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	f3bf 8f4f 	dsb	sy
 8000ff8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000ffc:	f7ff fbd6 	bl	80007ac <vPortExitCritical>
                return pdPASS;
 8001000:	2301      	movs	r3, #1
 8001002:	e08e      	b.n	8001122 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d115      	bne.n	8001036 <xQueueReceive+0x12e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800100a:	f7ff fbcf 	bl	80007ac <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800100e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001010:	4618      	mov	r0, r3
 8001012:	f002 ff71 	bl	8003ef8 <SEGGER_SYSVIEW_ShrinkId>
 8001016:	4604      	mov	r4, r0
 8001018:	2000      	movs	r0, #0
 800101a:	f002 ff6d 	bl	8003ef8 <SEGGER_SYSVIEW_ShrinkId>
 800101e:	4601      	mov	r1, r0
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	2301      	movs	r3, #1
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	4613      	mov	r3, r2
 8001028:	460a      	mov	r2, r1
 800102a:	4621      	mov	r1, r4
 800102c:	205c      	movs	r0, #92	; 0x5c
 800102e:	f002 fb23 	bl	8003678 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8001032:	2300      	movs	r3, #0
 8001034:	e075      	b.n	8001122 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001038:	2b00      	cmp	r3, #0
 800103a:	d106      	bne.n	800104a <xQueueReceive+0x142>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800103c:	f107 0310 	add.w	r3, r7, #16
 8001040:	4618      	mov	r0, r3
 8001042:	f000 ff67 	bl	8001f14 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001046:	2301      	movs	r3, #1
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800104a:	f7ff fbaf 	bl	80007ac <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800104e:	f000 fb6d 	bl	800172c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001052:	f7ff fb7d 	bl	8000750 <vPortEnterCritical>
 8001056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001058:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800105c:	b25b      	sxtb	r3, r3
 800105e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001062:	d103      	bne.n	800106c <xQueueReceive+0x164>
 8001064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800106c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800106e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001072:	b25b      	sxtb	r3, r3
 8001074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001078:	d103      	bne.n	8001082 <xQueueReceive+0x17a>
 800107a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001082:	f7ff fb93 	bl	80007ac <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001086:	1d3a      	adds	r2, r7, #4
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	4611      	mov	r1, r2
 800108e:	4618      	mov	r0, r3
 8001090:	f000 ff56 	bl	8001f40 <xTaskCheckForTimeOut>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d124      	bne.n	80010e4 <xQueueReceive+0x1dc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800109a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800109c:	f000 f8c0 	bl	8001220 <prvIsQueueEmpty>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d018      	beq.n	80010d8 <xQueueReceive+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80010a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a8:	3324      	adds	r3, #36	; 0x24
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	4611      	mov	r1, r2
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 fdec 	bl	8001c8c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80010b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010b6:	f000 f861 	bl	800117c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80010ba:	f000 fb45 	bl	8001748 <xTaskResumeAll>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f47f af65 	bne.w	8000f90 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 80010c6:	4b19      	ldr	r3, [pc, #100]	; (800112c <xQueueReceive+0x224>)
 80010c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	f3bf 8f4f 	dsb	sy
 80010d2:	f3bf 8f6f 	isb	sy
 80010d6:	e75b      	b.n	8000f90 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80010d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010da:	f000 f84f 	bl	800117c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80010de:	f000 fb33 	bl	8001748 <xTaskResumeAll>
 80010e2:	e755      	b.n	8000f90 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80010e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010e6:	f000 f849 	bl	800117c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80010ea:	f000 fb2d 	bl	8001748 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80010ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010f0:	f000 f896 	bl	8001220 <prvIsQueueEmpty>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f43f af4a 	beq.w	8000f90 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80010fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010fe:	4618      	mov	r0, r3
 8001100:	f002 fefa 	bl	8003ef8 <SEGGER_SYSVIEW_ShrinkId>
 8001104:	4604      	mov	r4, r0
 8001106:	2000      	movs	r0, #0
 8001108:	f002 fef6 	bl	8003ef8 <SEGGER_SYSVIEW_ShrinkId>
 800110c:	4601      	mov	r1, r0
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	2301      	movs	r3, #1
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	4613      	mov	r3, r2
 8001116:	460a      	mov	r2, r1
 8001118:	4621      	mov	r1, r4
 800111a:	205c      	movs	r0, #92	; 0x5c
 800111c:	f002 faac 	bl	8003678 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8001120:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001122:	4618      	mov	r0, r3
 8001124:	3734      	adds	r7, #52	; 0x34
 8001126:	46bd      	mov	sp, r7
 8001128:	bd90      	pop	{r4, r7, pc}
 800112a:	bf00      	nop
 800112c:	e000ed04 	.word	0xe000ed04

08001130 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	2b00      	cmp	r3, #0
 8001140:	d018      	beq.n	8001174 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68da      	ldr	r2, [r3, #12]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	441a      	add	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68da      	ldr	r2, [r3, #12]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	429a      	cmp	r2, r3
 800115a:	d303      	bcc.n	8001164 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68d9      	ldr	r1, [r3, #12]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	461a      	mov	r2, r3
 800116e:	6838      	ldr	r0, [r7, #0]
 8001170:	f003 fba7 	bl	80048c2 <memcpy>
    }
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001184:	f7ff fae4 	bl	8000750 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800118e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001190:	e011      	b.n	80011b6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001196:	2b00      	cmp	r3, #0
 8001198:	d012      	beq.n	80011c0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3324      	adds	r3, #36	; 0x24
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 fde0 	bl	8001d64 <xTaskRemoveFromEventList>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80011aa:	f000 ff2d 	bl	8002008 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80011b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	dce9      	bgt.n	8001192 <prvUnlockQueue+0x16>
 80011be:	e000      	b.n	80011c2 <prvUnlockQueue+0x46>
                    break;
 80011c0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	22ff      	movs	r2, #255	; 0xff
 80011c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80011ca:	f7ff faef 	bl	80007ac <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80011ce:	f7ff fabf 	bl	8000750 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011d8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80011da:	e011      	b.n	8001200 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d012      	beq.n	800120a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3310      	adds	r3, #16
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 fdbb 	bl	8001d64 <xTaskRemoveFromEventList>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80011f4:	f000 ff08 	bl	8002008 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80011f8:	7bbb      	ldrb	r3, [r7, #14]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001200:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001204:	2b00      	cmp	r3, #0
 8001206:	dce9      	bgt.n	80011dc <prvUnlockQueue+0x60>
 8001208:	e000      	b.n	800120c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800120a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	22ff      	movs	r2, #255	; 0xff
 8001210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001214:	f7ff faca 	bl	80007ac <vPortExitCritical>
}
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001228:	f7ff fa92 	bl	8000750 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001230:	2b00      	cmp	r3, #0
 8001232:	d102      	bne.n	800123a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001234:	2301      	movs	r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	e001      	b.n	800123e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800123e:	f7ff fab5 	bl	80007ac <vPortExitCritical>

    return xReturn;
 8001242:	68fb      	ldr	r3, [r7, #12]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d109      	bne.n	8001274 <vQueueAddToRegistry+0x28>
 8001260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001264:	f383 8811 	msr	BASEPRI, r3
 8001268:	f3bf 8f6f 	isb	sy
 800126c:	f3bf 8f4f 	dsb	sy
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	e7fe      	b.n	8001272 <vQueueAddToRegistry+0x26>

        if( pcQueueName != NULL )
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d024      	beq.n	80012c4 <vQueueAddToRegistry+0x78>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	e01e      	b.n	80012be <vQueueAddToRegistry+0x72>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001280:	4a1c      	ldr	r2, [pc, #112]	; (80012f4 <vQueueAddToRegistry+0xa8>)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	4413      	add	r3, r2
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	d105      	bne.n	800129c <vQueueAddToRegistry+0x50>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	4a17      	ldr	r2, [pc, #92]	; (80012f4 <vQueueAddToRegistry+0xa8>)
 8001296:	4413      	add	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
                    break;
 800129a:	e013      	b.n	80012c4 <vQueueAddToRegistry+0x78>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10a      	bne.n	80012b8 <vQueueAddToRegistry+0x6c>
 80012a2:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <vQueueAddToRegistry+0xa8>)
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d104      	bne.n	80012b8 <vQueueAddToRegistry+0x6c>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	4a10      	ldr	r2, [pc, #64]	; (80012f4 <vQueueAddToRegistry+0xa8>)
 80012b4:	4413      	add	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	3301      	adds	r3, #1
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	2b07      	cmp	r3, #7
 80012c2:	d9dd      	bls.n	8001280 <vQueueAddToRegistry+0x34>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00f      	beq.n	80012ea <vQueueAddToRegistry+0x9e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4618      	mov	r0, r3
 80012da:	f002 fe0d 	bl	8003ef8 <SEGGER_SYSVIEW_ShrinkId>
 80012de:	4601      	mov	r1, r0
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	2071      	movs	r0, #113	; 0x71
 80012e6:	f002 f8f7 	bl	80034d8 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80012ea:	bf00      	nop
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20015378 	.word	0x20015378

080012f8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001308:	f7ff fa22 	bl	8000750 <vPortEnterCritical>
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001312:	b25b      	sxtb	r3, r3
 8001314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001318:	d103      	bne.n	8001322 <vQueueWaitForMessageRestricted+0x2a>
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001328:	b25b      	sxtb	r3, r3
 800132a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800132e:	d103      	bne.n	8001338 <vQueueWaitForMessageRestricted+0x40>
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001338:	f7ff fa38 	bl	80007ac <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001340:	2b00      	cmp	r3, #0
 8001342:	d106      	bne.n	8001352 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	3324      	adds	r3, #36	; 0x24
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	68b9      	ldr	r1, [r7, #8]
 800134c:	4618      	mov	r0, r3
 800134e:	f000 fcc1 	bl	8001cd4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001352:	6978      	ldr	r0, [r7, #20]
 8001354:	f7ff ff12 	bl	800117c <prvUnlockQueue>
    }
 8001358:	bf00      	nop
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001360:	b580      	push	{r7, lr}
 8001362:	b08c      	sub	sp, #48	; 0x30
 8001364:	af04      	add	r7, sp, #16
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	4613      	mov	r3, r2
 800136e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fb05 	bl	8000984 <pvPortMalloc>
 800137a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d013      	beq.n	80013aa <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001382:	2058      	movs	r0, #88	; 0x58
 8001384:	f7ff fafe 	bl	8000984 <pvPortMalloc>
 8001388:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d008      	beq.n	80013a2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001390:	2258      	movs	r2, #88	; 0x58
 8001392:	2100      	movs	r1, #0
 8001394:	69f8      	ldr	r0, [r7, #28]
 8001396:	f003 fa9f 	bl	80048d8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	631a      	str	r2, [r3, #48]	; 0x30
 80013a0:	e005      	b.n	80013ae <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80013a2:	6978      	ldr	r0, [r7, #20]
 80013a4:	f7ff fba6 	bl	8000af4 <vPortFree>
 80013a8:	e001      	b.n	80013ae <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d013      	beq.n	80013dc <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80013b4:	88fa      	ldrh	r2, [r7, #6]
 80013b6:	2300      	movs	r3, #0
 80013b8:	9303      	str	r3, [sp, #12]
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	9302      	str	r3, [sp, #8]
 80013be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c0:	9301      	str	r3, [sp, #4]
 80013c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f000 f80e 	bl	80013ec <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80013d0:	69f8      	ldr	r0, [r7, #28]
 80013d2:	f000 f897 	bl	8001504 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80013d6:	2301      	movs	r3, #1
 80013d8:	61bb      	str	r3, [r7, #24]
 80013da:	e002      	b.n	80013e2 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80013dc:	f04f 33ff 	mov.w	r3, #4294967295
 80013e0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80013e2:	69bb      	ldr	r3, [r7, #24]
    }
 80013e4:	4618      	mov	r0, r3
 80013e6:	3720      	adds	r7, #32
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
 80013f8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80013fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	461a      	mov	r2, r3
 8001404:	21a5      	movs	r1, #165	; 0xa5
 8001406:	f003 fa67 	bl	80048d8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800140a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800140c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001414:	3b01      	subs	r3, #1
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	f023 0307 	bic.w	r3, r3, #7
 8001422:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	2b00      	cmp	r3, #0
 800142c:	d009      	beq.n	8001442 <prvInitialiseNewTask+0x56>
 800142e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001432:	f383 8811 	msr	BASEPRI, r3
 8001436:	f3bf 8f6f 	isb	sy
 800143a:	f3bf 8f4f 	dsb	sy
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	e7fe      	b.n	8001440 <prvInitialiseNewTask+0x54>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d01e      	beq.n	8001486 <prvInitialiseNewTask+0x9a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
 800144c:	e012      	b.n	8001474 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	4413      	add	r3, r2
 8001454:	7819      	ldrb	r1, [r3, #0]
 8001456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	4413      	add	r3, r2
 800145c:	3334      	adds	r3, #52	; 0x34
 800145e:	460a      	mov	r2, r1
 8001460:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	4413      	add	r3, r2
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d006      	beq.n	800147c <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3301      	adds	r3, #1
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	2b09      	cmp	r3, #9
 8001478:	d9e9      	bls.n	800144e <prvInitialiseNewTask+0x62>
 800147a:	e000      	b.n	800147e <prvInitialiseNewTask+0x92>
            {
                break;
 800147c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800147e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001480:	2200      	movs	r2, #0
 8001482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001488:	2b04      	cmp	r3, #4
 800148a:	d909      	bls.n	80014a0 <prvInitialiseNewTask+0xb4>
 800148c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001490:	f383 8811 	msr	BASEPRI, r3
 8001494:	f3bf 8f6f 	isb	sy
 8001498:	f3bf 8f4f 	dsb	sy
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	e7fe      	b.n	800149e <prvInitialiseNewTask+0xb2>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80014a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	d901      	bls.n	80014aa <prvInitialiseNewTask+0xbe>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80014a6:	2304      	movs	r3, #4
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80014aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014ae:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80014b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014b4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80014b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014b8:	3304      	adds	r3, #4
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7fe ffb0 	bl	8000420 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80014c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014c2:	3318      	adds	r3, #24
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7fe ffab 	bl	8000420 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80014ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014ce:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80014d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d2:	f1c3 0205 	rsb	r2, r3, #5
 80014d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014d8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80014da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014de:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	68f9      	ldr	r1, [r7, #12]
 80014e4:	69b8      	ldr	r0, [r7, #24]
 80014e6:	f7ff f80b 	bl	8000500 <pxPortInitialiseStack>
 80014ea:	4602      	mov	r2, r0
 80014ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ee:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80014f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d002      	beq.n	80014fc <prvInitialiseNewTask+0x110>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80014f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014fa:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80014fc:	bf00      	nop
 80014fe:	3720      	adds	r7, #32
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001504:	b5b0      	push	{r4, r5, r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af02      	add	r7, sp, #8
 800150a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800150c:	f7ff f920 	bl	8000750 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001510:	4b4f      	ldr	r3, [pc, #316]	; (8001650 <prvAddNewTaskToReadyList+0x14c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	3301      	adds	r3, #1
 8001516:	4a4e      	ldr	r2, [pc, #312]	; (8001650 <prvAddNewTaskToReadyList+0x14c>)
 8001518:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800151a:	4b4e      	ldr	r3, [pc, #312]	; (8001654 <prvAddNewTaskToReadyList+0x150>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d109      	bne.n	8001536 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001522:	4a4c      	ldr	r2, [pc, #304]	; (8001654 <prvAddNewTaskToReadyList+0x150>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001528:	4b49      	ldr	r3, [pc, #292]	; (8001650 <prvAddNewTaskToReadyList+0x14c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d110      	bne.n	8001552 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001530:	f000 fd8e 	bl	8002050 <prvInitialiseTaskLists>
 8001534:	e00d      	b.n	8001552 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001536:	4b48      	ldr	r3, [pc, #288]	; (8001658 <prvAddNewTaskToReadyList+0x154>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d109      	bne.n	8001552 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800153e:	4b45      	ldr	r3, [pc, #276]	; (8001654 <prvAddNewTaskToReadyList+0x150>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001548:	429a      	cmp	r2, r3
 800154a:	d802      	bhi.n	8001552 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800154c:	4a41      	ldr	r2, [pc, #260]	; (8001654 <prvAddNewTaskToReadyList+0x150>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001552:	4b42      	ldr	r3, [pc, #264]	; (800165c <prvAddNewTaskToReadyList+0x158>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	3301      	adds	r3, #1
 8001558:	4a40      	ldr	r2, [pc, #256]	; (800165c <prvAddNewTaskToReadyList+0x158>)
 800155a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800155c:	4b3f      	ldr	r3, [pc, #252]	; (800165c <prvAddNewTaskToReadyList+0x158>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d016      	beq.n	8001598 <prvAddNewTaskToReadyList+0x94>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4618      	mov	r0, r3
 800156e:	f002 fbf7 	bl	8003d60 <SEGGER_SYSVIEW_OnTaskCreate>
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	461d      	mov	r5, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	461c      	mov	r4, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	1ae3      	subs	r3, r4, r3
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	462b      	mov	r3, r5
 8001594:	f002 fe9c 	bl	80042d0 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4618      	mov	r0, r3
 800159c:	f002 fc68 	bl	8003e70 <SEGGER_SYSVIEW_OnTaskStartReady>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a4:	2201      	movs	r2, #1
 80015a6:	409a      	lsls	r2, r3
 80015a8:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <prvAddNewTaskToReadyList+0x15c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	4a2c      	ldr	r2, [pc, #176]	; (8001660 <prvAddNewTaskToReadyList+0x15c>)
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015b6:	492b      	ldr	r1, [pc, #172]	; (8001664 <prvAddNewTaskToReadyList+0x160>)
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	3304      	adds	r3, #4
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	3204      	adds	r2, #4
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	1d1a      	adds	r2, r3, #4
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4a1b      	ldr	r2, [pc, #108]	; (8001664 <prvAddNewTaskToReadyList+0x160>)
 80015f6:	441a      	add	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	615a      	str	r2, [r3, #20]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001600:	4918      	ldr	r1, [pc, #96]	; (8001664 <prvAddNewTaskToReadyList+0x160>)
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	440b      	add	r3, r1
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	1c59      	adds	r1, r3, #1
 8001610:	4814      	ldr	r0, [pc, #80]	; (8001664 <prvAddNewTaskToReadyList+0x160>)
 8001612:	4613      	mov	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4403      	add	r3, r0
 800161c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800161e:	f7ff f8c5 	bl	80007ac <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <prvAddNewTaskToReadyList+0x154>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00e      	beq.n	8001648 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <prvAddNewTaskToReadyList+0x150>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	429a      	cmp	r2, r3
 8001636:	d207      	bcs.n	8001648 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <prvAddNewTaskToReadyList+0x164>)
 800163a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	f3bf 8f4f 	dsb	sy
 8001644:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001648:	bf00      	nop
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bdb0      	pop	{r4, r5, r7, pc}
 8001650:	20012d34 	.word	0x20012d34
 8001654:	20012c5c 	.word	0x20012c5c
 8001658:	20012d40 	.word	0x20012d40
 800165c:	20012d50 	.word	0x20012d50
 8001660:	20012d3c 	.word	0x20012d3c
 8001664:	20012c60 	.word	0x20012c60
 8001668:	e000ed04 	.word	0xe000ed04

0800166c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8001672:	4b26      	ldr	r3, [pc, #152]	; (800170c <vTaskStartScheduler+0xa0>)
 8001674:	9301      	str	r3, [sp, #4]
 8001676:	2300      	movs	r3, #0
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	2300      	movs	r3, #0
 800167c:	2282      	movs	r2, #130	; 0x82
 800167e:	4924      	ldr	r1, [pc, #144]	; (8001710 <vTaskStartScheduler+0xa4>)
 8001680:	4824      	ldr	r0, [pc, #144]	; (8001714 <vTaskStartScheduler+0xa8>)
 8001682:	f7ff fe6d 	bl	8001360 <xTaskCreate>
 8001686:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d102      	bne.n	8001694 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800168e:	f000 ffcd 	bl	800262c <xTimerCreateTimerTask>
 8001692:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d123      	bne.n	80016e2 <vTaskStartScheduler+0x76>
 800169a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800169e:	f383 8811 	msr	BASEPRI, r3
 80016a2:	f3bf 8f6f 	isb	sy
 80016a6:	f3bf 8f4f 	dsb	sy
 80016aa:	60bb      	str	r3, [r7, #8]
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80016ac:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <vTaskStartScheduler+0xac>)
 80016ae:	f04f 32ff 	mov.w	r2, #4294967295
 80016b2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <vTaskStartScheduler+0xb0>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80016ba:	4b19      	ldr	r3, [pc, #100]	; (8001720 <vTaskStartScheduler+0xb4>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80016c0:	4b18      	ldr	r3, [pc, #96]	; (8001724 <vTaskStartScheduler+0xb8>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <vTaskStartScheduler+0xa0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d102      	bne.n	80016d2 <vTaskStartScheduler+0x66>
 80016cc:	f002 fb2c 	bl	8003d28 <SEGGER_SYSVIEW_OnIdle>
 80016d0:	e004      	b.n	80016dc <vTaskStartScheduler+0x70>
 80016d2:	4b14      	ldr	r3, [pc, #80]	; (8001724 <vTaskStartScheduler+0xb8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f002 fb86 	bl	8003de8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80016dc:	f7fe ff9a 	bl	8000614 <xPortStartScheduler>
 80016e0:	e00d      	b.n	80016fe <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e8:	d109      	bne.n	80016fe <vTaskStartScheduler+0x92>
 80016ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ee:	f383 8811 	msr	BASEPRI, r3
 80016f2:	f3bf 8f6f 	isb	sy
 80016f6:	f3bf 8f4f 	dsb	sy
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	e7fe      	b.n	80016fc <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80016fe:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <vTaskStartScheduler+0xbc>)
 8001700:	681b      	ldr	r3, [r3, #0]
}
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20012d58 	.word	0x20012d58
 8001710:	08004900 	.word	0x08004900
 8001714:	08002021 	.word	0x08002021
 8001718:	20012d54 	.word	0x20012d54
 800171c:	20012d40 	.word	0x20012d40
 8001720:	20012d38 	.word	0x20012d38
 8001724:	20012c5c 	.word	0x20012c5c
 8001728:	20000004 	.word	0x20000004

0800172c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <vTaskSuspendAll+0x18>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	3301      	adds	r3, #1
 8001736:	4a03      	ldr	r2, [pc, #12]	; (8001744 <vTaskSuspendAll+0x18>)
 8001738:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	20012d5c 	.word	0x20012d5c

08001748 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001756:	4b72      	ldr	r3, [pc, #456]	; (8001920 <xTaskResumeAll+0x1d8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d109      	bne.n	8001772 <xTaskResumeAll+0x2a>
 800175e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001762:	f383 8811 	msr	BASEPRI, r3
 8001766:	f3bf 8f6f 	isb	sy
 800176a:	f3bf 8f4f 	dsb	sy
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	e7fe      	b.n	8001770 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001772:	f7fe ffed 	bl	8000750 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001776:	4b6a      	ldr	r3, [pc, #424]	; (8001920 <xTaskResumeAll+0x1d8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	3b01      	subs	r3, #1
 800177c:	4a68      	ldr	r2, [pc, #416]	; (8001920 <xTaskResumeAll+0x1d8>)
 800177e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001780:	4b67      	ldr	r3, [pc, #412]	; (8001920 <xTaskResumeAll+0x1d8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	f040 80c4 	bne.w	8001912 <xTaskResumeAll+0x1ca>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800178a:	4b66      	ldr	r3, [pc, #408]	; (8001924 <xTaskResumeAll+0x1dc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 80bf 	beq.w	8001912 <xTaskResumeAll+0x1ca>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001794:	e08e      	b.n	80018b4 <xTaskResumeAll+0x16c>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001796:	4b64      	ldr	r3, [pc, #400]	; (8001928 <xTaskResumeAll+0x1e0>)
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	69fa      	ldr	r2, [r7, #28]
 80017aa:	6a12      	ldr	r2, [r2, #32]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	69d2      	ldr	r2, [r2, #28]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	3318      	adds	r3, #24
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d103      	bne.n	80017cc <xTaskResumeAll+0x84>
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	6a1a      	ldr	r2, [r3, #32]
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	2200      	movs	r2, #0
 80017d0:	629a      	str	r2, [r3, #40]	; 0x28
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	1e5a      	subs	r2, r3, #1
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	69fa      	ldr	r2, [r7, #28]
 80017e8:	68d2      	ldr	r2, [r2, #12]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	69fa      	ldr	r2, [r7, #28]
 80017f2:	6892      	ldr	r2, [r2, #8]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3304      	adds	r3, #4
 80017fe:	429a      	cmp	r2, r3
 8001800:	d103      	bne.n	800180a <xTaskResumeAll+0xc2>
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	2200      	movs	r2, #0
 800180e:	615a      	str	r2, [r3, #20]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	1e5a      	subs	r2, r3, #1
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	4618      	mov	r0, r3
 800181e:	f002 fb27 	bl	8003e70 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001826:	2201      	movs	r2, #1
 8001828:	409a      	lsls	r2, r3
 800182a:	4b40      	ldr	r3, [pc, #256]	; (800192c <xTaskResumeAll+0x1e4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4313      	orrs	r3, r2
 8001830:	4a3e      	ldr	r2, [pc, #248]	; (800192c <xTaskResumeAll+0x1e4>)
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001838:	493d      	ldr	r1, [pc, #244]	; (8001930 <xTaskResumeAll+0x1e8>)
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	440b      	add	r3, r1
 8001844:	3304      	adds	r3, #4
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	60da      	str	r2, [r3, #12]
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	69fa      	ldr	r2, [r7, #28]
 800185e:	3204      	adds	r2, #4
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	1d1a      	adds	r2, r3, #4
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4a2e      	ldr	r2, [pc, #184]	; (8001930 <xTaskResumeAll+0x1e8>)
 8001878:	441a      	add	r2, r3
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	615a      	str	r2, [r3, #20]
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001882:	492b      	ldr	r1, [pc, #172]	; (8001930 <xTaskResumeAll+0x1e8>)
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	1c59      	adds	r1, r3, #1
 8001892:	4827      	ldr	r0, [pc, #156]	; (8001930 <xTaskResumeAll+0x1e8>)
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4403      	add	r3, r0
 800189e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018a4:	4b23      	ldr	r3, [pc, #140]	; (8001934 <xTaskResumeAll+0x1ec>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d302      	bcc.n	80018b4 <xTaskResumeAll+0x16c>
                    {
                        xYieldPending = pdTRUE;
 80018ae:	4b22      	ldr	r3, [pc, #136]	; (8001938 <xTaskResumeAll+0x1f0>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80018b4:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <xTaskResumeAll+0x1e0>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f47f af6c 	bne.w	8001796 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <xTaskResumeAll+0x180>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80018c4:	f000 fc40 	bl	8002148 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80018c8:	4b1c      	ldr	r3, [pc, #112]	; (800193c <xTaskResumeAll+0x1f4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d010      	beq.n	80018f6 <xTaskResumeAll+0x1ae>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80018d4:	f000 f858 	bl	8001988 <xTaskIncrementTick>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d002      	beq.n	80018e4 <xTaskResumeAll+0x19c>
                            {
                                xYieldPending = pdTRUE;
 80018de:	4b16      	ldr	r3, [pc, #88]	; (8001938 <xTaskResumeAll+0x1f0>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f1      	bne.n	80018d4 <xTaskResumeAll+0x18c>

                        xPendedTicks = 0;
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <xTaskResumeAll+0x1f4>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <xTaskResumeAll+0x1f0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d009      	beq.n	8001912 <xTaskResumeAll+0x1ca>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80018fe:	2301      	movs	r3, #1
 8001900:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <xTaskResumeAll+0x1f8>)
 8001904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	f3bf 8f4f 	dsb	sy
 800190e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001912:	f7fe ff4b 	bl	80007ac <vPortExitCritical>

    return xAlreadyYielded;
 8001916:	69bb      	ldr	r3, [r7, #24]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3720      	adds	r7, #32
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20012d5c 	.word	0x20012d5c
 8001924:	20012d34 	.word	0x20012d34
 8001928:	20012cf4 	.word	0x20012cf4
 800192c:	20012d3c 	.word	0x20012d3c
 8001930:	20012c60 	.word	0x20012c60
 8001934:	20012c5c 	.word	0x20012c5c
 8001938:	20012d48 	.word	0x20012d48
 800193c:	20012d44 	.word	0x20012d44
 8001940:	e000ed04 	.word	0xe000ed04

08001944 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800194a:	4b05      	ldr	r3, [pc, #20]	; (8001960 <xTaskGetTickCount+0x1c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001950:	687b      	ldr	r3, [r7, #4]
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20012d38 	.word	0x20012d38

08001964 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800196a:	f7fe ffcd 	bl	8000908 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001972:	4b04      	ldr	r3, [pc, #16]	; (8001984 <xTaskGetTickCountFromISR+0x20>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001978:	683b      	ldr	r3, [r7, #0]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20012d38 	.word	0x20012d38

08001988 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001992:	4b7f      	ldr	r3, [pc, #508]	; (8001b90 <xTaskIncrementTick+0x208>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	f040 80ef 	bne.w	8001b7a <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800199c:	4b7d      	ldr	r3, [pc, #500]	; (8001b94 <xTaskIncrementTick+0x20c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	3301      	adds	r3, #1
 80019a2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80019a4:	4a7b      	ldr	r2, [pc, #492]	; (8001b94 <xTaskIncrementTick+0x20c>)
 80019a6:	6a3b      	ldr	r3, [r7, #32]
 80019a8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80019aa:	6a3b      	ldr	r3, [r7, #32]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d11f      	bne.n	80019f0 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80019b0:	4b79      	ldr	r3, [pc, #484]	; (8001b98 <xTaskIncrementTick+0x210>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d009      	beq.n	80019ce <xTaskIncrementTick+0x46>
 80019ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019be:	f383 8811 	msr	BASEPRI, r3
 80019c2:	f3bf 8f6f 	isb	sy
 80019c6:	f3bf 8f4f 	dsb	sy
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	e7fe      	b.n	80019cc <xTaskIncrementTick+0x44>
 80019ce:	4b72      	ldr	r3, [pc, #456]	; (8001b98 <xTaskIncrementTick+0x210>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	61fb      	str	r3, [r7, #28]
 80019d4:	4b71      	ldr	r3, [pc, #452]	; (8001b9c <xTaskIncrementTick+0x214>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a6f      	ldr	r2, [pc, #444]	; (8001b98 <xTaskIncrementTick+0x210>)
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	4a6f      	ldr	r2, [pc, #444]	; (8001b9c <xTaskIncrementTick+0x214>)
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	4b6f      	ldr	r3, [pc, #444]	; (8001ba0 <xTaskIncrementTick+0x218>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	3301      	adds	r3, #1
 80019e8:	4a6d      	ldr	r2, [pc, #436]	; (8001ba0 <xTaskIncrementTick+0x218>)
 80019ea:	6013      	str	r3, [r2, #0]
 80019ec:	f000 fbac 	bl	8002148 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80019f0:	4b6c      	ldr	r3, [pc, #432]	; (8001ba4 <xTaskIncrementTick+0x21c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6a3a      	ldr	r2, [r7, #32]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	f0c0 80aa 	bcc.w	8001b50 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80019fc:	4b66      	ldr	r3, [pc, #408]	; (8001b98 <xTaskIncrementTick+0x210>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d104      	bne.n	8001a10 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a06:	4b67      	ldr	r3, [pc, #412]	; (8001ba4 <xTaskIncrementTick+0x21c>)
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	601a      	str	r2, [r3, #0]
                    break;
 8001a0e:	e09f      	b.n	8001b50 <xTaskIncrementTick+0x1c8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a10:	4b61      	ldr	r3, [pc, #388]	; (8001b98 <xTaskIncrementTick+0x210>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001a20:	6a3a      	ldr	r2, [r7, #32]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d203      	bcs.n	8001a30 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001a28:	4a5e      	ldr	r2, [pc, #376]	; (8001ba4 <xTaskIncrementTick+0x21c>)
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001a2e:	e08f      	b.n	8001b50 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	68d2      	ldr	r2, [r2, #12]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	6892      	ldr	r2, [r2, #8]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	3304      	adds	r3, #4
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d103      	bne.n	8001a5e <xTaskIncrementTick+0xd6>
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	68da      	ldr	r2, [r3, #12]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	2200      	movs	r2, #0
 8001a62:	615a      	str	r2, [r3, #20]
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	1e5a      	subs	r2, r3, #1
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d01e      	beq.n	8001ab4 <xTaskIncrementTick+0x12c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	6a12      	ldr	r2, [r2, #32]
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	69d2      	ldr	r2, [r2, #28]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	3318      	adds	r3, #24
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d103      	bne.n	8001aa4 <xTaskIncrementTick+0x11c>
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	6a1a      	ldr	r2, [r3, #32]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	629a      	str	r2, [r3, #40]	; 0x28
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	1e5a      	subs	r2, r3, #1
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f002 f9da 	bl	8003e70 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	4b38      	ldr	r3, [pc, #224]	; (8001ba8 <xTaskIncrementTick+0x220>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	4a37      	ldr	r2, [pc, #220]	; (8001ba8 <xTaskIncrementTick+0x220>)
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad2:	4936      	ldr	r1, [pc, #216]	; (8001bac <xTaskIncrementTick+0x224>)
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	3304      	adds	r3, #4
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	3204      	adds	r2, #4
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	1d1a      	adds	r2, r3, #4
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4a26      	ldr	r2, [pc, #152]	; (8001bac <xTaskIncrementTick+0x224>)
 8001b12:	441a      	add	r2, r3
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	615a      	str	r2, [r3, #20]
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b1c:	4923      	ldr	r1, [pc, #140]	; (8001bac <xTaskIncrementTick+0x224>)
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	440b      	add	r3, r1
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	1c59      	adds	r1, r3, #1
 8001b2c:	481f      	ldr	r0, [pc, #124]	; (8001bac <xTaskIncrementTick+0x224>)
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4403      	add	r3, r0
 8001b38:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b3e:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <xTaskIncrementTick+0x228>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b44:	429a      	cmp	r2, r3
 8001b46:	f67f af59 	bls.w	80019fc <xTaskIncrementTick+0x74>
                        {
                            xSwitchRequired = pdTRUE;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b4e:	e755      	b.n	80019fc <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001b50:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <xTaskIncrementTick+0x228>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b56:	4915      	ldr	r1, [pc, #84]	; (8001bac <xTaskIncrementTick+0x224>)
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	440b      	add	r3, r1
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d901      	bls.n	8001b6c <xTaskIncrementTick+0x1e4>
            {
                xSwitchRequired = pdTRUE;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <xTaskIncrementTick+0x22c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d007      	beq.n	8001b84 <xTaskIncrementTick+0x1fc>
            {
                xSwitchRequired = pdTRUE;
 8001b74:	2301      	movs	r3, #1
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
 8001b78:	e004      	b.n	8001b84 <xTaskIncrementTick+0x1fc>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <xTaskIncrementTick+0x230>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	4a0d      	ldr	r2, [pc, #52]	; (8001bb8 <xTaskIncrementTick+0x230>)
 8001b82:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3728      	adds	r7, #40	; 0x28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20012d5c 	.word	0x20012d5c
 8001b94:	20012d38 	.word	0x20012d38
 8001b98:	20012cec 	.word	0x20012cec
 8001b9c:	20012cf0 	.word	0x20012cf0
 8001ba0:	20012d4c 	.word	0x20012d4c
 8001ba4:	20012d54 	.word	0x20012d54
 8001ba8:	20012d3c 	.word	0x20012d3c
 8001bac:	20012c60 	.word	0x20012c60
 8001bb0:	20012c5c 	.word	0x20012c5c
 8001bb4:	20012d48 	.word	0x20012d48
 8001bb8:	20012d44 	.word	0x20012d44

08001bbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001bc2:	4b2c      	ldr	r3, [pc, #176]	; (8001c74 <vTaskSwitchContext+0xb8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001bca:	4b2b      	ldr	r3, [pc, #172]	; (8001c78 <vTaskSwitchContext+0xbc>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001bd0:	e04c      	b.n	8001c6c <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 8001bd2:	4b29      	ldr	r3, [pc, #164]	; (8001c78 <vTaskSwitchContext+0xbc>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001bd8:	4b28      	ldr	r3, [pc, #160]	; (8001c7c <vTaskSwitchContext+0xc0>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	fab3 f383 	clz	r3, r3
 8001be4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001be6:	7afb      	ldrb	r3, [r7, #11]
 8001be8:	f1c3 031f 	rsb	r3, r3, #31
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	4924      	ldr	r1, [pc, #144]	; (8001c80 <vTaskSwitchContext+0xc4>)
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d109      	bne.n	8001c16 <vTaskSwitchContext+0x5a>
        __asm volatile
 8001c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c06:	f383 8811 	msr	BASEPRI, r3
 8001c0a:	f3bf 8f6f 	isb	sy
 8001c0e:	f3bf 8f4f 	dsb	sy
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	e7fe      	b.n	8001c14 <vTaskSwitchContext+0x58>
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4a17      	ldr	r2, [pc, #92]	; (8001c80 <vTaskSwitchContext+0xc4>)
 8001c22:	4413      	add	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	3308      	adds	r3, #8
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d104      	bne.n	8001c46 <vTaskSwitchContext+0x8a>
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	4a0d      	ldr	r2, [pc, #52]	; (8001c84 <vTaskSwitchContext+0xc8>)
 8001c4e:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <vTaskSwitchContext+0xc8>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <vTaskSwitchContext+0xcc>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d102      	bne.n	8001c62 <vTaskSwitchContext+0xa6>
 8001c5c:	f002 f864 	bl	8003d28 <SEGGER_SYSVIEW_OnIdle>
}
 8001c60:	e004      	b.n	8001c6c <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <vTaskSwitchContext+0xc8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f002 f8be 	bl	8003de8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001c6c:	bf00      	nop
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20012d5c 	.word	0x20012d5c
 8001c78:	20012d48 	.word	0x20012d48
 8001c7c:	20012d3c 	.word	0x20012d3c
 8001c80:	20012c60 	.word	0x20012c60
 8001c84:	20012c5c 	.word	0x20012c5c
 8001c88:	20012d58 	.word	0x20012d58

08001c8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d109      	bne.n	8001cb0 <vTaskPlaceOnEventList+0x24>
 8001c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ca0:	f383 8811 	msr	BASEPRI, r3
 8001ca4:	f3bf 8f6f 	isb	sy
 8001ca8:	f3bf 8f4f 	dsb	sy
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	e7fe      	b.n	8001cae <vTaskPlaceOnEventList+0x22>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001cb0:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <vTaskPlaceOnEventList+0x44>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	3318      	adds	r3, #24
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7fe fbbe 	bl	800043a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	6838      	ldr	r0, [r7, #0]
 8001cc2:	f000 fc33 	bl	800252c <prvAddCurrentTaskToDelayedList>
}
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20012c5c 	.word	0x20012c5c

08001cd4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d109      	bne.n	8001cfa <vTaskPlaceOnEventListRestricted+0x26>
 8001ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cea:	f383 8811 	msr	BASEPRI, r3
 8001cee:	f3bf 8f6f 	isb	sy
 8001cf2:	f3bf 8f4f 	dsb	sy
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	e7fe      	b.n	8001cf8 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	61da      	str	r2, [r3, #28]
 8001d08:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	6892      	ldr	r2, [r2, #8]
 8001d10:	621a      	str	r2, [r3, #32]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	3218      	adds	r2, #24
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f103 0218 	add.w	r2, r3, #24
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	629a      	str	r2, [r3, #40]	; 0x28
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <vTaskPlaceOnEventListRestricted+0x74>
        {
            xTicksToWait = portMAX_DELAY;
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295
 8001d46:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001d48:	2024      	movs	r0, #36	; 0x24
 8001d4a:	f001 fb6b 	bl	8003424 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	68b8      	ldr	r0, [r7, #8]
 8001d52:	f000 fbeb 	bl	800252c <prvAddCurrentTaskToDelayedList>
    }
 8001d56:	bf00      	nop
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20012c5c 	.word	0x20012c5c

08001d64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08a      	sub	sp, #40	; 0x28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d109      	bne.n	8001d8e <xTaskRemoveFromEventList+0x2a>
 8001d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d7e:	f383 8811 	msr	BASEPRI, r3
 8001d82:	f3bf 8f6f 	isb	sy
 8001d86:	f3bf 8f4f 	dsb	sy
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	e7fe      	b.n	8001d8c <xTaskRemoveFromEventList+0x28>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001d8e:	6a3b      	ldr	r3, [r7, #32]
 8001d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	6a3a      	ldr	r2, [r7, #32]
 8001d9a:	6a12      	ldr	r2, [r2, #32]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	6a3a      	ldr	r2, [r7, #32]
 8001da4:	69d2      	ldr	r2, [r2, #28]
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	6a3b      	ldr	r3, [r7, #32]
 8001dae:	3318      	adds	r3, #24
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d103      	bne.n	8001dbc <xTaskRemoveFromEventList+0x58>
 8001db4:	6a3b      	ldr	r3, [r7, #32]
 8001db6:	6a1a      	ldr	r2, [r3, #32]
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	629a      	str	r2, [r3, #40]	; 0x28
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	1e5a      	subs	r2, r3, #1
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001dcc:	4b4b      	ldr	r3, [pc, #300]	; (8001efc <xTaskRemoveFromEventList+0x198>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d162      	bne.n	8001e9a <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	61bb      	str	r3, [r7, #24]
 8001dda:	6a3b      	ldr	r3, [r7, #32]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	6a3a      	ldr	r2, [r7, #32]
 8001de0:	68d2      	ldr	r2, [r2, #12]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	6a3a      	ldr	r2, [r7, #32]
 8001dea:	6892      	ldr	r2, [r2, #8]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	6a3b      	ldr	r3, [r7, #32]
 8001df4:	3304      	adds	r3, #4
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d103      	bne.n	8001e02 <xTaskRemoveFromEventList+0x9e>
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	2200      	movs	r2, #0
 8001e06:	615a      	str	r2, [r3, #20]
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	1e5a      	subs	r2, r3, #1
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f002 f82b 	bl	8003e70 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001e1a:	6a3b      	ldr	r3, [r7, #32]
 8001e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1e:	2201      	movs	r2, #1
 8001e20:	409a      	lsls	r2, r3
 8001e22:	4b37      	ldr	r3, [pc, #220]	; (8001f00 <xTaskRemoveFromEventList+0x19c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	4a35      	ldr	r2, [pc, #212]	; (8001f00 <xTaskRemoveFromEventList+0x19c>)
 8001e2a:	6013      	str	r3, [r2, #0]
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e30:	4934      	ldr	r1, [pc, #208]	; (8001f04 <xTaskRemoveFromEventList+0x1a0>)
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	60da      	str	r2, [r3, #12]
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	6a3a      	ldr	r2, [r7, #32]
 8001e56:	3204      	adds	r2, #4
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	1d1a      	adds	r2, r3, #4
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4a25      	ldr	r2, [pc, #148]	; (8001f04 <xTaskRemoveFromEventList+0x1a0>)
 8001e70:	441a      	add	r2, r3
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	615a      	str	r2, [r3, #20]
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e7a:	4922      	ldr	r1, [pc, #136]	; (8001f04 <xTaskRemoveFromEventList+0x1a0>)
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	1c59      	adds	r1, r3, #1
 8001e8a:	481e      	ldr	r0, [pc, #120]	; (8001f04 <xTaskRemoveFromEventList+0x1a0>)
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4403      	add	r3, r0
 8001e96:	6019      	str	r1, [r3, #0]
 8001e98:	e01b      	b.n	8001ed2 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001e9a:	4b1b      	ldr	r3, [pc, #108]	; (8001f08 <xTaskRemoveFromEventList+0x1a4>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	6a3b      	ldr	r3, [r7, #32]
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	61da      	str	r2, [r3, #28]
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
 8001eac:	621a      	str	r2, [r3, #32]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	6a3a      	ldr	r2, [r7, #32]
 8001eb4:	3218      	adds	r2, #24
 8001eb6:	605a      	str	r2, [r3, #4]
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	f103 0218 	add.w	r2, r3, #24
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	609a      	str	r2, [r3, #8]
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	4a10      	ldr	r2, [pc, #64]	; (8001f08 <xTaskRemoveFromEventList+0x1a4>)
 8001ec6:	629a      	str	r2, [r3, #40]	; 0x28
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <xTaskRemoveFromEventList+0x1a4>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	4a0e      	ldr	r2, [pc, #56]	; (8001f08 <xTaskRemoveFromEventList+0x1a4>)
 8001ed0:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <xTaskRemoveFromEventList+0x1a8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d905      	bls.n	8001eec <xTaskRemoveFromEventList+0x188>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001ee4:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <xTaskRemoveFromEventList+0x1ac>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	e001      	b.n	8001ef0 <xTaskRemoveFromEventList+0x18c>
    }
    else
    {
        xReturn = pdFALSE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3728      	adds	r7, #40	; 0x28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20012d5c 	.word	0x20012d5c
 8001f00:	20012d3c 	.word	0x20012d3c
 8001f04:	20012c60 	.word	0x20012c60
 8001f08:	20012cf4 	.word	0x20012cf4
 8001f0c:	20012c5c 	.word	0x20012c5c
 8001f10:	20012d48 	.word	0x20012d48

08001f14 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <vTaskInternalSetTimeOutState+0x24>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <vTaskInternalSetTimeOutState+0x28>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	605a      	str	r2, [r3, #4]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	20012d4c 	.word	0x20012d4c
 8001f3c:	20012d38 	.word	0x20012d38

08001f40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d109      	bne.n	8001f64 <xTaskCheckForTimeOut+0x24>
 8001f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f54:	f383 8811 	msr	BASEPRI, r3
 8001f58:	f3bf 8f6f 	isb	sy
 8001f5c:	f3bf 8f4f 	dsb	sy
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	e7fe      	b.n	8001f62 <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d109      	bne.n	8001f7e <xTaskCheckForTimeOut+0x3e>
 8001f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f6e:	f383 8811 	msr	BASEPRI, r3
 8001f72:	f3bf 8f6f 	isb	sy
 8001f76:	f3bf 8f4f 	dsb	sy
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	e7fe      	b.n	8001f7c <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8001f7e:	f7fe fbe7 	bl	8000750 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001f82:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <xTaskCheckForTimeOut+0xc0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9a:	d102      	bne.n	8001fa2 <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61fb      	str	r3, [r7, #28]
 8001fa0:	e026      	b.n	8001ff0 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	4b17      	ldr	r3, [pc, #92]	; (8002004 <xTaskCheckForTimeOut+0xc4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d00a      	beq.n	8001fc4 <xTaskCheckForTimeOut+0x84>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d805      	bhi.n	8001fc4 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	e015      	b.n	8001ff0 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d90b      	bls.n	8001fe6 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	1ad2      	subs	r2, r2, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ff9a 	bl	8001f14 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
 8001fe4:	e004      	b.n	8001ff0 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001fec:	2301      	movs	r3, #1
 8001fee:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001ff0:	f7fe fbdc 	bl	80007ac <vPortExitCritical>

    return xReturn;
 8001ff4:	69fb      	ldr	r3, [r7, #28]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3720      	adds	r7, #32
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20012d38 	.word	0x20012d38
 8002004:	20012d4c 	.word	0x20012d4c

08002008 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800200c:	4b03      	ldr	r3, [pc, #12]	; (800201c <vTaskMissedYield+0x14>)
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]
}
 8002012:	bf00      	nop
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	20012d48 	.word	0x20012d48

08002020 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002028:	f000 f852 	bl	80020d0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <prvIdleTask+0x28>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d9f9      	bls.n	8002028 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <prvIdleTask+0x2c>)
 8002036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	f3bf 8f4f 	dsb	sy
 8002040:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002044:	e7f0      	b.n	8002028 <prvIdleTask+0x8>
 8002046:	bf00      	nop
 8002048:	20012c60 	.word	0x20012c60
 800204c:	e000ed04 	.word	0xe000ed04

08002050 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	e00c      	b.n	8002076 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4a12      	ldr	r2, [pc, #72]	; (80020b0 <prvInitialiseTaskLists+0x60>)
 8002068:	4413      	add	r3, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe f9b8 	bl	80003e0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3301      	adds	r3, #1
 8002074:	607b      	str	r3, [r7, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b04      	cmp	r3, #4
 800207a:	d9ef      	bls.n	800205c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800207c:	480d      	ldr	r0, [pc, #52]	; (80020b4 <prvInitialiseTaskLists+0x64>)
 800207e:	f7fe f9af 	bl	80003e0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002082:	480d      	ldr	r0, [pc, #52]	; (80020b8 <prvInitialiseTaskLists+0x68>)
 8002084:	f7fe f9ac 	bl	80003e0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002088:	480c      	ldr	r0, [pc, #48]	; (80020bc <prvInitialiseTaskLists+0x6c>)
 800208a:	f7fe f9a9 	bl	80003e0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800208e:	480c      	ldr	r0, [pc, #48]	; (80020c0 <prvInitialiseTaskLists+0x70>)
 8002090:	f7fe f9a6 	bl	80003e0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002094:	480b      	ldr	r0, [pc, #44]	; (80020c4 <prvInitialiseTaskLists+0x74>)
 8002096:	f7fe f9a3 	bl	80003e0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <prvInitialiseTaskLists+0x78>)
 800209c:	4a05      	ldr	r2, [pc, #20]	; (80020b4 <prvInitialiseTaskLists+0x64>)
 800209e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80020a0:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <prvInitialiseTaskLists+0x7c>)
 80020a2:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <prvInitialiseTaskLists+0x68>)
 80020a4:	601a      	str	r2, [r3, #0]
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20012c60 	.word	0x20012c60
 80020b4:	20012cc4 	.word	0x20012cc4
 80020b8:	20012cd8 	.word	0x20012cd8
 80020bc:	20012cf4 	.word	0x20012cf4
 80020c0:	20012d08 	.word	0x20012d08
 80020c4:	20012d20 	.word	0x20012d20
 80020c8:	20012cec 	.word	0x20012cec
 80020cc:	20012cf0 	.word	0x20012cf0

080020d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80020d6:	e019      	b.n	800210c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80020d8:	f7fe fb3a 	bl	8000750 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020dc:	4b0f      	ldr	r3, [pc, #60]	; (800211c <prvCheckTasksWaitingTermination+0x4c>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3304      	adds	r3, #4
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe f9df 	bl	80004ac <uxListRemove>
                --uxCurrentNumberOfTasks;
 80020ee:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <prvCheckTasksWaitingTermination+0x50>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	4a0a      	ldr	r2, [pc, #40]	; (8002120 <prvCheckTasksWaitingTermination+0x50>)
 80020f6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80020f8:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <prvCheckTasksWaitingTermination+0x54>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	4a09      	ldr	r2, [pc, #36]	; (8002124 <prvCheckTasksWaitingTermination+0x54>)
 8002100:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002102:	f7fe fb53 	bl	80007ac <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f80e 	bl	8002128 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <prvCheckTasksWaitingTermination+0x54>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1e1      	bne.n	80020d8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002114:	bf00      	nop
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20012d08 	.word	0x20012d08
 8002120:	20012d34 	.word	0x20012d34
 8002124:	20012d1c 	.word	0x20012d1c

08002128 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe fcdd 	bl	8000af4 <vPortFree>
            vPortFree( pxTCB );
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7fe fcda 	bl	8000af4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800214c:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <prvResetNextTaskUnblockTime+0x30>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d104      	bne.n	8002160 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002156:	4b09      	ldr	r3, [pc, #36]	; (800217c <prvResetNextTaskUnblockTime+0x34>)
 8002158:	f04f 32ff 	mov.w	r2, #4294967295
 800215c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800215e:	e005      	b.n	800216c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <prvResetNextTaskUnblockTime+0x30>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a04      	ldr	r2, [pc, #16]	; (800217c <prvResetNextTaskUnblockTime+0x34>)
 800216a:	6013      	str	r3, [r2, #0]
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20012cec 	.word	0x20012cec
 800217c:	20012d54 	.word	0x20012d54

08002180 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002186:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <xTaskGetSchedulerState+0x34>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d102      	bne.n	8002194 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800218e:	2301      	movs	r3, #1
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	e008      	b.n	80021a6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <xTaskGetSchedulerState+0x38>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d102      	bne.n	80021a2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800219c:	2302      	movs	r3, #2
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	e001      	b.n	80021a6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80021a2:	2300      	movs	r3, #0
 80021a4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80021a6:	687b      	ldr	r3, [r7, #4]
    }
 80021a8:	4618      	mov	r0, r3
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	20012d40 	.word	0x20012d40
 80021b8:	20012d5c 	.word	0x20012d5c

080021bc <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d009      	beq.n	80021e4 <xTaskGenericNotifyWait+0x28>
 80021d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d4:	f383 8811 	msr	BASEPRI, r3
 80021d8:	f3bf 8f6f 	isb	sy
 80021dc:	f3bf 8f4f 	dsb	sy
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	e7fe      	b.n	80021e2 <xTaskGenericNotifyWait+0x26>

        taskENTER_CRITICAL();
 80021e4:	f7fe fab4 	bl	8000750 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80021e8:	4b36      	ldr	r3, [pc, #216]	; (80022c4 <xTaskGenericNotifyWait+0x108>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4413      	add	r3, r2
 80021f0:	3354      	adds	r3, #84	; 0x54
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d022      	beq.n	8002240 <xTaskGenericNotifyWait+0x84>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80021fa:	4b32      	ldr	r3, [pc, #200]	; (80022c4 <xTaskGenericNotifyWait+0x108>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	3214      	adds	r2, #20
 8002202:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	43d2      	mvns	r2, r2
 800220a:	4011      	ands	r1, r2
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	3214      	adds	r2, #20
 8002210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002214:	4b2b      	ldr	r3, [pc, #172]	; (80022c4 <xTaskGenericNotifyWait+0x108>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4413      	add	r3, r2
 800221c:	3354      	adds	r3, #84	; 0x54
 800221e:	2201      	movs	r2, #1
 8002220:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00b      	beq.n	8002240 <xTaskGenericNotifyWait+0x84>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002228:	2101      	movs	r1, #1
 800222a:	6a38      	ldr	r0, [r7, #32]
 800222c:	f000 f97e 	bl	800252c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002230:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <xTaskGenericNotifyWait+0x10c>)
 8002232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	f3bf 8f4f 	dsb	sy
 800223c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002240:	f7fe fab4 	bl	80007ac <vPortExitCritical>

        taskENTER_CRITICAL();
 8002244:	f7fe fa84 	bl	8000750 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT();
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	4613      	mov	r3, r2
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	68b9      	ldr	r1, [r7, #8]
 8002254:	2040      	movs	r0, #64	; 0x40
 8002256:	f001 fa0f 	bl	8003678 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d007      	beq.n	8002270 <xTaskGenericNotifyWait+0xb4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002260:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <xTaskGenericNotifyWait+0x108>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	3214      	adds	r2, #20
 8002268:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002270:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <xTaskGenericNotifyWait+0x108>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4413      	add	r3, r2
 8002278:	3354      	adds	r3, #84	; 0x54
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d002      	beq.n	8002288 <xTaskGenericNotifyWait+0xcc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	e00e      	b.n	80022a6 <xTaskGenericNotifyWait+0xea>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8002288:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <xTaskGenericNotifyWait+0x108>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	3214      	adds	r2, #20
 8002290:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	43d2      	mvns	r2, r2
 8002298:	4011      	ands	r1, r2
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	3214      	adds	r2, #20
 800229e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80022a2:	2301      	movs	r3, #1
 80022a4:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80022a6:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <xTaskGenericNotifyWait+0x108>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	4413      	add	r3, r2
 80022ae:	3354      	adds	r3, #84	; 0x54
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80022b4:	f7fe fa7a 	bl	80007ac <vPortExitCritical>

        return xReturn;
 80022b8:	697b      	ldr	r3, [r7, #20]
    }
 80022ba:	4618      	mov	r0, r3
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20012c5c 	.word	0x20012c5c
 80022c8:	e000ed04 	.word	0xe000ed04

080022cc <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b090      	sub	sp, #64	; 0x40
 80022d0:	af02      	add	r7, sp, #8
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
 80022d8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80022da:	2301      	movs	r3, #1
 80022dc:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d009      	beq.n	80022f8 <xTaskGenericNotify+0x2c>
 80022e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e8:	f383 8811 	msr	BASEPRI, r3
 80022ec:	f3bf 8f6f 	isb	sy
 80022f0:	f3bf 8f4f 	dsb	sy
 80022f4:	623b      	str	r3, [r7, #32]
 80022f6:	e7fe      	b.n	80022f6 <xTaskGenericNotify+0x2a>
        configASSERT( xTaskToNotify );
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d109      	bne.n	8002312 <xTaskGenericNotify+0x46>
 80022fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002302:	f383 8811 	msr	BASEPRI, r3
 8002306:	f3bf 8f6f 	isb	sy
 800230a:	f3bf 8f4f 	dsb	sy
 800230e:	61fb      	str	r3, [r7, #28]
 8002310:	e7fe      	b.n	8002310 <xTaskGenericNotify+0x44>
        pxTCB = xTaskToNotify;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8002316:	f7fe fa1b 	bl	8000750 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800231a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800231c:	2b00      	cmp	r3, #0
 800231e:	d006      	beq.n	800232e <xTaskGenericNotify+0x62>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	3214      	adds	r2, #20
 8002326:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800232a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800232c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800232e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	4413      	add	r3, r2
 8002334:	3354      	adds	r3, #84	; 0x54
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800233c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	4413      	add	r3, r2
 8002342:	3354      	adds	r3, #84	; 0x54
 8002344:	2202      	movs	r2, #2
 8002346:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	2b04      	cmp	r3, #4
 800234c:	d83b      	bhi.n	80023c6 <xTaskGenericNotify+0xfa>
 800234e:	a201      	add	r2, pc, #4	; (adr r2, 8002354 <xTaskGenericNotify+0x88>)
 8002350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002354:	080023e3 	.word	0x080023e3
 8002358:	08002369 	.word	0x08002369
 800235c:	08002385 	.word	0x08002385
 8002360:	0800239d 	.word	0x0800239d
 8002364:	080023ab 	.word	0x080023ab
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	3214      	adds	r2, #20
 800236e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	ea42 0103 	orr.w	r1, r2, r3
 8002378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	3214      	adds	r2, #20
 800237e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002382:	e031      	b.n	80023e8 <xTaskGenericNotify+0x11c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	3214      	adds	r2, #20
 800238a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800238e:	1c59      	adds	r1, r3, #1
 8002390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	3214      	adds	r2, #20
 8002396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800239a:	e025      	b.n	80023e8 <xTaskGenericNotify+0x11c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800239c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	3214      	adds	r2, #20
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80023a8:	e01e      	b.n	80023e8 <xTaskGenericNotify+0x11c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80023aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d006      	beq.n	80023c0 <xTaskGenericNotify+0xf4>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80023b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	3214      	adds	r2, #20
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80023be:	e013      	b.n	80023e8 <xTaskGenericNotify+0x11c>
                        xReturn = pdFAIL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 80023c4:	e010      	b.n	80023e8 <xTaskGenericNotify+0x11c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80023c6:	4b54      	ldr	r3, [pc, #336]	; (8002518 <xTaskGenericNotify+0x24c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00b      	beq.n	80023e6 <xTaskGenericNotify+0x11a>
 80023ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d2:	f383 8811 	msr	BASEPRI, r3
 80023d6:	f3bf 8f6f 	isb	sy
 80023da:	f3bf 8f4f 	dsb	sy
 80023de:	61bb      	str	r3, [r7, #24]
 80023e0:	e7fe      	b.n	80023e0 <xTaskGenericNotify+0x114>
                    break;
 80023e2:	bf00      	nop
 80023e4:	e000      	b.n	80023e8 <xTaskGenericNotify+0x11c>

                    break;
 80023e6:	bf00      	nop
            }

            traceTASK_NOTIFY();
 80023e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ea:	4618      	mov	r0, r3
 80023ec:	f001 fd84 	bl	8003ef8 <SEGGER_SYSVIEW_ShrinkId>
 80023f0:	4601      	mov	r1, r0
 80023f2:	78fa      	ldrb	r2, [r7, #3]
 80023f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	4613      	mov	r3, r2
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	203e      	movs	r0, #62	; 0x3e
 80023fe:	f001 f93b 	bl	8003678 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002402:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002406:	2b01      	cmp	r3, #1
 8002408:	d17e      	bne.n	8002508 <xTaskGenericNotify+0x23c>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800240a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002416:	68d2      	ldr	r2, [r2, #12]
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002420:	6892      	ldr	r2, [r2, #8]
 8002422:	605a      	str	r2, [r3, #4]
 8002424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242a:	3304      	adds	r3, #4
 800242c:	429a      	cmp	r2, r3
 800242e:	d103      	bne.n	8002438 <xTaskGenericNotify+0x16c>
 8002430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243a:	2200      	movs	r2, #0
 800243c:	615a      	str	r2, [r3, #20]
 800243e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	1e5a      	subs	r2, r3, #1
 8002444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002446:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8002448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244a:	4618      	mov	r0, r3
 800244c:	f001 fd10 	bl	8003e70 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002454:	2201      	movs	r2, #1
 8002456:	409a      	lsls	r2, r3
 8002458:	4b30      	ldr	r3, [pc, #192]	; (800251c <xTaskGenericNotify+0x250>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4313      	orrs	r3, r2
 800245e:	4a2f      	ldr	r2, [pc, #188]	; (800251c <xTaskGenericNotify+0x250>)
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002466:	492e      	ldr	r1, [pc, #184]	; (8002520 <xTaskGenericNotify+0x254>)
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	3304      	adds	r3, #4
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
 8002478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800248c:	3204      	adds	r2, #4
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002492:	1d1a      	adds	r2, r3, #4
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4a1e      	ldr	r2, [pc, #120]	; (8002520 <xTaskGenericNotify+0x254>)
 80024a6:	441a      	add	r2, r3
 80024a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024aa:	615a      	str	r2, [r3, #20]
 80024ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b0:	491b      	ldr	r1, [pc, #108]	; (8002520 <xTaskGenericNotify+0x254>)
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	1c59      	adds	r1, r3, #1
 80024c0:	4817      	ldr	r0, [pc, #92]	; (8002520 <xTaskGenericNotify+0x254>)
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4403      	add	r3, r0
 80024cc:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d009      	beq.n	80024ea <xTaskGenericNotify+0x21e>
 80024d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024da:	f383 8811 	msr	BASEPRI, r3
 80024de:	f3bf 8f6f 	isb	sy
 80024e2:	f3bf 8f4f 	dsb	sy
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	e7fe      	b.n	80024e8 <xTaskGenericNotify+0x21c>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80024ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ee:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <xTaskGenericNotify+0x258>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d907      	bls.n	8002508 <xTaskGenericNotify+0x23c>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80024f8:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <xTaskGenericNotify+0x25c>)
 80024fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	f3bf 8f4f 	dsb	sy
 8002504:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002508:	f7fe f950 	bl	80007ac <vPortExitCritical>

        return xReturn;
 800250c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800250e:	4618      	mov	r0, r3
 8002510:	3738      	adds	r7, #56	; 0x38
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20012d38 	.word	0x20012d38
 800251c:	20012d3c 	.word	0x20012d3c
 8002520:	20012c60 	.word	0x20012c60
 8002524:	20012c5c 	.word	0x20012c5c
 8002528:	e000ed04 	.word	0xe000ed04

0800252c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002536:	4b36      	ldr	r3, [pc, #216]	; (8002610 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800253c:	4b35      	ldr	r3, [pc, #212]	; (8002614 <prvAddCurrentTaskToDelayedList+0xe8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	3304      	adds	r3, #4
 8002542:	4618      	mov	r0, r3
 8002544:	f7fd ffb2 	bl	80004ac <uxListRemove>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10b      	bne.n	8002566 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800254e:	4b31      	ldr	r3, [pc, #196]	; (8002614 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	2201      	movs	r2, #1
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43da      	mvns	r2, r3
 800255c:	4b2e      	ldr	r3, [pc, #184]	; (8002618 <prvAddCurrentTaskToDelayedList+0xec>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4013      	ands	r3, r2
 8002562:	4a2d      	ldr	r2, [pc, #180]	; (8002618 <prvAddCurrentTaskToDelayedList+0xec>)
 8002564:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256c:	d124      	bne.n	80025b8 <prvAddCurrentTaskToDelayedList+0x8c>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d021      	beq.n	80025b8 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002574:	4b29      	ldr	r3, [pc, #164]	; (800261c <prvAddCurrentTaskToDelayedList+0xf0>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	4b26      	ldr	r3, [pc, #152]	; (8002614 <prvAddCurrentTaskToDelayedList+0xe8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	609a      	str	r2, [r3, #8]
 8002582:	4b24      	ldr	r3, [pc, #144]	; (8002614 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	6892      	ldr	r2, [r2, #8]
 800258a:	60da      	str	r2, [r3, #12]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	4a20      	ldr	r2, [pc, #128]	; (8002614 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	3204      	adds	r2, #4
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	4b1e      	ldr	r3, [pc, #120]	; (8002614 <prvAddCurrentTaskToDelayedList+0xe8>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	1d1a      	adds	r2, r3, #4
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <prvAddCurrentTaskToDelayedList+0xe8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a1d      	ldr	r2, [pc, #116]	; (800261c <prvAddCurrentTaskToDelayedList+0xf0>)
 80025a8:	615a      	str	r2, [r3, #20]
 80025aa:	4b1c      	ldr	r3, [pc, #112]	; (800261c <prvAddCurrentTaskToDelayedList+0xf0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	3301      	adds	r3, #1
 80025b0:	4a1a      	ldr	r2, [pc, #104]	; (800261c <prvAddCurrentTaskToDelayedList+0xf0>)
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80025b6:	e026      	b.n	8002606 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80025c0:	4b14      	ldr	r3, [pc, #80]	; (8002614 <prvAddCurrentTaskToDelayedList+0xe8>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d209      	bcs.n	80025e4 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80025d0:	4b13      	ldr	r3, [pc, #76]	; (8002620 <prvAddCurrentTaskToDelayedList+0xf4>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <prvAddCurrentTaskToDelayedList+0xe8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	3304      	adds	r3, #4
 80025da:	4619      	mov	r1, r3
 80025dc:	4610      	mov	r0, r2
 80025de:	f7fd ff2c 	bl	800043a <vListInsert>
}
 80025e2:	e010      	b.n	8002606 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80025e4:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <prvAddCurrentTaskToDelayedList+0xf8>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <prvAddCurrentTaskToDelayedList+0xe8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	3304      	adds	r3, #4
 80025ee:	4619      	mov	r1, r3
 80025f0:	4610      	mov	r0, r2
 80025f2:	f7fd ff22 	bl	800043a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80025f6:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <prvAddCurrentTaskToDelayedList+0xfc>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d202      	bcs.n	8002606 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8002600:	4a09      	ldr	r2, [pc, #36]	; (8002628 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6013      	str	r3, [r2, #0]
}
 8002606:	bf00      	nop
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20012d38 	.word	0x20012d38
 8002614:	20012c5c 	.word	0x20012c5c
 8002618:	20012d3c 	.word	0x20012d3c
 800261c:	20012d20 	.word	0x20012d20
 8002620:	20012cf0 	.word	0x20012cf0
 8002624:	20012cec 	.word	0x20012cec
 8002628:	20012d54 	.word	0x20012d54

0800262c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002632:	2300      	movs	r3, #0
 8002634:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002636:	f000 fa43 	bl	8002ac0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800263a:	4b11      	ldr	r3, [pc, #68]	; (8002680 <xTimerCreateTimerTask+0x54>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00b      	beq.n	800265a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8002642:	4b10      	ldr	r3, [pc, #64]	; (8002684 <xTimerCreateTimerTask+0x58>)
 8002644:	9301      	str	r3, [sp, #4]
 8002646:	2302      	movs	r3, #2
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	2300      	movs	r3, #0
 800264c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002650:	490d      	ldr	r1, [pc, #52]	; (8002688 <xTimerCreateTimerTask+0x5c>)
 8002652:	480e      	ldr	r0, [pc, #56]	; (800268c <xTimerCreateTimerTask+0x60>)
 8002654:	f7fe fe84 	bl	8001360 <xTaskCreate>
 8002658:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d109      	bne.n	8002674 <xTimerCreateTimerTask+0x48>
 8002660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002664:	f383 8811 	msr	BASEPRI, r3
 8002668:	f3bf 8f6f 	isb	sy
 800266c:	f3bf 8f4f 	dsb	sy
 8002670:	603b      	str	r3, [r7, #0]
 8002672:	e7fe      	b.n	8002672 <xTimerCreateTimerTask+0x46>
        return xReturn;
 8002674:	687b      	ldr	r3, [r7, #4]
    }
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20012d90 	.word	0x20012d90
 8002684:	20012d94 	.word	0x20012d94
 8002688:	08004908 	.word	0x08004908
 800268c:	08002731 	.word	0x08002731

08002690 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800269c:	e008      	b.n	80026b0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	4413      	add	r3, r2
 80026a6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	699a      	ldr	r2, [r3, #24]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	18d1      	adds	r1, r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 f8db 	bl	8002878 <prvInsertTimerInActiveList>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1ea      	bne.n	800269e <prvReloadTimer+0xe>
        }
    }
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026da:	4b14      	ldr	r3, [pc, #80]	; (800272c <prvProcessExpiredTimer+0x5c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	3304      	adds	r3, #4
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fd fedf 	bl	80004ac <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f7ff ffc5 	bl	8002690 <prvReloadTimer>
 8002706:	e008      	b.n	800271a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800270e:	f023 0301 	bic.w	r3, r3, #1
 8002712:	b2da      	uxtb	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	4798      	blx	r3
    }
 8002722:	bf00      	nop
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20012d88 	.word	0x20012d88

08002730 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002738:	f107 0308 	add.w	r3, r7, #8
 800273c:	4618      	mov	r0, r3
 800273e:	f000 f857 	bl	80027f0 <prvGetNextExpireTime>
 8002742:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	4619      	mov	r1, r3
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 f803 	bl	8002754 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800274e:	f000 f8d5 	bl	80028fc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002752:	e7f1      	b.n	8002738 <prvTimerTask+0x8>

08002754 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800275e:	f7fe ffe5 	bl	800172c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002762:	f107 0308 	add.w	r3, r7, #8
 8002766:	4618      	mov	r0, r3
 8002768:	f000 f866 	bl	8002838 <prvSampleTimeNow>
 800276c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d130      	bne.n	80027d6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10a      	bne.n	8002790 <prvProcessTimerOrBlockTask+0x3c>
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	429a      	cmp	r2, r3
 8002780:	d806      	bhi.n	8002790 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002782:	f7fe ffe1 	bl	8001748 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002786:	68f9      	ldr	r1, [r7, #12]
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff ffa1 	bl	80026d0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800278e:	e024      	b.n	80027da <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d008      	beq.n	80027a8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002796:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <prvProcessTimerOrBlockTask+0x90>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <prvProcessTimerOrBlockTask+0x50>
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <prvProcessTimerOrBlockTask+0x52>
 80027a4:	2300      	movs	r3, #0
 80027a6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80027a8:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <prvProcessTimerOrBlockTask+0x94>)
 80027aa:	6818      	ldr	r0, [r3, #0]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	4619      	mov	r1, r3
 80027b6:	f7fe fd9f 	bl	80012f8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80027ba:	f7fe ffc5 	bl	8001748 <xTaskResumeAll>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10a      	bne.n	80027da <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80027c4:	4b09      	ldr	r3, [pc, #36]	; (80027ec <prvProcessTimerOrBlockTask+0x98>)
 80027c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	f3bf 8f6f 	isb	sy
    }
 80027d4:	e001      	b.n	80027da <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80027d6:	f7fe ffb7 	bl	8001748 <xTaskResumeAll>
    }
 80027da:	bf00      	nop
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20012d8c 	.word	0x20012d8c
 80027e8:	20012d90 	.word	0x20012d90
 80027ec:	e000ed04 	.word	0xe000ed04

080027f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80027f8:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <prvGetNextExpireTime+0x44>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <prvGetNextExpireTime+0x16>
 8002802:	2201      	movs	r2, #1
 8002804:	e000      	b.n	8002808 <prvGetNextExpireTime+0x18>
 8002806:	2200      	movs	r2, #0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d105      	bne.n	8002820 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002814:	4b07      	ldr	r3, [pc, #28]	; (8002834 <prvGetNextExpireTime+0x44>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	e001      	b.n	8002824 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002824:	68fb      	ldr	r3, [r7, #12]
    }
 8002826:	4618      	mov	r0, r3
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	20012d88 	.word	0x20012d88

08002838 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002840:	f7ff f880 	bl	8001944 <xTaskGetTickCount>
 8002844:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002846:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <prvSampleTimeNow+0x3c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	429a      	cmp	r2, r3
 800284e:	d205      	bcs.n	800285c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002850:	f000 f910 	bl	8002a74 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	e002      	b.n	8002862 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002862:	4a04      	ldr	r2, [pc, #16]	; (8002874 <prvSampleTimeNow+0x3c>)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002868:	68fb      	ldr	r3, [r7, #12]
    }
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20012d98 	.word	0x20012d98

08002878 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
 8002884:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	429a      	cmp	r2, r3
 800289c:	d812      	bhi.n	80028c4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	1ad2      	subs	r2, r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d302      	bcc.n	80028b2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80028ac:	2301      	movs	r3, #1
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	e01b      	b.n	80028ea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80028b2:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <prvInsertTimerInActiveList+0x7c>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	3304      	adds	r3, #4
 80028ba:	4619      	mov	r1, r3
 80028bc:	4610      	mov	r0, r2
 80028be:	f7fd fdbc 	bl	800043a <vListInsert>
 80028c2:	e012      	b.n	80028ea <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d206      	bcs.n	80028da <prvInsertTimerInActiveList+0x62>
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d302      	bcc.n	80028da <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80028d4:	2301      	movs	r3, #1
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	e007      	b.n	80028ea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80028da:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <prvInsertTimerInActiveList+0x80>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	3304      	adds	r3, #4
 80028e2:	4619      	mov	r1, r3
 80028e4:	4610      	mov	r0, r2
 80028e6:	f7fd fda8 	bl	800043a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80028ea:	697b      	ldr	r3, [r7, #20]
    }
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20012d8c 	.word	0x20012d8c
 80028f8:	20012d88 	.word	0x20012d88

080028fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002902:	e0a5      	b.n	8002a50 <prvProcessReceivedCommands+0x154>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	f2c0 80a2 	blt.w	8002a50 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d004      	beq.n	8002922 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	3304      	adds	r3, #4
 800291c:	4618      	mov	r0, r3
 800291e:	f7fd fdc5 	bl	80004ac <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002922:	1d3b      	adds	r3, r7, #4
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff87 	bl	8002838 <prvSampleTimeNow>
 800292a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	3b01      	subs	r3, #1
 8002930:	2b08      	cmp	r3, #8
 8002932:	f200 808c 	bhi.w	8002a4e <prvProcessReceivedCommands+0x152>
 8002936:	a201      	add	r2, pc, #4	; (adr r2, 800293c <prvProcessReceivedCommands+0x40>)
 8002938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293c:	08002961 	.word	0x08002961
 8002940:	08002961 	.word	0x08002961
 8002944:	080029c9 	.word	0x080029c9
 8002948:	080029dd 	.word	0x080029dd
 800294c:	08002a25 	.word	0x08002a25
 8002950:	08002961 	.word	0x08002961
 8002954:	08002961 	.word	0x08002961
 8002958:	080029c9 	.word	0x080029c9
 800295c:	080029dd 	.word	0x080029dd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	b2da      	uxtb	r2, r3
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	18d1      	adds	r1, r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	69f8      	ldr	r0, [r7, #28]
 8002980:	f7ff ff7a 	bl	8002878 <prvInsertTimerInActiveList>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d062      	beq.n	8002a50 <prvProcessReceivedCommands+0x154>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d009      	beq.n	80029ac <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	4413      	add	r3, r2
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4619      	mov	r1, r3
 80029a4:	69f8      	ldr	r0, [r7, #28]
 80029a6:	f7ff fe73 	bl	8002690 <prvReloadTimer>
 80029aa:	e008      	b.n	80029be <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029b2:	f023 0301 	bic.w	r3, r3, #1
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	69f8      	ldr	r0, [r7, #28]
 80029c4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80029c6:	e043      	b.n	8002a50 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029ce:	f023 0301 	bic.w	r3, r3, #1
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80029da:	e039      	b.n	8002a50 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d109      	bne.n	8002a10 <prvProcessReceivedCommands+0x114>
 80029fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a00:	f383 8811 	msr	BASEPRI, r3
 8002a04:	f3bf 8f6f 	isb	sy
 8002a08:	f3bf 8f4f 	dsb	sy
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	e7fe      	b.n	8002a0e <prvProcessReceivedCommands+0x112>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	699a      	ldr	r2, [r3, #24]
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	18d1      	adds	r1, r2, r3
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	69f8      	ldr	r0, [r7, #28]
 8002a1e:	f7ff ff2b 	bl	8002878 <prvInsertTimerInActiveList>
                        break;
 8002a22:	e015      	b.n	8002a50 <prvProcessReceivedCommands+0x154>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d103      	bne.n	8002a3a <prvProcessReceivedCommands+0x13e>
                            {
                                vPortFree( pxTimer );
 8002a32:	69f8      	ldr	r0, [r7, #28]
 8002a34:	f7fe f85e 	bl	8000af4 <vPortFree>
 8002a38:	e00a      	b.n	8002a50 <prvProcessReceivedCommands+0x154>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a40:	f023 0301 	bic.w	r3, r3, #1
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002a4c:	e000      	b.n	8002a50 <prvProcessReceivedCommands+0x154>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002a4e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002a50:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <prvProcessReceivedCommands+0x174>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f107 0108 	add.w	r1, r7, #8
 8002a58:	2200      	movs	r2, #0
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fe fa54 	bl	8000f08 <xQueueReceive>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f47f af4e 	bne.w	8002904 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002a68:	bf00      	nop
 8002a6a:	3720      	adds	r7, #32
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20012d90 	.word	0x20012d90

08002a74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002a7a:	e009      	b.n	8002a90 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002a7c:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <prvSwitchTimerLists+0x44>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	607b      	str	r3, [r7, #4]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002a86:	f04f 31ff 	mov.w	r1, #4294967295
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff fe20 	bl	80026d0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002a90:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <prvSwitchTimerLists+0x44>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f0      	bne.n	8002a7c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002a9a:	4b07      	ldr	r3, [pc, #28]	; (8002ab8 <prvSwitchTimerLists+0x44>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	603b      	str	r3, [r7, #0]
        pxCurrentTimerList = pxOverflowTimerList;
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <prvSwitchTimerLists+0x48>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <prvSwitchTimerLists+0x44>)
 8002aa6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002aa8:	4a04      	ldr	r2, [pc, #16]	; (8002abc <prvSwitchTimerLists+0x48>)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	6013      	str	r3, [r2, #0]
    }
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20012d88 	.word	0x20012d88
 8002abc:	20012d8c 	.word	0x20012d8c

08002ac0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002ac4:	f7fd fe44 	bl	8000750 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002ac8:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <prvCheckForValidListAndQueue+0x54>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d11d      	bne.n	8002b0c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002ad0:	4811      	ldr	r0, [pc, #68]	; (8002b18 <prvCheckForValidListAndQueue+0x58>)
 8002ad2:	f7fd fc85 	bl	80003e0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002ad6:	4811      	ldr	r0, [pc, #68]	; (8002b1c <prvCheckForValidListAndQueue+0x5c>)
 8002ad8:	f7fd fc82 	bl	80003e0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002adc:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <prvCheckForValidListAndQueue+0x60>)
 8002ade:	4a0e      	ldr	r2, [pc, #56]	; (8002b18 <prvCheckForValidListAndQueue+0x58>)
 8002ae0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002ae2:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <prvCheckForValidListAndQueue+0x64>)
 8002ae4:	4a0d      	ldr	r2, [pc, #52]	; (8002b1c <prvCheckForValidListAndQueue+0x5c>)
 8002ae6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002ae8:	2200      	movs	r2, #0
 8002aea:	210c      	movs	r1, #12
 8002aec:	200a      	movs	r0, #10
 8002aee:	f7fe f997 	bl	8000e20 <xQueueGenericCreate>
 8002af2:	4602      	mov	r2, r0
 8002af4:	4b07      	ldr	r3, [pc, #28]	; (8002b14 <prvCheckForValidListAndQueue+0x54>)
 8002af6:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <prvCheckForValidListAndQueue+0x54>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002b00:	4b04      	ldr	r3, [pc, #16]	; (8002b14 <prvCheckForValidListAndQueue+0x54>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4908      	ldr	r1, [pc, #32]	; (8002b28 <prvCheckForValidListAndQueue+0x68>)
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe fba0 	bl	800124c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002b0c:	f7fd fe4e 	bl	80007ac <vPortExitCritical>
    }
 8002b10:	bf00      	nop
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	20012d90 	.word	0x20012d90
 8002b18:	20012d60 	.word	0x20012d60
 8002b1c:	20012d74 	.word	0x20012d74
 8002b20:	20012d88 	.word	0x20012d88
 8002b24:	20012d8c 	.word	0x20012d8c
 8002b28:	08004910 	.word	0x08004910

08002b2c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8002b32:	4b21      	ldr	r3, [pc, #132]	; (8002bb8 <_DoInit+0x8c>)
 8002b34:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2203      	movs	r2, #3
 8002b3a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2203      	movs	r2, #3
 8002b40:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a1d      	ldr	r2, [pc, #116]	; (8002bbc <_DoInit+0x90>)
 8002b46:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a1d      	ldr	r2, [pc, #116]	; (8002bc0 <_DoInit+0x94>)
 8002b4c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b54:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a14      	ldr	r2, [pc, #80]	; (8002bbc <_DoInit+0x90>)
 8002b6c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a14      	ldr	r2, [pc, #80]	; (8002bc4 <_DoInit+0x98>)
 8002b72:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2210      	movs	r2, #16
 8002b78:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3307      	adds	r3, #7
 8002b90:	4a0d      	ldr	r2, [pc, #52]	; (8002bc8 <_DoInit+0x9c>)
 8002b92:	6810      	ldr	r0, [r2, #0]
 8002b94:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a0c      	ldr	r2, [pc, #48]	; (8002bcc <_DoInit+0xa0>)
 8002b9a:	6810      	ldr	r0, [r2, #0]
 8002b9c:	6018      	str	r0, [r3, #0]
 8002b9e:	8891      	ldrh	r1, [r2, #4]
 8002ba0:	7992      	ldrb	r2, [r2, #6]
 8002ba2:	8099      	strh	r1, [r3, #4]
 8002ba4:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	719a      	strb	r2, [r3, #6]
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	200153b8 	.word	0x200153b8
 8002bbc:	08004918 	.word	0x08004918
 8002bc0:	20012d9c 	.word	0x20012d9c
 8002bc4:	2001319c 	.word	0x2001319c
 8002bc8:	08004924 	.word	0x08004924
 8002bcc:	08004928 	.word	0x08004928

08002bd0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08a      	sub	sp, #40	; 0x28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8002bdc:	4b3c      	ldr	r3, [pc, #240]	; (8002cd0 <SEGGER_RTT_ReadNoLock+0x100>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <SEGGER_RTT_ReadNoLock+0x18>
 8002be4:	f7ff ffa2 	bl	8002b2c <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	4613      	mov	r3, r2
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	4413      	add	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	3360      	adds	r3, #96	; 0x60
 8002bf4:	4a36      	ldr	r2, [pc, #216]	; (8002cd0 <SEGGER_RTT_ReadNoLock+0x100>)
 8002bf6:	4413      	add	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002c0e:	6a3a      	ldr	r2, [r7, #32]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d92a      	bls.n	8002c6c <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4293      	cmp	r3, r2
 8002c26:	bf28      	it	cs
 8002c28:	4613      	movcs	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	4413      	add	r3, r2
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4619      	mov	r1, r3
 8002c38:	69f8      	ldr	r0, [r7, #28]
 8002c3a:	f001 fe42 	bl	80048c2 <memcpy>
    NumBytesRead += NumBytesRem;
 8002c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	4413      	add	r3, r2
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8002c46:	69fa      	ldr	r2, [r7, #28]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002c56:	6a3a      	ldr	r2, [r7, #32]
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d101      	bne.n	8002c6c <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	bf28      	it	cs
 8002c7c:	4613      	movcs	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d018      	beq.n	8002cb8 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4619      	mov	r1, r3
 8002c92:	69f8      	ldr	r0, [r7, #28]
 8002c94:	f001 fe15 	bl	80048c2 <memcpy>
    NumBytesRead += NumBytesRem;
 8002c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8002ca0:	69fa      	ldr	r2, [r7, #28]
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002cb0:	6a3a      	ldr	r2, [r7, #32]
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d002      	beq.n	8002cc4 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	6a3a      	ldr	r2, [r7, #32]
 8002cc2:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3728      	adds	r7, #40	; 0x28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	200153b8 	.word	0x200153b8

08002cd4 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08a      	sub	sp, #40	; 0x28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	4613      	mov	r3, r2
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	4a3f      	ldr	r2, [pc, #252]	; (8002df0 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8002cf2:	4413      	add	r3, r2
 8002cf4:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8002d02:	69fa      	ldr	r2, [r7, #28]
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d854      	bhi.n	8002db4 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d30f      	bcc.n	8002d3e <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	4413      	add	r3, r2
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f001 fdc9 	bl	80048c2 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	441a      	add	r2, r3
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e054      	b.n	8002de8 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	4413      	add	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d34b      	bcc.n	8002de6 <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d90e      	bls.n	8002d7e <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	4413      	add	r3, r2
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f001 fda8 	bl	80048c2 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	441a      	add	r2, r3
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	60da      	str	r2, [r3, #12]
 8002d7c:	e018      	b.n	8002db0 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	4413      	add	r3, r2
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f001 fd99 	bl	80048c2 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	6858      	ldr	r0, [r3, #4]
 8002d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	18d1      	adds	r1, r2, r3
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	461a      	mov	r2, r3
 8002da2:	f001 fd8e 	bl	80048c2 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad2      	subs	r2, r2, r3
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e019      	b.n	8002de8 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8002db4:	69fa      	ldr	r2, [r7, #28]
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d30f      	bcc.n	8002de6 <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	4413      	add	r3, r2
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f001 fd75 	bl	80048c2 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	441a      	add	r2, r3
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3728      	adds	r7, #40	; 0x28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	200153b8 	.word	0x200153b8

08002df4 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8002e02:	4b30      	ldr	r3, [pc, #192]	; (8002ec4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8002e0a:	f7ff fe8f 	bl	8002b2c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8002e0e:	4b2d      	ldr	r3, [pc, #180]	; (8002ec4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	461a      	mov	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d94c      	bls.n	8002eb4 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8002e1a:	f3ef 8311 	mrs	r3, BASEPRI
 8002e1e:	f04f 0120 	mov.w	r1, #32
 8002e22:	f381 8811 	msr	BASEPRI, r1
 8002e26:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d032      	beq.n	8002e94 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8002e2e:	4925      	ldr	r1, [pc, #148]	; (8002ec4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	4613      	mov	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	440b      	add	r3, r1
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002e42:	4920      	ldr	r1, [pc, #128]	; (8002ec4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	4613      	mov	r3, r2
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	4413      	add	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	440b      	add	r3, r1
 8002e52:	3304      	adds	r3, #4
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002e58:	491a      	ldr	r1, [pc, #104]	; (8002ec4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	4413      	add	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	440b      	add	r3, r1
 8002e66:	3320      	adds	r3, #32
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8002e6c:	4915      	ldr	r1, [pc, #84]	; (8002ec4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4613      	mov	r3, r2
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4413      	add	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	440b      	add	r3, r1
 8002e7a:	3328      	adds	r3, #40	; 0x28
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8002e80:	4910      	ldr	r1, [pc, #64]	; (8002ec4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4613      	mov	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4413      	add	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	440b      	add	r3, r1
 8002e8e:	3324      	adds	r3, #36	; 0x24
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8002e94:	490b      	ldr	r1, [pc, #44]	; (8002ec4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	4413      	add	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	440b      	add	r3, r1
 8002ea2:	332c      	adds	r3, #44	; 0x2c
 8002ea4:	6a3a      	ldr	r2, [r7, #32]
 8002ea6:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	e002      	b.n	8002eba <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8002eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb8:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002eba:	697b      	ldr	r3, [r7, #20]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	200153b8 	.word	0x200153b8

08002ec8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
 8002ed4:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8002ed6:	4b30      	ldr	r3, [pc, #192]	; (8002f98 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8002ede:	f7ff fe25 	bl	8002b2c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8002ee2:	4b2d      	ldr	r3, [pc, #180]	; (8002f98 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d94b      	bls.n	8002f86 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8002eee:	f3ef 8311 	mrs	r3, BASEPRI
 8002ef2:	f04f 0120 	mov.w	r1, #32
 8002ef6:	f381 8811 	msr	BASEPRI, r1
 8002efa:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d031      	beq.n	8002f66 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8002f02:	4925      	ldr	r1, [pc, #148]	; (8002f98 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4613      	mov	r3, r2
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	4413      	add	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	440b      	add	r3, r1
 8002f10:	3360      	adds	r3, #96	; 0x60
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8002f16:	4920      	ldr	r1, [pc, #128]	; (8002f98 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	4413      	add	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	440b      	add	r3, r1
 8002f24:	3364      	adds	r3, #100	; 0x64
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8002f2a:	491b      	ldr	r1, [pc, #108]	; (8002f98 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4413      	add	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	440b      	add	r3, r1
 8002f38:	3368      	adds	r3, #104	; 0x68
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8002f3e:	4916      	ldr	r1, [pc, #88]	; (8002f98 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4613      	mov	r3, r2
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	4413      	add	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	440b      	add	r3, r1
 8002f4c:	3370      	adds	r3, #112	; 0x70
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8002f52:	4911      	ldr	r1, [pc, #68]	; (8002f98 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	4613      	mov	r3, r2
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	4413      	add	r3, r2
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	440b      	add	r3, r1
 8002f60:	336c      	adds	r3, #108	; 0x6c
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8002f66:	490c      	ldr	r1, [pc, #48]	; (8002f98 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4413      	add	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	440b      	add	r3, r1
 8002f74:	3374      	adds	r3, #116	; 0x74
 8002f76:	6a3a      	ldr	r2, [r7, #32]
 8002f78:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	e002      	b.n	8002f8c <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8002f86:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8a:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002f8c:	697b      	ldr	r3, [r7, #20]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	200153b8 	.word	0x200153b8

08002f9c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002fac:	e002      	b.n	8002fb4 <_EncodeStr+0x18>
    Len++;
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4413      	add	r3, r2
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1f6      	bne.n	8002fae <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d901      	bls.n	8002fcc <_EncodeStr+0x30>
    Len = Limit;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	2bfe      	cmp	r3, #254	; 0xfe
 8002fd0:	d806      	bhi.n	8002fe0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	60fa      	str	r2, [r7, #12]
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	701a      	strb	r2, [r3, #0]
 8002fde:	e011      	b.n	8003004 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	60fa      	str	r2, [r7, #12]
 8002fe6:	22ff      	movs	r2, #255	; 0xff
 8002fe8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	60fa      	str	r2, [r7, #12]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	60fa      	str	r2, [r7, #12]
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	0a12      	lsrs	r2, r2, #8
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003008:	e00a      	b.n	8003020 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	60fa      	str	r2, [r7, #12]
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	1c51      	adds	r1, r2, #1
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	7812      	ldrb	r2, [r2, #0]
 8003018:	701a      	strb	r2, [r3, #0]
    n++;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	3301      	adds	r3, #1
 800301e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	429a      	cmp	r2, r3
 8003026:	d3f0      	bcc.n	800300a <_EncodeStr+0x6e>
  }
  return pPayload;
 8003028:	68fb      	ldr	r3, [r7, #12]
}
 800302a:	4618      	mov	r0, r3
 800302c:	371c      	adds	r7, #28
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3304      	adds	r3, #4
}
 8003042:	4618      	mov	r0, r3
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003054:	1cfb      	adds	r3, r7, #3
 8003056:	2201      	movs	r2, #1
 8003058:	4619      	mov	r1, r3
 800305a:	2001      	movs	r0, #1
 800305c:	f7ff fdb8 	bl	8002bd0 <SEGGER_RTT_ReadNoLock>
 8003060:	4603      	mov	r3, r0
 8003062:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	dd47      	ble.n	80030fa <_HandleIncomingPacket+0xac>
    switch (Cmd) {
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	2b04      	cmp	r3, #4
 800306e:	d01a      	beq.n	80030a6 <_HandleIncomingPacket+0x58>
 8003070:	2b04      	cmp	r3, #4
 8003072:	dc06      	bgt.n	8003082 <_HandleIncomingPacket+0x34>
 8003074:	2b02      	cmp	r3, #2
 8003076:	d010      	beq.n	800309a <_HandleIncomingPacket+0x4c>
 8003078:	2b02      	cmp	r3, #2
 800307a:	dc11      	bgt.n	80030a0 <_HandleIncomingPacket+0x52>
 800307c:	2b01      	cmp	r3, #1
 800307e:	d009      	beq.n	8003094 <_HandleIncomingPacket+0x46>
 8003080:	e02d      	b.n	80030de <_HandleIncomingPacket+0x90>
 8003082:	2b06      	cmp	r3, #6
 8003084:	d015      	beq.n	80030b2 <_HandleIncomingPacket+0x64>
 8003086:	2b06      	cmp	r3, #6
 8003088:	db10      	blt.n	80030ac <_HandleIncomingPacket+0x5e>
 800308a:	2b07      	cmp	r3, #7
 800308c:	d014      	beq.n	80030b8 <_HandleIncomingPacket+0x6a>
 800308e:	2b80      	cmp	r3, #128	; 0x80
 8003090:	d015      	beq.n	80030be <_HandleIncomingPacket+0x70>
 8003092:	e024      	b.n	80030de <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003094:	f000 fb82 	bl	800379c <SEGGER_SYSVIEW_Start>
      break;
 8003098:	e02f      	b.n	80030fa <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800309a:	f000 fc3b 	bl	8003914 <SEGGER_SYSVIEW_Stop>
      break;
 800309e:	e02c      	b.n	80030fa <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80030a0:	f000 fe16 	bl	8003cd0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80030a4:	e029      	b.n	80030fa <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80030a6:	f000 fddb 	bl	8003c60 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80030aa:	e026      	b.n	80030fa <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80030ac:	f000 fc58 	bl	8003960 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80030b0:	e023      	b.n	80030fa <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80030b2:	f000 ffd1 	bl	8004058 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80030b6:	e020      	b.n	80030fa <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80030b8:	f000 ffb0 	bl	800401c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80030bc:	e01d      	b.n	80030fa <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80030be:	1cfb      	adds	r3, r7, #3
 80030c0:	2201      	movs	r2, #1
 80030c2:	4619      	mov	r1, r3
 80030c4:	2001      	movs	r0, #1
 80030c6:	f7ff fd83 	bl	8002bd0 <SEGGER_RTT_ReadNoLock>
 80030ca:	4603      	mov	r3, r0
 80030cc:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	dd0f      	ble.n	80030f4 <_HandleIncomingPacket+0xa6>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80030d4:	78fb      	ldrb	r3, [r7, #3]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 ff20 	bl	8003f1c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80030dc:	e00a      	b.n	80030f4 <_HandleIncomingPacket+0xa6>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80030de:	78fb      	ldrb	r3, [r7, #3]
 80030e0:	b25b      	sxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	da08      	bge.n	80030f8 <_HandleIncomingPacket+0xaa>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80030e6:	1cfb      	adds	r3, r7, #3
 80030e8:	2201      	movs	r2, #1
 80030ea:	4619      	mov	r1, r3
 80030ec:	2001      	movs	r0, #1
 80030ee:	f7ff fd6f 	bl	8002bd0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80030f2:	e001      	b.n	80030f8 <_HandleIncomingPacket+0xaa>
      break;
 80030f4:	bf00      	nop
 80030f6:	e000      	b.n	80030fa <_HandleIncomingPacket+0xac>
      break;
 80030f8:	bf00      	nop
    }
  }
}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003104:	b580      	push	{r7, lr}
 8003106:	b08c      	sub	sp, #48	; 0x30
 8003108:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800310a:	2301      	movs	r3, #1
 800310c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800310e:	1d3b      	adds	r3, r7, #4
 8003110:	3301      	adds	r3, #1
 8003112:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003118:	4b30      	ldr	r3, [pc, #192]	; (80031dc <_TrySendOverflowPacket+0xd8>)
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	62bb      	str	r3, [r7, #40]	; 0x28
 800311e:	e00b      	b.n	8003138 <_TrySendOverflowPacket+0x34>
 8003120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	701a      	strb	r2, [r3, #0]
 8003132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003134:	09db      	lsrs	r3, r3, #7
 8003136:	62bb      	str	r3, [r7, #40]	; 0x28
 8003138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313a:	2b7f      	cmp	r3, #127	; 0x7f
 800313c:	d8f0      	bhi.n	8003120 <_TrySendOverflowPacket+0x1c>
 800313e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003144:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	701a      	strb	r2, [r3, #0]
 800314a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800314e:	4b24      	ldr	r3, [pc, #144]	; (80031e0 <_TrySendOverflowPacket+0xdc>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003154:	4b21      	ldr	r3, [pc, #132]	; (80031dc <_TrySendOverflowPacket+0xd8>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	623b      	str	r3, [r7, #32]
 8003166:	e00b      	b.n	8003180 <_TrySendOverflowPacket+0x7c>
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	627a      	str	r2, [r7, #36]	; 0x24
 800316e:	6a3a      	ldr	r2, [r7, #32]
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	701a      	strb	r2, [r3, #0]
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	09db      	lsrs	r3, r3, #7
 800317e:	623b      	str	r3, [r7, #32]
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	2b7f      	cmp	r3, #127	; 0x7f
 8003184:	d8f0      	bhi.n	8003168 <_TrySendOverflowPacket+0x64>
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	627a      	str	r2, [r7, #36]	; 0x24
 800318c:	6a3a      	ldr	r2, [r7, #32]
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	1d3b      	adds	r3, r7, #4
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	461a      	mov	r2, r3
 800319e:	1d3b      	adds	r3, r7, #4
 80031a0:	4619      	mov	r1, r3
 80031a2:	2001      	movs	r0, #1
 80031a4:	f7ff fd96 	bl	8002cd4 <SEGGER_RTT_WriteSkipNoLock>
 80031a8:	4603      	mov	r3, r0
 80031aa:	613b      	str	r3, [r7, #16]
  if (Status) {
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d009      	beq.n	80031c6 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80031b2:	4a0a      	ldr	r2, [pc, #40]	; (80031dc <_TrySendOverflowPacket+0xd8>)
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80031b8:	4b08      	ldr	r3, [pc, #32]	; (80031dc <_TrySendOverflowPacket+0xd8>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	3b01      	subs	r3, #1
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	4b06      	ldr	r3, [pc, #24]	; (80031dc <_TrySendOverflowPacket+0xd8>)
 80031c2:	701a      	strb	r2, [r3, #0]
 80031c4:	e004      	b.n	80031d0 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80031c6:	4b05      	ldr	r3, [pc, #20]	; (80031dc <_TrySendOverflowPacket+0xd8>)
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	3301      	adds	r3, #1
 80031cc:	4a03      	ldr	r2, [pc, #12]	; (80031dc <_TrySendOverflowPacket+0xd8>)
 80031ce:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80031d0:	693b      	ldr	r3, [r7, #16]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3730      	adds	r7, #48	; 0x30
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	200151b4 	.word	0x200151b4
 80031e0:	e0001004 	.word	0xe0001004

080031e4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08a      	sub	sp, #40	; 0x28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80031f0:	4b62      	ldr	r3, [pc, #392]	; (800337c <_SendPacket+0x198>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d010      	beq.n	800321a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80031f8:	4b60      	ldr	r3, [pc, #384]	; (800337c <_SendPacket+0x198>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 809f 	beq.w	8003340 <_SendPacket+0x15c>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003202:	4b5e      	ldr	r3, [pc, #376]	; (800337c <_SendPacket+0x198>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d108      	bne.n	800321c <_SendPacket+0x38>
    _TrySendOverflowPacket();
 800320a:	f7ff ff7b 	bl	8003104 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800320e:	4b5b      	ldr	r3, [pc, #364]	; (800337c <_SendPacket+0x198>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b01      	cmp	r3, #1
 8003214:	f040 8096 	bne.w	8003344 <_SendPacket+0x160>
 8003218:	e000      	b.n	800321c <_SendPacket+0x38>
    goto Send;
 800321a:	bf00      	nop
Send:
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b1f      	cmp	r3, #31
 8003220:	d809      	bhi.n	8003236 <_SendPacket+0x52>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003222:	4b56      	ldr	r3, [pc, #344]	; (800337c <_SendPacket+0x198>)
 8003224:	69da      	ldr	r2, [r3, #28]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	fa22 f303 	lsr.w	r3, r2, r3
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	f040 8089 	bne.w	8003348 <_SendPacket+0x164>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b17      	cmp	r3, #23
 800323a:	d807      	bhi.n	800324c <_SendPacket+0x68>
    *--pStartPacket = EventId;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	3b01      	subs	r3, #1
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	b2da      	uxtb	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	701a      	strb	r2, [r3, #0]
 800324a:	e03d      	b.n	80032c8 <_SendPacket+0xe4>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	2b7f      	cmp	r3, #127	; 0x7f
 8003258:	d912      	bls.n	8003280 <_SendPacket+0x9c>
      *--pStartPacket = (NumBytes >> 7);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	3b01      	subs	r3, #1
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	09db      	lsrs	r3, r3, #7
 8003264:	b2da      	uxtb	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	3b01      	subs	r3, #1
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003278:	b2da      	uxtb	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	701a      	strb	r2, [r3, #0]
 800327e:	e006      	b.n	800328e <_SendPacket+0xaa>
    } else {
      *--pStartPacket = NumBytes;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3b01      	subs	r3, #1
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	b2da      	uxtb	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b7f      	cmp	r3, #127	; 0x7f
 8003292:	d912      	bls.n	80032ba <_SendPacket+0xd6>
      *--pStartPacket = (EventId >> 7);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	3b01      	subs	r3, #1
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	09db      	lsrs	r3, r3, #7
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	701a      	strb	r2, [r3, #0]
 80032b8:	e006      	b.n	80032c8 <_SendPacket+0xe4>
    } else {
      *--pStartPacket = EventId;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	3b01      	subs	r3, #1
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80032c8:	4b2d      	ldr	r3, [pc, #180]	; (8003380 <_SendPacket+0x19c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80032ce:	4b2b      	ldr	r3, [pc, #172]	; (800337c <_SendPacket+0x198>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	627b      	str	r3, [r7, #36]	; 0x24
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	623b      	str	r3, [r7, #32]
 80032e0:	e00b      	b.n	80032fa <_SendPacket+0x116>
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	627a      	str	r2, [r7, #36]	; 0x24
 80032e8:	6a3a      	ldr	r2, [r7, #32]
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	701a      	strb	r2, [r3, #0]
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	09db      	lsrs	r3, r3, #7
 80032f8:	623b      	str	r3, [r7, #32]
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	2b7f      	cmp	r3, #127	; 0x7f
 80032fe:	d8f0      	bhi.n	80032e2 <_SendPacket+0xfe>
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	1c5a      	adds	r2, r3, #1
 8003304:	627a      	str	r2, [r7, #36]	; 0x24
 8003306:	6a3a      	ldr	r2, [r7, #32]
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	701a      	strb	r2, [r3, #0]
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	461a      	mov	r2, r3
 8003318:	68f9      	ldr	r1, [r7, #12]
 800331a:	2001      	movs	r0, #1
 800331c:	f7ff fcda 	bl	8002cd4 <SEGGER_RTT_WriteSkipNoLock>
 8003320:	4603      	mov	r3, r0
 8003322:	613b      	str	r3, [r7, #16]
  if (Status) {
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <_SendPacket+0x14e>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800332a:	4a14      	ldr	r2, [pc, #80]	; (800337c <_SendPacket+0x198>)
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	60d3      	str	r3, [r2, #12]
 8003330:	e00b      	b.n	800334a <_SendPacket+0x166>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003332:	4b12      	ldr	r3, [pc, #72]	; (800337c <_SendPacket+0x198>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	3301      	adds	r3, #1
 8003338:	b2da      	uxtb	r2, r3
 800333a:	4b10      	ldr	r3, [pc, #64]	; (800337c <_SendPacket+0x198>)
 800333c:	701a      	strb	r2, [r3, #0]
 800333e:	e004      	b.n	800334a <_SendPacket+0x166>
    goto SendDone;
 8003340:	bf00      	nop
 8003342:	e002      	b.n	800334a <_SendPacket+0x166>
      goto SendDone;
 8003344:	bf00      	nop
 8003346:	e000      	b.n	800334a <_SendPacket+0x166>
      goto SendDone;
 8003348:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800334a:	4b0e      	ldr	r3, [pc, #56]	; (8003384 <_SendPacket+0x1a0>)
 800334c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003350:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <_SendPacket+0x1a0>)
 8003352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003356:	429a      	cmp	r2, r3
 8003358:	d00b      	beq.n	8003372 <_SendPacket+0x18e>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800335a:	4b08      	ldr	r3, [pc, #32]	; (800337c <_SendPacket+0x198>)
 800335c:	789b      	ldrb	r3, [r3, #2]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d107      	bne.n	8003372 <_SendPacket+0x18e>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003362:	4b06      	ldr	r3, [pc, #24]	; (800337c <_SendPacket+0x198>)
 8003364:	2201      	movs	r2, #1
 8003366:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003368:	f7ff fe71 	bl	800304e <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800336c:	4b03      	ldr	r3, [pc, #12]	; (800337c <_SendPacket+0x198>)
 800336e:	2200      	movs	r2, #0
 8003370:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003372:	bf00      	nop
 8003374:	3728      	adds	r7, #40	; 0x28
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	200151b4 	.word	0x200151b4
 8003380:	e0001004 	.word	0xe0001004
 8003384:	200153b8 	.word	0x200153b8

08003388 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af02      	add	r7, sp, #8
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
 8003394:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003396:	2300      	movs	r3, #0
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800339e:	4a14      	ldr	r2, [pc, #80]	; (80033f0 <SEGGER_SYSVIEW_Init+0x68>)
 80033a0:	4914      	ldr	r1, [pc, #80]	; (80033f4 <SEGGER_SYSVIEW_Init+0x6c>)
 80033a2:	2001      	movs	r0, #1
 80033a4:	f7ff fd26 	bl	8002df4 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80033a8:	2300      	movs	r3, #0
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	2308      	movs	r3, #8
 80033ae:	4a12      	ldr	r2, [pc, #72]	; (80033f8 <SEGGER_SYSVIEW_Init+0x70>)
 80033b0:	4910      	ldr	r1, [pc, #64]	; (80033f4 <SEGGER_SYSVIEW_Init+0x6c>)
 80033b2:	2001      	movs	r0, #1
 80033b4:	f7ff fd88 	bl	8002ec8 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80033b8:	4b10      	ldr	r3, [pc, #64]	; (80033fc <SEGGER_SYSVIEW_Init+0x74>)
 80033ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033be:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80033c0:	4b0f      	ldr	r3, [pc, #60]	; (8003400 <SEGGER_SYSVIEW_Init+0x78>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a0d      	ldr	r2, [pc, #52]	; (80033fc <SEGGER_SYSVIEW_Init+0x74>)
 80033c6:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80033c8:	4a0c      	ldr	r2, [pc, #48]	; (80033fc <SEGGER_SYSVIEW_Init+0x74>)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80033ce:	4a0b      	ldr	r2, [pc, #44]	; (80033fc <SEGGER_SYSVIEW_Init+0x74>)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80033d4:	4a09      	ldr	r2, [pc, #36]	; (80033fc <SEGGER_SYSVIEW_Init+0x74>)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80033da:	4a08      	ldr	r2, [pc, #32]	; (80033fc <SEGGER_SYSVIEW_Init+0x74>)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80033e0:	4b06      	ldr	r3, [pc, #24]	; (80033fc <SEGGER_SYSVIEW_Init+0x74>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80033e6:	bf00      	nop
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	200131ac 	.word	0x200131ac
 80033f4:	08004930 	.word	0x08004930
 80033f8:	200151ac 	.word	0x200151ac
 80033fc:	200151b4 	.word	0x200151b4
 8003400:	e0001004 	.word	0xe0001004

08003404 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800340c:	4a04      	ldr	r2, [pc, #16]	; (8003420 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6113      	str	r3, [r2, #16]
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	200151b4 	.word	0x200151b4

08003424 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800342c:	f3ef 8311 	mrs	r3, BASEPRI
 8003430:	f04f 0120 	mov.w	r1, #32
 8003434:	f381 8811 	msr	BASEPRI, r1
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	4808      	ldr	r0, [pc, #32]	; (800345c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800343c:	f7ff fdfb 	bl	8003036 <_PreparePacket>
 8003440:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68b9      	ldr	r1, [r7, #8]
 8003446:	68b8      	ldr	r0, [r7, #8]
 8003448:	f7ff fecc 	bl	80031e4 <_SendPacket>
  RECORD_END();
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f383 8811 	msr	BASEPRI, r3
}
 8003452:	bf00      	nop
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	200151e4 	.word	0x200151e4

08003460 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800346a:	f3ef 8311 	mrs	r3, BASEPRI
 800346e:	f04f 0120 	mov.w	r1, #32
 8003472:	f381 8811 	msr	BASEPRI, r1
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	4816      	ldr	r0, [pc, #88]	; (80034d4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800347a:	f7ff fddc 	bl	8003036 <_PreparePacket>
 800347e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	61fb      	str	r3, [r7, #28]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	61bb      	str	r3, [r7, #24]
 800348c:	e00b      	b.n	80034a6 <SEGGER_SYSVIEW_RecordU32+0x46>
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	61fa      	str	r2, [r7, #28]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	701a      	strb	r2, [r3, #0]
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	09db      	lsrs	r3, r3, #7
 80034a4:	61bb      	str	r3, [r7, #24]
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	2b7f      	cmp	r3, #127	; 0x7f
 80034aa:	d8f0      	bhi.n	800348e <SEGGER_SYSVIEW_RecordU32+0x2e>
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	61fa      	str	r2, [r7, #28]
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	701a      	strb	r2, [r3, #0]
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	68f9      	ldr	r1, [r7, #12]
 80034c0:	6938      	ldr	r0, [r7, #16]
 80034c2:	f7ff fe8f 	bl	80031e4 <_SendPacket>
  RECORD_END();
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f383 8811 	msr	BASEPRI, r3
}
 80034cc:	bf00      	nop
 80034ce:	3720      	adds	r7, #32
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	200151e4 	.word	0x200151e4

080034d8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08c      	sub	sp, #48	; 0x30
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80034e4:	f3ef 8311 	mrs	r3, BASEPRI
 80034e8:	f04f 0120 	mov.w	r1, #32
 80034ec:	f381 8811 	msr	BASEPRI, r1
 80034f0:	61fb      	str	r3, [r7, #28]
 80034f2:	4825      	ldr	r0, [pc, #148]	; (8003588 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80034f4:	f7ff fd9f 	bl	8003036 <_PreparePacket>
 80034f8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	62bb      	str	r3, [r7, #40]	; 0x28
 8003506:	e00b      	b.n	8003520 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800350e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	701a      	strb	r2, [r3, #0]
 800351a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351c:	09db      	lsrs	r3, r3, #7
 800351e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003522:	2b7f      	cmp	r3, #127	; 0x7f
 8003524:	d8f0      	bhi.n	8003508 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800352c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	701a      	strb	r2, [r3, #0]
 8003532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003534:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	627b      	str	r3, [r7, #36]	; 0x24
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	623b      	str	r3, [r7, #32]
 800353e:	e00b      	b.n	8003558 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	627a      	str	r2, [r7, #36]	; 0x24
 8003546:	6a3a      	ldr	r2, [r7, #32]
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	701a      	strb	r2, [r3, #0]
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	09db      	lsrs	r3, r3, #7
 8003556:	623b      	str	r3, [r7, #32]
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	2b7f      	cmp	r3, #127	; 0x7f
 800355c:	d8f0      	bhi.n	8003540 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	627a      	str	r2, [r7, #36]	; 0x24
 8003564:	6a3a      	ldr	r2, [r7, #32]
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	701a      	strb	r2, [r3, #0]
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	6979      	ldr	r1, [r7, #20]
 8003572:	69b8      	ldr	r0, [r7, #24]
 8003574:	f7ff fe36 	bl	80031e4 <_SendPacket>
  RECORD_END();
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f383 8811 	msr	BASEPRI, r3
}
 800357e:	bf00      	nop
 8003580:	3730      	adds	r7, #48	; 0x30
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	200151e4 	.word	0x200151e4

0800358c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800358c:	b580      	push	{r7, lr}
 800358e:	b08e      	sub	sp, #56	; 0x38
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800359a:	f3ef 8311 	mrs	r3, BASEPRI
 800359e:	f04f 0120 	mov.w	r1, #32
 80035a2:	f381 8811 	msr	BASEPRI, r1
 80035a6:	61fb      	str	r3, [r7, #28]
 80035a8:	4832      	ldr	r0, [pc, #200]	; (8003674 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80035aa:	f7ff fd44 	bl	8003036 <_PreparePacket>
 80035ae:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	637b      	str	r3, [r7, #52]	; 0x34
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	633b      	str	r3, [r7, #48]	; 0x30
 80035bc:	e00b      	b.n	80035d6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80035be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	637a      	str	r2, [r7, #52]	; 0x34
 80035c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	701a      	strb	r2, [r3, #0]
 80035d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d2:	09db      	lsrs	r3, r3, #7
 80035d4:	633b      	str	r3, [r7, #48]	; 0x30
 80035d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d8:	2b7f      	cmp	r3, #127	; 0x7f
 80035da:	d8f0      	bhi.n	80035be <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80035dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035de:	1c5a      	adds	r2, r3, #1
 80035e0:	637a      	str	r2, [r7, #52]	; 0x34
 80035e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	701a      	strb	r2, [r3, #0]
 80035e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80035f4:	e00b      	b.n	800360e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80035f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	701a      	strb	r2, [r3, #0]
 8003608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360a:	09db      	lsrs	r3, r3, #7
 800360c:	62bb      	str	r3, [r7, #40]	; 0x28
 800360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003610:	2b7f      	cmp	r3, #127	; 0x7f
 8003612:	d8f0      	bhi.n	80035f6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8003614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	62fa      	str	r2, [r7, #44]	; 0x2c
 800361a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	701a      	strb	r2, [r3, #0]
 8003620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003622:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	627b      	str	r3, [r7, #36]	; 0x24
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	623b      	str	r3, [r7, #32]
 800362c:	e00b      	b.n	8003646 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	627a      	str	r2, [r7, #36]	; 0x24
 8003634:	6a3a      	ldr	r2, [r7, #32]
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	701a      	strb	r2, [r3, #0]
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	09db      	lsrs	r3, r3, #7
 8003644:	623b      	str	r3, [r7, #32]
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	2b7f      	cmp	r3, #127	; 0x7f
 800364a:	d8f0      	bhi.n	800362e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	627a      	str	r2, [r7, #36]	; 0x24
 8003652:	6a3a      	ldr	r2, [r7, #32]
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	701a      	strb	r2, [r3, #0]
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	6979      	ldr	r1, [r7, #20]
 8003660:	69b8      	ldr	r0, [r7, #24]
 8003662:	f7ff fdbf 	bl	80031e4 <_SendPacket>
  RECORD_END();
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	f383 8811 	msr	BASEPRI, r3
}
 800366c:	bf00      	nop
 800366e:	3738      	adds	r7, #56	; 0x38
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	200151e4 	.word	0x200151e4

08003678 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003678:	b580      	push	{r7, lr}
 800367a:	b090      	sub	sp, #64	; 0x40
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
 8003684:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003686:	f3ef 8311 	mrs	r3, BASEPRI
 800368a:	f04f 0120 	mov.w	r1, #32
 800368e:	f381 8811 	msr	BASEPRI, r1
 8003692:	61fb      	str	r3, [r7, #28]
 8003694:	4840      	ldr	r0, [pc, #256]	; (8003798 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8003696:	f7ff fcce 	bl	8003036 <_PreparePacket>
 800369a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80036a8:	e00b      	b.n	80036c2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80036aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	701a      	strb	r2, [r3, #0]
 80036bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036be:	09db      	lsrs	r3, r3, #7
 80036c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80036c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c4:	2b7f      	cmp	r3, #127	; 0x7f
 80036c6:	d8f0      	bhi.n	80036aa <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80036c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	701a      	strb	r2, [r3, #0]
 80036d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	637b      	str	r3, [r7, #52]	; 0x34
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	633b      	str	r3, [r7, #48]	; 0x30
 80036e0:	e00b      	b.n	80036fa <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80036e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	637a      	str	r2, [r7, #52]	; 0x34
 80036e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ea:	b2d2      	uxtb	r2, r2
 80036ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	701a      	strb	r2, [r3, #0]
 80036f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f6:	09db      	lsrs	r3, r3, #7
 80036f8:	633b      	str	r3, [r7, #48]	; 0x30
 80036fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fc:	2b7f      	cmp	r3, #127	; 0x7f
 80036fe:	d8f0      	bhi.n	80036e2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8003700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	637a      	str	r2, [r7, #52]	; 0x34
 8003706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	701a      	strb	r2, [r3, #0]
 800370c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800370e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	62bb      	str	r3, [r7, #40]	; 0x28
 8003718:	e00b      	b.n	8003732 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800371a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	701a      	strb	r2, [r3, #0]
 800372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372e:	09db      	lsrs	r3, r3, #7
 8003730:	62bb      	str	r3, [r7, #40]	; 0x28
 8003732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003734:	2b7f      	cmp	r3, #127	; 0x7f
 8003736:	d8f0      	bhi.n	800371a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800373e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	701a      	strb	r2, [r3, #0]
 8003744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003746:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
 800374c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800374e:	623b      	str	r3, [r7, #32]
 8003750:	e00b      	b.n	800376a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	627a      	str	r2, [r7, #36]	; 0x24
 8003758:	6a3a      	ldr	r2, [r7, #32]
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	701a      	strb	r2, [r3, #0]
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	09db      	lsrs	r3, r3, #7
 8003768:	623b      	str	r3, [r7, #32]
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	2b7f      	cmp	r3, #127	; 0x7f
 800376e:	d8f0      	bhi.n	8003752 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	627a      	str	r2, [r7, #36]	; 0x24
 8003776:	6a3a      	ldr	r2, [r7, #32]
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	701a      	strb	r2, [r3, #0]
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	6979      	ldr	r1, [r7, #20]
 8003784:	69b8      	ldr	r0, [r7, #24]
 8003786:	f7ff fd2d 	bl	80031e4 <_SendPacket>
  RECORD_END();
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	f383 8811 	msr	BASEPRI, r3
}
 8003790:	bf00      	nop
 8003792:	3740      	adds	r7, #64	; 0x40
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	200151e4 	.word	0x200151e4

0800379c <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 800379c:	b580      	push	{r7, lr}
 800379e:	b08c      	sub	sp, #48	; 0x30
 80037a0:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 80037a2:	4b59      	ldr	r3, [pc, #356]	; (8003908 <SEGGER_SYSVIEW_Start+0x16c>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f040 80aa 	bne.w	8003900 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 80037ac:	4b56      	ldr	r3, [pc, #344]	; (8003908 <SEGGER_SYSVIEW_Start+0x16c>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80037b2:	f3ef 8311 	mrs	r3, BASEPRI
 80037b6:	f04f 0120 	mov.w	r1, #32
 80037ba:	f381 8811 	msr	BASEPRI, r1
 80037be:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80037c0:	220a      	movs	r2, #10
 80037c2:	4952      	ldr	r1, [pc, #328]	; (800390c <SEGGER_SYSVIEW_Start+0x170>)
 80037c4:	2001      	movs	r0, #1
 80037c6:	f7ff fa85 	bl	8002cd4 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80037d0:	200a      	movs	r0, #10
 80037d2:	f7ff fe27 	bl	8003424 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80037d6:	f3ef 8311 	mrs	r3, BASEPRI
 80037da:	f04f 0120 	mov.w	r1, #32
 80037de:	f381 8811 	msr	BASEPRI, r1
 80037e2:	60bb      	str	r3, [r7, #8]
 80037e4:	484a      	ldr	r0, [pc, #296]	; (8003910 <SEGGER_SYSVIEW_Start+0x174>)
 80037e6:	f7ff fc26 	bl	8003036 <_PreparePacket>
 80037ea:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037f4:	4b44      	ldr	r3, [pc, #272]	; (8003908 <SEGGER_SYSVIEW_Start+0x16c>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80037fa:	e00b      	b.n	8003814 <SEGGER_SYSVIEW_Start+0x78>
 80037fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	701a      	strb	r2, [r3, #0]
 800380e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003810:	09db      	lsrs	r3, r3, #7
 8003812:	62bb      	str	r3, [r7, #40]	; 0x28
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003816:	2b7f      	cmp	r3, #127	; 0x7f
 8003818:	d8f0      	bhi.n	80037fc <SEGGER_SYSVIEW_Start+0x60>
 800381a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	701a      	strb	r2, [r3, #0]
 8003826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003828:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	627b      	str	r3, [r7, #36]	; 0x24
 800382e:	4b36      	ldr	r3, [pc, #216]	; (8003908 <SEGGER_SYSVIEW_Start+0x16c>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	623b      	str	r3, [r7, #32]
 8003834:	e00b      	b.n	800384e <SEGGER_SYSVIEW_Start+0xb2>
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	627a      	str	r2, [r7, #36]	; 0x24
 800383c:	6a3a      	ldr	r2, [r7, #32]
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	701a      	strb	r2, [r3, #0]
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	09db      	lsrs	r3, r3, #7
 800384c:	623b      	str	r3, [r7, #32]
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	2b7f      	cmp	r3, #127	; 0x7f
 8003852:	d8f0      	bhi.n	8003836 <SEGGER_SYSVIEW_Start+0x9a>
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	627a      	str	r2, [r7, #36]	; 0x24
 800385a:	6a3a      	ldr	r2, [r7, #32]
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	701a      	strb	r2, [r3, #0]
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	61fb      	str	r3, [r7, #28]
 8003868:	4b27      	ldr	r3, [pc, #156]	; (8003908 <SEGGER_SYSVIEW_Start+0x16c>)
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	61bb      	str	r3, [r7, #24]
 800386e:	e00b      	b.n	8003888 <SEGGER_SYSVIEW_Start+0xec>
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	61fa      	str	r2, [r7, #28]
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	701a      	strb	r2, [r3, #0]
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	09db      	lsrs	r3, r3, #7
 8003886:	61bb      	str	r3, [r7, #24]
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	2b7f      	cmp	r3, #127	; 0x7f
 800388c:	d8f0      	bhi.n	8003870 <SEGGER_SYSVIEW_Start+0xd4>
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	61fa      	str	r2, [r7, #28]
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	701a      	strb	r2, [r3, #0]
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	617b      	str	r3, [r7, #20]
 80038a2:	2302      	movs	r3, #2
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	e00b      	b.n	80038c0 <SEGGER_SYSVIEW_Start+0x124>
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	617a      	str	r2, [r7, #20]
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	701a      	strb	r2, [r3, #0]
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	09db      	lsrs	r3, r3, #7
 80038be:	613b      	str	r3, [r7, #16]
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	2b7f      	cmp	r3, #127	; 0x7f
 80038c4:	d8f0      	bhi.n	80038a8 <SEGGER_SYSVIEW_Start+0x10c>
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	617a      	str	r2, [r7, #20]
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	701a      	strb	r2, [r3, #0]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80038d6:	2218      	movs	r2, #24
 80038d8:	6839      	ldr	r1, [r7, #0]
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7ff fc82 	bl	80031e4 <_SendPacket>
      RECORD_END();
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80038e6:	4b08      	ldr	r3, [pc, #32]	; (8003908 <SEGGER_SYSVIEW_Start+0x16c>)
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 80038ee:	4b06      	ldr	r3, [pc, #24]	; (8003908 <SEGGER_SYSVIEW_Start+0x16c>)
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80038f4:	f000 f9ec 	bl	8003cd0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80038f8:	f000 f9b2 	bl	8003c60 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80038fc:	f000 fbac 	bl	8004058 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8003900:	bf00      	nop
 8003902:	3730      	adds	r7, #48	; 0x30
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	200151b4 	.word	0x200151b4
 800390c:	080049f0 	.word	0x080049f0
 8003910:	200151e4 	.word	0x200151e4

08003914 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800391a:	f3ef 8311 	mrs	r3, BASEPRI
 800391e:	f04f 0120 	mov.w	r1, #32
 8003922:	f381 8811 	msr	BASEPRI, r1
 8003926:	607b      	str	r3, [r7, #4]
 8003928:	480b      	ldr	r0, [pc, #44]	; (8003958 <SEGGER_SYSVIEW_Stop+0x44>)
 800392a:	f7ff fb84 	bl	8003036 <_PreparePacket>
 800392e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003930:	4b0a      	ldr	r3, [pc, #40]	; (800395c <SEGGER_SYSVIEW_Stop+0x48>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d007      	beq.n	8003948 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003938:	220b      	movs	r2, #11
 800393a:	6839      	ldr	r1, [r7, #0]
 800393c:	6838      	ldr	r0, [r7, #0]
 800393e:	f7ff fc51 	bl	80031e4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003942:	4b06      	ldr	r3, [pc, #24]	; (800395c <SEGGER_SYSVIEW_Stop+0x48>)
 8003944:	2200      	movs	r2, #0
 8003946:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f383 8811 	msr	BASEPRI, r3
}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	200151e4 	.word	0x200151e4
 800395c:	200151b4 	.word	0x200151b4

08003960 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003960:	b580      	push	{r7, lr}
 8003962:	b08c      	sub	sp, #48	; 0x30
 8003964:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003966:	f3ef 8311 	mrs	r3, BASEPRI
 800396a:	f04f 0120 	mov.w	r1, #32
 800396e:	f381 8811 	msr	BASEPRI, r1
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	4845      	ldr	r0, [pc, #276]	; (8003a8c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003976:	f7ff fb5e 	bl	8003036 <_PreparePacket>
 800397a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003984:	4b42      	ldr	r3, [pc, #264]	; (8003a90 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	62bb      	str	r3, [r7, #40]	; 0x28
 800398a:	e00b      	b.n	80039a4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800398c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	701a      	strb	r2, [r3, #0]
 800399e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a0:	09db      	lsrs	r3, r3, #7
 80039a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80039a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a6:	2b7f      	cmp	r3, #127	; 0x7f
 80039a8:	d8f0      	bhi.n	800398c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80039aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	701a      	strb	r2, [r3, #0]
 80039b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
 80039be:	4b34      	ldr	r3, [pc, #208]	; (8003a90 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	623b      	str	r3, [r7, #32]
 80039c4:	e00b      	b.n	80039de <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	627a      	str	r2, [r7, #36]	; 0x24
 80039cc:	6a3a      	ldr	r2, [r7, #32]
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039d4:	b2d2      	uxtb	r2, r2
 80039d6:	701a      	strb	r2, [r3, #0]
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	09db      	lsrs	r3, r3, #7
 80039dc:	623b      	str	r3, [r7, #32]
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	2b7f      	cmp	r3, #127	; 0x7f
 80039e2:	d8f0      	bhi.n	80039c6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	627a      	str	r2, [r7, #36]	; 0x24
 80039ea:	6a3a      	ldr	r2, [r7, #32]
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	701a      	strb	r2, [r3, #0]
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	61fb      	str	r3, [r7, #28]
 80039f8:	4b25      	ldr	r3, [pc, #148]	; (8003a90 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	61bb      	str	r3, [r7, #24]
 80039fe:	e00b      	b.n	8003a18 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	61fa      	str	r2, [r7, #28]
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	701a      	strb	r2, [r3, #0]
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	09db      	lsrs	r3, r3, #7
 8003a16:	61bb      	str	r3, [r7, #24]
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	2b7f      	cmp	r3, #127	; 0x7f
 8003a1c:	d8f0      	bhi.n	8003a00 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	61fa      	str	r2, [r7, #28]
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	701a      	strb	r2, [r3, #0]
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	2302      	movs	r3, #2
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	e00b      	b.n	8003a50 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	617a      	str	r2, [r7, #20]
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	701a      	strb	r2, [r3, #0]
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	09db      	lsrs	r3, r3, #7
 8003a4e:	613b      	str	r3, [r7, #16]
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	2b7f      	cmp	r3, #127	; 0x7f
 8003a54:	d8f0      	bhi.n	8003a38 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	617a      	str	r2, [r7, #20]
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	701a      	strb	r2, [r3, #0]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003a66:	2218      	movs	r2, #24
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	68b8      	ldr	r0, [r7, #8]
 8003a6c:	f7ff fbba 	bl	80031e4 <_SendPacket>
  RECORD_END();
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003a76:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003a7e:	4b04      	ldr	r3, [pc, #16]	; (8003a90 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	4798      	blx	r3
  }
}
 8003a84:	bf00      	nop
 8003a86:	3730      	adds	r7, #48	; 0x30
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	200151e4 	.word	0x200151e4
 8003a90:	200151b4 	.word	0x200151b4

08003a94 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b092      	sub	sp, #72	; 0x48
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003a9c:	f3ef 8311 	mrs	r3, BASEPRI
 8003aa0:	f04f 0120 	mov.w	r1, #32
 8003aa4:	f381 8811 	msr	BASEPRI, r1
 8003aa8:	617b      	str	r3, [r7, #20]
 8003aaa:	486b      	ldr	r0, [pc, #428]	; (8003c58 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003aac:	f7ff fac3 	bl	8003036 <_PreparePacket>
 8003ab0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	647b      	str	r3, [r7, #68]	; 0x44
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	4b67      	ldr	r3, [pc, #412]	; (8003c5c <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	089b      	lsrs	r3, r3, #2
 8003ac6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ac8:	e00b      	b.n	8003ae2 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8003aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	647a      	str	r2, [r7, #68]	; 0x44
 8003ad0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	701a      	strb	r2, [r3, #0]
 8003adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ade:	09db      	lsrs	r3, r3, #7
 8003ae0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ae4:	2b7f      	cmp	r3, #127	; 0x7f
 8003ae6:	d8f0      	bhi.n	8003aca <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8003ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	647a      	str	r2, [r7, #68]	; 0x44
 8003aee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	701a      	strb	r2, [r3, #0]
 8003af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003af6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b02:	e00b      	b.n	8003b1c <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8003b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	701a      	strb	r2, [r3, #0]
 8003b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b18:	09db      	lsrs	r3, r3, #7
 8003b1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8003b20:	d8f0      	bhi.n	8003b04 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8003b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	701a      	strb	r2, [r3, #0]
 8003b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b30:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	4619      	mov	r1, r3
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f7ff fa2e 	bl	8002f9c <_EncodeStr>
 8003b40:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003b42:	2209      	movs	r2, #9
 8003b44:	68f9      	ldr	r1, [r7, #12]
 8003b46:	6938      	ldr	r0, [r7, #16]
 8003b48:	f7ff fb4c 	bl	80031e4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	637b      	str	r3, [r7, #52]	; 0x34
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	4b40      	ldr	r3, [pc, #256]	; (8003c5c <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	089b      	lsrs	r3, r3, #2
 8003b60:	633b      	str	r3, [r7, #48]	; 0x30
 8003b62:	e00b      	b.n	8003b7c <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8003b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	637a      	str	r2, [r7, #52]	; 0x34
 8003b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	701a      	strb	r2, [r3, #0]
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	09db      	lsrs	r3, r3, #7
 8003b7a:	633b      	str	r3, [r7, #48]	; 0x30
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7e:	2b7f      	cmp	r3, #127	; 0x7f
 8003b80:	d8f0      	bhi.n	8003b64 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8003b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	637a      	str	r2, [r7, #52]	; 0x34
 8003b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]
 8003b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b90:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b9c:	e00b      	b.n	8003bb6 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8003b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	701a      	strb	r2, [r3, #0]
 8003bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb2:	09db      	lsrs	r3, r3, #7
 8003bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb8:	2b7f      	cmp	r3, #127	; 0x7f
 8003bba:	d8f0      	bhi.n	8003b9e <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8003bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbe:	1c5a      	adds	r2, r3, #1
 8003bc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	701a      	strb	r2, [r3, #0]
 8003bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bca:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	623b      	str	r3, [r7, #32]
 8003bd6:	e00b      	b.n	8003bf0 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	627a      	str	r2, [r7, #36]	; 0x24
 8003bde:	6a3a      	ldr	r2, [r7, #32]
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	701a      	strb	r2, [r3, #0]
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	09db      	lsrs	r3, r3, #7
 8003bee:	623b      	str	r3, [r7, #32]
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	2b7f      	cmp	r3, #127	; 0x7f
 8003bf4:	d8f0      	bhi.n	8003bd8 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	627a      	str	r2, [r7, #36]	; 0x24
 8003bfc:	6a3a      	ldr	r2, [r7, #32]
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	701a      	strb	r2, [r3, #0]
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	61fb      	str	r3, [r7, #28]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	61bb      	str	r3, [r7, #24]
 8003c0e:	e00b      	b.n	8003c28 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	61fa      	str	r2, [r7, #28]
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	09db      	lsrs	r3, r3, #7
 8003c26:	61bb      	str	r3, [r7, #24]
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8003c2c:	d8f0      	bhi.n	8003c10 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	61fa      	str	r2, [r7, #28]
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	701a      	strb	r2, [r3, #0]
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003c3e:	2215      	movs	r2, #21
 8003c40:	68f9      	ldr	r1, [r7, #12]
 8003c42:	6938      	ldr	r0, [r7, #16]
 8003c44:	f7ff face 	bl	80031e4 <_SendPacket>
  RECORD_END();
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f383 8811 	msr	BASEPRI, r3
}
 8003c4e:	bf00      	nop
 8003c50:	3748      	adds	r7, #72	; 0x48
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	200151e4 	.word	0x200151e4
 8003c5c:	200151b4 	.word	0x200151b4

08003c60 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003c64:	4b07      	ldr	r3, [pc, #28]	; (8003c84 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003c6c:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003c76:	4b03      	ldr	r3, [pc, #12]	; (8003c84 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	4798      	blx	r3
  }
}
 8003c7e:	bf00      	nop
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	200151b4 	.word	0x200151b4

08003c88 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003c90:	f3ef 8311 	mrs	r3, BASEPRI
 8003c94:	f04f 0120 	mov.w	r1, #32
 8003c98:	f381 8811 	msr	BASEPRI, r1
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	480b      	ldr	r0, [pc, #44]	; (8003ccc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8003ca0:	f7ff f9c9 	bl	8003036 <_PreparePacket>
 8003ca4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003ca6:	2280      	movs	r2, #128	; 0x80
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	6938      	ldr	r0, [r7, #16]
 8003cac:	f7ff f976 	bl	8002f9c <_EncodeStr>
 8003cb0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8003cb2:	220e      	movs	r2, #14
 8003cb4:	68f9      	ldr	r1, [r7, #12]
 8003cb6:	6938      	ldr	r0, [r7, #16]
 8003cb8:	f7ff fa94 	bl	80031e4 <_SendPacket>
  RECORD_END();
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f383 8811 	msr	BASEPRI, r3
}
 8003cc2:	bf00      	nop
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	200151e4 	.word	0x200151e4

08003cd0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003cd6:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d015      	beq.n	8003d0a <SEGGER_SYSVIEW_RecordSystime+0x3a>
 8003cde:	4b10      	ldr	r3, [pc, #64]	; (8003d20 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d010      	beq.n	8003d0a <SEGGER_SYSVIEW_RecordSystime+0x3a>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003ce8:	4b0d      	ldr	r3, [pc, #52]	; (8003d20 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4798      	blx	r3
 8003cf0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003cf4:	6839      	ldr	r1, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003cf6:	e897 0018 	ldmia.w	r7, {r3, r4}
 8003cfa:	0025      	movs	r5, r4
 8003cfc:	2600      	movs	r6, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003cfe:	462b      	mov	r3, r5
 8003d00:	461a      	mov	r2, r3
 8003d02:	200d      	movs	r0, #13
 8003d04:	f7ff fbe8 	bl	80034d8 <SEGGER_SYSVIEW_RecordU32x2>
 8003d08:	e005      	b.n	8003d16 <SEGGER_SYSVIEW_RecordSystime+0x46>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003d0a:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <SEGGER_SYSVIEW_RecordSystime+0x54>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4619      	mov	r1, r3
 8003d10:	200c      	movs	r0, #12
 8003d12:	f7ff fba5 	bl	8003460 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	200151b4 	.word	0x200151b4
 8003d24:	e0001004 	.word	0xe0001004

08003d28 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003d2e:	f3ef 8311 	mrs	r3, BASEPRI
 8003d32:	f04f 0120 	mov.w	r1, #32
 8003d36:	f381 8811 	msr	BASEPRI, r1
 8003d3a:	607b      	str	r3, [r7, #4]
 8003d3c:	4807      	ldr	r0, [pc, #28]	; (8003d5c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8003d3e:	f7ff f97a 	bl	8003036 <_PreparePacket>
 8003d42:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003d44:	2211      	movs	r2, #17
 8003d46:	6839      	ldr	r1, [r7, #0]
 8003d48:	6838      	ldr	r0, [r7, #0]
 8003d4a:	f7ff fa4b 	bl	80031e4 <_SendPacket>
  RECORD_END();
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f383 8811 	msr	BASEPRI, r3
}
 8003d54:	bf00      	nop
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	200151e4 	.word	0x200151e4

08003d60 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003d68:	f3ef 8311 	mrs	r3, BASEPRI
 8003d6c:	f04f 0120 	mov.w	r1, #32
 8003d70:	f381 8811 	msr	BASEPRI, r1
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	481a      	ldr	r0, [pc, #104]	; (8003de0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8003d78:	f7ff f95d 	bl	8003036 <_PreparePacket>
 8003d7c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003d82:	4b18      	ldr	r3, [pc, #96]	; (8003de4 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	089b      	lsrs	r3, r3, #2
 8003d8c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	61fb      	str	r3, [r7, #28]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	61bb      	str	r3, [r7, #24]
 8003d96:	e00b      	b.n	8003db0 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	61fa      	str	r2, [r7, #28]
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	b2d2      	uxtb	r2, r2
 8003da2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	09db      	lsrs	r3, r3, #7
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	2b7f      	cmp	r3, #127	; 0x7f
 8003db4:	d8f0      	bhi.n	8003d98 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	61fa      	str	r2, [r7, #28]
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	701a      	strb	r2, [r3, #0]
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8003dc6:	2208      	movs	r2, #8
 8003dc8:	68f9      	ldr	r1, [r7, #12]
 8003dca:	6938      	ldr	r0, [r7, #16]
 8003dcc:	f7ff fa0a 	bl	80031e4 <_SendPacket>
  RECORD_END();
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f383 8811 	msr	BASEPRI, r3
}
 8003dd6:	bf00      	nop
 8003dd8:	3720      	adds	r7, #32
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	200151e4 	.word	0x200151e4
 8003de4:	200151b4 	.word	0x200151b4

08003de8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003df0:	f3ef 8311 	mrs	r3, BASEPRI
 8003df4:	f04f 0120 	mov.w	r1, #32
 8003df8:	f381 8811 	msr	BASEPRI, r1
 8003dfc:	617b      	str	r3, [r7, #20]
 8003dfe:	481a      	ldr	r0, [pc, #104]	; (8003e68 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8003e00:	f7ff f919 	bl	8003036 <_PreparePacket>
 8003e04:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003e0a:	4b18      	ldr	r3, [pc, #96]	; (8003e6c <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	089b      	lsrs	r3, r3, #2
 8003e14:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	61fb      	str	r3, [r7, #28]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	61bb      	str	r3, [r7, #24]
 8003e1e:	e00b      	b.n	8003e38 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	61fa      	str	r2, [r7, #28]
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	09db      	lsrs	r3, r3, #7
 8003e36:	61bb      	str	r3, [r7, #24]
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	2b7f      	cmp	r3, #127	; 0x7f
 8003e3c:	d8f0      	bhi.n	8003e20 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	61fa      	str	r2, [r7, #28]
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	701a      	strb	r2, [r3, #0]
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8003e4e:	2204      	movs	r2, #4
 8003e50:	68f9      	ldr	r1, [r7, #12]
 8003e52:	6938      	ldr	r0, [r7, #16]
 8003e54:	f7ff f9c6 	bl	80031e4 <_SendPacket>
  RECORD_END();
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f383 8811 	msr	BASEPRI, r3
}
 8003e5e:	bf00      	nop
 8003e60:	3720      	adds	r7, #32
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	200151e4 	.word	0x200151e4
 8003e6c:	200151b4 	.word	0x200151b4

08003e70 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003e78:	f3ef 8311 	mrs	r3, BASEPRI
 8003e7c:	f04f 0120 	mov.w	r1, #32
 8003e80:	f381 8811 	msr	BASEPRI, r1
 8003e84:	617b      	str	r3, [r7, #20]
 8003e86:	481a      	ldr	r0, [pc, #104]	; (8003ef0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8003e88:	f7ff f8d5 	bl	8003036 <_PreparePacket>
 8003e8c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003e92:	4b18      	ldr	r3, [pc, #96]	; (8003ef4 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	089b      	lsrs	r3, r3, #2
 8003e9c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	61fb      	str	r3, [r7, #28]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	61bb      	str	r3, [r7, #24]
 8003ea6:	e00b      	b.n	8003ec0 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	61fa      	str	r2, [r7, #28]
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	09db      	lsrs	r3, r3, #7
 8003ebe:	61bb      	str	r3, [r7, #24]
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	2b7f      	cmp	r3, #127	; 0x7f
 8003ec4:	d8f0      	bhi.n	8003ea8 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	61fa      	str	r2, [r7, #28]
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8003ed6:	2206      	movs	r2, #6
 8003ed8:	68f9      	ldr	r1, [r7, #12]
 8003eda:	6938      	ldr	r0, [r7, #16]
 8003edc:	f7ff f982 	bl	80031e4 <_SendPacket>
  RECORD_END();
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f383 8811 	msr	BASEPRI, r3
}
 8003ee6:	bf00      	nop
 8003ee8:	3720      	adds	r7, #32
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	200151e4 	.word	0x200151e4
 8003ef4:	200151b4 	.word	0x200151b4

08003ef8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8003f00:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	089b      	lsrs	r3, r3, #2
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	200151b4 	.word	0x200151b4

08003f1c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08c      	sub	sp, #48	; 0x30
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8003f26:	4b3b      	ldr	r3, [pc, #236]	; (8004014 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d06d      	beq.n	800400a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8003f2e:	4b39      	ldr	r3, [pc, #228]	; (8004014 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8003f34:	2300      	movs	r3, #0
 8003f36:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f38:	e008      	b.n	8003f4c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8003f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8003f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d007      	beq.n	8003f56 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8003f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f48:	3301      	adds	r3, #1
 8003f4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f4c:	79fa      	ldrb	r2, [r7, #7]
 8003f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d8f2      	bhi.n	8003f3a <SEGGER_SYSVIEW_SendModule+0x1e>
 8003f54:	e000      	b.n	8003f58 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8003f56:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8003f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d055      	beq.n	800400a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003f5e:	f3ef 8311 	mrs	r3, BASEPRI
 8003f62:	f04f 0120 	mov.w	r1, #32
 8003f66:	f381 8811 	msr	BASEPRI, r1
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	482a      	ldr	r0, [pc, #168]	; (8004018 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8003f6e:	f7ff f862 	bl	8003036 <_PreparePacket>
 8003f72:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	623b      	str	r3, [r7, #32]
 8003f80:	e00b      	b.n	8003f9a <SEGGER_SYSVIEW_SendModule+0x7e>
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	627a      	str	r2, [r7, #36]	; 0x24
 8003f88:	6a3a      	ldr	r2, [r7, #32]
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f90:	b2d2      	uxtb	r2, r2
 8003f92:	701a      	strb	r2, [r3, #0]
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	09db      	lsrs	r3, r3, #7
 8003f98:	623b      	str	r3, [r7, #32]
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	2b7f      	cmp	r3, #127	; 0x7f
 8003f9e:	d8f0      	bhi.n	8003f82 <SEGGER_SYSVIEW_SendModule+0x66>
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	627a      	str	r2, [r7, #36]	; 0x24
 8003fa6:	6a3a      	ldr	r2, [r7, #32]
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	701a      	strb	r2, [r3, #0]
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	61fb      	str	r3, [r7, #28]
 8003fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	61bb      	str	r3, [r7, #24]
 8003fba:	e00b      	b.n	8003fd4 <SEGGER_SYSVIEW_SendModule+0xb8>
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	61fa      	str	r2, [r7, #28]
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	701a      	strb	r2, [r3, #0]
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	09db      	lsrs	r3, r3, #7
 8003fd2:	61bb      	str	r3, [r7, #24]
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	2b7f      	cmp	r3, #127	; 0x7f
 8003fd8:	d8f0      	bhi.n	8003fbc <SEGGER_SYSVIEW_SendModule+0xa0>
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	61fa      	str	r2, [r7, #28]
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	b2d2      	uxtb	r2, r2
 8003fe4:	701a      	strb	r2, [r3, #0]
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2280      	movs	r2, #128	; 0x80
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f7fe ffd2 	bl	8002f9c <_EncodeStr>
 8003ff8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8003ffa:	2216      	movs	r2, #22
 8003ffc:	68f9      	ldr	r1, [r7, #12]
 8003ffe:	6938      	ldr	r0, [r7, #16]
 8004000:	f7ff f8f0 	bl	80031e4 <_SendPacket>
      RECORD_END();
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800400a:	bf00      	nop
 800400c:	3730      	adds	r7, #48	; 0x30
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	200151dc 	.word	0x200151dc
 8004018:	200151e4 	.word	0x200151e4

0800401c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004022:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00f      	beq.n	800404a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800402a:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1f2      	bne.n	8004030 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	200151dc 	.word	0x200151dc

08004058 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800405e:	f3ef 8311 	mrs	r3, BASEPRI
 8004062:	f04f 0120 	mov.w	r1, #32
 8004066:	f381 8811 	msr	BASEPRI, r1
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	4817      	ldr	r0, [pc, #92]	; (80040cc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800406e:	f7fe ffe2 	bl	8003036 <_PreparePacket>
 8004072:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	4b14      	ldr	r3, [pc, #80]	; (80040d0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	e00b      	b.n	800409c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	1c5a      	adds	r2, r3, #1
 8004088:	617a      	str	r2, [r7, #20]
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	b2d2      	uxtb	r2, r2
 800408e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	701a      	strb	r2, [r3, #0]
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	09db      	lsrs	r3, r3, #7
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	2b7f      	cmp	r3, #127	; 0x7f
 80040a0:	d8f0      	bhi.n	8004084 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	617a      	str	r2, [r7, #20]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80040b2:	221b      	movs	r2, #27
 80040b4:	6879      	ldr	r1, [r7, #4]
 80040b6:	68b8      	ldr	r0, [r7, #8]
 80040b8:	f7ff f894 	bl	80031e4 <_SendPacket>
  RECORD_END();
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f383 8811 	msr	BASEPRI, r3
}
 80040c2:	bf00      	nop
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	200151e4 	.word	0x200151e4
 80040d0:	200151e0 	.word	0x200151e0

080040d4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08a      	sub	sp, #40	; 0x28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80040dc:	f3ef 8311 	mrs	r3, BASEPRI
 80040e0:	f04f 0120 	mov.w	r1, #32
 80040e4:	f381 8811 	msr	BASEPRI, r1
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	4827      	ldr	r0, [pc, #156]	; (8004188 <SEGGER_SYSVIEW_Warn+0xb4>)
 80040ec:	f7fe ffa3 	bl	8003036 <_PreparePacket>
 80040f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80040f2:	2280      	movs	r2, #128	; 0x80
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	6938      	ldr	r0, [r7, #16]
 80040f8:	f7fe ff50 	bl	8002f9c <_EncodeStr>
 80040fc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	627b      	str	r3, [r7, #36]	; 0x24
 8004102:	2301      	movs	r3, #1
 8004104:	623b      	str	r3, [r7, #32]
 8004106:	e00b      	b.n	8004120 <SEGGER_SYSVIEW_Warn+0x4c>
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	627a      	str	r2, [r7, #36]	; 0x24
 800410e:	6a3a      	ldr	r2, [r7, #32]
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	701a      	strb	r2, [r3, #0]
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	09db      	lsrs	r3, r3, #7
 800411e:	623b      	str	r3, [r7, #32]
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	2b7f      	cmp	r3, #127	; 0x7f
 8004124:	d8f0      	bhi.n	8004108 <SEGGER_SYSVIEW_Warn+0x34>
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	627a      	str	r2, [r7, #36]	; 0x24
 800412c:	6a3a      	ldr	r2, [r7, #32]
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	701a      	strb	r2, [r3, #0]
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	61fb      	str	r3, [r7, #28]
 800413a:	2300      	movs	r3, #0
 800413c:	61bb      	str	r3, [r7, #24]
 800413e:	e00b      	b.n	8004158 <SEGGER_SYSVIEW_Warn+0x84>
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	61fa      	str	r2, [r7, #28]
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	701a      	strb	r2, [r3, #0]
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	09db      	lsrs	r3, r3, #7
 8004156:	61bb      	str	r3, [r7, #24]
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2b7f      	cmp	r3, #127	; 0x7f
 800415c:	d8f0      	bhi.n	8004140 <SEGGER_SYSVIEW_Warn+0x6c>
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	61fa      	str	r2, [r7, #28]
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800416e:	221a      	movs	r2, #26
 8004170:	68f9      	ldr	r1, [r7, #12]
 8004172:	6938      	ldr	r0, [r7, #16]
 8004174:	f7ff f836 	bl	80031e4 <_SendPacket>
  RECORD_END();
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f383 8811 	msr	BASEPRI, r3
}
 800417e:	bf00      	nop
 8004180:	3728      	adds	r7, #40	; 0x28
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	200151e4 	.word	0x200151e4

0800418c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004190:	4803      	ldr	r0, [pc, #12]	; (80041a0 <_cbSendSystemDesc+0x14>)
 8004192:	f7ff fd79 	bl	8003c88 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004196:	4803      	ldr	r0, [pc, #12]	; (80041a4 <_cbSendSystemDesc+0x18>)
 8004198:	f7ff fd76 	bl	8003c88 <SEGGER_SYSVIEW_SendSysDesc>
}
 800419c:	bf00      	nop
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	08004938 	.word	0x08004938
 80041a4:	0800496c 	.word	0x0800496c

080041a8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80041ac:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <SEGGER_SYSVIEW_Conf+0x20>)
 80041ae:	6818      	ldr	r0, [r3, #0]
 80041b0:	4b05      	ldr	r3, [pc, #20]	; (80041c8 <SEGGER_SYSVIEW_Conf+0x20>)
 80041b2:	6819      	ldr	r1, [r3, #0]
 80041b4:	4b05      	ldr	r3, [pc, #20]	; (80041cc <SEGGER_SYSVIEW_Conf+0x24>)
 80041b6:	4a06      	ldr	r2, [pc, #24]	; (80041d0 <SEGGER_SYSVIEW_Conf+0x28>)
 80041b8:	f7ff f8e6 	bl	8003388 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80041bc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80041c0:	f7ff f920 	bl	8003404 <SEGGER_SYSVIEW_SetRAMBase>
}
 80041c4:	bf00      	nop
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	20000008 	.word	0x20000008
 80041cc:	0800418d 	.word	0x0800418d
 80041d0:	080049fc 	.word	0x080049fc

080041d4 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80041d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80041da:	2300      	movs	r3, #0
 80041dc:	607b      	str	r3, [r7, #4]
 80041de:	e034      	b.n	800424a <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80041e0:	491e      	ldr	r1, [pc, #120]	; (800425c <_cbSendTaskList+0x88>)
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	4613      	mov	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	440b      	add	r3, r1
 80041ee:	6818      	ldr	r0, [r3, #0]
 80041f0:	491a      	ldr	r1, [pc, #104]	; (800425c <_cbSendTaskList+0x88>)
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	4613      	mov	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	440b      	add	r3, r1
 80041fe:	3304      	adds	r3, #4
 8004200:	681c      	ldr	r4, [r3, #0]
 8004202:	4916      	ldr	r1, [pc, #88]	; (800425c <_cbSendTaskList+0x88>)
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	4613      	mov	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	440b      	add	r3, r1
 8004210:	3308      	adds	r3, #8
 8004212:	681d      	ldr	r5, [r3, #0]
 8004214:	4911      	ldr	r1, [pc, #68]	; (800425c <_cbSendTaskList+0x88>)
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	330c      	adds	r3, #12
 8004224:	681e      	ldr	r6, [r3, #0]
 8004226:	490d      	ldr	r1, [pc, #52]	; (800425c <_cbSendTaskList+0x88>)
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	4613      	mov	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	440b      	add	r3, r1
 8004234:	3310      	adds	r3, #16
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	4633      	mov	r3, r6
 800423c:	462a      	mov	r2, r5
 800423e:	4621      	mov	r1, r4
 8004240:	f000 f8ae 	bl	80043a0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3301      	adds	r3, #1
 8004248:	607b      	str	r3, [r7, #4]
 800424a:	4b05      	ldr	r3, [pc, #20]	; (8004260 <_cbSendTaskList+0x8c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	429a      	cmp	r2, r3
 8004252:	d3c5      	bcc.n	80041e0 <_cbSendTaskList+0xc>
  }
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800425c:	200152c8 	.word	0x200152c8
 8004260:	20015368 	.word	0x20015368

08004264 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800426c:	f7fd fb7a 	bl	8001964 <xTaskGetTickCountFromISR>
 8004270:	4603      	mov	r3, r0
 8004272:	f04f 0400 	mov.w	r4, #0
 8004276:	e887 0018 	stmia.w	r7, {r3, r4}
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800427a:	e897 0006 	ldmia.w	r7, {r1, r2}
 800427e:	460b      	mov	r3, r1
 8004280:	4614      	mov	r4, r2
 8004282:	ea4f 1b44 	mov.w	fp, r4, lsl #5
 8004286:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
 800428a:	ea4f 1a43 	mov.w	sl, r3, lsl #5
 800428e:	4653      	mov	r3, sl
 8004290:	465c      	mov	r4, fp
 8004292:	1a5b      	subs	r3, r3, r1
 8004294:	eb64 0402 	sbc.w	r4, r4, r2
 8004298:	ea4f 0984 	mov.w	r9, r4, lsl #2
 800429c:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
 80042a0:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80042a4:	4643      	mov	r3, r8
 80042a6:	464c      	mov	r4, r9
 80042a8:	185b      	adds	r3, r3, r1
 80042aa:	eb44 0402 	adc.w	r4, r4, r2
 80042ae:	00e6      	lsls	r6, r4, #3
 80042b0:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 80042b4:	00dd      	lsls	r5, r3, #3
 80042b6:	462b      	mov	r3, r5
 80042b8:	4634      	mov	r4, r6
 80042ba:	e887 0018 	stmia.w	r7, {r3, r4}
  return Time;
 80042be:	e897 0018 	ldmia.w	r7, {r3, r4}
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	4621      	mov	r1, r4
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080042d0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af02      	add	r7, sp, #8
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80042de:	2205      	movs	r2, #5
 80042e0:	492b      	ldr	r1, [pc, #172]	; (8004390 <SYSVIEW_AddTask+0xc0>)
 80042e2:	68b8      	ldr	r0, [r7, #8]
 80042e4:	f000 fade 	bl	80048a4 <memcmp>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d04b      	beq.n	8004386 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80042ee:	4b29      	ldr	r3, [pc, #164]	; (8004394 <SYSVIEW_AddTask+0xc4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b07      	cmp	r3, #7
 80042f4:	d903      	bls.n	80042fe <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80042f6:	4828      	ldr	r0, [pc, #160]	; (8004398 <SYSVIEW_AddTask+0xc8>)
 80042f8:	f7ff feec 	bl	80040d4 <SEGGER_SYSVIEW_Warn>
    return;
 80042fc:	e044      	b.n	8004388 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80042fe:	4b25      	ldr	r3, [pc, #148]	; (8004394 <SYSVIEW_AddTask+0xc4>)
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	4926      	ldr	r1, [pc, #152]	; (800439c <SYSVIEW_AddTask+0xcc>)
 8004304:	4613      	mov	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	440b      	add	r3, r1
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004312:	4b20      	ldr	r3, [pc, #128]	; (8004394 <SYSVIEW_AddTask+0xc4>)
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	4921      	ldr	r1, [pc, #132]	; (800439c <SYSVIEW_AddTask+0xcc>)
 8004318:	4613      	mov	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	3304      	adds	r3, #4
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004328:	4b1a      	ldr	r3, [pc, #104]	; (8004394 <SYSVIEW_AddTask+0xc4>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	491b      	ldr	r1, [pc, #108]	; (800439c <SYSVIEW_AddTask+0xcc>)
 800432e:	4613      	mov	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	440b      	add	r3, r1
 8004338:	3308      	adds	r3, #8
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800433e:	4b15      	ldr	r3, [pc, #84]	; (8004394 <SYSVIEW_AddTask+0xc4>)
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	4916      	ldr	r1, [pc, #88]	; (800439c <SYSVIEW_AddTask+0xcc>)
 8004344:	4613      	mov	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	440b      	add	r3, r1
 800434e:	330c      	adds	r3, #12
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004354:	4b0f      	ldr	r3, [pc, #60]	; (8004394 <SYSVIEW_AddTask+0xc4>)
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	4910      	ldr	r1, [pc, #64]	; (800439c <SYSVIEW_AddTask+0xcc>)
 800435a:	4613      	mov	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	440b      	add	r3, r1
 8004364:	3310      	adds	r3, #16
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800436a:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <SYSVIEW_AddTask+0xc4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	3301      	adds	r3, #1
 8004370:	4a08      	ldr	r2, [pc, #32]	; (8004394 <SYSVIEW_AddTask+0xc4>)
 8004372:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f80e 	bl	80043a0 <SYSVIEW_SendTaskInfo>
 8004384:	e000      	b.n	8004388 <SYSVIEW_AddTask+0xb8>
    return;
 8004386:	bf00      	nop

}
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	0800497c 	.word	0x0800497c
 8004394:	20015368 	.word	0x20015368
 8004398:	08004984 	.word	0x08004984
 800439c:	200152c8 	.word	0x200152c8

080043a0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08a      	sub	sp, #40	; 0x28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80043ae:	f107 0314 	add.w	r3, r7, #20
 80043b2:	2214      	movs	r2, #20
 80043b4:	2100      	movs	r1, #0
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fa8e 	bl	80048d8 <memset>
  TaskInfo.TaskID     = TaskID;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80043cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ce:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80043d0:	f107 0314 	add.w	r3, r7, #20
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff fb5d 	bl	8003a94 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80043da:	bf00      	nop
 80043dc:	3728      	adds	r7, #40	; 0x28
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <main>:
void GPIO_Config(void);
TaskHandle_t ReadButtonHandle = NULL;
TaskHandle_t LedFlashHandle = NULL ;
uint8_t count = 0;
int main(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af02      	add	r7, sp, #8
  DWT->CTRL |= (1<<0);
 80043ea:	4a14      	ldr	r2, [pc, #80]	; (800443c <main+0x58>)
 80043ec:	4b13      	ldr	r3, [pc, #76]	; (800443c <main+0x58>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f043 0301 	orr.w	r3, r3, #1
 80043f4:	6013      	str	r3, [r2, #0]

  RCC_DeInit();   // HSE OFF | HSI ON |	PLL OFF |
 80043f6:	f7fb ffa5 	bl	8000344 <RCC_DeInit>
  SystemCoreClockUpdate(); // SYSTEM CLOCK 16 MHz
 80043fa:	f000 f937 	bl	800466c <SystemCoreClockUpdate>

  GPIO_Config();
 80043fe:	f000 f86b 	bl	80044d8 <GPIO_Config>
  SEGGER_SYSVIEW_Conf();
 8004402:	f7ff fed1 	bl	80041a8 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8004406:	f7ff f9c9 	bl	800379c <SEGGER_SYSVIEW_Start>

  xTaskCreate(ReadButtonStateTask,"Button Control",configMINIMAL_STACK_SIZE * 5,NULL,2,&ReadButtonHandle);
 800440a:	4b0d      	ldr	r3, [pc, #52]	; (8004440 <main+0x5c>)
 800440c:	9301      	str	r3, [sp, #4]
 800440e:	2302      	movs	r3, #2
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	2300      	movs	r3, #0
 8004414:	f240 228a 	movw	r2, #650	; 0x28a
 8004418:	490a      	ldr	r1, [pc, #40]	; (8004444 <main+0x60>)
 800441a:	480b      	ldr	r0, [pc, #44]	; (8004448 <main+0x64>)
 800441c:	f7fc ffa0 	bl	8001360 <xTaskCreate>
  xTaskCreate(LedFlashTask,"Led Control",configMINIMAL_STACK_SIZE * 5,NULL,2,&LedFlashHandle);
 8004420:	4b0a      	ldr	r3, [pc, #40]	; (800444c <main+0x68>)
 8004422:	9301      	str	r3, [sp, #4]
 8004424:	2302      	movs	r3, #2
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	2300      	movs	r3, #0
 800442a:	f240 228a 	movw	r2, #650	; 0x28a
 800442e:	4908      	ldr	r1, [pc, #32]	; (8004450 <main+0x6c>)
 8004430:	4808      	ldr	r0, [pc, #32]	; (8004454 <main+0x70>)
 8004432:	f7fc ff95 	bl	8001360 <xTaskCreate>

  vTaskStartScheduler(); // START SCHEDULAR
 8004436:	f7fd f919 	bl	800166c <vTaskStartScheduler>
  while (1)
 800443a:	e7fe      	b.n	800443a <main+0x56>
 800443c:	e0001000 	.word	0xe0001000
 8004440:	2001536c 	.word	0x2001536c
 8004444:	080049d4 	.word	0x080049d4
 8004448:	08004459 	.word	0x08004459
 800444c:	20015370 	.word	0x20015370
 8004450:	080049e4 	.word	0x080049e4
 8004454:	08004495 	.word	0x08004495

08004458 <ReadButtonStateTask>:

  }
}

void ReadButtonStateTask(void *params)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af02      	add	r7, sp, #8
 800445e:	6078      	str	r0, [r7, #4]
   while(1)
   {
      if(GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_10) == Bit_SET)
 8004460:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004464:	4809      	ldr	r0, [pc, #36]	; (800448c <ReadButtonStateTask+0x34>)
 8004466:	f7fb ff41 	bl	80002ec <GPIO_ReadInputDataBit>
 800446a:	4603      	mov	r3, r0
 800446c:	2b01      	cmp	r3, #1
 800446e:	d1f7      	bne.n	8004460 <ReadButtonStateTask+0x8>
      {
    	 delay_FreeRTOS(150);
 8004470:	2096      	movs	r0, #150	; 0x96
 8004472:	f000 f861 	bl	8004538 <delay_FreeRTOS>
         xTaskNotify(LedFlashHandle,0x00,eIncrement);
 8004476:	4b06      	ldr	r3, [pc, #24]	; (8004490 <ReadButtonStateTask+0x38>)
 8004478:	6818      	ldr	r0, [r3, #0]
 800447a:	2300      	movs	r3, #0
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	2302      	movs	r3, #2
 8004480:	2200      	movs	r2, #0
 8004482:	2100      	movs	r1, #0
 8004484:	f7fd ff22 	bl	80022cc <xTaskGenericNotify>
      if(GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_10) == Bit_SET)
 8004488:	e7ea      	b.n	8004460 <ReadButtonStateTask+0x8>
 800448a:	bf00      	nop
 800448c:	40020800 	.word	0x40020800
 8004490:	20015370 	.word	0x20015370

08004494 <LedFlashTask>:
      }
   }
}
void LedFlashTask(void *params)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af02      	add	r7, sp, #8
 800449a:	6078      	str	r0, [r7, #4]
	uint32_t pulNotificationValue = 0;
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]
	   while(1)
	 {
         if(xTaskNotifyWait(0,0,&pulNotificationValue,portMAX_DELAY) == pdTRUE)
 80044a0:	f107 020c 	add.w	r2, r7, #12
 80044a4:	f04f 33ff 	mov.w	r3, #4294967295
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	4613      	mov	r3, r2
 80044ac:	2200      	movs	r2, #0
 80044ae:	2100      	movs	r1, #0
 80044b0:	2000      	movs	r0, #0
 80044b2:	f7fd fe83 	bl	80021bc <xTaskGenericNotifyWait>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d1f1      	bne.n	80044a0 <LedFlashTask+0xc>
         {
              GPIO_ToggleBits(GPIOC,GPIO_Pin_0|GPIO_Pin_1 |GPIO_Pin_2|GPIO_Pin_3);
 80044bc:	210f      	movs	r1, #15
 80044be:	4804      	ldr	r0, [pc, #16]	; (80044d0 <LedFlashTask+0x3c>)
 80044c0:	f7fb ff2e 	bl	8000320 <GPIO_ToggleBits>
              count = pulNotificationValue;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	4b02      	ldr	r3, [pc, #8]	; (80044d4 <LedFlashTask+0x40>)
 80044ca:	701a      	strb	r2, [r3, #0]
         if(xTaskNotifyWait(0,0,&pulNotificationValue,portMAX_DELAY) == pdTRUE)
 80044cc:	e7e8      	b.n	80044a0 <LedFlashTask+0xc>
 80044ce:	bf00      	nop
 80044d0:	40020800 	.word	0x40020800
 80044d4:	20015374 	.word	0x20015374

080044d8 <GPIO_Config>:
         }
	 }
}

void GPIO_Config(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);
 80044de:	2101      	movs	r1, #1
 80044e0:	2004      	movs	r0, #4
 80044e2:	f7fb ff5d 	bl	80003a0 <RCC_AHB1PeriphClockCmd>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044e6:	463b      	mov	r3, r7
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	605a      	str	r2, [r3, #4]

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1 |GPIO_Pin_2|GPIO_Pin_3;
 80044ee:	230f      	movs	r3, #15
 80044f0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80044f2:	2301      	movs	r3, #1
 80044f4:	713b      	strb	r3, [r7, #4]
  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80044f6:	2300      	movs	r3, #0
 80044f8:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80044fe:	2303      	movs	r3, #3
 8004500:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOC,&GPIO_InitStruct);
 8004502:	463b      	mov	r3, r7
 8004504:	4619      	mov	r1, r3
 8004506:	480b      	ldr	r0, [pc, #44]	; (8004534 <GPIO_Config+0x5c>)
 8004508:	f7fb fe62 	bl	80001d0 <GPIO_Init>


  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10;
 800450c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004510:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8004512:	2300      	movs	r3, #0
 8004514:	713b      	strb	r3, [r7, #4]
  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8004516:	2300      	movs	r3, #0
 8004518:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 800451a:	2302      	movs	r3, #2
 800451c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800451e:	2303      	movs	r3, #3
 8004520:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOC,&GPIO_InitStruct);
 8004522:	463b      	mov	r3, r7
 8004524:	4619      	mov	r1, r3
 8004526:	4803      	ldr	r0, [pc, #12]	; (8004534 <GPIO_Config+0x5c>)
 8004528:	f7fb fe52 	bl	80001d0 <GPIO_Init>

}
 800452c:	bf00      	nop
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40020800 	.word	0x40020800

08004538 <delay_FreeRTOS>:
void delay_FreeRTOS(uint32_t delayMS)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t currenTick = xTaskGetTickCount();
 8004540:	f7fd fa00 	bl	8001944 <xTaskGetTickCount>
 8004544:	60f8      	str	r0, [r7, #12]
  uint32_t delayTick = pdMS_TO_TICKS(delayMS);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800454c:	fb02 f303 	mul.w	r3, r2, r3
 8004550:	4a08      	ldr	r2, [pc, #32]	; (8004574 <delay_FreeRTOS+0x3c>)
 8004552:	fba2 2303 	umull	r2, r3, r2, r3
 8004556:	099b      	lsrs	r3, r3, #6
 8004558:	60bb      	str	r3, [r7, #8]

  while(xTaskGetTickCount() < (currenTick + delayTick)); // Wait Until Current tick gets equal to delay tick
 800455a:	bf00      	nop
 800455c:	f7fd f9f2 	bl	8001944 <xTaskGetTickCount>
 8004560:	4601      	mov	r1, r0
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	4413      	add	r3, r2
 8004568:	4299      	cmp	r1, r3
 800456a:	d3f7      	bcc.n	800455c <delay_FreeRTOS+0x24>


}
 800456c:	bf00      	nop
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	10624dd3 	.word	0x10624dd3

08004578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800457c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800457e:	e003      	b.n	8004588 <LoopCopyDataInit>

08004580 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004580:	4b0c      	ldr	r3, [pc, #48]	; (80045b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004582:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004584:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004586:	3104      	adds	r1, #4

08004588 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004588:	480b      	ldr	r0, [pc, #44]	; (80045b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800458a:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800458c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800458e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004590:	d3f6      	bcc.n	8004580 <CopyDataInit>
  ldr  r2, =_sbss
 8004592:	4a0b      	ldr	r2, [pc, #44]	; (80045c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004594:	e002      	b.n	800459c <LoopFillZerobss>

08004596 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004596:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004598:	f842 3b04 	str.w	r3, [r2], #4

0800459c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800459c:	4b09      	ldr	r3, [pc, #36]	; (80045c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800459e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80045a0:	d3f9      	bcc.n	8004596 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80045a2:	f000 f82d 	bl	8004600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045a6:	f000 f959 	bl	800485c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045aa:	f7ff ff1b 	bl	80043e4 <main>
  bx  lr    
 80045ae:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80045b0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80045b4:	08004a0c 	.word	0x08004a0c
  ldr  r0, =_sdata
 80045b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80045bc:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 80045c0:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 80045c4:	20015460 	.word	0x20015460

080045c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045c8:	e7fe      	b.n	80045c8 <ADC_IRQHandler>

080045ca <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80045ca:	b480      	push	{r7}
 80045cc:	af00      	add	r7, sp, #0
}
 80045ce:	bf00      	nop
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80045dc:	e7fe      	b.n	80045dc <HardFault_Handler+0x4>

080045de <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80045de:	b480      	push	{r7}
 80045e0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80045e2:	e7fe      	b.n	80045e2 <MemManage_Handler+0x4>

080045e4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80045e8:	e7fe      	b.n	80045e8 <BusFault_Handler+0x4>

080045ea <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80045ea:	b480      	push	{r7}
 80045ec:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80045ee:	e7fe      	b.n	80045ee <UsageFault_Handler+0x4>

080045f0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
}
 80045f4:	bf00      	nop
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
	...

08004600 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004604:	4a16      	ldr	r2, [pc, #88]	; (8004660 <SystemInit+0x60>)
 8004606:	4b16      	ldr	r3, [pc, #88]	; (8004660 <SystemInit+0x60>)
 8004608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004614:	4a13      	ldr	r2, [pc, #76]	; (8004664 <SystemInit+0x64>)
 8004616:	4b13      	ldr	r3, [pc, #76]	; (8004664 <SystemInit+0x64>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f043 0301 	orr.w	r3, r3, #1
 800461e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004620:	4b10      	ldr	r3, [pc, #64]	; (8004664 <SystemInit+0x64>)
 8004622:	2200      	movs	r2, #0
 8004624:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004626:	4a0f      	ldr	r2, [pc, #60]	; (8004664 <SystemInit+0x64>)
 8004628:	4b0e      	ldr	r3, [pc, #56]	; (8004664 <SystemInit+0x64>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004634:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004636:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <SystemInit+0x64>)
 8004638:	4a0b      	ldr	r2, [pc, #44]	; (8004668 <SystemInit+0x68>)
 800463a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800463c:	4a09      	ldr	r2, [pc, #36]	; (8004664 <SystemInit+0x64>)
 800463e:	4b09      	ldr	r3, [pc, #36]	; (8004664 <SystemInit+0x64>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004646:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004648:	4b06      	ldr	r3, [pc, #24]	; (8004664 <SystemInit+0x64>)
 800464a:	2200      	movs	r2, #0
 800464c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800464e:	f000 f889 	bl	8004764 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004652:	4b03      	ldr	r3, [pc, #12]	; (8004660 <SystemInit+0x60>)
 8004654:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004658:	609a      	str	r2, [r3, #8]
#endif
}
 800465a:	bf00      	nop
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	e000ed00 	.word	0xe000ed00
 8004664:	40023800 	.word	0x40023800
 8004668:	24003010 	.word	0x24003010

0800466c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8004672:	2300      	movs	r3, #0
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]
 800467a:	2302      	movs	r3, #2
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	2300      	movs	r3, #0
 8004680:	60bb      	str	r3, [r7, #8]
 8004682:	2302      	movs	r3, #2
 8004684:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004686:	4b32      	ldr	r3, [pc, #200]	; (8004750 <SystemCoreClockUpdate+0xe4>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 030c 	and.w	r3, r3, #12
 800468e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	2b04      	cmp	r3, #4
 8004694:	d007      	beq.n	80046a6 <SystemCoreClockUpdate+0x3a>
 8004696:	2b08      	cmp	r3, #8
 8004698:	d009      	beq.n	80046ae <SystemCoreClockUpdate+0x42>
 800469a:	2b00      	cmp	r3, #0
 800469c:	d13d      	bne.n	800471a <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800469e:	4b2d      	ldr	r3, [pc, #180]	; (8004754 <SystemCoreClockUpdate+0xe8>)
 80046a0:	4a2d      	ldr	r2, [pc, #180]	; (8004758 <SystemCoreClockUpdate+0xec>)
 80046a2:	601a      	str	r2, [r3, #0]
      break;
 80046a4:	e03d      	b.n	8004722 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80046a6:	4b2b      	ldr	r3, [pc, #172]	; (8004754 <SystemCoreClockUpdate+0xe8>)
 80046a8:	4a2c      	ldr	r2, [pc, #176]	; (800475c <SystemCoreClockUpdate+0xf0>)
 80046aa:	601a      	str	r2, [r3, #0]
      break;
 80046ac:	e039      	b.n	8004722 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80046ae:	4b28      	ldr	r3, [pc, #160]	; (8004750 <SystemCoreClockUpdate+0xe4>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	0d9b      	lsrs	r3, r3, #22
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046ba:	4b25      	ldr	r3, [pc, #148]	; (8004750 <SystemCoreClockUpdate+0xe4>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046c2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00c      	beq.n	80046e4 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80046ca:	4a24      	ldr	r2, [pc, #144]	; (800475c <SystemCoreClockUpdate+0xf0>)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d2:	4a1f      	ldr	r2, [pc, #124]	; (8004750 <SystemCoreClockUpdate+0xe4>)
 80046d4:	6852      	ldr	r2, [r2, #4]
 80046d6:	0992      	lsrs	r2, r2, #6
 80046d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046dc:	fb02 f303 	mul.w	r3, r2, r3
 80046e0:	617b      	str	r3, [r7, #20]
 80046e2:	e00b      	b.n	80046fc <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80046e4:	4a1c      	ldr	r2, [pc, #112]	; (8004758 <SystemCoreClockUpdate+0xec>)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ec:	4a18      	ldr	r2, [pc, #96]	; (8004750 <SystemCoreClockUpdate+0xe4>)
 80046ee:	6852      	ldr	r2, [r2, #4]
 80046f0:	0992      	lsrs	r2, r2, #6
 80046f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046f6:	fb02 f303 	mul.w	r3, r2, r3
 80046fa:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80046fc:	4b14      	ldr	r3, [pc, #80]	; (8004750 <SystemCoreClockUpdate+0xe4>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	0c1b      	lsrs	r3, r3, #16
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	3301      	adds	r3, #1
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	fbb2 f3f3 	udiv	r3, r2, r3
 8004714:	4a0f      	ldr	r2, [pc, #60]	; (8004754 <SystemCoreClockUpdate+0xe8>)
 8004716:	6013      	str	r3, [r2, #0]
      break;
 8004718:	e003      	b.n	8004722 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800471a:	4b0e      	ldr	r3, [pc, #56]	; (8004754 <SystemCoreClockUpdate+0xe8>)
 800471c:	4a0e      	ldr	r2, [pc, #56]	; (8004758 <SystemCoreClockUpdate+0xec>)
 800471e:	601a      	str	r2, [r3, #0]
      break;
 8004720:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004722:	4b0b      	ldr	r3, [pc, #44]	; (8004750 <SystemCoreClockUpdate+0xe4>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	091b      	lsrs	r3, r3, #4
 8004728:	f003 030f 	and.w	r3, r3, #15
 800472c:	4a0c      	ldr	r2, [pc, #48]	; (8004760 <SystemCoreClockUpdate+0xf4>)
 800472e:	5cd3      	ldrb	r3, [r2, r3]
 8004730:	b2db      	uxtb	r3, r3
 8004732:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8004734:	4b07      	ldr	r3, [pc, #28]	; (8004754 <SystemCoreClockUpdate+0xe8>)
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	fa22 f303 	lsr.w	r3, r2, r3
 800473e:	4a05      	ldr	r2, [pc, #20]	; (8004754 <SystemCoreClockUpdate+0xe8>)
 8004740:	6013      	str	r3, [r2, #0]
}
 8004742:	bf00      	nop
 8004744:	371c      	adds	r7, #28
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	40023800 	.word	0x40023800
 8004754:	20000008 	.word	0x20000008
 8004758:	00f42400 	.word	0x00f42400
 800475c:	017d7840 	.word	0x017d7840
 8004760:	2000000c 	.word	0x2000000c

08004764 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800476a:	2300      	movs	r3, #0
 800476c:	607b      	str	r3, [r7, #4]
 800476e:	2300      	movs	r3, #0
 8004770:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8004772:	4a36      	ldr	r2, [pc, #216]	; (800484c <SetSysClock+0xe8>)
 8004774:	4b35      	ldr	r3, [pc, #212]	; (800484c <SetSysClock+0xe8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800477c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800477e:	4b33      	ldr	r3, [pc, #204]	; (800484c <SetSysClock+0xe8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004786:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3301      	adds	r3, #1
 800478c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d103      	bne.n	800479c <SetSysClock+0x38>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800479a:	d1f0      	bne.n	800477e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800479c:	4b2b      	ldr	r3, [pc, #172]	; (800484c <SetSysClock+0xe8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80047a8:	2301      	movs	r3, #1
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	e001      	b.n	80047b2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80047ae:	2300      	movs	r3, #0
 80047b0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d142      	bne.n	800483e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80047b8:	4a24      	ldr	r2, [pc, #144]	; (800484c <SetSysClock+0xe8>)
 80047ba:	4b24      	ldr	r3, [pc, #144]	; (800484c <SetSysClock+0xe8>)
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80047c4:	4a22      	ldr	r2, [pc, #136]	; (8004850 <SetSysClock+0xec>)
 80047c6:	4b22      	ldr	r3, [pc, #136]	; (8004850 <SetSysClock+0xec>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047ce:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80047d0:	4a1e      	ldr	r2, [pc, #120]	; (800484c <SetSysClock+0xe8>)
 80047d2:	4b1e      	ldr	r3, [pc, #120]	; (800484c <SetSysClock+0xe8>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80047d8:	4a1c      	ldr	r2, [pc, #112]	; (800484c <SetSysClock+0xe8>)
 80047da:	4b1c      	ldr	r3, [pc, #112]	; (800484c <SetSysClock+0xe8>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80047e4:	4a19      	ldr	r2, [pc, #100]	; (800484c <SetSysClock+0xe8>)
 80047e6:	4b19      	ldr	r3, [pc, #100]	; (800484c <SetSysClock+0xe8>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80047ee:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80047f0:	4b16      	ldr	r3, [pc, #88]	; (800484c <SetSysClock+0xe8>)
 80047f2:	4a18      	ldr	r2, [pc, #96]	; (8004854 <SetSysClock+0xf0>)
 80047f4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80047f6:	4a15      	ldr	r2, [pc, #84]	; (800484c <SetSysClock+0xe8>)
 80047f8:	4b14      	ldr	r3, [pc, #80]	; (800484c <SetSysClock+0xe8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004800:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8004802:	bf00      	nop
 8004804:	4b11      	ldr	r3, [pc, #68]	; (800484c <SetSysClock+0xe8>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0f9      	beq.n	8004804 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8004810:	4b11      	ldr	r3, [pc, #68]	; (8004858 <SetSysClock+0xf4>)
 8004812:	f240 7205 	movw	r2, #1797	; 0x705
 8004816:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004818:	4a0c      	ldr	r2, [pc, #48]	; (800484c <SetSysClock+0xe8>)
 800481a:	4b0c      	ldr	r3, [pc, #48]	; (800484c <SetSysClock+0xe8>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f023 0303 	bic.w	r3, r3, #3
 8004822:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004824:	4a09      	ldr	r2, [pc, #36]	; (800484c <SetSysClock+0xe8>)
 8004826:	4b09      	ldr	r3, [pc, #36]	; (800484c <SetSysClock+0xe8>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f043 0302 	orr.w	r3, r3, #2
 800482e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8004830:	bf00      	nop
 8004832:	4b06      	ldr	r3, [pc, #24]	; (800484c <SetSysClock+0xe8>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 030c 	and.w	r3, r3, #12
 800483a:	2b08      	cmp	r3, #8
 800483c:	d1f9      	bne.n	8004832 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	40023800 	.word	0x40023800
 8004850:	40007000 	.word	0x40007000
 8004854:	07405419 	.word	0x07405419
 8004858:	40023c00 	.word	0x40023c00

0800485c <__libc_init_array>:
 800485c:	b570      	push	{r4, r5, r6, lr}
 800485e:	4e0d      	ldr	r6, [pc, #52]	; (8004894 <__libc_init_array+0x38>)
 8004860:	4c0d      	ldr	r4, [pc, #52]	; (8004898 <__libc_init_array+0x3c>)
 8004862:	1ba4      	subs	r4, r4, r6
 8004864:	10a4      	asrs	r4, r4, #2
 8004866:	2500      	movs	r5, #0
 8004868:	42a5      	cmp	r5, r4
 800486a:	d109      	bne.n	8004880 <__libc_init_array+0x24>
 800486c:	4e0b      	ldr	r6, [pc, #44]	; (800489c <__libc_init_array+0x40>)
 800486e:	4c0c      	ldr	r4, [pc, #48]	; (80048a0 <__libc_init_array+0x44>)
 8004870:	f000 f83a 	bl	80048e8 <_init>
 8004874:	1ba4      	subs	r4, r4, r6
 8004876:	10a4      	asrs	r4, r4, #2
 8004878:	2500      	movs	r5, #0
 800487a:	42a5      	cmp	r5, r4
 800487c:	d105      	bne.n	800488a <__libc_init_array+0x2e>
 800487e:	bd70      	pop	{r4, r5, r6, pc}
 8004880:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004884:	4798      	blx	r3
 8004886:	3501      	adds	r5, #1
 8004888:	e7ee      	b.n	8004868 <__libc_init_array+0xc>
 800488a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800488e:	4798      	blx	r3
 8004890:	3501      	adds	r5, #1
 8004892:	e7f2      	b.n	800487a <__libc_init_array+0x1e>
 8004894:	08004a04 	.word	0x08004a04
 8004898:	08004a04 	.word	0x08004a04
 800489c:	08004a04 	.word	0x08004a04
 80048a0:	08004a08 	.word	0x08004a08

080048a4 <memcmp>:
 80048a4:	b510      	push	{r4, lr}
 80048a6:	3901      	subs	r1, #1
 80048a8:	4402      	add	r2, r0
 80048aa:	4290      	cmp	r0, r2
 80048ac:	d101      	bne.n	80048b2 <memcmp+0xe>
 80048ae:	2000      	movs	r0, #0
 80048b0:	bd10      	pop	{r4, pc}
 80048b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80048b6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80048ba:	42a3      	cmp	r3, r4
 80048bc:	d0f5      	beq.n	80048aa <memcmp+0x6>
 80048be:	1b18      	subs	r0, r3, r4
 80048c0:	bd10      	pop	{r4, pc}

080048c2 <memcpy>:
 80048c2:	b510      	push	{r4, lr}
 80048c4:	1e43      	subs	r3, r0, #1
 80048c6:	440a      	add	r2, r1
 80048c8:	4291      	cmp	r1, r2
 80048ca:	d100      	bne.n	80048ce <memcpy+0xc>
 80048cc:	bd10      	pop	{r4, pc}
 80048ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048d6:	e7f7      	b.n	80048c8 <memcpy+0x6>

080048d8 <memset>:
 80048d8:	4402      	add	r2, r0
 80048da:	4603      	mov	r3, r0
 80048dc:	4293      	cmp	r3, r2
 80048de:	d100      	bne.n	80048e2 <memset+0xa>
 80048e0:	4770      	bx	lr
 80048e2:	f803 1b01 	strb.w	r1, [r3], #1
 80048e6:	e7f9      	b.n	80048dc <memset+0x4>

080048e8 <_init>:
 80048e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ea:	bf00      	nop
 80048ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ee:	bc08      	pop	{r3}
 80048f0:	469e      	mov	lr, r3
 80048f2:	4770      	bx	lr

080048f4 <_fini>:
 80048f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f6:	bf00      	nop
 80048f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048fa:	bc08      	pop	{r3}
 80048fc:	469e      	mov	lr, r3
 80048fe:	4770      	bx	lr
