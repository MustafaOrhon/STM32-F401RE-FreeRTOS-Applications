
005_LED_Button_Control_IT_FreeRTOS_SEGGER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08004974  08004974  00014974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004a74  08004a74  00014a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004a78  08004a78  00014a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  08004a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
  7 .bss          00015440  2000001c  2000001c  0002001c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2001545c  2001545c  0002001c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011071  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000022ee  00000000  00000000  000310bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000cb0  00000000  00000000  000333b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b98  00000000  00000000  00034060  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000065fd  00000000  00000000  00034bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004bfa  00000000  00000000  0003b1f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003fdef  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000034f8  00000000  00000000  0003fe6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00043364  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800495c 	.word	0x0800495c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	0800495c 	.word	0x0800495c

080001d0 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80001d8:	2300      	movs	r3, #0
 80001da:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80001dc:	4b34      	ldr	r3, [pc, #208]	; (80002b0 <EXTI_Init+0xe0>)
 80001de:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	799b      	ldrb	r3, [r3, #6]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d04f      	beq.n	8000288 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80001e8:	4931      	ldr	r1, [pc, #196]	; (80002b0 <EXTI_Init+0xe0>)
 80001ea:	4b31      	ldr	r3, [pc, #196]	; (80002b0 <EXTI_Init+0xe0>)
 80001ec:	681a      	ldr	r2, [r3, #0]
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	43db      	mvns	r3, r3
 80001f4:	4013      	ands	r3, r2
 80001f6:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80001f8:	492d      	ldr	r1, [pc, #180]	; (80002b0 <EXTI_Init+0xe0>)
 80001fa:	4b2d      	ldr	r3, [pc, #180]	; (80002b0 <EXTI_Init+0xe0>)
 80001fc:	685a      	ldr	r2, [r3, #4]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	43db      	mvns	r3, r3
 8000204:	4013      	ands	r3, r2
 8000206:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	791b      	ldrb	r3, [r3, #4]
 800020c:	461a      	mov	r2, r3
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	4413      	add	r3, r2
 8000212:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	68fa      	ldr	r2, [r7, #12]
 8000218:	6811      	ldr	r1, [r2, #0]
 800021a:	687a      	ldr	r2, [r7, #4]
 800021c:	6812      	ldr	r2, [r2, #0]
 800021e:	430a      	orrs	r2, r1
 8000220:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000222:	4923      	ldr	r1, [pc, #140]	; (80002b0 <EXTI_Init+0xe0>)
 8000224:	4b22      	ldr	r3, [pc, #136]	; (80002b0 <EXTI_Init+0xe0>)
 8000226:	689a      	ldr	r2, [r3, #8]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	43db      	mvns	r3, r3
 800022e:	4013      	ands	r3, r2
 8000230:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000232:	491f      	ldr	r1, [pc, #124]	; (80002b0 <EXTI_Init+0xe0>)
 8000234:	4b1e      	ldr	r3, [pc, #120]	; (80002b0 <EXTI_Init+0xe0>)
 8000236:	68da      	ldr	r2, [r3, #12]
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	43db      	mvns	r3, r3
 800023e:	4013      	ands	r3, r2
 8000240:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	795b      	ldrb	r3, [r3, #5]
 8000246:	2b10      	cmp	r3, #16
 8000248:	d10e      	bne.n	8000268 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800024a:	4919      	ldr	r1, [pc, #100]	; (80002b0 <EXTI_Init+0xe0>)
 800024c:	4b18      	ldr	r3, [pc, #96]	; (80002b0 <EXTI_Init+0xe0>)
 800024e:	689a      	ldr	r2, [r3, #8]
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4313      	orrs	r3, r2
 8000256:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000258:	4915      	ldr	r1, [pc, #84]	; (80002b0 <EXTI_Init+0xe0>)
 800025a:	4b15      	ldr	r3, [pc, #84]	; (80002b0 <EXTI_Init+0xe0>)
 800025c:	68da      	ldr	r2, [r3, #12]
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4313      	orrs	r3, r2
 8000264:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000266:	e01d      	b.n	80002a4 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000268:	4b11      	ldr	r3, [pc, #68]	; (80002b0 <EXTI_Init+0xe0>)
 800026a:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	795b      	ldrb	r3, [r3, #5]
 8000270:	461a      	mov	r2, r3
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	4413      	add	r3, r2
 8000276:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	68fa      	ldr	r2, [r7, #12]
 800027c:	6811      	ldr	r1, [r2, #0]
 800027e:	687a      	ldr	r2, [r7, #4]
 8000280:	6812      	ldr	r2, [r2, #0]
 8000282:	430a      	orrs	r2, r1
 8000284:	601a      	str	r2, [r3, #0]
}
 8000286:	e00d      	b.n	80002a4 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	791b      	ldrb	r3, [r3, #4]
 800028c:	461a      	mov	r2, r3
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	4413      	add	r3, r2
 8000292:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	68fa      	ldr	r2, [r7, #12]
 8000298:	6811      	ldr	r1, [r2, #0]
 800029a:	687a      	ldr	r2, [r7, #4]
 800029c:	6812      	ldr	r2, [r2, #0]
 800029e:	43d2      	mvns	r2, r2
 80002a0:	400a      	ands	r2, r1
 80002a2:	601a      	str	r2, [r3, #0]
}
 80002a4:	bf00      	nop
 80002a6:	3714      	adds	r7, #20
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr
 80002b0:	40013c00 	.word	0x40013c00

080002b4 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80002bc:	4a04      	ldr	r2, [pc, #16]	; (80002d0 <EXTI_ClearITPendingBit+0x1c>)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	6153      	str	r3, [r2, #20]
}
 80002c2:	bf00      	nop
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	40013c00 	.word	0x40013c00

080002d4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b087      	sub	sp, #28
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80002de:	2300      	movs	r3, #0
 80002e0:	617b      	str	r3, [r7, #20]
 80002e2:	2300      	movs	r3, #0
 80002e4:	613b      	str	r3, [r7, #16]
 80002e6:	2300      	movs	r3, #0
 80002e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002ea:	2300      	movs	r3, #0
 80002ec:	617b      	str	r3, [r7, #20]
 80002ee:	e076      	b.n	80003de <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002f0:	2201      	movs	r2, #1
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	fa02 f303 	lsl.w	r3, r2, r3
 80002f8:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	681a      	ldr	r2, [r3, #0]
 80002fe:	693b      	ldr	r3, [r7, #16]
 8000300:	4013      	ands	r3, r2
 8000302:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000304:	68fa      	ldr	r2, [r7, #12]
 8000306:	693b      	ldr	r3, [r7, #16]
 8000308:	429a      	cmp	r2, r3
 800030a:	d165      	bne.n	80003d8 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681a      	ldr	r2, [r3, #0]
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	005b      	lsls	r3, r3, #1
 8000314:	2103      	movs	r1, #3
 8000316:	fa01 f303 	lsl.w	r3, r1, r3
 800031a:	43db      	mvns	r3, r3
 800031c:	401a      	ands	r2, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	791b      	ldrb	r3, [r3, #4]
 800032a:	4619      	mov	r1, r3
 800032c:	697b      	ldr	r3, [r7, #20]
 800032e:	005b      	lsls	r3, r3, #1
 8000330:	fa01 f303 	lsl.w	r3, r1, r3
 8000334:	431a      	orrs	r2, r3
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	791b      	ldrb	r3, [r3, #4]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d003      	beq.n	800034a <GPIO_Init+0x76>
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	791b      	ldrb	r3, [r3, #4]
 8000346:	2b02      	cmp	r3, #2
 8000348:	d12e      	bne.n	80003a8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	689a      	ldr	r2, [r3, #8]
 800034e:	697b      	ldr	r3, [r7, #20]
 8000350:	005b      	lsls	r3, r3, #1
 8000352:	2103      	movs	r1, #3
 8000354:	fa01 f303 	lsl.w	r3, r1, r3
 8000358:	43db      	mvns	r3, r3
 800035a:	401a      	ands	r2, r3
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	689a      	ldr	r2, [r3, #8]
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	795b      	ldrb	r3, [r3, #5]
 8000368:	4619      	mov	r1, r3
 800036a:	697b      	ldr	r3, [r7, #20]
 800036c:	005b      	lsls	r3, r3, #1
 800036e:	fa01 f303 	lsl.w	r3, r1, r3
 8000372:	431a      	orrs	r2, r3
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	685a      	ldr	r2, [r3, #4]
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	b29b      	uxth	r3, r3
 8000380:	4619      	mov	r1, r3
 8000382:	2301      	movs	r3, #1
 8000384:	408b      	lsls	r3, r1
 8000386:	43db      	mvns	r3, r3
 8000388:	401a      	ands	r2, r3
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	683a      	ldr	r2, [r7, #0]
 8000394:	7992      	ldrb	r2, [r2, #6]
 8000396:	4611      	mov	r1, r2
 8000398:	697a      	ldr	r2, [r7, #20]
 800039a:	b292      	uxth	r2, r2
 800039c:	fa01 f202 	lsl.w	r2, r1, r2
 80003a0:	b292      	uxth	r2, r2
 80003a2:	431a      	orrs	r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	68da      	ldr	r2, [r3, #12]
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	b29b      	uxth	r3, r3
 80003b0:	005b      	lsls	r3, r3, #1
 80003b2:	2103      	movs	r1, #3
 80003b4:	fa01 f303 	lsl.w	r3, r1, r3
 80003b8:	43db      	mvns	r3, r3
 80003ba:	401a      	ands	r2, r3
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	68da      	ldr	r2, [r3, #12]
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	79db      	ldrb	r3, [r3, #7]
 80003c8:	4619      	mov	r1, r3
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	005b      	lsls	r3, r3, #1
 80003ce:	fa01 f303 	lsl.w	r3, r1, r3
 80003d2:	431a      	orrs	r2, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003d8:	697b      	ldr	r3, [r7, #20]
 80003da:	3301      	adds	r3, #1
 80003dc:	617b      	str	r3, [r7, #20]
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	2b0f      	cmp	r3, #15
 80003e2:	d985      	bls.n	80002f0 <GPIO_Init+0x1c>
    }
  }
}
 80003e4:	bf00      	nop
 80003e6:	371c      	adds	r7, #28
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr

080003f0 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
 80003f8:	460b      	mov	r3, r1
 80003fa:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80003fc:	2300      	movs	r3, #0
 80003fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	691a      	ldr	r2, [r3, #16]
 8000404:	887b      	ldrh	r3, [r7, #2]
 8000406:	4013      	ands	r3, r2
 8000408:	2b00      	cmp	r3, #0
 800040a:	d002      	beq.n	8000412 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800040c:	2301      	movs	r3, #1
 800040e:	73fb      	strb	r3, [r7, #15]
 8000410:	e001      	b.n	8000416 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000412:	2300      	movs	r3, #0
 8000414:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000416:	7bfb      	ldrb	r3, [r7, #15]
}
 8000418:	4618      	mov	r0, r3
 800041a:	3714      	adds	r7, #20
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	460b      	mov	r3, r1
 800042e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	887a      	ldrh	r2, [r7, #2]
 8000434:	835a      	strh	r2, [r3, #26]
}
 8000436:	bf00      	nop
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr

08000442 <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000442:	b480      	push	{r7}
 8000444:	b083      	sub	sp, #12
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
 800044a:	460b      	mov	r3, r1
 800044c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	695a      	ldr	r2, [r3, #20]
 8000452:	887b      	ldrh	r3, [r7, #2]
 8000454:	405a      	eors	r2, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	615a      	str	r2, [r3, #20]
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
	...

08000468 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800046c:	4a12      	ldr	r2, [pc, #72]	; (80004b8 <RCC_DeInit+0x50>)
 800046e:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <RCC_DeInit+0x50>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f043 0301 	orr.w	r3, r3, #1
 8000476:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000478:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <RCC_DeInit+0x50>)
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 800047e:	4a0e      	ldr	r2, [pc, #56]	; (80004b8 <RCC_DeInit+0x50>)
 8000480:	4b0d      	ldr	r3, [pc, #52]	; (80004b8 <RCC_DeInit+0x50>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 8000488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800048c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800048e:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <RCC_DeInit+0x50>)
 8000490:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <RCC_DeInit+0x54>)
 8000492:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000494:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <RCC_DeInit+0x50>)
 8000496:	4a0a      	ldr	r2, [pc, #40]	; (80004c0 <RCC_DeInit+0x58>)
 8000498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800049c:	4a06      	ldr	r2, [pc, #24]	; (80004b8 <RCC_DeInit+0x50>)
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <RCC_DeInit+0x50>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80004a8:	4b03      	ldr	r3, [pc, #12]	; (80004b8 <RCC_DeInit+0x50>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 80004ae:	bf00      	nop
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr
 80004b8:	40023800 	.word	0x40023800
 80004bc:	24003010 	.word	0x24003010
 80004c0:	20003000 	.word	0x20003000

080004c4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	460b      	mov	r3, r1
 80004ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80004d0:	78fb      	ldrb	r3, [r7, #3]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d006      	beq.n	80004e4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80004d6:	490a      	ldr	r1, [pc, #40]	; (8000500 <RCC_AHB1PeriphClockCmd+0x3c>)
 80004d8:	4b09      	ldr	r3, [pc, #36]	; (8000500 <RCC_AHB1PeriphClockCmd+0x3c>)
 80004da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4313      	orrs	r3, r2
 80004e0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80004e2:	e006      	b.n	80004f2 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80004e4:	4906      	ldr	r1, [pc, #24]	; (8000500 <RCC_AHB1PeriphClockCmd+0x3c>)
 80004e6:	4b06      	ldr	r3, [pc, #24]	; (8000500 <RCC_AHB1PeriphClockCmd+0x3c>)
 80004e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	43db      	mvns	r3, r3
 80004ee:	4013      	ands	r3, r2
 80004f0:	630b      	str	r3, [r1, #48]	; 0x30
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	40023800 	.word	0x40023800

08000504 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	460b      	mov	r3, r1
 800050e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000510:	78fb      	ldrb	r3, [r7, #3]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d006      	beq.n	8000524 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000516:	490a      	ldr	r1, [pc, #40]	; (8000540 <RCC_APB2PeriphClockCmd+0x3c>)
 8000518:	4b09      	ldr	r3, [pc, #36]	; (8000540 <RCC_APB2PeriphClockCmd+0x3c>)
 800051a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4313      	orrs	r3, r2
 8000520:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000522:	e006      	b.n	8000532 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000524:	4906      	ldr	r1, [pc, #24]	; (8000540 <RCC_APB2PeriphClockCmd+0x3c>)
 8000526:	4b06      	ldr	r3, [pc, #24]	; (8000540 <RCC_APB2PeriphClockCmd+0x3c>)
 8000528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	43db      	mvns	r3, r3
 800052e:	4013      	ands	r3, r2
 8000530:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	40023800 	.word	0x40023800

08000544 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000544:	b490      	push	{r4, r7}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	460a      	mov	r2, r1
 800054e:	71fb      	strb	r3, [r7, #7]
 8000550:	4613      	mov	r3, r2
 8000552:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000558:	79bb      	ldrb	r3, [r7, #6]
 800055a:	f003 0303 	and.w	r3, r3, #3
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	220f      	movs	r2, #15
 8000562:	fa02 f303 	lsl.w	r3, r2, r3
 8000566:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000568:	4916      	ldr	r1, [pc, #88]	; (80005c4 <SYSCFG_EXTILineConfig+0x80>)
 800056a:	79bb      	ldrb	r3, [r7, #6]
 800056c:	089b      	lsrs	r3, r3, #2
 800056e:	b2db      	uxtb	r3, r3
 8000570:	4618      	mov	r0, r3
 8000572:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <SYSCFG_EXTILineConfig+0x80>)
 8000574:	79bb      	ldrb	r3, [r7, #6]
 8000576:	089b      	lsrs	r3, r3, #2
 8000578:	b2db      	uxtb	r3, r3
 800057a:	3302      	adds	r3, #2
 800057c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	43db      	mvns	r3, r3
 8000584:	401a      	ands	r2, r3
 8000586:	1c83      	adds	r3, r0, #2
 8000588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800058c:	480d      	ldr	r0, [pc, #52]	; (80005c4 <SYSCFG_EXTILineConfig+0x80>)
 800058e:	79bb      	ldrb	r3, [r7, #6]
 8000590:	089b      	lsrs	r3, r3, #2
 8000592:	b2db      	uxtb	r3, r3
 8000594:	461c      	mov	r4, r3
 8000596:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <SYSCFG_EXTILineConfig+0x80>)
 8000598:	79bb      	ldrb	r3, [r7, #6]
 800059a:	089b      	lsrs	r3, r3, #2
 800059c:	b2db      	uxtb	r3, r3
 800059e:	3302      	adds	r3, #2
 80005a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005a4:	79f9      	ldrb	r1, [r7, #7]
 80005a6:	79bb      	ldrb	r3, [r7, #6]
 80005a8:	f003 0303 	and.w	r3, r3, #3
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	fa01 f303 	lsl.w	r3, r1, r3
 80005b2:	431a      	orrs	r2, r3
 80005b4:	1ca3      	adds	r3, r4, #2
 80005b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc90      	pop	{r4, r7}
 80005c2:	4770      	bx	lr
 80005c4:	40013800 	.word	0x40013800

080005c8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f103 0208 	add.w	r2, r3, #8
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	f04f 32ff 	mov.w	r2, #4294967295
 80005e0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f103 0208 	add.w	r2, r3, #8
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f103 0208 	add.w	r2, r3, #8
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000622:	b480      	push	{r7}
 8000624:	b085      	sub	sp, #20
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
 800062a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000638:	d103      	bne.n	8000642 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	691b      	ldr	r3, [r3, #16]
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	e00c      	b.n	800065c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	3308      	adds	r3, #8
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	e002      	b.n	8000650 <vListInsert+0x2e>
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	429a      	cmp	r2, r3
 800065a:	d9f6      	bls.n	800064a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	685a      	ldr	r2, [r3, #4]
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	683a      	ldr	r2, [r7, #0]
 800066a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	683a      	ldr	r2, [r7, #0]
 8000676:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	1c5a      	adds	r2, r3, #1
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	601a      	str	r2, [r3, #0]
}
 8000688:	bf00      	nop
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	6892      	ldr	r2, [r2, #8]
 80006aa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	6852      	ldr	r2, [r2, #4]
 80006b4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	685a      	ldr	r2, [r3, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d103      	bne.n	80006c8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	689a      	ldr	r2, [r3, #8]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	1e5a      	subs	r2, r3, #1
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	681b      	ldr	r3, [r3, #0]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	3b04      	subs	r3, #4
 80006f8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000700:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	3b04      	subs	r3, #4
 8000706:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	f023 0201 	bic.w	r2, r3, #1
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	3b04      	subs	r3, #4
 8000716:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000718:	4a0c      	ldr	r2, [pc, #48]	; (800074c <pxPortInitialiseStack+0x64>)
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	3b14      	subs	r3, #20
 8000722:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	3b04      	subs	r3, #4
 800072e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f06f 0202 	mvn.w	r2, #2
 8000736:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	3b20      	subs	r3, #32
 800073c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800073e:	68fb      	ldr	r3, [r7, #12]
}
 8000740:	4618      	mov	r0, r3
 8000742:	3714      	adds	r7, #20
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	08000751 	.word	0x08000751

08000750 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <prvTaskExitError+0x50>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000762:	d009      	beq.n	8000778 <prvTaskExitError+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000768:	f383 8811 	msr	BASEPRI, r3
 800076c:	f3bf 8f6f 	isb	sy
 8000770:	f3bf 8f4f 	dsb	sy
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	e7fe      	b.n	8000776 <prvTaskExitError+0x26>
 8000778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800077c:	f383 8811 	msr	BASEPRI, r3
 8000780:	f3bf 8f6f 	isb	sy
 8000784:	f3bf 8f4f 	dsb	sy
 8000788:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800078a:	bf00      	nop
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d0fc      	beq.n	800078c <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000792:	bf00      	nop
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	20000000 	.word	0x20000000
	...

080007b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <pxCurrentTCBConst2>)
 80007b2:	6819      	ldr	r1, [r3, #0]
 80007b4:	6808      	ldr	r0, [r1, #0]
 80007b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007ba:	f380 8809 	msr	PSP, r0
 80007be:	f3bf 8f6f 	isb	sy
 80007c2:	f04f 0000 	mov.w	r0, #0
 80007c6:	f380 8811 	msr	BASEPRI, r0
 80007ca:	4770      	bx	lr
 80007cc:	f3af 8000 	nop.w

080007d0 <pxCurrentTCBConst2>:
 80007d0:	20012c5c 	.word	0x20012c5c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop

080007d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80007d8:	4808      	ldr	r0, [pc, #32]	; (80007fc <prvPortStartFirstTask+0x24>)
 80007da:	6800      	ldr	r0, [r0, #0]
 80007dc:	6800      	ldr	r0, [r0, #0]
 80007de:	f380 8808 	msr	MSP, r0
 80007e2:	f04f 0000 	mov.w	r0, #0
 80007e6:	f380 8814 	msr	CONTROL, r0
 80007ea:	b662      	cpsie	i
 80007ec:	b661      	cpsie	f
 80007ee:	f3bf 8f4f 	dsb	sy
 80007f2:	f3bf 8f6f 	isb	sy
 80007f6:	df00      	svc	0
 80007f8:	bf00      	nop
 80007fa:	0000      	.short	0x0000
 80007fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000800:	bf00      	nop
 8000802:	bf00      	nop

08000804 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800080a:	4b44      	ldr	r3, [pc, #272]	; (800091c <xPortStartScheduler+0x118>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a44      	ldr	r2, [pc, #272]	; (8000920 <xPortStartScheduler+0x11c>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d109      	bne.n	8000828 <xPortStartScheduler+0x24>
 8000814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000818:	f383 8811 	msr	BASEPRI, r3
 800081c:	f3bf 8f6f 	isb	sy
 8000820:	f3bf 8f4f 	dsb	sy
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	e7fe      	b.n	8000826 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000828:	4b3c      	ldr	r3, [pc, #240]	; (800091c <xPortStartScheduler+0x118>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a3d      	ldr	r2, [pc, #244]	; (8000924 <xPortStartScheduler+0x120>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d109      	bne.n	8000846 <xPortStartScheduler+0x42>
 8000832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000836:	f383 8811 	msr	BASEPRI, r3
 800083a:	f3bf 8f6f 	isb	sy
 800083e:	f3bf 8f4f 	dsb	sy
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	e7fe      	b.n	8000844 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000846:	4b38      	ldr	r3, [pc, #224]	; (8000928 <xPortStartScheduler+0x124>)
 8000848:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	22ff      	movs	r2, #255	; 0xff
 8000856:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000860:	78fb      	ldrb	r3, [r7, #3]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4b30      	ldr	r3, [pc, #192]	; (800092c <xPortStartScheduler+0x128>)
 800086c:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800086e:	4b30      	ldr	r3, [pc, #192]	; (8000930 <xPortStartScheduler+0x12c>)
 8000870:	2207      	movs	r2, #7
 8000872:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000874:	e009      	b.n	800088a <xPortStartScheduler+0x86>
        {
            ulMaxPRIGROUPValue--;
 8000876:	4b2e      	ldr	r3, [pc, #184]	; (8000930 <xPortStartScheduler+0x12c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	3b01      	subs	r3, #1
 800087c:	4a2c      	ldr	r2, [pc, #176]	; (8000930 <xPortStartScheduler+0x12c>)
 800087e:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000880:	78fb      	ldrb	r3, [r7, #3]
 8000882:	b2db      	uxtb	r3, r3
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	b2db      	uxtb	r3, r3
 8000888:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800088a:	78fb      	ldrb	r3, [r7, #3]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000892:	2b80      	cmp	r3, #128	; 0x80
 8000894:	d0ef      	beq.n	8000876 <xPortStartScheduler+0x72>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000896:	4b26      	ldr	r3, [pc, #152]	; (8000930 <xPortStartScheduler+0x12c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f1c3 0307 	rsb	r3, r3, #7
 800089e:	2b04      	cmp	r3, #4
 80008a0:	d009      	beq.n	80008b6 <xPortStartScheduler+0xb2>
 80008a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008a6:	f383 8811 	msr	BASEPRI, r3
 80008aa:	f3bf 8f6f 	isb	sy
 80008ae:	f3bf 8f4f 	dsb	sy
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	e7fe      	b.n	80008b4 <xPortStartScheduler+0xb0>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80008b6:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <xPortStartScheduler+0x12c>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	021b      	lsls	r3, r3, #8
 80008bc:	4a1c      	ldr	r2, [pc, #112]	; (8000930 <xPortStartScheduler+0x12c>)
 80008be:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <xPortStartScheduler+0x12c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80008c8:	4a19      	ldr	r2, [pc, #100]	; (8000930 <xPortStartScheduler+0x12c>)
 80008ca:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80008d4:	4a17      	ldr	r2, [pc, #92]	; (8000934 <xPortStartScheduler+0x130>)
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <xPortStartScheduler+0x130>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008de:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80008e0:	4a14      	ldr	r2, [pc, #80]	; (8000934 <xPortStartScheduler+0x130>)
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <xPortStartScheduler+0x130>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80008ea:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80008ec:	f000 f8dc 	bl	8000aa8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <xPortStartScheduler+0x134>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80008f6:	f000 f8fb 	bl	8000af0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80008fa:	4a10      	ldr	r2, [pc, #64]	; (800093c <xPortStartScheduler+0x138>)
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <xPortStartScheduler+0x138>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000904:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000906:	f7ff ff67 	bl	80007d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800090a:	f001 fa8f 	bl	8001e2c <vTaskSwitchContext>
    prvTaskExitError();
 800090e:	f7ff ff1f 	bl	8000750 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8000912:	2300      	movs	r3, #0
}
 8000914:	4618      	mov	r0, r3
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	e000ed00 	.word	0xe000ed00
 8000920:	410fc271 	.word	0x410fc271
 8000924:	410fc270 	.word	0x410fc270
 8000928:	e000e400 	.word	0xe000e400
 800092c:	20000038 	.word	0x20000038
 8000930:	2000003c 	.word	0x2000003c
 8000934:	e000ed20 	.word	0xe000ed20
 8000938:	20000000 	.word	0x20000000
 800093c:	e000ef34 	.word	0xe000ef34

08000940 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800094a:	f383 8811 	msr	BASEPRI, r3
 800094e:	f3bf 8f6f 	isb	sy
 8000952:	f3bf 8f4f 	dsb	sy
 8000956:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000958:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <vPortEnterCritical+0x54>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	3301      	adds	r3, #1
 800095e:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <vPortEnterCritical+0x54>)
 8000960:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <vPortEnterCritical+0x54>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d10e      	bne.n	8000988 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <vPortEnterCritical+0x58>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	b2db      	uxtb	r3, r3
 8000970:	2b00      	cmp	r3, #0
 8000972:	d009      	beq.n	8000988 <vPortEnterCritical+0x48>
 8000974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000978:	f383 8811 	msr	BASEPRI, r3
 800097c:	f3bf 8f6f 	isb	sy
 8000980:	f3bf 8f4f 	dsb	sy
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	e7fe      	b.n	8000986 <vPortEnterCritical+0x46>
    }
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	20000000 	.word	0x20000000
 8000998:	e000ed04 	.word	0xe000ed04

0800099c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <vPortExitCritical+0x4c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d109      	bne.n	80009be <vPortExitCritical+0x22>
 80009aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009ae:	f383 8811 	msr	BASEPRI, r3
 80009b2:	f3bf 8f6f 	isb	sy
 80009b6:	f3bf 8f4f 	dsb	sy
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	e7fe      	b.n	80009bc <vPortExitCritical+0x20>
    uxCriticalNesting--;
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <vPortExitCritical+0x4c>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <vPortExitCritical+0x4c>)
 80009c6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80009c8:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <vPortExitCritical+0x4c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d104      	bne.n	80009da <vPortExitCritical+0x3e>
 80009d0:	2300      	movs	r3, #0
 80009d2:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20000000 	.word	0x20000000
 80009ec:	00000000 	.word	0x00000000

080009f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80009f0:	f3ef 8009 	mrs	r0, PSP
 80009f4:	f3bf 8f6f 	isb	sy
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <pxCurrentTCBConst>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	f01e 0f10 	tst.w	lr, #16
 8000a00:	bf08      	it	eq
 8000a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a0a:	6010      	str	r0, [r2, #0]
 8000a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000a10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000a14:	f380 8811 	msr	BASEPRI, r0
 8000a18:	f3bf 8f4f 	dsb	sy
 8000a1c:	f3bf 8f6f 	isb	sy
 8000a20:	f001 fa04 	bl	8001e2c <vTaskSwitchContext>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	f380 8811 	msr	BASEPRI, r0
 8000a2c:	bc09      	pop	{r0, r3}
 8000a2e:	6819      	ldr	r1, [r3, #0]
 8000a30:	6808      	ldr	r0, [r1, #0]
 8000a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a36:	f01e 0f10 	tst.w	lr, #16
 8000a3a:	bf08      	it	eq
 8000a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000a40:	f380 8809 	msr	PSP, r0
 8000a44:	f3bf 8f6f 	isb	sy
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	f3af 8000 	nop.w

08000a50 <pxCurrentTCBConst>:
 8000a50:	20012c5c 	.word	0x20012c5c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000a54:	bf00      	nop
 8000a56:	bf00      	nop

08000a58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
        __asm volatile
 8000a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a62:	f383 8811 	msr	BASEPRI, r3
 8000a66:	f3bf 8f6f 	isb	sy
 8000a6a:	f3bf 8f4f 	dsb	sy
 8000a6e:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8000a70:	f003 f8da 	bl	8003c28 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000a74:	f001 f8c0 	bl	8001bf8 <xTaskIncrementTick>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d004      	beq.n	8000a88 <SysTick_Handler+0x30>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <SysTick_Handler+0x4c>)
 8000a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	e003      	b.n	8000a90 <SysTick_Handler+0x38>
        }
        else
        {
        	traceISR_EXIT();
 8000a88:	f003 f910 	bl	8003cac <SEGGER_SYSVIEW_RecordExitISR>
        	vTaskSwitchContext();
 8000a8c:	f001 f9ce 	bl	8001e2c <vTaskSwitchContext>
 8000a90:	2300      	movs	r3, #0
 8000a92:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();

}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	e000ed04 	.word	0xe000ed04

08000aa8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <vPortSetupTimerInterrupt+0x34>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <vPortSetupTimerInterrupt+0x38>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <vPortSetupTimerInterrupt+0x3c>)
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <vPortSetupTimerInterrupt+0x40>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	490b      	ldr	r1, [pc, #44]	; (8000aec <vPortSetupTimerInterrupt+0x44>)
 8000ac0:	fba1 1303 	umull	r1, r3, r1, r3
 8000ac4:	099b      	lsrs	r3, r3, #6
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000aca:	4b04      	ldr	r3, [pc, #16]	; (8000adc <vPortSetupTimerInterrupt+0x34>)
 8000acc:	2207      	movs	r2, #7
 8000ace:	601a      	str	r2, [r3, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000e010 	.word	0xe000e010
 8000ae0:	e000e018 	.word	0xe000e018
 8000ae4:	e000e014 	.word	0xe000e014
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	10624dd3 	.word	0x10624dd3

08000af0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8000af0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000b00 <vPortEnableVFP+0x10>
 8000af4:	6801      	ldr	r1, [r0, #0]
 8000af6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000afa:	6001      	str	r1, [r0, #0]
 8000afc:	4770      	bx	lr
 8000afe:	0000      	.short	0x0000
 8000b00:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8000b04:	bf00      	nop
 8000b06:	bf00      	nop

08000b08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8000b0e:	f3ef 8305 	mrs	r3, IPSR
 8000b12:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	2b0f      	cmp	r3, #15
 8000b18:	d913      	bls.n	8000b42 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000b1a:	4a16      	ldr	r2, [pc, #88]	; (8000b74 <vPortValidateInterruptPriority+0x6c>)
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <vPortValidateInterruptPriority+0x70>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	7afa      	ldrb	r2, [r7, #11]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d209      	bcs.n	8000b42 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 8000b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b32:	f383 8811 	msr	BASEPRI, r3
 8000b36:	f3bf 8f6f 	isb	sy
 8000b3a:	f3bf 8f4f 	dsb	sy
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	e7fe      	b.n	8000b40 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <vPortValidateInterruptPriority+0x74>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <vPortValidateInterruptPriority+0x78>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d909      	bls.n	8000b66 <vPortValidateInterruptPriority+0x5e>
 8000b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b56:	f383 8811 	msr	BASEPRI, r3
 8000b5a:	f3bf 8f6f 	isb	sy
 8000b5e:	f3bf 8f4f 	dsb	sy
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	e7fe      	b.n	8000b64 <vPortValidateInterruptPriority+0x5c>
    }
 8000b66:	bf00      	nop
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000e3f0 	.word	0xe000e3f0
 8000b78:	20000038 	.word	0x20000038
 8000b7c:	e000ed0c 	.word	0xe000ed0c
 8000b80:	2000003c 	.word	0x2000003c

08000b84 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8000b90:	f000 ff04 	bl	800199c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8000b94:	4b52      	ldr	r3, [pc, #328]	; (8000ce0 <pvPortMalloc+0x15c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d101      	bne.n	8000ba0 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8000b9c:	f000 f900 	bl	8000da0 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d012      	beq.n	8000bcc <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8000ba6:	2208      	movs	r2, #8
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	1ad3      	subs	r3, r2, r3
 8000bb0:	3308      	adds	r3, #8
 8000bb2:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d304      	bcc.n	8000bc8 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	e001      	b.n	8000bcc <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	db6f      	blt.n	8000cb2 <pvPortMalloc+0x12e>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d06c      	beq.n	8000cb2 <pvPortMalloc+0x12e>
 8000bd8:	4b42      	ldr	r3, [pc, #264]	; (8000ce4 <pvPortMalloc+0x160>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d867      	bhi.n	8000cb2 <pvPortMalloc+0x12e>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8000be2:	4b41      	ldr	r3, [pc, #260]	; (8000ce8 <pvPortMalloc+0x164>)
 8000be4:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8000be6:	4b40      	ldr	r3, [pc, #256]	; (8000ce8 <pvPortMalloc+0x164>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000bec:	e004      	b.n	8000bf8 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8000bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf0:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfa:	685a      	ldr	r2, [r3, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d203      	bcs.n	8000c0a <pvPortMalloc+0x86>
 8000c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d1f1      	bne.n	8000bee <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8000c0a:	4b35      	ldr	r3, [pc, #212]	; (8000ce0 <pvPortMalloc+0x15c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d04e      	beq.n	8000cb2 <pvPortMalloc+0x12e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000c14:	6a3b      	ldr	r3, [r7, #32]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2208      	movs	r2, #8
 8000c1a:	4413      	add	r3, r2
 8000c1c:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	6a3b      	ldr	r3, [r7, #32]
 8000c24:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c28:	685a      	ldr	r2, [r3, #4]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	1ad2      	subs	r2, r2, r3
 8000c2e:	2308      	movs	r3, #8
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d91e      	bls.n	8000c74 <pvPortMalloc+0xf0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	f003 0307 	and.w	r3, r3, #7
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d009      	beq.n	8000c5c <pvPortMalloc+0xd8>
 8000c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c4c:	f383 8811 	msr	BASEPRI, r3
 8000c50:	f3bf 8f6f 	isb	sy
 8000c54:	f3bf 8f4f 	dsb	sy
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	e7fe      	b.n	8000c5a <pvPortMalloc+0xd6>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5e:	685a      	ldr	r2, [r3, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	1ad2      	subs	r2, r2, r3
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8000c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000c6e:	6978      	ldr	r0, [r7, #20]
 8000c70:	f000 f8f2 	bl	8000e58 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000c74:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <pvPortMalloc+0x160>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	4a19      	ldr	r2, [pc, #100]	; (8000ce4 <pvPortMalloc+0x160>)
 8000c80:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <pvPortMalloc+0x160>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	4b19      	ldr	r3, [pc, #100]	; (8000cec <pvPortMalloc+0x168>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d203      	bcs.n	8000c96 <pvPortMalloc+0x112>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <pvPortMalloc+0x160>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a16      	ldr	r2, [pc, #88]	; (8000cec <pvPortMalloc+0x168>)
 8000c94:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8000c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <pvPortMalloc+0x16c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	3301      	adds	r3, #1
 8000cae:	4a10      	ldr	r2, [pc, #64]	; (8000cf0 <pvPortMalloc+0x16c>)
 8000cb0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8000cb2:	f000 fe81 	bl	80019b8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	f003 0307 	and.w	r3, r3, #7
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d009      	beq.n	8000cd4 <pvPortMalloc+0x150>
 8000cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cc4:	f383 8811 	msr	BASEPRI, r3
 8000cc8:	f3bf 8f6f 	isb	sy
 8000ccc:	f3bf 8f4f 	dsb	sy
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	e7fe      	b.n	8000cd2 <pvPortMalloc+0x14e>
    return pvReturn;
 8000cd4:	69fb      	ldr	r3, [r7, #28]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3728      	adds	r7, #40	; 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20012c48 	.word	0x20012c48
 8000ce4:	20012c4c 	.word	0x20012c4c
 8000ce8:	20012c40 	.word	0x20012c40
 8000cec:	20012c50 	.word	0x20012c50
 8000cf0:	20012c54 	.word	0x20012c54

08000cf4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d043      	beq.n	8000d8e <vPortFree+0x9a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8000d06:	2308      	movs	r3, #8
 8000d08:	425b      	negs	r3, r3
 8000d0a:	697a      	ldr	r2, [r7, #20]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db09      	blt.n	8000d30 <vPortFree+0x3c>
 8000d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d20:	f383 8811 	msr	BASEPRI, r3
 8000d24:	f3bf 8f6f 	isb	sy
 8000d28:	f3bf 8f4f 	dsb	sy
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	e7fe      	b.n	8000d2e <vPortFree+0x3a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d009      	beq.n	8000d4c <vPortFree+0x58>
 8000d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d3c:	f383 8811 	msr	BASEPRI, r3
 8000d40:	f3bf 8f6f 	isb	sy
 8000d44:	f3bf 8f4f 	dsb	sy
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	e7fe      	b.n	8000d4a <vPortFree+0x56>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	da1c      	bge.n	8000d8e <vPortFree+0x9a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d118      	bne.n	8000d8e <vPortFree+0x9a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8000d68:	f000 fe18 	bl	800199c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <vPortFree+0xa4>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <vPortFree+0xa4>)
 8000d78:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000d7a:	6938      	ldr	r0, [r7, #16]
 8000d7c:	f000 f86c 	bl	8000e58 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <vPortFree+0xa8>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	3301      	adds	r3, #1
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <vPortFree+0xa8>)
 8000d88:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8000d8a:	f000 fe15 	bl	80019b8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8000d8e:	bf00      	nop
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20012c4c 	.word	0x20012c4c
 8000d9c:	20012c58 	.word	0x20012c58

08000da0 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000da6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000daa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8000dac:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <prvHeapInit+0xa4>)
 8000dae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00c      	beq.n	8000dd4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	3307      	adds	r3, #7
 8000dbe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f023 0307 	bic.w	r3, r3, #7
 8000dc6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8000dc8:	68ba      	ldr	r2, [r7, #8]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	4a1d      	ldr	r2, [pc, #116]	; (8000e44 <prvHeapInit+0xa4>)
 8000dd0:	4413      	add	r3, r2
 8000dd2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000dd8:	4a1b      	ldr	r2, [pc, #108]	; (8000e48 <prvHeapInit+0xa8>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8000dde:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <prvHeapInit+0xa8>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	4413      	add	r3, r2
 8000dea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8000dec:	2208      	movs	r2, #8
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	1a9b      	subs	r3, r3, r2
 8000df2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f023 0307 	bic.w	r3, r3, #7
 8000dfa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <prvHeapInit+0xac>)
 8000e00:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8000e02:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <prvHeapInit+0xac>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2200      	movs	r2, #0
 8000e08:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <prvHeapInit+0xac>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	68fa      	ldr	r2, [r7, #12]
 8000e1a:	1ad2      	subs	r2, r2, r3
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000e20:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <prvHeapInit+0xac>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <prvHeapInit+0xb0>)
 8000e2e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <prvHeapInit+0xb4>)
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	20000040 	.word	0x20000040
 8000e48:	20012c40 	.word	0x20012c40
 8000e4c:	20012c48 	.word	0x20012c48
 8000e50:	20012c50 	.word	0x20012c50
 8000e54:	20012c4c 	.word	0x20012c4c

08000e58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000e60:	4b28      	ldr	r3, [pc, #160]	; (8000f04 <prvInsertBlockIntoFreeList+0xac>)
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	e002      	b.n	8000e6c <prvInsertBlockIntoFreeList+0x14>
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d3f7      	bcc.n	8000e66 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	441a      	add	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d108      	bne.n	8000e9a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	441a      	add	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	441a      	add	r2, r3
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d118      	bne.n	8000ee0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <prvInsertBlockIntoFreeList+0xb0>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d00d      	beq.n	8000ed6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	441a      	add	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	e008      	b.n	8000ee8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <prvInsertBlockIntoFreeList+0xb0>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	e003      	b.n	8000ee8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d002      	beq.n	8000ef6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20012c40 	.word	0x20012c40
 8000f08:	20012c48 	.word	0x20012c48

08000f0c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000f16:	2301      	movs	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d109      	bne.n	8000f38 <xQueueGenericReset+0x2c>
 8000f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f28:	f383 8811 	msr	BASEPRI, r3
 8000f2c:	f3bf 8f6f 	isb	sy
 8000f30:	f3bf 8f4f 	dsb	sy
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	e7fe      	b.n	8000f36 <xQueueGenericReset+0x2a>

    if( ( pxQueue != NULL ) &&
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d05a      	beq.n	8000ff4 <xQueueGenericReset+0xe8>
        ( pxQueue->uxLength >= 1U ) &&
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d056      	beq.n	8000ff4 <xQueueGenericReset+0xe8>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        ( pxQueue->uxLength >= 1U ) &&
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d34c      	bcc.n	8000ff4 <xQueueGenericReset+0xe8>
    {
        taskENTER_CRITICAL();
 8000f5a:	f7ff fcf1 	bl	8000940 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f66:	6939      	ldr	r1, [r7, #16]
 8000f68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000f6a:	fb01 f303 	mul.w	r3, r1, r3
 8000f6e:	441a      	add	r2, r3
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	2200      	movs	r2, #0
 8000f78:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	6939      	ldr	r1, [r7, #16]
 8000f8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000f90:	fb01 f303 	mul.w	r3, r1, r3
 8000f94:	441a      	add	r2, r3
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	22ff      	movs	r2, #255	; 0xff
 8000f9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	22ff      	movs	r2, #255	; 0xff
 8000fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d114      	bne.n	8000fda <xQueueGenericReset+0xce>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	691b      	ldr	r3, [r3, #16]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d01a      	beq.n	8000fee <xQueueGenericReset+0xe2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	3310      	adds	r3, #16
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f001 f809 	bl	8001fd4 <xTaskRemoveFromEventList>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d012      	beq.n	8000fee <xQueueGenericReset+0xe2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000fc8:	4b14      	ldr	r3, [pc, #80]	; (800101c <xQueueGenericReset+0x110>)
 8000fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	f3bf 8f4f 	dsb	sy
 8000fd4:	f3bf 8f6f 	isb	sy
 8000fd8:	e009      	b.n	8000fee <xQueueGenericReset+0xe2>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	3310      	adds	r3, #16
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff faf2 	bl	80005c8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	3324      	adds	r3, #36	; 0x24
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff faed 	bl	80005c8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000fee:	f7ff fcd5 	bl	800099c <vPortExitCritical>
 8000ff2:	e001      	b.n	8000ff8 <xQueueGenericReset+0xec>
    }
    else
    {
        xReturn = pdFAIL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d109      	bne.n	8001012 <xQueueGenericReset+0x106>
 8000ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001002:	f383 8811 	msr	BASEPRI, r3
 8001006:	f3bf 8f6f 	isb	sy
 800100a:	f3bf 8f4f 	dsb	sy
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	e7fe      	b.n	8001010 <xQueueGenericReset+0x104>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001012:	697b      	ldr	r3, [r7, #20]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	e000ed04 	.word	0xe000ed04

08001020 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af02      	add	r7, sp, #8
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	4613      	mov	r3, r2
 800102c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d02b      	beq.n	8001090 <xQueueGenericCreate+0x70>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001038:	f04f 32ff 	mov.w	r2, #4294967295
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	fbb2 f2f3 	udiv	r2, r2, r3
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	429a      	cmp	r2, r3
 8001046:	d323      	bcc.n	8001090 <xQueueGenericCreate+0x70>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001050:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001054:	d81c      	bhi.n	8001090 <xQueueGenericCreate+0x70>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	68ba      	ldr	r2, [r7, #8]
 800105a:	fb02 f303 	mul.w	r3, r2, r3
 800105e:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	3350      	adds	r3, #80	; 0x50
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fd8d 	bl	8000b84 <pvPortMalloc>
 800106a:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d01b      	beq.n	80010aa <xQueueGenericCreate+0x8a>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3350      	adds	r3, #80	; 0x50
 800107a:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800107c:	79fa      	ldrb	r2, [r7, #7]
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	4613      	mov	r3, r2
 8001084:	697a      	ldr	r2, [r7, #20]
 8001086:	68b9      	ldr	r1, [r7, #8]
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f000 f813 	bl	80010b4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800108e:	e00c      	b.n	80010aa <xQueueGenericCreate+0x8a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d109      	bne.n	80010aa <xQueueGenericCreate+0x8a>
 8001096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800109a:	f383 8811 	msr	BASEPRI, r3
 800109e:	f3bf 8f6f 	isb	sy
 80010a2:	f3bf 8f4f 	dsb	sy
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	e7fe      	b.n	80010a8 <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80010aa:	69fb      	ldr	r3, [r7, #28]
    }
 80010ac:	4618      	mov	r0, r3
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
 80010c0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d103      	bne.n	80010d0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	e002      	b.n	80010d6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80010e2:	2101      	movs	r1, #1
 80010e4:	69b8      	ldr	r0, [r7, #24]
 80010e6:	f7ff ff11 	bl	8000f0c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	78fa      	ldrb	r2, [r7, #3]
 80010ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	68ba      	ldr	r2, [r7, #8]
 80010f6:	68f9      	ldr	r1, [r7, #12]
 80010f8:	2073      	movs	r0, #115	; 0x73
 80010fa:	f002 f9c7 	bl	800348c <SEGGER_SYSVIEW_RecordU32x3>
}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b08f      	sub	sp, #60	; 0x3c
 800110c:	af02      	add	r7, sp, #8
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001114:	2300      	movs	r3, #0
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800111c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800111e:	2b00      	cmp	r3, #0
 8001120:	d109      	bne.n	8001136 <xQueueReceive+0x2e>
 8001122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001126:	f383 8811 	msr	BASEPRI, r3
 800112a:	f3bf 8f6f 	isb	sy
 800112e:	f3bf 8f4f 	dsb	sy
 8001132:	623b      	str	r3, [r7, #32]
 8001134:	e7fe      	b.n	8001134 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d103      	bne.n	8001144 <xQueueReceive+0x3c>
 800113c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	2b00      	cmp	r3, #0
 8001142:	d101      	bne.n	8001148 <xQueueReceive+0x40>
 8001144:	2301      	movs	r3, #1
 8001146:	e000      	b.n	800114a <xQueueReceive+0x42>
 8001148:	2300      	movs	r3, #0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d109      	bne.n	8001162 <xQueueReceive+0x5a>
 800114e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001152:	f383 8811 	msr	BASEPRI, r3
 8001156:	f3bf 8f6f 	isb	sy
 800115a:	f3bf 8f4f 	dsb	sy
 800115e:	61fb      	str	r3, [r7, #28]
 8001160:	e7fe      	b.n	8001160 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001162:	f001 f945 	bl	80023f0 <xTaskGetSchedulerState>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d102      	bne.n	8001172 <xQueueReceive+0x6a>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <xQueueReceive+0x6e>
 8001172:	2301      	movs	r3, #1
 8001174:	e000      	b.n	8001178 <xQueueReceive+0x70>
 8001176:	2300      	movs	r3, #0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d109      	bne.n	8001190 <xQueueReceive+0x88>
 800117c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001180:	f383 8811 	msr	BASEPRI, r3
 8001184:	f3bf 8f6f 	isb	sy
 8001188:	f3bf 8f4f 	dsb	sy
 800118c:	61bb      	str	r3, [r7, #24]
 800118e:	e7fe      	b.n	800118e <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001190:	f7ff fbd6 	bl	8000940 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001198:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	2b00      	cmp	r3, #0
 800119e:	d031      	beq.n	8001204 <xQueueReceive+0xfc>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011a4:	f000 f8c4 	bl	8001330 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80011a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011aa:	4618      	mov	r0, r3
 80011ac:	f002 fe82 	bl	8003eb4 <SEGGER_SYSVIEW_ShrinkId>
 80011b0:	4604      	mov	r4, r0
 80011b2:	2000      	movs	r0, #0
 80011b4:	f002 fe7e 	bl	8003eb4 <SEGGER_SYSVIEW_ShrinkId>
 80011b8:	4601      	mov	r1, r0
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	2301      	movs	r3, #1
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	4613      	mov	r3, r2
 80011c2:	460a      	mov	r2, r1
 80011c4:	4621      	mov	r1, r4
 80011c6:	205c      	movs	r0, #92	; 0x5c
 80011c8:	f002 f9d6 	bl	8003578 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80011cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ce:	1e5a      	subs	r2, r3, #1
 80011d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d2:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80011d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00f      	beq.n	80011fc <xQueueReceive+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80011dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011de:	3310      	adds	r3, #16
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 fef7 	bl	8001fd4 <xTaskRemoveFromEventList>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d007      	beq.n	80011fc <xQueueReceive+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80011ec:	4b4f      	ldr	r3, [pc, #316]	; (800132c <xQueueReceive+0x224>)
 80011ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	f3bf 8f4f 	dsb	sy
 80011f8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80011fc:	f7ff fbce 	bl	800099c <vPortExitCritical>
                return pdPASS;
 8001200:	2301      	movs	r3, #1
 8001202:	e08e      	b.n	8001322 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d115      	bne.n	8001236 <xQueueReceive+0x12e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800120a:	f7ff fbc7 	bl	800099c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800120e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001210:	4618      	mov	r0, r3
 8001212:	f002 fe4f 	bl	8003eb4 <SEGGER_SYSVIEW_ShrinkId>
 8001216:	4604      	mov	r4, r0
 8001218:	2000      	movs	r0, #0
 800121a:	f002 fe4b 	bl	8003eb4 <SEGGER_SYSVIEW_ShrinkId>
 800121e:	4601      	mov	r1, r0
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	2301      	movs	r3, #1
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	4613      	mov	r3, r2
 8001228:	460a      	mov	r2, r1
 800122a:	4621      	mov	r1, r4
 800122c:	205c      	movs	r0, #92	; 0x5c
 800122e:	f002 f9a3 	bl	8003578 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8001232:	2300      	movs	r3, #0
 8001234:	e075      	b.n	8001322 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001238:	2b00      	cmp	r3, #0
 800123a:	d106      	bne.n	800124a <xQueueReceive+0x142>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	4618      	mov	r0, r3
 8001242:	f000 ff9f 	bl	8002184 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001246:	2301      	movs	r3, #1
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800124a:	f7ff fba7 	bl	800099c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800124e:	f000 fba5 	bl	800199c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001252:	f7ff fb75 	bl	8000940 <vPortEnterCritical>
 8001256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001258:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800125c:	b25b      	sxtb	r3, r3
 800125e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001262:	d103      	bne.n	800126c <xQueueReceive+0x164>
 8001264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800126c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800126e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001272:	b25b      	sxtb	r3, r3
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001278:	d103      	bne.n	8001282 <xQueueReceive+0x17a>
 800127a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001282:	f7ff fb8b 	bl	800099c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001286:	1d3a      	adds	r2, r7, #4
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f000 ff8e 	bl	80021b0 <xTaskCheckForTimeOut>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d124      	bne.n	80012e4 <xQueueReceive+0x1dc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800129a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800129c:	f000 f8c0 	bl	8001420 <prvIsQueueEmpty>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d018      	beq.n	80012d8 <xQueueReceive+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80012a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a8:	3324      	adds	r3, #36	; 0x24
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	4611      	mov	r1, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 fe24 	bl	8001efc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80012b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012b6:	f000 f861 	bl	800137c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80012ba:	f000 fb7d 	bl	80019b8 <xTaskResumeAll>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f47f af65 	bne.w	8001190 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 80012c6:	4b19      	ldr	r3, [pc, #100]	; (800132c <xQueueReceive+0x224>)
 80012c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	f3bf 8f4f 	dsb	sy
 80012d2:	f3bf 8f6f 	isb	sy
 80012d6:	e75b      	b.n	8001190 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80012d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012da:	f000 f84f 	bl	800137c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80012de:	f000 fb6b 	bl	80019b8 <xTaskResumeAll>
 80012e2:	e755      	b.n	8001190 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80012e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012e6:	f000 f849 	bl	800137c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80012ea:	f000 fb65 	bl	80019b8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80012ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012f0:	f000 f896 	bl	8001420 <prvIsQueueEmpty>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f43f af4a 	beq.w	8001190 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80012fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fe:	4618      	mov	r0, r3
 8001300:	f002 fdd8 	bl	8003eb4 <SEGGER_SYSVIEW_ShrinkId>
 8001304:	4604      	mov	r4, r0
 8001306:	2000      	movs	r0, #0
 8001308:	f002 fdd4 	bl	8003eb4 <SEGGER_SYSVIEW_ShrinkId>
 800130c:	4601      	mov	r1, r0
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	2301      	movs	r3, #1
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	4613      	mov	r3, r2
 8001316:	460a      	mov	r2, r1
 8001318:	4621      	mov	r1, r4
 800131a:	205c      	movs	r0, #92	; 0x5c
 800131c:	f002 f92c 	bl	8003578 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8001320:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001322:	4618      	mov	r0, r3
 8001324:	3734      	adds	r7, #52	; 0x34
 8001326:	46bd      	mov	sp, r7
 8001328:	bd90      	pop	{r4, r7, pc}
 800132a:	bf00      	nop
 800132c:	e000ed04 	.word	0xe000ed04

08001330 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	2b00      	cmp	r3, #0
 8001340:	d018      	beq.n	8001374 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	441a      	add	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	429a      	cmp	r2, r3
 800135a:	d303      	bcc.n	8001364 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68d9      	ldr	r1, [r3, #12]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	461a      	mov	r2, r3
 800136e:	6838      	ldr	r0, [r7, #0]
 8001370:	f003 fae1 	bl	8004936 <memcpy>
    }
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001384:	f7ff fadc 	bl	8000940 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800138e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001390:	e011      	b.n	80013b6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001396:	2b00      	cmp	r3, #0
 8001398:	d012      	beq.n	80013c0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3324      	adds	r3, #36	; 0x24
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 fe18 	bl	8001fd4 <xTaskRemoveFromEventList>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80013aa:	f000 ff65 	bl	8002278 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80013b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	dce9      	bgt.n	8001392 <prvUnlockQueue+0x16>
 80013be:	e000      	b.n	80013c2 <prvUnlockQueue+0x46>
                    break;
 80013c0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	22ff      	movs	r2, #255	; 0xff
 80013c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80013ca:	f7ff fae7 	bl	800099c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80013ce:	f7ff fab7 	bl	8000940 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013d8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80013da:	e011      	b.n	8001400 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d012      	beq.n	800140a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3310      	adds	r3, #16
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fdf3 	bl	8001fd4 <xTaskRemoveFromEventList>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80013f4:	f000 ff40 	bl	8002278 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80013f8:	7bbb      	ldrb	r3, [r7, #14]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001400:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001404:	2b00      	cmp	r3, #0
 8001406:	dce9      	bgt.n	80013dc <prvUnlockQueue+0x60>
 8001408:	e000      	b.n	800140c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800140a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	22ff      	movs	r2, #255	; 0xff
 8001410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001414:	f7ff fac2 	bl	800099c <vPortExitCritical>
}
 8001418:	bf00      	nop
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001428:	f7ff fa8a 	bl	8000940 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001430:	2b00      	cmp	r3, #0
 8001432:	d102      	bne.n	800143a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001434:	2301      	movs	r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	e001      	b.n	800143e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800143e:	f7ff faad 	bl	800099c <vPortExitCritical>

    return xReturn;
 8001442:	68fb      	ldr	r3, [r7, #12]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d109      	bne.n	8001474 <vQueueAddToRegistry+0x28>
 8001460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001464:	f383 8811 	msr	BASEPRI, r3
 8001468:	f3bf 8f6f 	isb	sy
 800146c:	f3bf 8f4f 	dsb	sy
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	e7fe      	b.n	8001472 <vQueueAddToRegistry+0x26>

        if( pcQueueName != NULL )
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d024      	beq.n	80014c4 <vQueueAddToRegistry+0x78>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	e01e      	b.n	80014be <vQueueAddToRegistry+0x72>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001480:	4a1c      	ldr	r2, [pc, #112]	; (80014f4 <vQueueAddToRegistry+0xa8>)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	4413      	add	r3, r2
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	429a      	cmp	r2, r3
 800148e:	d105      	bne.n	800149c <vQueueAddToRegistry+0x50>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	4a17      	ldr	r2, [pc, #92]	; (80014f4 <vQueueAddToRegistry+0xa8>)
 8001496:	4413      	add	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
                    break;
 800149a:	e013      	b.n	80014c4 <vQueueAddToRegistry+0x78>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10a      	bne.n	80014b8 <vQueueAddToRegistry+0x6c>
 80014a2:	4a14      	ldr	r2, [pc, #80]	; (80014f4 <vQueueAddToRegistry+0xa8>)
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d104      	bne.n	80014b8 <vQueueAddToRegistry+0x6c>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	4a10      	ldr	r2, [pc, #64]	; (80014f4 <vQueueAddToRegistry+0xa8>)
 80014b4:	4413      	add	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	3301      	adds	r3, #1
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	2b07      	cmp	r3, #7
 80014c2:	d9dd      	bls.n	8001480 <vQueueAddToRegistry+0x34>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00f      	beq.n	80014ea <vQueueAddToRegistry+0x9e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4618      	mov	r0, r3
 80014da:	f002 fceb 	bl	8003eb4 <SEGGER_SYSVIEW_ShrinkId>
 80014de:	4601      	mov	r1, r0
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	2071      	movs	r0, #113	; 0x71
 80014e6:	f001 ff77 	bl	80033d8 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20015374 	.word	0x20015374

080014f8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001508:	f7ff fa1a 	bl	8000940 <vPortEnterCritical>
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001512:	b25b      	sxtb	r3, r3
 8001514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001518:	d103      	bne.n	8001522 <vQueueWaitForMessageRestricted+0x2a>
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001528:	b25b      	sxtb	r3, r3
 800152a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800152e:	d103      	bne.n	8001538 <vQueueWaitForMessageRestricted+0x40>
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001538:	f7ff fa30 	bl	800099c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001540:	2b00      	cmp	r3, #0
 8001542:	d106      	bne.n	8001552 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	3324      	adds	r3, #36	; 0x24
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	68b9      	ldr	r1, [r7, #8]
 800154c:	4618      	mov	r0, r3
 800154e:	f000 fcf9 	bl	8001f44 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001552:	6978      	ldr	r0, [r7, #20]
 8001554:	f7ff ff12 	bl	800137c <prvUnlockQueue>
    }
 8001558:	bf00      	nop
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001560:	b580      	push	{r7, lr}
 8001562:	b08c      	sub	sp, #48	; 0x30
 8001564:	af04      	add	r7, sp, #16
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	4613      	mov	r3, r2
 800156e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fb05 	bl	8000b84 <pvPortMalloc>
 800157a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d013      	beq.n	80015aa <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001582:	2058      	movs	r0, #88	; 0x58
 8001584:	f7ff fafe 	bl	8000b84 <pvPortMalloc>
 8001588:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d008      	beq.n	80015a2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001590:	2258      	movs	r2, #88	; 0x58
 8001592:	2100      	movs	r1, #0
 8001594:	69f8      	ldr	r0, [r7, #28]
 8001596:	f003 f9d9 	bl	800494c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	631a      	str	r2, [r3, #48]	; 0x30
 80015a0:	e005      	b.n	80015ae <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80015a2:	6978      	ldr	r0, [r7, #20]
 80015a4:	f7ff fba6 	bl	8000cf4 <vPortFree>
 80015a8:	e001      	b.n	80015ae <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d013      	beq.n	80015dc <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80015b4:	88fa      	ldrh	r2, [r7, #6]
 80015b6:	2300      	movs	r3, #0
 80015b8:	9303      	str	r3, [sp, #12]
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	9302      	str	r3, [sp, #8]
 80015be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c0:	9301      	str	r3, [sp, #4]
 80015c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f000 f80e 	bl	80015ec <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80015d0:	69f8      	ldr	r0, [r7, #28]
 80015d2:	f000 f897 	bl	8001704 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80015d6:	2301      	movs	r3, #1
 80015d8:	61bb      	str	r3, [r7, #24]
 80015da:	e002      	b.n	80015e2 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80015dc:	f04f 33ff 	mov.w	r3, #4294967295
 80015e0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80015e2:	69bb      	ldr	r3, [r7, #24]
    }
 80015e4:	4618      	mov	r0, r3
 80015e6:	3720      	adds	r7, #32
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80015fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	461a      	mov	r2, r3
 8001604:	21a5      	movs	r1, #165	; 0xa5
 8001606:	f003 f9a1 	bl	800494c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800160a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800160c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001614:	3b01      	subs	r3, #1
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	f023 0307 	bic.w	r3, r3, #7
 8001622:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	2b00      	cmp	r3, #0
 800162c:	d009      	beq.n	8001642 <prvInitialiseNewTask+0x56>
 800162e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001632:	f383 8811 	msr	BASEPRI, r3
 8001636:	f3bf 8f6f 	isb	sy
 800163a:	f3bf 8f4f 	dsb	sy
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	e7fe      	b.n	8001640 <prvInitialiseNewTask+0x54>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d01e      	beq.n	8001686 <prvInitialiseNewTask+0x9a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
 800164c:	e012      	b.n	8001674 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	4413      	add	r3, r2
 8001654:	7819      	ldrb	r1, [r3, #0]
 8001656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	4413      	add	r3, r2
 800165c:	3334      	adds	r3, #52	; 0x34
 800165e:	460a      	mov	r2, r1
 8001660:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	4413      	add	r3, r2
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d006      	beq.n	800167c <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3301      	adds	r3, #1
 8001672:	61fb      	str	r3, [r7, #28]
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	2b09      	cmp	r3, #9
 8001678:	d9e9      	bls.n	800164e <prvInitialiseNewTask+0x62>
 800167a:	e000      	b.n	800167e <prvInitialiseNewTask+0x92>
            {
                break;
 800167c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800167e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001680:	2200      	movs	r2, #0
 8001682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001688:	2b04      	cmp	r3, #4
 800168a:	d909      	bls.n	80016a0 <prvInitialiseNewTask+0xb4>
 800168c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001690:	f383 8811 	msr	BASEPRI, r3
 8001694:	f3bf 8f6f 	isb	sy
 8001698:	f3bf 8f4f 	dsb	sy
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	e7fe      	b.n	800169e <prvInitialiseNewTask+0xb2>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80016a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	d901      	bls.n	80016aa <prvInitialiseNewTask+0xbe>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80016a6:	2304      	movs	r3, #4
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80016aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016ae:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80016b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016b4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80016b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016b8:	3304      	adds	r3, #4
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe ffa4 	bl	8000608 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80016c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c2:	3318      	adds	r3, #24
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe ff9f 	bl	8000608 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80016ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016ce:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d2:	f1c3 0205 	rsb	r2, r3, #5
 80016d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80016da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016de:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	68f9      	ldr	r1, [r7, #12]
 80016e4:	69b8      	ldr	r0, [r7, #24]
 80016e6:	f7fe ffff 	bl	80006e8 <pxPortInitialiseStack>
 80016ea:	4602      	mov	r2, r0
 80016ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ee:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80016f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d002      	beq.n	80016fc <prvInitialiseNewTask+0x110>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80016f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016fa:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80016fc:	bf00      	nop
 80016fe:	3720      	adds	r7, #32
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001704:	b5b0      	push	{r4, r5, r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af02      	add	r7, sp, #8
 800170a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800170c:	f7ff f918 	bl	8000940 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001710:	4b4f      	ldr	r3, [pc, #316]	; (8001850 <prvAddNewTaskToReadyList+0x14c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	3301      	adds	r3, #1
 8001716:	4a4e      	ldr	r2, [pc, #312]	; (8001850 <prvAddNewTaskToReadyList+0x14c>)
 8001718:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800171a:	4b4e      	ldr	r3, [pc, #312]	; (8001854 <prvAddNewTaskToReadyList+0x150>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d109      	bne.n	8001736 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001722:	4a4c      	ldr	r2, [pc, #304]	; (8001854 <prvAddNewTaskToReadyList+0x150>)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001728:	4b49      	ldr	r3, [pc, #292]	; (8001850 <prvAddNewTaskToReadyList+0x14c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d110      	bne.n	8001752 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001730:	f000 fdc6 	bl	80022c0 <prvInitialiseTaskLists>
 8001734:	e00d      	b.n	8001752 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001736:	4b48      	ldr	r3, [pc, #288]	; (8001858 <prvAddNewTaskToReadyList+0x154>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d109      	bne.n	8001752 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800173e:	4b45      	ldr	r3, [pc, #276]	; (8001854 <prvAddNewTaskToReadyList+0x150>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	429a      	cmp	r2, r3
 800174a:	d802      	bhi.n	8001752 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800174c:	4a41      	ldr	r2, [pc, #260]	; (8001854 <prvAddNewTaskToReadyList+0x150>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001752:	4b42      	ldr	r3, [pc, #264]	; (800185c <prvAddNewTaskToReadyList+0x158>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	3301      	adds	r3, #1
 8001758:	4a40      	ldr	r2, [pc, #256]	; (800185c <prvAddNewTaskToReadyList+0x158>)
 800175a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800175c:	4b3f      	ldr	r3, [pc, #252]	; (800185c <prvAddNewTaskToReadyList+0x158>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d016      	beq.n	8001798 <prvAddNewTaskToReadyList+0x94>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4618      	mov	r0, r3
 800176e:	f002 fad5 	bl	8003d1c <SEGGER_SYSVIEW_OnTaskCreate>
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	461d      	mov	r5, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	461c      	mov	r4, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	1ae3      	subs	r3, r4, r3
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	462b      	mov	r3, r5
 8001794:	f002 fd7a 	bl	800428c <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4618      	mov	r0, r3
 800179c:	f002 fb46 	bl	8003e2c <SEGGER_SYSVIEW_OnTaskStartReady>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	2201      	movs	r2, #1
 80017a6:	409a      	lsls	r2, r3
 80017a8:	4b2d      	ldr	r3, [pc, #180]	; (8001860 <prvAddNewTaskToReadyList+0x15c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	4a2c      	ldr	r2, [pc, #176]	; (8001860 <prvAddNewTaskToReadyList+0x15c>)
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b6:	492b      	ldr	r1, [pc, #172]	; (8001864 <prvAddNewTaskToReadyList+0x160>)
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	3304      	adds	r3, #4
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	3204      	adds	r2, #4
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	1d1a      	adds	r2, r3, #4
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ec:	4613      	mov	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4a1b      	ldr	r2, [pc, #108]	; (8001864 <prvAddNewTaskToReadyList+0x160>)
 80017f6:	441a      	add	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	615a      	str	r2, [r3, #20]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001800:	4918      	ldr	r1, [pc, #96]	; (8001864 <prvAddNewTaskToReadyList+0x160>)
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	440b      	add	r3, r1
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	1c59      	adds	r1, r3, #1
 8001810:	4814      	ldr	r0, [pc, #80]	; (8001864 <prvAddNewTaskToReadyList+0x160>)
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4403      	add	r3, r0
 800181c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800181e:	f7ff f8bd 	bl	800099c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <prvAddNewTaskToReadyList+0x154>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00e      	beq.n	8001848 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <prvAddNewTaskToReadyList+0x150>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	429a      	cmp	r2, r3
 8001836:	d207      	bcs.n	8001848 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <prvAddNewTaskToReadyList+0x164>)
 800183a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	f3bf 8f4f 	dsb	sy
 8001844:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001848:	bf00      	nop
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bdb0      	pop	{r4, r5, r7, pc}
 8001850:	20012d34 	.word	0x20012d34
 8001854:	20012c5c 	.word	0x20012c5c
 8001858:	20012d40 	.word	0x20012d40
 800185c:	20012d50 	.word	0x20012d50
 8001860:	20012d3c 	.word	0x20012d3c
 8001864:	20012c60 	.word	0x20012c60
 8001868:	e000ed04 	.word	0xe000ed04

0800186c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001874:	2300      	movs	r3, #0
 8001876:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d01a      	beq.n	80018b4 <vTaskDelay+0x48>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <vTaskDelay+0x68>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d009      	beq.n	800189a <vTaskDelay+0x2e>
 8001886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800188a:	f383 8811 	msr	BASEPRI, r3
 800188e:	f3bf 8f6f 	isb	sy
 8001892:	f3bf 8f4f 	dsb	sy
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	e7fe      	b.n	8001898 <vTaskDelay+0x2c>
            vTaskSuspendAll();
 800189a:	f000 f87f 	bl	800199c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	2023      	movs	r0, #35	; 0x23
 80018a2:	f001 fd5d 	bl	8003360 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80018a6:	2100      	movs	r1, #0
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 fdbf 	bl	800242c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80018ae:	f000 f883 	bl	80019b8 <xTaskResumeAll>
 80018b2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d107      	bne.n	80018ca <vTaskDelay+0x5e>
        {
            portYIELD_WITHIN_API();
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <vTaskDelay+0x6c>)
 80018bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	f3bf 8f4f 	dsb	sy
 80018c6:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20012d5c 	.word	0x20012d5c
 80018d8:	e000ed04 	.word	0xe000ed04

080018dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80018e2:	4b26      	ldr	r3, [pc, #152]	; (800197c <vTaskStartScheduler+0xa0>)
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	2300      	movs	r3, #0
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	2300      	movs	r3, #0
 80018ec:	2282      	movs	r2, #130	; 0x82
 80018ee:	4924      	ldr	r1, [pc, #144]	; (8001980 <vTaskStartScheduler+0xa4>)
 80018f0:	4824      	ldr	r0, [pc, #144]	; (8001984 <vTaskStartScheduler+0xa8>)
 80018f2:	f7ff fe35 	bl	8001560 <xTaskCreate>
 80018f6:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d102      	bne.n	8001904 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80018fe:	f000 fe15 	bl	800252c <xTimerCreateTimerTask>
 8001902:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d123      	bne.n	8001952 <vTaskStartScheduler+0x76>
 800190a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800190e:	f383 8811 	msr	BASEPRI, r3
 8001912:	f3bf 8f6f 	isb	sy
 8001916:	f3bf 8f4f 	dsb	sy
 800191a:	60bb      	str	r3, [r7, #8]
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800191c:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <vTaskStartScheduler+0xac>)
 800191e:	f04f 32ff 	mov.w	r2, #4294967295
 8001922:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001924:	4b19      	ldr	r3, [pc, #100]	; (800198c <vTaskStartScheduler+0xb0>)
 8001926:	2201      	movs	r2, #1
 8001928:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800192a:	4b19      	ldr	r3, [pc, #100]	; (8001990 <vTaskStartScheduler+0xb4>)
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001930:	4b18      	ldr	r3, [pc, #96]	; (8001994 <vTaskStartScheduler+0xb8>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <vTaskStartScheduler+0xa0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d102      	bne.n	8001942 <vTaskStartScheduler+0x66>
 800193c:	f002 f9d2 	bl	8003ce4 <SEGGER_SYSVIEW_OnIdle>
 8001940:	e004      	b.n	800194c <vTaskStartScheduler+0x70>
 8001942:	4b14      	ldr	r3, [pc, #80]	; (8001994 <vTaskStartScheduler+0xb8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f002 fa2c 	bl	8003da4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800194c:	f7fe ff5a 	bl	8000804 <xPortStartScheduler>
 8001950:	e00d      	b.n	800196e <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001958:	d109      	bne.n	800196e <vTaskStartScheduler+0x92>
 800195a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800195e:	f383 8811 	msr	BASEPRI, r3
 8001962:	f3bf 8f6f 	isb	sy
 8001966:	f3bf 8f4f 	dsb	sy
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	e7fe      	b.n	800196c <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <vTaskStartScheduler+0xbc>)
 8001970:	681b      	ldr	r3, [r3, #0]
}
 8001972:	bf00      	nop
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20012d58 	.word	0x20012d58
 8001980:	08004974 	.word	0x08004974
 8001984:	08002291 	.word	0x08002291
 8001988:	20012d54 	.word	0x20012d54
 800198c:	20012d40 	.word	0x20012d40
 8001990:	20012d38 	.word	0x20012d38
 8001994:	20012c5c 	.word	0x20012c5c
 8001998:	20000004 	.word	0x20000004

0800199c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <vTaskSuspendAll+0x18>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	3301      	adds	r3, #1
 80019a6:	4a03      	ldr	r2, [pc, #12]	; (80019b4 <vTaskSuspendAll+0x18>)
 80019a8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	20012d5c 	.word	0x20012d5c

080019b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80019c6:	4b72      	ldr	r3, [pc, #456]	; (8001b90 <xTaskResumeAll+0x1d8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d109      	bne.n	80019e2 <xTaskResumeAll+0x2a>
 80019ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019d2:	f383 8811 	msr	BASEPRI, r3
 80019d6:	f3bf 8f6f 	isb	sy
 80019da:	f3bf 8f4f 	dsb	sy
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	e7fe      	b.n	80019e0 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80019e2:	f7fe ffad 	bl	8000940 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80019e6:	4b6a      	ldr	r3, [pc, #424]	; (8001b90 <xTaskResumeAll+0x1d8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	4a68      	ldr	r2, [pc, #416]	; (8001b90 <xTaskResumeAll+0x1d8>)
 80019ee:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019f0:	4b67      	ldr	r3, [pc, #412]	; (8001b90 <xTaskResumeAll+0x1d8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f040 80c4 	bne.w	8001b82 <xTaskResumeAll+0x1ca>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80019fa:	4b66      	ldr	r3, [pc, #408]	; (8001b94 <xTaskResumeAll+0x1dc>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 80bf 	beq.w	8001b82 <xTaskResumeAll+0x1ca>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a04:	e08e      	b.n	8001b24 <xTaskResumeAll+0x16c>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a06:	4b64      	ldr	r3, [pc, #400]	; (8001b98 <xTaskResumeAll+0x1e0>)
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	69fa      	ldr	r2, [r7, #28]
 8001a1a:	6a12      	ldr	r2, [r2, #32]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	69d2      	ldr	r2, [r2, #28]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	3318      	adds	r3, #24
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d103      	bne.n	8001a3c <xTaskResumeAll+0x84>
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	6a1a      	ldr	r2, [r3, #32]
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	629a      	str	r2, [r3, #40]	; 0x28
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	1e5a      	subs	r2, r3, #1
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	69fa      	ldr	r2, [r7, #28]
 8001a58:	68d2      	ldr	r2, [r2, #12]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	6892      	ldr	r2, [r2, #8]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d103      	bne.n	8001a7a <xTaskResumeAll+0xc2>
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	615a      	str	r2, [r3, #20]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	1e5a      	subs	r2, r3, #1
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f002 f9cd 	bl	8003e2c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a96:	2201      	movs	r2, #1
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	4b40      	ldr	r3, [pc, #256]	; (8001b9c <xTaskResumeAll+0x1e4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	4a3e      	ldr	r2, [pc, #248]	; (8001b9c <xTaskResumeAll+0x1e4>)
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aa8:	493d      	ldr	r1, [pc, #244]	; (8001ba0 <xTaskResumeAll+0x1e8>)
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	60da      	str	r2, [r3, #12]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	3204      	adds	r2, #4
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	1d1a      	adds	r2, r3, #4
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4a2e      	ldr	r2, [pc, #184]	; (8001ba0 <xTaskResumeAll+0x1e8>)
 8001ae8:	441a      	add	r2, r3
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	615a      	str	r2, [r3, #20]
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001af2:	492b      	ldr	r1, [pc, #172]	; (8001ba0 <xTaskResumeAll+0x1e8>)
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	1c59      	adds	r1, r3, #1
 8001b02:	4827      	ldr	r0, [pc, #156]	; (8001ba0 <xTaskResumeAll+0x1e8>)
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4403      	add	r3, r0
 8001b0e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b14:	4b23      	ldr	r3, [pc, #140]	; (8001ba4 <xTaskResumeAll+0x1ec>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d302      	bcc.n	8001b24 <xTaskResumeAll+0x16c>
                    {
                        xYieldPending = pdTRUE;
 8001b1e:	4b22      	ldr	r3, [pc, #136]	; (8001ba8 <xTaskResumeAll+0x1f0>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b24:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <xTaskResumeAll+0x1e0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f47f af6c 	bne.w	8001a06 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <xTaskResumeAll+0x180>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001b34:	f000 fc40 	bl	80023b8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001b38:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <xTaskResumeAll+0x1f4>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d010      	beq.n	8001b66 <xTaskResumeAll+0x1ae>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001b44:	f000 f858 	bl	8001bf8 <xTaskIncrementTick>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d002      	beq.n	8001b54 <xTaskResumeAll+0x19c>
                            {
                                xYieldPending = pdTRUE;
 8001b4e:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <xTaskResumeAll+0x1f0>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1f1      	bne.n	8001b44 <xTaskResumeAll+0x18c>

                        xPendedTicks = 0;
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <xTaskResumeAll+0x1f4>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <xTaskResumeAll+0x1f0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d009      	beq.n	8001b82 <xTaskResumeAll+0x1ca>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001b72:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <xTaskResumeAll+0x1f8>)
 8001b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	f3bf 8f4f 	dsb	sy
 8001b7e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001b82:	f7fe ff0b 	bl	800099c <vPortExitCritical>

    return xAlreadyYielded;
 8001b86:	69bb      	ldr	r3, [r7, #24]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3720      	adds	r7, #32
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20012d5c 	.word	0x20012d5c
 8001b94:	20012d34 	.word	0x20012d34
 8001b98:	20012cf4 	.word	0x20012cf4
 8001b9c:	20012d3c 	.word	0x20012d3c
 8001ba0:	20012c60 	.word	0x20012c60
 8001ba4:	20012c5c 	.word	0x20012c5c
 8001ba8:	20012d48 	.word	0x20012d48
 8001bac:	20012d44 	.word	0x20012d44
 8001bb0:	e000ed04 	.word	0xe000ed04

08001bb4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <xTaskGetTickCount+0x1c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001bc0:	687b      	ldr	r3, [r7, #4]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20012d38 	.word	0x20012d38

08001bd4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001bda:	f7fe ff95 	bl	8000b08 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001bde:	2300      	movs	r3, #0
 8001be0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001be2:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <xTaskGetTickCountFromISR+0x20>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001be8:	683b      	ldr	r3, [r7, #0]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20012d38 	.word	0x20012d38

08001bf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	; 0x28
 8001bfc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c02:	4b7f      	ldr	r3, [pc, #508]	; (8001e00 <xTaskIncrementTick+0x208>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f040 80ef 	bne.w	8001dea <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001c0c:	4b7d      	ldr	r3, [pc, #500]	; (8001e04 <xTaskIncrementTick+0x20c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	3301      	adds	r3, #1
 8001c12:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001c14:	4a7b      	ldr	r2, [pc, #492]	; (8001e04 <xTaskIncrementTick+0x20c>)
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d11f      	bne.n	8001c60 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8001c20:	4b79      	ldr	r3, [pc, #484]	; (8001e08 <xTaskIncrementTick+0x210>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d009      	beq.n	8001c3e <xTaskIncrementTick+0x46>
 8001c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c2e:	f383 8811 	msr	BASEPRI, r3
 8001c32:	f3bf 8f6f 	isb	sy
 8001c36:	f3bf 8f4f 	dsb	sy
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	e7fe      	b.n	8001c3c <xTaskIncrementTick+0x44>
 8001c3e:	4b72      	ldr	r3, [pc, #456]	; (8001e08 <xTaskIncrementTick+0x210>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	61fb      	str	r3, [r7, #28]
 8001c44:	4b71      	ldr	r3, [pc, #452]	; (8001e0c <xTaskIncrementTick+0x214>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a6f      	ldr	r2, [pc, #444]	; (8001e08 <xTaskIncrementTick+0x210>)
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	4a6f      	ldr	r2, [pc, #444]	; (8001e0c <xTaskIncrementTick+0x214>)
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	4b6f      	ldr	r3, [pc, #444]	; (8001e10 <xTaskIncrementTick+0x218>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	3301      	adds	r3, #1
 8001c58:	4a6d      	ldr	r2, [pc, #436]	; (8001e10 <xTaskIncrementTick+0x218>)
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	f000 fbac 	bl	80023b8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001c60:	4b6c      	ldr	r3, [pc, #432]	; (8001e14 <xTaskIncrementTick+0x21c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6a3a      	ldr	r2, [r7, #32]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	f0c0 80aa 	bcc.w	8001dc0 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c6c:	4b66      	ldr	r3, [pc, #408]	; (8001e08 <xTaskIncrementTick+0x210>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d104      	bne.n	8001c80 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c76:	4b67      	ldr	r3, [pc, #412]	; (8001e14 <xTaskIncrementTick+0x21c>)
 8001c78:	f04f 32ff 	mov.w	r2, #4294967295
 8001c7c:	601a      	str	r2, [r3, #0]
                    break;
 8001c7e:	e09f      	b.n	8001dc0 <xTaskIncrementTick+0x1c8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c80:	4b61      	ldr	r3, [pc, #388]	; (8001e08 <xTaskIncrementTick+0x210>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001c90:	6a3a      	ldr	r2, [r7, #32]
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d203      	bcs.n	8001ca0 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001c98:	4a5e      	ldr	r2, [pc, #376]	; (8001e14 <xTaskIncrementTick+0x21c>)
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001c9e:	e08f      	b.n	8001dc0 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	68d2      	ldr	r2, [r2, #12]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	6892      	ldr	r2, [r2, #8]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d103      	bne.n	8001cce <xTaskIncrementTick+0xd6>
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	615a      	str	r2, [r3, #20]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	1e5a      	subs	r2, r3, #1
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d01e      	beq.n	8001d24 <xTaskIncrementTick+0x12c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	6a12      	ldr	r2, [r2, #32]
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	69d2      	ldr	r2, [r2, #28]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	3318      	adds	r3, #24
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d103      	bne.n	8001d14 <xTaskIncrementTick+0x11c>
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	6a1a      	ldr	r2, [r3, #32]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	2200      	movs	r2, #0
 8001d18:	629a      	str	r2, [r3, #40]	; 0x28
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	1e5a      	subs	r2, r3, #1
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f002 f880 	bl	8003e2c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d30:	2201      	movs	r2, #1
 8001d32:	409a      	lsls	r2, r3
 8001d34:	4b38      	ldr	r3, [pc, #224]	; (8001e18 <xTaskIncrementTick+0x220>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	4a37      	ldr	r2, [pc, #220]	; (8001e18 <xTaskIncrementTick+0x220>)
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d42:	4936      	ldr	r1, [pc, #216]	; (8001e1c <xTaskIncrementTick+0x224>)
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	3304      	adds	r3, #4
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	3204      	adds	r2, #4
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	1d1a      	adds	r2, r3, #4
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d78:	4613      	mov	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4a26      	ldr	r2, [pc, #152]	; (8001e1c <xTaskIncrementTick+0x224>)
 8001d82:	441a      	add	r2, r3
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	615a      	str	r2, [r3, #20]
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d8c:	4923      	ldr	r1, [pc, #140]	; (8001e1c <xTaskIncrementTick+0x224>)
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	440b      	add	r3, r1
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	1c59      	adds	r1, r3, #1
 8001d9c:	481f      	ldr	r0, [pc, #124]	; (8001e1c <xTaskIncrementTick+0x224>)
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4403      	add	r3, r0
 8001da8:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dae:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <xTaskIncrementTick+0x228>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db4:	429a      	cmp	r2, r3
 8001db6:	f67f af59 	bls.w	8001c6c <xTaskIncrementTick+0x74>
                        {
                            xSwitchRequired = pdTRUE;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001dbe:	e755      	b.n	8001c6c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001dc0:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <xTaskIncrementTick+0x228>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc6:	4915      	ldr	r1, [pc, #84]	; (8001e1c <xTaskIncrementTick+0x224>)
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d901      	bls.n	8001ddc <xTaskIncrementTick+0x1e4>
            {
                xSwitchRequired = pdTRUE;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <xTaskIncrementTick+0x22c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d007      	beq.n	8001df4 <xTaskIncrementTick+0x1fc>
            {
                xSwitchRequired = pdTRUE;
 8001de4:	2301      	movs	r3, #1
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
 8001de8:	e004      	b.n	8001df4 <xTaskIncrementTick+0x1fc>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001dea:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <xTaskIncrementTick+0x230>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	3301      	adds	r3, #1
 8001df0:	4a0d      	ldr	r2, [pc, #52]	; (8001e28 <xTaskIncrementTick+0x230>)
 8001df2:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3728      	adds	r7, #40	; 0x28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20012d5c 	.word	0x20012d5c
 8001e04:	20012d38 	.word	0x20012d38
 8001e08:	20012cec 	.word	0x20012cec
 8001e0c:	20012cf0 	.word	0x20012cf0
 8001e10:	20012d4c 	.word	0x20012d4c
 8001e14:	20012d54 	.word	0x20012d54
 8001e18:	20012d3c 	.word	0x20012d3c
 8001e1c:	20012c60 	.word	0x20012c60
 8001e20:	20012c5c 	.word	0x20012c5c
 8001e24:	20012d48 	.word	0x20012d48
 8001e28:	20012d44 	.word	0x20012d44

08001e2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001e32:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <vTaskSwitchContext+0xb8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001e3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ee8 <vTaskSwitchContext+0xbc>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001e40:	e04c      	b.n	8001edc <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 8001e42:	4b29      	ldr	r3, [pc, #164]	; (8001ee8 <vTaskSwitchContext+0xbc>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e48:	4b28      	ldr	r3, [pc, #160]	; (8001eec <vTaskSwitchContext+0xc0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	fab3 f383 	clz	r3, r3
 8001e54:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001e56:	7afb      	ldrb	r3, [r7, #11]
 8001e58:	f1c3 031f 	rsb	r3, r3, #31
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	4924      	ldr	r1, [pc, #144]	; (8001ef0 <vTaskSwitchContext+0xc4>)
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d109      	bne.n	8001e86 <vTaskSwitchContext+0x5a>
        __asm volatile
 8001e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e76:	f383 8811 	msr	BASEPRI, r3
 8001e7a:	f3bf 8f6f 	isb	sy
 8001e7e:	f3bf 8f4f 	dsb	sy
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	e7fe      	b.n	8001e84 <vTaskSwitchContext+0x58>
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4a17      	ldr	r2, [pc, #92]	; (8001ef0 <vTaskSwitchContext+0xc4>)
 8001e92:	4413      	add	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	3308      	adds	r3, #8
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d104      	bne.n	8001eb6 <vTaskSwitchContext+0x8a>
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4a0d      	ldr	r2, [pc, #52]	; (8001ef4 <vTaskSwitchContext+0xc8>)
 8001ebe:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <vTaskSwitchContext+0xc8>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <vTaskSwitchContext+0xcc>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d102      	bne.n	8001ed2 <vTaskSwitchContext+0xa6>
 8001ecc:	f001 ff0a 	bl	8003ce4 <SEGGER_SYSVIEW_OnIdle>
}
 8001ed0:	e004      	b.n	8001edc <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 8001ed2:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <vTaskSwitchContext+0xc8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f001 ff64 	bl	8003da4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001edc:	bf00      	nop
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20012d5c 	.word	0x20012d5c
 8001ee8:	20012d48 	.word	0x20012d48
 8001eec:	20012d3c 	.word	0x20012d3c
 8001ef0:	20012c60 	.word	0x20012c60
 8001ef4:	20012c5c 	.word	0x20012c5c
 8001ef8:	20012d58 	.word	0x20012d58

08001efc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d109      	bne.n	8001f20 <vTaskPlaceOnEventList+0x24>
 8001f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f10:	f383 8811 	msr	BASEPRI, r3
 8001f14:	f3bf 8f6f 	isb	sy
 8001f18:	f3bf 8f4f 	dsb	sy
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	e7fe      	b.n	8001f1e <vTaskPlaceOnEventList+0x22>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001f20:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <vTaskPlaceOnEventList+0x44>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	3318      	adds	r3, #24
 8001f26:	4619      	mov	r1, r3
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7fe fb7a 	bl	8000622 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001f2e:	2101      	movs	r1, #1
 8001f30:	6838      	ldr	r0, [r7, #0]
 8001f32:	f000 fa7b 	bl	800242c <prvAddCurrentTaskToDelayedList>
}
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20012c5c 	.word	0x20012c5c

08001f44 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d109      	bne.n	8001f6a <vTaskPlaceOnEventListRestricted+0x26>
 8001f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f5a:	f383 8811 	msr	BASEPRI, r3
 8001f5e:	f3bf 8f6f 	isb	sy
 8001f62:	f3bf 8f4f 	dsb	sy
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	e7fe      	b.n	8001f68 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	61da      	str	r2, [r3, #28]
 8001f78:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	6892      	ldr	r2, [r2, #8]
 8001f80:	621a      	str	r2, [r3, #32]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	4a12      	ldr	r2, [pc, #72]	; (8001fd0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	3218      	adds	r2, #24
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f103 0218 	add.w	r2, r3, #24
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	629a      	str	r2, [r3, #40]	; 0x28
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	1c5a      	adds	r2, r3, #1
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d002      	beq.n	8001fb8 <vTaskPlaceOnEventListRestricted+0x74>
        {
            xTicksToWait = portMAX_DELAY;
 8001fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001fb8:	2024      	movs	r0, #36	; 0x24
 8001fba:	f001 f9b3 	bl	8003324 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	68b8      	ldr	r0, [r7, #8]
 8001fc2:	f000 fa33 	bl	800242c <prvAddCurrentTaskToDelayedList>
    }
 8001fc6:	bf00      	nop
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20012c5c 	.word	0x20012c5c

08001fd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08a      	sub	sp, #40	; 0x28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d109      	bne.n	8001ffe <xTaskRemoveFromEventList+0x2a>
 8001fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fee:	f383 8811 	msr	BASEPRI, r3
 8001ff2:	f3bf 8f6f 	isb	sy
 8001ff6:	f3bf 8f4f 	dsb	sy
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	e7fe      	b.n	8001ffc <xTaskRemoveFromEventList+0x28>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002002:	61fb      	str	r3, [r7, #28]
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	6a3a      	ldr	r2, [r7, #32]
 800200a:	6a12      	ldr	r2, [r2, #32]
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	6a3b      	ldr	r3, [r7, #32]
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	6a3a      	ldr	r2, [r7, #32]
 8002014:	69d2      	ldr	r2, [r2, #28]
 8002016:	605a      	str	r2, [r3, #4]
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	3318      	adds	r3, #24
 8002020:	429a      	cmp	r2, r3
 8002022:	d103      	bne.n	800202c <xTaskRemoveFromEventList+0x58>
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	6a1a      	ldr	r2, [r3, #32]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	2200      	movs	r2, #0
 8002030:	629a      	str	r2, [r3, #40]	; 0x28
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	1e5a      	subs	r2, r3, #1
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800203c:	4b4b      	ldr	r3, [pc, #300]	; (800216c <xTaskRemoveFromEventList+0x198>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d162      	bne.n	800210a <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	61bb      	str	r3, [r7, #24]
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	6a3a      	ldr	r2, [r7, #32]
 8002050:	68d2      	ldr	r2, [r2, #12]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	6a3b      	ldr	r3, [r7, #32]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	6a3a      	ldr	r2, [r7, #32]
 800205a:	6892      	ldr	r2, [r2, #8]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	3304      	adds	r3, #4
 8002066:	429a      	cmp	r2, r3
 8002068:	d103      	bne.n	8002072 <xTaskRemoveFromEventList+0x9e>
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	2200      	movs	r2, #0
 8002076:	615a      	str	r2, [r3, #20]
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	1e5a      	subs	r2, r3, #1
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	4618      	mov	r0, r3
 8002086:	f001 fed1 	bl	8003e2c <SEGGER_SYSVIEW_OnTaskStartReady>
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208e:	2201      	movs	r2, #1
 8002090:	409a      	lsls	r2, r3
 8002092:	4b37      	ldr	r3, [pc, #220]	; (8002170 <xTaskRemoveFromEventList+0x19c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4313      	orrs	r3, r2
 8002098:	4a35      	ldr	r2, [pc, #212]	; (8002170 <xTaskRemoveFromEventList+0x19c>)
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a0:	4934      	ldr	r1, [pc, #208]	; (8002174 <xTaskRemoveFromEventList+0x1a0>)
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	3304      	adds	r3, #4
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	60da      	str	r2, [r3, #12]
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	6a3a      	ldr	r2, [r7, #32]
 80020c6:	3204      	adds	r2, #4
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	1d1a      	adds	r2, r3, #4
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4a25      	ldr	r2, [pc, #148]	; (8002174 <xTaskRemoveFromEventList+0x1a0>)
 80020e0:	441a      	add	r2, r3
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	615a      	str	r2, [r3, #20]
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ea:	4922      	ldr	r1, [pc, #136]	; (8002174 <xTaskRemoveFromEventList+0x1a0>)
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	1c59      	adds	r1, r3, #1
 80020fa:	481e      	ldr	r0, [pc, #120]	; (8002174 <xTaskRemoveFromEventList+0x1a0>)
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4403      	add	r3, r0
 8002106:	6019      	str	r1, [r3, #0]
 8002108:	e01b      	b.n	8002142 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800210a:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <xTaskRemoveFromEventList+0x1a4>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	61da      	str	r2, [r3, #28]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	6a3b      	ldr	r3, [r7, #32]
 800211c:	621a      	str	r2, [r3, #32]
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	6a3a      	ldr	r2, [r7, #32]
 8002124:	3218      	adds	r2, #24
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	f103 0218 	add.w	r2, r3, #24
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	4a10      	ldr	r2, [pc, #64]	; (8002178 <xTaskRemoveFromEventList+0x1a4>)
 8002136:	629a      	str	r2, [r3, #40]	; 0x28
 8002138:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <xTaskRemoveFromEventList+0x1a4>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	3301      	adds	r3, #1
 800213e:	4a0e      	ldr	r2, [pc, #56]	; (8002178 <xTaskRemoveFromEventList+0x1a4>)
 8002140:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002142:	6a3b      	ldr	r3, [r7, #32]
 8002144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002146:	4b0d      	ldr	r3, [pc, #52]	; (800217c <xTaskRemoveFromEventList+0x1a8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	429a      	cmp	r2, r3
 800214e:	d905      	bls.n	800215c <xTaskRemoveFromEventList+0x188>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002150:	2301      	movs	r3, #1
 8002152:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002154:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <xTaskRemoveFromEventList+0x1ac>)
 8002156:	2201      	movs	r2, #1
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	e001      	b.n	8002160 <xTaskRemoveFromEventList+0x18c>
    }
    else
    {
        xReturn = pdFALSE;
 800215c:	2300      	movs	r3, #0
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002162:	4618      	mov	r0, r3
 8002164:	3728      	adds	r7, #40	; 0x28
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20012d5c 	.word	0x20012d5c
 8002170:	20012d3c 	.word	0x20012d3c
 8002174:	20012c60 	.word	0x20012c60
 8002178:	20012cf4 	.word	0x20012cf4
 800217c:	20012c5c 	.word	0x20012c5c
 8002180:	20012d48 	.word	0x20012d48

08002184 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <vTaskInternalSetTimeOutState+0x24>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002194:	4b05      	ldr	r3, [pc, #20]	; (80021ac <vTaskInternalSetTimeOutState+0x28>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	605a      	str	r2, [r3, #4]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	20012d4c 	.word	0x20012d4c
 80021ac:	20012d38 	.word	0x20012d38

080021b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d109      	bne.n	80021d4 <xTaskCheckForTimeOut+0x24>
 80021c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c4:	f383 8811 	msr	BASEPRI, r3
 80021c8:	f3bf 8f6f 	isb	sy
 80021cc:	f3bf 8f4f 	dsb	sy
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	e7fe      	b.n	80021d2 <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d109      	bne.n	80021ee <xTaskCheckForTimeOut+0x3e>
 80021da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021de:	f383 8811 	msr	BASEPRI, r3
 80021e2:	f3bf 8f6f 	isb	sy
 80021e6:	f3bf 8f4f 	dsb	sy
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	e7fe      	b.n	80021ec <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 80021ee:	f7fe fba7 	bl	8000940 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80021f2:	4b1f      	ldr	r3, [pc, #124]	; (8002270 <xTaskCheckForTimeOut+0xc0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220a:	d102      	bne.n	8002212 <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800220c:	2300      	movs	r3, #0
 800220e:	61fb      	str	r3, [r7, #28]
 8002210:	e026      	b.n	8002260 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	4b17      	ldr	r3, [pc, #92]	; (8002274 <xTaskCheckForTimeOut+0xc4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d00a      	beq.n	8002234 <xTaskCheckForTimeOut+0x84>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	429a      	cmp	r2, r3
 8002226:	d805      	bhi.n	8002234 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002228:	2301      	movs	r3, #1
 800222a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	e015      	b.n	8002260 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	429a      	cmp	r2, r3
 800223c:	d90b      	bls.n	8002256 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	1ad2      	subs	r2, r2, r3
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7ff ff9a 	bl	8002184 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002250:	2300      	movs	r3, #0
 8002252:	61fb      	str	r3, [r7, #28]
 8002254:	e004      	b.n	8002260 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800225c:	2301      	movs	r3, #1
 800225e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002260:	f7fe fb9c 	bl	800099c <vPortExitCritical>

    return xReturn;
 8002264:	69fb      	ldr	r3, [r7, #28]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3720      	adds	r7, #32
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20012d38 	.word	0x20012d38
 8002274:	20012d4c 	.word	0x20012d4c

08002278 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800227c:	4b03      	ldr	r3, [pc, #12]	; (800228c <vTaskMissedYield+0x14>)
 800227e:	2201      	movs	r2, #1
 8002280:	601a      	str	r2, [r3, #0]
}
 8002282:	bf00      	nop
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	20012d48 	.word	0x20012d48

08002290 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002298:	f000 f852 	bl	8002340 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <prvIdleTask+0x28>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d9f9      	bls.n	8002298 <prvIdleTask+0x8>
            {
                taskYIELD();
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <prvIdleTask+0x2c>)
 80022a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	f3bf 8f4f 	dsb	sy
 80022b0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80022b4:	e7f0      	b.n	8002298 <prvIdleTask+0x8>
 80022b6:	bf00      	nop
 80022b8:	20012c60 	.word	0x20012c60
 80022bc:	e000ed04 	.word	0xe000ed04

080022c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80022c6:	2300      	movs	r3, #0
 80022c8:	607b      	str	r3, [r7, #4]
 80022ca:	e00c      	b.n	80022e6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4a12      	ldr	r2, [pc, #72]	; (8002320 <prvInitialiseTaskLists+0x60>)
 80022d8:	4413      	add	r3, r2
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe f974 	bl	80005c8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3301      	adds	r3, #1
 80022e4:	607b      	str	r3, [r7, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d9ef      	bls.n	80022cc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80022ec:	480d      	ldr	r0, [pc, #52]	; (8002324 <prvInitialiseTaskLists+0x64>)
 80022ee:	f7fe f96b 	bl	80005c8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80022f2:	480d      	ldr	r0, [pc, #52]	; (8002328 <prvInitialiseTaskLists+0x68>)
 80022f4:	f7fe f968 	bl	80005c8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <prvInitialiseTaskLists+0x6c>)
 80022fa:	f7fe f965 	bl	80005c8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80022fe:	480c      	ldr	r0, [pc, #48]	; (8002330 <prvInitialiseTaskLists+0x70>)
 8002300:	f7fe f962 	bl	80005c8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002304:	480b      	ldr	r0, [pc, #44]	; (8002334 <prvInitialiseTaskLists+0x74>)
 8002306:	f7fe f95f 	bl	80005c8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800230a:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <prvInitialiseTaskLists+0x78>)
 800230c:	4a05      	ldr	r2, [pc, #20]	; (8002324 <prvInitialiseTaskLists+0x64>)
 800230e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002310:	4b0a      	ldr	r3, [pc, #40]	; (800233c <prvInitialiseTaskLists+0x7c>)
 8002312:	4a05      	ldr	r2, [pc, #20]	; (8002328 <prvInitialiseTaskLists+0x68>)
 8002314:	601a      	str	r2, [r3, #0]
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20012c60 	.word	0x20012c60
 8002324:	20012cc4 	.word	0x20012cc4
 8002328:	20012cd8 	.word	0x20012cd8
 800232c:	20012cf4 	.word	0x20012cf4
 8002330:	20012d08 	.word	0x20012d08
 8002334:	20012d20 	.word	0x20012d20
 8002338:	20012cec 	.word	0x20012cec
 800233c:	20012cf0 	.word	0x20012cf0

08002340 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002346:	e019      	b.n	800237c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002348:	f7fe fafa 	bl	8000940 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800234c:	4b0f      	ldr	r3, [pc, #60]	; (800238c <prvCheckTasksWaitingTermination+0x4c>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3304      	adds	r3, #4
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe f99b 	bl	8000694 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800235e:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <prvCheckTasksWaitingTermination+0x50>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	3b01      	subs	r3, #1
 8002364:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <prvCheckTasksWaitingTermination+0x50>)
 8002366:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002368:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <prvCheckTasksWaitingTermination+0x54>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	3b01      	subs	r3, #1
 800236e:	4a09      	ldr	r2, [pc, #36]	; (8002394 <prvCheckTasksWaitingTermination+0x54>)
 8002370:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002372:	f7fe fb13 	bl	800099c <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f80e 	bl	8002398 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <prvCheckTasksWaitingTermination+0x54>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1e1      	bne.n	8002348 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002384:	bf00      	nop
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20012d08 	.word	0x20012d08
 8002390:	20012d34 	.word	0x20012d34
 8002394:	20012d1c 	.word	0x20012d1c

08002398 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe fca5 	bl	8000cf4 <vPortFree>
            vPortFree( pxTCB );
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7fe fca2 	bl	8000cf4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80023b0:	bf00      	nop
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80023bc:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <prvResetNextTaskUnblockTime+0x30>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d104      	bne.n	80023d0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <prvResetNextTaskUnblockTime+0x34>)
 80023c8:	f04f 32ff 	mov.w	r2, #4294967295
 80023cc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80023ce:	e005      	b.n	80023dc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <prvResetNextTaskUnblockTime+0x30>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a04      	ldr	r2, [pc, #16]	; (80023ec <prvResetNextTaskUnblockTime+0x34>)
 80023da:	6013      	str	r3, [r2, #0]
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	20012cec 	.word	0x20012cec
 80023ec:	20012d54 	.word	0x20012d54

080023f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80023f6:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <xTaskGetSchedulerState+0x34>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d102      	bne.n	8002404 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80023fe:	2301      	movs	r3, #1
 8002400:	607b      	str	r3, [r7, #4]
 8002402:	e008      	b.n	8002416 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002404:	4b08      	ldr	r3, [pc, #32]	; (8002428 <xTaskGetSchedulerState+0x38>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d102      	bne.n	8002412 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800240c:	2302      	movs	r3, #2
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	e001      	b.n	8002416 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002412:	2300      	movs	r3, #0
 8002414:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002416:	687b      	ldr	r3, [r7, #4]
    }
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	20012d40 	.word	0x20012d40
 8002428:	20012d5c 	.word	0x20012d5c

0800242c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002436:	4b36      	ldr	r3, [pc, #216]	; (8002510 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800243c:	4b35      	ldr	r3, [pc, #212]	; (8002514 <prvAddCurrentTaskToDelayedList+0xe8>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	3304      	adds	r3, #4
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe f926 	bl	8000694 <uxListRemove>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10b      	bne.n	8002466 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800244e:	4b31      	ldr	r3, [pc, #196]	; (8002514 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002454:	2201      	movs	r2, #1
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43da      	mvns	r2, r3
 800245c:	4b2e      	ldr	r3, [pc, #184]	; (8002518 <prvAddCurrentTaskToDelayedList+0xec>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4013      	ands	r3, r2
 8002462:	4a2d      	ldr	r2, [pc, #180]	; (8002518 <prvAddCurrentTaskToDelayedList+0xec>)
 8002464:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246c:	d124      	bne.n	80024b8 <prvAddCurrentTaskToDelayedList+0x8c>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d021      	beq.n	80024b8 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002474:	4b29      	ldr	r3, [pc, #164]	; (800251c <prvAddCurrentTaskToDelayedList+0xf0>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	4b26      	ldr	r3, [pc, #152]	; (8002514 <prvAddCurrentTaskToDelayedList+0xe8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	609a      	str	r2, [r3, #8]
 8002482:	4b24      	ldr	r3, [pc, #144]	; (8002514 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	6892      	ldr	r2, [r2, #8]
 800248a:	60da      	str	r2, [r3, #12]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	4a20      	ldr	r2, [pc, #128]	; (8002514 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002492:	6812      	ldr	r2, [r2, #0]
 8002494:	3204      	adds	r2, #4
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	4b1e      	ldr	r3, [pc, #120]	; (8002514 <prvAddCurrentTaskToDelayedList+0xe8>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	1d1a      	adds	r2, r3, #4
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <prvAddCurrentTaskToDelayedList+0xe8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a1d      	ldr	r2, [pc, #116]	; (800251c <prvAddCurrentTaskToDelayedList+0xf0>)
 80024a8:	615a      	str	r2, [r3, #20]
 80024aa:	4b1c      	ldr	r3, [pc, #112]	; (800251c <prvAddCurrentTaskToDelayedList+0xf0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	3301      	adds	r3, #1
 80024b0:	4a1a      	ldr	r2, [pc, #104]	; (800251c <prvAddCurrentTaskToDelayedList+0xf0>)
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80024b6:	e026      	b.n	8002506 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80024c0:	4b14      	ldr	r3, [pc, #80]	; (8002514 <prvAddCurrentTaskToDelayedList+0xe8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d209      	bcs.n	80024e4 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024d0:	4b13      	ldr	r3, [pc, #76]	; (8002520 <prvAddCurrentTaskToDelayedList+0xf4>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <prvAddCurrentTaskToDelayedList+0xe8>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	3304      	adds	r3, #4
 80024da:	4619      	mov	r1, r3
 80024dc:	4610      	mov	r0, r2
 80024de:	f7fe f8a0 	bl	8000622 <vListInsert>
}
 80024e2:	e010      	b.n	8002506 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024e4:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <prvAddCurrentTaskToDelayedList+0xf8>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <prvAddCurrentTaskToDelayedList+0xe8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	3304      	adds	r3, #4
 80024ee:	4619      	mov	r1, r3
 80024f0:	4610      	mov	r0, r2
 80024f2:	f7fe f896 	bl	8000622 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <prvAddCurrentTaskToDelayedList+0xfc>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d202      	bcs.n	8002506 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8002500:	4a09      	ldr	r2, [pc, #36]	; (8002528 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6013      	str	r3, [r2, #0]
}
 8002506:	bf00      	nop
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20012d38 	.word	0x20012d38
 8002514:	20012c5c 	.word	0x20012c5c
 8002518:	20012d3c 	.word	0x20012d3c
 800251c:	20012d20 	.word	0x20012d20
 8002520:	20012cf0 	.word	0x20012cf0
 8002524:	20012cec 	.word	0x20012cec
 8002528:	20012d54 	.word	0x20012d54

0800252c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002532:	2300      	movs	r3, #0
 8002534:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002536:	f000 fa43 	bl	80029c0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800253a:	4b11      	ldr	r3, [pc, #68]	; (8002580 <xTimerCreateTimerTask+0x54>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00b      	beq.n	800255a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8002542:	4b10      	ldr	r3, [pc, #64]	; (8002584 <xTimerCreateTimerTask+0x58>)
 8002544:	9301      	str	r3, [sp, #4]
 8002546:	2302      	movs	r3, #2
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	2300      	movs	r3, #0
 800254c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002550:	490d      	ldr	r1, [pc, #52]	; (8002588 <xTimerCreateTimerTask+0x5c>)
 8002552:	480e      	ldr	r0, [pc, #56]	; (800258c <xTimerCreateTimerTask+0x60>)
 8002554:	f7ff f804 	bl	8001560 <xTaskCreate>
 8002558:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d109      	bne.n	8002574 <xTimerCreateTimerTask+0x48>
 8002560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002564:	f383 8811 	msr	BASEPRI, r3
 8002568:	f3bf 8f6f 	isb	sy
 800256c:	f3bf 8f4f 	dsb	sy
 8002570:	603b      	str	r3, [r7, #0]
 8002572:	e7fe      	b.n	8002572 <xTimerCreateTimerTask+0x46>
        return xReturn;
 8002574:	687b      	ldr	r3, [r7, #4]
    }
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20012d90 	.word	0x20012d90
 8002584:	20012d94 	.word	0x20012d94
 8002588:	0800497c 	.word	0x0800497c
 800258c:	08002631 	.word	0x08002631

08002590 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800259c:	e008      	b.n	80025b0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	4413      	add	r3, r2
 80025a6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	699a      	ldr	r2, [r3, #24]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	18d1      	adds	r1, r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 f8db 	bl	8002778 <prvInsertTimerInActiveList>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1ea      	bne.n	800259e <prvReloadTimer+0xe>
        }
    }
 80025c8:	bf00      	nop
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025da:	4b14      	ldr	r3, [pc, #80]	; (800262c <prvProcessExpiredTimer+0x5c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	3304      	adds	r3, #4
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe f853 	bl	8000694 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f7ff ffc5 	bl	8002590 <prvReloadTimer>
 8002606:	e008      	b.n	800261a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800260e:	f023 0301 	bic.w	r3, r3, #1
 8002612:	b2da      	uxtb	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	4798      	blx	r3
    }
 8002622:	bf00      	nop
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20012d88 	.word	0x20012d88

08002630 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002638:	f107 0308 	add.w	r3, r7, #8
 800263c:	4618      	mov	r0, r3
 800263e:	f000 f857 	bl	80026f0 <prvGetNextExpireTime>
 8002642:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	4619      	mov	r1, r3
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f803 	bl	8002654 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800264e:	f000 f8d5 	bl	80027fc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002652:	e7f1      	b.n	8002638 <prvTimerTask+0x8>

08002654 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800265e:	f7ff f99d 	bl	800199c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002662:	f107 0308 	add.w	r3, r7, #8
 8002666:	4618      	mov	r0, r3
 8002668:	f000 f866 	bl	8002738 <prvSampleTimeNow>
 800266c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d130      	bne.n	80026d6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10a      	bne.n	8002690 <prvProcessTimerOrBlockTask+0x3c>
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	429a      	cmp	r2, r3
 8002680:	d806      	bhi.n	8002690 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002682:	f7ff f999 	bl	80019b8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002686:	68f9      	ldr	r1, [r7, #12]
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff ffa1 	bl	80025d0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800268e:	e024      	b.n	80026da <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d008      	beq.n	80026a8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002696:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <prvProcessTimerOrBlockTask+0x90>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <prvProcessTimerOrBlockTask+0x50>
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <prvProcessTimerOrBlockTask+0x52>
 80026a4:	2300      	movs	r3, #0
 80026a6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80026a8:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <prvProcessTimerOrBlockTask+0x94>)
 80026aa:	6818      	ldr	r0, [r3, #0]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	4619      	mov	r1, r3
 80026b6:	f7fe ff1f 	bl	80014f8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80026ba:	f7ff f97d 	bl	80019b8 <xTaskResumeAll>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10a      	bne.n	80026da <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80026c4:	4b09      	ldr	r3, [pc, #36]	; (80026ec <prvProcessTimerOrBlockTask+0x98>)
 80026c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	f3bf 8f6f 	isb	sy
    }
 80026d4:	e001      	b.n	80026da <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80026d6:	f7ff f96f 	bl	80019b8 <xTaskResumeAll>
    }
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20012d8c 	.word	0x20012d8c
 80026e8:	20012d90 	.word	0x20012d90
 80026ec:	e000ed04 	.word	0xe000ed04

080026f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80026f8:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <prvGetNextExpireTime+0x44>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <prvGetNextExpireTime+0x16>
 8002702:	2201      	movs	r2, #1
 8002704:	e000      	b.n	8002708 <prvGetNextExpireTime+0x18>
 8002706:	2200      	movs	r2, #0
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d105      	bne.n	8002720 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002714:	4b07      	ldr	r3, [pc, #28]	; (8002734 <prvGetNextExpireTime+0x44>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	e001      	b.n	8002724 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002724:	68fb      	ldr	r3, [r7, #12]
    }
 8002726:	4618      	mov	r0, r3
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	20012d88 	.word	0x20012d88

08002738 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002740:	f7ff fa38 	bl	8001bb4 <xTaskGetTickCount>
 8002744:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002746:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <prvSampleTimeNow+0x3c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	429a      	cmp	r2, r3
 800274e:	d205      	bcs.n	800275c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002750:	f000 f910 	bl	8002974 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	e002      	b.n	8002762 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002762:	4a04      	ldr	r2, [pc, #16]	; (8002774 <prvSampleTimeNow+0x3c>)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002768:	68fb      	ldr	r3, [r7, #12]
    }
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20012d98 	.word	0x20012d98

08002778 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	429a      	cmp	r2, r3
 800279c:	d812      	bhi.n	80027c4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	1ad2      	subs	r2, r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d302      	bcc.n	80027b2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80027ac:	2301      	movs	r3, #1
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	e01b      	b.n	80027ea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80027b2:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <prvInsertTimerInActiveList+0x7c>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	3304      	adds	r3, #4
 80027ba:	4619      	mov	r1, r3
 80027bc:	4610      	mov	r0, r2
 80027be:	f7fd ff30 	bl	8000622 <vListInsert>
 80027c2:	e012      	b.n	80027ea <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d206      	bcs.n	80027da <prvInsertTimerInActiveList+0x62>
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d302      	bcc.n	80027da <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80027d4:	2301      	movs	r3, #1
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	e007      	b.n	80027ea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80027da:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <prvInsertTimerInActiveList+0x80>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	3304      	adds	r3, #4
 80027e2:	4619      	mov	r1, r3
 80027e4:	4610      	mov	r0, r2
 80027e6:	f7fd ff1c 	bl	8000622 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80027ea:	697b      	ldr	r3, [r7, #20]
    }
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20012d8c 	.word	0x20012d8c
 80027f8:	20012d88 	.word	0x20012d88

080027fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002802:	e0a5      	b.n	8002950 <prvProcessReceivedCommands+0x154>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f2c0 80a2 	blt.w	8002950 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d004      	beq.n	8002822 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	3304      	adds	r3, #4
 800281c:	4618      	mov	r0, r3
 800281e:	f7fd ff39 	bl	8000694 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff87 	bl	8002738 <prvSampleTimeNow>
 800282a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	3b01      	subs	r3, #1
 8002830:	2b08      	cmp	r3, #8
 8002832:	f200 808c 	bhi.w	800294e <prvProcessReceivedCommands+0x152>
 8002836:	a201      	add	r2, pc, #4	; (adr r2, 800283c <prvProcessReceivedCommands+0x40>)
 8002838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283c:	08002861 	.word	0x08002861
 8002840:	08002861 	.word	0x08002861
 8002844:	080028c9 	.word	0x080028c9
 8002848:	080028dd 	.word	0x080028dd
 800284c:	08002925 	.word	0x08002925
 8002850:	08002861 	.word	0x08002861
 8002854:	08002861 	.word	0x08002861
 8002858:	080028c9 	.word	0x080028c9
 800285c:	080028dd 	.word	0x080028dd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	b2da      	uxtb	r2, r3
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	18d1      	adds	r1, r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	69f8      	ldr	r0, [r7, #28]
 8002880:	f7ff ff7a 	bl	8002778 <prvInsertTimerInActiveList>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d062      	beq.n	8002950 <prvProcessReceivedCommands+0x154>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d009      	beq.n	80028ac <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	4413      	add	r3, r2
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4619      	mov	r1, r3
 80028a4:	69f8      	ldr	r0, [r7, #28]
 80028a6:	f7ff fe73 	bl	8002590 <prvReloadTimer>
 80028aa:	e008      	b.n	80028be <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028b2:	f023 0301 	bic.w	r3, r3, #1
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	69f8      	ldr	r0, [r7, #28]
 80028c4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80028c6:	e043      	b.n	8002950 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028ce:	f023 0301 	bic.w	r3, r3, #1
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80028da:	e039      	b.n	8002950 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d109      	bne.n	8002910 <prvProcessReceivedCommands+0x114>
 80028fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002900:	f383 8811 	msr	BASEPRI, r3
 8002904:	f3bf 8f6f 	isb	sy
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	e7fe      	b.n	800290e <prvProcessReceivedCommands+0x112>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	699a      	ldr	r2, [r3, #24]
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	18d1      	adds	r1, r2, r3
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	69f8      	ldr	r0, [r7, #28]
 800291e:	f7ff ff2b 	bl	8002778 <prvInsertTimerInActiveList>
                        break;
 8002922:	e015      	b.n	8002950 <prvProcessReceivedCommands+0x154>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d103      	bne.n	800293a <prvProcessReceivedCommands+0x13e>
                            {
                                vPortFree( pxTimer );
 8002932:	69f8      	ldr	r0, [r7, #28]
 8002934:	f7fe f9de 	bl	8000cf4 <vPortFree>
 8002938:	e00a      	b.n	8002950 <prvProcessReceivedCommands+0x154>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002940:	f023 0301 	bic.w	r3, r3, #1
 8002944:	b2da      	uxtb	r2, r3
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800294c:	e000      	b.n	8002950 <prvProcessReceivedCommands+0x154>

                    default:
                        /* Don't expect to get here. */
                        break;
 800294e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002950:	4b07      	ldr	r3, [pc, #28]	; (8002970 <prvProcessReceivedCommands+0x174>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f107 0108 	add.w	r1, r7, #8
 8002958:	2200      	movs	r2, #0
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe fbd4 	bl	8001108 <xQueueReceive>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	f47f af4e 	bne.w	8002804 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002968:	bf00      	nop
 800296a:	3720      	adds	r7, #32
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20012d90 	.word	0x20012d90

08002974 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800297a:	e009      	b.n	8002990 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800297c:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <prvSwitchTimerLists+0x44>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	607b      	str	r3, [r7, #4]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002986:	f04f 31ff 	mov.w	r1, #4294967295
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff fe20 	bl	80025d0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002990:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <prvSwitchTimerLists+0x44>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800299a:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <prvSwitchTimerLists+0x44>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	603b      	str	r3, [r7, #0]
        pxCurrentTimerList = pxOverflowTimerList;
 80029a0:	4b06      	ldr	r3, [pc, #24]	; (80029bc <prvSwitchTimerLists+0x48>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a04      	ldr	r2, [pc, #16]	; (80029b8 <prvSwitchTimerLists+0x44>)
 80029a6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80029a8:	4a04      	ldr	r2, [pc, #16]	; (80029bc <prvSwitchTimerLists+0x48>)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	6013      	str	r3, [r2, #0]
    }
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20012d88 	.word	0x20012d88
 80029bc:	20012d8c 	.word	0x20012d8c

080029c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80029c4:	f7fd ffbc 	bl	8000940 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80029c8:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <prvCheckForValidListAndQueue+0x54>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d11d      	bne.n	8002a0c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80029d0:	4811      	ldr	r0, [pc, #68]	; (8002a18 <prvCheckForValidListAndQueue+0x58>)
 80029d2:	f7fd fdf9 	bl	80005c8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80029d6:	4811      	ldr	r0, [pc, #68]	; (8002a1c <prvCheckForValidListAndQueue+0x5c>)
 80029d8:	f7fd fdf6 	bl	80005c8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80029dc:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <prvCheckForValidListAndQueue+0x60>)
 80029de:	4a0e      	ldr	r2, [pc, #56]	; (8002a18 <prvCheckForValidListAndQueue+0x58>)
 80029e0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <prvCheckForValidListAndQueue+0x64>)
 80029e4:	4a0d      	ldr	r2, [pc, #52]	; (8002a1c <prvCheckForValidListAndQueue+0x5c>)
 80029e6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80029e8:	2200      	movs	r2, #0
 80029ea:	210c      	movs	r1, #12
 80029ec:	200a      	movs	r0, #10
 80029ee:	f7fe fb17 	bl	8001020 <xQueueGenericCreate>
 80029f2:	4602      	mov	r2, r0
 80029f4:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <prvCheckForValidListAndQueue+0x54>)
 80029f6:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <prvCheckForValidListAndQueue+0x54>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002a00:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <prvCheckForValidListAndQueue+0x54>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4908      	ldr	r1, [pc, #32]	; (8002a28 <prvCheckForValidListAndQueue+0x68>)
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fe fd20 	bl	800144c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002a0c:	f7fd ffc6 	bl	800099c <vPortExitCritical>
    }
 8002a10:	bf00      	nop
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20012d90 	.word	0x20012d90
 8002a18:	20012d60 	.word	0x20012d60
 8002a1c:	20012d74 	.word	0x20012d74
 8002a20:	20012d88 	.word	0x20012d88
 8002a24:	20012d8c 	.word	0x20012d8c
 8002a28:	08004984 	.word	0x08004984

08002a2c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8002a32:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <_DoInit+0x8c>)
 8002a34:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2203      	movs	r2, #3
 8002a3a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2203      	movs	r2, #3
 8002a40:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a1d      	ldr	r2, [pc, #116]	; (8002abc <_DoInit+0x90>)
 8002a46:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a1d      	ldr	r2, [pc, #116]	; (8002ac0 <_DoInit+0x94>)
 8002a4c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a54:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a14      	ldr	r2, [pc, #80]	; (8002abc <_DoInit+0x90>)
 8002a6c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a14      	ldr	r2, [pc, #80]	; (8002ac4 <_DoInit+0x98>)
 8002a72:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2210      	movs	r2, #16
 8002a78:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3307      	adds	r3, #7
 8002a90:	4a0d      	ldr	r2, [pc, #52]	; (8002ac8 <_DoInit+0x9c>)
 8002a92:	6810      	ldr	r0, [r2, #0]
 8002a94:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a0c      	ldr	r2, [pc, #48]	; (8002acc <_DoInit+0xa0>)
 8002a9a:	6810      	ldr	r0, [r2, #0]
 8002a9c:	6018      	str	r0, [r3, #0]
 8002a9e:	8891      	ldrh	r1, [r2, #4]
 8002aa0:	7992      	ldrb	r2, [r2, #6]
 8002aa2:	8099      	strh	r1, [r3, #4]
 8002aa4:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	719a      	strb	r2, [r3, #6]
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	200153b4 	.word	0x200153b4
 8002abc:	0800498c 	.word	0x0800498c
 8002ac0:	20012d9c 	.word	0x20012d9c
 8002ac4:	2001319c 	.word	0x2001319c
 8002ac8:	08004998 	.word	0x08004998
 8002acc:	0800499c 	.word	0x0800499c

08002ad0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08a      	sub	sp, #40	; 0x28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8002adc:	4b3c      	ldr	r3, [pc, #240]	; (8002bd0 <SEGGER_RTT_ReadNoLock+0x100>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <SEGGER_RTT_ReadNoLock+0x18>
 8002ae4:	f7ff ffa2 	bl	8002a2c <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4613      	mov	r3, r2
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	4413      	add	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	3360      	adds	r3, #96	; 0x60
 8002af4:	4a36      	ldr	r2, [pc, #216]	; (8002bd0 <SEGGER_RTT_ReadNoLock+0x100>)
 8002af6:	4413      	add	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002b0e:	6a3a      	ldr	r2, [r7, #32]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d92a      	bls.n	8002b6c <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4293      	cmp	r3, r2
 8002b26:	bf28      	it	cs
 8002b28:	4613      	movcs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	4413      	add	r3, r2
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4619      	mov	r1, r3
 8002b38:	69f8      	ldr	r0, [r7, #28]
 8002b3a:	f001 fefc 	bl	8004936 <memcpy>
    NumBytesRead += NumBytesRem;
 8002b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4413      	add	r3, r2
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002b56:	6a3a      	ldr	r2, [r7, #32]
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d101      	bne.n	8002b6c <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	bf28      	it	cs
 8002b7c:	4613      	movcs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d018      	beq.n	8002bb8 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4619      	mov	r1, r3
 8002b92:	69f8      	ldr	r0, [r7, #28]
 8002b94:	f001 fecf 	bl	8004936 <memcpy>
    NumBytesRead += NumBytesRem;
 8002b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002bb0:	6a3a      	ldr	r2, [r7, #32]
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d002      	beq.n	8002bc4 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	6a3a      	ldr	r2, [r7, #32]
 8002bc2:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3728      	adds	r7, #40	; 0x28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	200153b4 	.word	0x200153b4

08002bd4 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	; 0x28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	4613      	mov	r3, r2
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4413      	add	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4a3f      	ldr	r2, [pc, #252]	; (8002cf0 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8002bf2:	4413      	add	r3, r2
 8002bf4:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8002c02:	69fa      	ldr	r2, [r7, #28]
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d854      	bhi.n	8002cb4 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	3b01      	subs	r3, #1
 8002c14:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d30f      	bcc.n	8002c3e <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	4413      	add	r3, r2
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f001 fe83 	bl	8004936 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	441a      	add	r2, r3
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e054      	b.n	8002ce8 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	4413      	add	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d34b      	bcc.n	8002ce6 <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d90e      	bls.n	8002c7e <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	4413      	add	r3, r2
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f001 fe62 	bl	8004936 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	441a      	add	r2, r3
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	60da      	str	r2, [r3, #12]
 8002c7c:	e018      	b.n	8002cb0 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	4413      	add	r3, r2
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f001 fe53 	bl	8004936 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	6858      	ldr	r0, [r3, #4]
 8002c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	18d1      	adds	r1, r2, r3
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	f001 fe48 	bl	8004936 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad2      	subs	r2, r2, r3
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e019      	b.n	8002ce8 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8002cb4:	69fa      	ldr	r2, [r7, #28]
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d30f      	bcc.n	8002ce6 <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	4413      	add	r3, r2
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f001 fe2f 	bl	8004936 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	441a      	add	r2, r3
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3728      	adds	r7, #40	; 0x28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	200153b4 	.word	0x200153b4

08002cf4 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8002d02:	4b30      	ldr	r3, [pc, #192]	; (8002dc4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8002d0a:	f7ff fe8f 	bl	8002a2c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8002d0e:	4b2d      	ldr	r3, [pc, #180]	; (8002dc4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	461a      	mov	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d94c      	bls.n	8002db4 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8002d1a:	f3ef 8311 	mrs	r3, BASEPRI
 8002d1e:	f04f 0120 	mov.w	r1, #32
 8002d22:	f381 8811 	msr	BASEPRI, r1
 8002d26:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d032      	beq.n	8002d94 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8002d2e:	4925      	ldr	r1, [pc, #148]	; (8002dc4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	1c5a      	adds	r2, r3, #1
 8002d34:	4613      	mov	r3, r2
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	4413      	add	r3, r2
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	440b      	add	r3, r1
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002d42:	4920      	ldr	r1, [pc, #128]	; (8002dc4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	4613      	mov	r3, r2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	4413      	add	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	440b      	add	r3, r1
 8002d52:	3304      	adds	r3, #4
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002d58:	491a      	ldr	r1, [pc, #104]	; (8002dc4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	4413      	add	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	440b      	add	r3, r1
 8002d66:	3320      	adds	r3, #32
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8002d6c:	4915      	ldr	r1, [pc, #84]	; (8002dc4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	4613      	mov	r3, r2
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	4413      	add	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	440b      	add	r3, r1
 8002d7a:	3328      	adds	r3, #40	; 0x28
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8002d80:	4910      	ldr	r1, [pc, #64]	; (8002dc4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4613      	mov	r3, r2
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	4413      	add	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	440b      	add	r3, r1
 8002d8e:	3324      	adds	r3, #36	; 0x24
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8002d94:	490b      	ldr	r1, [pc, #44]	; (8002dc4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	4413      	add	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	440b      	add	r3, r1
 8002da2:	332c      	adds	r3, #44	; 0x2c
 8002da4:	6a3a      	ldr	r2, [r7, #32]
 8002da6:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	e002      	b.n	8002dba <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8002db4:	f04f 33ff 	mov.w	r3, #4294967295
 8002db8:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002dba:	697b      	ldr	r3, [r7, #20]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	200153b4 	.word	0x200153b4

08002dc8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8002dd6:	4b30      	ldr	r3, [pc, #192]	; (8002e98 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8002dde:	f7ff fe25 	bl	8002a2c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8002de2:	4b2d      	ldr	r3, [pc, #180]	; (8002e98 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	461a      	mov	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d94b      	bls.n	8002e86 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8002dee:	f3ef 8311 	mrs	r3, BASEPRI
 8002df2:	f04f 0120 	mov.w	r1, #32
 8002df6:	f381 8811 	msr	BASEPRI, r1
 8002dfa:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d031      	beq.n	8002e66 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8002e02:	4925      	ldr	r1, [pc, #148]	; (8002e98 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4613      	mov	r3, r2
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	4413      	add	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	440b      	add	r3, r1
 8002e10:	3360      	adds	r3, #96	; 0x60
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8002e16:	4920      	ldr	r1, [pc, #128]	; (8002e98 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	4413      	add	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	440b      	add	r3, r1
 8002e24:	3364      	adds	r3, #100	; 0x64
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8002e2a:	491b      	ldr	r1, [pc, #108]	; (8002e98 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	440b      	add	r3, r1
 8002e38:	3368      	adds	r3, #104	; 0x68
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8002e3e:	4916      	ldr	r1, [pc, #88]	; (8002e98 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4613      	mov	r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	4413      	add	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3370      	adds	r3, #112	; 0x70
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8002e52:	4911      	ldr	r1, [pc, #68]	; (8002e98 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	4613      	mov	r3, r2
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4413      	add	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	440b      	add	r3, r1
 8002e60:	336c      	adds	r3, #108	; 0x6c
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8002e66:	490c      	ldr	r1, [pc, #48]	; (8002e98 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	4413      	add	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	440b      	add	r3, r1
 8002e74:	3374      	adds	r3, #116	; 0x74
 8002e76:	6a3a      	ldr	r2, [r7, #32]
 8002e78:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	e002      	b.n	8002e8c <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8002e86:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8a:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002e8c:	697b      	ldr	r3, [r7, #20]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	200153b4 	.word	0x200153b4

08002e9c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002e9c:	b480      	push	{r7}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002eac:	e002      	b.n	8002eb4 <_EncodeStr+0x18>
    Len++;
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4413      	add	r3, r2
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1f6      	bne.n	8002eae <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d901      	bls.n	8002ecc <_EncodeStr+0x30>
    Len = Limit;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	2bfe      	cmp	r3, #254	; 0xfe
 8002ed0:	d806      	bhi.n	8002ee0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	1c5a      	adds	r2, r3, #1
 8002ed6:	60fa      	str	r2, [r7, #12]
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	701a      	strb	r2, [r3, #0]
 8002ede:	e011      	b.n	8002f04 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	60fa      	str	r2, [r7, #12]
 8002ee6:	22ff      	movs	r2, #255	; 0xff
 8002ee8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	60fa      	str	r2, [r7, #12]
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	60fa      	str	r2, [r7, #12]
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	0a12      	lsrs	r2, r2, #8
 8002f00:	b2d2      	uxtb	r2, r2
 8002f02:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002f08:	e00a      	b.n	8002f20 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	1c5a      	adds	r2, r3, #1
 8002f0e:	60fa      	str	r2, [r7, #12]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	1c51      	adds	r1, r2, #1
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	7812      	ldrb	r2, [r2, #0]
 8002f18:	701a      	strb	r2, [r3, #0]
    n++;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d3f0      	bcc.n	8002f0a <_EncodeStr+0x6e>
  }
  return pPayload;
 8002f28:	68fb      	ldr	r3, [r7, #12]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	371c      	adds	r7, #28
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3304      	adds	r3, #4
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002f54:	1cfb      	adds	r3, r7, #3
 8002f56:	2201      	movs	r2, #1
 8002f58:	4619      	mov	r1, r3
 8002f5a:	2001      	movs	r0, #1
 8002f5c:	f7ff fdb8 	bl	8002ad0 <SEGGER_RTT_ReadNoLock>
 8002f60:	4603      	mov	r3, r0
 8002f62:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	dd47      	ble.n	8002ffa <_HandleIncomingPacket+0xac>
    switch (Cmd) {
 8002f6a:	78fb      	ldrb	r3, [r7, #3]
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d01a      	beq.n	8002fa6 <_HandleIncomingPacket+0x58>
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	dc06      	bgt.n	8002f82 <_HandleIncomingPacket+0x34>
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d010      	beq.n	8002f9a <_HandleIncomingPacket+0x4c>
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	dc11      	bgt.n	8002fa0 <_HandleIncomingPacket+0x52>
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d009      	beq.n	8002f94 <_HandleIncomingPacket+0x46>
 8002f80:	e02d      	b.n	8002fde <_HandleIncomingPacket+0x90>
 8002f82:	2b06      	cmp	r3, #6
 8002f84:	d015      	beq.n	8002fb2 <_HandleIncomingPacket+0x64>
 8002f86:	2b06      	cmp	r3, #6
 8002f88:	db10      	blt.n	8002fac <_HandleIncomingPacket+0x5e>
 8002f8a:	2b07      	cmp	r3, #7
 8002f8c:	d014      	beq.n	8002fb8 <_HandleIncomingPacket+0x6a>
 8002f8e:	2b80      	cmp	r3, #128	; 0x80
 8002f90:	d015      	beq.n	8002fbe <_HandleIncomingPacket+0x70>
 8002f92:	e024      	b.n	8002fde <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8002f94:	f000 fb82 	bl	800369c <SEGGER_SYSVIEW_Start>
      break;
 8002f98:	e02f      	b.n	8002ffa <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002f9a:	f000 fc3b 	bl	8003814 <SEGGER_SYSVIEW_Stop>
      break;
 8002f9e:	e02c      	b.n	8002ffa <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002fa0:	f000 fe16 	bl	8003bd0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8002fa4:	e029      	b.n	8002ffa <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002fa6:	f000 fddb 	bl	8003b60 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002faa:	e026      	b.n	8002ffa <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002fac:	f000 fc58 	bl	8003860 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002fb0:	e023      	b.n	8002ffa <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002fb2:	f001 f82f 	bl	8004014 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002fb6:	e020      	b.n	8002ffa <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002fb8:	f001 f80e 	bl	8003fd8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002fbc:	e01d      	b.n	8002ffa <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002fbe:	1cfb      	adds	r3, r7, #3
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	f7ff fd83 	bl	8002ad0 <SEGGER_RTT_ReadNoLock>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	dd0f      	ble.n	8002ff4 <_HandleIncomingPacket+0xa6>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 ff7e 	bl	8003ed8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002fdc:	e00a      	b.n	8002ff4 <_HandleIncomingPacket+0xa6>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002fde:	78fb      	ldrb	r3, [r7, #3]
 8002fe0:	b25b      	sxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	da08      	bge.n	8002ff8 <_HandleIncomingPacket+0xaa>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002fe6:	1cfb      	adds	r3, r7, #3
 8002fe8:	2201      	movs	r2, #1
 8002fea:	4619      	mov	r1, r3
 8002fec:	2001      	movs	r0, #1
 8002fee:	f7ff fd6f 	bl	8002ad0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002ff2:	e001      	b.n	8002ff8 <_HandleIncomingPacket+0xaa>
      break;
 8002ff4:	bf00      	nop
 8002ff6:	e000      	b.n	8002ffa <_HandleIncomingPacket+0xac>
      break;
 8002ff8:	bf00      	nop
    }
  }
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003004:	b580      	push	{r7, lr}
 8003006:	b08c      	sub	sp, #48	; 0x30
 8003008:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800300a:	2301      	movs	r3, #1
 800300c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800300e:	1d3b      	adds	r3, r7, #4
 8003010:	3301      	adds	r3, #1
 8003012:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003018:	4b30      	ldr	r3, [pc, #192]	; (80030dc <_TrySendOverflowPacket+0xd8>)
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	62bb      	str	r3, [r7, #40]	; 0x28
 800301e:	e00b      	b.n	8003038 <_TrySendOverflowPacket+0x34>
 8003020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	701a      	strb	r2, [r3, #0]
 8003032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003034:	09db      	lsrs	r3, r3, #7
 8003036:	62bb      	str	r3, [r7, #40]	; 0x28
 8003038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303a:	2b7f      	cmp	r3, #127	; 0x7f
 800303c:	d8f0      	bhi.n	8003020 <_TrySendOverflowPacket+0x1c>
 800303e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003044:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	701a      	strb	r2, [r3, #0]
 800304a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800304e:	4b24      	ldr	r3, [pc, #144]	; (80030e0 <_TrySendOverflowPacket+0xdc>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003054:	4b21      	ldr	r3, [pc, #132]	; (80030dc <_TrySendOverflowPacket+0xd8>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	623b      	str	r3, [r7, #32]
 8003066:	e00b      	b.n	8003080 <_TrySendOverflowPacket+0x7c>
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	627a      	str	r2, [r7, #36]	; 0x24
 800306e:	6a3a      	ldr	r2, [r7, #32]
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	701a      	strb	r2, [r3, #0]
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	09db      	lsrs	r3, r3, #7
 800307e:	623b      	str	r3, [r7, #32]
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	2b7f      	cmp	r3, #127	; 0x7f
 8003084:	d8f0      	bhi.n	8003068 <_TrySendOverflowPacket+0x64>
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	627a      	str	r2, [r7, #36]	; 0x24
 800308c:	6a3a      	ldr	r2, [r7, #32]
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003096:	69fa      	ldr	r2, [r7, #28]
 8003098:	1d3b      	adds	r3, r7, #4
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	461a      	mov	r2, r3
 800309e:	1d3b      	adds	r3, r7, #4
 80030a0:	4619      	mov	r1, r3
 80030a2:	2001      	movs	r0, #1
 80030a4:	f7ff fd96 	bl	8002bd4 <SEGGER_RTT_WriteSkipNoLock>
 80030a8:	4603      	mov	r3, r0
 80030aa:	613b      	str	r3, [r7, #16]
  if (Status) {
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d009      	beq.n	80030c6 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80030b2:	4a0a      	ldr	r2, [pc, #40]	; (80030dc <_TrySendOverflowPacket+0xd8>)
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80030b8:	4b08      	ldr	r3, [pc, #32]	; (80030dc <_TrySendOverflowPacket+0xd8>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	3b01      	subs	r3, #1
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	4b06      	ldr	r3, [pc, #24]	; (80030dc <_TrySendOverflowPacket+0xd8>)
 80030c2:	701a      	strb	r2, [r3, #0]
 80030c4:	e004      	b.n	80030d0 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80030c6:	4b05      	ldr	r3, [pc, #20]	; (80030dc <_TrySendOverflowPacket+0xd8>)
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	3301      	adds	r3, #1
 80030cc:	4a03      	ldr	r2, [pc, #12]	; (80030dc <_TrySendOverflowPacket+0xd8>)
 80030ce:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80030d0:	693b      	ldr	r3, [r7, #16]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3730      	adds	r7, #48	; 0x30
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	200151b4 	.word	0x200151b4
 80030e0:	e0001004 	.word	0xe0001004

080030e4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08a      	sub	sp, #40	; 0x28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80030f0:	4b62      	ldr	r3, [pc, #392]	; (800327c <_SendPacket+0x198>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d010      	beq.n	800311a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80030f8:	4b60      	ldr	r3, [pc, #384]	; (800327c <_SendPacket+0x198>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 809f 	beq.w	8003240 <_SendPacket+0x15c>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003102:	4b5e      	ldr	r3, [pc, #376]	; (800327c <_SendPacket+0x198>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d108      	bne.n	800311c <_SendPacket+0x38>
    _TrySendOverflowPacket();
 800310a:	f7ff ff7b 	bl	8003004 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800310e:	4b5b      	ldr	r3, [pc, #364]	; (800327c <_SendPacket+0x198>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b01      	cmp	r3, #1
 8003114:	f040 8096 	bne.w	8003244 <_SendPacket+0x160>
 8003118:	e000      	b.n	800311c <_SendPacket+0x38>
    goto Send;
 800311a:	bf00      	nop
Send:
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b1f      	cmp	r3, #31
 8003120:	d809      	bhi.n	8003136 <_SendPacket+0x52>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003122:	4b56      	ldr	r3, [pc, #344]	; (800327c <_SendPacket+0x198>)
 8003124:	69da      	ldr	r2, [r3, #28]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	f040 8089 	bne.w	8003248 <_SendPacket+0x164>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b17      	cmp	r3, #23
 800313a:	d807      	bhi.n	800314c <_SendPacket+0x68>
    *--pStartPacket = EventId;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	3b01      	subs	r3, #1
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	b2da      	uxtb	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	701a      	strb	r2, [r3, #0]
 800314a:	e03d      	b.n	80031c8 <_SendPacket+0xe4>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	2b7f      	cmp	r3, #127	; 0x7f
 8003158:	d912      	bls.n	8003180 <_SendPacket+0x9c>
      *--pStartPacket = (NumBytes >> 7);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3b01      	subs	r3, #1
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	09db      	lsrs	r3, r3, #7
 8003164:	b2da      	uxtb	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	3b01      	subs	r3, #1
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003178:	b2da      	uxtb	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	701a      	strb	r2, [r3, #0]
 800317e:	e006      	b.n	800318e <_SendPacket+0xaa>
    } else {
      *--pStartPacket = NumBytes;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	3b01      	subs	r3, #1
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	b2da      	uxtb	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b7f      	cmp	r3, #127	; 0x7f
 8003192:	d912      	bls.n	80031ba <_SendPacket+0xd6>
      *--pStartPacket = (EventId >> 7);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	3b01      	subs	r3, #1
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	09db      	lsrs	r3, r3, #7
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	701a      	strb	r2, [r3, #0]
 80031b8:	e006      	b.n	80031c8 <_SendPacket+0xe4>
    } else {
      *--pStartPacket = EventId;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	3b01      	subs	r3, #1
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80031c8:	4b2d      	ldr	r3, [pc, #180]	; (8003280 <_SendPacket+0x19c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80031ce:	4b2b      	ldr	r3, [pc, #172]	; (800327c <_SendPacket+0x198>)
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	627b      	str	r3, [r7, #36]	; 0x24
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	623b      	str	r3, [r7, #32]
 80031e0:	e00b      	b.n	80031fa <_SendPacket+0x116>
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	627a      	str	r2, [r7, #36]	; 0x24
 80031e8:	6a3a      	ldr	r2, [r7, #32]
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	701a      	strb	r2, [r3, #0]
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	09db      	lsrs	r3, r3, #7
 80031f8:	623b      	str	r3, [r7, #32]
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	2b7f      	cmp	r3, #127	; 0x7f
 80031fe:	d8f0      	bhi.n	80031e2 <_SendPacket+0xfe>
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	627a      	str	r2, [r7, #36]	; 0x24
 8003206:	6a3a      	ldr	r2, [r7, #32]
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	701a      	strb	r2, [r3, #0]
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	461a      	mov	r2, r3
 8003218:	68f9      	ldr	r1, [r7, #12]
 800321a:	2001      	movs	r0, #1
 800321c:	f7ff fcda 	bl	8002bd4 <SEGGER_RTT_WriteSkipNoLock>
 8003220:	4603      	mov	r3, r0
 8003222:	613b      	str	r3, [r7, #16]
  if (Status) {
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <_SendPacket+0x14e>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800322a:	4a14      	ldr	r2, [pc, #80]	; (800327c <_SendPacket+0x198>)
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	60d3      	str	r3, [r2, #12]
 8003230:	e00b      	b.n	800324a <_SendPacket+0x166>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003232:	4b12      	ldr	r3, [pc, #72]	; (800327c <_SendPacket+0x198>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	3301      	adds	r3, #1
 8003238:	b2da      	uxtb	r2, r3
 800323a:	4b10      	ldr	r3, [pc, #64]	; (800327c <_SendPacket+0x198>)
 800323c:	701a      	strb	r2, [r3, #0]
 800323e:	e004      	b.n	800324a <_SendPacket+0x166>
    goto SendDone;
 8003240:	bf00      	nop
 8003242:	e002      	b.n	800324a <_SendPacket+0x166>
      goto SendDone;
 8003244:	bf00      	nop
 8003246:	e000      	b.n	800324a <_SendPacket+0x166>
      goto SendDone;
 8003248:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800324a:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <_SendPacket+0x1a0>)
 800324c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003250:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <_SendPacket+0x1a0>)
 8003252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003256:	429a      	cmp	r2, r3
 8003258:	d00b      	beq.n	8003272 <_SendPacket+0x18e>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800325a:	4b08      	ldr	r3, [pc, #32]	; (800327c <_SendPacket+0x198>)
 800325c:	789b      	ldrb	r3, [r3, #2]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d107      	bne.n	8003272 <_SendPacket+0x18e>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003262:	4b06      	ldr	r3, [pc, #24]	; (800327c <_SendPacket+0x198>)
 8003264:	2201      	movs	r2, #1
 8003266:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003268:	f7ff fe71 	bl	8002f4e <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800326c:	4b03      	ldr	r3, [pc, #12]	; (800327c <_SendPacket+0x198>)
 800326e:	2200      	movs	r2, #0
 8003270:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003272:	bf00      	nop
 8003274:	3728      	adds	r7, #40	; 0x28
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	200151b4 	.word	0x200151b4
 8003280:	e0001004 	.word	0xe0001004
 8003284:	200153b4 	.word	0x200153b4

08003288 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af02      	add	r7, sp, #8
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003296:	2300      	movs	r3, #0
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800329e:	4a14      	ldr	r2, [pc, #80]	; (80032f0 <SEGGER_SYSVIEW_Init+0x68>)
 80032a0:	4914      	ldr	r1, [pc, #80]	; (80032f4 <SEGGER_SYSVIEW_Init+0x6c>)
 80032a2:	2001      	movs	r0, #1
 80032a4:	f7ff fd26 	bl	8002cf4 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80032a8:	2300      	movs	r3, #0
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	2308      	movs	r3, #8
 80032ae:	4a12      	ldr	r2, [pc, #72]	; (80032f8 <SEGGER_SYSVIEW_Init+0x70>)
 80032b0:	4910      	ldr	r1, [pc, #64]	; (80032f4 <SEGGER_SYSVIEW_Init+0x6c>)
 80032b2:	2001      	movs	r0, #1
 80032b4:	f7ff fd88 	bl	8002dc8 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80032b8:	4b10      	ldr	r3, [pc, #64]	; (80032fc <SEGGER_SYSVIEW_Init+0x74>)
 80032ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032be:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80032c0:	4b0f      	ldr	r3, [pc, #60]	; (8003300 <SEGGER_SYSVIEW_Init+0x78>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a0d      	ldr	r2, [pc, #52]	; (80032fc <SEGGER_SYSVIEW_Init+0x74>)
 80032c6:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80032c8:	4a0c      	ldr	r2, [pc, #48]	; (80032fc <SEGGER_SYSVIEW_Init+0x74>)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80032ce:	4a0b      	ldr	r2, [pc, #44]	; (80032fc <SEGGER_SYSVIEW_Init+0x74>)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80032d4:	4a09      	ldr	r2, [pc, #36]	; (80032fc <SEGGER_SYSVIEW_Init+0x74>)
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80032da:	4a08      	ldr	r2, [pc, #32]	; (80032fc <SEGGER_SYSVIEW_Init+0x74>)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80032e0:	4b06      	ldr	r3, [pc, #24]	; (80032fc <SEGGER_SYSVIEW_Init+0x74>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80032e6:	bf00      	nop
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	200131ac 	.word	0x200131ac
 80032f4:	080049a4 	.word	0x080049a4
 80032f8:	200151ac 	.word	0x200151ac
 80032fc:	200151b4 	.word	0x200151b4
 8003300:	e0001004 	.word	0xe0001004

08003304 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800330c:	4a04      	ldr	r2, [pc, #16]	; (8003320 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6113      	str	r3, [r2, #16]
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	200151b4 	.word	0x200151b4

08003324 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800332c:	f3ef 8311 	mrs	r3, BASEPRI
 8003330:	f04f 0120 	mov.w	r1, #32
 8003334:	f381 8811 	msr	BASEPRI, r1
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	4808      	ldr	r0, [pc, #32]	; (800335c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800333c:	f7ff fdfb 	bl	8002f36 <_PreparePacket>
 8003340:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	68b9      	ldr	r1, [r7, #8]
 8003346:	68b8      	ldr	r0, [r7, #8]
 8003348:	f7ff fecc 	bl	80030e4 <_SendPacket>
  RECORD_END();
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f383 8811 	msr	BASEPRI, r3
}
 8003352:	bf00      	nop
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	200151e4 	.word	0x200151e4

08003360 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800336a:	f3ef 8311 	mrs	r3, BASEPRI
 800336e:	f04f 0120 	mov.w	r1, #32
 8003372:	f381 8811 	msr	BASEPRI, r1
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	4816      	ldr	r0, [pc, #88]	; (80033d4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800337a:	f7ff fddc 	bl	8002f36 <_PreparePacket>
 800337e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	61fb      	str	r3, [r7, #28]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	61bb      	str	r3, [r7, #24]
 800338c:	e00b      	b.n	80033a6 <SEGGER_SYSVIEW_RecordU32+0x46>
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	61fa      	str	r2, [r7, #28]
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	701a      	strb	r2, [r3, #0]
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	09db      	lsrs	r3, r3, #7
 80033a4:	61bb      	str	r3, [r7, #24]
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	2b7f      	cmp	r3, #127	; 0x7f
 80033aa:	d8f0      	bhi.n	800338e <SEGGER_SYSVIEW_RecordU32+0x2e>
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	61fa      	str	r2, [r7, #28]
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	701a      	strb	r2, [r3, #0]
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	68f9      	ldr	r1, [r7, #12]
 80033c0:	6938      	ldr	r0, [r7, #16]
 80033c2:	f7ff fe8f 	bl	80030e4 <_SendPacket>
  RECORD_END();
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f383 8811 	msr	BASEPRI, r3
}
 80033cc:	bf00      	nop
 80033ce:	3720      	adds	r7, #32
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	200151e4 	.word	0x200151e4

080033d8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08c      	sub	sp, #48	; 0x30
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80033e4:	f3ef 8311 	mrs	r3, BASEPRI
 80033e8:	f04f 0120 	mov.w	r1, #32
 80033ec:	f381 8811 	msr	BASEPRI, r1
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	4825      	ldr	r0, [pc, #148]	; (8003488 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80033f4:	f7ff fd9f 	bl	8002f36 <_PreparePacket>
 80033f8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	62bb      	str	r3, [r7, #40]	; 0x28
 8003406:	e00b      	b.n	8003420 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800340e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	701a      	strb	r2, [r3, #0]
 800341a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341c:	09db      	lsrs	r3, r3, #7
 800341e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003422:	2b7f      	cmp	r3, #127	; 0x7f
 8003424:	d8f0      	bhi.n	8003408 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800342c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]
 8003432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003434:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	623b      	str	r3, [r7, #32]
 800343e:	e00b      	b.n	8003458 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	627a      	str	r2, [r7, #36]	; 0x24
 8003446:	6a3a      	ldr	r2, [r7, #32]
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	701a      	strb	r2, [r3, #0]
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	09db      	lsrs	r3, r3, #7
 8003456:	623b      	str	r3, [r7, #32]
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	2b7f      	cmp	r3, #127	; 0x7f
 800345c:	d8f0      	bhi.n	8003440 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	1c5a      	adds	r2, r3, #1
 8003462:	627a      	str	r2, [r7, #36]	; 0x24
 8003464:	6a3a      	ldr	r2, [r7, #32]
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	701a      	strb	r2, [r3, #0]
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	6979      	ldr	r1, [r7, #20]
 8003472:	69b8      	ldr	r0, [r7, #24]
 8003474:	f7ff fe36 	bl	80030e4 <_SendPacket>
  RECORD_END();
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f383 8811 	msr	BASEPRI, r3
}
 800347e:	bf00      	nop
 8003480:	3730      	adds	r7, #48	; 0x30
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	200151e4 	.word	0x200151e4

0800348c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800348c:	b580      	push	{r7, lr}
 800348e:	b08e      	sub	sp, #56	; 0x38
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800349a:	f3ef 8311 	mrs	r3, BASEPRI
 800349e:	f04f 0120 	mov.w	r1, #32
 80034a2:	f381 8811 	msr	BASEPRI, r1
 80034a6:	61fb      	str	r3, [r7, #28]
 80034a8:	4832      	ldr	r0, [pc, #200]	; (8003574 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80034aa:	f7ff fd44 	bl	8002f36 <_PreparePacket>
 80034ae:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	637b      	str	r3, [r7, #52]	; 0x34
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	633b      	str	r3, [r7, #48]	; 0x30
 80034bc:	e00b      	b.n	80034d6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80034be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	637a      	str	r2, [r7, #52]	; 0x34
 80034c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	701a      	strb	r2, [r3, #0]
 80034d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d2:	09db      	lsrs	r3, r3, #7
 80034d4:	633b      	str	r3, [r7, #48]	; 0x30
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	2b7f      	cmp	r3, #127	; 0x7f
 80034da:	d8f0      	bhi.n	80034be <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80034dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	637a      	str	r2, [r7, #52]	; 0x34
 80034e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	701a      	strb	r2, [r3, #0]
 80034e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80034f4:	e00b      	b.n	800350e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80034f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	701a      	strb	r2, [r3, #0]
 8003508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350a:	09db      	lsrs	r3, r3, #7
 800350c:	62bb      	str	r3, [r7, #40]	; 0x28
 800350e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003510:	2b7f      	cmp	r3, #127	; 0x7f
 8003512:	d8f0      	bhi.n	80034f6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8003514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	62fa      	str	r2, [r7, #44]	; 0x2c
 800351a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	701a      	strb	r2, [r3, #0]
 8003520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003522:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	623b      	str	r3, [r7, #32]
 800352c:	e00b      	b.n	8003546 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	627a      	str	r2, [r7, #36]	; 0x24
 8003534:	6a3a      	ldr	r2, [r7, #32]
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	701a      	strb	r2, [r3, #0]
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	09db      	lsrs	r3, r3, #7
 8003544:	623b      	str	r3, [r7, #32]
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	2b7f      	cmp	r3, #127	; 0x7f
 800354a:	d8f0      	bhi.n	800352e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	627a      	str	r2, [r7, #36]	; 0x24
 8003552:	6a3a      	ldr	r2, [r7, #32]
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	701a      	strb	r2, [r3, #0]
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	6979      	ldr	r1, [r7, #20]
 8003560:	69b8      	ldr	r0, [r7, #24]
 8003562:	f7ff fdbf 	bl	80030e4 <_SendPacket>
  RECORD_END();
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	f383 8811 	msr	BASEPRI, r3
}
 800356c:	bf00      	nop
 800356e:	3738      	adds	r7, #56	; 0x38
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	200151e4 	.word	0x200151e4

08003578 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003578:	b580      	push	{r7, lr}
 800357a:	b090      	sub	sp, #64	; 0x40
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003586:	f3ef 8311 	mrs	r3, BASEPRI
 800358a:	f04f 0120 	mov.w	r1, #32
 800358e:	f381 8811 	msr	BASEPRI, r1
 8003592:	61fb      	str	r3, [r7, #28]
 8003594:	4840      	ldr	r0, [pc, #256]	; (8003698 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8003596:	f7ff fcce 	bl	8002f36 <_PreparePacket>
 800359a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80035a8:	e00b      	b.n	80035c2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80035aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	701a      	strb	r2, [r3, #0]
 80035bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035be:	09db      	lsrs	r3, r3, #7
 80035c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80035c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c4:	2b7f      	cmp	r3, #127	; 0x7f
 80035c6:	d8f0      	bhi.n	80035aa <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80035c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	701a      	strb	r2, [r3, #0]
 80035d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	637b      	str	r3, [r7, #52]	; 0x34
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	633b      	str	r3, [r7, #48]	; 0x30
 80035e0:	e00b      	b.n	80035fa <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80035e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	637a      	str	r2, [r7, #52]	; 0x34
 80035e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	701a      	strb	r2, [r3, #0]
 80035f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f6:	09db      	lsrs	r3, r3, #7
 80035f8:	633b      	str	r3, [r7, #48]	; 0x30
 80035fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fc:	2b7f      	cmp	r3, #127	; 0x7f
 80035fe:	d8f0      	bhi.n	80035e2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8003600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	637a      	str	r2, [r7, #52]	; 0x34
 8003606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	701a      	strb	r2, [r3, #0]
 800360c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800360e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	62bb      	str	r3, [r7, #40]	; 0x28
 8003618:	e00b      	b.n	8003632 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800361a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	701a      	strb	r2, [r3, #0]
 800362c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362e:	09db      	lsrs	r3, r3, #7
 8003630:	62bb      	str	r3, [r7, #40]	; 0x28
 8003632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003634:	2b7f      	cmp	r3, #127	; 0x7f
 8003636:	d8f0      	bhi.n	800361a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800363e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	701a      	strb	r2, [r3, #0]
 8003644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003646:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
 800364c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800364e:	623b      	str	r3, [r7, #32]
 8003650:	e00b      	b.n	800366a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	627a      	str	r2, [r7, #36]	; 0x24
 8003658:	6a3a      	ldr	r2, [r7, #32]
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	701a      	strb	r2, [r3, #0]
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	09db      	lsrs	r3, r3, #7
 8003668:	623b      	str	r3, [r7, #32]
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	2b7f      	cmp	r3, #127	; 0x7f
 800366e:	d8f0      	bhi.n	8003652 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	627a      	str	r2, [r7, #36]	; 0x24
 8003676:	6a3a      	ldr	r2, [r7, #32]
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	701a      	strb	r2, [r3, #0]
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	6979      	ldr	r1, [r7, #20]
 8003684:	69b8      	ldr	r0, [r7, #24]
 8003686:	f7ff fd2d 	bl	80030e4 <_SendPacket>
  RECORD_END();
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f383 8811 	msr	BASEPRI, r3
}
 8003690:	bf00      	nop
 8003692:	3740      	adds	r7, #64	; 0x40
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	200151e4 	.word	0x200151e4

0800369c <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 800369c:	b580      	push	{r7, lr}
 800369e:	b08c      	sub	sp, #48	; 0x30
 80036a0:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 80036a2:	4b59      	ldr	r3, [pc, #356]	; (8003808 <SEGGER_SYSVIEW_Start+0x16c>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f040 80aa 	bne.w	8003800 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 80036ac:	4b56      	ldr	r3, [pc, #344]	; (8003808 <SEGGER_SYSVIEW_Start+0x16c>)
 80036ae:	2201      	movs	r2, #1
 80036b0:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80036b2:	f3ef 8311 	mrs	r3, BASEPRI
 80036b6:	f04f 0120 	mov.w	r1, #32
 80036ba:	f381 8811 	msr	BASEPRI, r1
 80036be:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80036c0:	220a      	movs	r2, #10
 80036c2:	4952      	ldr	r1, [pc, #328]	; (800380c <SEGGER_SYSVIEW_Start+0x170>)
 80036c4:	2001      	movs	r0, #1
 80036c6:	f7ff fa85 	bl	8002bd4 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80036d0:	200a      	movs	r0, #10
 80036d2:	f7ff fe27 	bl	8003324 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80036d6:	f3ef 8311 	mrs	r3, BASEPRI
 80036da:	f04f 0120 	mov.w	r1, #32
 80036de:	f381 8811 	msr	BASEPRI, r1
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	484a      	ldr	r0, [pc, #296]	; (8003810 <SEGGER_SYSVIEW_Start+0x174>)
 80036e6:	f7ff fc26 	bl	8002f36 <_PreparePacket>
 80036ea:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036f4:	4b44      	ldr	r3, [pc, #272]	; (8003808 <SEGGER_SYSVIEW_Start+0x16c>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036fa:	e00b      	b.n	8003714 <SEGGER_SYSVIEW_Start+0x78>
 80036fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	701a      	strb	r2, [r3, #0]
 800370e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003710:	09db      	lsrs	r3, r3, #7
 8003712:	62bb      	str	r3, [r7, #40]	; 0x28
 8003714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003716:	2b7f      	cmp	r3, #127	; 0x7f
 8003718:	d8f0      	bhi.n	80036fc <SEGGER_SYSVIEW_Start+0x60>
 800371a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	701a      	strb	r2, [r3, #0]
 8003726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003728:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
 800372e:	4b36      	ldr	r3, [pc, #216]	; (8003808 <SEGGER_SYSVIEW_Start+0x16c>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	623b      	str	r3, [r7, #32]
 8003734:	e00b      	b.n	800374e <SEGGER_SYSVIEW_Start+0xb2>
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	627a      	str	r2, [r7, #36]	; 0x24
 800373c:	6a3a      	ldr	r2, [r7, #32]
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	701a      	strb	r2, [r3, #0]
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	09db      	lsrs	r3, r3, #7
 800374c:	623b      	str	r3, [r7, #32]
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	2b7f      	cmp	r3, #127	; 0x7f
 8003752:	d8f0      	bhi.n	8003736 <SEGGER_SYSVIEW_Start+0x9a>
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	627a      	str	r2, [r7, #36]	; 0x24
 800375a:	6a3a      	ldr	r2, [r7, #32]
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	701a      	strb	r2, [r3, #0]
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	61fb      	str	r3, [r7, #28]
 8003768:	4b27      	ldr	r3, [pc, #156]	; (8003808 <SEGGER_SYSVIEW_Start+0x16c>)
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	61bb      	str	r3, [r7, #24]
 800376e:	e00b      	b.n	8003788 <SEGGER_SYSVIEW_Start+0xec>
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	61fa      	str	r2, [r7, #28]
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	701a      	strb	r2, [r3, #0]
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	09db      	lsrs	r3, r3, #7
 8003786:	61bb      	str	r3, [r7, #24]
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	2b7f      	cmp	r3, #127	; 0x7f
 800378c:	d8f0      	bhi.n	8003770 <SEGGER_SYSVIEW_Start+0xd4>
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	61fa      	str	r2, [r7, #28]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	701a      	strb	r2, [r3, #0]
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	617b      	str	r3, [r7, #20]
 80037a2:	2302      	movs	r3, #2
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	e00b      	b.n	80037c0 <SEGGER_SYSVIEW_Start+0x124>
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	617a      	str	r2, [r7, #20]
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	701a      	strb	r2, [r3, #0]
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	09db      	lsrs	r3, r3, #7
 80037be:	613b      	str	r3, [r7, #16]
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	2b7f      	cmp	r3, #127	; 0x7f
 80037c4:	d8f0      	bhi.n	80037a8 <SEGGER_SYSVIEW_Start+0x10c>
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	617a      	str	r2, [r7, #20]
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	701a      	strb	r2, [r3, #0]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80037d6:	2218      	movs	r2, #24
 80037d8:	6839      	ldr	r1, [r7, #0]
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff fc82 	bl	80030e4 <_SendPacket>
      RECORD_END();
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80037e6:	4b08      	ldr	r3, [pc, #32]	; (8003808 <SEGGER_SYSVIEW_Start+0x16c>)
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <SEGGER_SYSVIEW_Start+0x16c>)
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80037f4:	f000 f9ec 	bl	8003bd0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80037f8:	f000 f9b2 	bl	8003b60 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80037fc:	f000 fc0a 	bl	8004014 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8003800:	bf00      	nop
 8003802:	3730      	adds	r7, #48	; 0x30
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	200151b4 	.word	0x200151b4
 800380c:	08004a60 	.word	0x08004a60
 8003810:	200151e4 	.word	0x200151e4

08003814 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800381a:	f3ef 8311 	mrs	r3, BASEPRI
 800381e:	f04f 0120 	mov.w	r1, #32
 8003822:	f381 8811 	msr	BASEPRI, r1
 8003826:	607b      	str	r3, [r7, #4]
 8003828:	480b      	ldr	r0, [pc, #44]	; (8003858 <SEGGER_SYSVIEW_Stop+0x44>)
 800382a:	f7ff fb84 	bl	8002f36 <_PreparePacket>
 800382e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003830:	4b0a      	ldr	r3, [pc, #40]	; (800385c <SEGGER_SYSVIEW_Stop+0x48>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d007      	beq.n	8003848 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003838:	220b      	movs	r2, #11
 800383a:	6839      	ldr	r1, [r7, #0]
 800383c:	6838      	ldr	r0, [r7, #0]
 800383e:	f7ff fc51 	bl	80030e4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <SEGGER_SYSVIEW_Stop+0x48>)
 8003844:	2200      	movs	r2, #0
 8003846:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f383 8811 	msr	BASEPRI, r3
}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	200151e4 	.word	0x200151e4
 800385c:	200151b4 	.word	0x200151b4

08003860 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003860:	b580      	push	{r7, lr}
 8003862:	b08c      	sub	sp, #48	; 0x30
 8003864:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003866:	f3ef 8311 	mrs	r3, BASEPRI
 800386a:	f04f 0120 	mov.w	r1, #32
 800386e:	f381 8811 	msr	BASEPRI, r1
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	4845      	ldr	r0, [pc, #276]	; (800398c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003876:	f7ff fb5e 	bl	8002f36 <_PreparePacket>
 800387a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003884:	4b42      	ldr	r3, [pc, #264]	; (8003990 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
 800388a:	e00b      	b.n	80038a4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800388c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	701a      	strb	r2, [r3, #0]
 800389e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a0:	09db      	lsrs	r3, r3, #7
 80038a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80038a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a6:	2b7f      	cmp	r3, #127	; 0x7f
 80038a8:	d8f0      	bhi.n	800388c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80038aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	701a      	strb	r2, [r3, #0]
 80038b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
 80038be:	4b34      	ldr	r3, [pc, #208]	; (8003990 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	623b      	str	r3, [r7, #32]
 80038c4:	e00b      	b.n	80038de <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	627a      	str	r2, [r7, #36]	; 0x24
 80038cc:	6a3a      	ldr	r2, [r7, #32]
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	701a      	strb	r2, [r3, #0]
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	09db      	lsrs	r3, r3, #7
 80038dc:	623b      	str	r3, [r7, #32]
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	2b7f      	cmp	r3, #127	; 0x7f
 80038e2:	d8f0      	bhi.n	80038c6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	627a      	str	r2, [r7, #36]	; 0x24
 80038ea:	6a3a      	ldr	r2, [r7, #32]
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	701a      	strb	r2, [r3, #0]
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	61fb      	str	r3, [r7, #28]
 80038f8:	4b25      	ldr	r3, [pc, #148]	; (8003990 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	61bb      	str	r3, [r7, #24]
 80038fe:	e00b      	b.n	8003918 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	61fa      	str	r2, [r7, #28]
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	09db      	lsrs	r3, r3, #7
 8003916:	61bb      	str	r3, [r7, #24]
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	2b7f      	cmp	r3, #127	; 0x7f
 800391c:	d8f0      	bhi.n	8003900 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	61fa      	str	r2, [r7, #28]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	2302      	movs	r3, #2
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	e00b      	b.n	8003950 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	617a      	str	r2, [r7, #20]
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	701a      	strb	r2, [r3, #0]
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	09db      	lsrs	r3, r3, #7
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	2b7f      	cmp	r3, #127	; 0x7f
 8003954:	d8f0      	bhi.n	8003938 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	1c5a      	adds	r2, r3, #1
 800395a:	617a      	str	r2, [r7, #20]
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003966:	2218      	movs	r2, #24
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	68b8      	ldr	r0, [r7, #8]
 800396c:	f7ff fbba 	bl	80030e4 <_SendPacket>
  RECORD_END();
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003976:	4b06      	ldr	r3, [pc, #24]	; (8003990 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800397e:	4b04      	ldr	r3, [pc, #16]	; (8003990 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	4798      	blx	r3
  }
}
 8003984:	bf00      	nop
 8003986:	3730      	adds	r7, #48	; 0x30
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	200151e4 	.word	0x200151e4
 8003990:	200151b4 	.word	0x200151b4

08003994 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003994:	b580      	push	{r7, lr}
 8003996:	b092      	sub	sp, #72	; 0x48
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800399c:	f3ef 8311 	mrs	r3, BASEPRI
 80039a0:	f04f 0120 	mov.w	r1, #32
 80039a4:	f381 8811 	msr	BASEPRI, r1
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	486b      	ldr	r0, [pc, #428]	; (8003b58 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80039ac:	f7ff fac3 	bl	8002f36 <_PreparePacket>
 80039b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	647b      	str	r3, [r7, #68]	; 0x44
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	4b67      	ldr	r3, [pc, #412]	; (8003b5c <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	089b      	lsrs	r3, r3, #2
 80039c6:	643b      	str	r3, [r7, #64]	; 0x40
 80039c8:	e00b      	b.n	80039e2 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 80039ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	647a      	str	r2, [r7, #68]	; 0x44
 80039d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	701a      	strb	r2, [r3, #0]
 80039dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039de:	09db      	lsrs	r3, r3, #7
 80039e0:	643b      	str	r3, [r7, #64]	; 0x40
 80039e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039e4:	2b7f      	cmp	r3, #127	; 0x7f
 80039e6:	d8f0      	bhi.n	80039ca <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 80039e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	647a      	str	r2, [r7, #68]	; 0x44
 80039ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	701a      	strb	r2, [r3, #0]
 80039f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039f6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a02:	e00b      	b.n	8003a1c <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8003a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	701a      	strb	r2, [r3, #0]
 8003a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a18:	09db      	lsrs	r3, r3, #7
 8003a1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1e:	2b7f      	cmp	r3, #127	; 0x7f
 8003a20:	d8f0      	bhi.n	8003a04 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8003a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	701a      	strb	r2, [r3, #0]
 8003a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a30:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2220      	movs	r2, #32
 8003a38:	4619      	mov	r1, r3
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f7ff fa2e 	bl	8002e9c <_EncodeStr>
 8003a40:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003a42:	2209      	movs	r2, #9
 8003a44:	68f9      	ldr	r1, [r7, #12]
 8003a46:	6938      	ldr	r0, [r7, #16]
 8003a48:	f7ff fb4c 	bl	80030e4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	637b      	str	r3, [r7, #52]	; 0x34
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	4b40      	ldr	r3, [pc, #256]	; (8003b5c <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	089b      	lsrs	r3, r3, #2
 8003a60:	633b      	str	r3, [r7, #48]	; 0x30
 8003a62:	e00b      	b.n	8003a7c <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8003a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	637a      	str	r2, [r7, #52]	; 0x34
 8003a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	701a      	strb	r2, [r3, #0]
 8003a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a78:	09db      	lsrs	r3, r3, #7
 8003a7a:	633b      	str	r3, [r7, #48]	; 0x30
 8003a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8003a80:	d8f0      	bhi.n	8003a64 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8003a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	637a      	str	r2, [r7, #52]	; 0x34
 8003a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	701a      	strb	r2, [r3, #0]
 8003a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a90:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a9c:	e00b      	b.n	8003ab6 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8003a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003aa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	701a      	strb	r2, [r3, #0]
 8003ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab2:	09db      	lsrs	r3, r3, #7
 8003ab4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab8:	2b7f      	cmp	r3, #127	; 0x7f
 8003aba:	d8f0      	bhi.n	8003a9e <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8003abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	701a      	strb	r2, [r3, #0]
 8003ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aca:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	623b      	str	r3, [r7, #32]
 8003ad6:	e00b      	b.n	8003af0 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	1c5a      	adds	r2, r3, #1
 8003adc:	627a      	str	r2, [r7, #36]	; 0x24
 8003ade:	6a3a      	ldr	r2, [r7, #32]
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	701a      	strb	r2, [r3, #0]
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	09db      	lsrs	r3, r3, #7
 8003aee:	623b      	str	r3, [r7, #32]
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	2b7f      	cmp	r3, #127	; 0x7f
 8003af4:	d8f0      	bhi.n	8003ad8 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	627a      	str	r2, [r7, #36]	; 0x24
 8003afc:	6a3a      	ldr	r2, [r7, #32]
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	701a      	strb	r2, [r3, #0]
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	e00b      	b.n	8003b28 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	61fa      	str	r2, [r7, #28]
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	701a      	strb	r2, [r3, #0]
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	09db      	lsrs	r3, r3, #7
 8003b26:	61bb      	str	r3, [r7, #24]
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	2b7f      	cmp	r3, #127	; 0x7f
 8003b2c:	d8f0      	bhi.n	8003b10 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	61fa      	str	r2, [r7, #28]
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	701a      	strb	r2, [r3, #0]
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003b3e:	2215      	movs	r2, #21
 8003b40:	68f9      	ldr	r1, [r7, #12]
 8003b42:	6938      	ldr	r0, [r7, #16]
 8003b44:	f7ff face 	bl	80030e4 <_SendPacket>
  RECORD_END();
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f383 8811 	msr	BASEPRI, r3
}
 8003b4e:	bf00      	nop
 8003b50:	3748      	adds	r7, #72	; 0x48
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	200151e4 	.word	0x200151e4
 8003b5c:	200151b4 	.word	0x200151b4

08003b60 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003b64:	4b07      	ldr	r3, [pc, #28]	; (8003b84 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d008      	beq.n	8003b7e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003b6c:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003b76:	4b03      	ldr	r3, [pc, #12]	; (8003b84 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	4798      	blx	r3
  }
}
 8003b7e:	bf00      	nop
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	200151b4 	.word	0x200151b4

08003b88 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003b90:	f3ef 8311 	mrs	r3, BASEPRI
 8003b94:	f04f 0120 	mov.w	r1, #32
 8003b98:	f381 8811 	msr	BASEPRI, r1
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	480b      	ldr	r0, [pc, #44]	; (8003bcc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8003ba0:	f7ff f9c9 	bl	8002f36 <_PreparePacket>
 8003ba4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003ba6:	2280      	movs	r2, #128	; 0x80
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	6938      	ldr	r0, [r7, #16]
 8003bac:	f7ff f976 	bl	8002e9c <_EncodeStr>
 8003bb0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8003bb2:	220e      	movs	r2, #14
 8003bb4:	68f9      	ldr	r1, [r7, #12]
 8003bb6:	6938      	ldr	r0, [r7, #16]
 8003bb8:	f7ff fa94 	bl	80030e4 <_SendPacket>
  RECORD_END();
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f383 8811 	msr	BASEPRI, r3
}
 8003bc2:	bf00      	nop
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	200151e4 	.word	0x200151e4

08003bd0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003bd6:	4b12      	ldr	r3, [pc, #72]	; (8003c20 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d015      	beq.n	8003c0a <SEGGER_SYSVIEW_RecordSystime+0x3a>
 8003bde:	4b10      	ldr	r3, [pc, #64]	; (8003c20 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d010      	beq.n	8003c0a <SEGGER_SYSVIEW_RecordSystime+0x3a>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003be8:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4798      	blx	r3
 8003bf0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003bf4:	6839      	ldr	r1, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003bf6:	e897 0018 	ldmia.w	r7, {r3, r4}
 8003bfa:	0025      	movs	r5, r4
 8003bfc:	2600      	movs	r6, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003bfe:	462b      	mov	r3, r5
 8003c00:	461a      	mov	r2, r3
 8003c02:	200d      	movs	r0, #13
 8003c04:	f7ff fbe8 	bl	80033d8 <SEGGER_SYSVIEW_RecordU32x2>
 8003c08:	e005      	b.n	8003c16 <SEGGER_SYSVIEW_RecordSystime+0x46>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003c0a:	4b06      	ldr	r3, [pc, #24]	; (8003c24 <SEGGER_SYSVIEW_RecordSystime+0x54>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4619      	mov	r1, r3
 8003c10:	200c      	movs	r0, #12
 8003c12:	f7ff fba5 	bl	8003360 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	200151b4 	.word	0x200151b4
 8003c24:	e0001004 	.word	0xe0001004

08003c28 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003c2e:	f3ef 8311 	mrs	r3, BASEPRI
 8003c32:	f04f 0120 	mov.w	r1, #32
 8003c36:	f381 8811 	msr	BASEPRI, r1
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	4819      	ldr	r0, [pc, #100]	; (8003ca4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8003c3e:	f7ff f97a 	bl	8002f36 <_PreparePacket>
 8003c42:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8003c48:	4b17      	ldr	r3, [pc, #92]	; (8003ca8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c50:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	617b      	str	r3, [r7, #20]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	613b      	str	r3, [r7, #16]
 8003c5a:	e00b      	b.n	8003c74 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	617a      	str	r2, [r7, #20]
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	701a      	strb	r2, [r3, #0]
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	09db      	lsrs	r3, r3, #7
 8003c72:	613b      	str	r3, [r7, #16]
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	2b7f      	cmp	r3, #127	; 0x7f
 8003c78:	d8f0      	bhi.n	8003c5c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	617a      	str	r2, [r7, #20]
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	68b8      	ldr	r0, [r7, #8]
 8003c90:	f7ff fa28 	bl	80030e4 <_SendPacket>
  RECORD_END();
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f383 8811 	msr	BASEPRI, r3
}
 8003c9a:	bf00      	nop
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	200151e4 	.word	0x200151e4
 8003ca8:	e000ed04 	.word	0xe000ed04

08003cac <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003cb2:	f3ef 8311 	mrs	r3, BASEPRI
 8003cb6:	f04f 0120 	mov.w	r1, #32
 8003cba:	f381 8811 	msr	BASEPRI, r1
 8003cbe:	607b      	str	r3, [r7, #4]
 8003cc0:	4807      	ldr	r0, [pc, #28]	; (8003ce0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8003cc2:	f7ff f938 	bl	8002f36 <_PreparePacket>
 8003cc6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8003cc8:	2203      	movs	r2, #3
 8003cca:	6839      	ldr	r1, [r7, #0]
 8003ccc:	6838      	ldr	r0, [r7, #0]
 8003cce:	f7ff fa09 	bl	80030e4 <_SendPacket>
  RECORD_END();
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f383 8811 	msr	BASEPRI, r3
}
 8003cd8:	bf00      	nop
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	200151e4 	.word	0x200151e4

08003ce4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003cea:	f3ef 8311 	mrs	r3, BASEPRI
 8003cee:	f04f 0120 	mov.w	r1, #32
 8003cf2:	f381 8811 	msr	BASEPRI, r1
 8003cf6:	607b      	str	r3, [r7, #4]
 8003cf8:	4807      	ldr	r0, [pc, #28]	; (8003d18 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8003cfa:	f7ff f91c 	bl	8002f36 <_PreparePacket>
 8003cfe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003d00:	2211      	movs	r2, #17
 8003d02:	6839      	ldr	r1, [r7, #0]
 8003d04:	6838      	ldr	r0, [r7, #0]
 8003d06:	f7ff f9ed 	bl	80030e4 <_SendPacket>
  RECORD_END();
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f383 8811 	msr	BASEPRI, r3
}
 8003d10:	bf00      	nop
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	200151e4 	.word	0x200151e4

08003d1c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b088      	sub	sp, #32
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003d24:	f3ef 8311 	mrs	r3, BASEPRI
 8003d28:	f04f 0120 	mov.w	r1, #32
 8003d2c:	f381 8811 	msr	BASEPRI, r1
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	481a      	ldr	r0, [pc, #104]	; (8003d9c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8003d34:	f7ff f8ff 	bl	8002f36 <_PreparePacket>
 8003d38:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003d3e:	4b18      	ldr	r3, [pc, #96]	; (8003da0 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	089b      	lsrs	r3, r3, #2
 8003d48:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	61fb      	str	r3, [r7, #28]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	61bb      	str	r3, [r7, #24]
 8003d52:	e00b      	b.n	8003d6c <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	61fa      	str	r2, [r7, #28]
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	b2d2      	uxtb	r2, r2
 8003d5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	701a      	strb	r2, [r3, #0]
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	09db      	lsrs	r3, r3, #7
 8003d6a:	61bb      	str	r3, [r7, #24]
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	2b7f      	cmp	r3, #127	; 0x7f
 8003d70:	d8f0      	bhi.n	8003d54 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	61fa      	str	r2, [r7, #28]
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	701a      	strb	r2, [r3, #0]
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8003d82:	2208      	movs	r2, #8
 8003d84:	68f9      	ldr	r1, [r7, #12]
 8003d86:	6938      	ldr	r0, [r7, #16]
 8003d88:	f7ff f9ac 	bl	80030e4 <_SendPacket>
  RECORD_END();
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f383 8811 	msr	BASEPRI, r3
}
 8003d92:	bf00      	nop
 8003d94:	3720      	adds	r7, #32
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	200151e4 	.word	0x200151e4
 8003da0:	200151b4 	.word	0x200151b4

08003da4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003dac:	f3ef 8311 	mrs	r3, BASEPRI
 8003db0:	f04f 0120 	mov.w	r1, #32
 8003db4:	f381 8811 	msr	BASEPRI, r1
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	481a      	ldr	r0, [pc, #104]	; (8003e24 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8003dbc:	f7ff f8bb 	bl	8002f36 <_PreparePacket>
 8003dc0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003dc6:	4b18      	ldr	r3, [pc, #96]	; (8003e28 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	089b      	lsrs	r3, r3, #2
 8003dd0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	61fb      	str	r3, [r7, #28]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	61bb      	str	r3, [r7, #24]
 8003dda:	e00b      	b.n	8003df4 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	61fa      	str	r2, [r7, #28]
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	09db      	lsrs	r3, r3, #7
 8003df2:	61bb      	str	r3, [r7, #24]
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	2b7f      	cmp	r3, #127	; 0x7f
 8003df8:	d8f0      	bhi.n	8003ddc <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	61fa      	str	r2, [r7, #28]
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	701a      	strb	r2, [r3, #0]
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8003e0a:	2204      	movs	r2, #4
 8003e0c:	68f9      	ldr	r1, [r7, #12]
 8003e0e:	6938      	ldr	r0, [r7, #16]
 8003e10:	f7ff f968 	bl	80030e4 <_SendPacket>
  RECORD_END();
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f383 8811 	msr	BASEPRI, r3
}
 8003e1a:	bf00      	nop
 8003e1c:	3720      	adds	r7, #32
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	200151e4 	.word	0x200151e4
 8003e28:	200151b4 	.word	0x200151b4

08003e2c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b088      	sub	sp, #32
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003e34:	f3ef 8311 	mrs	r3, BASEPRI
 8003e38:	f04f 0120 	mov.w	r1, #32
 8003e3c:	f381 8811 	msr	BASEPRI, r1
 8003e40:	617b      	str	r3, [r7, #20]
 8003e42:	481a      	ldr	r0, [pc, #104]	; (8003eac <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8003e44:	f7ff f877 	bl	8002f36 <_PreparePacket>
 8003e48:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003e4e:	4b18      	ldr	r3, [pc, #96]	; (8003eb0 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	089b      	lsrs	r3, r3, #2
 8003e58:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	61fb      	str	r3, [r7, #28]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	61bb      	str	r3, [r7, #24]
 8003e62:	e00b      	b.n	8003e7c <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	61fa      	str	r2, [r7, #28]
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	09db      	lsrs	r3, r3, #7
 8003e7a:	61bb      	str	r3, [r7, #24]
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	2b7f      	cmp	r3, #127	; 0x7f
 8003e80:	d8f0      	bhi.n	8003e64 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	61fa      	str	r2, [r7, #28]
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	701a      	strb	r2, [r3, #0]
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8003e92:	2206      	movs	r2, #6
 8003e94:	68f9      	ldr	r1, [r7, #12]
 8003e96:	6938      	ldr	r0, [r7, #16]
 8003e98:	f7ff f924 	bl	80030e4 <_SendPacket>
  RECORD_END();
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f383 8811 	msr	BASEPRI, r3
}
 8003ea2:	bf00      	nop
 8003ea4:	3720      	adds	r7, #32
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	200151e4 	.word	0x200151e4
 8003eb0:	200151b4 	.word	0x200151b4

08003eb4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8003ebc:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	089b      	lsrs	r3, r3, #2
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	200151b4 	.word	0x200151b4

08003ed8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08c      	sub	sp, #48	; 0x30
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8003ee2:	4b3b      	ldr	r3, [pc, #236]	; (8003fd0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d06d      	beq.n	8003fc6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8003eea:	4b39      	ldr	r3, [pc, #228]	; (8003fd0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ef4:	e008      	b.n	8003f08 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8003ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8003efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d007      	beq.n	8003f12 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8003f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f04:	3301      	adds	r3, #1
 8003f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f08:	79fa      	ldrb	r2, [r7, #7]
 8003f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d8f2      	bhi.n	8003ef6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8003f10:	e000      	b.n	8003f14 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8003f12:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8003f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d055      	beq.n	8003fc6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003f1a:	f3ef 8311 	mrs	r3, BASEPRI
 8003f1e:	f04f 0120 	mov.w	r1, #32
 8003f22:	f381 8811 	msr	BASEPRI, r1
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	482a      	ldr	r0, [pc, #168]	; (8003fd4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8003f2a:	f7ff f804 	bl	8002f36 <_PreparePacket>
 8003f2e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	627b      	str	r3, [r7, #36]	; 0x24
 8003f38:	79fb      	ldrb	r3, [r7, #7]
 8003f3a:	623b      	str	r3, [r7, #32]
 8003f3c:	e00b      	b.n	8003f56 <SEGGER_SYSVIEW_SendModule+0x7e>
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	627a      	str	r2, [r7, #36]	; 0x24
 8003f44:	6a3a      	ldr	r2, [r7, #32]
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	701a      	strb	r2, [r3, #0]
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	09db      	lsrs	r3, r3, #7
 8003f54:	623b      	str	r3, [r7, #32]
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	2b7f      	cmp	r3, #127	; 0x7f
 8003f5a:	d8f0      	bhi.n	8003f3e <SEGGER_SYSVIEW_SendModule+0x66>
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	627a      	str	r2, [r7, #36]	; 0x24
 8003f62:	6a3a      	ldr	r2, [r7, #32]
 8003f64:	b2d2      	uxtb	r2, r2
 8003f66:	701a      	strb	r2, [r3, #0]
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	61fb      	str	r3, [r7, #28]
 8003f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	e00b      	b.n	8003f90 <SEGGER_SYSVIEW_SendModule+0xb8>
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	61fa      	str	r2, [r7, #28]
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	09db      	lsrs	r3, r3, #7
 8003f8e:	61bb      	str	r3, [r7, #24]
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	2b7f      	cmp	r3, #127	; 0x7f
 8003f94:	d8f0      	bhi.n	8003f78 <SEGGER_SYSVIEW_SendModule+0xa0>
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	61fa      	str	r2, [r7, #28]
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2280      	movs	r2, #128	; 0x80
 8003fac:	4619      	mov	r1, r3
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f7fe ff74 	bl	8002e9c <_EncodeStr>
 8003fb4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8003fb6:	2216      	movs	r2, #22
 8003fb8:	68f9      	ldr	r1, [r7, #12]
 8003fba:	6938      	ldr	r0, [r7, #16]
 8003fbc:	f7ff f892 	bl	80030e4 <_SendPacket>
      RECORD_END();
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8003fc6:	bf00      	nop
 8003fc8:	3730      	adds	r7, #48	; 0x30
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	200151dc 	.word	0x200151dc
 8003fd4:	200151e4 	.word	0x200151e4

08003fd8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8003fde:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00f      	beq.n	8004006 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8003fe6:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d002      	beq.n	8003ffa <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f2      	bne.n	8003fec <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004006:	bf00      	nop
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	200151dc 	.word	0x200151dc

08004014 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800401a:	f3ef 8311 	mrs	r3, BASEPRI
 800401e:	f04f 0120 	mov.w	r1, #32
 8004022:	f381 8811 	msr	BASEPRI, r1
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	4817      	ldr	r0, [pc, #92]	; (8004088 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800402a:	f7fe ff84 	bl	8002f36 <_PreparePacket>
 800402e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	4b14      	ldr	r3, [pc, #80]	; (800408c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	613b      	str	r3, [r7, #16]
 800403e:	e00b      	b.n	8004058 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	617a      	str	r2, [r7, #20]
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	701a      	strb	r2, [r3, #0]
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	09db      	lsrs	r3, r3, #7
 8004056:	613b      	str	r3, [r7, #16]
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	2b7f      	cmp	r3, #127	; 0x7f
 800405c:	d8f0      	bhi.n	8004040 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	617a      	str	r2, [r7, #20]
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	701a      	strb	r2, [r3, #0]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800406e:	221b      	movs	r2, #27
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	68b8      	ldr	r0, [r7, #8]
 8004074:	f7ff f836 	bl	80030e4 <_SendPacket>
  RECORD_END();
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f383 8811 	msr	BASEPRI, r3
}
 800407e:	bf00      	nop
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	200151e4 	.word	0x200151e4
 800408c:	200151e0 	.word	0x200151e0

08004090 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004090:	b580      	push	{r7, lr}
 8004092:	b08a      	sub	sp, #40	; 0x28
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004098:	f3ef 8311 	mrs	r3, BASEPRI
 800409c:	f04f 0120 	mov.w	r1, #32
 80040a0:	f381 8811 	msr	BASEPRI, r1
 80040a4:	617b      	str	r3, [r7, #20]
 80040a6:	4827      	ldr	r0, [pc, #156]	; (8004144 <SEGGER_SYSVIEW_Warn+0xb4>)
 80040a8:	f7fe ff45 	bl	8002f36 <_PreparePacket>
 80040ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80040ae:	2280      	movs	r2, #128	; 0x80
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	6938      	ldr	r0, [r7, #16]
 80040b4:	f7fe fef2 	bl	8002e9c <_EncodeStr>
 80040b8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	627b      	str	r3, [r7, #36]	; 0x24
 80040be:	2301      	movs	r3, #1
 80040c0:	623b      	str	r3, [r7, #32]
 80040c2:	e00b      	b.n	80040dc <SEGGER_SYSVIEW_Warn+0x4c>
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	627a      	str	r2, [r7, #36]	; 0x24
 80040ca:	6a3a      	ldr	r2, [r7, #32]
 80040cc:	b2d2      	uxtb	r2, r2
 80040ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	701a      	strb	r2, [r3, #0]
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	09db      	lsrs	r3, r3, #7
 80040da:	623b      	str	r3, [r7, #32]
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	2b7f      	cmp	r3, #127	; 0x7f
 80040e0:	d8f0      	bhi.n	80040c4 <SEGGER_SYSVIEW_Warn+0x34>
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	627a      	str	r2, [r7, #36]	; 0x24
 80040e8:	6a3a      	ldr	r2, [r7, #32]
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	701a      	strb	r2, [r3, #0]
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	61fb      	str	r3, [r7, #28]
 80040f6:	2300      	movs	r3, #0
 80040f8:	61bb      	str	r3, [r7, #24]
 80040fa:	e00b      	b.n	8004114 <SEGGER_SYSVIEW_Warn+0x84>
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	61fa      	str	r2, [r7, #28]
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800410a:	b2d2      	uxtb	r2, r2
 800410c:	701a      	strb	r2, [r3, #0]
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	09db      	lsrs	r3, r3, #7
 8004112:	61bb      	str	r3, [r7, #24]
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	2b7f      	cmp	r3, #127	; 0x7f
 8004118:	d8f0      	bhi.n	80040fc <SEGGER_SYSVIEW_Warn+0x6c>
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	61fa      	str	r2, [r7, #28]
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	701a      	strb	r2, [r3, #0]
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800412a:	221a      	movs	r2, #26
 800412c:	68f9      	ldr	r1, [r7, #12]
 800412e:	6938      	ldr	r0, [r7, #16]
 8004130:	f7fe ffd8 	bl	80030e4 <_SendPacket>
  RECORD_END();
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f383 8811 	msr	BASEPRI, r3
}
 800413a:	bf00      	nop
 800413c:	3728      	adds	r7, #40	; 0x28
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	200151e4 	.word	0x200151e4

08004148 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800414c:	4803      	ldr	r0, [pc, #12]	; (800415c <_cbSendSystemDesc+0x14>)
 800414e:	f7ff fd1b 	bl	8003b88 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004152:	4803      	ldr	r0, [pc, #12]	; (8004160 <_cbSendSystemDesc+0x18>)
 8004154:	f7ff fd18 	bl	8003b88 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004158:	bf00      	nop
 800415a:	bd80      	pop	{r7, pc}
 800415c:	080049ac 	.word	0x080049ac
 8004160:	080049ec 	.word	0x080049ec

08004164 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004168:	4b06      	ldr	r3, [pc, #24]	; (8004184 <SEGGER_SYSVIEW_Conf+0x20>)
 800416a:	6818      	ldr	r0, [r3, #0]
 800416c:	4b05      	ldr	r3, [pc, #20]	; (8004184 <SEGGER_SYSVIEW_Conf+0x20>)
 800416e:	6819      	ldr	r1, [r3, #0]
 8004170:	4b05      	ldr	r3, [pc, #20]	; (8004188 <SEGGER_SYSVIEW_Conf+0x24>)
 8004172:	4a06      	ldr	r2, [pc, #24]	; (800418c <SEGGER_SYSVIEW_Conf+0x28>)
 8004174:	f7ff f888 	bl	8003288 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004178:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800417c:	f7ff f8c2 	bl	8003304 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004180:	bf00      	nop
 8004182:	bd80      	pop	{r7, pc}
 8004184:	20000008 	.word	0x20000008
 8004188:	08004149 	.word	0x08004149
 800418c:	08004a6c 	.word	0x08004a6c

08004190 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004192:	b085      	sub	sp, #20
 8004194:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004196:	2300      	movs	r3, #0
 8004198:	607b      	str	r3, [r7, #4]
 800419a:	e034      	b.n	8004206 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800419c:	491e      	ldr	r1, [pc, #120]	; (8004218 <_cbSendTaskList+0x88>)
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	4613      	mov	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	440b      	add	r3, r1
 80041aa:	6818      	ldr	r0, [r3, #0]
 80041ac:	491a      	ldr	r1, [pc, #104]	; (8004218 <_cbSendTaskList+0x88>)
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	4613      	mov	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	440b      	add	r3, r1
 80041ba:	3304      	adds	r3, #4
 80041bc:	681c      	ldr	r4, [r3, #0]
 80041be:	4916      	ldr	r1, [pc, #88]	; (8004218 <_cbSendTaskList+0x88>)
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	440b      	add	r3, r1
 80041cc:	3308      	adds	r3, #8
 80041ce:	681d      	ldr	r5, [r3, #0]
 80041d0:	4911      	ldr	r1, [pc, #68]	; (8004218 <_cbSendTaskList+0x88>)
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	330c      	adds	r3, #12
 80041e0:	681e      	ldr	r6, [r3, #0]
 80041e2:	490d      	ldr	r1, [pc, #52]	; (8004218 <_cbSendTaskList+0x88>)
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	4613      	mov	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	3310      	adds	r3, #16
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	4633      	mov	r3, r6
 80041f8:	462a      	mov	r2, r5
 80041fa:	4621      	mov	r1, r4
 80041fc:	f000 f8ae 	bl	800435c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3301      	adds	r3, #1
 8004204:	607b      	str	r3, [r7, #4]
 8004206:	4b05      	ldr	r3, [pc, #20]	; (800421c <_cbSendTaskList+0x8c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	429a      	cmp	r2, r3
 800420e:	d3c5      	bcc.n	800419c <_cbSendTaskList+0xc>
  }
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004218:	200152c8 	.word	0x200152c8
 800421c:	20015368 	.word	0x20015368

08004220 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004228:	f7fd fcd4 	bl	8001bd4 <xTaskGetTickCountFromISR>
 800422c:	4603      	mov	r3, r0
 800422e:	f04f 0400 	mov.w	r4, #0
 8004232:	e887 0018 	stmia.w	r7, {r3, r4}
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004236:	e897 0006 	ldmia.w	r7, {r1, r2}
 800423a:	460b      	mov	r3, r1
 800423c:	4614      	mov	r4, r2
 800423e:	ea4f 1b44 	mov.w	fp, r4, lsl #5
 8004242:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
 8004246:	ea4f 1a43 	mov.w	sl, r3, lsl #5
 800424a:	4653      	mov	r3, sl
 800424c:	465c      	mov	r4, fp
 800424e:	1a5b      	subs	r3, r3, r1
 8004250:	eb64 0402 	sbc.w	r4, r4, r2
 8004254:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8004258:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
 800425c:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8004260:	4643      	mov	r3, r8
 8004262:	464c      	mov	r4, r9
 8004264:	185b      	adds	r3, r3, r1
 8004266:	eb44 0402 	adc.w	r4, r4, r2
 800426a:	00e6      	lsls	r6, r4, #3
 800426c:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8004270:	00dd      	lsls	r5, r3, #3
 8004272:	462b      	mov	r3, r5
 8004274:	4634      	mov	r4, r6
 8004276:	e887 0018 	stmia.w	r7, {r3, r4}
  return Time;
 800427a:	e897 0018 	ldmia.w	r7, {r3, r4}
}
 800427e:	4618      	mov	r0, r3
 8004280:	4621      	mov	r1, r4
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800428c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af02      	add	r7, sp, #8
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800429a:	2205      	movs	r2, #5
 800429c:	492b      	ldr	r1, [pc, #172]	; (800434c <SYSVIEW_AddTask+0xc0>)
 800429e:	68b8      	ldr	r0, [r7, #8]
 80042a0:	f000 fb3a 	bl	8004918 <memcmp>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d04b      	beq.n	8004342 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80042aa:	4b29      	ldr	r3, [pc, #164]	; (8004350 <SYSVIEW_AddTask+0xc4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2b07      	cmp	r3, #7
 80042b0:	d903      	bls.n	80042ba <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80042b2:	4828      	ldr	r0, [pc, #160]	; (8004354 <SYSVIEW_AddTask+0xc8>)
 80042b4:	f7ff feec 	bl	8004090 <SEGGER_SYSVIEW_Warn>
    return;
 80042b8:	e044      	b.n	8004344 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80042ba:	4b25      	ldr	r3, [pc, #148]	; (8004350 <SYSVIEW_AddTask+0xc4>)
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	4926      	ldr	r1, [pc, #152]	; (8004358 <SYSVIEW_AddTask+0xcc>)
 80042c0:	4613      	mov	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80042ce:	4b20      	ldr	r3, [pc, #128]	; (8004350 <SYSVIEW_AddTask+0xc4>)
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	4921      	ldr	r1, [pc, #132]	; (8004358 <SYSVIEW_AddTask+0xcc>)
 80042d4:	4613      	mov	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	440b      	add	r3, r1
 80042de:	3304      	adds	r3, #4
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80042e4:	4b1a      	ldr	r3, [pc, #104]	; (8004350 <SYSVIEW_AddTask+0xc4>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	491b      	ldr	r1, [pc, #108]	; (8004358 <SYSVIEW_AddTask+0xcc>)
 80042ea:	4613      	mov	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	440b      	add	r3, r1
 80042f4:	3308      	adds	r3, #8
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80042fa:	4b15      	ldr	r3, [pc, #84]	; (8004350 <SYSVIEW_AddTask+0xc4>)
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	4916      	ldr	r1, [pc, #88]	; (8004358 <SYSVIEW_AddTask+0xcc>)
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	330c      	adds	r3, #12
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004310:	4b0f      	ldr	r3, [pc, #60]	; (8004350 <SYSVIEW_AddTask+0xc4>)
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	4910      	ldr	r1, [pc, #64]	; (8004358 <SYSVIEW_AddTask+0xcc>)
 8004316:	4613      	mov	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	3310      	adds	r3, #16
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004326:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <SYSVIEW_AddTask+0xc4>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3301      	adds	r3, #1
 800432c:	4a08      	ldr	r2, [pc, #32]	; (8004350 <SYSVIEW_AddTask+0xc4>)
 800432e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	68b9      	ldr	r1, [r7, #8]
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 f80e 	bl	800435c <SYSVIEW_SendTaskInfo>
 8004340:	e000      	b.n	8004344 <SYSVIEW_AddTask+0xb8>
    return;
 8004342:	bf00      	nop

}
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	080049fc 	.word	0x080049fc
 8004350:	20015368 	.word	0x20015368
 8004354:	08004a04 	.word	0x08004a04
 8004358:	200152c8 	.word	0x200152c8

0800435c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800435c:	b580      	push	{r7, lr}
 800435e:	b08a      	sub	sp, #40	; 0x28
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
 8004368:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800436a:	f107 0314 	add.w	r3, r7, #20
 800436e:	2214      	movs	r2, #20
 8004370:	2100      	movs	r1, #0
 8004372:	4618      	mov	r0, r3
 8004374:	f000 faea 	bl	800494c <memset>
  TaskInfo.TaskID     = TaskID;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800438c:	f107 0314 	add.w	r3, r7, #20
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff faff 	bl	8003994 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004396:	bf00      	nop
 8004398:	3728      	adds	r7, #40	; 0x28
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4603      	mov	r3, r0
 80043a8:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80043aa:	4909      	ldr	r1, [pc, #36]	; (80043d0 <NVIC_EnableIRQ+0x30>)
 80043ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b0:	095b      	lsrs	r3, r3, #5
 80043b2:	79fa      	ldrb	r2, [r7, #7]
 80043b4:	f002 021f 	and.w	r2, r2, #31
 80043b8:	2001      	movs	r0, #1
 80043ba:	fa00 f202 	lsl.w	r2, r0, r2
 80043be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	e000e100 	.word	0xe000e100

080043d4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	6039      	str	r1, [r7, #0]
 80043de:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80043e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	da0b      	bge.n	8004400 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80043e8:	490d      	ldr	r1, [pc, #52]	; (8004420 <NVIC_SetPriority+0x4c>)
 80043ea:	79fb      	ldrb	r3, [r7, #7]
 80043ec:	f003 030f 	and.w	r3, r3, #15
 80043f0:	3b04      	subs	r3, #4
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	0112      	lsls	r2, r2, #4
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	440b      	add	r3, r1
 80043fc:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80043fe:	e009      	b.n	8004414 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8004400:	4908      	ldr	r1, [pc, #32]	; (8004424 <NVIC_SetPriority+0x50>)
 8004402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	0112      	lsls	r2, r2, #4
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	440b      	add	r3, r1
 8004410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	e000ed00 	.word	0xe000ed00
 8004424:	e000e100 	.word	0xe000e100

08004428 <main>:
void GPIO_Config(void);

TaskHandle_t LedFlashHandle = NULL ;
uint8_t count = 0;
int main(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af02      	add	r7, sp, #8

  DWT->CTRL |= (1 <<0); //
 800442e:	4a0e      	ldr	r2, [pc, #56]	; (8004468 <main+0x40>)
 8004430:	4b0d      	ldr	r3, [pc, #52]	; (8004468 <main+0x40>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f043 0301 	orr.w	r3, r3, #1
 8004438:	6013      	str	r3, [r2, #0]



  RCC_DeInit();   // HSE OFF | HSI ON |	PLL OFF |
 800443a:	f7fc f815 	bl	8000468 <RCC_DeInit>
  SystemCoreClockUpdate(); // SYSTEM CLOCK 16 MHz
 800443e:	f000 f94f 	bl	80046e0 <SystemCoreClockUpdate>

  SEGGER_SYSVIEW_Conf();
 8004442:	f7ff fe8f 	bl	8004164 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8004446:	f7ff f929 	bl	800369c <SEGGER_SYSVIEW_Start>

  GPIO_Config();
 800444a:	f000 f859 	bl	8004500 <GPIO_Config>

  xTaskCreate(LedFlashTask,"Led Control",configMINIMAL_STACK_SIZE,NULL,3,&LedFlashHandle);
 800444e:	4b07      	ldr	r3, [pc, #28]	; (800446c <main+0x44>)
 8004450:	9301      	str	r3, [sp, #4]
 8004452:	2303      	movs	r3, #3
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	2300      	movs	r3, #0
 8004458:	2282      	movs	r2, #130	; 0x82
 800445a:	4905      	ldr	r1, [pc, #20]	; (8004470 <main+0x48>)
 800445c:	4805      	ldr	r0, [pc, #20]	; (8004474 <main+0x4c>)
 800445e:	f7fd f87f 	bl	8001560 <xTaskCreate>

  vTaskStartScheduler(); // START SCHEDULAR
 8004462:	f7fd fa3b 	bl	80018dc <vTaskStartScheduler>
  while (1)
 8004466:	e7fe      	b.n	8004466 <main+0x3e>
 8004468:	e0001000 	.word	0xe0001000
 800446c:	2001536c 	.word	0x2001536c
 8004470:	08004a54 	.word	0x08004a54
 8004474:	08004479 	.word	0x08004479

08004478 <LedFlashTask>:

  }
}

void LedFlashTask(void *params)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
	   while(1)
	 {
	   if(count == 0)
 8004480:	4b1d      	ldr	r3, [pc, #116]	; (80044f8 <LedFlashTask+0x80>)
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d104      	bne.n	8004492 <LedFlashTask+0x1a>
	      {
	        GPIO_ResetBits(GPIOC,GPIO_Pin_0|GPIO_Pin_1 |GPIO_Pin_2|GPIO_Pin_3);
 8004488:	210f      	movs	r1, #15
 800448a:	481c      	ldr	r0, [pc, #112]	; (80044fc <LedFlashTask+0x84>)
 800448c:	f7fb ffca 	bl	8000424 <GPIO_ResetBits>
 8004490:	e7f6      	b.n	8004480 <LedFlashTask+0x8>
	      }
	   else if(count == 1)
 8004492:	4b19      	ldr	r3, [pc, #100]	; (80044f8 <LedFlashTask+0x80>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d108      	bne.n	80044ac <LedFlashTask+0x34>
        {
        	GPIO_ToggleBits(GPIOC,GPIO_Pin_0|GPIO_Pin_1 |GPIO_Pin_2|GPIO_Pin_3);
 800449a:	210f      	movs	r1, #15
 800449c:	4817      	ldr	r0, [pc, #92]	; (80044fc <LedFlashTask+0x84>)
 800449e:	f7fb ffd0 	bl	8000442 <GPIO_ToggleBits>
        	vTaskDelay(1000);
 80044a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044a6:	f7fd f9e1 	bl	800186c <vTaskDelay>
 80044aa:	e7e9      	b.n	8004480 <LedFlashTask+0x8>


        }
	   else if(count == 2)
 80044ac:	4b12      	ldr	r3, [pc, #72]	; (80044f8 <LedFlashTask+0x80>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d108      	bne.n	80044c6 <LedFlashTask+0x4e>
        {
        	GPIO_ToggleBits(GPIOC,GPIO_Pin_0|GPIO_Pin_1 |GPIO_Pin_2|GPIO_Pin_3);
 80044b4:	210f      	movs	r1, #15
 80044b6:	4811      	ldr	r0, [pc, #68]	; (80044fc <LedFlashTask+0x84>)
 80044b8:	f7fb ffc3 	bl	8000442 <GPIO_ToggleBits>
        	vTaskDelay(750);
 80044bc:	f240 20ee 	movw	r0, #750	; 0x2ee
 80044c0:	f7fd f9d4 	bl	800186c <vTaskDelay>
 80044c4:	e7dc      	b.n	8004480 <LedFlashTask+0x8>

        }
	   else if(count == 3)
 80044c6:	4b0c      	ldr	r3, [pc, #48]	; (80044f8 <LedFlashTask+0x80>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	2b03      	cmp	r3, #3
 80044cc:	d108      	bne.n	80044e0 <LedFlashTask+0x68>
        {
        	GPIO_ToggleBits(GPIOC,GPIO_Pin_0|GPIO_Pin_1 |GPIO_Pin_2|GPIO_Pin_3);
 80044ce:	210f      	movs	r1, #15
 80044d0:	480a      	ldr	r0, [pc, #40]	; (80044fc <LedFlashTask+0x84>)
 80044d2:	f7fb ffb6 	bl	8000442 <GPIO_ToggleBits>
        	vTaskDelay(500);
 80044d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80044da:	f7fd f9c7 	bl	800186c <vTaskDelay>
 80044de:	e7cf      	b.n	8004480 <LedFlashTask+0x8>

        }
	   else if(count == 4)
 80044e0:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <LedFlashTask+0x80>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d1cb      	bne.n	8004480 <LedFlashTask+0x8>
        {
        	GPIO_ToggleBits(GPIOC,GPIO_Pin_0|GPIO_Pin_1 |GPIO_Pin_2|GPIO_Pin_3);
 80044e8:	210f      	movs	r1, #15
 80044ea:	4804      	ldr	r0, [pc, #16]	; (80044fc <LedFlashTask+0x84>)
 80044ec:	f7fb ffa9 	bl	8000442 <GPIO_ToggleBits>
        	vTaskDelay(250);
 80044f0:	20fa      	movs	r0, #250	; 0xfa
 80044f2:	f7fd f9bb 	bl	800186c <vTaskDelay>
	   if(count == 0)
 80044f6:	e7c3      	b.n	8004480 <LedFlashTask+0x8>
 80044f8:	20015370 	.word	0x20015370
 80044fc:	40020800 	.word	0x40020800

08004500 <GPIO_Config>:
        }
	 }
}

void GPIO_Config(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);
 8004506:	2101      	movs	r1, #1
 8004508:	2004      	movs	r0, #4
 800450a:	f7fb ffdb 	bl	80004c4 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE); //ENABLE SYSCFG FOR EXTI LINE
 800450e:	2101      	movs	r1, #1
 8004510:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004514:	f7fb fff6 	bl	8000504 <RCC_APB2PeriphClockCmd>

  SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC,EXTI_PinSource13);//Selecting port and pin for EXTI
 8004518:	210d      	movs	r1, #13
 800451a:	2002      	movs	r0, #2
 800451c:	f7fc f812 	bl	8000544 <SYSCFG_EXTILineConfig>

  EXTI_InitTypeDef EXTI_InitStruct = {0};
 8004520:	f107 0308 	add.w	r3, r7, #8
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	605a      	str	r2, [r3, #4]
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800452a:	463b      	mov	r3, r7
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	605a      	str	r2, [r3, #4]

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1 |GPIO_Pin_2|GPIO_Pin_3;
 8004532:	230f      	movs	r3, #15
 8004534:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8004536:	2301      	movs	r3, #1
 8004538:	713b      	strb	r3, [r7, #4]
  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 800453a:	2300      	movs	r3, #0
 800453c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800453e:	2300      	movs	r3, #0
 8004540:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8004542:	2303      	movs	r3, #3
 8004544:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOC,&GPIO_InitStruct);
 8004546:	463b      	mov	r3, r7
 8004548:	4619      	mov	r1, r3
 800454a:	4816      	ldr	r0, [pc, #88]	; (80045a4 <GPIO_Config+0xa4>)
 800454c:	f7fb fec2 	bl	80002d4 <GPIO_Init>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_13;
 8004550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004554:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8004556:	2300      	movs	r3, #0
 8004558:	713b      	strb	r3, [r7, #4]
  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 800455a:	2300      	movs	r3, #0
 800455c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800455e:	2300      	movs	r3, #0
 8004560:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8004562:	2303      	movs	r3, #3
 8004564:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOC,&GPIO_InitStruct);
 8004566:	463b      	mov	r3, r7
 8004568:	4619      	mov	r1, r3
 800456a:	480e      	ldr	r0, [pc, #56]	; (80045a4 <GPIO_Config+0xa4>)
 800456c:	f7fb feb2 	bl	80002d4 <GPIO_Init>

  EXTI_InitStruct.EXTI_Line = EXTI_Line13;
 8004570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004574:	60bb      	str	r3, [r7, #8]
  EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8004576:	2301      	movs	r3, #1
 8004578:	73bb      	strb	r3, [r7, #14]
  EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 800457a:	2300      	movs	r3, #0
 800457c:	733b      	strb	r3, [r7, #12]
  EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising;
 800457e:	2308      	movs	r3, #8
 8004580:	737b      	strb	r3, [r7, #13]

  EXTI_Init(&EXTI_InitStruct);
 8004582:	f107 0308 	add.w	r3, r7, #8
 8004586:	4618      	mov	r0, r3
 8004588:	f7fb fe22 	bl	80001d0 <EXTI_Init>

  NVIC_SetPriority(EXTI15_10_IRQn,2);
 800458c:	2102      	movs	r1, #2
 800458e:	2028      	movs	r0, #40	; 0x28
 8004590:	f7ff ff20 	bl	80043d4 <NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004594:	2028      	movs	r0, #40	; 0x28
 8004596:	f7ff ff03 	bl	80043a0 <NVIC_EnableIRQ>

}
 800459a:	bf00      	nop
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40020800 	.word	0x40020800

080045a8 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler()
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0

  EXTI_ClearITPendingBit(EXTI_Line13);
 80045ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80045b0:	f7fb fe80 	bl	80002b4 <EXTI_ClearITPendingBit>
  if(GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_13) == Bit_SET)
 80045b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80045b8:	480a      	ldr	r0, [pc, #40]	; (80045e4 <EXTI15_10_IRQHandler+0x3c>)
 80045ba:	f7fb ff19 	bl	80003f0 <GPIO_ReadInputDataBit>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d10c      	bne.n	80045de <EXTI15_10_IRQHandler+0x36>
  {
	  count++;
 80045c4:	4b08      	ldr	r3, [pc, #32]	; (80045e8 <EXTI15_10_IRQHandler+0x40>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	3301      	adds	r3, #1
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <EXTI15_10_IRQHandler+0x40>)
 80045ce:	701a      	strb	r2, [r3, #0]
	  if(count == 5)
 80045d0:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <EXTI15_10_IRQHandler+0x40>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b05      	cmp	r3, #5
 80045d6:	d102      	bne.n	80045de <EXTI15_10_IRQHandler+0x36>
	  {
		  count = 0;
 80045d8:	4b03      	ldr	r3, [pc, #12]	; (80045e8 <EXTI15_10_IRQHandler+0x40>)
 80045da:	2200      	movs	r2, #0
 80045dc:	701a      	strb	r2, [r3, #0]
	  }
  }


}
 80045de:	bf00      	nop
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	40020800 	.word	0x40020800
 80045e8:	20015370 	.word	0x20015370

080045ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80045ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004624 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80045f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80045f2:	e003      	b.n	80045fc <LoopCopyDataInit>

080045f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80045f4:	4b0c      	ldr	r3, [pc, #48]	; (8004628 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80045f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80045f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80045fa:	3104      	adds	r1, #4

080045fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80045fc:	480b      	ldr	r0, [pc, #44]	; (800462c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80045fe:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004600:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004602:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004604:	d3f6      	bcc.n	80045f4 <CopyDataInit>
  ldr  r2, =_sbss
 8004606:	4a0b      	ldr	r2, [pc, #44]	; (8004634 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004608:	e002      	b.n	8004610 <LoopFillZerobss>

0800460a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800460a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800460c:	f842 3b04 	str.w	r3, [r2], #4

08004610 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004610:	4b09      	ldr	r3, [pc, #36]	; (8004638 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004612:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004614:	d3f9      	bcc.n	800460a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004616:	f000 f82d 	bl	8004674 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800461a:	f000 f959 	bl	80048d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800461e:	f7ff ff03 	bl	8004428 <main>
  bx  lr    
 8004622:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004624:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8004628:	08004a7c 	.word	0x08004a7c
  ldr  r0, =_sdata
 800462c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004630:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8004634:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8004638:	2001545c 	.word	0x2001545c

0800463c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800463c:	e7fe      	b.n	800463c <ADC_IRQHandler>

0800463e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800463e:	b480      	push	{r7}
 8004640:	af00      	add	r7, sp, #0
}
 8004642:	bf00      	nop
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8004650:	e7fe      	b.n	8004650 <HardFault_Handler+0x4>

08004652 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8004652:	b480      	push	{r7}
 8004654:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8004656:	e7fe      	b.n	8004656 <MemManage_Handler+0x4>

08004658 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800465c:	e7fe      	b.n	800465c <BusFault_Handler+0x4>

0800465e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800465e:	b480      	push	{r7}
 8004660:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004662:	e7fe      	b.n	8004662 <UsageFault_Handler+0x4>

08004664 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
}
 8004668:	bf00      	nop
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
	...

08004674 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004678:	4a16      	ldr	r2, [pc, #88]	; (80046d4 <SystemInit+0x60>)
 800467a:	4b16      	ldr	r3, [pc, #88]	; (80046d4 <SystemInit+0x60>)
 800467c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004688:	4a13      	ldr	r2, [pc, #76]	; (80046d8 <SystemInit+0x64>)
 800468a:	4b13      	ldr	r3, [pc, #76]	; (80046d8 <SystemInit+0x64>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f043 0301 	orr.w	r3, r3, #1
 8004692:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004694:	4b10      	ldr	r3, [pc, #64]	; (80046d8 <SystemInit+0x64>)
 8004696:	2200      	movs	r2, #0
 8004698:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800469a:	4a0f      	ldr	r2, [pc, #60]	; (80046d8 <SystemInit+0x64>)
 800469c:	4b0e      	ldr	r3, [pc, #56]	; (80046d8 <SystemInit+0x64>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80046a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80046aa:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <SystemInit+0x64>)
 80046ac:	4a0b      	ldr	r2, [pc, #44]	; (80046dc <SystemInit+0x68>)
 80046ae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80046b0:	4a09      	ldr	r2, [pc, #36]	; (80046d8 <SystemInit+0x64>)
 80046b2:	4b09      	ldr	r3, [pc, #36]	; (80046d8 <SystemInit+0x64>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80046bc:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <SystemInit+0x64>)
 80046be:	2200      	movs	r2, #0
 80046c0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80046c2:	f000 f889 	bl	80047d8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80046c6:	4b03      	ldr	r3, [pc, #12]	; (80046d4 <SystemInit+0x60>)
 80046c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80046cc:	609a      	str	r2, [r3, #8]
#endif
}
 80046ce:	bf00      	nop
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	e000ed00 	.word	0xe000ed00
 80046d8:	40023800 	.word	0x40023800
 80046dc:	24003010 	.word	0x24003010

080046e0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80046e6:	2300      	movs	r3, #0
 80046e8:	613b      	str	r3, [r7, #16]
 80046ea:	2300      	movs	r3, #0
 80046ec:	617b      	str	r3, [r7, #20]
 80046ee:	2302      	movs	r3, #2
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	2300      	movs	r3, #0
 80046f4:	60bb      	str	r3, [r7, #8]
 80046f6:	2302      	movs	r3, #2
 80046f8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80046fa:	4b32      	ldr	r3, [pc, #200]	; (80047c4 <SystemCoreClockUpdate+0xe4>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 030c 	and.w	r3, r3, #12
 8004702:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	2b04      	cmp	r3, #4
 8004708:	d007      	beq.n	800471a <SystemCoreClockUpdate+0x3a>
 800470a:	2b08      	cmp	r3, #8
 800470c:	d009      	beq.n	8004722 <SystemCoreClockUpdate+0x42>
 800470e:	2b00      	cmp	r3, #0
 8004710:	d13d      	bne.n	800478e <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8004712:	4b2d      	ldr	r3, [pc, #180]	; (80047c8 <SystemCoreClockUpdate+0xe8>)
 8004714:	4a2d      	ldr	r2, [pc, #180]	; (80047cc <SystemCoreClockUpdate+0xec>)
 8004716:	601a      	str	r2, [r3, #0]
      break;
 8004718:	e03d      	b.n	8004796 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800471a:	4b2b      	ldr	r3, [pc, #172]	; (80047c8 <SystemCoreClockUpdate+0xe8>)
 800471c:	4a2c      	ldr	r2, [pc, #176]	; (80047d0 <SystemCoreClockUpdate+0xf0>)
 800471e:	601a      	str	r2, [r3, #0]
      break;
 8004720:	e039      	b.n	8004796 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004722:	4b28      	ldr	r3, [pc, #160]	; (80047c4 <SystemCoreClockUpdate+0xe4>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	0d9b      	lsrs	r3, r3, #22
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800472e:	4b25      	ldr	r3, [pc, #148]	; (80047c4 <SystemCoreClockUpdate+0xe4>)
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004736:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00c      	beq.n	8004758 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800473e:	4a24      	ldr	r2, [pc, #144]	; (80047d0 <SystemCoreClockUpdate+0xf0>)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	fbb2 f3f3 	udiv	r3, r2, r3
 8004746:	4a1f      	ldr	r2, [pc, #124]	; (80047c4 <SystemCoreClockUpdate+0xe4>)
 8004748:	6852      	ldr	r2, [r2, #4]
 800474a:	0992      	lsrs	r2, r2, #6
 800474c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004750:	fb02 f303 	mul.w	r3, r2, r3
 8004754:	617b      	str	r3, [r7, #20]
 8004756:	e00b      	b.n	8004770 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8004758:	4a1c      	ldr	r2, [pc, #112]	; (80047cc <SystemCoreClockUpdate+0xec>)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004760:	4a18      	ldr	r2, [pc, #96]	; (80047c4 <SystemCoreClockUpdate+0xe4>)
 8004762:	6852      	ldr	r2, [r2, #4]
 8004764:	0992      	lsrs	r2, r2, #6
 8004766:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800476a:	fb02 f303 	mul.w	r3, r2, r3
 800476e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004770:	4b14      	ldr	r3, [pc, #80]	; (80047c4 <SystemCoreClockUpdate+0xe4>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	0c1b      	lsrs	r3, r3, #16
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	3301      	adds	r3, #1
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	fbb2 f3f3 	udiv	r3, r2, r3
 8004788:	4a0f      	ldr	r2, [pc, #60]	; (80047c8 <SystemCoreClockUpdate+0xe8>)
 800478a:	6013      	str	r3, [r2, #0]
      break;
 800478c:	e003      	b.n	8004796 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800478e:	4b0e      	ldr	r3, [pc, #56]	; (80047c8 <SystemCoreClockUpdate+0xe8>)
 8004790:	4a0e      	ldr	r2, [pc, #56]	; (80047cc <SystemCoreClockUpdate+0xec>)
 8004792:	601a      	str	r2, [r3, #0]
      break;
 8004794:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004796:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <SystemCoreClockUpdate+0xe4>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	091b      	lsrs	r3, r3, #4
 800479c:	f003 030f 	and.w	r3, r3, #15
 80047a0:	4a0c      	ldr	r2, [pc, #48]	; (80047d4 <SystemCoreClockUpdate+0xf4>)
 80047a2:	5cd3      	ldrb	r3, [r2, r3]
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80047a8:	4b07      	ldr	r3, [pc, #28]	; (80047c8 <SystemCoreClockUpdate+0xe8>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	fa22 f303 	lsr.w	r3, r2, r3
 80047b2:	4a05      	ldr	r2, [pc, #20]	; (80047c8 <SystemCoreClockUpdate+0xe8>)
 80047b4:	6013      	str	r3, [r2, #0]
}
 80047b6:	bf00      	nop
 80047b8:	371c      	adds	r7, #28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40023800 	.word	0x40023800
 80047c8:	20000008 	.word	0x20000008
 80047cc:	00f42400 	.word	0x00f42400
 80047d0:	017d7840 	.word	0x017d7840
 80047d4:	2000000c 	.word	0x2000000c

080047d8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80047de:	2300      	movs	r3, #0
 80047e0:	607b      	str	r3, [r7, #4]
 80047e2:	2300      	movs	r3, #0
 80047e4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80047e6:	4a36      	ldr	r2, [pc, #216]	; (80048c0 <SetSysClock+0xe8>)
 80047e8:	4b35      	ldr	r3, [pc, #212]	; (80048c0 <SetSysClock+0xe8>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80047f2:	4b33      	ldr	r3, [pc, #204]	; (80048c0 <SetSysClock+0xe8>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fa:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3301      	adds	r3, #1
 8004800:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d103      	bne.n	8004810 <SetSysClock+0x38>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800480e:	d1f0      	bne.n	80047f2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004810:	4b2b      	ldr	r3, [pc, #172]	; (80048c0 <SetSysClock+0xe8>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800481c:	2301      	movs	r3, #1
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	e001      	b.n	8004826 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8004822:	2300      	movs	r3, #0
 8004824:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d142      	bne.n	80048b2 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800482c:	4a24      	ldr	r2, [pc, #144]	; (80048c0 <SetSysClock+0xe8>)
 800482e:	4b24      	ldr	r3, [pc, #144]	; (80048c0 <SetSysClock+0xe8>)
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004836:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8004838:	4a22      	ldr	r2, [pc, #136]	; (80048c4 <SetSysClock+0xec>)
 800483a:	4b22      	ldr	r3, [pc, #136]	; (80048c4 <SetSysClock+0xec>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004842:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8004844:	4a1e      	ldr	r2, [pc, #120]	; (80048c0 <SetSysClock+0xe8>)
 8004846:	4b1e      	ldr	r3, [pc, #120]	; (80048c0 <SetSysClock+0xe8>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800484c:	4a1c      	ldr	r2, [pc, #112]	; (80048c0 <SetSysClock+0xe8>)
 800484e:	4b1c      	ldr	r3, [pc, #112]	; (80048c0 <SetSysClock+0xe8>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004856:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004858:	4a19      	ldr	r2, [pc, #100]	; (80048c0 <SetSysClock+0xe8>)
 800485a:	4b19      	ldr	r3, [pc, #100]	; (80048c0 <SetSysClock+0xe8>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8004862:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8004864:	4b16      	ldr	r3, [pc, #88]	; (80048c0 <SetSysClock+0xe8>)
 8004866:	4a18      	ldr	r2, [pc, #96]	; (80048c8 <SetSysClock+0xf0>)
 8004868:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800486a:	4a15      	ldr	r2, [pc, #84]	; (80048c0 <SetSysClock+0xe8>)
 800486c:	4b14      	ldr	r3, [pc, #80]	; (80048c0 <SetSysClock+0xe8>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004874:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8004876:	bf00      	nop
 8004878:	4b11      	ldr	r3, [pc, #68]	; (80048c0 <SetSysClock+0xe8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0f9      	beq.n	8004878 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8004884:	4b11      	ldr	r3, [pc, #68]	; (80048cc <SetSysClock+0xf4>)
 8004886:	f240 7205 	movw	r2, #1797	; 0x705
 800488a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800488c:	4a0c      	ldr	r2, [pc, #48]	; (80048c0 <SetSysClock+0xe8>)
 800488e:	4b0c      	ldr	r3, [pc, #48]	; (80048c0 <SetSysClock+0xe8>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f023 0303 	bic.w	r3, r3, #3
 8004896:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004898:	4a09      	ldr	r2, [pc, #36]	; (80048c0 <SetSysClock+0xe8>)
 800489a:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <SetSysClock+0xe8>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f043 0302 	orr.w	r3, r3, #2
 80048a2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80048a4:	bf00      	nop
 80048a6:	4b06      	ldr	r3, [pc, #24]	; (80048c0 <SetSysClock+0xe8>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 030c 	and.w	r3, r3, #12
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d1f9      	bne.n	80048a6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40023800 	.word	0x40023800
 80048c4:	40007000 	.word	0x40007000
 80048c8:	07405419 	.word	0x07405419
 80048cc:	40023c00 	.word	0x40023c00

080048d0 <__libc_init_array>:
 80048d0:	b570      	push	{r4, r5, r6, lr}
 80048d2:	4e0d      	ldr	r6, [pc, #52]	; (8004908 <__libc_init_array+0x38>)
 80048d4:	4c0d      	ldr	r4, [pc, #52]	; (800490c <__libc_init_array+0x3c>)
 80048d6:	1ba4      	subs	r4, r4, r6
 80048d8:	10a4      	asrs	r4, r4, #2
 80048da:	2500      	movs	r5, #0
 80048dc:	42a5      	cmp	r5, r4
 80048de:	d109      	bne.n	80048f4 <__libc_init_array+0x24>
 80048e0:	4e0b      	ldr	r6, [pc, #44]	; (8004910 <__libc_init_array+0x40>)
 80048e2:	4c0c      	ldr	r4, [pc, #48]	; (8004914 <__libc_init_array+0x44>)
 80048e4:	f000 f83a 	bl	800495c <_init>
 80048e8:	1ba4      	subs	r4, r4, r6
 80048ea:	10a4      	asrs	r4, r4, #2
 80048ec:	2500      	movs	r5, #0
 80048ee:	42a5      	cmp	r5, r4
 80048f0:	d105      	bne.n	80048fe <__libc_init_array+0x2e>
 80048f2:	bd70      	pop	{r4, r5, r6, pc}
 80048f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048f8:	4798      	blx	r3
 80048fa:	3501      	adds	r5, #1
 80048fc:	e7ee      	b.n	80048dc <__libc_init_array+0xc>
 80048fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004902:	4798      	blx	r3
 8004904:	3501      	adds	r5, #1
 8004906:	e7f2      	b.n	80048ee <__libc_init_array+0x1e>
 8004908:	08004a74 	.word	0x08004a74
 800490c:	08004a74 	.word	0x08004a74
 8004910:	08004a74 	.word	0x08004a74
 8004914:	08004a78 	.word	0x08004a78

08004918 <memcmp>:
 8004918:	b510      	push	{r4, lr}
 800491a:	3901      	subs	r1, #1
 800491c:	4402      	add	r2, r0
 800491e:	4290      	cmp	r0, r2
 8004920:	d101      	bne.n	8004926 <memcmp+0xe>
 8004922:	2000      	movs	r0, #0
 8004924:	bd10      	pop	{r4, pc}
 8004926:	f810 3b01 	ldrb.w	r3, [r0], #1
 800492a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800492e:	42a3      	cmp	r3, r4
 8004930:	d0f5      	beq.n	800491e <memcmp+0x6>
 8004932:	1b18      	subs	r0, r3, r4
 8004934:	bd10      	pop	{r4, pc}

08004936 <memcpy>:
 8004936:	b510      	push	{r4, lr}
 8004938:	1e43      	subs	r3, r0, #1
 800493a:	440a      	add	r2, r1
 800493c:	4291      	cmp	r1, r2
 800493e:	d100      	bne.n	8004942 <memcpy+0xc>
 8004940:	bd10      	pop	{r4, pc}
 8004942:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004946:	f803 4f01 	strb.w	r4, [r3, #1]!
 800494a:	e7f7      	b.n	800493c <memcpy+0x6>

0800494c <memset>:
 800494c:	4402      	add	r2, r0
 800494e:	4603      	mov	r3, r0
 8004950:	4293      	cmp	r3, r2
 8004952:	d100      	bne.n	8004956 <memset+0xa>
 8004954:	4770      	bx	lr
 8004956:	f803 1b01 	strb.w	r1, [r3], #1
 800495a:	e7f9      	b.n	8004950 <memset+0x4>

0800495c <_init>:
 800495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495e:	bf00      	nop
 8004960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004962:	bc08      	pop	{r3}
 8004964:	469e      	mov	lr, r3
 8004966:	4770      	bx	lr

08004968 <_fini>:
 8004968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496a:	bf00      	nop
 800496c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800496e:	bc08      	pop	{r3}
 8004970:	469e      	mov	lr, r3
 8004972:	4770      	bx	lr
