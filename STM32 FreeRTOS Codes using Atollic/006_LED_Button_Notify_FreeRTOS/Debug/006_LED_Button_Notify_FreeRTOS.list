
006_LED_Button_Notify_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002e1c  08002e1c  00012e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002e50  08002e50  00012e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002e54  08002e54  00012e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  08002e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
  7 .bss          00012dcc  2000001c  2000001c  0002001c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20012de8  20012de8  0002001c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000a5c0  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001717  00000000  00000000  0002a60c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000820  00000000  00000000  0002bd28  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000768  00000000  00000000  0002c548  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000041b5  00000000  00000000  0002ccb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003110  00000000  00000000  00030e65  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00033f75  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002128  00000000  00000000  00033ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0003611c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002e04 	.word	0x08002e04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08002e04 	.word	0x08002e04

080001d0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b087      	sub	sp, #28
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
 80001d8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80001da:	2300      	movs	r3, #0
 80001dc:	617b      	str	r3, [r7, #20]
 80001de:	2300      	movs	r3, #0
 80001e0:	613b      	str	r3, [r7, #16]
 80001e2:	2300      	movs	r3, #0
 80001e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001e6:	2300      	movs	r3, #0
 80001e8:	617b      	str	r3, [r7, #20]
 80001ea:	e076      	b.n	80002da <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80001ec:	2201      	movs	r2, #1
 80001ee:	697b      	ldr	r3, [r7, #20]
 80001f0:	fa02 f303 	lsl.w	r3, r2, r3
 80001f4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	681a      	ldr	r2, [r3, #0]
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	4013      	ands	r3, r2
 80001fe:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000200:	68fa      	ldr	r2, [r7, #12]
 8000202:	693b      	ldr	r3, [r7, #16]
 8000204:	429a      	cmp	r2, r3
 8000206:	d165      	bne.n	80002d4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	681a      	ldr	r2, [r3, #0]
 800020c:	697b      	ldr	r3, [r7, #20]
 800020e:	005b      	lsls	r3, r3, #1
 8000210:	2103      	movs	r1, #3
 8000212:	fa01 f303 	lsl.w	r3, r1, r3
 8000216:	43db      	mvns	r3, r3
 8000218:	401a      	ands	r2, r3
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	681a      	ldr	r2, [r3, #0]
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	791b      	ldrb	r3, [r3, #4]
 8000226:	4619      	mov	r1, r3
 8000228:	697b      	ldr	r3, [r7, #20]
 800022a:	005b      	lsls	r3, r3, #1
 800022c:	fa01 f303 	lsl.w	r3, r1, r3
 8000230:	431a      	orrs	r2, r3
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	791b      	ldrb	r3, [r3, #4]
 800023a:	2b01      	cmp	r3, #1
 800023c:	d003      	beq.n	8000246 <GPIO_Init+0x76>
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	791b      	ldrb	r3, [r3, #4]
 8000242:	2b02      	cmp	r3, #2
 8000244:	d12e      	bne.n	80002a4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	689a      	ldr	r2, [r3, #8]
 800024a:	697b      	ldr	r3, [r7, #20]
 800024c:	005b      	lsls	r3, r3, #1
 800024e:	2103      	movs	r1, #3
 8000250:	fa01 f303 	lsl.w	r3, r1, r3
 8000254:	43db      	mvns	r3, r3
 8000256:	401a      	ands	r2, r3
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	689a      	ldr	r2, [r3, #8]
 8000260:	683b      	ldr	r3, [r7, #0]
 8000262:	795b      	ldrb	r3, [r3, #5]
 8000264:	4619      	mov	r1, r3
 8000266:	697b      	ldr	r3, [r7, #20]
 8000268:	005b      	lsls	r3, r3, #1
 800026a:	fa01 f303 	lsl.w	r3, r1, r3
 800026e:	431a      	orrs	r2, r3
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	685a      	ldr	r2, [r3, #4]
 8000278:	697b      	ldr	r3, [r7, #20]
 800027a:	b29b      	uxth	r3, r3
 800027c:	4619      	mov	r1, r3
 800027e:	2301      	movs	r3, #1
 8000280:	408b      	lsls	r3, r1
 8000282:	43db      	mvns	r3, r3
 8000284:	401a      	ands	r2, r3
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	683a      	ldr	r2, [r7, #0]
 8000290:	7992      	ldrb	r2, [r2, #6]
 8000292:	4611      	mov	r1, r2
 8000294:	697a      	ldr	r2, [r7, #20]
 8000296:	b292      	uxth	r2, r2
 8000298:	fa01 f202 	lsl.w	r2, r1, r2
 800029c:	b292      	uxth	r2, r2
 800029e:	431a      	orrs	r2, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	68da      	ldr	r2, [r3, #12]
 80002a8:	697b      	ldr	r3, [r7, #20]
 80002aa:	b29b      	uxth	r3, r3
 80002ac:	005b      	lsls	r3, r3, #1
 80002ae:	2103      	movs	r1, #3
 80002b0:	fa01 f303 	lsl.w	r3, r1, r3
 80002b4:	43db      	mvns	r3, r3
 80002b6:	401a      	ands	r2, r3
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	68da      	ldr	r2, [r3, #12]
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	79db      	ldrb	r3, [r3, #7]
 80002c4:	4619      	mov	r1, r3
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	005b      	lsls	r3, r3, #1
 80002ca:	fa01 f303 	lsl.w	r3, r1, r3
 80002ce:	431a      	orrs	r2, r3
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002d4:	697b      	ldr	r3, [r7, #20]
 80002d6:	3301      	adds	r3, #1
 80002d8:	617b      	str	r3, [r7, #20]
 80002da:	697b      	ldr	r3, [r7, #20]
 80002dc:	2b0f      	cmp	r3, #15
 80002de:	d985      	bls.n	80001ec <GPIO_Init+0x1c>
    }
  }
}
 80002e0:	bf00      	nop
 80002e2:	371c      	adds	r7, #28
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr

080002ec <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	460b      	mov	r3, r1
 80002f6:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80002f8:	2300      	movs	r3, #0
 80002fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	691a      	ldr	r2, [r3, #16]
 8000300:	887b      	ldrh	r3, [r7, #2]
 8000302:	4013      	ands	r3, r2
 8000304:	2b00      	cmp	r3, #0
 8000306:	d002      	beq.n	800030e <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000308:	2301      	movs	r3, #1
 800030a:	73fb      	strb	r3, [r7, #15]
 800030c:	e001      	b.n	8000312 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800030e:	2300      	movs	r3, #0
 8000310:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000312:	7bfb      	ldrb	r3, [r7, #15]
}
 8000314:	4618      	mov	r0, r3
 8000316:	3714      	adds	r7, #20
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr

08000320 <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	460b      	mov	r3, r1
 800032a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	695a      	ldr	r2, [r3, #20]
 8000330:	887b      	ldrh	r3, [r7, #2]
 8000332:	405a      	eors	r2, r3
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	615a      	str	r2, [r3, #20]
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000348:	4a12      	ldr	r2, [pc, #72]	; (8000394 <RCC_DeInit+0x50>)
 800034a:	4b12      	ldr	r3, [pc, #72]	; (8000394 <RCC_DeInit+0x50>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f043 0301 	orr.w	r3, r3, #1
 8000352:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000354:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <RCC_DeInit+0x50>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 800035a:	4a0e      	ldr	r2, [pc, #56]	; (8000394 <RCC_DeInit+0x50>)
 800035c:	4b0d      	ldr	r3, [pc, #52]	; (8000394 <RCC_DeInit+0x50>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 8000364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000368:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800036a:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <RCC_DeInit+0x50>)
 800036c:	4a0a      	ldr	r2, [pc, #40]	; (8000398 <RCC_DeInit+0x54>)
 800036e:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000370:	4b08      	ldr	r3, [pc, #32]	; (8000394 <RCC_DeInit+0x50>)
 8000372:	4a0a      	ldr	r2, [pc, #40]	; (800039c <RCC_DeInit+0x58>)
 8000374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000378:	4a06      	ldr	r2, [pc, #24]	; (8000394 <RCC_DeInit+0x50>)
 800037a:	4b06      	ldr	r3, [pc, #24]	; (8000394 <RCC_DeInit+0x50>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000382:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000384:	4b03      	ldr	r3, [pc, #12]	; (8000394 <RCC_DeInit+0x50>)
 8000386:	2200      	movs	r2, #0
 8000388:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 800038a:	bf00      	nop
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr
 8000394:	40023800 	.word	0x40023800
 8000398:	24003010 	.word	0x24003010
 800039c:	20003000 	.word	0x20003000

080003a0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	460b      	mov	r3, r1
 80003aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80003ac:	78fb      	ldrb	r3, [r7, #3]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d006      	beq.n	80003c0 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80003b2:	490a      	ldr	r1, [pc, #40]	; (80003dc <RCC_AHB1PeriphClockCmd+0x3c>)
 80003b4:	4b09      	ldr	r3, [pc, #36]	; (80003dc <RCC_AHB1PeriphClockCmd+0x3c>)
 80003b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4313      	orrs	r3, r2
 80003bc:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80003be:	e006      	b.n	80003ce <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80003c0:	4906      	ldr	r1, [pc, #24]	; (80003dc <RCC_AHB1PeriphClockCmd+0x3c>)
 80003c2:	4b06      	ldr	r3, [pc, #24]	; (80003dc <RCC_AHB1PeriphClockCmd+0x3c>)
 80003c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	43db      	mvns	r3, r3
 80003ca:	4013      	ands	r3, r2
 80003cc:	630b      	str	r3, [r1, #48]	; 0x30
}
 80003ce:	bf00      	nop
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	40023800 	.word	0x40023800

080003e0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	f103 0208 	add.w	r2, r3, #8
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	f04f 32ff 	mov.w	r2, #4294967295
 80003f8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	f103 0208 	add.w	r2, r3, #8
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	f103 0208 	add.w	r2, r3, #8
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr

08000420 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2200      	movs	r2, #0
 800042c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800042e:	bf00      	nop
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr

0800043a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800043a:	b480      	push	{r7}
 800043c:	b085      	sub	sp, #20
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
 8000442:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000450:	d103      	bne.n	800045a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	691b      	ldr	r3, [r3, #16]
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	e00c      	b.n	8000474 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	3308      	adds	r3, #8
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	e002      	b.n	8000468 <vListInsert+0x2e>
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	681a      	ldr	r2, [r3, #0]
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	429a      	cmp	r2, r3
 8000472:	d9f6      	bls.n	8000462 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	685a      	ldr	r2, [r3, #4]
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	683a      	ldr	r2, [r7, #0]
 8000482:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	68fa      	ldr	r2, [r7, #12]
 8000488:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	683a      	ldr	r2, [r7, #0]
 800048e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	687a      	ldr	r2, [r7, #4]
 8000494:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	1c5a      	adds	r2, r3, #1
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	601a      	str	r2, [r3, #0]
}
 80004a0:	bf00      	nop
 80004a2:	3714      	adds	r7, #20
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr

080004ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	691b      	ldr	r3, [r3, #16]
 80004b8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	6892      	ldr	r2, [r2, #8]
 80004c2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	689b      	ldr	r3, [r3, #8]
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	6852      	ldr	r2, [r2, #4]
 80004cc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	685a      	ldr	r2, [r3, #4]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d103      	bne.n	80004e0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	689a      	ldr	r2, [r3, #8]
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2200      	movs	r2, #0
 80004e4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	1e5a      	subs	r2, r3, #1
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	681b      	ldr	r3, [r3, #0]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3714      	adds	r7, #20
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	3b04      	subs	r3, #4
 8000510:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000518:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	3b04      	subs	r3, #4
 800051e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	f023 0201 	bic.w	r2, r3, #1
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	3b04      	subs	r3, #4
 800052e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000530:	4a0c      	ldr	r2, [pc, #48]	; (8000564 <pxPortInitialiseStack+0x64>)
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	3b14      	subs	r3, #20
 800053a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	3b04      	subs	r3, #4
 8000546:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	f06f 0202 	mvn.w	r2, #2
 800054e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	3b20      	subs	r3, #32
 8000554:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000556:	68fb      	ldr	r3, [r7, #12]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	08000569 	.word	0x08000569

08000568 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8000572:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <prvTaskExitError+0x50>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800057a:	d009      	beq.n	8000590 <prvTaskExitError+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800057c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000580:	f383 8811 	msr	BASEPRI, r3
 8000584:	f3bf 8f6f 	isb	sy
 8000588:	f3bf 8f4f 	dsb	sy
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	e7fe      	b.n	800058e <prvTaskExitError+0x26>
 8000590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000594:	f383 8811 	msr	BASEPRI, r3
 8000598:	f3bf 8f6f 	isb	sy
 800059c:	f3bf 8f4f 	dsb	sy
 80005a0:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80005a2:	bf00      	nop
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d0fc      	beq.n	80005a4 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000000 	.word	0x20000000
 80005bc:	00000000 	.word	0x00000000

080005c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <pxCurrentTCBConst2>)
 80005c2:	6819      	ldr	r1, [r3, #0]
 80005c4:	6808      	ldr	r0, [r1, #0]
 80005c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005ca:	f380 8809 	msr	PSP, r0
 80005ce:	f3bf 8f6f 	isb	sy
 80005d2:	f04f 0000 	mov.w	r0, #0
 80005d6:	f380 8811 	msr	BASEPRI, r0
 80005da:	4770      	bx	lr
 80005dc:	f3af 8000 	nop.w

080005e0 <pxCurrentTCBConst2>:
 80005e0:	20012c5c 	.word	0x20012c5c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop

080005e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80005e8:	4808      	ldr	r0, [pc, #32]	; (800060c <prvPortStartFirstTask+0x24>)
 80005ea:	6800      	ldr	r0, [r0, #0]
 80005ec:	6800      	ldr	r0, [r0, #0]
 80005ee:	f380 8808 	msr	MSP, r0
 80005f2:	f04f 0000 	mov.w	r0, #0
 80005f6:	f380 8814 	msr	CONTROL, r0
 80005fa:	b662      	cpsie	i
 80005fc:	b661      	cpsie	f
 80005fe:	f3bf 8f4f 	dsb	sy
 8000602:	f3bf 8f6f 	isb	sy
 8000606:	df00      	svc	0
 8000608:	bf00      	nop
 800060a:	0000      	.short	0x0000
 800060c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000610:	bf00      	nop
 8000612:	bf00      	nop

08000614 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800061a:	4b44      	ldr	r3, [pc, #272]	; (800072c <xPortStartScheduler+0x118>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a44      	ldr	r2, [pc, #272]	; (8000730 <xPortStartScheduler+0x11c>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d109      	bne.n	8000638 <xPortStartScheduler+0x24>
 8000624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000628:	f383 8811 	msr	BASEPRI, r3
 800062c:	f3bf 8f6f 	isb	sy
 8000630:	f3bf 8f4f 	dsb	sy
 8000634:	613b      	str	r3, [r7, #16]
 8000636:	e7fe      	b.n	8000636 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000638:	4b3c      	ldr	r3, [pc, #240]	; (800072c <xPortStartScheduler+0x118>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a3d      	ldr	r2, [pc, #244]	; (8000734 <xPortStartScheduler+0x120>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d109      	bne.n	8000656 <xPortStartScheduler+0x42>
 8000642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000646:	f383 8811 	msr	BASEPRI, r3
 800064a:	f3bf 8f6f 	isb	sy
 800064e:	f3bf 8f4f 	dsb	sy
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	e7fe      	b.n	8000654 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000656:	4b38      	ldr	r3, [pc, #224]	; (8000738 <xPortStartScheduler+0x124>)
 8000658:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	22ff      	movs	r2, #255	; 0xff
 8000666:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000670:	78fb      	ldrb	r3, [r7, #3]
 8000672:	b2db      	uxtb	r3, r3
 8000674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b30      	ldr	r3, [pc, #192]	; (800073c <xPortStartScheduler+0x128>)
 800067c:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800067e:	4b30      	ldr	r3, [pc, #192]	; (8000740 <xPortStartScheduler+0x12c>)
 8000680:	2207      	movs	r2, #7
 8000682:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000684:	e009      	b.n	800069a <xPortStartScheduler+0x86>
        {
            ulMaxPRIGROUPValue--;
 8000686:	4b2e      	ldr	r3, [pc, #184]	; (8000740 <xPortStartScheduler+0x12c>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	3b01      	subs	r3, #1
 800068c:	4a2c      	ldr	r2, [pc, #176]	; (8000740 <xPortStartScheduler+0x12c>)
 800068e:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000690:	78fb      	ldrb	r3, [r7, #3]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	b2db      	uxtb	r3, r3
 8000698:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800069a:	78fb      	ldrb	r3, [r7, #3]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a2:	2b80      	cmp	r3, #128	; 0x80
 80006a4:	d0ef      	beq.n	8000686 <xPortStartScheduler+0x72>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80006a6:	4b26      	ldr	r3, [pc, #152]	; (8000740 <xPortStartScheduler+0x12c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f1c3 0307 	rsb	r3, r3, #7
 80006ae:	2b04      	cmp	r3, #4
 80006b0:	d009      	beq.n	80006c6 <xPortStartScheduler+0xb2>
 80006b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006b6:	f383 8811 	msr	BASEPRI, r3
 80006ba:	f3bf 8f6f 	isb	sy
 80006be:	f3bf 8f4f 	dsb	sy
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	e7fe      	b.n	80006c4 <xPortStartScheduler+0xb0>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80006c6:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <xPortStartScheduler+0x12c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	021b      	lsls	r3, r3, #8
 80006cc:	4a1c      	ldr	r2, [pc, #112]	; (8000740 <xPortStartScheduler+0x12c>)
 80006ce:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <xPortStartScheduler+0x12c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80006d8:	4a19      	ldr	r2, [pc, #100]	; (8000740 <xPortStartScheduler+0x12c>)
 80006da:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80006e4:	4a17      	ldr	r2, [pc, #92]	; (8000744 <xPortStartScheduler+0x130>)
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <xPortStartScheduler+0x130>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006ee:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80006f0:	4a14      	ldr	r2, [pc, #80]	; (8000744 <xPortStartScheduler+0x130>)
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <xPortStartScheduler+0x130>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80006fa:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80006fc:	f000 f8d4 	bl	80008a8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <xPortStartScheduler+0x134>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8000706:	f000 f8f3 	bl	80008f0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800070a:	4a10      	ldr	r2, [pc, #64]	; (800074c <xPortStartScheduler+0x138>)
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <xPortStartScheduler+0x138>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000714:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000716:	f7ff ff67 	bl	80005e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800071a:	f001 f983 	bl	8001a24 <vTaskSwitchContext>
    prvTaskExitError();
 800071e:	f7ff ff23 	bl	8000568 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8000722:	2300      	movs	r3, #0
}
 8000724:	4618      	mov	r0, r3
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	e000ed00 	.word	0xe000ed00
 8000730:	410fc271 	.word	0x410fc271
 8000734:	410fc270 	.word	0x410fc270
 8000738:	e000e400 	.word	0xe000e400
 800073c:	20000038 	.word	0x20000038
 8000740:	2000003c 	.word	0x2000003c
 8000744:	e000ed20 	.word	0xe000ed20
 8000748:	20000000 	.word	0x20000000
 800074c:	e000ef34 	.word	0xe000ef34

08000750 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800075a:	f383 8811 	msr	BASEPRI, r3
 800075e:	f3bf 8f6f 	isb	sy
 8000762:	f3bf 8f4f 	dsb	sy
 8000766:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000768:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <vPortEnterCritical+0x54>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	3301      	adds	r3, #1
 800076e:	4a0d      	ldr	r2, [pc, #52]	; (80007a4 <vPortEnterCritical+0x54>)
 8000770:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <vPortEnterCritical+0x54>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d10e      	bne.n	8000798 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <vPortEnterCritical+0x58>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b00      	cmp	r3, #0
 8000782:	d009      	beq.n	8000798 <vPortEnterCritical+0x48>
 8000784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000788:	f383 8811 	msr	BASEPRI, r3
 800078c:	f3bf 8f6f 	isb	sy
 8000790:	f3bf 8f4f 	dsb	sy
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	e7fe      	b.n	8000796 <vPortEnterCritical+0x46>
    }
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	20000000 	.word	0x20000000
 80007a8:	e000ed04 	.word	0xe000ed04

080007ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <vPortExitCritical+0x4c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d109      	bne.n	80007ce <vPortExitCritical+0x22>
 80007ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007be:	f383 8811 	msr	BASEPRI, r3
 80007c2:	f3bf 8f6f 	isb	sy
 80007c6:	f3bf 8f4f 	dsb	sy
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	e7fe      	b.n	80007cc <vPortExitCritical+0x20>
    uxCriticalNesting--;
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <vPortExitCritical+0x4c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	3b01      	subs	r3, #1
 80007d4:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <vPortExitCritical+0x4c>)
 80007d6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <vPortExitCritical+0x4c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d104      	bne.n	80007ea <vPortExitCritical+0x3e>
 80007e0:	2300      	movs	r3, #0
 80007e2:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	20000000 	.word	0x20000000
 80007fc:	00000000 	.word	0x00000000

08000800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000800:	f3ef 8009 	mrs	r0, PSP
 8000804:	f3bf 8f6f 	isb	sy
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <pxCurrentTCBConst>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	f01e 0f10 	tst.w	lr, #16
 8000810:	bf08      	it	eq
 8000812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800081a:	6010      	str	r0, [r2, #0]
 800081c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000820:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000824:	f380 8811 	msr	BASEPRI, r0
 8000828:	f3bf 8f4f 	dsb	sy
 800082c:	f3bf 8f6f 	isb	sy
 8000830:	f001 f8f8 	bl	8001a24 <vTaskSwitchContext>
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	f380 8811 	msr	BASEPRI, r0
 800083c:	bc09      	pop	{r0, r3}
 800083e:	6819      	ldr	r1, [r3, #0]
 8000840:	6808      	ldr	r0, [r1, #0]
 8000842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000846:	f01e 0f10 	tst.w	lr, #16
 800084a:	bf08      	it	eq
 800084c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000850:	f380 8809 	msr	PSP, r0
 8000854:	f3bf 8f6f 	isb	sy
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	f3af 8000 	nop.w

08000860 <pxCurrentTCBConst>:
 8000860:	20012c5c 	.word	0x20012c5c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000864:	bf00      	nop
 8000866:	bf00      	nop

08000868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
        __asm volatile
 800086e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000872:	f383 8811 	msr	BASEPRI, r3
 8000876:	f3bf 8f6f 	isb	sy
 800087a:	f3bf 8f4f 	dsb	sy
 800087e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000880:	f000 ffba 	bl	80017f8 <xTaskIncrementTick>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d003      	beq.n	8000892 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <SysTick_Handler+0x3c>)
 800088c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	e000ed04 	.word	0xe000ed04

080008a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80008ac:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <vPortSetupTimerInterrupt+0x34>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <vPortSetupTimerInterrupt+0x38>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80008b8:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <vPortSetupTimerInterrupt+0x3c>)
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <vPortSetupTimerInterrupt+0x40>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	490b      	ldr	r1, [pc, #44]	; (80008ec <vPortSetupTimerInterrupt+0x44>)
 80008c0:	fba1 1303 	umull	r1, r3, r1, r3
 80008c4:	099b      	lsrs	r3, r3, #6
 80008c6:	3b01      	subs	r3, #1
 80008c8:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80008ca:	4b04      	ldr	r3, [pc, #16]	; (80008dc <vPortSetupTimerInterrupt+0x34>)
 80008cc:	2207      	movs	r2, #7
 80008ce:	601a      	str	r2, [r3, #0]
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	e000e010 	.word	0xe000e010
 80008e0:	e000e018 	.word	0xe000e018
 80008e4:	e000e014 	.word	0xe000e014
 80008e8:	20000008 	.word	0x20000008
 80008ec:	10624dd3 	.word	0x10624dd3

080008f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80008f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000900 <vPortEnableVFP+0x10>
 80008f4:	6801      	ldr	r1, [r0, #0]
 80008f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008fa:	6001      	str	r1, [r0, #0]
 80008fc:	4770      	bx	lr
 80008fe:	0000      	.short	0x0000
 8000900:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8000904:	bf00      	nop
 8000906:	bf00      	nop

08000908 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8000914:	f000 fe58 	bl	80015c8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8000918:	4b52      	ldr	r3, [pc, #328]	; (8000a64 <pvPortMalloc+0x15c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d101      	bne.n	8000924 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8000920:	f000 f900 	bl	8000b24 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d012      	beq.n	8000950 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800092a:	2208      	movs	r2, #8
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f003 0307 	and.w	r3, r3, #7
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	3308      	adds	r3, #8
 8000936:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	43da      	mvns	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	429a      	cmp	r2, r3
 8000940:	d304      	bcc.n	800094c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	4413      	add	r3, r2
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	e001      	b.n	8000950 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b00      	cmp	r3, #0
 8000954:	db6f      	blt.n	8000a36 <pvPortMalloc+0x12e>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d06c      	beq.n	8000a36 <pvPortMalloc+0x12e>
 800095c:	4b42      	ldr	r3, [pc, #264]	; (8000a68 <pvPortMalloc+0x160>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	429a      	cmp	r2, r3
 8000964:	d867      	bhi.n	8000a36 <pvPortMalloc+0x12e>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8000966:	4b41      	ldr	r3, [pc, #260]	; (8000a6c <pvPortMalloc+0x164>)
 8000968:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800096a:	4b40      	ldr	r3, [pc, #256]	; (8000a6c <pvPortMalloc+0x164>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000970:	e004      	b.n	800097c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8000972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000974:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8000976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800097c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097e:	685a      	ldr	r2, [r3, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	429a      	cmp	r2, r3
 8000984:	d203      	bcs.n	800098e <pvPortMalloc+0x86>
 8000986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d1f1      	bne.n	8000972 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800098e:	4b35      	ldr	r3, [pc, #212]	; (8000a64 <pvPortMalloc+0x15c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000994:	429a      	cmp	r2, r3
 8000996:	d04e      	beq.n	8000a36 <pvPortMalloc+0x12e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000998:	6a3b      	ldr	r3, [r7, #32]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2208      	movs	r2, #8
 800099e:	4413      	add	r3, r2
 80009a0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	6a3b      	ldr	r3, [r7, #32]
 80009a8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80009aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ac:	685a      	ldr	r2, [r3, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	1ad2      	subs	r2, r2, r3
 80009b2:	2308      	movs	r3, #8
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d91e      	bls.n	80009f8 <pvPortMalloc+0xf0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80009ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4413      	add	r3, r2
 80009c0:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	f003 0307 	and.w	r3, r3, #7
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d009      	beq.n	80009e0 <pvPortMalloc+0xd8>
        __asm volatile
 80009cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009d0:	f383 8811 	msr	BASEPRI, r3
 80009d4:	f3bf 8f6f 	isb	sy
 80009d8:	f3bf 8f4f 	dsb	sy
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	e7fe      	b.n	80009de <pvPortMalloc+0xd6>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80009e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e2:	685a      	ldr	r2, [r3, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	1ad2      	subs	r2, r2, r3
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80009ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80009f2:	6978      	ldr	r0, [r7, #20]
 80009f4:	f000 f8f2 	bl	8000bdc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <pvPortMalloc+0x160>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	4a19      	ldr	r2, [pc, #100]	; (8000a68 <pvPortMalloc+0x160>)
 8000a04:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <pvPortMalloc+0x160>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <pvPortMalloc+0x168>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d203      	bcs.n	8000a1a <pvPortMalloc+0x112>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <pvPortMalloc+0x160>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a16      	ldr	r2, [pc, #88]	; (8000a70 <pvPortMalloc+0x168>)
 8000a18:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8000a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a24:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8000a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <pvPortMalloc+0x16c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	3301      	adds	r3, #1
 8000a32:	4a10      	ldr	r2, [pc, #64]	; (8000a74 <pvPortMalloc+0x16c>)
 8000a34:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8000a36:	f000 fdd5 	bl	80015e4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	f003 0307 	and.w	r3, r3, #7
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d009      	beq.n	8000a58 <pvPortMalloc+0x150>
 8000a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a48:	f383 8811 	msr	BASEPRI, r3
 8000a4c:	f3bf 8f6f 	isb	sy
 8000a50:	f3bf 8f4f 	dsb	sy
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	e7fe      	b.n	8000a56 <pvPortMalloc+0x14e>
    return pvReturn;
 8000a58:	69fb      	ldr	r3, [r7, #28]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3728      	adds	r7, #40	; 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20012c48 	.word	0x20012c48
 8000a68:	20012c4c 	.word	0x20012c4c
 8000a6c:	20012c40 	.word	0x20012c40
 8000a70:	20012c50 	.word	0x20012c50
 8000a74:	20012c54 	.word	0x20012c54

08000a78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d043      	beq.n	8000b12 <vPortFree+0x9a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8000a8a:	2308      	movs	r3, #8
 8000a8c:	425b      	negs	r3, r3
 8000a8e:	697a      	ldr	r2, [r7, #20]
 8000a90:	4413      	add	r3, r2
 8000a92:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	db09      	blt.n	8000ab4 <vPortFree+0x3c>
 8000aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aa4:	f383 8811 	msr	BASEPRI, r3
 8000aa8:	f3bf 8f6f 	isb	sy
 8000aac:	f3bf 8f4f 	dsb	sy
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	e7fe      	b.n	8000ab2 <vPortFree+0x3a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d009      	beq.n	8000ad0 <vPortFree+0x58>
 8000abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ac0:	f383 8811 	msr	BASEPRI, r3
 8000ac4:	f3bf 8f6f 	isb	sy
 8000ac8:	f3bf 8f4f 	dsb	sy
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	e7fe      	b.n	8000ace <vPortFree+0x56>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	da1c      	bge.n	8000b12 <vPortFree+0x9a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d118      	bne.n	8000b12 <vPortFree+0x9a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8000aec:	f000 fd6c 	bl	80015c8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <vPortFree+0xa4>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4413      	add	r3, r2
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <vPortFree+0xa4>)
 8000afc:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000afe:	6938      	ldr	r0, [r7, #16]
 8000b00:	f000 f86c 	bl	8000bdc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <vPortFree+0xa8>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	4a05      	ldr	r2, [pc, #20]	; (8000b20 <vPortFree+0xa8>)
 8000b0c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8000b0e:	f000 fd69 	bl	80015e4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8000b12:	bf00      	nop
 8000b14:	3718      	adds	r7, #24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20012c4c 	.word	0x20012c4c
 8000b20:	20012c58 	.word	0x20012c58

08000b24 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000b2a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000b2e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8000b30:	4b25      	ldr	r3, [pc, #148]	; (8000bc8 <prvHeapInit+0xa4>)
 8000b32:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d00c      	beq.n	8000b58 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	3307      	adds	r3, #7
 8000b42:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f023 0307 	bic.w	r3, r3, #7
 8000b4a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8000b4c:	68ba      	ldr	r2, [r7, #8]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	4a1d      	ldr	r2, [pc, #116]	; (8000bc8 <prvHeapInit+0xa4>)
 8000b54:	4413      	add	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000b5c:	4a1b      	ldr	r2, [pc, #108]	; (8000bcc <prvHeapInit+0xa8>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <prvHeapInit+0xa8>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8000b70:	2208      	movs	r2, #8
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	1a9b      	subs	r3, r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f023 0307 	bic.w	r3, r3, #7
 8000b7e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4a13      	ldr	r2, [pc, #76]	; (8000bd0 <prvHeapInit+0xac>)
 8000b84:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <prvHeapInit+0xac>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <prvHeapInit+0xac>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	1ad2      	subs	r2, r2, r3
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <prvHeapInit+0xac>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <prvHeapInit+0xb0>)
 8000bb2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	4a07      	ldr	r2, [pc, #28]	; (8000bd8 <prvHeapInit+0xb4>)
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	20000040 	.word	0x20000040
 8000bcc:	20012c40 	.word	0x20012c40
 8000bd0:	20012c48 	.word	0x20012c48
 8000bd4:	20012c50 	.word	0x20012c50
 8000bd8:	20012c4c 	.word	0x20012c4c

08000bdc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000be4:	4b28      	ldr	r3, [pc, #160]	; (8000c88 <prvInsertBlockIntoFreeList+0xac>)
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	e002      	b.n	8000bf0 <prvInsertBlockIntoFreeList+0x14>
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d3f7      	bcc.n	8000bea <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	441a      	add	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d108      	bne.n	8000c1e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	685a      	ldr	r2, [r3, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	441a      	add	r2, r3
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	441a      	add	r2, r3
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d118      	bne.n	8000c64 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <prvInsertBlockIntoFreeList+0xb0>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d00d      	beq.n	8000c5a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685a      	ldr	r2, [r3, #4]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	441a      	add	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	e008      	b.n	8000c6c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <prvInsertBlockIntoFreeList+0xb0>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	e003      	b.n	8000c6c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d002      	beq.n	8000c7a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000c7a:	bf00      	nop
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20012c40 	.word	0x20012c40
 8000c8c:	20012c48 	.word	0x20012c48

08000c90 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d109      	bne.n	8000cbc <xQueueGenericReset+0x2c>
 8000ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cac:	f383 8811 	msr	BASEPRI, r3
 8000cb0:	f3bf 8f6f 	isb	sy
 8000cb4:	f3bf 8f4f 	dsb	sy
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	e7fe      	b.n	8000cba <xQueueGenericReset+0x2a>

    if( ( pxQueue != NULL ) &&
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d05a      	beq.n	8000d78 <xQueueGenericReset+0xe8>
        ( pxQueue->uxLength >= 1U ) &&
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d056      	beq.n	8000d78 <xQueueGenericReset+0xe8>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cce:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd2:	fbb2 f2f3 	udiv	r2, r2, r3
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        ( pxQueue->uxLength >= 1U ) &&
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d34c      	bcc.n	8000d78 <xQueueGenericReset+0xe8>
    {
        taskENTER_CRITICAL();
 8000cde:	f7ff fd37 	bl	8000750 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cea:	6939      	ldr	r1, [r7, #16]
 8000cec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000cee:	fb01 f303 	mul.w	r3, r1, r3
 8000cf2:	441a      	add	r2, r3
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	6939      	ldr	r1, [r7, #16]
 8000d12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000d14:	fb01 f303 	mul.w	r3, r1, r3
 8000d18:	441a      	add	r2, r3
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	22ff      	movs	r2, #255	; 0xff
 8000d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	22ff      	movs	r2, #255	; 0xff
 8000d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d114      	bne.n	8000d5e <xQueueGenericReset+0xce>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	691b      	ldr	r3, [r3, #16]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d01a      	beq.n	8000d72 <xQueueGenericReset+0xe2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	3310      	adds	r3, #16
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 ff31 	bl	8001ba8 <xTaskRemoveFromEventList>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d012      	beq.n	8000d72 <xQueueGenericReset+0xe2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <xQueueGenericReset+0x110>)
 8000d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	f3bf 8f4f 	dsb	sy
 8000d58:	f3bf 8f6f 	isb	sy
 8000d5c:	e009      	b.n	8000d72 <xQueueGenericReset+0xe2>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	3310      	adds	r3, #16
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fb3c 	bl	80003e0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	3324      	adds	r3, #36	; 0x24
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fb37 	bl	80003e0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000d72:	f7ff fd1b 	bl	80007ac <vPortExitCritical>
 8000d76:	e001      	b.n	8000d7c <xQueueGenericReset+0xec>
    }
    else
    {
        xReturn = pdFAIL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d109      	bne.n	8000d96 <xQueueGenericReset+0x106>
 8000d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d86:	f383 8811 	msr	BASEPRI, r3
 8000d8a:	f3bf 8f6f 	isb	sy
 8000d8e:	f3bf 8f4f 	dsb	sy
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	e7fe      	b.n	8000d94 <xQueueGenericReset+0x104>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000d96:	697b      	ldr	r3, [r7, #20]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	e000ed04 	.word	0xe000ed04

08000da4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af02      	add	r7, sp, #8
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	4613      	mov	r3, r2
 8000db0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d02b      	beq.n	8000e14 <xQueueGenericCreate+0x70>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	fbb2 f2f3 	udiv	r2, r2, r3
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d323      	bcc.n	8000e14 <xQueueGenericCreate+0x70>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000dd4:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000dd8:	d81c      	bhi.n	8000e14 <xQueueGenericCreate+0x70>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	68ba      	ldr	r2, [r7, #8]
 8000dde:	fb02 f303 	mul.w	r3, r2, r3
 8000de2:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	3350      	adds	r3, #80	; 0x50
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fd8d 	bl	8000908 <pvPortMalloc>
 8000dee:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d01b      	beq.n	8000e2e <xQueueGenericCreate+0x8a>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	3350      	adds	r3, #80	; 0x50
 8000dfe:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000e00:	79fa      	ldrb	r2, [r7, #7]
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	4613      	mov	r3, r2
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	68b9      	ldr	r1, [r7, #8]
 8000e0c:	68f8      	ldr	r0, [r7, #12]
 8000e0e:	f000 f813 	bl	8000e38 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000e12:	e00c      	b.n	8000e2e <xQueueGenericCreate+0x8a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d109      	bne.n	8000e2e <xQueueGenericCreate+0x8a>
 8000e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e1e:	f383 8811 	msr	BASEPRI, r3
 8000e22:	f3bf 8f6f 	isb	sy
 8000e26:	f3bf 8f4f 	dsb	sy
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	e7fe      	b.n	8000e2c <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000e2e:	69fb      	ldr	r3, [r7, #28]
    }
 8000e30:	4618      	mov	r0, r3
 8000e32:	3720      	adds	r7, #32
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
 8000e44:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d103      	bne.n	8000e54 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	e002      	b.n	8000e5a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	68fa      	ldr	r2, [r7, #12]
 8000e5e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000e66:	2101      	movs	r1, #1
 8000e68:	69b8      	ldr	r0, [r7, #24]
 8000e6a:	f7ff ff11 	bl	8000c90 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	78fa      	ldrb	r2, [r7, #3]
 8000e72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08c      	sub	sp, #48	; 0x30
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d109      	bne.n	8000eae <xQueueReceive+0x2e>
 8000e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e9e:	f383 8811 	msr	BASEPRI, r3
 8000ea2:	f3bf 8f6f 	isb	sy
 8000ea6:	f3bf 8f4f 	dsb	sy
 8000eaa:	623b      	str	r3, [r7, #32]
 8000eac:	e7fe      	b.n	8000eac <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d103      	bne.n	8000ebc <xQueueReceive+0x3c>
 8000eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d101      	bne.n	8000ec0 <xQueueReceive+0x40>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e000      	b.n	8000ec2 <xQueueReceive+0x42>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d109      	bne.n	8000eda <xQueueReceive+0x5a>
 8000ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eca:	f383 8811 	msr	BASEPRI, r3
 8000ece:	f3bf 8f6f 	isb	sy
 8000ed2:	f3bf 8f4f 	dsb	sy
 8000ed6:	61fb      	str	r3, [r7, #28]
 8000ed8:	e7fe      	b.n	8000ed8 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000eda:	f001 f871 	bl	8001fc0 <xTaskGetSchedulerState>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d102      	bne.n	8000eea <xQueueReceive+0x6a>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d101      	bne.n	8000eee <xQueueReceive+0x6e>
 8000eea:	2301      	movs	r3, #1
 8000eec:	e000      	b.n	8000ef0 <xQueueReceive+0x70>
 8000eee:	2300      	movs	r3, #0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d109      	bne.n	8000f08 <xQueueReceive+0x88>
 8000ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ef8:	f383 8811 	msr	BASEPRI, r3
 8000efc:	f3bf 8f6f 	isb	sy
 8000f00:	f3bf 8f4f 	dsb	sy
 8000f04:	61bb      	str	r3, [r7, #24]
 8000f06:	e7fe      	b.n	8000f06 <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000f08:	f7ff fc22 	bl	8000750 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d01f      	beq.n	8000f58 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f1c:	f000 f88c 	bl	8001038 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f22:	1e5a      	subs	r2, r3, #1
 8000f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f26:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f2a:	691b      	ldr	r3, [r3, #16]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d00f      	beq.n	8000f50 <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f32:	3310      	adds	r3, #16
 8000f34:	4618      	mov	r0, r3
 8000f36:	f000 fe37 	bl	8001ba8 <xTaskRemoveFromEventList>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d007      	beq.n	8000f50 <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000f40:	4b3c      	ldr	r3, [pc, #240]	; (8001034 <xQueueReceive+0x1b4>)
 8000f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	f3bf 8f4f 	dsb	sy
 8000f4c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000f50:	f7ff fc2c 	bl	80007ac <vPortExitCritical>
                return pdPASS;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e069      	b.n	800102c <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d103      	bne.n	8000f66 <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000f5e:	f7ff fc25 	bl	80007ac <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e062      	b.n	800102c <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d106      	bne.n	8000f7a <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 feef 	bl	8001d54 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000f76:	2301      	movs	r3, #1
 8000f78:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000f7a:	f7ff fc17 	bl	80007ac <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000f7e:	f000 fb23 	bl	80015c8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000f82:	f7ff fbe5 	bl	8000750 <vPortEnterCritical>
 8000f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f8c:	b25b      	sxtb	r3, r3
 8000f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f92:	d103      	bne.n	8000f9c <xQueueReceive+0x11c>
 8000f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000fa2:	b25b      	sxtb	r3, r3
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa8:	d103      	bne.n	8000fb2 <xQueueReceive+0x132>
 8000faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000fb2:	f7ff fbfb 	bl	80007ac <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000fb6:	1d3a      	adds	r2, r7, #4
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 fede 	bl	8001d80 <xTaskCheckForTimeOut>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d123      	bne.n	8001012 <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000fca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000fcc:	f000 f8ac 	bl	8001128 <prvIsQueueEmpty>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d017      	beq.n	8001006 <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd8:	3324      	adds	r3, #36	; 0x24
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	4611      	mov	r1, r2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 fd7a 	bl	8001ad8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000fe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000fe6:	f000 f84d 	bl	8001084 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000fea:	f000 fafb 	bl	80015e4 <xTaskResumeAll>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d189      	bne.n	8000f08 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <xQueueReceive+0x1b4>)
 8000ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	f3bf 8f4f 	dsb	sy
 8001000:	f3bf 8f6f 	isb	sy
 8001004:	e780      	b.n	8000f08 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001008:	f000 f83c 	bl	8001084 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800100c:	f000 faea 	bl	80015e4 <xTaskResumeAll>
 8001010:	e77a      	b.n	8000f08 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001012:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001014:	f000 f836 	bl	8001084 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001018:	f000 fae4 	bl	80015e4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800101c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800101e:	f000 f883 	bl	8001128 <prvIsQueueEmpty>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	f43f af6f 	beq.w	8000f08 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800102a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800102c:	4618      	mov	r0, r3
 800102e:	3730      	adds	r7, #48	; 0x30
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	e000ed04 	.word	0xe000ed04

08001038 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	2b00      	cmp	r3, #0
 8001048:	d018      	beq.n	800107c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	68da      	ldr	r2, [r3, #12]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	441a      	add	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68da      	ldr	r2, [r3, #12]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	429a      	cmp	r2, r3
 8001062:	d303      	bcc.n	800106c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68d9      	ldr	r1, [r3, #12]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	461a      	mov	r2, r3
 8001076:	6838      	ldr	r0, [r7, #0]
 8001078:	f001 feb0 	bl	8002ddc <memcpy>
    }
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800108c:	f7ff fb60 	bl	8000750 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001096:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001098:	e011      	b.n	80010be <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d012      	beq.n	80010c8 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3324      	adds	r3, #36	; 0x24
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 fd7e 	bl	8001ba8 <xTaskRemoveFromEventList>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80010b2:	f000 fec9 	bl	8001e48 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	3b01      	subs	r3, #1
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80010be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	dce9      	bgt.n	800109a <prvUnlockQueue+0x16>
 80010c6:	e000      	b.n	80010ca <prvUnlockQueue+0x46>
                    break;
 80010c8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	22ff      	movs	r2, #255	; 0xff
 80010ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80010d2:	f7ff fb6b 	bl	80007ac <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80010d6:	f7ff fb3b 	bl	8000750 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010e0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80010e2:	e011      	b.n	8001108 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d012      	beq.n	8001112 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3310      	adds	r3, #16
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 fd59 	bl	8001ba8 <xTaskRemoveFromEventList>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80010fc:	f000 fea4 	bl	8001e48 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001100:	7bbb      	ldrb	r3, [r7, #14]
 8001102:	3b01      	subs	r3, #1
 8001104:	b2db      	uxtb	r3, r3
 8001106:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001108:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800110c:	2b00      	cmp	r3, #0
 800110e:	dce9      	bgt.n	80010e4 <prvUnlockQueue+0x60>
 8001110:	e000      	b.n	8001114 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001112:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	22ff      	movs	r2, #255	; 0xff
 8001118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800111c:	f7ff fb46 	bl	80007ac <vPortExitCritical>
}
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001130:	f7ff fb0e 	bl	8000750 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001138:	2b00      	cmp	r3, #0
 800113a:	d102      	bne.n	8001142 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800113c:	2301      	movs	r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	e001      	b.n	8001146 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001146:	f7ff fb31 	bl	80007ac <vPortExitCritical>

    return xReturn;
 800114a:	68fb      	ldr	r3, [r7, #12]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001154:	b480      	push	{r7}
 8001156:	b087      	sub	sp, #28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d109      	bne.n	800117c <vQueueAddToRegistry+0x28>
 8001168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800116c:	f383 8811 	msr	BASEPRI, r3
 8001170:	f3bf 8f6f 	isb	sy
 8001174:	f3bf 8f4f 	dsb	sy
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	e7fe      	b.n	800117a <vQueueAddToRegistry+0x26>

        if( pcQueueName != NULL )
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d024      	beq.n	80011cc <vQueueAddToRegistry+0x78>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
 8001186:	e01e      	b.n	80011c6 <vQueueAddToRegistry+0x72>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001188:	4a18      	ldr	r2, [pc, #96]	; (80011ec <vQueueAddToRegistry+0x98>)
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	4413      	add	r3, r2
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	429a      	cmp	r2, r3
 8001196:	d105      	bne.n	80011a4 <vQueueAddToRegistry+0x50>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	4a13      	ldr	r2, [pc, #76]	; (80011ec <vQueueAddToRegistry+0x98>)
 800119e:	4413      	add	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
                    break;
 80011a2:	e013      	b.n	80011cc <vQueueAddToRegistry+0x78>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10a      	bne.n	80011c0 <vQueueAddToRegistry+0x6c>
 80011aa:	4a10      	ldr	r2, [pc, #64]	; (80011ec <vQueueAddToRegistry+0x98>)
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d104      	bne.n	80011c0 <vQueueAddToRegistry+0x6c>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	4a0c      	ldr	r2, [pc, #48]	; (80011ec <vQueueAddToRegistry+0x98>)
 80011bc:	4413      	add	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	3301      	adds	r3, #1
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	2b07      	cmp	r3, #7
 80011ca:	d9dd      	bls.n	8001188 <vQueueAddToRegistry+0x34>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d005      	beq.n	80011de <vQueueAddToRegistry+0x8a>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80011de:	bf00      	nop
 80011e0:	371c      	adds	r7, #28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20012da8 	.word	0x20012da8

080011f0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001200:	f7ff faa6 	bl	8000750 <vPortEnterCritical>
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800120a:	b25b      	sxtb	r3, r3
 800120c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001210:	d103      	bne.n	800121a <vQueueWaitForMessageRestricted+0x2a>
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001220:	b25b      	sxtb	r3, r3
 8001222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001226:	d103      	bne.n	8001230 <vQueueWaitForMessageRestricted+0x40>
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001230:	f7ff fabc 	bl	80007ac <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001238:	2b00      	cmp	r3, #0
 800123a:	d106      	bne.n	800124a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	3324      	adds	r3, #36	; 0x24
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	68b9      	ldr	r1, [r7, #8]
 8001244:	4618      	mov	r0, r3
 8001246:	f000 fc6b 	bl	8001b20 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800124a:	6978      	ldr	r0, [r7, #20]
 800124c:	f7ff ff1a 	bl	8001084 <prvUnlockQueue>
    }
 8001250:	bf00      	nop
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001258:	b580      	push	{r7, lr}
 800125a:	b08c      	sub	sp, #48	; 0x30
 800125c:	af04      	add	r7, sp, #16
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	4613      	mov	r3, r2
 8001266:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fb4b 	bl	8000908 <pvPortMalloc>
 8001272:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d013      	beq.n	80012a2 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800127a:	2058      	movs	r0, #88	; 0x58
 800127c:	f7ff fb44 	bl	8000908 <pvPortMalloc>
 8001280:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d008      	beq.n	800129a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001288:	2258      	movs	r2, #88	; 0x58
 800128a:	2100      	movs	r1, #0
 800128c:	69f8      	ldr	r0, [r7, #28]
 800128e:	f001 fdb0 	bl	8002df2 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	697a      	ldr	r2, [r7, #20]
 8001296:	631a      	str	r2, [r3, #48]	; 0x30
 8001298:	e005      	b.n	80012a6 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800129a:	6978      	ldr	r0, [r7, #20]
 800129c:	f7ff fbec 	bl	8000a78 <vPortFree>
 80012a0:	e001      	b.n	80012a6 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d013      	beq.n	80012d4 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80012ac:	88fa      	ldrh	r2, [r7, #6]
 80012ae:	2300      	movs	r3, #0
 80012b0:	9303      	str	r3, [sp, #12]
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	9302      	str	r3, [sp, #8]
 80012b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	68b9      	ldr	r1, [r7, #8]
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	f000 f80e 	bl	80012e4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80012c8:	69f8      	ldr	r0, [r7, #28]
 80012ca:	f000 f897 	bl	80013fc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80012ce:	2301      	movs	r3, #1
 80012d0:	61bb      	str	r3, [r7, #24]
 80012d2:	e002      	b.n	80012da <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295
 80012d8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80012da:	69bb      	ldr	r3, [r7, #24]
    }
 80012dc:	4618      	mov	r0, r3
 80012de:	3720      	adds	r7, #32
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
 80012f0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80012f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	461a      	mov	r2, r3
 80012fc:	21a5      	movs	r1, #165	; 0xa5
 80012fe:	f001 fd78 	bl	8002df2 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800130c:	3b01      	subs	r3, #1
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	f023 0307 	bic.w	r3, r3, #7
 800131a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	2b00      	cmp	r3, #0
 8001324:	d009      	beq.n	800133a <prvInitialiseNewTask+0x56>
 8001326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800132a:	f383 8811 	msr	BASEPRI, r3
 800132e:	f3bf 8f6f 	isb	sy
 8001332:	f3bf 8f4f 	dsb	sy
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	e7fe      	b.n	8001338 <prvInitialiseNewTask+0x54>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d01e      	beq.n	800137e <prvInitialiseNewTask+0x9a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
 8001344:	e012      	b.n	800136c <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	4413      	add	r3, r2
 800134c:	7819      	ldrb	r1, [r3, #0]
 800134e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	4413      	add	r3, r2
 8001354:	3334      	adds	r3, #52	; 0x34
 8001356:	460a      	mov	r2, r1
 8001358:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	4413      	add	r3, r2
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d006      	beq.n	8001374 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3301      	adds	r3, #1
 800136a:	61fb      	str	r3, [r7, #28]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	2b09      	cmp	r3, #9
 8001370:	d9e9      	bls.n	8001346 <prvInitialiseNewTask+0x62>
 8001372:	e000      	b.n	8001376 <prvInitialiseNewTask+0x92>
            {
                break;
 8001374:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001378:	2200      	movs	r2, #0
 800137a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800137e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001380:	2b04      	cmp	r3, #4
 8001382:	d909      	bls.n	8001398 <prvInitialiseNewTask+0xb4>
 8001384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001388:	f383 8811 	msr	BASEPRI, r3
 800138c:	f3bf 8f6f 	isb	sy
 8001390:	f3bf 8f4f 	dsb	sy
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	e7fe      	b.n	8001396 <prvInitialiseNewTask+0xb2>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800139a:	2b04      	cmp	r3, #4
 800139c:	d901      	bls.n	80013a2 <prvInitialiseNewTask+0xbe>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800139e:	2304      	movs	r3, #4
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80013a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013a6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80013a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013ac:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80013ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013b0:	3304      	adds	r3, #4
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f834 	bl	8000420 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80013b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ba:	3318      	adds	r3, #24
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f82f 	bl	8000420 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80013c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013c6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80013c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ca:	f1c3 0205 	rsb	r2, r3, #5
 80013ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013d0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80013d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013d6:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	68f9      	ldr	r1, [r7, #12]
 80013dc:	69b8      	ldr	r0, [r7, #24]
 80013de:	f7ff f88f 	bl	8000500 <pxPortInitialiseStack>
 80013e2:	4602      	mov	r2, r0
 80013e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013e6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80013e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d002      	beq.n	80013f4 <prvInitialiseNewTask+0x110>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80013ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013f2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80013f4:	bf00      	nop
 80013f6:	3720      	adds	r7, #32
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001404:	f7ff f9a4 	bl	8000750 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001408:	4b40      	ldr	r3, [pc, #256]	; (800150c <prvAddNewTaskToReadyList+0x110>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	4a3f      	ldr	r2, [pc, #252]	; (800150c <prvAddNewTaskToReadyList+0x110>)
 8001410:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001412:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <prvAddNewTaskToReadyList+0x114>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d109      	bne.n	800142e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800141a:	4a3d      	ldr	r2, [pc, #244]	; (8001510 <prvAddNewTaskToReadyList+0x114>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001420:	4b3a      	ldr	r3, [pc, #232]	; (800150c <prvAddNewTaskToReadyList+0x110>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d110      	bne.n	800144a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001428:	f000 fd32 	bl	8001e90 <prvInitialiseTaskLists>
 800142c:	e00d      	b.n	800144a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800142e:	4b39      	ldr	r3, [pc, #228]	; (8001514 <prvAddNewTaskToReadyList+0x118>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d109      	bne.n	800144a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001436:	4b36      	ldr	r3, [pc, #216]	; (8001510 <prvAddNewTaskToReadyList+0x114>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001440:	429a      	cmp	r2, r3
 8001442:	d802      	bhi.n	800144a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001444:	4a32      	ldr	r2, [pc, #200]	; (8001510 <prvAddNewTaskToReadyList+0x114>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800144a:	4b33      	ldr	r3, [pc, #204]	; (8001518 <prvAddNewTaskToReadyList+0x11c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	3301      	adds	r3, #1
 8001450:	4a31      	ldr	r2, [pc, #196]	; (8001518 <prvAddNewTaskToReadyList+0x11c>)
 8001452:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001454:	4b30      	ldr	r3, [pc, #192]	; (8001518 <prvAddNewTaskToReadyList+0x11c>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001460:	2201      	movs	r2, #1
 8001462:	409a      	lsls	r2, r3
 8001464:	4b2d      	ldr	r3, [pc, #180]	; (800151c <prvAddNewTaskToReadyList+0x120>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4313      	orrs	r3, r2
 800146a:	4a2c      	ldr	r2, [pc, #176]	; (800151c <prvAddNewTaskToReadyList+0x120>)
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001472:	492b      	ldr	r1, [pc, #172]	; (8001520 <prvAddNewTaskToReadyList+0x124>)
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	3304      	adds	r3, #4
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	3204      	adds	r2, #4
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	1d1a      	adds	r2, r3, #4
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014a8:	4613      	mov	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4a1b      	ldr	r2, [pc, #108]	; (8001520 <prvAddNewTaskToReadyList+0x124>)
 80014b2:	441a      	add	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	615a      	str	r2, [r3, #20]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014bc:	4918      	ldr	r1, [pc, #96]	; (8001520 <prvAddNewTaskToReadyList+0x124>)
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	440b      	add	r3, r1
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	1c59      	adds	r1, r3, #1
 80014cc:	4814      	ldr	r0, [pc, #80]	; (8001520 <prvAddNewTaskToReadyList+0x124>)
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4403      	add	r3, r0
 80014d8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80014da:	f7ff f967 	bl	80007ac <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80014de:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <prvAddNewTaskToReadyList+0x118>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00e      	beq.n	8001504 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80014e6:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <prvAddNewTaskToReadyList+0x114>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d207      	bcs.n	8001504 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <prvAddNewTaskToReadyList+0x128>)
 80014f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	f3bf 8f4f 	dsb	sy
 8001500:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001504:	bf00      	nop
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20012d34 	.word	0x20012d34
 8001510:	20012c5c 	.word	0x20012c5c
 8001514:	20012d40 	.word	0x20012d40
 8001518:	20012d50 	.word	0x20012d50
 800151c:	20012d3c 	.word	0x20012d3c
 8001520:	20012c60 	.word	0x20012c60
 8001524:	e000ed04 	.word	0xe000ed04

08001528 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800152e:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <vTaskStartScheduler+0x84>)
 8001530:	9301      	str	r3, [sp, #4]
 8001532:	2300      	movs	r3, #0
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	2300      	movs	r3, #0
 8001538:	2282      	movs	r2, #130	; 0x82
 800153a:	491d      	ldr	r1, [pc, #116]	; (80015b0 <vTaskStartScheduler+0x88>)
 800153c:	481d      	ldr	r0, [pc, #116]	; (80015b4 <vTaskStartScheduler+0x8c>)
 800153e:	f7ff fe8b 	bl	8001258 <xTaskCreate>
 8001542:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d102      	bne.n	8001550 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800154a:	f000 ff73 	bl	8002434 <xTimerCreateTimerTask>
 800154e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d115      	bne.n	8001582 <vTaskStartScheduler+0x5a>
 8001556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800155a:	f383 8811 	msr	BASEPRI, r3
 800155e:	f3bf 8f6f 	isb	sy
 8001562:	f3bf 8f4f 	dsb	sy
 8001566:	60bb      	str	r3, [r7, #8]
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <vTaskStartScheduler+0x90>)
 800156a:	f04f 32ff 	mov.w	r2, #4294967295
 800156e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <vTaskStartScheduler+0x94>)
 8001572:	2201      	movs	r2, #1
 8001574:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <vTaskStartScheduler+0x98>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800157c:	f7ff f84a 	bl	8000614 <xPortStartScheduler>
 8001580:	e00d      	b.n	800159e <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001588:	d109      	bne.n	800159e <vTaskStartScheduler+0x76>
 800158a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800158e:	f383 8811 	msr	BASEPRI, r3
 8001592:	f3bf 8f6f 	isb	sy
 8001596:	f3bf 8f4f 	dsb	sy
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	e7fe      	b.n	800159c <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <vTaskStartScheduler+0x9c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20012d58 	.word	0x20012d58
 80015b0:	08002e1c 	.word	0x08002e1c
 80015b4:	08001e61 	.word	0x08001e61
 80015b8:	20012d54 	.word	0x20012d54
 80015bc:	20012d40 	.word	0x20012d40
 80015c0:	20012d38 	.word	0x20012d38
 80015c4:	20000004 	.word	0x20000004

080015c8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <vTaskSuspendAll+0x18>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	3301      	adds	r3, #1
 80015d2:	4a03      	ldr	r2, [pc, #12]	; (80015e0 <vTaskSuspendAll+0x18>)
 80015d4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	20012d5c 	.word	0x20012d5c

080015e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80015f2:	4b70      	ldr	r3, [pc, #448]	; (80017b4 <xTaskResumeAll+0x1d0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d109      	bne.n	800160e <xTaskResumeAll+0x2a>
 80015fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015fe:	f383 8811 	msr	BASEPRI, r3
 8001602:	f3bf 8f6f 	isb	sy
 8001606:	f3bf 8f4f 	dsb	sy
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	e7fe      	b.n	800160c <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800160e:	f7ff f89f 	bl	8000750 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001612:	4b68      	ldr	r3, [pc, #416]	; (80017b4 <xTaskResumeAll+0x1d0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	3b01      	subs	r3, #1
 8001618:	4a66      	ldr	r2, [pc, #408]	; (80017b4 <xTaskResumeAll+0x1d0>)
 800161a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800161c:	4b65      	ldr	r3, [pc, #404]	; (80017b4 <xTaskResumeAll+0x1d0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	f040 80c0 	bne.w	80017a6 <xTaskResumeAll+0x1c2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001626:	4b64      	ldr	r3, [pc, #400]	; (80017b8 <xTaskResumeAll+0x1d4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 80bb 	beq.w	80017a6 <xTaskResumeAll+0x1c2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001630:	e08a      	b.n	8001748 <xTaskResumeAll+0x164>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001632:	4b62      	ldr	r3, [pc, #392]	; (80017bc <xTaskResumeAll+0x1d8>)
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	69fa      	ldr	r2, [r7, #28]
 8001646:	6a12      	ldr	r2, [r2, #32]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	69fa      	ldr	r2, [r7, #28]
 8001650:	69d2      	ldr	r2, [r2, #28]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	3318      	adds	r3, #24
 800165c:	429a      	cmp	r2, r3
 800165e:	d103      	bne.n	8001668 <xTaskResumeAll+0x84>
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	6a1a      	ldr	r2, [r3, #32]
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	2200      	movs	r2, #0
 800166c:	629a      	str	r2, [r3, #40]	; 0x28
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	1e5a      	subs	r2, r3, #1
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	68d2      	ldr	r2, [r2, #12]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	69fa      	ldr	r2, [r7, #28]
 800168e:	6892      	ldr	r2, [r2, #8]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3304      	adds	r3, #4
 800169a:	429a      	cmp	r2, r3
 800169c:	d103      	bne.n	80016a6 <xTaskResumeAll+0xc2>
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	2200      	movs	r2, #0
 80016aa:	615a      	str	r2, [r3, #20]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	1e5a      	subs	r2, r3, #1
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ba:	2201      	movs	r2, #1
 80016bc:	409a      	lsls	r2, r3
 80016be:	4b40      	ldr	r3, [pc, #256]	; (80017c0 <xTaskResumeAll+0x1dc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	4a3e      	ldr	r2, [pc, #248]	; (80017c0 <xTaskResumeAll+0x1dc>)
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016cc:	493d      	ldr	r1, [pc, #244]	; (80017c4 <xTaskResumeAll+0x1e0>)
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	440b      	add	r3, r1
 80016d8:	3304      	adds	r3, #4
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	68ba      	ldr	r2, [r7, #8]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	69fa      	ldr	r2, [r7, #28]
 80016f2:	3204      	adds	r2, #4
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	1d1a      	adds	r2, r3, #4
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4a2e      	ldr	r2, [pc, #184]	; (80017c4 <xTaskResumeAll+0x1e0>)
 800170c:	441a      	add	r2, r3
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	615a      	str	r2, [r3, #20]
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001716:	492b      	ldr	r1, [pc, #172]	; (80017c4 <xTaskResumeAll+0x1e0>)
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	1c59      	adds	r1, r3, #1
 8001726:	4827      	ldr	r0, [pc, #156]	; (80017c4 <xTaskResumeAll+0x1e0>)
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4403      	add	r3, r0
 8001732:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001738:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <xTaskResumeAll+0x1e4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173e:	429a      	cmp	r2, r3
 8001740:	d302      	bcc.n	8001748 <xTaskResumeAll+0x164>
                    {
                        xYieldPending = pdTRUE;
 8001742:	4b22      	ldr	r3, [pc, #136]	; (80017cc <xTaskResumeAll+0x1e8>)
 8001744:	2201      	movs	r2, #1
 8001746:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001748:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <xTaskResumeAll+0x1d8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	f47f af70 	bne.w	8001632 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <xTaskResumeAll+0x178>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001758:	f000 fc16 	bl	8001f88 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800175c:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <xTaskResumeAll+0x1ec>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d010      	beq.n	800178a <xTaskResumeAll+0x1a6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001768:	f000 f846 	bl	80017f8 <xTaskIncrementTick>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d002      	beq.n	8001778 <xTaskResumeAll+0x194>
                            {
                                xYieldPending = pdTRUE;
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <xTaskResumeAll+0x1e8>)
 8001774:	2201      	movs	r2, #1
 8001776:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	3b01      	subs	r3, #1
 800177c:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1f1      	bne.n	8001768 <xTaskResumeAll+0x184>

                        xPendedTicks = 0;
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <xTaskResumeAll+0x1ec>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <xTaskResumeAll+0x1e8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d009      	beq.n	80017a6 <xTaskResumeAll+0x1c2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001792:	2301      	movs	r3, #1
 8001794:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <xTaskResumeAll+0x1f0>)
 8001798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	f3bf 8f4f 	dsb	sy
 80017a2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80017a6:	f7ff f801 	bl	80007ac <vPortExitCritical>

    return xAlreadyYielded;
 80017aa:	69bb      	ldr	r3, [r7, #24]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3720      	adds	r7, #32
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20012d5c 	.word	0x20012d5c
 80017b8:	20012d34 	.word	0x20012d34
 80017bc:	20012cf4 	.word	0x20012cf4
 80017c0:	20012d3c 	.word	0x20012d3c
 80017c4:	20012c60 	.word	0x20012c60
 80017c8:	20012c5c 	.word	0x20012c5c
 80017cc:	20012d48 	.word	0x20012d48
 80017d0:	20012d44 	.word	0x20012d44
 80017d4:	e000ed04 	.word	0xe000ed04

080017d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80017de:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <xTaskGetTickCount+0x1c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80017e4:	687b      	ldr	r3, [r7, #4]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20012d38 	.word	0x20012d38

080017f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80017fe:	2300      	movs	r3, #0
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001802:	4b7d      	ldr	r3, [pc, #500]	; (80019f8 <xTaskIncrementTick+0x200>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	f040 80eb 	bne.w	80019e2 <xTaskIncrementTick+0x1ea>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800180c:	4b7b      	ldr	r3, [pc, #492]	; (80019fc <xTaskIncrementTick+0x204>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	3301      	adds	r3, #1
 8001812:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001814:	4a79      	ldr	r2, [pc, #484]	; (80019fc <xTaskIncrementTick+0x204>)
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d11f      	bne.n	8001860 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8001820:	4b77      	ldr	r3, [pc, #476]	; (8001a00 <xTaskIncrementTick+0x208>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d009      	beq.n	800183e <xTaskIncrementTick+0x46>
 800182a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800182e:	f383 8811 	msr	BASEPRI, r3
 8001832:	f3bf 8f6f 	isb	sy
 8001836:	f3bf 8f4f 	dsb	sy
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	e7fe      	b.n	800183c <xTaskIncrementTick+0x44>
 800183e:	4b70      	ldr	r3, [pc, #448]	; (8001a00 <xTaskIncrementTick+0x208>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	61fb      	str	r3, [r7, #28]
 8001844:	4b6f      	ldr	r3, [pc, #444]	; (8001a04 <xTaskIncrementTick+0x20c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a6d      	ldr	r2, [pc, #436]	; (8001a00 <xTaskIncrementTick+0x208>)
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	4a6d      	ldr	r2, [pc, #436]	; (8001a04 <xTaskIncrementTick+0x20c>)
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	4b6d      	ldr	r3, [pc, #436]	; (8001a08 <xTaskIncrementTick+0x210>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	3301      	adds	r3, #1
 8001858:	4a6b      	ldr	r2, [pc, #428]	; (8001a08 <xTaskIncrementTick+0x210>)
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	f000 fb94 	bl	8001f88 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001860:	4b6a      	ldr	r3, [pc, #424]	; (8001a0c <xTaskIncrementTick+0x214>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6a3a      	ldr	r2, [r7, #32]
 8001866:	429a      	cmp	r2, r3
 8001868:	f0c0 80a6 	bcc.w	80019b8 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800186c:	4b64      	ldr	r3, [pc, #400]	; (8001a00 <xTaskIncrementTick+0x208>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d104      	bne.n	8001880 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001876:	4b65      	ldr	r3, [pc, #404]	; (8001a0c <xTaskIncrementTick+0x214>)
 8001878:	f04f 32ff 	mov.w	r2, #4294967295
 800187c:	601a      	str	r2, [r3, #0]
                    break;
 800187e:	e09b      	b.n	80019b8 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001880:	4b5f      	ldr	r3, [pc, #380]	; (8001a00 <xTaskIncrementTick+0x208>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001890:	6a3a      	ldr	r2, [r7, #32]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	429a      	cmp	r2, r3
 8001896:	d203      	bcs.n	80018a0 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001898:	4a5c      	ldr	r2, [pc, #368]	; (8001a0c <xTaskIncrementTick+0x214>)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800189e:	e08b      	b.n	80019b8 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	68d2      	ldr	r2, [r2, #12]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	6892      	ldr	r2, [r2, #8]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	3304      	adds	r3, #4
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d103      	bne.n	80018ce <xTaskIncrementTick+0xd6>
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	2200      	movs	r2, #0
 80018d2:	615a      	str	r2, [r3, #20]
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	1e5a      	subs	r2, r3, #1
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d01e      	beq.n	8001924 <xTaskIncrementTick+0x12c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	6a12      	ldr	r2, [r2, #32]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	69d2      	ldr	r2, [r2, #28]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	3318      	adds	r3, #24
 8001908:	429a      	cmp	r2, r3
 800190a:	d103      	bne.n	8001914 <xTaskIncrementTick+0x11c>
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	6a1a      	ldr	r2, [r3, #32]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	2200      	movs	r2, #0
 8001918:	629a      	str	r2, [r3, #40]	; 0x28
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	1e5a      	subs	r2, r3, #1
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001928:	2201      	movs	r2, #1
 800192a:	409a      	lsls	r2, r3
 800192c:	4b38      	ldr	r3, [pc, #224]	; (8001a10 <xTaskIncrementTick+0x218>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4313      	orrs	r3, r2
 8001932:	4a37      	ldr	r2, [pc, #220]	; (8001a10 <xTaskIncrementTick+0x218>)
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800193a:	4936      	ldr	r1, [pc, #216]	; (8001a14 <xTaskIncrementTick+0x21c>)
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	3304      	adds	r3, #4
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	3204      	adds	r2, #4
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	1d1a      	adds	r2, r3, #4
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4a26      	ldr	r2, [pc, #152]	; (8001a14 <xTaskIncrementTick+0x21c>)
 800197a:	441a      	add	r2, r3
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	615a      	str	r2, [r3, #20]
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001984:	4923      	ldr	r1, [pc, #140]	; (8001a14 <xTaskIncrementTick+0x21c>)
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	1c59      	adds	r1, r3, #1
 8001994:	481f      	ldr	r0, [pc, #124]	; (8001a14 <xTaskIncrementTick+0x21c>)
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4403      	add	r3, r0
 80019a0:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a6:	4b1c      	ldr	r3, [pc, #112]	; (8001a18 <xTaskIncrementTick+0x220>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	429a      	cmp	r2, r3
 80019ae:	f67f af5d 	bls.w	800186c <xTaskIncrementTick+0x74>
                        {
                            xSwitchRequired = pdTRUE;
 80019b2:	2301      	movs	r3, #1
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80019b6:	e759      	b.n	800186c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80019b8:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <xTaskIncrementTick+0x220>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019be:	4915      	ldr	r1, [pc, #84]	; (8001a14 <xTaskIncrementTick+0x21c>)
 80019c0:	4613      	mov	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d901      	bls.n	80019d4 <xTaskIncrementTick+0x1dc>
            {
                xSwitchRequired = pdTRUE;
 80019d0:	2301      	movs	r3, #1
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <xTaskIncrementTick+0x224>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d007      	beq.n	80019ec <xTaskIncrementTick+0x1f4>
            {
                xSwitchRequired = pdTRUE;
 80019dc:	2301      	movs	r3, #1
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
 80019e0:	e004      	b.n	80019ec <xTaskIncrementTick+0x1f4>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <xTaskIncrementTick+0x228>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	3301      	adds	r3, #1
 80019e8:	4a0d      	ldr	r2, [pc, #52]	; (8001a20 <xTaskIncrementTick+0x228>)
 80019ea:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3728      	adds	r7, #40	; 0x28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20012d5c 	.word	0x20012d5c
 80019fc:	20012d38 	.word	0x20012d38
 8001a00:	20012cec 	.word	0x20012cec
 8001a04:	20012cf0 	.word	0x20012cf0
 8001a08:	20012d4c 	.word	0x20012d4c
 8001a0c:	20012d54 	.word	0x20012d54
 8001a10:	20012d3c 	.word	0x20012d3c
 8001a14:	20012c60 	.word	0x20012c60
 8001a18:	20012c5c 	.word	0x20012c5c
 8001a1c:	20012d48 	.word	0x20012d48
 8001a20:	20012d44 	.word	0x20012d44

08001a24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001a24:	b480      	push	{r7}
 8001a26:	b087      	sub	sp, #28
 8001a28:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001a2a:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <vTaskSwitchContext+0xa0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001a32:	4b25      	ldr	r3, [pc, #148]	; (8001ac8 <vTaskSwitchContext+0xa4>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001a38:	e03e      	b.n	8001ab8 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 8001a3a:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <vTaskSwitchContext+0xa4>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a40:	4b22      	ldr	r3, [pc, #136]	; (8001acc <vTaskSwitchContext+0xa8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	fab3 f383 	clz	r3, r3
 8001a4c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001a4e:	7afb      	ldrb	r3, [r7, #11]
 8001a50:	f1c3 031f 	rsb	r3, r3, #31
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	491e      	ldr	r1, [pc, #120]	; (8001ad0 <vTaskSwitchContext+0xac>)
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d109      	bne.n	8001a7e <vTaskSwitchContext+0x5a>
        __asm volatile
 8001a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a6e:	f383 8811 	msr	BASEPRI, r3
 8001a72:	f3bf 8f6f 	isb	sy
 8001a76:	f3bf 8f4f 	dsb	sy
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	e7fe      	b.n	8001a7c <vTaskSwitchContext+0x58>
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4a11      	ldr	r2, [pc, #68]	; (8001ad0 <vTaskSwitchContext+0xac>)
 8001a8a:	4413      	add	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	3308      	adds	r3, #8
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d104      	bne.n	8001aae <vTaskSwitchContext+0x8a>
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	4a07      	ldr	r2, [pc, #28]	; (8001ad4 <vTaskSwitchContext+0xb0>)
 8001ab6:	6013      	str	r3, [r2, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	371c      	adds	r7, #28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	20012d5c 	.word	0x20012d5c
 8001ac8:	20012d48 	.word	0x20012d48
 8001acc:	20012d3c 	.word	0x20012d3c
 8001ad0:	20012c60 	.word	0x20012c60
 8001ad4:	20012c5c 	.word	0x20012c5c

08001ad8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d109      	bne.n	8001afc <vTaskPlaceOnEventList+0x24>
 8001ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aec:	f383 8811 	msr	BASEPRI, r3
 8001af0:	f3bf 8f6f 	isb	sy
 8001af4:	f3bf 8f4f 	dsb	sy
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	e7fe      	b.n	8001afa <vTaskPlaceOnEventList+0x22>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <vTaskPlaceOnEventList+0x44>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	3318      	adds	r3, #24
 8001b02:	4619      	mov	r1, r3
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7fe fc98 	bl	800043a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	6838      	ldr	r0, [r7, #0]
 8001b0e:	f000 fc11 	bl	8002334 <prvAddCurrentTaskToDelayedList>
}
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20012c5c 	.word	0x20012c5c

08001b20 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d109      	bne.n	8001b46 <vTaskPlaceOnEventListRestricted+0x26>
 8001b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b36:	f383 8811 	msr	BASEPRI, r3
 8001b3a:	f3bf 8f6f 	isb	sy
 8001b3e:	f3bf 8f4f 	dsb	sy
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	e7fe      	b.n	8001b44 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <vTaskPlaceOnEventListRestricted+0x84>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	61da      	str	r2, [r3, #28]
 8001b54:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <vTaskPlaceOnEventListRestricted+0x84>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	6892      	ldr	r2, [r2, #8]
 8001b5c:	621a      	str	r2, [r3, #32]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	4a10      	ldr	r2, [pc, #64]	; (8001ba4 <vTaskPlaceOnEventListRestricted+0x84>)
 8001b64:	6812      	ldr	r2, [r2, #0]
 8001b66:	3218      	adds	r2, #24
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <vTaskPlaceOnEventListRestricted+0x84>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f103 0218 	add.w	r2, r3, #24
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <vTaskPlaceOnEventListRestricted+0x84>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	629a      	str	r2, [r3, #40]	; 0x28
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d002      	beq.n	8001b94 <vTaskPlaceOnEventListRestricted+0x74>
        {
            xTicksToWait = portMAX_DELAY;
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b92:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	68b8      	ldr	r0, [r7, #8]
 8001b98:	f000 fbcc 	bl	8002334 <prvAddCurrentTaskToDelayedList>
    }
 8001b9c:	bf00      	nop
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20012c5c 	.word	0x20012c5c

08001ba8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b08b      	sub	sp, #44	; 0x2c
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001bb8:	6a3b      	ldr	r3, [r7, #32]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d109      	bne.n	8001bd2 <xTaskRemoveFromEventList+0x2a>
 8001bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bc2:	f383 8811 	msr	BASEPRI, r3
 8001bc6:	f3bf 8f6f 	isb	sy
 8001bca:	f3bf 8f4f 	dsb	sy
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	e7fe      	b.n	8001bd0 <xTaskRemoveFromEventList+0x28>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd6:	61fb      	str	r3, [r7, #28]
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	6a3a      	ldr	r2, [r7, #32]
 8001bde:	6a12      	ldr	r2, [r2, #32]
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	6a3a      	ldr	r2, [r7, #32]
 8001be8:	69d2      	ldr	r2, [r2, #28]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	3318      	adds	r3, #24
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d103      	bne.n	8001c00 <xTaskRemoveFromEventList+0x58>
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	6a1a      	ldr	r2, [r3, #32]
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	6a3b      	ldr	r3, [r7, #32]
 8001c02:	2200      	movs	r2, #0
 8001c04:	629a      	str	r2, [r3, #40]	; 0x28
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	1e5a      	subs	r2, r3, #1
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c10:	4b4a      	ldr	r3, [pc, #296]	; (8001d3c <xTaskRemoveFromEventList+0x194>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d15e      	bne.n	8001cd6 <xTaskRemoveFromEventList+0x12e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	61bb      	str	r3, [r7, #24]
 8001c1e:	6a3b      	ldr	r3, [r7, #32]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	6a3a      	ldr	r2, [r7, #32]
 8001c24:	68d2      	ldr	r2, [r2, #12]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	6a3b      	ldr	r3, [r7, #32]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	6a3a      	ldr	r2, [r7, #32]
 8001c2e:	6892      	ldr	r2, [r2, #8]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	6a3b      	ldr	r3, [r7, #32]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d103      	bne.n	8001c46 <xTaskRemoveFromEventList+0x9e>
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	615a      	str	r2, [r3, #20]
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	1e5a      	subs	r2, r3, #1
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	4b38      	ldr	r3, [pc, #224]	; (8001d40 <xTaskRemoveFromEventList+0x198>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	4a36      	ldr	r2, [pc, #216]	; (8001d40 <xTaskRemoveFromEventList+0x198>)
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c6c:	4935      	ldr	r1, [pc, #212]	; (8001d44 <xTaskRemoveFromEventList+0x19c>)
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	440b      	add	r3, r1
 8001c78:	3304      	adds	r3, #4
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	60da      	str	r2, [r3, #12]
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	6a3a      	ldr	r2, [r7, #32]
 8001c92:	3204      	adds	r2, #4
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	1d1a      	adds	r2, r3, #4
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	6a3b      	ldr	r3, [r7, #32]
 8001ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4a26      	ldr	r2, [pc, #152]	; (8001d44 <xTaskRemoveFromEventList+0x19c>)
 8001cac:	441a      	add	r2, r3
 8001cae:	6a3b      	ldr	r3, [r7, #32]
 8001cb0:	615a      	str	r2, [r3, #20]
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb6:	4923      	ldr	r1, [pc, #140]	; (8001d44 <xTaskRemoveFromEventList+0x19c>)
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	1c59      	adds	r1, r3, #1
 8001cc6:	481f      	ldr	r0, [pc, #124]	; (8001d44 <xTaskRemoveFromEventList+0x19c>)
 8001cc8:	4613      	mov	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4403      	add	r3, r0
 8001cd2:	6019      	str	r1, [r3, #0]
 8001cd4:	e01b      	b.n	8001d0e <xTaskRemoveFromEventList+0x166>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001cd6:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <xTaskRemoveFromEventList+0x1a0>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	61da      	str	r2, [r3, #28]
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	621a      	str	r2, [r3, #32]
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	6a3a      	ldr	r2, [r7, #32]
 8001cf0:	3218      	adds	r2, #24
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	6a3b      	ldr	r3, [r7, #32]
 8001cf6:	f103 0218 	add.w	r2, r3, #24
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	4a11      	ldr	r2, [pc, #68]	; (8001d48 <xTaskRemoveFromEventList+0x1a0>)
 8001d02:	629a      	str	r2, [r3, #40]	; 0x28
 8001d04:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <xTaskRemoveFromEventList+0x1a0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	4a0f      	ldr	r2, [pc, #60]	; (8001d48 <xTaskRemoveFromEventList+0x1a0>)
 8001d0c:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d12:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <xTaskRemoveFromEventList+0x1a4>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d905      	bls.n	8001d28 <xTaskRemoveFromEventList+0x180>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <xTaskRemoveFromEventList+0x1a8>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	e001      	b.n	8001d2c <xTaskRemoveFromEventList+0x184>
    }
    else
    {
        xReturn = pdFALSE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	372c      	adds	r7, #44	; 0x2c
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20012d5c 	.word	0x20012d5c
 8001d40:	20012d3c 	.word	0x20012d3c
 8001d44:	20012c60 	.word	0x20012c60
 8001d48:	20012cf4 	.word	0x20012cf4
 8001d4c:	20012c5c 	.word	0x20012c5c
 8001d50:	20012d48 	.word	0x20012d48

08001d54 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <vTaskInternalSetTimeOutState+0x24>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <vTaskInternalSetTimeOutState+0x28>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	605a      	str	r2, [r3, #4]
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	20012d4c 	.word	0x20012d4c
 8001d7c:	20012d38 	.word	0x20012d38

08001d80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d109      	bne.n	8001da4 <xTaskCheckForTimeOut+0x24>
 8001d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d94:	f383 8811 	msr	BASEPRI, r3
 8001d98:	f3bf 8f6f 	isb	sy
 8001d9c:	f3bf 8f4f 	dsb	sy
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	e7fe      	b.n	8001da2 <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d109      	bne.n	8001dbe <xTaskCheckForTimeOut+0x3e>
 8001daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dae:	f383 8811 	msr	BASEPRI, r3
 8001db2:	f3bf 8f6f 	isb	sy
 8001db6:	f3bf 8f4f 	dsb	sy
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	e7fe      	b.n	8001dbc <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8001dbe:	f7fe fcc7 	bl	8000750 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001dc2:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <xTaskCheckForTimeOut+0xc0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dda:	d102      	bne.n	8001de2 <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61fb      	str	r3, [r7, #28]
 8001de0:	e026      	b.n	8001e30 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <xTaskCheckForTimeOut+0xc4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d00a      	beq.n	8001e04 <xTaskCheckForTimeOut+0x84>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d805      	bhi.n	8001e04 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	e015      	b.n	8001e30 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d90b      	bls.n	8001e26 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	1ad2      	subs	r2, r2, r3
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ff9a 	bl	8001d54 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61fb      	str	r3, [r7, #28]
 8001e24:	e004      	b.n	8001e30 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001e30:	f7fe fcbc 	bl	80007ac <vPortExitCritical>

    return xReturn;
 8001e34:	69fb      	ldr	r3, [r7, #28]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3720      	adds	r7, #32
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20012d38 	.word	0x20012d38
 8001e44:	20012d4c 	.word	0x20012d4c

08001e48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <vTaskMissedYield+0x14>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	601a      	str	r2, [r3, #0]
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	20012d48 	.word	0x20012d48

08001e60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001e68:	f000 f852 	bl	8001f10 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <prvIdleTask+0x28>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d9f9      	bls.n	8001e68 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <prvIdleTask+0x2c>)
 8001e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	f3bf 8f4f 	dsb	sy
 8001e80:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001e84:	e7f0      	b.n	8001e68 <prvIdleTask+0x8>
 8001e86:	bf00      	nop
 8001e88:	20012c60 	.word	0x20012c60
 8001e8c:	e000ed04 	.word	0xe000ed04

08001e90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001e96:	2300      	movs	r3, #0
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	e00c      	b.n	8001eb6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <prvInitialiseTaskLists+0x60>)
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe fa98 	bl	80003e0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	607b      	str	r3, [r7, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d9ef      	bls.n	8001e9c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001ebc:	480d      	ldr	r0, [pc, #52]	; (8001ef4 <prvInitialiseTaskLists+0x64>)
 8001ebe:	f7fe fa8f 	bl	80003e0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001ec2:	480d      	ldr	r0, [pc, #52]	; (8001ef8 <prvInitialiseTaskLists+0x68>)
 8001ec4:	f7fe fa8c 	bl	80003e0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001ec8:	480c      	ldr	r0, [pc, #48]	; (8001efc <prvInitialiseTaskLists+0x6c>)
 8001eca:	f7fe fa89 	bl	80003e0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001ece:	480c      	ldr	r0, [pc, #48]	; (8001f00 <prvInitialiseTaskLists+0x70>)
 8001ed0:	f7fe fa86 	bl	80003e0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001ed4:	480b      	ldr	r0, [pc, #44]	; (8001f04 <prvInitialiseTaskLists+0x74>)
 8001ed6:	f7fe fa83 	bl	80003e0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <prvInitialiseTaskLists+0x78>)
 8001edc:	4a05      	ldr	r2, [pc, #20]	; (8001ef4 <prvInitialiseTaskLists+0x64>)
 8001ede:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001ee0:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <prvInitialiseTaskLists+0x7c>)
 8001ee2:	4a05      	ldr	r2, [pc, #20]	; (8001ef8 <prvInitialiseTaskLists+0x68>)
 8001ee4:	601a      	str	r2, [r3, #0]
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20012c60 	.word	0x20012c60
 8001ef4:	20012cc4 	.word	0x20012cc4
 8001ef8:	20012cd8 	.word	0x20012cd8
 8001efc:	20012cf4 	.word	0x20012cf4
 8001f00:	20012d08 	.word	0x20012d08
 8001f04:	20012d20 	.word	0x20012d20
 8001f08:	20012cec 	.word	0x20012cec
 8001f0c:	20012cf0 	.word	0x20012cf0

08001f10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f16:	e019      	b.n	8001f4c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8001f18:	f7fe fc1a 	bl	8000750 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <prvCheckTasksWaitingTermination+0x4c>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3304      	adds	r3, #4
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fabf 	bl	80004ac <uxListRemove>
                --uxCurrentNumberOfTasks;
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <prvCheckTasksWaitingTermination+0x50>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <prvCheckTasksWaitingTermination+0x50>)
 8001f36:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8001f38:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <prvCheckTasksWaitingTermination+0x54>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	4a09      	ldr	r2, [pc, #36]	; (8001f64 <prvCheckTasksWaitingTermination+0x54>)
 8001f40:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8001f42:	f7fe fc33 	bl	80007ac <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f80e 	bl	8001f68 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <prvCheckTasksWaitingTermination+0x54>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1e1      	bne.n	8001f18 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20012d08 	.word	0x20012d08
 8001f60:	20012d34 	.word	0x20012d34
 8001f64:	20012d1c 	.word	0x20012d1c

08001f68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe fd7f 	bl	8000a78 <vPortFree>
            vPortFree( pxTCB );
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7fe fd7c 	bl	8000a78 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <prvResetNextTaskUnblockTime+0x30>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d104      	bne.n	8001fa0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <prvResetNextTaskUnblockTime+0x34>)
 8001f98:	f04f 32ff 	mov.w	r2, #4294967295
 8001f9c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001f9e:	e005      	b.n	8001fac <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <prvResetNextTaskUnblockTime+0x30>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <prvResetNextTaskUnblockTime+0x34>)
 8001faa:	6013      	str	r3, [r2, #0]
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	20012cec 	.word	0x20012cec
 8001fbc:	20012d54 	.word	0x20012d54

08001fc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <xTaskGetSchedulerState+0x34>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d102      	bne.n	8001fd4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	607b      	str	r3, [r7, #4]
 8001fd2:	e008      	b.n	8001fe6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <xTaskGetSchedulerState+0x38>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d102      	bne.n	8001fe2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	e001      	b.n	8001fe6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001fe6:	687b      	ldr	r3, [r7, #4]
    }
 8001fe8:	4618      	mov	r0, r3
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	20012d40 	.word	0x20012d40
 8001ff8:	20012d5c 	.word	0x20012d5c

08001ffc <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
 8002008:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d009      	beq.n	8002024 <xTaskGenericNotifyWait+0x28>
 8002010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002014:	f383 8811 	msr	BASEPRI, r3
 8002018:	f3bf 8f6f 	isb	sy
 800201c:	f3bf 8f4f 	dsb	sy
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	e7fe      	b.n	8002022 <xTaskGenericNotifyWait+0x26>

        taskENTER_CRITICAL();
 8002024:	f7fe fb94 	bl	8000750 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002028:	4b31      	ldr	r3, [pc, #196]	; (80020f0 <xTaskGenericNotifyWait+0xf4>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4413      	add	r3, r2
 8002030:	3354      	adds	r3, #84	; 0x54
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d022      	beq.n	8002080 <xTaskGenericNotifyWait+0x84>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800203a:	4b2d      	ldr	r3, [pc, #180]	; (80020f0 <xTaskGenericNotifyWait+0xf4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	3214      	adds	r2, #20
 8002042:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	43d2      	mvns	r2, r2
 800204a:	4011      	ands	r1, r2
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	3214      	adds	r2, #20
 8002050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002054:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <xTaskGenericNotifyWait+0xf4>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4413      	add	r3, r2
 800205c:	3354      	adds	r3, #84	; 0x54
 800205e:	2201      	movs	r2, #1
 8002060:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00b      	beq.n	8002080 <xTaskGenericNotifyWait+0x84>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002068:	2101      	movs	r1, #1
 800206a:	6a38      	ldr	r0, [r7, #32]
 800206c:	f000 f962 	bl	8002334 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002070:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <xTaskGenericNotifyWait+0xf8>)
 8002072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	f3bf 8f4f 	dsb	sy
 800207c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002080:	f7fe fb94 	bl	80007ac <vPortExitCritical>

        taskENTER_CRITICAL();
 8002084:	f7fe fb64 	bl	8000750 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT();

            if( pulNotificationValue != NULL )
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d007      	beq.n	800209e <xTaskGenericNotifyWait+0xa2>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800208e:	4b18      	ldr	r3, [pc, #96]	; (80020f0 <xTaskGenericNotifyWait+0xf4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	3214      	adds	r2, #20
 8002096:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800209e:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <xTaskGenericNotifyWait+0xf4>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4413      	add	r3, r2
 80020a6:	3354      	adds	r3, #84	; 0x54
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d002      	beq.n	80020b6 <xTaskGenericNotifyWait+0xba>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	e00e      	b.n	80020d4 <xTaskGenericNotifyWait+0xd8>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <xTaskGenericNotifyWait+0xf4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	3214      	adds	r2, #20
 80020be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	43d2      	mvns	r2, r2
 80020c6:	4011      	ands	r1, r2
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	3214      	adds	r2, #20
 80020cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80020d0:	2301      	movs	r3, #1
 80020d2:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <xTaskGenericNotifyWait+0xf4>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4413      	add	r3, r2
 80020dc:	3354      	adds	r3, #84	; 0x54
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80020e2:	f7fe fb63 	bl	80007ac <vPortExitCritical>

        return xReturn;
 80020e6:	697b      	ldr	r3, [r7, #20]
    }
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20012c5c 	.word	0x20012c5c
 80020f4:	e000ed04 	.word	0xe000ed04

080020f8 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08e      	sub	sp, #56	; 0x38
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
 8002104:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8002106:	2301      	movs	r3, #1
 8002108:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d009      	beq.n	8002124 <xTaskGenericNotify+0x2c>
 8002110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002114:	f383 8811 	msr	BASEPRI, r3
 8002118:	f3bf 8f6f 	isb	sy
 800211c:	f3bf 8f4f 	dsb	sy
 8002120:	623b      	str	r3, [r7, #32]
 8002122:	e7fe      	b.n	8002122 <xTaskGenericNotify+0x2a>
        configASSERT( xTaskToNotify );
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <xTaskGenericNotify+0x46>
 800212a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800212e:	f383 8811 	msr	BASEPRI, r3
 8002132:	f3bf 8f6f 	isb	sy
 8002136:	f3bf 8f4f 	dsb	sy
 800213a:	61fb      	str	r3, [r7, #28]
 800213c:	e7fe      	b.n	800213c <xTaskGenericNotify+0x44>
        pxTCB = xTaskToNotify;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8002142:	f7fe fb05 	bl	8000750 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8002146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002148:	2b00      	cmp	r3, #0
 800214a:	d006      	beq.n	800215a <xTaskGenericNotify+0x62>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800214c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	3214      	adds	r2, #20
 8002152:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002158:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800215a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	4413      	add	r3, r2
 8002160:	3354      	adds	r3, #84	; 0x54
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	4413      	add	r3, r2
 800216e:	3354      	adds	r3, #84	; 0x54
 8002170:	2202      	movs	r2, #2
 8002172:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	2b04      	cmp	r3, #4
 8002178:	d83b      	bhi.n	80021f2 <xTaskGenericNotify+0xfa>
 800217a:	a201      	add	r2, pc, #4	; (adr r2, 8002180 <xTaskGenericNotify+0x88>)
 800217c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002180:	0800220f 	.word	0x0800220f
 8002184:	08002195 	.word	0x08002195
 8002188:	080021b1 	.word	0x080021b1
 800218c:	080021c9 	.word	0x080021c9
 8002190:	080021d7 	.word	0x080021d7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	3214      	adds	r2, #20
 800219a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	ea42 0103 	orr.w	r1, r2, r3
 80021a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	3214      	adds	r2, #20
 80021aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80021ae:	e031      	b.n	8002214 <xTaskGenericNotify+0x11c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80021b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	3214      	adds	r2, #20
 80021b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ba:	1c59      	adds	r1, r3, #1
 80021bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	3214      	adds	r2, #20
 80021c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80021c6:	e025      	b.n	8002214 <xTaskGenericNotify+0x11c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80021c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	3214      	adds	r2, #20
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80021d4:	e01e      	b.n	8002214 <xTaskGenericNotify+0x11c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80021d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d006      	beq.n	80021ec <xTaskGenericNotify+0xf4>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80021de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e0:	68ba      	ldr	r2, [r7, #8]
 80021e2:	3214      	adds	r2, #20
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80021ea:	e013      	b.n	8002214 <xTaskGenericNotify+0x11c>
                        xReturn = pdFAIL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 80021f0:	e010      	b.n	8002214 <xTaskGenericNotify+0x11c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80021f2:	4b4b      	ldr	r3, [pc, #300]	; (8002320 <xTaskGenericNotify+0x228>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00b      	beq.n	8002212 <xTaskGenericNotify+0x11a>
 80021fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021fe:	f383 8811 	msr	BASEPRI, r3
 8002202:	f3bf 8f6f 	isb	sy
 8002206:	f3bf 8f4f 	dsb	sy
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	e7fe      	b.n	800220c <xTaskGenericNotify+0x114>
                    break;
 800220e:	bf00      	nop
 8002210:	e000      	b.n	8002214 <xTaskGenericNotify+0x11c>

                    break;
 8002212:	bf00      	nop

            traceTASK_NOTIFY();

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002214:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002218:	2b01      	cmp	r3, #1
 800221a:	d17a      	bne.n	8002312 <xTaskGenericNotify+0x21a>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800221c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	62bb      	str	r3, [r7, #40]	; 0x28
 8002222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002228:	68d2      	ldr	r2, [r2, #12]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002232:	6892      	ldr	r2, [r2, #8]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223c:	3304      	adds	r3, #4
 800223e:	429a      	cmp	r2, r3
 8002240:	d103      	bne.n	800224a <xTaskGenericNotify+0x152>
 8002242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224c:	2200      	movs	r2, #0
 800224e:	615a      	str	r2, [r3, #20]
 8002250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	1e5a      	subs	r2, r3, #1
 8002256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002258:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800225a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	2201      	movs	r2, #1
 8002260:	409a      	lsls	r2, r3
 8002262:	4b30      	ldr	r3, [pc, #192]	; (8002324 <xTaskGenericNotify+0x22c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4313      	orrs	r3, r2
 8002268:	4a2e      	ldr	r2, [pc, #184]	; (8002324 <xTaskGenericNotify+0x22c>)
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002270:	492d      	ldr	r1, [pc, #180]	; (8002328 <xTaskGenericNotify+0x230>)
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	3304      	adds	r3, #4
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
 8002282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228e:	60da      	str	r2, [r3, #12]
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002296:	3204      	adds	r2, #4
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229c:	1d1a      	adds	r2, r3, #4
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	609a      	str	r2, [r3, #8]
 80022a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4a1e      	ldr	r2, [pc, #120]	; (8002328 <xTaskGenericNotify+0x230>)
 80022b0:	441a      	add	r2, r3
 80022b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b4:	615a      	str	r2, [r3, #20]
 80022b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ba:	491b      	ldr	r1, [pc, #108]	; (8002328 <xTaskGenericNotify+0x230>)
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	1c59      	adds	r1, r3, #1
 80022ca:	4817      	ldr	r0, [pc, #92]	; (8002328 <xTaskGenericNotify+0x230>)
 80022cc:	4613      	mov	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4403      	add	r3, r0
 80022d6:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80022d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d009      	beq.n	80022f4 <xTaskGenericNotify+0x1fc>
 80022e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e4:	f383 8811 	msr	BASEPRI, r3
 80022e8:	f3bf 8f6f 	isb	sy
 80022ec:	f3bf 8f4f 	dsb	sy
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	e7fe      	b.n	80022f2 <xTaskGenericNotify+0x1fa>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80022f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f8:	4b0c      	ldr	r3, [pc, #48]	; (800232c <xTaskGenericNotify+0x234>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	429a      	cmp	r2, r3
 8002300:	d907      	bls.n	8002312 <xTaskGenericNotify+0x21a>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8002302:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <xTaskGenericNotify+0x238>)
 8002304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	f3bf 8f4f 	dsb	sy
 800230e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002312:	f7fe fa4b 	bl	80007ac <vPortExitCritical>

        return xReturn;
 8002316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002318:	4618      	mov	r0, r3
 800231a:	3738      	adds	r7, #56	; 0x38
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20012d38 	.word	0x20012d38
 8002324:	20012d3c 	.word	0x20012d3c
 8002328:	20012c60 	.word	0x20012c60
 800232c:	20012c5c 	.word	0x20012c5c
 8002330:	e000ed04 	.word	0xe000ed04

08002334 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800233e:	4b36      	ldr	r3, [pc, #216]	; (8002418 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002344:	4b35      	ldr	r3, [pc, #212]	; (800241c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	3304      	adds	r3, #4
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe f8ae 	bl	80004ac <uxListRemove>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10b      	bne.n	800236e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002356:	4b31      	ldr	r3, [pc, #196]	; (800241c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	2201      	movs	r2, #1
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43da      	mvns	r2, r3
 8002364:	4b2e      	ldr	r3, [pc, #184]	; (8002420 <prvAddCurrentTaskToDelayedList+0xec>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4013      	ands	r3, r2
 800236a:	4a2d      	ldr	r2, [pc, #180]	; (8002420 <prvAddCurrentTaskToDelayedList+0xec>)
 800236c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002374:	d124      	bne.n	80023c0 <prvAddCurrentTaskToDelayedList+0x8c>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d021      	beq.n	80023c0 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800237c:	4b29      	ldr	r3, [pc, #164]	; (8002424 <prvAddCurrentTaskToDelayedList+0xf0>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	4b26      	ldr	r3, [pc, #152]	; (800241c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	4b24      	ldr	r3, [pc, #144]	; (800241c <prvAddCurrentTaskToDelayedList+0xe8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	6892      	ldr	r2, [r2, #8]
 8002392:	60da      	str	r2, [r3, #12]
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	4a20      	ldr	r2, [pc, #128]	; (800241c <prvAddCurrentTaskToDelayedList+0xe8>)
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	3204      	adds	r2, #4
 800239e:	605a      	str	r2, [r3, #4]
 80023a0:	4b1e      	ldr	r3, [pc, #120]	; (800241c <prvAddCurrentTaskToDelayedList+0xe8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	1d1a      	adds	r2, r3, #4
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	609a      	str	r2, [r3, #8]
 80023aa:	4b1c      	ldr	r3, [pc, #112]	; (800241c <prvAddCurrentTaskToDelayedList+0xe8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a1d      	ldr	r2, [pc, #116]	; (8002424 <prvAddCurrentTaskToDelayedList+0xf0>)
 80023b0:	615a      	str	r2, [r3, #20]
 80023b2:	4b1c      	ldr	r3, [pc, #112]	; (8002424 <prvAddCurrentTaskToDelayedList+0xf0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	3301      	adds	r3, #1
 80023b8:	4a1a      	ldr	r2, [pc, #104]	; (8002424 <prvAddCurrentTaskToDelayedList+0xf0>)
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80023be:	e026      	b.n	800240e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80023c8:	4b14      	ldr	r3, [pc, #80]	; (800241c <prvAddCurrentTaskToDelayedList+0xe8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d209      	bcs.n	80023ec <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023d8:	4b13      	ldr	r3, [pc, #76]	; (8002428 <prvAddCurrentTaskToDelayedList+0xf4>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4b0f      	ldr	r3, [pc, #60]	; (800241c <prvAddCurrentTaskToDelayedList+0xe8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	3304      	adds	r3, #4
 80023e2:	4619      	mov	r1, r3
 80023e4:	4610      	mov	r0, r2
 80023e6:	f7fe f828 	bl	800043a <vListInsert>
}
 80023ea:	e010      	b.n	800240e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023ec:	4b0f      	ldr	r3, [pc, #60]	; (800242c <prvAddCurrentTaskToDelayedList+0xf8>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b0a      	ldr	r3, [pc, #40]	; (800241c <prvAddCurrentTaskToDelayedList+0xe8>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	3304      	adds	r3, #4
 80023f6:	4619      	mov	r1, r3
 80023f8:	4610      	mov	r0, r2
 80023fa:	f7fe f81e 	bl	800043a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	429a      	cmp	r2, r3
 8002406:	d202      	bcs.n	800240e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8002408:	4a09      	ldr	r2, [pc, #36]	; (8002430 <prvAddCurrentTaskToDelayedList+0xfc>)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6013      	str	r3, [r2, #0]
}
 800240e:	bf00      	nop
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20012d38 	.word	0x20012d38
 800241c:	20012c5c 	.word	0x20012c5c
 8002420:	20012d3c 	.word	0x20012d3c
 8002424:	20012d20 	.word	0x20012d20
 8002428:	20012cf0 	.word	0x20012cf0
 800242c:	20012cec 	.word	0x20012cec
 8002430:	20012d54 	.word	0x20012d54

08002434 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800243a:	2300      	movs	r3, #0
 800243c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800243e:	f000 fa43 	bl	80028c8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002442:	4b11      	ldr	r3, [pc, #68]	; (8002488 <xTimerCreateTimerTask+0x54>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00b      	beq.n	8002462 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800244a:	4b10      	ldr	r3, [pc, #64]	; (800248c <xTimerCreateTimerTask+0x58>)
 800244c:	9301      	str	r3, [sp, #4]
 800244e:	2302      	movs	r3, #2
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	2300      	movs	r3, #0
 8002454:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002458:	490d      	ldr	r1, [pc, #52]	; (8002490 <xTimerCreateTimerTask+0x5c>)
 800245a:	480e      	ldr	r0, [pc, #56]	; (8002494 <xTimerCreateTimerTask+0x60>)
 800245c:	f7fe fefc 	bl	8001258 <xTaskCreate>
 8002460:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d109      	bne.n	800247c <xTimerCreateTimerTask+0x48>
 8002468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246c:	f383 8811 	msr	BASEPRI, r3
 8002470:	f3bf 8f6f 	isb	sy
 8002474:	f3bf 8f4f 	dsb	sy
 8002478:	603b      	str	r3, [r7, #0]
 800247a:	e7fe      	b.n	800247a <xTimerCreateTimerTask+0x46>
        return xReturn;
 800247c:	687b      	ldr	r3, [r7, #4]
    }
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20012d90 	.word	0x20012d90
 800248c:	20012d94 	.word	0x20012d94
 8002490:	08002e24 	.word	0x08002e24
 8002494:	08002539 	.word	0x08002539

08002498 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80024a4:	e008      	b.n	80024b8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	4413      	add	r3, r2
 80024ae:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	699a      	ldr	r2, [r3, #24]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	18d1      	adds	r1, r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 f8db 	bl	8002680 <prvInsertTimerInActiveList>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1ea      	bne.n	80024a6 <prvReloadTimer+0xe>
        }
    }
 80024d0:	bf00      	nop
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024e2:	4b14      	ldr	r3, [pc, #80]	; (8002534 <prvProcessExpiredTimer+0x5c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	3304      	adds	r3, #4
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fd ffdb 	bl	80004ac <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f7ff ffc5 	bl	8002498 <prvReloadTimer>
 800250e:	e008      	b.n	8002522 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002516:	f023 0301 	bic.w	r3, r3, #1
 800251a:	b2da      	uxtb	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	4798      	blx	r3
    }
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20012d88 	.word	0x20012d88

08002538 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002540:	f107 0308 	add.w	r3, r7, #8
 8002544:	4618      	mov	r0, r3
 8002546:	f000 f857 	bl	80025f8 <prvGetNextExpireTime>
 800254a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4619      	mov	r1, r3
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 f803 	bl	800255c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002556:	f000 f8d5 	bl	8002704 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800255a:	e7f1      	b.n	8002540 <prvTimerTask+0x8>

0800255c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002566:	f7ff f82f 	bl	80015c8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800256a:	f107 0308 	add.w	r3, r7, #8
 800256e:	4618      	mov	r0, r3
 8002570:	f000 f866 	bl	8002640 <prvSampleTimeNow>
 8002574:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d130      	bne.n	80025de <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10a      	bne.n	8002598 <prvProcessTimerOrBlockTask+0x3c>
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	429a      	cmp	r2, r3
 8002588:	d806      	bhi.n	8002598 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800258a:	f7ff f82b 	bl	80015e4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800258e:	68f9      	ldr	r1, [r7, #12]
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff ffa1 	bl	80024d8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002596:	e024      	b.n	80025e2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d008      	beq.n	80025b0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800259e:	4b13      	ldr	r3, [pc, #76]	; (80025ec <prvProcessTimerOrBlockTask+0x90>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <prvProcessTimerOrBlockTask+0x50>
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <prvProcessTimerOrBlockTask+0x52>
 80025ac:	2300      	movs	r3, #0
 80025ae:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80025b0:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <prvProcessTimerOrBlockTask+0x94>)
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	4619      	mov	r1, r3
 80025be:	f7fe fe17 	bl	80011f0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80025c2:	f7ff f80f 	bl	80015e4 <xTaskResumeAll>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10a      	bne.n	80025e2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80025cc:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <prvProcessTimerOrBlockTask+0x98>)
 80025ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	f3bf 8f6f 	isb	sy
    }
 80025dc:	e001      	b.n	80025e2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80025de:	f7ff f801 	bl	80015e4 <xTaskResumeAll>
    }
 80025e2:	bf00      	nop
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20012d8c 	.word	0x20012d8c
 80025f0:	20012d90 	.word	0x20012d90
 80025f4:	e000ed04 	.word	0xe000ed04

080025f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002600:	4b0e      	ldr	r3, [pc, #56]	; (800263c <prvGetNextExpireTime+0x44>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <prvGetNextExpireTime+0x16>
 800260a:	2201      	movs	r2, #1
 800260c:	e000      	b.n	8002610 <prvGetNextExpireTime+0x18>
 800260e:	2200      	movs	r2, #0
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d105      	bne.n	8002628 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800261c:	4b07      	ldr	r3, [pc, #28]	; (800263c <prvGetNextExpireTime+0x44>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	e001      	b.n	800262c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800262c:	68fb      	ldr	r3, [r7, #12]
    }
 800262e:	4618      	mov	r0, r3
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	20012d88 	.word	0x20012d88

08002640 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002648:	f7ff f8c6 	bl	80017d8 <xTaskGetTickCount>
 800264c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800264e:	4b0b      	ldr	r3, [pc, #44]	; (800267c <prvSampleTimeNow+0x3c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	429a      	cmp	r2, r3
 8002656:	d205      	bcs.n	8002664 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002658:	f000 f910 	bl	800287c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	e002      	b.n	800266a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800266a:	4a04      	ldr	r2, [pc, #16]	; (800267c <prvSampleTimeNow+0x3c>)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002670:	68fb      	ldr	r3, [r7, #12]
    }
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20012d98 	.word	0x20012d98

08002680 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
 800268c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d812      	bhi.n	80026cc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	1ad2      	subs	r2, r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d302      	bcc.n	80026ba <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80026b4:	2301      	movs	r3, #1
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	e01b      	b.n	80026f2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80026ba:	4b10      	ldr	r3, [pc, #64]	; (80026fc <prvInsertTimerInActiveList+0x7c>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	3304      	adds	r3, #4
 80026c2:	4619      	mov	r1, r3
 80026c4:	4610      	mov	r0, r2
 80026c6:	f7fd feb8 	bl	800043a <vListInsert>
 80026ca:	e012      	b.n	80026f2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d206      	bcs.n	80026e2 <prvInsertTimerInActiveList+0x62>
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d302      	bcc.n	80026e2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80026dc:	2301      	movs	r3, #1
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	e007      	b.n	80026f2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80026e2:	4b07      	ldr	r3, [pc, #28]	; (8002700 <prvInsertTimerInActiveList+0x80>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	3304      	adds	r3, #4
 80026ea:	4619      	mov	r1, r3
 80026ec:	4610      	mov	r0, r2
 80026ee:	f7fd fea4 	bl	800043a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80026f2:	697b      	ldr	r3, [r7, #20]
    }
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20012d8c 	.word	0x20012d8c
 8002700:	20012d88 	.word	0x20012d88

08002704 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800270a:	e0a5      	b.n	8002858 <prvProcessReceivedCommands+0x154>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	f2c0 80a2 	blt.w	8002858 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d004      	beq.n	800272a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	3304      	adds	r3, #4
 8002724:	4618      	mov	r0, r3
 8002726:	f7fd fec1 	bl	80004ac <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800272a:	1d3b      	adds	r3, r7, #4
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ff87 	bl	8002640 <prvSampleTimeNow>
 8002732:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	3b01      	subs	r3, #1
 8002738:	2b08      	cmp	r3, #8
 800273a:	f200 808c 	bhi.w	8002856 <prvProcessReceivedCommands+0x152>
 800273e:	a201      	add	r2, pc, #4	; (adr r2, 8002744 <prvProcessReceivedCommands+0x40>)
 8002740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002744:	08002769 	.word	0x08002769
 8002748:	08002769 	.word	0x08002769
 800274c:	080027d1 	.word	0x080027d1
 8002750:	080027e5 	.word	0x080027e5
 8002754:	0800282d 	.word	0x0800282d
 8002758:	08002769 	.word	0x08002769
 800275c:	08002769 	.word	0x08002769
 8002760:	080027d1 	.word	0x080027d1
 8002764:	080027e5 	.word	0x080027e5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	b2da      	uxtb	r2, r3
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	18d1      	adds	r1, r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	69f8      	ldr	r0, [r7, #28]
 8002788:	f7ff ff7a 	bl	8002680 <prvInsertTimerInActiveList>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d062      	beq.n	8002858 <prvProcessReceivedCommands+0x154>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	d009      	beq.n	80027b4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	4413      	add	r3, r2
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4619      	mov	r1, r3
 80027ac:	69f8      	ldr	r0, [r7, #28]
 80027ae:	f7ff fe73 	bl	8002498 <prvReloadTimer>
 80027b2:	e008      	b.n	80027c6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027ba:	f023 0301 	bic.w	r3, r3, #1
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	69f8      	ldr	r0, [r7, #28]
 80027cc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80027ce:	e043      	b.n	8002858 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027d6:	f023 0301 	bic.w	r3, r3, #1
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80027e2:	e039      	b.n	8002858 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d109      	bne.n	8002818 <prvProcessReceivedCommands+0x114>
 8002804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002808:	f383 8811 	msr	BASEPRI, r3
 800280c:	f3bf 8f6f 	isb	sy
 8002810:	f3bf 8f4f 	dsb	sy
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	e7fe      	b.n	8002816 <prvProcessReceivedCommands+0x112>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	699a      	ldr	r2, [r3, #24]
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	18d1      	adds	r1, r2, r3
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	69f8      	ldr	r0, [r7, #28]
 8002826:	f7ff ff2b 	bl	8002680 <prvInsertTimerInActiveList>
                        break;
 800282a:	e015      	b.n	8002858 <prvProcessReceivedCommands+0x154>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d103      	bne.n	8002842 <prvProcessReceivedCommands+0x13e>
                            {
                                vPortFree( pxTimer );
 800283a:	69f8      	ldr	r0, [r7, #28]
 800283c:	f7fe f91c 	bl	8000a78 <vPortFree>
 8002840:	e00a      	b.n	8002858 <prvProcessReceivedCommands+0x154>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002848:	f023 0301 	bic.w	r3, r3, #1
 800284c:	b2da      	uxtb	r2, r3
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002854:	e000      	b.n	8002858 <prvProcessReceivedCommands+0x154>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002856:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002858:	4b07      	ldr	r3, [pc, #28]	; (8002878 <prvProcessReceivedCommands+0x174>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f107 0108 	add.w	r1, r7, #8
 8002860:	2200      	movs	r2, #0
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fb0c 	bl	8000e80 <xQueueReceive>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	f47f af4e 	bne.w	800270c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002870:	bf00      	nop
 8002872:	3720      	adds	r7, #32
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20012d90 	.word	0x20012d90

0800287c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002882:	e009      	b.n	8002898 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002884:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <prvSwitchTimerLists+0x44>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	607b      	str	r3, [r7, #4]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800288e:	f04f 31ff 	mov.w	r1, #4294967295
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff fe20 	bl	80024d8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002898:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <prvSwitchTimerLists+0x44>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80028a2:	4b07      	ldr	r3, [pc, #28]	; (80028c0 <prvSwitchTimerLists+0x44>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	603b      	str	r3, [r7, #0]
        pxCurrentTimerList = pxOverflowTimerList;
 80028a8:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <prvSwitchTimerLists+0x48>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a04      	ldr	r2, [pc, #16]	; (80028c0 <prvSwitchTimerLists+0x44>)
 80028ae:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80028b0:	4a04      	ldr	r2, [pc, #16]	; (80028c4 <prvSwitchTimerLists+0x48>)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	6013      	str	r3, [r2, #0]
    }
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20012d88 	.word	0x20012d88
 80028c4:	20012d8c 	.word	0x20012d8c

080028c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80028cc:	f7fd ff40 	bl	8000750 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80028d0:	4b12      	ldr	r3, [pc, #72]	; (800291c <prvCheckForValidListAndQueue+0x54>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d11d      	bne.n	8002914 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80028d8:	4811      	ldr	r0, [pc, #68]	; (8002920 <prvCheckForValidListAndQueue+0x58>)
 80028da:	f7fd fd81 	bl	80003e0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80028de:	4811      	ldr	r0, [pc, #68]	; (8002924 <prvCheckForValidListAndQueue+0x5c>)
 80028e0:	f7fd fd7e 	bl	80003e0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80028e4:	4b10      	ldr	r3, [pc, #64]	; (8002928 <prvCheckForValidListAndQueue+0x60>)
 80028e6:	4a0e      	ldr	r2, [pc, #56]	; (8002920 <prvCheckForValidListAndQueue+0x58>)
 80028e8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80028ea:	4b10      	ldr	r3, [pc, #64]	; (800292c <prvCheckForValidListAndQueue+0x64>)
 80028ec:	4a0d      	ldr	r2, [pc, #52]	; (8002924 <prvCheckForValidListAndQueue+0x5c>)
 80028ee:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80028f0:	2200      	movs	r2, #0
 80028f2:	210c      	movs	r1, #12
 80028f4:	200a      	movs	r0, #10
 80028f6:	f7fe fa55 	bl	8000da4 <xQueueGenericCreate>
 80028fa:	4602      	mov	r2, r0
 80028fc:	4b07      	ldr	r3, [pc, #28]	; (800291c <prvCheckForValidListAndQueue+0x54>)
 80028fe:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002900:	4b06      	ldr	r3, [pc, #24]	; (800291c <prvCheckForValidListAndQueue+0x54>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002908:	4b04      	ldr	r3, [pc, #16]	; (800291c <prvCheckForValidListAndQueue+0x54>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4908      	ldr	r1, [pc, #32]	; (8002930 <prvCheckForValidListAndQueue+0x68>)
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe fc20 	bl	8001154 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002914:	f7fd ff4a 	bl	80007ac <vPortExitCritical>
    }
 8002918:	bf00      	nop
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20012d90 	.word	0x20012d90
 8002920:	20012d60 	.word	0x20012d60
 8002924:	20012d74 	.word	0x20012d74
 8002928:	20012d88 	.word	0x20012d88
 800292c:	20012d8c 	.word	0x20012d8c
 8002930:	08002e2c 	.word	0x08002e2c

08002934 <main>:
void GPIO_Config(void);
TaskHandle_t ReadButtonHandle = NULL;
TaskHandle_t LedFlashHandle = NULL ;
uint8_t count = 0;
int main(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af02      	add	r7, sp, #8
  RCC_DeInit();   // HSE OFF | HSI ON |	PLL OFF |
 800293a:	f7fd fd03 	bl	8000344 <RCC_DeInit>
  SystemCoreClockUpdate(); // SYSTEM CLOCK 16 MHz
 800293e:	f000 f931 	bl	8002ba4 <SystemCoreClockUpdate>

  GPIO_Config();
 8002942:	f000 f865 	bl	8002a10 <GPIO_Config>

  xTaskCreate(ReadButtonStateTask,"Button Control",configMINIMAL_STACK_SIZE * 5,NULL,2,&ReadButtonHandle);
 8002946:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <main+0x44>)
 8002948:	9301      	str	r3, [sp, #4]
 800294a:	2302      	movs	r3, #2
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	2300      	movs	r3, #0
 8002950:	f240 228a 	movw	r2, #650	; 0x28a
 8002954:	4909      	ldr	r1, [pc, #36]	; (800297c <main+0x48>)
 8002956:	480a      	ldr	r0, [pc, #40]	; (8002980 <main+0x4c>)
 8002958:	f7fe fc7e 	bl	8001258 <xTaskCreate>
  xTaskCreate(LedFlashTask,"Led Control",configMINIMAL_STACK_SIZE * 5,NULL,2,&LedFlashHandle);
 800295c:	4b09      	ldr	r3, [pc, #36]	; (8002984 <main+0x50>)
 800295e:	9301      	str	r3, [sp, #4]
 8002960:	2302      	movs	r3, #2
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	2300      	movs	r3, #0
 8002966:	f240 228a 	movw	r2, #650	; 0x28a
 800296a:	4907      	ldr	r1, [pc, #28]	; (8002988 <main+0x54>)
 800296c:	4807      	ldr	r0, [pc, #28]	; (800298c <main+0x58>)
 800296e:	f7fe fc73 	bl	8001258 <xTaskCreate>

  vTaskStartScheduler(); // START SCHEDULAR
 8002972:	f7fe fdd9 	bl	8001528 <vTaskStartScheduler>
  while (1)
 8002976:	e7fe      	b.n	8002976 <main+0x42>
 8002978:	20012d9c 	.word	0x20012d9c
 800297c:	08002e34 	.word	0x08002e34
 8002980:	08002991 	.word	0x08002991
 8002984:	20012da0 	.word	0x20012da0
 8002988:	08002e44 	.word	0x08002e44
 800298c:	080029cd 	.word	0x080029cd

08002990 <ReadButtonStateTask>:

  }
}

void ReadButtonStateTask(void *params)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af02      	add	r7, sp, #8
 8002996:	6078      	str	r0, [r7, #4]
   while(1)
   {
      if(GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_10) == Bit_SET)
 8002998:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800299c:	4809      	ldr	r0, [pc, #36]	; (80029c4 <ReadButtonStateTask+0x34>)
 800299e:	f7fd fca5 	bl	80002ec <GPIO_ReadInputDataBit>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d1f7      	bne.n	8002998 <ReadButtonStateTask+0x8>
      {
    	 delay_FreeRTOS(150);
 80029a8:	2096      	movs	r0, #150	; 0x96
 80029aa:	f000 f861 	bl	8002a70 <delay_FreeRTOS>
         xTaskNotify(LedFlashHandle,0x00,eIncrement);
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <ReadButtonStateTask+0x38>)
 80029b0:	6818      	ldr	r0, [r3, #0]
 80029b2:	2300      	movs	r3, #0
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	2302      	movs	r3, #2
 80029b8:	2200      	movs	r2, #0
 80029ba:	2100      	movs	r1, #0
 80029bc:	f7ff fb9c 	bl	80020f8 <xTaskGenericNotify>
      if(GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_10) == Bit_SET)
 80029c0:	e7ea      	b.n	8002998 <ReadButtonStateTask+0x8>
 80029c2:	bf00      	nop
 80029c4:	40020800 	.word	0x40020800
 80029c8:	20012da0 	.word	0x20012da0

080029cc <LedFlashTask>:
      }
   }
}
void LedFlashTask(void *params)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	6078      	str	r0, [r7, #4]
	uint32_t pulNotificationValue = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]
	   while(1)
	 {
         if(xTaskNotifyWait(0,0,&pulNotificationValue,portMAX_DELAY) == pdTRUE)
 80029d8:	f107 020c 	add.w	r2, r7, #12
 80029dc:	f04f 33ff 	mov.w	r3, #4294967295
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	4613      	mov	r3, r2
 80029e4:	2200      	movs	r2, #0
 80029e6:	2100      	movs	r1, #0
 80029e8:	2000      	movs	r0, #0
 80029ea:	f7ff fb07 	bl	8001ffc <xTaskGenericNotifyWait>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d1f1      	bne.n	80029d8 <LedFlashTask+0xc>
         {
              GPIO_ToggleBits(GPIOC,GPIO_Pin_0|GPIO_Pin_1 |GPIO_Pin_2|GPIO_Pin_3);
 80029f4:	210f      	movs	r1, #15
 80029f6:	4804      	ldr	r0, [pc, #16]	; (8002a08 <LedFlashTask+0x3c>)
 80029f8:	f7fd fc92 	bl	8000320 <GPIO_ToggleBits>
              count = pulNotificationValue;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	4b02      	ldr	r3, [pc, #8]	; (8002a0c <LedFlashTask+0x40>)
 8002a02:	701a      	strb	r2, [r3, #0]
         if(xTaskNotifyWait(0,0,&pulNotificationValue,portMAX_DELAY) == pdTRUE)
 8002a04:	e7e8      	b.n	80029d8 <LedFlashTask+0xc>
 8002a06:	bf00      	nop
 8002a08:	40020800 	.word	0x40020800
 8002a0c:	20012da4 	.word	0x20012da4

08002a10 <GPIO_Config>:
         }
	 }
}

void GPIO_Config(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);
 8002a16:	2101      	movs	r1, #1
 8002a18:	2004      	movs	r0, #4
 8002a1a:	f7fd fcc1 	bl	80003a0 <RCC_AHB1PeriphClockCmd>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1e:	463b      	mov	r3, r7
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1 |GPIO_Pin_2|GPIO_Pin_3;
 8002a26:	230f      	movs	r3, #15
 8002a28:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	713b      	strb	r3, [r7, #4]
  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8002a36:	2303      	movs	r3, #3
 8002a38:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOC,&GPIO_InitStruct);
 8002a3a:	463b      	mov	r3, r7
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	480b      	ldr	r0, [pc, #44]	; (8002a6c <GPIO_Config+0x5c>)
 8002a40:	f7fd fbc6 	bl	80001d0 <GPIO_Init>


  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10;
 8002a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a48:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	713b      	strb	r3, [r7, #4]
  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8002a52:	2302      	movs	r3, #2
 8002a54:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8002a56:	2303      	movs	r3, #3
 8002a58:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOC,&GPIO_InitStruct);
 8002a5a:	463b      	mov	r3, r7
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4803      	ldr	r0, [pc, #12]	; (8002a6c <GPIO_Config+0x5c>)
 8002a60:	f7fd fbb6 	bl	80001d0 <GPIO_Init>

}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40020800 	.word	0x40020800

08002a70 <delay_FreeRTOS>:
void delay_FreeRTOS(uint32_t delayMS)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t currenTick = xTaskGetTickCount();
 8002a78:	f7fe feae 	bl	80017d8 <xTaskGetTickCount>
 8002a7c:	60f8      	str	r0, [r7, #12]
  uint32_t delayTick = pdMS_TO_TICKS(delayMS);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a84:	fb02 f303 	mul.w	r3, r2, r3
 8002a88:	4a08      	ldr	r2, [pc, #32]	; (8002aac <delay_FreeRTOS+0x3c>)
 8002a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8e:	099b      	lsrs	r3, r3, #6
 8002a90:	60bb      	str	r3, [r7, #8]

  while(xTaskGetTickCount() < (currenTick + delayTick)); // Wait Until Current tick gets equal to delay tick
 8002a92:	bf00      	nop
 8002a94:	f7fe fea0 	bl	80017d8 <xTaskGetTickCount>
 8002a98:	4601      	mov	r1, r0
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	4299      	cmp	r1, r3
 8002aa2:	d3f7      	bcc.n	8002a94 <delay_FreeRTOS+0x24>


}
 8002aa4:	bf00      	nop
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	10624dd3 	.word	0x10624dd3

08002ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ab0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ae8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ab4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ab6:	e003      	b.n	8002ac0 <LoopCopyDataInit>

08002ab8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ab8:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002aba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002abc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002abe:	3104      	adds	r1, #4

08002ac0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ac0:	480b      	ldr	r0, [pc, #44]	; (8002af0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002ac2:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ac4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ac6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ac8:	d3f6      	bcc.n	8002ab8 <CopyDataInit>
  ldr  r2, =_sbss
 8002aca:	4a0b      	ldr	r2, [pc, #44]	; (8002af8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002acc:	e002      	b.n	8002ad4 <LoopFillZerobss>

08002ace <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ace:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ad0:	f842 3b04 	str.w	r3, [r2], #4

08002ad4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ad4:	4b09      	ldr	r3, [pc, #36]	; (8002afc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002ad6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ad8:	d3f9      	bcc.n	8002ace <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ada:	f000 f82d 	bl	8002b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ade:	f000 f959 	bl	8002d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ae2:	f7ff ff27 	bl	8002934 <main>
  bx  lr    
 8002ae6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ae8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002aec:	08002e58 	.word	0x08002e58
  ldr  r0, =_sdata
 8002af0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002af4:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8002af8:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8002afc:	20012de8 	.word	0x20012de8

08002b00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b00:	e7fe      	b.n	8002b00 <ADC_IRQHandler>

08002b02 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002b02:	b480      	push	{r7}
 8002b04:	af00      	add	r7, sp, #0
}
 8002b06:	bf00      	nop
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002b14:	e7fe      	b.n	8002b14 <HardFault_Handler+0x4>

08002b16 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002b16:	b480      	push	{r7}
 8002b18:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002b1a:	e7fe      	b.n	8002b1a <MemManage_Handler+0x4>

08002b1c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002b20:	e7fe      	b.n	8002b20 <BusFault_Handler+0x4>

08002b22 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002b22:	b480      	push	{r7}
 8002b24:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002b26:	e7fe      	b.n	8002b26 <UsageFault_Handler+0x4>

08002b28 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b3c:	4a16      	ldr	r2, [pc, #88]	; (8002b98 <SystemInit+0x60>)
 8002b3e:	4b16      	ldr	r3, [pc, #88]	; (8002b98 <SystemInit+0x60>)
 8002b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002b4c:	4a13      	ldr	r2, [pc, #76]	; (8002b9c <SystemInit+0x64>)
 8002b4e:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <SystemInit+0x64>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002b58:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <SystemInit+0x64>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002b5e:	4a0f      	ldr	r2, [pc, #60]	; (8002b9c <SystemInit+0x64>)
 8002b60:	4b0e      	ldr	r3, [pc, #56]	; (8002b9c <SystemInit+0x64>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002b68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b6c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <SystemInit+0x64>)
 8002b70:	4a0b      	ldr	r2, [pc, #44]	; (8002ba0 <SystemInit+0x68>)
 8002b72:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002b74:	4a09      	ldr	r2, [pc, #36]	; (8002b9c <SystemInit+0x64>)
 8002b76:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <SystemInit+0x64>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <SystemInit+0x64>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002b86:	f000 f889 	bl	8002c9c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b8a:	4b03      	ldr	r3, [pc, #12]	; (8002b98 <SystemInit+0x60>)
 8002b8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b90:	609a      	str	r2, [r3, #8]
#endif
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	e000ed00 	.word	0xe000ed00
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	24003010 	.word	0x24003010

08002ba4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002baa:	2300      	movs	r3, #0
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	2302      	movs	r3, #2
 8002bbc:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002bbe:	4b32      	ldr	r3, [pc, #200]	; (8002c88 <SystemCoreClockUpdate+0xe4>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d007      	beq.n	8002bde <SystemCoreClockUpdate+0x3a>
 8002bce:	2b08      	cmp	r3, #8
 8002bd0:	d009      	beq.n	8002be6 <SystemCoreClockUpdate+0x42>
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d13d      	bne.n	8002c52 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002bd6:	4b2d      	ldr	r3, [pc, #180]	; (8002c8c <SystemCoreClockUpdate+0xe8>)
 8002bd8:	4a2d      	ldr	r2, [pc, #180]	; (8002c90 <SystemCoreClockUpdate+0xec>)
 8002bda:	601a      	str	r2, [r3, #0]
      break;
 8002bdc:	e03d      	b.n	8002c5a <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002bde:	4b2b      	ldr	r3, [pc, #172]	; (8002c8c <SystemCoreClockUpdate+0xe8>)
 8002be0:	4a2c      	ldr	r2, [pc, #176]	; (8002c94 <SystemCoreClockUpdate+0xf0>)
 8002be2:	601a      	str	r2, [r3, #0]
      break;
 8002be4:	e039      	b.n	8002c5a <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002be6:	4b28      	ldr	r3, [pc, #160]	; (8002c88 <SystemCoreClockUpdate+0xe4>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	0d9b      	lsrs	r3, r3, #22
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bf2:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <SystemCoreClockUpdate+0xe4>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bfa:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00c      	beq.n	8002c1c <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002c02:	4a24      	ldr	r2, [pc, #144]	; (8002c94 <SystemCoreClockUpdate+0xf0>)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0a:	4a1f      	ldr	r2, [pc, #124]	; (8002c88 <SystemCoreClockUpdate+0xe4>)
 8002c0c:	6852      	ldr	r2, [r2, #4]
 8002c0e:	0992      	lsrs	r2, r2, #6
 8002c10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c14:	fb02 f303 	mul.w	r3, r2, r3
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	e00b      	b.n	8002c34 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8002c1c:	4a1c      	ldr	r2, [pc, #112]	; (8002c90 <SystemCoreClockUpdate+0xec>)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c24:	4a18      	ldr	r2, [pc, #96]	; (8002c88 <SystemCoreClockUpdate+0xe4>)
 8002c26:	6852      	ldr	r2, [r2, #4]
 8002c28:	0992      	lsrs	r2, r2, #6
 8002c2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c2e:	fb02 f303 	mul.w	r3, r2, r3
 8002c32:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002c34:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <SystemCoreClockUpdate+0xe4>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	0c1b      	lsrs	r3, r3, #16
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	3301      	adds	r3, #1
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4c:	4a0f      	ldr	r2, [pc, #60]	; (8002c8c <SystemCoreClockUpdate+0xe8>)
 8002c4e:	6013      	str	r3, [r2, #0]
      break;
 8002c50:	e003      	b.n	8002c5a <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8002c52:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <SystemCoreClockUpdate+0xe8>)
 8002c54:	4a0e      	ldr	r2, [pc, #56]	; (8002c90 <SystemCoreClockUpdate+0xec>)
 8002c56:	601a      	str	r2, [r3, #0]
      break;
 8002c58:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002c5a:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <SystemCoreClockUpdate+0xe4>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	091b      	lsrs	r3, r3, #4
 8002c60:	f003 030f 	and.w	r3, r3, #15
 8002c64:	4a0c      	ldr	r2, [pc, #48]	; (8002c98 <SystemCoreClockUpdate+0xf4>)
 8002c66:	5cd3      	ldrb	r3, [r2, r3]
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002c6c:	4b07      	ldr	r3, [pc, #28]	; (8002c8c <SystemCoreClockUpdate+0xe8>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	fa22 f303 	lsr.w	r3, r2, r3
 8002c76:	4a05      	ldr	r2, [pc, #20]	; (8002c8c <SystemCoreClockUpdate+0xe8>)
 8002c78:	6013      	str	r3, [r2, #0]
}
 8002c7a:	bf00      	nop
 8002c7c:	371c      	adds	r7, #28
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	20000008 	.word	0x20000008
 8002c90:	00f42400 	.word	0x00f42400
 8002c94:	017d7840 	.word	0x017d7840
 8002c98:	2000000c 	.word	0x2000000c

08002c9c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	607b      	str	r3, [r7, #4]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002caa:	4a36      	ldr	r2, [pc, #216]	; (8002d84 <SetSysClock+0xe8>)
 8002cac:	4b35      	ldr	r3, [pc, #212]	; (8002d84 <SetSysClock+0xe8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002cb6:	4b33      	ldr	r3, [pc, #204]	; (8002d84 <SetSysClock+0xe8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d103      	bne.n	8002cd4 <SetSysClock+0x38>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002cd2:	d1f0      	bne.n	8002cb6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002cd4:	4b2b      	ldr	r3, [pc, #172]	; (8002d84 <SetSysClock+0xe8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	e001      	b.n	8002cea <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d142      	bne.n	8002d76 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002cf0:	4a24      	ldr	r2, [pc, #144]	; (8002d84 <SetSysClock+0xe8>)
 8002cf2:	4b24      	ldr	r3, [pc, #144]	; (8002d84 <SetSysClock+0xe8>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfa:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8002cfc:	4a22      	ldr	r2, [pc, #136]	; (8002d88 <SetSysClock+0xec>)
 8002cfe:	4b22      	ldr	r3, [pc, #136]	; (8002d88 <SetSysClock+0xec>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d06:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002d08:	4a1e      	ldr	r2, [pc, #120]	; (8002d84 <SetSysClock+0xe8>)
 8002d0a:	4b1e      	ldr	r3, [pc, #120]	; (8002d84 <SetSysClock+0xe8>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002d10:	4a1c      	ldr	r2, [pc, #112]	; (8002d84 <SetSysClock+0xe8>)
 8002d12:	4b1c      	ldr	r3, [pc, #112]	; (8002d84 <SetSysClock+0xe8>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d1a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002d1c:	4a19      	ldr	r2, [pc, #100]	; (8002d84 <SetSysClock+0xe8>)
 8002d1e:	4b19      	ldr	r3, [pc, #100]	; (8002d84 <SetSysClock+0xe8>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002d26:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002d28:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <SetSysClock+0xe8>)
 8002d2a:	4a18      	ldr	r2, [pc, #96]	; (8002d8c <SetSysClock+0xf0>)
 8002d2c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002d2e:	4a15      	ldr	r2, [pc, #84]	; (8002d84 <SetSysClock+0xe8>)
 8002d30:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <SetSysClock+0xe8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d38:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002d3a:	bf00      	nop
 8002d3c:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <SetSysClock+0xe8>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f9      	beq.n	8002d3c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002d48:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <SetSysClock+0xf4>)
 8002d4a:	f240 7205 	movw	r2, #1797	; 0x705
 8002d4e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002d50:	4a0c      	ldr	r2, [pc, #48]	; (8002d84 <SetSysClock+0xe8>)
 8002d52:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <SetSysClock+0xe8>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f023 0303 	bic.w	r3, r3, #3
 8002d5a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002d5c:	4a09      	ldr	r2, [pc, #36]	; (8002d84 <SetSysClock+0xe8>)
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <SetSysClock+0xe8>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f043 0302 	orr.w	r3, r3, #2
 8002d66:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002d68:	bf00      	nop
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <SetSysClock+0xe8>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d1f9      	bne.n	8002d6a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40007000 	.word	0x40007000
 8002d8c:	07405419 	.word	0x07405419
 8002d90:	40023c00 	.word	0x40023c00

08002d94 <__libc_init_array>:
 8002d94:	b570      	push	{r4, r5, r6, lr}
 8002d96:	4e0d      	ldr	r6, [pc, #52]	; (8002dcc <__libc_init_array+0x38>)
 8002d98:	4c0d      	ldr	r4, [pc, #52]	; (8002dd0 <__libc_init_array+0x3c>)
 8002d9a:	1ba4      	subs	r4, r4, r6
 8002d9c:	10a4      	asrs	r4, r4, #2
 8002d9e:	2500      	movs	r5, #0
 8002da0:	42a5      	cmp	r5, r4
 8002da2:	d109      	bne.n	8002db8 <__libc_init_array+0x24>
 8002da4:	4e0b      	ldr	r6, [pc, #44]	; (8002dd4 <__libc_init_array+0x40>)
 8002da6:	4c0c      	ldr	r4, [pc, #48]	; (8002dd8 <__libc_init_array+0x44>)
 8002da8:	f000 f82c 	bl	8002e04 <_init>
 8002dac:	1ba4      	subs	r4, r4, r6
 8002dae:	10a4      	asrs	r4, r4, #2
 8002db0:	2500      	movs	r5, #0
 8002db2:	42a5      	cmp	r5, r4
 8002db4:	d105      	bne.n	8002dc2 <__libc_init_array+0x2e>
 8002db6:	bd70      	pop	{r4, r5, r6, pc}
 8002db8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002dbc:	4798      	blx	r3
 8002dbe:	3501      	adds	r5, #1
 8002dc0:	e7ee      	b.n	8002da0 <__libc_init_array+0xc>
 8002dc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002dc6:	4798      	blx	r3
 8002dc8:	3501      	adds	r5, #1
 8002dca:	e7f2      	b.n	8002db2 <__libc_init_array+0x1e>
 8002dcc:	08002e50 	.word	0x08002e50
 8002dd0:	08002e50 	.word	0x08002e50
 8002dd4:	08002e50 	.word	0x08002e50
 8002dd8:	08002e54 	.word	0x08002e54

08002ddc <memcpy>:
 8002ddc:	b510      	push	{r4, lr}
 8002dde:	1e43      	subs	r3, r0, #1
 8002de0:	440a      	add	r2, r1
 8002de2:	4291      	cmp	r1, r2
 8002de4:	d100      	bne.n	8002de8 <memcpy+0xc>
 8002de6:	bd10      	pop	{r4, pc}
 8002de8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002dec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002df0:	e7f7      	b.n	8002de2 <memcpy+0x6>

08002df2 <memset>:
 8002df2:	4402      	add	r2, r0
 8002df4:	4603      	mov	r3, r0
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d100      	bne.n	8002dfc <memset+0xa>
 8002dfa:	4770      	bx	lr
 8002dfc:	f803 1b01 	strb.w	r1, [r3], #1
 8002e00:	e7f9      	b.n	8002df6 <memset+0x4>
	...

08002e04 <_init>:
 8002e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e06:	bf00      	nop
 8002e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e0a:	bc08      	pop	{r3}
 8002e0c:	469e      	mov	lr, r3
 8002e0e:	4770      	bx	lr

08002e10 <_fini>:
 8002e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e12:	bf00      	nop
 8002e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e16:	bc08      	pop	{r3}
 8002e18:	469e      	mov	lr, r3
 8002e1a:	4770      	bx	lr
