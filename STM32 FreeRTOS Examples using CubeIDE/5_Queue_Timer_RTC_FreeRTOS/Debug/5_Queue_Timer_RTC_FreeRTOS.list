
5_Queue_Timer_RTC_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae2c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  0800afcc  0800afcc  0001afcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b51c  0800b51c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b51c  0800b51c  0001b51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b524  0800b524  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b524  0800b524  0001b524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b528  0800b528  0001b528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800b52c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d594  2000008c  0800b5b8  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d620  0800b5b8  0002d620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dddb  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000409e  00000000  00000000  0003de97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001918  00000000  00000000  00041f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001750  00000000  00000000  00043850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b95e  00000000  00000000  00044fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d8b1  00000000  00000000  000608fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4676  00000000  00000000  0007e1af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00122825  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000721c  00000000  00000000  00122878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800afb4 	.word	0x0800afb4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	0800afb4 	.word	0x0800afb4

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	2000cc38 	.word	0x2000cc38

08000274 <strcmp>:
 8000274:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
 800027c:	2a01      	cmp	r2, #1
 800027e:	bf28      	it	cs
 8000280:	429a      	cmpcs	r2, r3
 8000282:	d0f7      	beq.n	8000274 <strcmp>
 8000284:	1ad0      	subs	r0, r2, r3
 8000286:	4770      	bx	lr

08000288 <strlen>:
 8000288:	4603      	mov	r3, r0
 800028a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028e:	2a00      	cmp	r2, #0
 8000290:	d1fb      	bne.n	800028a <strlen+0x2>
 8000292:	1a18      	subs	r0, r3, r0
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
	...

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295
 8000350:	f04f 30ff 	movne.w	r0, #4294967295
 8000354:	f000 b974 	b.w	8000640 <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9d08      	ldr	r5, [sp, #32]
 8000376:	4604      	mov	r4, r0
 8000378:	468e      	mov	lr, r1
 800037a:	2b00      	cmp	r3, #0
 800037c:	d14d      	bne.n	800041a <__udivmoddi4+0xaa>
 800037e:	428a      	cmp	r2, r1
 8000380:	4694      	mov	ip, r2
 8000382:	d969      	bls.n	8000458 <__udivmoddi4+0xe8>
 8000384:	fab2 f282 	clz	r2, r2
 8000388:	b152      	cbz	r2, 80003a0 <__udivmoddi4+0x30>
 800038a:	fa01 f302 	lsl.w	r3, r1, r2
 800038e:	f1c2 0120 	rsb	r1, r2, #32
 8000392:	fa20 f101 	lsr.w	r1, r0, r1
 8000396:	fa0c fc02 	lsl.w	ip, ip, r2
 800039a:	ea41 0e03 	orr.w	lr, r1, r3
 800039e:	4094      	lsls	r4, r2
 80003a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003a4:	0c21      	lsrs	r1, r4, #16
 80003a6:	fbbe f6f8 	udiv	r6, lr, r8
 80003aa:	fa1f f78c 	uxth.w	r7, ip
 80003ae:	fb08 e316 	mls	r3, r8, r6, lr
 80003b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003b6:	fb06 f107 	mul.w	r1, r6, r7
 80003ba:	4299      	cmp	r1, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x64>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003c6:	f080 811f 	bcs.w	8000608 <__udivmoddi4+0x298>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 811c 	bls.w	8000608 <__udivmoddi4+0x298>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	4463      	add	r3, ip
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003dc:	fb08 3310 	mls	r3, r8, r0, r3
 80003e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003e4:	fb00 f707 	mul.w	r7, r0, r7
 80003e8:	42a7      	cmp	r7, r4
 80003ea:	d90a      	bls.n	8000402 <__udivmoddi4+0x92>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f4:	f080 810a 	bcs.w	800060c <__udivmoddi4+0x29c>
 80003f8:	42a7      	cmp	r7, r4
 80003fa:	f240 8107 	bls.w	800060c <__udivmoddi4+0x29c>
 80003fe:	4464      	add	r4, ip
 8000400:	3802      	subs	r0, #2
 8000402:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000406:	1be4      	subs	r4, r4, r7
 8000408:	2600      	movs	r6, #0
 800040a:	b11d      	cbz	r5, 8000414 <__udivmoddi4+0xa4>
 800040c:	40d4      	lsrs	r4, r2
 800040e:	2300      	movs	r3, #0
 8000410:	e9c5 4300 	strd	r4, r3, [r5]
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	428b      	cmp	r3, r1
 800041c:	d909      	bls.n	8000432 <__udivmoddi4+0xc2>
 800041e:	2d00      	cmp	r5, #0
 8000420:	f000 80ef 	beq.w	8000602 <__udivmoddi4+0x292>
 8000424:	2600      	movs	r6, #0
 8000426:	e9c5 0100 	strd	r0, r1, [r5]
 800042a:	4630      	mov	r0, r6
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	fab3 f683 	clz	r6, r3
 8000436:	2e00      	cmp	r6, #0
 8000438:	d14a      	bne.n	80004d0 <__udivmoddi4+0x160>
 800043a:	428b      	cmp	r3, r1
 800043c:	d302      	bcc.n	8000444 <__udivmoddi4+0xd4>
 800043e:	4282      	cmp	r2, r0
 8000440:	f200 80f9 	bhi.w	8000636 <__udivmoddi4+0x2c6>
 8000444:	1a84      	subs	r4, r0, r2
 8000446:	eb61 0303 	sbc.w	r3, r1, r3
 800044a:	2001      	movs	r0, #1
 800044c:	469e      	mov	lr, r3
 800044e:	2d00      	cmp	r5, #0
 8000450:	d0e0      	beq.n	8000414 <__udivmoddi4+0xa4>
 8000452:	e9c5 4e00 	strd	r4, lr, [r5]
 8000456:	e7dd      	b.n	8000414 <__udivmoddi4+0xa4>
 8000458:	b902      	cbnz	r2, 800045c <__udivmoddi4+0xec>
 800045a:	deff      	udf	#255	; 0xff
 800045c:	fab2 f282 	clz	r2, r2
 8000460:	2a00      	cmp	r2, #0
 8000462:	f040 8092 	bne.w	800058a <__udivmoddi4+0x21a>
 8000466:	eba1 010c 	sub.w	r1, r1, ip
 800046a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800046e:	fa1f fe8c 	uxth.w	lr, ip
 8000472:	2601      	movs	r6, #1
 8000474:	0c20      	lsrs	r0, r4, #16
 8000476:	fbb1 f3f7 	udiv	r3, r1, r7
 800047a:	fb07 1113 	mls	r1, r7, r3, r1
 800047e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000482:	fb0e f003 	mul.w	r0, lr, r3
 8000486:	4288      	cmp	r0, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x12c>
 800048a:	eb1c 0101 	adds.w	r1, ip, r1
 800048e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x12a>
 8000494:	4288      	cmp	r0, r1
 8000496:	f200 80cb 	bhi.w	8000630 <__udivmoddi4+0x2c0>
 800049a:	4643      	mov	r3, r8
 800049c:	1a09      	subs	r1, r1, r0
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a4:	fb07 1110 	mls	r1, r7, r0, r1
 80004a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ac:	fb0e fe00 	mul.w	lr, lr, r0
 80004b0:	45a6      	cmp	lr, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x156>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004bc:	d202      	bcs.n	80004c4 <__udivmoddi4+0x154>
 80004be:	45a6      	cmp	lr, r4
 80004c0:	f200 80bb 	bhi.w	800063a <__udivmoddi4+0x2ca>
 80004c4:	4608      	mov	r0, r1
 80004c6:	eba4 040e 	sub.w	r4, r4, lr
 80004ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ce:	e79c      	b.n	800040a <__udivmoddi4+0x9a>
 80004d0:	f1c6 0720 	rsb	r7, r6, #32
 80004d4:	40b3      	lsls	r3, r6
 80004d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004da:	ea4c 0c03 	orr.w	ip, ip, r3
 80004de:	fa20 f407 	lsr.w	r4, r0, r7
 80004e2:	fa01 f306 	lsl.w	r3, r1, r6
 80004e6:	431c      	orrs	r4, r3
 80004e8:	40f9      	lsrs	r1, r7
 80004ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ee:	fa00 f306 	lsl.w	r3, r0, r6
 80004f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004f6:	0c20      	lsrs	r0, r4, #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000500:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000504:	fb08 f00e 	mul.w	r0, r8, lr
 8000508:	4288      	cmp	r0, r1
 800050a:	fa02 f206 	lsl.w	r2, r2, r6
 800050e:	d90b      	bls.n	8000528 <__udivmoddi4+0x1b8>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f108 3aff 	add.w	sl, r8, #4294967295
 8000518:	f080 8088 	bcs.w	800062c <__udivmoddi4+0x2bc>
 800051c:	4288      	cmp	r0, r1
 800051e:	f240 8085 	bls.w	800062c <__udivmoddi4+0x2bc>
 8000522:	f1a8 0802 	sub.w	r8, r8, #2
 8000526:	4461      	add	r1, ip
 8000528:	1a09      	subs	r1, r1, r0
 800052a:	b2a4      	uxth	r4, r4
 800052c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000530:	fb09 1110 	mls	r1, r9, r0, r1
 8000534:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000538:	fb00 fe0e 	mul.w	lr, r0, lr
 800053c:	458e      	cmp	lr, r1
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x1e2>
 8000540:	eb1c 0101 	adds.w	r1, ip, r1
 8000544:	f100 34ff 	add.w	r4, r0, #4294967295
 8000548:	d26c      	bcs.n	8000624 <__udivmoddi4+0x2b4>
 800054a:	458e      	cmp	lr, r1
 800054c:	d96a      	bls.n	8000624 <__udivmoddi4+0x2b4>
 800054e:	3802      	subs	r0, #2
 8000550:	4461      	add	r1, ip
 8000552:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000556:	fba0 9402 	umull	r9, r4, r0, r2
 800055a:	eba1 010e 	sub.w	r1, r1, lr
 800055e:	42a1      	cmp	r1, r4
 8000560:	46c8      	mov	r8, r9
 8000562:	46a6      	mov	lr, r4
 8000564:	d356      	bcc.n	8000614 <__udivmoddi4+0x2a4>
 8000566:	d053      	beq.n	8000610 <__udivmoddi4+0x2a0>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x212>
 800056a:	ebb3 0208 	subs.w	r2, r3, r8
 800056e:	eb61 010e 	sbc.w	r1, r1, lr
 8000572:	fa01 f707 	lsl.w	r7, r1, r7
 8000576:	fa22 f306 	lsr.w	r3, r2, r6
 800057a:	40f1      	lsrs	r1, r6
 800057c:	431f      	orrs	r7, r3
 800057e:	e9c5 7100 	strd	r7, r1, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	40d8      	lsrs	r0, r3
 8000590:	fa0c fc02 	lsl.w	ip, ip, r2
 8000594:	fa21 f303 	lsr.w	r3, r1, r3
 8000598:	4091      	lsls	r1, r2
 800059a:	4301      	orrs	r1, r0
 800059c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005a0:	fa1f fe8c 	uxth.w	lr, ip
 80005a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005a8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ac:	0c0b      	lsrs	r3, r1, #16
 80005ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005b2:	fb00 f60e 	mul.w	r6, r0, lr
 80005b6:	429e      	cmp	r6, r3
 80005b8:	fa04 f402 	lsl.w	r4, r4, r2
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x260>
 80005be:	eb1c 0303 	adds.w	r3, ip, r3
 80005c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005c6:	d22f      	bcs.n	8000628 <__udivmoddi4+0x2b8>
 80005c8:	429e      	cmp	r6, r3
 80005ca:	d92d      	bls.n	8000628 <__udivmoddi4+0x2b8>
 80005cc:	3802      	subs	r0, #2
 80005ce:	4463      	add	r3, ip
 80005d0:	1b9b      	subs	r3, r3, r6
 80005d2:	b289      	uxth	r1, r1
 80005d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005d8:	fb07 3316 	mls	r3, r7, r6, r3
 80005dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005e0:	fb06 f30e 	mul.w	r3, r6, lr
 80005e4:	428b      	cmp	r3, r1
 80005e6:	d908      	bls.n	80005fa <__udivmoddi4+0x28a>
 80005e8:	eb1c 0101 	adds.w	r1, ip, r1
 80005ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80005f0:	d216      	bcs.n	8000620 <__udivmoddi4+0x2b0>
 80005f2:	428b      	cmp	r3, r1
 80005f4:	d914      	bls.n	8000620 <__udivmoddi4+0x2b0>
 80005f6:	3e02      	subs	r6, #2
 80005f8:	4461      	add	r1, ip
 80005fa:	1ac9      	subs	r1, r1, r3
 80005fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000600:	e738      	b.n	8000474 <__udivmoddi4+0x104>
 8000602:	462e      	mov	r6, r5
 8000604:	4628      	mov	r0, r5
 8000606:	e705      	b.n	8000414 <__udivmoddi4+0xa4>
 8000608:	4606      	mov	r6, r0
 800060a:	e6e3      	b.n	80003d4 <__udivmoddi4+0x64>
 800060c:	4618      	mov	r0, r3
 800060e:	e6f8      	b.n	8000402 <__udivmoddi4+0x92>
 8000610:	454b      	cmp	r3, r9
 8000612:	d2a9      	bcs.n	8000568 <__udivmoddi4+0x1f8>
 8000614:	ebb9 0802 	subs.w	r8, r9, r2
 8000618:	eb64 0e0c 	sbc.w	lr, r4, ip
 800061c:	3801      	subs	r0, #1
 800061e:	e7a3      	b.n	8000568 <__udivmoddi4+0x1f8>
 8000620:	4646      	mov	r6, r8
 8000622:	e7ea      	b.n	80005fa <__udivmoddi4+0x28a>
 8000624:	4620      	mov	r0, r4
 8000626:	e794      	b.n	8000552 <__udivmoddi4+0x1e2>
 8000628:	4640      	mov	r0, r8
 800062a:	e7d1      	b.n	80005d0 <__udivmoddi4+0x260>
 800062c:	46d0      	mov	r8, sl
 800062e:	e77b      	b.n	8000528 <__udivmoddi4+0x1b8>
 8000630:	3b02      	subs	r3, #2
 8000632:	4461      	add	r1, ip
 8000634:	e732      	b.n	800049c <__udivmoddi4+0x12c>
 8000636:	4630      	mov	r0, r6
 8000638:	e709      	b.n	800044e <__udivmoddi4+0xde>
 800063a:	4464      	add	r4, ip
 800063c:	3802      	subs	r0, #2
 800063e:	e742      	b.n	80004c6 <__udivmoddi4+0x156>

08000640 <__aeabi_idiv0>:
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	; 0x28
 8000648:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064a:	f001 fb0d 	bl	8001c68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064e:	f000 f931 	bl	80008b4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000652:	f000 fa1f 	bl	8000a94 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000656:	f000 f9f3 	bl	8000a40 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800065a:	f000 f997 	bl	800098c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1<<0);
 800065e:	4b7a      	ldr	r3, [pc, #488]	; (8000848 <main+0x204>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a79      	ldr	r2, [pc, #484]	; (8000848 <main+0x204>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6013      	str	r3, [r2, #0]


  SEGGER_SYSVIEW_Conf();
 800066a:	f007 fc8f 	bl	8007f8c <SEGGER_SYSVIEW_Conf>
  vSetVarulMaxPRIGROUPValue();
 800066e:	f007 fa2d 	bl	8007acc <vSetVarulMaxPRIGROUPValue>
  SEGGER_SYSVIEW_Start();
 8000672:	f008 fdef 	bl	8009254 <SEGGER_SYSVIEW_Start>


/**********************************PREEMPTIVE IS DISABLED SO CO-OPERATIVE SCHEDULING IS WORKING********************/
  status = xTaskCreate(Menu_Handler,"Menu Task",250,NULL,3,&Menu_Task_Handle);
 8000676:	4b75      	ldr	r3, [pc, #468]	; (800084c <main+0x208>)
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	2303      	movs	r3, #3
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2300      	movs	r3, #0
 8000680:	22fa      	movs	r2, #250	; 0xfa
 8000682:	4973      	ldr	r1, [pc, #460]	; (8000850 <main+0x20c>)
 8000684:	4873      	ldr	r0, [pc, #460]	; (8000854 <main+0x210>)
 8000686:	f005 f8fd 	bl	8005884 <xTaskCreate>
 800068a:	4603      	mov	r3, r0
 800068c:	4a72      	ldr	r2, [pc, #456]	; (8000858 <main+0x214>)
 800068e:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000690:	4b71      	ldr	r3, [pc, #452]	; (8000858 <main+0x214>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d00a      	beq.n	80006ae <main+0x6a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800069c:	f383 8811 	msr	BASEPRI, r3
 80006a0:	f3bf 8f6f 	isb	sy
 80006a4:	f3bf 8f4f 	dsb	sy
 80006a8:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006aa:	bf00      	nop
 80006ac:	e7fe      	b.n	80006ac <main+0x68>

  status = xTaskCreate(CMD_Handler,"CMD TASK",250,NULL,3,&CMD_Handle);
 80006ae:	4b6b      	ldr	r3, [pc, #428]	; (800085c <main+0x218>)
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	2303      	movs	r3, #3
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2300      	movs	r3, #0
 80006b8:	22fa      	movs	r2, #250	; 0xfa
 80006ba:	4969      	ldr	r1, [pc, #420]	; (8000860 <main+0x21c>)
 80006bc:	4869      	ldr	r0, [pc, #420]	; (8000864 <main+0x220>)
 80006be:	f005 f8e1 	bl	8005884 <xTaskCreate>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4a64      	ldr	r2, [pc, #400]	; (8000858 <main+0x214>)
 80006c6:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 80006c8:	4b63      	ldr	r3, [pc, #396]	; (8000858 <main+0x214>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d00a      	beq.n	80006e6 <main+0xa2>
        __asm volatile
 80006d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006d4:	f383 8811 	msr	BASEPRI, r3
 80006d8:	f3bf 8f6f 	isb	sy
 80006dc:	f3bf 8f4f 	dsb	sy
 80006e0:	617b      	str	r3, [r7, #20]
    }
 80006e2:	bf00      	nop
 80006e4:	e7fe      	b.n	80006e4 <main+0xa0>

  status = xTaskCreate(Print_Handler,"Print Task",250,NULL,3,&Print_Handle);
 80006e6:	4b60      	ldr	r3, [pc, #384]	; (8000868 <main+0x224>)
 80006e8:	9301      	str	r3, [sp, #4]
 80006ea:	2303      	movs	r3, #3
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	2300      	movs	r3, #0
 80006f0:	22fa      	movs	r2, #250	; 0xfa
 80006f2:	495e      	ldr	r1, [pc, #376]	; (800086c <main+0x228>)
 80006f4:	485e      	ldr	r0, [pc, #376]	; (8000870 <main+0x22c>)
 80006f6:	f005 f8c5 	bl	8005884 <xTaskCreate>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4a56      	ldr	r2, [pc, #344]	; (8000858 <main+0x214>)
 80006fe:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000700:	4b55      	ldr	r3, [pc, #340]	; (8000858 <main+0x214>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d00a      	beq.n	800071e <main+0xda>
        __asm volatile
 8000708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070c:	f383 8811 	msr	BASEPRI, r3
 8000710:	f3bf 8f6f 	isb	sy
 8000714:	f3bf 8f4f 	dsb	sy
 8000718:	613b      	str	r3, [r7, #16]
    }
 800071a:	bf00      	nop
 800071c:	e7fe      	b.n	800071c <main+0xd8>

  status = xTaskCreate(LED_Handler,"Led Task",250,NULL,3,&LED_Handle);
 800071e:	4b55      	ldr	r3, [pc, #340]	; (8000874 <main+0x230>)
 8000720:	9301      	str	r3, [sp, #4]
 8000722:	2303      	movs	r3, #3
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	2300      	movs	r3, #0
 8000728:	22fa      	movs	r2, #250	; 0xfa
 800072a:	4953      	ldr	r1, [pc, #332]	; (8000878 <main+0x234>)
 800072c:	4853      	ldr	r0, [pc, #332]	; (800087c <main+0x238>)
 800072e:	f005 f8a9 	bl	8005884 <xTaskCreate>
 8000732:	4603      	mov	r3, r0
 8000734:	4a48      	ldr	r2, [pc, #288]	; (8000858 <main+0x214>)
 8000736:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000738:	4b47      	ldr	r3, [pc, #284]	; (8000858 <main+0x214>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d00a      	beq.n	8000756 <main+0x112>
        __asm volatile
 8000740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000744:	f383 8811 	msr	BASEPRI, r3
 8000748:	f3bf 8f6f 	isb	sy
 800074c:	f3bf 8f4f 	dsb	sy
 8000750:	60fb      	str	r3, [r7, #12]
    }
 8000752:	bf00      	nop
 8000754:	e7fe      	b.n	8000754 <main+0x110>

  status = xTaskCreate(RTC_Handler,"RTC TASK",250,NULL,3,&RTC_Handle);
 8000756:	4b4a      	ldr	r3, [pc, #296]	; (8000880 <main+0x23c>)
 8000758:	9301      	str	r3, [sp, #4]
 800075a:	2303      	movs	r3, #3
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	2300      	movs	r3, #0
 8000760:	22fa      	movs	r2, #250	; 0xfa
 8000762:	4948      	ldr	r1, [pc, #288]	; (8000884 <main+0x240>)
 8000764:	4848      	ldr	r0, [pc, #288]	; (8000888 <main+0x244>)
 8000766:	f005 f88d 	bl	8005884 <xTaskCreate>
 800076a:	4603      	mov	r3, r0
 800076c:	4a3a      	ldr	r2, [pc, #232]	; (8000858 <main+0x214>)
 800076e:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000770:	4b39      	ldr	r3, [pc, #228]	; (8000858 <main+0x214>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d00a      	beq.n	800078e <main+0x14a>
        __asm volatile
 8000778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800077c:	f383 8811 	msr	BASEPRI, r3
 8000780:	f3bf 8f6f 	isb	sy
 8000784:	f3bf 8f4f 	dsb	sy
 8000788:	60bb      	str	r3, [r7, #8]
    }
 800078a:	bf00      	nop
 800078c:	e7fe      	b.n	800078c <main+0x148>

  Input_Data_Queue = xQueueCreate(10,sizeof(char));
 800078e:	2200      	movs	r2, #0
 8000790:	2101      	movs	r1, #1
 8000792:	200a      	movs	r0, #10
 8000794:	f004 fa6e 	bl	8004c74 <xQueueGenericCreate>
 8000798:	4603      	mov	r3, r0
 800079a:	4a3c      	ldr	r2, [pc, #240]	; (800088c <main+0x248>)
 800079c:	6013      	str	r3, [r2, #0]
  configASSERT(Input_Data_Queue !=NULL);
 800079e:	4b3b      	ldr	r3, [pc, #236]	; (800088c <main+0x248>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d10a      	bne.n	80007bc <main+0x178>
        __asm volatile
 80007a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007aa:	f383 8811 	msr	BASEPRI, r3
 80007ae:	f3bf 8f6f 	isb	sy
 80007b2:	f3bf 8f4f 	dsb	sy
 80007b6:	607b      	str	r3, [r7, #4]
    }
 80007b8:	bf00      	nop
 80007ba:	e7fe      	b.n	80007ba <main+0x176>

  Print_Queue = xQueueCreate(10,sizeof(size_t));
 80007bc:	2200      	movs	r2, #0
 80007be:	2104      	movs	r1, #4
 80007c0:	200a      	movs	r0, #10
 80007c2:	f004 fa57 	bl	8004c74 <xQueueGenericCreate>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4a31      	ldr	r2, [pc, #196]	; (8000890 <main+0x24c>)
 80007ca:	6013      	str	r3, [r2, #0]
  configASSERT(Print_Queue !=NULL);
 80007cc:	4b30      	ldr	r3, [pc, #192]	; (8000890 <main+0x24c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d10a      	bne.n	80007ea <main+0x1a6>
        __asm volatile
 80007d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007d8:	f383 8811 	msr	BASEPRI, r3
 80007dc:	f3bf 8f6f 	isb	sy
 80007e0:	f3bf 8f4f 	dsb	sy
 80007e4:	603b      	str	r3, [r7, #0]
    }
 80007e6:	bf00      	nop
 80007e8:	e7fe      	b.n	80007e8 <main+0x1a4>

  for(int i = 0;i<4;i++)
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
 80007ee:	e013      	b.n	8000818 <main+0x1d4>
  {
	  led_timer[i] = xTimerCreate("Led Timer",pdMS_TO_TICKS(500),pdTRUE,(void*)(i+1),LED_Effect_Callback);
 80007f0:	69fb      	ldr	r3, [r7, #28]
 80007f2:	3301      	adds	r3, #1
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b27      	ldr	r3, [pc, #156]	; (8000894 <main+0x250>)
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	4613      	mov	r3, r2
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000802:	4825      	ldr	r0, [pc, #148]	; (8000898 <main+0x254>)
 8000804:	f006 fc0c 	bl	8007020 <xTimerCreate>
 8000808:	4602      	mov	r2, r0
 800080a:	4924      	ldr	r1, [pc, #144]	; (800089c <main+0x258>)
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i = 0;i<4;i++)
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	3301      	adds	r3, #1
 8000816:	61fb      	str	r3, [r7, #28]
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	2b03      	cmp	r3, #3
 800081c:	dde8      	ble.n	80007f0 <main+0x1ac>

  }
rtc_timer = xTimerCreate ("rtc_report_timer",pdMS_TO_TICKS(1000),pdTRUE,NULL,rtc_report_callback);
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <main+0x25c>)
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	2300      	movs	r3, #0
 8000824:	2201      	movs	r2, #1
 8000826:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800082a:	481e      	ldr	r0, [pc, #120]	; (80008a4 <main+0x260>)
 800082c:	f006 fbf8 	bl	8007020 <xTimerCreate>
 8000830:	4603      	mov	r3, r0
 8000832:	4a1d      	ldr	r2, [pc, #116]	; (80008a8 <main+0x264>)
 8000834:	6013      	str	r3, [r2, #0]

  HAL_UART_Receive_IT(&huart2,(uint8_t *)&user_data, 1);
 8000836:	2201      	movs	r2, #1
 8000838:	491c      	ldr	r1, [pc, #112]	; (80008ac <main+0x268>)
 800083a:	481d      	ldr	r0, [pc, #116]	; (80008b0 <main+0x26c>)
 800083c:	f003 f961 	bl	8003b02 <HAL_UART_Receive_IT>
  vTaskStartScheduler();
 8000840:	f005 f9a8 	bl	8005b94 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000844:	e7fe      	b.n	8000844 <main+0x200>
 8000846:	bf00      	nop
 8000848:	e0001000 	.word	0xe0001000
 800084c:	20000128 	.word	0x20000128
 8000850:	0800afcc 	.word	0x0800afcc
 8000854:	080013ed 	.word	0x080013ed
 8000858:	2000010c 	.word	0x2000010c
 800085c:	2000012c 	.word	0x2000012c
 8000860:	0800afd8 	.word	0x0800afd8
 8000864:	080014d5 	.word	0x080014d5
 8000868:	20000130 	.word	0x20000130
 800086c:	0800afe4 	.word	0x0800afe4
 8000870:	08001505 	.word	0x08001505
 8000874:	20000134 	.word	0x20000134
 8000878:	0800aff0 	.word	0x0800aff0
 800087c:	08001545 	.word	0x08001545
 8000880:	20000138 	.word	0x20000138
 8000884:	0800affc 	.word	0x0800affc
 8000888:	080016b9 	.word	0x080016b9
 800088c:	2000013c 	.word	0x2000013c
 8000890:	20000140 	.word	0x20000140
 8000894:	08000c01 	.word	0x08000c01
 8000898:	0800b008 	.word	0x0800b008
 800089c:	20000110 	.word	0x20000110
 80008a0:	08000b45 	.word	0x08000b45
 80008a4:	0800b014 	.word	0x0800b014
 80008a8:	20000120 	.word	0x20000120
 80008ac:	20000144 	.word	0x20000144
 80008b0:	200000c8 	.word	0x200000c8

080008b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b094      	sub	sp, #80	; 0x50
 80008b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ba:	f107 0320 	add.w	r3, r7, #32
 80008be:	2230      	movs	r2, #48	; 0x30
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f009 fa16 	bl	8009cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	4b29      	ldr	r3, [pc, #164]	; (8000984 <SystemClock_Config+0xd0>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	4a28      	ldr	r2, [pc, #160]	; (8000984 <SystemClock_Config+0xd0>)
 80008e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e6:	6413      	str	r3, [r2, #64]	; 0x40
 80008e8:	4b26      	ldr	r3, [pc, #152]	; (8000984 <SystemClock_Config+0xd0>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008f4:	2300      	movs	r3, #0
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	4b23      	ldr	r3, [pc, #140]	; (8000988 <SystemClock_Config+0xd4>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000900:	4a21      	ldr	r2, [pc, #132]	; (8000988 <SystemClock_Config+0xd4>)
 8000902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <SystemClock_Config+0xd4>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000914:	230a      	movs	r3, #10
 8000916:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000918:	2301      	movs	r3, #1
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800091c:	2310      	movs	r3, #16
 800091e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000920:	2301      	movs	r3, #1
 8000922:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000924:	2302      	movs	r3, #2
 8000926:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000928:	2300      	movs	r3, #0
 800092a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800092c:	2308      	movs	r3, #8
 800092e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000930:	2354      	movs	r3, #84	; 0x54
 8000932:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000934:	2302      	movs	r3, #2
 8000936:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000938:	2304      	movs	r3, #4
 800093a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093c:	f107 0320 	add.w	r3, r7, #32
 8000940:	4618      	mov	r0, r3
 8000942:	f001 fd09 	bl	8002358 <HAL_RCC_OscConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800094c:	f000 fa85 	bl	8000e5a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000950:	230f      	movs	r3, #15
 8000952:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000954:	2302      	movs	r3, #2
 8000956:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800095c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000960:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	2102      	movs	r1, #2
 800096c:	4618      	mov	r0, r3
 800096e:	f001 ff6b 	bl	8002848 <HAL_RCC_ClockConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000978:	f000 fa6f 	bl	8000e5a <Error_Handler>
  }
}
 800097c:	bf00      	nop
 800097e:	3750      	adds	r7, #80	; 0x50
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40023800 	.word	0x40023800
 8000988:	40007000 	.word	0x40007000

0800098c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80009a0:	2300      	movs	r3, #0
 80009a2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009a4:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <MX_RTC_Init+0xac>)
 80009a6:	4a25      	ldr	r2, [pc, #148]	; (8000a3c <MX_RTC_Init+0xb0>)
 80009a8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009aa:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <MX_RTC_Init+0xac>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009b0:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <MX_RTC_Init+0xac>)
 80009b2:	227f      	movs	r2, #127	; 0x7f
 80009b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <MX_RTC_Init+0xac>)
 80009b8:	22ff      	movs	r2, #255	; 0xff
 80009ba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009bc:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <MX_RTC_Init+0xac>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009c2:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <MX_RTC_Init+0xac>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <MX_RTC_Init+0xac>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009ce:	481a      	ldr	r0, [pc, #104]	; (8000a38 <MX_RTC_Init+0xac>)
 80009d0:	f002 fa3a 	bl	8002e48 <HAL_RTC_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80009da:	f000 fa3e 	bl	8000e5a <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 80009de:	2312      	movs	r3, #18
 80009e0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x12;
 80009e2:	2312      	movs	r3, #18
 80009e4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x19;
 80009e6:	2319      	movs	r3, #25
 80009e8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	2201      	movs	r2, #1
 80009f6:	4619      	mov	r1, r3
 80009f8:	480f      	ldr	r0, [pc, #60]	; (8000a38 <MX_RTC_Init+0xac>)
 80009fa:	f002 fa9b 	bl	8002f34 <HAL_RTC_SetTime>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000a04:	f000 fa29 	bl	8000e5a <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8000a0c:	2305      	movs	r3, #5
 8000a0e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x23;
 8000a10:	2323      	movs	r3, #35	; 0x23
 8000a12:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8000a14:	2323      	movs	r3, #35	; 0x23
 8000a16:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a18:	463b      	mov	r3, r7
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4806      	ldr	r0, [pc, #24]	; (8000a38 <MX_RTC_Init+0xac>)
 8000a20:	f002 fb80 	bl	8003124 <HAL_RTC_SetDate>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000a2a:	f000 fa16 	bl	8000e5a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200000a8 	.word	0x200000a8
 8000a3c:	40002800 	.word	0x40002800

08000a40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a46:	4a12      	ldr	r2, [pc, #72]	; (8000a90 <MX_USART2_UART_Init+0x50>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a78:	f002 ff64 	bl	8003944 <HAL_UART_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a82:	f000 f9ea 	bl	8000e5a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200000c8 	.word	0x200000c8
 8000a90:	40004400 	.word	0x40004400

08000a94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <MX_GPIO_Init+0xa8>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a22      	ldr	r2, [pc, #136]	; (8000b3c <MX_GPIO_Init+0xa8>)
 8000ab4:	f043 0304 	orr.w	r3, r3, #4
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <MX_GPIO_Init+0xa8>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0304 	and.w	r3, r3, #4
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <MX_GPIO_Init+0xa8>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a1b      	ldr	r2, [pc, #108]	; (8000b3c <MX_GPIO_Init+0xa8>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <MX_GPIO_Init+0xa8>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	210f      	movs	r1, #15
 8000ae6:	4816      	ldr	r0, [pc, #88]	; (8000b40 <MX_GPIO_Init+0xac>)
 8000ae8:	f001 fbf8 	bl	80022dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000aec:	230f      	movs	r3, #15
 8000aee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	4619      	mov	r1, r3
 8000b02:	480f      	ldr	r0, [pc, #60]	; (8000b40 <MX_GPIO_Init+0xac>)
 8000b04:	f001 fa66 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b14:	2302      	movs	r3, #2
 8000b16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4808      	ldr	r0, [pc, #32]	; (8000b40 <MX_GPIO_Init+0xac>)
 8000b20:	f001 fa58 	bl	8001fd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2106      	movs	r1, #6
 8000b28:	2028      	movs	r0, #40	; 0x28
 8000b2a:	f001 f997 	bl	8001e5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b2e:	2028      	movs	r0, #40	; 0x28
 8000b30:	f001 f9b0 	bl	8001e94 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b34:	bf00      	nop
 8000b36:	3720      	adds	r7, #32
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020800 	.word	0x40020800

08000b44 <rtc_report_callback>:

/* USER CODE BEGIN 4 */
void rtc_report_callback( TimerHandle_t xTimer )
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	 show_time_date_itm();
 8000b4c:	f000 f98a 	bl	8000e64 <show_time_date_itm>

}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af02      	add	r7, sp, #8
 8000b5e:	6078      	str	r0, [r7, #4]
	 uint8_t dummy;
	for(uint32_t i = 0 ; i < 500 ; i++);
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	e002      	b.n	8000b6c <HAL_UART_RxCpltCallback+0x14>
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b72:	d3f8      	bcc.n	8000b66 <HAL_UART_RxCpltCallback+0xe>


	if(!xQueueIsQueueFullFromISR(Input_Data_Queue))
 8000b74:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <HAL_UART_RxCpltCallback+0x98>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f004 fdd2 	bl	8005722 <xQueueIsQueueFullFromISR>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d107      	bne.n	8000b94 <HAL_UART_RxCpltCallback+0x3c>
	{
		/*Queue is not full */


		xQueueSendFromISR(Input_Data_Queue,(void*)&user_data,NULL);
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <HAL_UART_RxCpltCallback+0x98>)
 8000b86:	6818      	ldr	r0, [r3, #0]
 8000b88:	2300      	movs	r3, #0
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	4919      	ldr	r1, [pc, #100]	; (8000bf4 <HAL_UART_RxCpltCallback+0x9c>)
 8000b8e:	f004 fa0f 	bl	8004fb0 <xQueueGenericSendFromISR>
 8000b92:	e013      	b.n	8000bbc <HAL_UART_RxCpltCallback+0x64>

	}else{
		/*Queue is full */

		if(user_data == '\n')
 8000b94:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <HAL_UART_RxCpltCallback+0x9c>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b0a      	cmp	r3, #10
 8000b9c:	d10e      	bne.n	8000bbc <HAL_UART_RxCpltCallback+0x64>
		{

			xQueueReceiveFromISR(Input_Data_Queue,(void*)&dummy,NULL);
 8000b9e:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <HAL_UART_RxCpltCallback+0x98>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f107 010b 	add.w	r1, r7, #11
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f004 fbd7 	bl	800535c <xQueueReceiveFromISR>
			xQueueSendFromISR(Input_Data_Queue,(void*)&user_data , NULL);
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <HAL_UART_RxCpltCallback+0x98>)
 8000bb0:	6818      	ldr	r0, [r3, #0]
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	490f      	ldr	r1, [pc, #60]	; (8000bf4 <HAL_UART_RxCpltCallback+0x9c>)
 8000bb8:	f004 f9fa 	bl	8004fb0 <xQueueGenericSendFromISR>
		}
	}



	 if( user_data == '\n' ){
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <HAL_UART_RxCpltCallback+0x9c>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2b0a      	cmp	r3, #10
 8000bc4:	d10a      	bne.n	8000bdc <HAL_UART_RxCpltCallback+0x84>
		/*send notification to command handling task */
		xTaskNotifyFromISR(CMD_Handle,0,eNoAction,NULL);
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <HAL_UART_RxCpltCallback+0xa0>)
 8000bc8:	6818      	ldr	r0, [r3, #0]
 8000bca:	2300      	movs	r3, #0
 8000bcc:	9301      	str	r3, [sp, #4]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	f006 f802 	bl	8006be0 <xTaskGenericNotifyFromISR>
	}

	/* Enable UART data byte reception again in IT mode */
	 HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4905      	ldr	r1, [pc, #20]	; (8000bf4 <HAL_UART_RxCpltCallback+0x9c>)
 8000be0:	4806      	ldr	r0, [pc, #24]	; (8000bfc <HAL_UART_RxCpltCallback+0xa4>)
 8000be2:	f002 ff8e 	bl	8003b02 <HAL_UART_Receive_IT>


}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	2000013c 	.word	0x2000013c
 8000bf4:	20000144 	.word	0x20000144
 8000bf8:	2000012c 	.word	0x2000012c
 8000bfc:	200000c8 	.word	0x200000c8

08000c00 <LED_Effect_Callback>:

void LED_Effect_Callback(TimerHandle_t xTimer)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	int id;
	id = (uint32_t) pvTimerGetTimerID(xTimer);
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f006 fd2c 	bl	8007666 <pvTimerGetTimerID>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	60fb      	str	r3, [r7, #12]
	switch(id)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	3b01      	subs	r3, #1
 8000c16:	2b03      	cmp	r3, #3
 8000c18:	d816      	bhi.n	8000c48 <LED_Effect_Callback+0x48>
 8000c1a:	a201      	add	r2, pc, #4	; (adr r2, 8000c20 <LED_Effect_Callback+0x20>)
 8000c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c20:	08000c31 	.word	0x08000c31
 8000c24:	08000c37 	.word	0x08000c37
 8000c28:	08000c3d 	.word	0x08000c3d
 8000c2c:	08000c43 	.word	0x08000c43
	{
	case 1:
		LED_effect1();
 8000c30:	f000 f8a8 	bl	8000d84 <LED_effect1>
		break;
 8000c34:	e008      	b.n	8000c48 <LED_Effect_Callback+0x48>
	case 2:
		LED_effect2();
 8000c36:	f000 f8bb 	bl	8000db0 <LED_effect2>
		break;
 8000c3a:	e005      	b.n	8000c48 <LED_Effect_Callback+0x48>
	case 3:
		LED_effect3();
 8000c3c:	f000 f8ce 	bl	8000ddc <LED_effect3>
		break;
 8000c40:	e002      	b.n	8000c48 <LED_Effect_Callback+0x48>
	case 4:
		LED_effect4();
 8000c42:	f000 f8e3 	bl	8000e0c <LED_effect4>
		break;
 8000c46:	bf00      	nop

	}

}
 8000c48:	bf00      	nop
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <led_effect_stop>:
void led_effect_stop(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af02      	add	r7, sp, #8
   for(int i = 0;i<4;i++)
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	e00e      	b.n	8000c7a <led_effect_stop+0x2a>
   {
	   xTimerStop(led_timer[i],portMAX_DELAY);
 8000c5c:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <led_effect_stop+0x3c>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2103      	movs	r1, #3
 8000c70:	f006 fa30 	bl	80070d4 <xTimerGenericCommand>
   for(int i = 0;i<4;i++)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3301      	adds	r3, #1
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b03      	cmp	r3, #3
 8000c7e:	dded      	ble.n	8000c5c <led_effect_stop+0xc>

   }
}
 8000c80:	bf00      	nop
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000110 	.word	0x20000110

08000c90 <led_effect>:
void led_effect(int n)
{
 8000c90:	b590      	push	{r4, r7, lr}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af02      	add	r7, sp, #8
 8000c96:	6078      	str	r0, [r7, #4]
    led_effect_stop();
 8000c98:	f7ff ffda 	bl	8000c50 <led_effect_stop>
    xTimerStart(led_timer[n-1],portMAX_DELAY);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	4a08      	ldr	r2, [pc, #32]	; (8000cc4 <led_effect+0x34>)
 8000ca2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000ca6:	f005 f8e5 	bl	8005e74 <xTaskGetTickCount>
 8000caa:	4602      	mov	r2, r0
 8000cac:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	f006 fa0c 	bl	80070d4 <xTimerGenericCommand>

}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd90      	pop	{r4, r7, pc}
 8000cc4:	20000110 	.word	0x20000110

08000cc8 <turn_off_all_leds>:
void turn_off_all_leds(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3,GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	210f      	movs	r1, #15
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <turn_off_all_leds+0x14>)
 8000cd2:	f001 fb03 	bl	80022dc <HAL_GPIO_WritePin>

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40020800 	.word	0x40020800

08000ce0 <turn_on_all_leds>:
void turn_on_all_leds(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3,GPIO_PIN_SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <turn_on_all_leds+0x14>)
 8000cea:	f001 faf7 	bl	80022dc <HAL_GPIO_WritePin>

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40020800 	.word	0x40020800

08000cf8 <turn_on_odd_leds>:
void turn_on_odd_leds(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1|GPIO_PIN_3,GPIO_PIN_SET);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	210a      	movs	r1, #10
 8000d00:	4804      	ldr	r0, [pc, #16]	; (8000d14 <turn_on_odd_leds+0x1c>)
 8000d02:	f001 faeb 	bl	80022dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2,GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2105      	movs	r1, #5
 8000d0a:	4802      	ldr	r0, [pc, #8]	; (8000d14 <turn_on_odd_leds+0x1c>)
 8000d0c:	f001 fae6 	bl	80022dc <HAL_GPIO_WritePin>

}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40020800 	.word	0x40020800

08000d18 <turn_on_even_leds>:
void turn_on_even_leds(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1|GPIO_PIN_3,GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	210a      	movs	r1, #10
 8000d20:	4804      	ldr	r0, [pc, #16]	; (8000d34 <turn_on_even_leds+0x1c>)
 8000d22:	f001 fadb 	bl	80022dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2,GPIO_PIN_SET);
 8000d26:	2201      	movs	r2, #1
 8000d28:	2105      	movs	r1, #5
 8000d2a:	4802      	ldr	r0, [pc, #8]	; (8000d34 <turn_on_even_leds+0x1c>)
 8000d2c:	f001 fad6 	bl	80022dc <HAL_GPIO_WritePin>

}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40020800 	.word	0x40020800

08000d38 <LED_control>:

void LED_control( int value )
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  for(int i = 0 ; i < 4 ; i++)
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	e013      	b.n	8000d6e <LED_control+0x36>
	  HAL_GPIO_WritePin(GPIOC, (GPIO_PIN_0 << i), ((value >> i)& 0x1));
 8000d46:	2201      	movs	r2, #1
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	b299      	uxth	r1, r3
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	fa42 f303 	asr.w	r3, r2, r3
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	461a      	mov	r2, r3
 8000d62:	4807      	ldr	r0, [pc, #28]	; (8000d80 <LED_control+0x48>)
 8000d64:	f001 faba 	bl	80022dc <HAL_GPIO_WritePin>
  for(int i = 0 ; i < 4 ; i++)
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	2b03      	cmp	r3, #3
 8000d72:	dde8      	ble.n	8000d46 <LED_control+0xe>
}
 8000d74:	bf00      	nop
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40020800 	.word	0x40020800

08000d84 <LED_effect1>:


void LED_effect1(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <LED_effect1+0x28>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f083 0301 	eor.w	r3, r3, #1
 8000d90:	4a06      	ldr	r2, [pc, #24]	; (8000dac <LED_effect1+0x28>)
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <LED_effect1+0x28>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d002      	beq.n	8000da2 <LED_effect1+0x1e>
 8000d9c:	f7ff ff94 	bl	8000cc8 <turn_off_all_leds>
}
 8000da0:	e001      	b.n	8000da6 <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 8000da2:	f7ff ff9d 	bl	8000ce0 <turn_on_all_leds>
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000000 	.word	0x20000000

08000db0 <LED_effect2>:


void LED_effect2(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <LED_effect2+0x28>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f083 0301 	eor.w	r3, r3, #1
 8000dbc:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <LED_effect2+0x28>)
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <LED_effect2+0x28>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d002      	beq.n	8000dce <LED_effect2+0x1e>
 8000dc8:	f7ff ffa6 	bl	8000d18 <turn_on_even_leds>
}
 8000dcc:	e001      	b.n	8000dd2 <LED_effect2+0x22>
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 8000dce:	f7ff ff93 	bl	8000cf8 <turn_on_odd_leds>
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000004 	.word	0x20000004

08000ddc <LED_effect3>:

void LED_effect3(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x1 << (i++ % 4) );
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <LED_effect3+0x2c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	4908      	ldr	r1, [pc, #32]	; (8000e08 <LED_effect3+0x2c>)
 8000de8:	600a      	str	r2, [r1, #0]
 8000dea:	425a      	negs	r2, r3
 8000dec:	f003 0303 	and.w	r3, r3, #3
 8000df0:	f002 0203 	and.w	r2, r2, #3
 8000df4:	bf58      	it	pl
 8000df6:	4253      	negpl	r3, r2
 8000df8:	2201      	movs	r2, #1
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff9a 	bl	8000d38 <LED_control>
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000148 	.word	0x20000148

08000e0c <LED_effect4>:


void LED_effect4(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x08 >> (i++ % 4) );
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <LED_effect4+0x2c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	1c5a      	adds	r2, r3, #1
 8000e16:	4908      	ldr	r1, [pc, #32]	; (8000e38 <LED_effect4+0x2c>)
 8000e18:	600a      	str	r2, [r1, #0]
 8000e1a:	425a      	negs	r2, r3
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	f002 0203 	and.w	r2, r2, #3
 8000e24:	bf58      	it	pl
 8000e26:	4253      	negpl	r3, r2
 8000e28:	2208      	movs	r2, #8
 8000e2a:	fa42 f303 	asr.w	r3, r2, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ff82 	bl	8000d38 <LED_control>
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	2000014c 	.word	0x2000014c

08000e3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e4c:	d101      	bne.n	8000e52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e4e:	f000 ff2d 	bl	8001cac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5e:	b672      	cpsid	i
}
 8000e60:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <Error_Handler+0x8>

08000e64 <show_time_date_itm>:


#include "main.h"

 void show_time_date_itm(void)
 {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af02      	add	r7, sp, #8
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	memset(&rtc_date,0,sizeof(rtc_date));
 8000e6a:	f107 0318 	add.w	r3, r7, #24
 8000e6e:	2204      	movs	r2, #4
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f008 ff3e 	bl	8009cf4 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2214      	movs	r2, #20
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f008 ff38 	bl	8009cf4 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	2200      	movs	r2, #0
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4815      	ldr	r0, [pc, #84]	; (8000ee0 <show_time_date_itm+0x7c>)
 8000e8c:	f002 f8ec 	bl	8003068 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000e90:	f107 0318 	add.w	r3, r7, #24
 8000e94:	2200      	movs	r2, #0
 8000e96:	4619      	mov	r1, r3
 8000e98:	4811      	ldr	r0, [pc, #68]	; (8000ee0 <show_time_date_itm+0x7c>)
 8000e9a:	f002 f9c7 	bl	800322c <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d101      	bne.n	8000ea8 <show_time_date_itm+0x44>
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <show_time_date_itm+0x80>)
 8000ea6:	e000      	b.n	8000eaa <show_time_date_itm+0x46>
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <show_time_date_itm+0x84>)
 8000eaa:	61fb      	str	r3, [r7, #28]


	printf("%02d:%02d:%02d [%s]",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8000eac:	793b      	ldrb	r3, [r7, #4]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	797b      	ldrb	r3, [r7, #5]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	79bb      	ldrb	r3, [r7, #6]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	480b      	ldr	r0, [pc, #44]	; (8000eec <show_time_date_itm+0x88>)
 8000ec0:	f008 ff20 	bl	8009d04 <iprintf>
	printf("\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8000ec4:	7e7b      	ldrb	r3, [r7, #25]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	7ebb      	ldrb	r3, [r7, #26]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	7efb      	ldrb	r3, [r7, #27]
 8000ece:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000ed2:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <show_time_date_itm+0x8c>)
 8000ed4:	f008 ff16 	bl	8009d04 <iprintf>

 }
 8000ed8:	bf00      	nop
 8000eda:	3720      	adds	r7, #32
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200000a8 	.word	0x200000a8
 8000ee4:	0800b028 	.word	0x0800b028
 8000ee8:	0800b02c 	.word	0x0800b02c
 8000eec:	0800b030 	.word	0x0800b030
 8000ef0:	0800b044 	.word	0x0800b044

08000ef4 <show_time_date>:

void show_time_date(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08c      	sub	sp, #48	; 0x30
 8000ef8:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date,0,sizeof(rtc_date));
 8000efa:	f107 0318 	add.w	r3, r7, #24
 8000efe:	2204      	movs	r2, #4
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f008 fef6 	bl	8009cf4 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	2214      	movs	r2, #20
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f008 fef0 	bl	8009cf4 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2200      	movs	r2, #0
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4821      	ldr	r0, [pc, #132]	; (8000fa0 <show_time_date+0xac>)
 8000f1c:	f002 f8a4 	bl	8003068 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000f20:	f107 0318 	add.w	r3, r7, #24
 8000f24:	2200      	movs	r2, #0
 8000f26:	4619      	mov	r1, r3
 8000f28:	481d      	ldr	r0, [pc, #116]	; (8000fa0 <show_time_date+0xac>)
 8000f2a:	f002 f97f 	bl	800322c <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d101      	bne.n	8000f38 <show_time_date+0x44>
 8000f34:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <show_time_date+0xb0>)
 8000f36:	e000      	b.n	8000f3a <show_time_date+0x46>
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <show_time_date+0xb4>)
 8000f3a:	61fb      	str	r3, [r7, #28]

	/* Display time Format : hh:mm:ss [AM/PM] */
	sprintf((char*)showtime,"%s:\t%02d:%02d:%02d [%s]","\nCurrent Time&Date",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8000f3c:	793b      	ldrb	r3, [r7, #4]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	797b      	ldrb	r3, [r7, #5]
 8000f42:	461a      	mov	r2, r3
 8000f44:	79bb      	ldrb	r3, [r7, #6]
 8000f46:	4619      	mov	r1, r3
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	9302      	str	r3, [sp, #8]
 8000f4c:	9101      	str	r1, [sp, #4]
 8000f4e:	9200      	str	r2, [sp, #0]
 8000f50:	4603      	mov	r3, r0
 8000f52:	4a16      	ldr	r2, [pc, #88]	; (8000fac <show_time_date+0xb8>)
 8000f54:	4916      	ldr	r1, [pc, #88]	; (8000fb0 <show_time_date+0xbc>)
 8000f56:	4817      	ldr	r0, [pc, #92]	; (8000fb4 <show_time_date+0xc0>)
 8000f58:	f008 feec 	bl	8009d34 <siprintf>
	xQueueSend(Print_Queue,&time,portMAX_DELAY);
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <show_time_date+0xc4>)
 8000f5e:	6818      	ldr	r0, [r3, #0]
 8000f60:	2300      	movs	r3, #0
 8000f62:	f04f 32ff 	mov.w	r2, #4294967295
 8000f66:	4915      	ldr	r1, [pc, #84]	; (8000fbc <show_time_date+0xc8>)
 8000f68:	f003 fefc 	bl	8004d64 <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*)showdate,"\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8000f6c:	7e7b      	ldrb	r3, [r7, #25]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	7ebb      	ldrb	r3, [r7, #26]
 8000f72:	4619      	mov	r1, r3
 8000f74:	7efb      	ldrb	r3, [r7, #27]
 8000f76:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4910      	ldr	r1, [pc, #64]	; (8000fc0 <show_time_date+0xcc>)
 8000f80:	4810      	ldr	r0, [pc, #64]	; (8000fc4 <show_time_date+0xd0>)
 8000f82:	f008 fed7 	bl	8009d34 <siprintf>
	xQueueSend(Print_Queue,&date,portMAX_DELAY);
 8000f86:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <show_time_date+0xc4>)
 8000f88:	6818      	ldr	r0, [r3, #0]
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f90:	490d      	ldr	r1, [pc, #52]	; (8000fc8 <show_time_date+0xd4>)
 8000f92:	f003 fee7 	bl	8004d64 <xQueueGenericSend>
}
 8000f96:	bf00      	nop
 8000f98:	3720      	adds	r7, #32
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200000a8 	.word	0x200000a8
 8000fa4:	0800b028 	.word	0x0800b028
 8000fa8:	0800b02c 	.word	0x0800b02c
 8000fac:	0800b054 	.word	0x0800b054
 8000fb0:	0800b068 	.word	0x0800b068
 8000fb4:	20000150 	.word	0x20000150
 8000fb8:	20000140 	.word	0x20000140
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	0800b044 	.word	0x0800b044
 8000fc4:	20000178 	.word	0x20000178
 8000fc8:	2000000c 	.word	0x2000000c

08000fcc <rtc_configure_time>:


void rtc_configure_time(RTC_TimeTypeDef *time)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc,time,RTC_FORMAT_BIN);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	6879      	ldr	r1, [r7, #4]
 8000fea:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <rtc_configure_time+0x2c>)
 8000fec:	f001 ffa2 	bl	8002f34 <HAL_RTC_SetTime>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200000a8 	.word	0x200000a8

08000ffc <rtc_configure_date>:


void rtc_configure_date(RTC_DateTypeDef *date)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc,date,RTC_FORMAT_BIN);
 8001004:	2200      	movs	r2, #0
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <rtc_configure_date+0x1c>)
 800100a:	f002 f88b 	bl	8003124 <HAL_RTC_SetDate>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200000a8 	.word	0x200000a8

0800101c <validate_rtc_information>:


int validate_rtc_information(RTC_TimeTypeDef *time , RTC_DateTypeDef *date)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
	if(time){
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d00d      	beq.n	8001048 <validate_rtc_information+0x2c>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) )
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b0c      	cmp	r3, #12
 8001032:	d807      	bhi.n	8001044 <validate_rtc_information+0x28>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	785b      	ldrb	r3, [r3, #1]
 8001038:	2b3b      	cmp	r3, #59	; 0x3b
 800103a:	d803      	bhi.n	8001044 <validate_rtc_information+0x28>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	789b      	ldrb	r3, [r3, #2]
 8001040:	2b3b      	cmp	r3, #59	; 0x3b
 8001042:	d901      	bls.n	8001048 <validate_rtc_information+0x2c>
			return 1;
 8001044:	2301      	movs	r3, #1
 8001046:	e015      	b.n	8001074 <validate_rtc_information+0x58>
	}

	if(date){
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d011      	beq.n	8001072 <validate_rtc_information+0x56>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	789b      	ldrb	r3, [r3, #2]
 8001052:	2b1f      	cmp	r3, #31
 8001054:	d80b      	bhi.n	800106e <validate_rtc_information+0x52>
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b07      	cmp	r3, #7
 800105c:	d807      	bhi.n	800106e <validate_rtc_information+0x52>
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	78db      	ldrb	r3, [r3, #3]
 8001062:	2b63      	cmp	r3, #99	; 0x63
 8001064:	d803      	bhi.n	800106e <validate_rtc_information+0x52>
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	785b      	ldrb	r3, [r3, #1]
 800106a:	2b0c      	cmp	r3, #12
 800106c:	d901      	bls.n	8001072 <validate_rtc_information+0x56>
			return 1;
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <validate_rtc_information+0x58>
	}

	return 0;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <HAL_MspInit+0x4c>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	4a0f      	ldr	r2, [pc, #60]	; (80010cc <HAL_MspInit+0x4c>)
 8001090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001094:	6453      	str	r3, [r2, #68]	; 0x44
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <HAL_MspInit+0x4c>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	603b      	str	r3, [r7, #0]
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <HAL_MspInit+0x4c>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	4a08      	ldr	r2, [pc, #32]	; (80010cc <HAL_MspInit+0x4c>)
 80010ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b0:	6413      	str	r3, [r2, #64]	; 0x40
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_MspInit+0x4c>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MspInit 1 */
  //NVIC_SetPriorityGrouping(0);

  /* USER CODE END MspInit 1 */
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800

080010d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0c      	ldr	r2, [pc, #48]	; (8001120 <HAL_RTC_MspInit+0x50>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d111      	bne.n	8001116 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80010f2:	2302      	movs	r3, #2
 80010f4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010fa:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	4618      	mov	r0, r3
 8001102:	f001 fdb3 	bl	8002c6c <HAL_RCCEx_PeriphCLKConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800110c:	f7ff fea5 	bl	8000e5a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <HAL_RTC_MspInit+0x54>)
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001116:	bf00      	nop
 8001118:	3720      	adds	r7, #32
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40002800 	.word	0x40002800
 8001124:	42470e3c 	.word	0x42470e3c

08001128 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a1d      	ldr	r2, [pc, #116]	; (80011bc <HAL_UART_MspInit+0x94>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d133      	bne.n	80011b2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <HAL_UART_MspInit+0x98>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	4a1b      	ldr	r2, [pc, #108]	; (80011c0 <HAL_UART_MspInit+0x98>)
 8001154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001158:	6413      	str	r3, [r2, #64]	; 0x40
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <HAL_UART_MspInit+0x98>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <HAL_UART_MspInit+0x98>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <HAL_UART_MspInit+0x98>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_UART_MspInit+0x98>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001182:	230c      	movs	r3, #12
 8001184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001192:	2307      	movs	r3, #7
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	4809      	ldr	r0, [pc, #36]	; (80011c4 <HAL_UART_MspInit+0x9c>)
 800119e:	f000 ff19 	bl	8001fd4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2105      	movs	r1, #5
 80011a6:	2026      	movs	r0, #38	; 0x26
 80011a8:	f000 fe58 	bl	8001e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011ac:	2026      	movs	r0, #38	; 0x26
 80011ae:	f000 fe71 	bl	8001e94 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011b2:	bf00      	nop
 80011b4:	3728      	adds	r7, #40	; 0x28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40004400 	.word	0x40004400
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020000 	.word	0x40020000

080011c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08e      	sub	sp, #56	; 0x38
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	4b34      	ldr	r3, [pc, #208]	; (80012b0 <HAL_InitTick+0xe8>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	4a33      	ldr	r2, [pc, #204]	; (80012b0 <HAL_InitTick+0xe8>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	6413      	str	r3, [r2, #64]	; 0x40
 80011e8:	4b31      	ldr	r3, [pc, #196]	; (80012b0 <HAL_InitTick+0xe8>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011f4:	f107 0210 	add.w	r2, r7, #16
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4611      	mov	r1, r2
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 fd02 	bl	8002c08 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001204:	6a3b      	ldr	r3, [r7, #32]
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120a:	2b00      	cmp	r3, #0
 800120c:	d103      	bne.n	8001216 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800120e:	f001 fcd3 	bl	8002bb8 <HAL_RCC_GetPCLK1Freq>
 8001212:	6378      	str	r0, [r7, #52]	; 0x34
 8001214:	e004      	b.n	8001220 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001216:	f001 fccf 	bl	8002bb8 <HAL_RCC_GetPCLK1Freq>
 800121a:	4603      	mov	r3, r0
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001222:	4a24      	ldr	r2, [pc, #144]	; (80012b4 <HAL_InitTick+0xec>)
 8001224:	fba2 2303 	umull	r2, r3, r2, r3
 8001228:	0c9b      	lsrs	r3, r3, #18
 800122a:	3b01      	subs	r3, #1
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800122e:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <HAL_InitTick+0xf0>)
 8001230:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001234:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001236:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <HAL_InitTick+0xf0>)
 8001238:	f240 32e7 	movw	r2, #999	; 0x3e7
 800123c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800123e:	4a1e      	ldr	r2, [pc, #120]	; (80012b8 <HAL_InitTick+0xf0>)
 8001240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001242:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001244:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <HAL_InitTick+0xf0>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124a:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <HAL_InitTick+0xf0>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <HAL_InitTick+0xf0>)
 8001252:	2200      	movs	r2, #0
 8001254:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001256:	4818      	ldr	r0, [pc, #96]	; (80012b8 <HAL_InitTick+0xf0>)
 8001258:	f002 f8f4 	bl	8003444 <HAL_TIM_Base_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001262:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001266:	2b00      	cmp	r3, #0
 8001268:	d11b      	bne.n	80012a2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800126a:	4813      	ldr	r0, [pc, #76]	; (80012b8 <HAL_InitTick+0xf0>)
 800126c:	f002 f944 	bl	80034f8 <HAL_TIM_Base_Start_IT>
 8001270:	4603      	mov	r3, r0
 8001272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001276:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800127a:	2b00      	cmp	r3, #0
 800127c:	d111      	bne.n	80012a2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800127e:	201c      	movs	r0, #28
 8001280:	f000 fe08 	bl	8001e94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b0f      	cmp	r3, #15
 8001288:	d808      	bhi.n	800129c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800128a:	2200      	movs	r2, #0
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	201c      	movs	r0, #28
 8001290:	f000 fde4 	bl	8001e5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001294:	4a09      	ldr	r2, [pc, #36]	; (80012bc <HAL_InitTick+0xf4>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e002      	b.n	80012a2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3738      	adds	r7, #56	; 0x38
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800
 80012b4:	431bde83 	.word	0x431bde83
 80012b8:	200001a0 	.word	0x200001a0
 80012bc:	20000018 	.word	0x20000018

080012c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <NMI_Handler+0x4>

080012c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <HardFault_Handler+0x4>

080012cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <MemManage_Handler+0x4>

080012d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <BusFault_Handler+0x4>

080012d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <UsageFault_Handler+0x4>

080012de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <TIM2_IRQHandler+0x10>)
 80012f2:	f002 f963 	bl	80035bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200001a0 	.word	0x200001a0

08001300 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <USART2_IRQHandler+0x10>)
 8001306:	f002 fc2d 	bl	8003b64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200000c8 	.word	0x200000c8

08001314 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001318:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800131c:	f000 fff8 	bl	8002310 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}

08001324 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	e00a      	b.n	800134c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001336:	f3af 8000 	nop.w
 800133a:	4601      	mov	r1, r0
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	60ba      	str	r2, [r7, #8]
 8001342:	b2ca      	uxtb	r2, r1
 8001344:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	3301      	adds	r3, #1
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697a      	ldr	r2, [r7, #20]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	429a      	cmp	r2, r3
 8001352:	dbf0      	blt.n	8001336 <_read+0x12>
  }

  return len;
 8001354:	687b      	ldr	r3, [r7, #4]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <_close>:
  }
  return len;
}

int _close(int file)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001386:	605a      	str	r2, [r3, #4]
  return 0;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <_isatty>:

int _isatty(int file)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800139e:	2301      	movs	r3, #1
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <SystemInit+0x20>)
 80013ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <SystemInit+0x20>)
 80013d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <Menu_Handler>:
extern UART_HandleTypeDef huart2;

int extract_command(command_t *cmd);
void process_command(command_t *cmd);
void Menu_Handler(void *params)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af02      	add	r7, sp, #8
 80013f2:	6078      	str	r0, [r7, #4]
  const char* msg_menu = 	  "==================\n"
 80013f4:	4b31      	ldr	r3, [pc, #196]	; (80014bc <Menu_Handler+0xd0>)
 80013f6:	60fb      	str	r3, [r7, #12]
  command_t *cmd;
  int option;

  while(1)
  {
    xQueueSend(Print_Queue,(void*)&msg_menu,portMAX_DELAY);
 80013f8:	4b31      	ldr	r3, [pc, #196]	; (80014c0 <Menu_Handler+0xd4>)
 80013fa:	6818      	ldr	r0, [r3, #0]
 80013fc:	f107 010c 	add.w	r1, r7, #12
 8001400:	2300      	movs	r3, #0
 8001402:	f04f 32ff 	mov.w	r2, #4294967295
 8001406:	f003 fcad 	bl	8004d64 <xQueueGenericSend>
    xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 800140a:	f107 0308 	add.w	r3, r7, #8
 800140e:	f04f 32ff 	mov.w	r2, #4294967295
 8001412:	9200      	str	r2, [sp, #0]
 8001414:	2200      	movs	r2, #0
 8001416:	2100      	movs	r1, #0
 8001418:	2000      	movs	r0, #0
 800141a:	f005 fa25 	bl	8006868 <xTaskGenericNotifyWait>
    cmd =(command_t*)cmd_addr;
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	617b      	str	r3, [r7, #20]

    if(cmd->len == 1)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	895b      	ldrh	r3, [r3, #10]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d133      	bne.n	8001492 <Menu_Handler+0xa6>
    {
       option = cmd->payload[0] - 48;
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	3b30      	subs	r3, #48	; 0x30
 8001430:	613b      	str	r3, [r7, #16]
       switch(option)
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	2b02      	cmp	r3, #2
 8001436:	d035      	beq.n	80014a4 <Menu_Handler+0xb8>
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	2b02      	cmp	r3, #2
 800143c:	dc20      	bgt.n	8001480 <Menu_Handler+0x94>
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <Menu_Handler+0x60>
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d00d      	beq.n	8001466 <Menu_Handler+0x7a>
 800144a:	e019      	b.n	8001480 <Menu_Handler+0x94>
    	   {
       case 0:
    	   current_state = sLedEffect;
 800144c:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <Menu_Handler+0xd8>)
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
    	   xTaskNotify(LED_Handle,0,eNoAction);
 8001452:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <Menu_Handler+0xdc>)
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	2300      	movs	r3, #0
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	2300      	movs	r3, #0
 800145c:	2200      	movs	r2, #0
 800145e:	2100      	movs	r1, #0
 8001460:	f005 fa8a 	bl	8006978 <xTaskGenericNotify>
    	   break;
 8001464:	e01f      	b.n	80014a6 <Menu_Handler+0xba>
       case 1:
    	   current_state = sRTCMenu;
 8001466:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <Menu_Handler+0xd8>)
 8001468:	2202      	movs	r2, #2
 800146a:	701a      	strb	r2, [r3, #0]
    	   xTaskNotify(RTC_Handle,0,eNoAction);
 800146c:	4b17      	ldr	r3, [pc, #92]	; (80014cc <Menu_Handler+0xe0>)
 800146e:	6818      	ldr	r0, [r3, #0]
 8001470:	2300      	movs	r3, #0
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2300      	movs	r3, #0
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	f005 fa7d 	bl	8006978 <xTaskGenericNotify>
    	   break;
 800147e:	e012      	b.n	80014a6 <Menu_Handler+0xba>
       case 2:
              // Exit with amp
    	   break;
       default:
    	   xQueueSend(Print_Queue,(void*)&msg_inv,portMAX_DELAY);
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <Menu_Handler+0xd4>)
 8001482:	6818      	ldr	r0, [r3, #0]
 8001484:	2300      	movs	r3, #0
 8001486:	f04f 32ff 	mov.w	r2, #4294967295
 800148a:	4911      	ldr	r1, [pc, #68]	; (80014d0 <Menu_Handler+0xe4>)
 800148c:	f003 fc6a 	bl	8004d64 <xQueueGenericSend>
    	   continue;
 8001490:	e013      	b.n	80014ba <Menu_Handler+0xce>

    }
    else
    {
    	// Invalid Entry
    	xQueueSend(Print_Queue,(void*)&msg_inv,portMAX_DELAY);
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <Menu_Handler+0xd4>)
 8001494:	6818      	ldr	r0, [r3, #0]
 8001496:	2300      	movs	r3, #0
 8001498:	f04f 32ff 	mov.w	r2, #4294967295
 800149c:	490c      	ldr	r1, [pc, #48]	; (80014d0 <Menu_Handler+0xe4>)
 800149e:	f003 fc61 	bl	8004d64 <xQueueGenericSend>
    	continue;
 80014a2:	e00a      	b.n	80014ba <Menu_Handler+0xce>
    	   break;
 80014a4:	bf00      	nop

    }
    xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 80014a6:	f107 0308 	add.w	r3, r7, #8
 80014aa:	f04f 32ff 	mov.w	r2, #4294967295
 80014ae:	9200      	str	r2, [sp, #0]
 80014b0:	2200      	movs	r2, #0
 80014b2:	2100      	movs	r1, #0
 80014b4:	2000      	movs	r0, #0
 80014b6:	f005 f9d7 	bl	8006868 <xTaskGenericNotifyWait>
    xQueueSend(Print_Queue,(void*)&msg_menu,portMAX_DELAY);
 80014ba:	e79d      	b.n	80013f8 <Menu_Handler+0xc>
 80014bc:	0800b094 	.word	0x0800b094
 80014c0:	20000140 	.word	0x20000140
 80014c4:	20000124 	.word	0x20000124
 80014c8:	20000134 	.word	0x20000134
 80014cc:	20000138 	.word	0x20000138
 80014d0:	20000014 	.word	0x20000014

080014d4 <CMD_Handler>:

  }
}
void CMD_Handler(void *params)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af02      	add	r7, sp, #8
 80014da:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	command_t cmd;
	  while(1)
	  {
           status=xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2300      	movs	r3, #0
 80014e4:	2200      	movs	r2, #0
 80014e6:	2100      	movs	r1, #0
 80014e8:	2000      	movs	r0, #0
 80014ea:	f005 f9bd 	bl	8006868 <xTaskGenericNotifyWait>
 80014ee:	6178      	str	r0, [r7, #20]
           if(status == pdTRUE)
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d1f2      	bne.n	80014dc <CMD_Handler+0x8>
           {
        	   process_command(&cmd);
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 fb12 	bl	8001b24 <process_command>
           status=xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001500:	e7ec      	b.n	80014dc <CMD_Handler+0x8>
	...

08001504 <Print_Handler>:
           }

	  }
}
void Print_Handler(void *params)
{
 8001504:	b590      	push	{r4, r7, lr}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	uint32_t *msg;
	  while(1)
	  {
		  xQueueReceive(Print_Queue,&msg,portMAX_DELAY);
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <Print_Handler+0x38>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f107 010c 	add.w	r1, r7, #12
 8001514:	f04f 32ff 	mov.w	r2, #4294967295
 8001518:	4618      	mov	r0, r3
 800151a:	f003 fe0f 	bl	800513c <xQueueReceive>
		  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen((char*)msg),HAL_MAX_DELAY);
 800151e:	68fc      	ldr	r4, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4618      	mov	r0, r3
 8001524:	f7fe feb0 	bl	8000288 <strlen>
 8001528:	4603      	mov	r3, r0
 800152a:	b29a      	uxth	r2, r3
 800152c:	f04f 33ff 	mov.w	r3, #4294967295
 8001530:	4621      	mov	r1, r4
 8001532:	4803      	ldr	r0, [pc, #12]	; (8001540 <Print_Handler+0x3c>)
 8001534:	f002 fa53 	bl	80039de <HAL_UART_Transmit>
		  xQueueReceive(Print_Queue,&msg,portMAX_DELAY);
 8001538:	e7e8      	b.n	800150c <Print_Handler+0x8>
 800153a:	bf00      	nop
 800153c:	20000140 	.word	0x20000140
 8001540:	200000c8 	.word	0x200000c8

08001544 <LED_Handler>:

	  }
}
void LED_Handler(void *params)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af02      	add	r7, sp, #8
 800154a:	6078      	str	r0, [r7, #4]

	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "========================\n"
 800154c:	4b3e      	ldr	r3, [pc, #248]	; (8001648 <LED_Handler+0x104>)
 800154e:	60fb      	str	r3, [r7, #12]
						  "(none,e1,e2,e3,e4)\n"
						  "Enter your choice here : ";

	while(1){
		/*Wait for notification (Notify wait) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	2300      	movs	r3, #0
 8001558:	2200      	movs	r2, #0
 800155a:	2100      	movs	r1, #0
 800155c:	2000      	movs	r0, #0
 800155e:	f005 f983 	bl	8006868 <xTaskGenericNotifyWait>

		/*Print LED menu */
         xQueueSend(Print_Queue,&msg_led,portMAX_DELAY);
 8001562:	4b3a      	ldr	r3, [pc, #232]	; (800164c <LED_Handler+0x108>)
 8001564:	6818      	ldr	r0, [r3, #0]
 8001566:	f107 010c 	add.w	r1, r7, #12
 800156a:	2300      	movs	r3, #0
 800156c:	f04f 32ff 	mov.w	r2, #4294967295
 8001570:	f003 fbf8 	bl	8004d64 <xQueueGenericSend>
		/*wait for LED command (Notify wait) */
         xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8001574:	f107 0310 	add.w	r3, r7, #16
 8001578:	f04f 32ff 	mov.w	r2, #4294967295
 800157c:	9200      	str	r2, [sp, #0]
 800157e:	2200      	movs	r2, #0
 8001580:	2100      	movs	r1, #0
 8001582:	2000      	movs	r0, #0
 8001584:	f005 f970 	bl	8006868 <xTaskGenericNotifyWait>
         cmd =(command_t*)cmd_addr;
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	617b      	str	r3, [r7, #20]
		if(cmd->len <= 4)
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	895b      	ldrh	r3, [r3, #10]
 8001590:	2b04      	cmp	r3, #4
 8001592:	d843      	bhi.n	800161c <LED_Handler+0xd8>
		{
			if(! strcmp((char*)cmd->payload,"none"))
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	492e      	ldr	r1, [pc, #184]	; (8001650 <LED_Handler+0x10c>)
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe fe6b 	bl	8000274 <strcmp>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d102      	bne.n	80015aa <LED_Handler+0x66>
				led_effect_stop();
 80015a4:	f7ff fb54 	bl	8000c50 <led_effect_stop>
 80015a8:	e040      	b.n	800162c <LED_Handler+0xe8>
			else if (! strcmp((char*)cmd->payload,"e1"))
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	4929      	ldr	r1, [pc, #164]	; (8001654 <LED_Handler+0x110>)
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe fe60 	bl	8000274 <strcmp>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d103      	bne.n	80015c2 <LED_Handler+0x7e>
			{

				led_effect(1);
 80015ba:	2001      	movs	r0, #1
 80015bc:	f7ff fb68 	bl	8000c90 <led_effect>
 80015c0:	e034      	b.n	800162c <LED_Handler+0xe8>

			}

			else if (! strcmp((char*)cmd->payload,"e2"))
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	4924      	ldr	r1, [pc, #144]	; (8001658 <LED_Handler+0x114>)
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe fe54 	bl	8000274 <strcmp>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d103      	bne.n	80015da <LED_Handler+0x96>
				led_effect(2);
 80015d2:	2002      	movs	r0, #2
 80015d4:	f7ff fb5c 	bl	8000c90 <led_effect>
 80015d8:	e028      	b.n	800162c <LED_Handler+0xe8>
			else if (! strcmp((char*)cmd->payload,"e3"))
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	491f      	ldr	r1, [pc, #124]	; (800165c <LED_Handler+0x118>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe fe48 	bl	8000274 <strcmp>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d103      	bne.n	80015f2 <LED_Handler+0xae>
				led_effect(3);
 80015ea:	2003      	movs	r0, #3
 80015ec:	f7ff fb50 	bl	8000c90 <led_effect>
 80015f0:	e01c      	b.n	800162c <LED_Handler+0xe8>
			else if (! strcmp((char*)cmd->payload,"e4"))
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	491a      	ldr	r1, [pc, #104]	; (8001660 <LED_Handler+0x11c>)
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe fe3c 	bl	8000274 <strcmp>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d103      	bne.n	800160a <LED_Handler+0xc6>
				led_effect(4);
 8001602:	2004      	movs	r0, #4
 8001604:	f7ff fb44 	bl	8000c90 <led_effect>
 8001608:	e010      	b.n	800162c <LED_Handler+0xe8>
			else
				/*print invalid message */
				xQueueSend(Print_Queue,(void*)&msg_inv,portMAX_DELAY);
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <LED_Handler+0x108>)
 800160c:	6818      	ldr	r0, [r3, #0]
 800160e:	2300      	movs	r3, #0
 8001610:	f04f 32ff 	mov.w	r2, #4294967295
 8001614:	4913      	ldr	r1, [pc, #76]	; (8001664 <LED_Handler+0x120>)
 8001616:	f003 fba5 	bl	8004d64 <xQueueGenericSend>
 800161a:	e007      	b.n	800162c <LED_Handler+0xe8>
		}
		else
		{
			xQueueSend(Print_Queue,(void*)&msg_inv,portMAX_DELAY);
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <LED_Handler+0x108>)
 800161e:	6818      	ldr	r0, [r3, #0]
 8001620:	2300      	movs	r3, #0
 8001622:	f04f 32ff 	mov.w	r2, #4294967295
 8001626:	490f      	ldr	r1, [pc, #60]	; (8001664 <LED_Handler+0x120>)
 8001628:	f003 fb9c 	bl	8004d64 <xQueueGenericSend>
		}

		/*update state variable */
		current_state = sMainMenu;
 800162c:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <LED_Handler+0x124>)
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]

		/*Notify menu task */
		xTaskNotify(Menu_Task_Handle,0,eNoAction);
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <LED_Handler+0x128>)
 8001634:	6818      	ldr	r0, [r3, #0]
 8001636:	2300      	movs	r3, #0
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2300      	movs	r3, #0
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	f005 f99a 	bl	8006978 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001644:	e784      	b.n	8001550 <LED_Handler+0xc>
 8001646:	bf00      	nop
 8001648:	0800b11c 	.word	0x0800b11c
 800164c:	20000140 	.word	0x20000140
 8001650:	0800b194 	.word	0x0800b194
 8001654:	0800b19c 	.word	0x0800b19c
 8001658:	0800b1a0 	.word	0x0800b1a0
 800165c:	0800b1a4 	.word	0x0800b1a4
 8001660:	0800b1a8 	.word	0x0800b1a8
 8001664:	20000014 	.word	0x20000014
 8001668:	20000124 	.word	0x20000124
 800166c:	20000128 	.word	0x20000128

08001670 <getnumber>:

	}
}
uint8_t getnumber(uint8_t *p , int len)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]

	int value ;

	if(len > 1)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	dd0f      	ble.n	80016a0 <getnumber+0x30>
	   value =  ( ((p[0]-48) * 10) + (p[1] - 48) );
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	461a      	mov	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3301      	adds	r3, #1
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	3b30      	subs	r3, #48	; 0x30
 800169a:	4413      	add	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	e003      	b.n	80016a8 <getnumber+0x38>
	else
		value = p[0] - 48;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	3b30      	subs	r3, #48	; 0x30
 80016a6:	60fb      	str	r3, [r7, #12]

	return value;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	b2db      	uxtb	r3, r3

}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <RTC_Handler>:
void RTC_Handler(void *params)
{
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b09b      	sub	sp, #108	; 0x6c
 80016bc:	af02      	add	r7, sp, #8
 80016be:	6078      	str	r0, [r7, #4]
	const char* msg_rtc1 = "========================\n"
 80016c0:	4bb2      	ldr	r3, [pc, #712]	; (800198c <RTC_Handler+0x2d4>)
 80016c2:	64fb      	str	r3, [r7, #76]	; 0x4c
								"|         RTC          |\n"
								"========================\n";

		const char* msg_rtc2 = "Configure Time            ----> 0\n"
 80016c4:	4bb2      	ldr	r3, [pc, #712]	; (8001990 <RTC_Handler+0x2d8>)
 80016c6:	64bb      	str	r3, [r7, #72]	; 0x48
								"Enable reporting          ----> 2\n"
								"Exit                      ----> 3\n"
								"Enter your choice here : ";


		const char *msg_rtc_hh = "Enter hour(1-12):";
 80016c8:	4bb2      	ldr	r3, [pc, #712]	; (8001994 <RTC_Handler+0x2dc>)
 80016ca:	647b      	str	r3, [r7, #68]	; 0x44
		const char *msg_rtc_mm = "Enter minutes(0-59):";
 80016cc:	4bb2      	ldr	r3, [pc, #712]	; (8001998 <RTC_Handler+0x2e0>)
 80016ce:	643b      	str	r3, [r7, #64]	; 0x40
		const char *msg_rtc_ss = "Enter seconds(0-59):";
 80016d0:	4bb2      	ldr	r3, [pc, #712]	; (800199c <RTC_Handler+0x2e4>)
 80016d2:	63fb      	str	r3, [r7, #60]	; 0x3c

		const char *msg_rtc_dd  = "Enter date(1-31):";
 80016d4:	4bb2      	ldr	r3, [pc, #712]	; (80019a0 <RTC_Handler+0x2e8>)
 80016d6:	63bb      	str	r3, [r7, #56]	; 0x38
		const char *msg_rtc_mo  ="Enter month(1-12):";
 80016d8:	4bb2      	ldr	r3, [pc, #712]	; (80019a4 <RTC_Handler+0x2ec>)
 80016da:	637b      	str	r3, [r7, #52]	; 0x34
		const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 80016dc:	4bb2      	ldr	r3, [pc, #712]	; (80019a8 <RTC_Handler+0x2f0>)
 80016de:	633b      	str	r3, [r7, #48]	; 0x30
		const char *msg_rtc_yr  = "Enter year(0-99):";
 80016e0:	4bb2      	ldr	r3, [pc, #712]	; (80019ac <RTC_Handler+0x2f4>)
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		const char *msg_conf = "Configuration successful\n";
 80016e4:	4bb2      	ldr	r3, [pc, #712]	; (80019b0 <RTC_Handler+0x2f8>)
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
		const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 80016e8:	4bb2      	ldr	r3, [pc, #712]	; (80019b4 <RTC_Handler+0x2fc>)
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
#define YEAR_CONFIG 	2
#define DAY_CONFIG 		3
		while(1){
			/*
			 Notify wait (wait till someone notifies)*/
			xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80016ec:	f04f 33ff 	mov.w	r3, #4294967295
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	2300      	movs	r3, #0
 80016f4:	2200      	movs	r2, #0
 80016f6:	2100      	movs	r1, #0
 80016f8:	2000      	movs	r0, #0
 80016fa:	f005 f8b5 	bl	8006868 <xTaskGenericNotifyWait>

			/*Print the menu and show current date and time information */
	         xQueueSend(Print_Queue,&msg_rtc1,portMAX_DELAY);
 80016fe:	4bae      	ldr	r3, [pc, #696]	; (80019b8 <RTC_Handler+0x300>)
 8001700:	6818      	ldr	r0, [r3, #0]
 8001702:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001706:	2300      	movs	r3, #0
 8001708:	f04f 32ff 	mov.w	r2, #4294967295
 800170c:	f003 fb2a 	bl	8004d64 <xQueueGenericSend>
	         show_time_date();
 8001710:	f7ff fbf0 	bl	8000ef4 <show_time_date>
	         xQueueSend(Print_Queue,&msg_rtc2,portMAX_DELAY);
 8001714:	4ba8      	ldr	r3, [pc, #672]	; (80019b8 <RTC_Handler+0x300>)
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800171c:	2300      	movs	r3, #0
 800171e:	f04f 32ff 	mov.w	r2, #4294967295
 8001722:	f003 fb1f 	bl	8004d64 <xQueueGenericSend>


			while(current_state!= sMainMenu){
 8001726:	bf00      	nop
 8001728:	e1e1      	b.n	8001aee <RTC_Handler+0x436>

				/*Wait for command notification (Notify wait) */
		         xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 800172a:	f107 0320 	add.w	r3, r7, #32
 800172e:	f04f 32ff 	mov.w	r2, #4294967295
 8001732:	9200      	str	r2, [sp, #0]
 8001734:	2200      	movs	r2, #0
 8001736:	2100      	movs	r1, #0
 8001738:	2000      	movs	r0, #0
 800173a:	f005 f895 	bl	8006868 <xTaskGenericNotifyWait>
		         cmd =(command_t*)cmd_addr;
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	65fb      	str	r3, [r7, #92]	; 0x5c
				switch(current_state)
 8001742:	4b9e      	ldr	r3, [pc, #632]	; (80019bc <RTC_Handler+0x304>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	3b02      	subs	r3, #2
 8001748:	2b03      	cmp	r3, #3
 800174a:	f200 81d0 	bhi.w	8001aee <RTC_Handler+0x436>
 800174e:	a201      	add	r2, pc, #4	; (adr r2, 8001754 <RTC_Handler+0x9c>)
 8001750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001754:	08001765 	.word	0x08001765
 8001758:	08001817 	.word	0x08001817
 800175c:	08001905 	.word	0x08001905
 8001760:	08001a6b 	.word	0x08001a6b
				{
					case sRTCMenu:{
						if(cmd->len ==1)
 8001764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001766:	895b      	ldrh	r3, [r3, #10]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d148      	bne.n	80017fe <RTC_Handler+0x146>
						{		/* process RTC menu commands */
							menu_code = cmd->payload[0] - 48;
 800176c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	3b30      	subs	r3, #48	; 0x30
 8001772:	653b      	str	r3, [r7, #80]	; 0x50
 8001774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001776:	2b03      	cmp	r3, #3
 8001778:	d835      	bhi.n	80017e6 <RTC_Handler+0x12e>
 800177a:	a201      	add	r2, pc, #4	; (adr r2, 8001780 <RTC_Handler+0xc8>)
 800177c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001780:	08001791 	.word	0x08001791
 8001784:	080017ab 	.word	0x080017ab
 8001788:	080017c5 	.word	0x080017c5
 800178c:	080017df 	.word	0x080017df
							switch(menu_code)
							{
							case 0:
								current_state = sRTCTimeConfig;
 8001790:	4b8a      	ldr	r3, [pc, #552]	; (80019bc <RTC_Handler+0x304>)
 8001792:	2203      	movs	r2, #3
 8001794:	701a      	strb	r2, [r3, #0]
								xQueueSend(Print_Queue,&msg_rtc_hh,portMAX_DELAY);
 8001796:	4b88      	ldr	r3, [pc, #544]	; (80019b8 <RTC_Handler+0x300>)
 8001798:	6818      	ldr	r0, [r3, #0]
 800179a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800179e:	2300      	movs	r3, #0
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295
 80017a4:	f003 fade 	bl	8004d64 <xQueueGenericSend>
								break;
 80017a8:	e034      	b.n	8001814 <RTC_Handler+0x15c>
							case 1:
								current_state = sRTCDateConfig;
 80017aa:	4b84      	ldr	r3, [pc, #528]	; (80019bc <RTC_Handler+0x304>)
 80017ac:	2204      	movs	r2, #4
 80017ae:	701a      	strb	r2, [r3, #0]
								xQueueSend(Print_Queue,&msg_rtc_dd,portMAX_DELAY);
 80017b0:	4b81      	ldr	r3, [pc, #516]	; (80019b8 <RTC_Handler+0x300>)
 80017b2:	6818      	ldr	r0, [r3, #0]
 80017b4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80017b8:	2300      	movs	r3, #0
 80017ba:	f04f 32ff 	mov.w	r2, #4294967295
 80017be:	f003 fad1 	bl	8004d64 <xQueueGenericSend>
								break;
 80017c2:	e027      	b.n	8001814 <RTC_Handler+0x15c>
							case 2:
								current_state = sRTCReport;
 80017c4:	4b7d      	ldr	r3, [pc, #500]	; (80019bc <RTC_Handler+0x304>)
 80017c6:	2205      	movs	r2, #5
 80017c8:	701a      	strb	r2, [r3, #0]
								xQueueSend(Print_Queue,&msg_rtc_report,portMAX_DELAY);
 80017ca:	4b7b      	ldr	r3, [pc, #492]	; (80019b8 <RTC_Handler+0x300>)
 80017cc:	6818      	ldr	r0, [r3, #0]
 80017ce:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80017d2:	2300      	movs	r3, #0
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295
 80017d8:	f003 fac4 	bl	8004d64 <xQueueGenericSend>
								break;
 80017dc:	e01a      	b.n	8001814 <RTC_Handler+0x15c>
							case 3:
								current_state = sMainMenu;
 80017de:	4b77      	ldr	r3, [pc, #476]	; (80019bc <RTC_Handler+0x304>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
								break;
 80017e4:	e016      	b.n	8001814 <RTC_Handler+0x15c>
							default:
								current_state = sMainMenu;
 80017e6:	4b75      	ldr	r3, [pc, #468]	; (80019bc <RTC_Handler+0x304>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
								xQueueSend(Print_Queue,&msg_inv,portMAX_DELAY);
 80017ec:	4b72      	ldr	r3, [pc, #456]	; (80019b8 <RTC_Handler+0x300>)
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	2300      	movs	r3, #0
 80017f2:	f04f 32ff 	mov.w	r2, #4294967295
 80017f6:	4972      	ldr	r1, [pc, #456]	; (80019c0 <RTC_Handler+0x308>)
 80017f8:	f003 fab4 	bl	8004d64 <xQueueGenericSend>
 80017fc:	e177      	b.n	8001aee <RTC_Handler+0x436>
							}
						}else
						{
							current_state = sMainMenu;
 80017fe:	4b6f      	ldr	r3, [pc, #444]	; (80019bc <RTC_Handler+0x304>)
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
							xQueueSend(Print_Queue,&msg_inv,portMAX_DELAY);
 8001804:	4b6c      	ldr	r3, [pc, #432]	; (80019b8 <RTC_Handler+0x300>)
 8001806:	6818      	ldr	r0, [r3, #0]
 8001808:	2300      	movs	r3, #0
 800180a:	f04f 32ff 	mov.w	r2, #4294967295
 800180e:	496c      	ldr	r1, [pc, #432]	; (80019c0 <RTC_Handler+0x308>)
 8001810:	f003 faa8 	bl	8004d64 <xQueueGenericSend>
						}

						break;}
 8001814:	e16b      	b.n	8001aee <RTC_Handler+0x436>

					case sRTCTimeConfig:{
						/* get hh, mm, ss infor and configure RTC */
                         switch(rtc_state)
 8001816:	4b6b      	ldr	r3, [pc, #428]	; (80019c4 <RTC_Handler+0x30c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d03b      	beq.n	8001896 <RTC_Handler+0x1de>
 800181e:	2b02      	cmp	r3, #2
 8001820:	f300 8165 	bgt.w	8001aee <RTC_Handler+0x436>
 8001824:	2b00      	cmp	r3, #0
 8001826:	d002      	beq.n	800182e <RTC_Handler+0x176>
 8001828:	2b01      	cmp	r3, #1
 800182a:	d01a      	beq.n	8001862 <RTC_Handler+0x1aa>
 800182c:	e15f      	b.n	8001aee <RTC_Handler+0x436>
                         {
                         case HH_CONFIG :
                         {
                        	 uint8_t hour = getnumber(cmd->payload,cmd->len);
 800182e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001830:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001832:	895b      	ldrh	r3, [r3, #10]
 8001834:	4619      	mov	r1, r3
 8001836:	4610      	mov	r0, r2
 8001838:	f7ff ff1a 	bl	8001670 <getnumber>
 800183c:	4603      	mov	r3, r0
 800183e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                        	 time.Hours = hour;
 8001842:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001846:	733b      	strb	r3, [r7, #12]
                        	 rtc_state = MM_CONFIG;
 8001848:	4b5e      	ldr	r3, [pc, #376]	; (80019c4 <RTC_Handler+0x30c>)
 800184a:	2201      	movs	r2, #1
 800184c:	601a      	str	r2, [r3, #0]
                        	 xQueueSend(Print_Queue,&msg_rtc_mm,portMAX_DELAY);
 800184e:	4b5a      	ldr	r3, [pc, #360]	; (80019b8 <RTC_Handler+0x300>)
 8001850:	6818      	ldr	r0, [r3, #0]
 8001852:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001856:	2300      	movs	r3, #0
 8001858:	f04f 32ff 	mov.w	r2, #4294967295
 800185c:	f003 fa82 	bl	8004d64 <xQueueGenericSend>
                        	 break;}
 8001860:	e04f      	b.n	8001902 <RTC_Handler+0x24a>
                         case MM_CONFIG :
                                           {
                         	 uint8_t min = getnumber(cmd->payload,cmd->len);
 8001862:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001866:	895b      	ldrh	r3, [r3, #10]
 8001868:	4619      	mov	r1, r3
 800186a:	4610      	mov	r0, r2
 800186c:	f7ff ff00 	bl	8001670 <getnumber>
 8001870:	4603      	mov	r3, r0
 8001872:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                        	 time.Minutes = min;
 8001876:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800187a:	737b      	strb	r3, [r7, #13]
                        	 rtc_state = SS_CONFIG;
 800187c:	4b51      	ldr	r3, [pc, #324]	; (80019c4 <RTC_Handler+0x30c>)
 800187e:	2202      	movs	r2, #2
 8001880:	601a      	str	r2, [r3, #0]
                        	 xQueueSend(Print_Queue,&msg_rtc_ss,portMAX_DELAY);
 8001882:	4b4d      	ldr	r3, [pc, #308]	; (80019b8 <RTC_Handler+0x300>)
 8001884:	6818      	ldr	r0, [r3, #0]
 8001886:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800188a:	2300      	movs	r3, #0
 800188c:	f04f 32ff 	mov.w	r2, #4294967295
 8001890:	f003 fa68 	bl	8004d64 <xQueueGenericSend>
                        	 break;}
 8001894:	e035      	b.n	8001902 <RTC_Handler+0x24a>
                         case SS_CONFIG :{
                         	 uint8_t sec = getnumber(cmd->payload,cmd->len);
 8001896:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001898:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800189a:	895b      	ldrh	r3, [r3, #10]
 800189c:	4619      	mov	r1, r3
 800189e:	4610      	mov	r0, r2
 80018a0:	f7ff fee6 	bl	8001670 <getnumber>
 80018a4:	4603      	mov	r3, r0
 80018a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        	 time.Seconds = sec;
 80018aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80018ae:	73bb      	strb	r3, [r7, #14]
                        	 if(!validate_rtc_information(&time,NULL))
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	2100      	movs	r1, #0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fbb0 	bl	800101c <validate_rtc_information>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d110      	bne.n	80018e4 <RTC_Handler+0x22c>
                        	 {
                        		 rtc_configure_time(&time);
 80018c2:	f107 030c 	add.w	r3, r7, #12
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff fb80 	bl	8000fcc <rtc_configure_time>
                        		 xQueueSend(Print_Queue,&msg_conf,portMAX_DELAY);
 80018cc:	4b3a      	ldr	r3, [pc, #232]	; (80019b8 <RTC_Handler+0x300>)
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80018d4:	2300      	movs	r3, #0
 80018d6:	f04f 32ff 	mov.w	r2, #4294967295
 80018da:	f003 fa43 	bl	8004d64 <xQueueGenericSend>
                        		 show_time_date();
 80018de:	f7ff fb09 	bl	8000ef4 <show_time_date>
 80018e2:	e007      	b.n	80018f4 <RTC_Handler+0x23c>
                        	 }
                        	 else
                        		 xQueueSend(Print_Queue,&msg_inv,portMAX_DELAY);
 80018e4:	4b34      	ldr	r3, [pc, #208]	; (80019b8 <RTC_Handler+0x300>)
 80018e6:	6818      	ldr	r0, [r3, #0]
 80018e8:	2300      	movs	r3, #0
 80018ea:	f04f 32ff 	mov.w	r2, #4294967295
 80018ee:	4934      	ldr	r1, [pc, #208]	; (80019c0 <RTC_Handler+0x308>)
 80018f0:	f003 fa38 	bl	8004d64 <xQueueGenericSend>

								current_state = sMainMenu;
 80018f4:	4b31      	ldr	r3, [pc, #196]	; (80019bc <RTC_Handler+0x304>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 80018fa:	4b32      	ldr	r3, [pc, #200]	; (80019c4 <RTC_Handler+0x30c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
                        	 break;}
 8001900:	bf00      	nop


                         }
						break;}
 8001902:	e0f4      	b.n	8001aee <RTC_Handler+0x436>

					case sRTCDateConfig:{

						/*get date, month, day , year info and configure RTC */
						switch(rtc_state)
 8001904:	4b2f      	ldr	r3, [pc, #188]	; (80019c4 <RTC_Handler+0x30c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b03      	cmp	r3, #3
 800190a:	f200 80f0 	bhi.w	8001aee <RTC_Handler+0x436>
 800190e:	a201      	add	r2, pc, #4	; (adr r2, 8001914 <RTC_Handler+0x25c>)
 8001910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001914:	08001925 	.word	0x08001925
 8001918:	08001959 	.word	0x08001959
 800191c:	080019fd 	.word	0x080019fd
 8001920:	080019c9 	.word	0x080019c9
							{
								case DATE_CONFIG:{
									uint8_t d = getnumber(cmd->payload , cmd->len);
 8001924:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001928:	895b      	ldrh	r3, [r3, #10]
 800192a:	4619      	mov	r1, r3
 800192c:	4610      	mov	r0, r2
 800192e:	f7ff fe9f 	bl	8001670 <getnumber>
 8001932:	4603      	mov	r3, r0
 8001934:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
									date.Date = d;
 8001938:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800193c:	72bb      	strb	r3, [r7, #10]
									rtc_state = MONTH_CONFIG;
 800193e:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <RTC_Handler+0x30c>)
 8001940:	2201      	movs	r2, #1
 8001942:	601a      	str	r2, [r3, #0]
									xQueueSend(Print_Queue,&msg_rtc_mo,portMAX_DELAY);
 8001944:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <RTC_Handler+0x300>)
 8001946:	6818      	ldr	r0, [r3, #0]
 8001948:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800194c:	2300      	movs	r3, #0
 800194e:	f04f 32ff 	mov.w	r2, #4294967295
 8001952:	f003 fa07 	bl	8004d64 <xQueueGenericSend>
									break;}
 8001956:	e087      	b.n	8001a68 <RTC_Handler+0x3b0>
								case MONTH_CONFIG:{
									uint8_t month = getnumber(cmd->payload , cmd->len);
 8001958:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800195a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800195c:	895b      	ldrh	r3, [r3, #10]
 800195e:	4619      	mov	r1, r3
 8001960:	4610      	mov	r0, r2
 8001962:	f7ff fe85 	bl	8001670 <getnumber>
 8001966:	4603      	mov	r3, r0
 8001968:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
									date.Month = month;
 800196c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001970:	727b      	strb	r3, [r7, #9]
									rtc_state = DAY_CONFIG;
 8001972:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <RTC_Handler+0x30c>)
 8001974:	2203      	movs	r2, #3
 8001976:	601a      	str	r2, [r3, #0]
									xQueueSend(Print_Queue,&msg_rtc_dow,portMAX_DELAY);
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <RTC_Handler+0x300>)
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001980:	2300      	movs	r3, #0
 8001982:	f04f 32ff 	mov.w	r2, #4294967295
 8001986:	f003 f9ed 	bl	8004d64 <xQueueGenericSend>
									break;}
 800198a:	e06d      	b.n	8001a68 <RTC_Handler+0x3b0>
 800198c:	0800b1ac 	.word	0x0800b1ac
 8001990:	0800b1f8 	.word	0x0800b1f8
 8001994:	0800b29c 	.word	0x0800b29c
 8001998:	0800b2b0 	.word	0x0800b2b0
 800199c:	0800b2c8 	.word	0x0800b2c8
 80019a0:	0800b2e0 	.word	0x0800b2e0
 80019a4:	0800b2f4 	.word	0x0800b2f4
 80019a8:	0800b308 	.word	0x0800b308
 80019ac:	0800b320 	.word	0x0800b320
 80019b0:	0800b334 	.word	0x0800b334
 80019b4:	0800b350 	.word	0x0800b350
 80019b8:	20000140 	.word	0x20000140
 80019bc:	20000124 	.word	0x20000124
 80019c0:	20000014 	.word	0x20000014
 80019c4:	200001e8 	.word	0x200001e8
								case DAY_CONFIG:{
									uint8_t day = getnumber(cmd->payload , cmd->len);
 80019c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80019ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019cc:	895b      	ldrh	r3, [r3, #10]
 80019ce:	4619      	mov	r1, r3
 80019d0:	4610      	mov	r0, r2
 80019d2:	f7ff fe4d 	bl	8001670 <getnumber>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
									date.WeekDay = day;
 80019dc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80019e0:	723b      	strb	r3, [r7, #8]
									rtc_state = YEAR_CONFIG;
 80019e2:	4b4a      	ldr	r3, [pc, #296]	; (8001b0c <RTC_Handler+0x454>)
 80019e4:	2202      	movs	r2, #2
 80019e6:	601a      	str	r2, [r3, #0]
									xQueueSend(Print_Queue,&msg_rtc_yr,portMAX_DELAY);
 80019e8:	4b49      	ldr	r3, [pc, #292]	; (8001b10 <RTC_Handler+0x458>)
 80019ea:	6818      	ldr	r0, [r3, #0]
 80019ec:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80019f0:	2300      	movs	r3, #0
 80019f2:	f04f 32ff 	mov.w	r2, #4294967295
 80019f6:	f003 f9b5 	bl	8004d64 <xQueueGenericSend>
									break;}
 80019fa:	e035      	b.n	8001a68 <RTC_Handler+0x3b0>
								case YEAR_CONFIG:{
									uint8_t year = getnumber(cmd->payload , cmd->len);
 80019fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80019fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a00:	895b      	ldrh	r3, [r3, #10]
 8001a02:	4619      	mov	r1, r3
 8001a04:	4610      	mov	r0, r2
 8001a06:	f7ff fe33 	bl	8001670 <getnumber>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
									date.Year = year;
 8001a10:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001a14:	72fb      	strb	r3, [r7, #11]

									if(!validate_rtc_information(NULL,&date))
 8001a16:	f107 0308 	add.w	r3, r7, #8
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f7ff fafd 	bl	800101c <validate_rtc_information>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d110      	bne.n	8001a4a <RTC_Handler+0x392>
									{
										rtc_configure_date(&date);
 8001a28:	f107 0308 	add.w	r3, r7, #8
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fae5 	bl	8000ffc <rtc_configure_date>
										xQueueSend(Print_Queue,&msg_conf,portMAX_DELAY);
 8001a32:	4b37      	ldr	r3, [pc, #220]	; (8001b10 <RTC_Handler+0x458>)
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a40:	f003 f990 	bl	8004d64 <xQueueGenericSend>
										show_time_date();
 8001a44:	f7ff fa56 	bl	8000ef4 <show_time_date>
 8001a48:	e007      	b.n	8001a5a <RTC_Handler+0x3a2>
									}else
										xQueueSend(Print_Queue,&msg_inv,portMAX_DELAY);
 8001a4a:	4b31      	ldr	r3, [pc, #196]	; (8001b10 <RTC_Handler+0x458>)
 8001a4c:	6818      	ldr	r0, [r3, #0]
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f04f 32ff 	mov.w	r2, #4294967295
 8001a54:	492f      	ldr	r1, [pc, #188]	; (8001b14 <RTC_Handler+0x45c>)
 8001a56:	f003 f985 	bl	8004d64 <xQueueGenericSend>

									current_state = sMainMenu;
 8001a5a:	4b2f      	ldr	r3, [pc, #188]	; (8001b18 <RTC_Handler+0x460>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
									rtc_state = 0;
 8001a60:	4b2a      	ldr	r3, [pc, #168]	; (8001b0c <RTC_Handler+0x454>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
									break;}
 8001a66:	bf00      	nop
							}

						break;}
 8001a68:	e041      	b.n	8001aee <RTC_Handler+0x436>

					case sRTCReport:{
						/*enable or disable RTC current time reporting over ITM printf */
						if(cmd->len == 1)
 8001a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a6c:	895b      	ldrh	r3, [r3, #10]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d131      	bne.n	8001ad6 <RTC_Handler+0x41e>
						{
							if(cmd->payload[0] == 'y'){
 8001a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b79      	cmp	r3, #121	; 0x79
 8001a78:	d115      	bne.n	8001aa6 <RTC_Handler+0x3ee>
								if(xTimerIsTimerActive(rtc_timer) == pdFALSE)
 8001a7a:	4b28      	ldr	r3, [pc, #160]	; (8001b1c <RTC_Handler+0x464>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f005 fdc8 	bl	8007614 <xTimerIsTimerActive>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d12d      	bne.n	8001ae6 <RTC_Handler+0x42e>
									xTimerStart(rtc_timer,portMAX_DELAY);
 8001a8a:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <RTC_Handler+0x464>)
 8001a8c:	681c      	ldr	r4, [r3, #0]
 8001a8e:	f004 f9f1 	bl	8005e74 <xTaskGetTickCount>
 8001a92:	4602      	mov	r2, r0
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	f005 fb18 	bl	80070d4 <xTimerGenericCommand>
 8001aa4:	e01f      	b.n	8001ae6 <RTC_Handler+0x42e>
							}else if (cmd->payload[0] == 'n'){
 8001aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b6e      	cmp	r3, #110	; 0x6e
 8001aac:	d10a      	bne.n	8001ac4 <RTC_Handler+0x40c>
								xTimerStop(rtc_timer,portMAX_DELAY);
 8001aae:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <RTC_Handler+0x464>)
 8001ab0:	6818      	ldr	r0, [r3, #0]
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	2200      	movs	r2, #0
 8001abc:	2103      	movs	r1, #3
 8001abe:	f005 fb09 	bl	80070d4 <xTimerGenericCommand>
 8001ac2:	e010      	b.n	8001ae6 <RTC_Handler+0x42e>
							}else{
								xQueueSend(Print_Queue,&msg_inv,portMAX_DELAY);
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <RTC_Handler+0x458>)
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f04f 32ff 	mov.w	r2, #4294967295
 8001ace:	4911      	ldr	r1, [pc, #68]	; (8001b14 <RTC_Handler+0x45c>)
 8001ad0:	f003 f948 	bl	8004d64 <xQueueGenericSend>
 8001ad4:	e007      	b.n	8001ae6 <RTC_Handler+0x42e>
							}

						}else
						    xQueueSend(Print_Queue,&msg_inv,portMAX_DELAY);
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <RTC_Handler+0x458>)
 8001ad8:	6818      	ldr	r0, [r3, #0]
 8001ada:	2300      	movs	r3, #0
 8001adc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae0:	490c      	ldr	r1, [pc, #48]	; (8001b14 <RTC_Handler+0x45c>)
 8001ae2:	f003 f93f 	bl	8004d64 <xQueueGenericSend>

						current_state = sMainMenu;
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <RTC_Handler+0x460>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
						break;}
 8001aec:	bf00      	nop
			while(current_state!= sMainMenu){
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <RTC_Handler+0x460>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f47f ae19 	bne.w	800172a <RTC_Handler+0x72>
				}// switch end

			} //while end

			   /*Notify menu task */
              xTaskNotify(Menu_Task_Handle,0,eNoAction);
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <RTC_Handler+0x468>)
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	2300      	movs	r3, #0
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2300      	movs	r3, #0
 8001b02:	2200      	movs	r2, #0
 8001b04:	2100      	movs	r1, #0
 8001b06:	f004 ff37 	bl	8006978 <xTaskGenericNotify>
			xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001b0a:	e5ef      	b.n	80016ec <RTC_Handler+0x34>
 8001b0c:	200001e8 	.word	0x200001e8
 8001b10:	20000140 	.word	0x20000140
 8001b14:	20000014 	.word	0x20000014
 8001b18:	20000124 	.word	0x20000124
 8001b1c:	20000120 	.word	0x20000120
 8001b20:	20000128 	.word	0x20000128

08001b24 <process_command>:

			}//while super loop end
}
void process_command(command_t *cmd)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	6078      	str	r0, [r7, #4]
    extract_command(cmd);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f835 	bl	8001b9c <extract_command>

    switch(current_state)
 8001b32:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <process_command+0x68>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b05      	cmp	r3, #5
 8001b38:	dc24      	bgt.n	8001b84 <process_command+0x60>
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	da18      	bge.n	8001b70 <process_command+0x4c>
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d002      	beq.n	8001b48 <process_command+0x24>
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d00a      	beq.n	8001b5c <process_command+0x38>
     	      xTaskNotify(RTC_Handle,(uint32_t)cmd,eSetValueWithOverwrite);
        	  break;

    }

}
 8001b46:	e01d      	b.n	8001b84 <process_command+0x60>
    	  xTaskNotify(Menu_Task_Handle,(uint32_t)cmd,eSetValueWithOverwrite);
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <process_command+0x6c>)
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	2303      	movs	r3, #3
 8001b54:	2100      	movs	r1, #0
 8001b56:	f004 ff0f 	bl	8006978 <xTaskGenericNotify>
    	  break;
 8001b5a:	e013      	b.n	8001b84 <process_command+0x60>
    	  xTaskNotify(LED_Handle,(uint32_t)cmd,eSetValueWithOverwrite);
 8001b5c:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <process_command+0x70>)
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	2300      	movs	r3, #0
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	2303      	movs	r3, #3
 8001b68:	2100      	movs	r1, #0
 8001b6a:	f004 ff05 	bl	8006978 <xTaskGenericNotify>
    	  break;
 8001b6e:	e009      	b.n	8001b84 <process_command+0x60>
     	      xTaskNotify(RTC_Handle,(uint32_t)cmd,eSetValueWithOverwrite);
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <process_command+0x74>)
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	2300      	movs	r3, #0
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	f004 fefb 	bl	8006978 <xTaskGenericNotify>
        	  break;
 8001b82:	bf00      	nop
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000124 	.word	0x20000124
 8001b90:	20000128 	.word	0x20000128
 8001b94:	20000134 	.word	0x20000134
 8001b98:	20000138 	.word	0x20000138

08001b9c <extract_command>:

int extract_command(command_t *cmd)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(Input_Data_Queue);
 8001ba4:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <extract_command+0x74>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f003 fc8c 	bl	80054c6 <uxQueueMessagesWaiting>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d102      	bne.n	8001bbe <extract_command+0x22>
 8001bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbc:	e023      	b.n	8001c06 <extract_command+0x6a>
	uint8_t i = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	75fb      	strb	r3, [r7, #23]

	do
	{
       status = xQueueReceive(Input_Data_Queue,&item,0);
 8001bc2:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <extract_command+0x74>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f107 010f 	add.w	r1, r7, #15
 8001bca:	2200      	movs	r2, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f003 fab5 	bl	800513c <xQueueReceive>
 8001bd2:	6138      	str	r0, [r7, #16]
       if(status == pdTRUE) cmd->payload[i++] = item;
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d106      	bne.n	8001be8 <extract_command+0x4c>
 8001bda:	7dfb      	ldrb	r3, [r7, #23]
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	75fa      	strb	r2, [r7, #23]
 8001be0:	461a      	mov	r2, r3
 8001be2:	7bf9      	ldrb	r1, [r7, #15]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	5499      	strb	r1, [r3, r2]

	}while(item != '\n');
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	2b0a      	cmp	r3, #10
 8001bec:	d1e9      	bne.n	8001bc2 <extract_command+0x26>
	cmd->payload[i-1] = '\0';
 8001bee:	7dfb      	ldrb	r3, [r7, #23]
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1; // Save length without counting null char
 8001bf8:	7dfb      	ldrb	r3, [r7, #23]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	815a      	strh	r2, [r3, #10]
	return 0;
 8001c04:	2300      	movs	r3, #0

}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	2000013c 	.word	0x2000013c

08001c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c18:	480d      	ldr	r0, [pc, #52]	; (8001c50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c1a:	490e      	ldr	r1, [pc, #56]	; (8001c54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c1c:	4a0e      	ldr	r2, [pc, #56]	; (8001c58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c20:	e002      	b.n	8001c28 <LoopCopyDataInit>

08001c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c26:	3304      	adds	r3, #4

08001c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c2c:	d3f9      	bcc.n	8001c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2e:	4a0b      	ldr	r2, [pc, #44]	; (8001c5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c30:	4c0b      	ldr	r4, [pc, #44]	; (8001c60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c34:	e001      	b.n	8001c3a <LoopFillZerobss>

08001c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c38:	3204      	adds	r2, #4

08001c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c3c:	d3fb      	bcc.n	8001c36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c3e:	f7ff fbc3 	bl	80013c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c42:	f008 f815 	bl	8009c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c46:	f7fe fcfd 	bl	8000644 <main>
  bx  lr    
 8001c4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c4c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c54:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001c58:	0800b52c 	.word	0x0800b52c
  ldr r2, =_sbss
 8001c5c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001c60:	2000d620 	.word	0x2000d620

08001c64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c64:	e7fe      	b.n	8001c64 <ADC_IRQHandler>
	...

08001c68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <HAL_Init+0x40>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0d      	ldr	r2, [pc, #52]	; (8001ca8 <HAL_Init+0x40>)
 8001c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <HAL_Init+0x40>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <HAL_Init+0x40>)
 8001c7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c84:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <HAL_Init+0x40>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a07      	ldr	r2, [pc, #28]	; (8001ca8 <HAL_Init+0x40>)
 8001c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c90:	2003      	movs	r0, #3
 8001c92:	f000 f8d8 	bl	8001e46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c96:	200f      	movs	r0, #15
 8001c98:	f7ff fa96 	bl	80011c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c9c:	f7ff f9f0 	bl	8001080 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40023c00 	.word	0x40023c00

08001cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_IncTick+0x20>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_IncTick+0x24>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4413      	add	r3, r2
 8001cbc:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <HAL_IncTick+0x24>)
 8001cbe:	6013      	str	r3, [r2, #0]
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	2000001c 	.word	0x2000001c
 8001cd0:	200001ec 	.word	0x200001ec

08001cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <HAL_GetTick+0x14>)
 8001cda:	681b      	ldr	r3, [r3, #0]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	200001ec 	.word	0x200001ec

08001cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1e:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	60d3      	str	r3, [r2, #12]
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d38:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <__NVIC_GetPriorityGrouping+0x18>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	0a1b      	lsrs	r3, r3, #8
 8001d3e:	f003 0307 	and.w	r3, r3, #7
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	db0b      	blt.n	8001d7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	f003 021f 	and.w	r2, r3, #31
 8001d68:	4907      	ldr	r1, [pc, #28]	; (8001d88 <__NVIC_EnableIRQ+0x38>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	2001      	movs	r0, #1
 8001d72:	fa00 f202 	lsl.w	r2, r0, r2
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000e100 	.word	0xe000e100

08001d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	6039      	str	r1, [r7, #0]
 8001d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	db0a      	blt.n	8001db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	490c      	ldr	r1, [pc, #48]	; (8001dd8 <__NVIC_SetPriority+0x4c>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	440b      	add	r3, r1
 8001db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db4:	e00a      	b.n	8001dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4908      	ldr	r1, [pc, #32]	; (8001ddc <__NVIC_SetPriority+0x50>)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	3b04      	subs	r3, #4
 8001dc4:	0112      	lsls	r2, r2, #4
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	440b      	add	r3, r1
 8001dca:	761a      	strb	r2, [r3, #24]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000e100 	.word	0xe000e100
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f1c3 0307 	rsb	r3, r3, #7
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	bf28      	it	cs
 8001dfe:	2304      	movcs	r3, #4
 8001e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3304      	adds	r3, #4
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d902      	bls.n	8001e10 <NVIC_EncodePriority+0x30>
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3b03      	subs	r3, #3
 8001e0e:	e000      	b.n	8001e12 <NVIC_EncodePriority+0x32>
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	401a      	ands	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	43d9      	mvns	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	4313      	orrs	r3, r2
         );
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3724      	adds	r7, #36	; 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ff4c 	bl	8001cec <__NVIC_SetPriorityGrouping>
}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e6e:	f7ff ff61 	bl	8001d34 <__NVIC_GetPriorityGrouping>
 8001e72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	68b9      	ldr	r1, [r7, #8]
 8001e78:	6978      	ldr	r0, [r7, #20]
 8001e7a:	f7ff ffb1 	bl	8001de0 <NVIC_EncodePriority>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e84:	4611      	mov	r1, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff ff80 	bl	8001d8c <__NVIC_SetPriority>
}
 8001e8c:	bf00      	nop
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff ff54 	bl	8001d50 <__NVIC_EnableIRQ>
}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ebe:	f7ff ff09 	bl	8001cd4 <HAL_GetTick>
 8001ec2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d008      	beq.n	8001ee2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2280      	movs	r2, #128	; 0x80
 8001ed4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e052      	b.n	8001f88 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0216 	bic.w	r2, r2, #22
 8001ef0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	695a      	ldr	r2, [r3, #20]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f00:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d103      	bne.n	8001f12 <HAL_DMA_Abort+0x62>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d007      	beq.n	8001f22 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0208 	bic.w	r2, r2, #8
 8001f20:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0201 	bic.w	r2, r2, #1
 8001f30:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f32:	e013      	b.n	8001f5c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f34:	f7ff fece 	bl	8001cd4 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b05      	cmp	r3, #5
 8001f40:	d90c      	bls.n	8001f5c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2220      	movs	r2, #32
 8001f46:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e015      	b.n	8001f88 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1e4      	bne.n	8001f34 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6e:	223f      	movs	r2, #63	; 0x3f
 8001f70:	409a      	lsls	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d004      	beq.n	8001fae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2280      	movs	r2, #128	; 0x80
 8001fa8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e00c      	b.n	8001fc8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2205      	movs	r2, #5
 8001fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0201 	bic.w	r2, r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b089      	sub	sp, #36	; 0x24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	e159      	b.n	80022a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	429a      	cmp	r2, r3
 800200a:	f040 8148 	bne.w	800229e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	2b01      	cmp	r3, #1
 8002018:	d005      	beq.n	8002026 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002022:	2b02      	cmp	r3, #2
 8002024:	d130      	bne.n	8002088 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	2203      	movs	r2, #3
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800205c:	2201      	movs	r2, #1
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	091b      	lsrs	r3, r3, #4
 8002072:	f003 0201 	and.w	r2, r3, #1
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	2b03      	cmp	r3, #3
 8002092:	d017      	beq.n	80020c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	2203      	movs	r2, #3
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 0303 	and.w	r3, r3, #3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d123      	bne.n	8002118 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	08da      	lsrs	r2, r3, #3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3208      	adds	r2, #8
 80020d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	220f      	movs	r2, #15
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	08da      	lsrs	r2, r3, #3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3208      	adds	r2, #8
 8002112:	69b9      	ldr	r1, [r7, #24]
 8002114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	2203      	movs	r2, #3
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0203 	and.w	r2, r3, #3
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 80a2 	beq.w	800229e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	4b57      	ldr	r3, [pc, #348]	; (80022bc <HAL_GPIO_Init+0x2e8>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	4a56      	ldr	r2, [pc, #344]	; (80022bc <HAL_GPIO_Init+0x2e8>)
 8002164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002168:	6453      	str	r3, [r2, #68]	; 0x44
 800216a:	4b54      	ldr	r3, [pc, #336]	; (80022bc <HAL_GPIO_Init+0x2e8>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002176:	4a52      	ldr	r2, [pc, #328]	; (80022c0 <HAL_GPIO_Init+0x2ec>)
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	089b      	lsrs	r3, r3, #2
 800217c:	3302      	adds	r3, #2
 800217e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	220f      	movs	r2, #15
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a49      	ldr	r2, [pc, #292]	; (80022c4 <HAL_GPIO_Init+0x2f0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d019      	beq.n	80021d6 <HAL_GPIO_Init+0x202>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a48      	ldr	r2, [pc, #288]	; (80022c8 <HAL_GPIO_Init+0x2f4>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d013      	beq.n	80021d2 <HAL_GPIO_Init+0x1fe>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a47      	ldr	r2, [pc, #284]	; (80022cc <HAL_GPIO_Init+0x2f8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00d      	beq.n	80021ce <HAL_GPIO_Init+0x1fa>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a46      	ldr	r2, [pc, #280]	; (80022d0 <HAL_GPIO_Init+0x2fc>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d007      	beq.n	80021ca <HAL_GPIO_Init+0x1f6>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a45      	ldr	r2, [pc, #276]	; (80022d4 <HAL_GPIO_Init+0x300>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d101      	bne.n	80021c6 <HAL_GPIO_Init+0x1f2>
 80021c2:	2304      	movs	r3, #4
 80021c4:	e008      	b.n	80021d8 <HAL_GPIO_Init+0x204>
 80021c6:	2307      	movs	r3, #7
 80021c8:	e006      	b.n	80021d8 <HAL_GPIO_Init+0x204>
 80021ca:	2303      	movs	r3, #3
 80021cc:	e004      	b.n	80021d8 <HAL_GPIO_Init+0x204>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e002      	b.n	80021d8 <HAL_GPIO_Init+0x204>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <HAL_GPIO_Init+0x204>
 80021d6:	2300      	movs	r3, #0
 80021d8:	69fa      	ldr	r2, [r7, #28]
 80021da:	f002 0203 	and.w	r2, r2, #3
 80021de:	0092      	lsls	r2, r2, #2
 80021e0:	4093      	lsls	r3, r2
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021e8:	4935      	ldr	r1, [pc, #212]	; (80022c0 <HAL_GPIO_Init+0x2ec>)
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	089b      	lsrs	r3, r3, #2
 80021ee:	3302      	adds	r3, #2
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021f6:	4b38      	ldr	r3, [pc, #224]	; (80022d8 <HAL_GPIO_Init+0x304>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800221a:	4a2f      	ldr	r2, [pc, #188]	; (80022d8 <HAL_GPIO_Init+0x304>)
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002220:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <HAL_GPIO_Init+0x304>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002244:	4a24      	ldr	r2, [pc, #144]	; (80022d8 <HAL_GPIO_Init+0x304>)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800224a:	4b23      	ldr	r3, [pc, #140]	; (80022d8 <HAL_GPIO_Init+0x304>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800226e:	4a1a      	ldr	r2, [pc, #104]	; (80022d8 <HAL_GPIO_Init+0x304>)
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002274:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <HAL_GPIO_Init+0x304>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002298:	4a0f      	ldr	r2, [pc, #60]	; (80022d8 <HAL_GPIO_Init+0x304>)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3301      	adds	r3, #1
 80022a2:	61fb      	str	r3, [r7, #28]
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	2b0f      	cmp	r3, #15
 80022a8:	f67f aea2 	bls.w	8001ff0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022ac:	bf00      	nop
 80022ae:	bf00      	nop
 80022b0:	3724      	adds	r7, #36	; 0x24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40013800 	.word	0x40013800
 80022c4:	40020000 	.word	0x40020000
 80022c8:	40020400 	.word	0x40020400
 80022cc:	40020800 	.word	0x40020800
 80022d0:	40020c00 	.word	0x40020c00
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40013c00 	.word	0x40013c00

080022dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	807b      	strh	r3, [r7, #2]
 80022e8:	4613      	mov	r3, r2
 80022ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022ec:	787b      	ldrb	r3, [r7, #1]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022f2:	887a      	ldrh	r2, [r7, #2]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022f8:	e003      	b.n	8002302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022fa:	887b      	ldrh	r3, [r7, #2]
 80022fc:	041a      	lsls	r2, r3, #16
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	619a      	str	r2, [r3, #24]
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800231c:	695a      	ldr	r2, [r3, #20]
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	4013      	ands	r3, r2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d006      	beq.n	8002334 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002326:	4a05      	ldr	r2, [pc, #20]	; (800233c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002328:	88fb      	ldrh	r3, [r7, #6]
 800232a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800232c:	88fb      	ldrh	r3, [r7, #6]
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f806 	bl	8002340 <HAL_GPIO_EXTI_Callback>
  }
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40013c00 	.word	0x40013c00

08002340 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e267      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d075      	beq.n	8002462 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002376:	4b88      	ldr	r3, [pc, #544]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 030c 	and.w	r3, r3, #12
 800237e:	2b04      	cmp	r3, #4
 8002380:	d00c      	beq.n	800239c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002382:	4b85      	ldr	r3, [pc, #532]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800238a:	2b08      	cmp	r3, #8
 800238c:	d112      	bne.n	80023b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800238e:	4b82      	ldr	r3, [pc, #520]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002396:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800239a:	d10b      	bne.n	80023b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239c:	4b7e      	ldr	r3, [pc, #504]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d05b      	beq.n	8002460 <HAL_RCC_OscConfig+0x108>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d157      	bne.n	8002460 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e242      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023bc:	d106      	bne.n	80023cc <HAL_RCC_OscConfig+0x74>
 80023be:	4b76      	ldr	r3, [pc, #472]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a75      	ldr	r2, [pc, #468]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 80023c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	e01d      	b.n	8002408 <HAL_RCC_OscConfig+0xb0>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023d4:	d10c      	bne.n	80023f0 <HAL_RCC_OscConfig+0x98>
 80023d6:	4b70      	ldr	r3, [pc, #448]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a6f      	ldr	r2, [pc, #444]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 80023dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	4b6d      	ldr	r3, [pc, #436]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a6c      	ldr	r2, [pc, #432]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 80023e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	e00b      	b.n	8002408 <HAL_RCC_OscConfig+0xb0>
 80023f0:	4b69      	ldr	r3, [pc, #420]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a68      	ldr	r2, [pc, #416]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 80023f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	4b66      	ldr	r3, [pc, #408]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a65      	ldr	r2, [pc, #404]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 8002402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d013      	beq.n	8002438 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7ff fc60 	bl	8001cd4 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002418:	f7ff fc5c 	bl	8001cd4 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b64      	cmp	r3, #100	; 0x64
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e207      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242a:	4b5b      	ldr	r3, [pc, #364]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0xc0>
 8002436:	e014      	b.n	8002462 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002438:	f7ff fc4c 	bl	8001cd4 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002440:	f7ff fc48 	bl	8001cd4 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b64      	cmp	r3, #100	; 0x64
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e1f3      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002452:	4b51      	ldr	r3, [pc, #324]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0xe8>
 800245e:	e000      	b.n	8002462 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d063      	beq.n	8002536 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800246e:	4b4a      	ldr	r3, [pc, #296]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00b      	beq.n	8002492 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800247a:	4b47      	ldr	r3, [pc, #284]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002482:	2b08      	cmp	r3, #8
 8002484:	d11c      	bne.n	80024c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002486:	4b44      	ldr	r3, [pc, #272]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d116      	bne.n	80024c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002492:	4b41      	ldr	r3, [pc, #260]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d005      	beq.n	80024aa <HAL_RCC_OscConfig+0x152>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d001      	beq.n	80024aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e1c7      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024aa:	4b3b      	ldr	r3, [pc, #236]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4937      	ldr	r1, [pc, #220]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024be:	e03a      	b.n	8002536 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d020      	beq.n	800250a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c8:	4b34      	ldr	r3, [pc, #208]	; (800259c <HAL_RCC_OscConfig+0x244>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ce:	f7ff fc01 	bl	8001cd4 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d6:	f7ff fbfd 	bl	8001cd4 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e1a8      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e8:	4b2b      	ldr	r3, [pc, #172]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f4:	4b28      	ldr	r3, [pc, #160]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4925      	ldr	r1, [pc, #148]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 8002504:	4313      	orrs	r3, r2
 8002506:	600b      	str	r3, [r1, #0]
 8002508:	e015      	b.n	8002536 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800250a:	4b24      	ldr	r3, [pc, #144]	; (800259c <HAL_RCC_OscConfig+0x244>)
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002510:	f7ff fbe0 	bl	8001cd4 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002518:	f7ff fbdc 	bl	8001cd4 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e187      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800252a:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d036      	beq.n	80025b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d016      	beq.n	8002578 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <HAL_RCC_OscConfig+0x248>)
 800254c:	2201      	movs	r2, #1
 800254e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002550:	f7ff fbc0 	bl	8001cd4 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002558:	f7ff fbbc 	bl	8001cd4 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e167      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800256a:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 800256c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0x200>
 8002576:	e01b      	b.n	80025b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002578:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <HAL_RCC_OscConfig+0x248>)
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257e:	f7ff fba9 	bl	8001cd4 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002584:	e00e      	b.n	80025a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002586:	f7ff fba5 	bl	8001cd4 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d907      	bls.n	80025a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e150      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
 8002598:	40023800 	.word	0x40023800
 800259c:	42470000 	.word	0x42470000
 80025a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a4:	4b88      	ldr	r3, [pc, #544]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 80025a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1ea      	bne.n	8002586 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 8097 	beq.w	80026ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025be:	2300      	movs	r3, #0
 80025c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025c2:	4b81      	ldr	r3, [pc, #516]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10f      	bne.n	80025ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	4b7d      	ldr	r3, [pc, #500]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	4a7c      	ldr	r2, [pc, #496]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 80025d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025dc:	6413      	str	r3, [r2, #64]	; 0x40
 80025de:	4b7a      	ldr	r3, [pc, #488]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e6:	60bb      	str	r3, [r7, #8]
 80025e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ea:	2301      	movs	r3, #1
 80025ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ee:	4b77      	ldr	r3, [pc, #476]	; (80027cc <HAL_RCC_OscConfig+0x474>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d118      	bne.n	800262c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025fa:	4b74      	ldr	r3, [pc, #464]	; (80027cc <HAL_RCC_OscConfig+0x474>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a73      	ldr	r2, [pc, #460]	; (80027cc <HAL_RCC_OscConfig+0x474>)
 8002600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002606:	f7ff fb65 	bl	8001cd4 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260e:	f7ff fb61 	bl	8001cd4 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e10c      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002620:	4b6a      	ldr	r3, [pc, #424]	; (80027cc <HAL_RCC_OscConfig+0x474>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0f0      	beq.n	800260e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d106      	bne.n	8002642 <HAL_RCC_OscConfig+0x2ea>
 8002634:	4b64      	ldr	r3, [pc, #400]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 8002636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002638:	4a63      	ldr	r2, [pc, #396]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	6713      	str	r3, [r2, #112]	; 0x70
 8002640:	e01c      	b.n	800267c <HAL_RCC_OscConfig+0x324>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2b05      	cmp	r3, #5
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0x30c>
 800264a:	4b5f      	ldr	r3, [pc, #380]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a5e      	ldr	r2, [pc, #376]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 8002650:	f043 0304 	orr.w	r3, r3, #4
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
 8002656:	4b5c      	ldr	r3, [pc, #368]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a5b      	ldr	r2, [pc, #364]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
 8002662:	e00b      	b.n	800267c <HAL_RCC_OscConfig+0x324>
 8002664:	4b58      	ldr	r3, [pc, #352]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 8002666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002668:	4a57      	ldr	r2, [pc, #348]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 800266a:	f023 0301 	bic.w	r3, r3, #1
 800266e:	6713      	str	r3, [r2, #112]	; 0x70
 8002670:	4b55      	ldr	r3, [pc, #340]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 8002672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002674:	4a54      	ldr	r2, [pc, #336]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 8002676:	f023 0304 	bic.w	r3, r3, #4
 800267a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d015      	beq.n	80026b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002684:	f7ff fb26 	bl	8001cd4 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268a:	e00a      	b.n	80026a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800268c:	f7ff fb22 	bl	8001cd4 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	f241 3288 	movw	r2, #5000	; 0x1388
 800269a:	4293      	cmp	r3, r2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e0cb      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a2:	4b49      	ldr	r3, [pc, #292]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 80026a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0ee      	beq.n	800268c <HAL_RCC_OscConfig+0x334>
 80026ae:	e014      	b.n	80026da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b0:	f7ff fb10 	bl	8001cd4 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b6:	e00a      	b.n	80026ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b8:	f7ff fb0c 	bl	8001cd4 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e0b5      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ce:	4b3e      	ldr	r3, [pc, #248]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 80026d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1ee      	bne.n	80026b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026da:	7dfb      	ldrb	r3, [r7, #23]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d105      	bne.n	80026ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e0:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	4a38      	ldr	r2, [pc, #224]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 80026e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80a1 	beq.w	8002838 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026f6:	4b34      	ldr	r3, [pc, #208]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 030c 	and.w	r3, r3, #12
 80026fe:	2b08      	cmp	r3, #8
 8002700:	d05c      	beq.n	80027bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d141      	bne.n	800278e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270a:	4b31      	ldr	r3, [pc, #196]	; (80027d0 <HAL_RCC_OscConfig+0x478>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002710:	f7ff fae0 	bl	8001cd4 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002718:	f7ff fadc 	bl	8001cd4 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e087      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272a:	4b27      	ldr	r3, [pc, #156]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69da      	ldr	r2, [r3, #28]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	019b      	lsls	r3, r3, #6
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274c:	085b      	lsrs	r3, r3, #1
 800274e:	3b01      	subs	r3, #1
 8002750:	041b      	lsls	r3, r3, #16
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	061b      	lsls	r3, r3, #24
 800275a:	491b      	ldr	r1, [pc, #108]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 800275c:	4313      	orrs	r3, r2
 800275e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002760:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <HAL_RCC_OscConfig+0x478>)
 8002762:	2201      	movs	r2, #1
 8002764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002766:	f7ff fab5 	bl	8001cd4 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800276e:	f7ff fab1 	bl	8001cd4 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e05c      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002780:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x416>
 800278c:	e054      	b.n	8002838 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278e:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <HAL_RCC_OscConfig+0x478>)
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7ff fa9e 	bl	8001cd4 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800279c:	f7ff fa9a 	bl	8001cd4 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e045      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ae:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x444>
 80027ba:	e03d      	b.n	8002838 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d107      	bne.n	80027d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e038      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40007000 	.word	0x40007000
 80027d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027d4:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <HAL_RCC_OscConfig+0x4ec>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d028      	beq.n	8002834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d121      	bne.n	8002834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d11a      	bne.n	8002834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002804:	4013      	ands	r3, r2
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800280a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800280c:	4293      	cmp	r3, r2
 800280e:	d111      	bne.n	8002834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281a:	085b      	lsrs	r3, r3, #1
 800281c:	3b01      	subs	r3, #1
 800281e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002820:	429a      	cmp	r2, r3
 8002822:	d107      	bne.n	8002834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e000      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800

08002848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e0cc      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800285c:	4b68      	ldr	r3, [pc, #416]	; (8002a00 <HAL_RCC_ClockConfig+0x1b8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	d90c      	bls.n	8002884 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286a:	4b65      	ldr	r3, [pc, #404]	; (8002a00 <HAL_RCC_ClockConfig+0x1b8>)
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002872:	4b63      	ldr	r3, [pc, #396]	; (8002a00 <HAL_RCC_ClockConfig+0x1b8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d001      	beq.n	8002884 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0b8      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d020      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800289c:	4b59      	ldr	r3, [pc, #356]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	4a58      	ldr	r2, [pc, #352]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028b4:	4b53      	ldr	r3, [pc, #332]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	4a52      	ldr	r2, [pc, #328]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c0:	4b50      	ldr	r3, [pc, #320]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	494d      	ldr	r1, [pc, #308]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d044      	beq.n	8002968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d107      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e6:	4b47      	ldr	r3, [pc, #284]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d119      	bne.n	8002926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e07f      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d003      	beq.n	8002906 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002902:	2b03      	cmp	r3, #3
 8002904:	d107      	bne.n	8002916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002906:	4b3f      	ldr	r3, [pc, #252]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d109      	bne.n	8002926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e06f      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002916:	4b3b      	ldr	r3, [pc, #236]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e067      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002926:	4b37      	ldr	r3, [pc, #220]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f023 0203 	bic.w	r2, r3, #3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	4934      	ldr	r1, [pc, #208]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 8002934:	4313      	orrs	r3, r2
 8002936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002938:	f7ff f9cc 	bl	8001cd4 <HAL_GetTick>
 800293c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293e:	e00a      	b.n	8002956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002940:	f7ff f9c8 	bl	8001cd4 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	f241 3288 	movw	r2, #5000	; 0x1388
 800294e:	4293      	cmp	r3, r2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e04f      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002956:	4b2b      	ldr	r3, [pc, #172]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 020c 	and.w	r2, r3, #12
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	429a      	cmp	r2, r3
 8002966:	d1eb      	bne.n	8002940 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002968:	4b25      	ldr	r3, [pc, #148]	; (8002a00 <HAL_RCC_ClockConfig+0x1b8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d20c      	bcs.n	8002990 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002976:	4b22      	ldr	r3, [pc, #136]	; (8002a00 <HAL_RCC_ClockConfig+0x1b8>)
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800297e:	4b20      	ldr	r3, [pc, #128]	; (8002a00 <HAL_RCC_ClockConfig+0x1b8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d001      	beq.n	8002990 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e032      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d008      	beq.n	80029ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800299c:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4916      	ldr	r1, [pc, #88]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d009      	beq.n	80029ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ba:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	490e      	ldr	r1, [pc, #56]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ce:	f000 f821 	bl	8002a14 <HAL_RCC_GetSysClockFreq>
 80029d2:	4602      	mov	r2, r0
 80029d4:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	490a      	ldr	r1, [pc, #40]	; (8002a08 <HAL_RCC_ClockConfig+0x1c0>)
 80029e0:	5ccb      	ldrb	r3, [r1, r3]
 80029e2:	fa22 f303 	lsr.w	r3, r2, r3
 80029e6:	4a09      	ldr	r2, [pc, #36]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 80029e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029ea:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HAL_RCC_ClockConfig+0x1c8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe fbea 	bl	80011c8 <HAL_InitTick>

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40023c00 	.word	0x40023c00
 8002a04:	40023800 	.word	0x40023800
 8002a08:	0800b444 	.word	0x0800b444
 8002a0c:	20000010 	.word	0x20000010
 8002a10:	20000018 	.word	0x20000018

08002a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a18:	b090      	sub	sp, #64	; 0x40
 8002a1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a20:	2300      	movs	r3, #0
 8002a22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a24:	2300      	movs	r3, #0
 8002a26:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a2c:	4b59      	ldr	r3, [pc, #356]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 030c 	and.w	r3, r3, #12
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d00d      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0x40>
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	f200 80a1 	bhi.w	8002b80 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d002      	beq.n	8002a48 <HAL_RCC_GetSysClockFreq+0x34>
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d003      	beq.n	8002a4e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a46:	e09b      	b.n	8002b80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a48:	4b53      	ldr	r3, [pc, #332]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a4a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002a4c:	e09b      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a4e:	4b53      	ldr	r3, [pc, #332]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x188>)
 8002a50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a52:	e098      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a54:	4b4f      	ldr	r3, [pc, #316]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a5c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a5e:	4b4d      	ldr	r3, [pc, #308]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d028      	beq.n	8002abc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a6a:	4b4a      	ldr	r3, [pc, #296]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	099b      	lsrs	r3, r3, #6
 8002a70:	2200      	movs	r2, #0
 8002a72:	623b      	str	r3, [r7, #32]
 8002a74:	627a      	str	r2, [r7, #36]	; 0x24
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4b47      	ldr	r3, [pc, #284]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x188>)
 8002a80:	fb03 f201 	mul.w	r2, r3, r1
 8002a84:	2300      	movs	r3, #0
 8002a86:	fb00 f303 	mul.w	r3, r0, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	4a43      	ldr	r2, [pc, #268]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x188>)
 8002a8e:	fba0 1202 	umull	r1, r2, r0, r2
 8002a92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a94:	460a      	mov	r2, r1
 8002a96:	62ba      	str	r2, [r7, #40]	; 0x28
 8002a98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a9a:	4413      	add	r3, r2
 8002a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	61bb      	str	r3, [r7, #24]
 8002aa4:	61fa      	str	r2, [r7, #28]
 8002aa6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002aaa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002aae:	f7fd fc47 	bl	8000340 <__aeabi_uldivmod>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aba:	e053      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002abc:	4b35      	ldr	r3, [pc, #212]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	099b      	lsrs	r3, r3, #6
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	617a      	str	r2, [r7, #20]
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ace:	f04f 0b00 	mov.w	fp, #0
 8002ad2:	4652      	mov	r2, sl
 8002ad4:	465b      	mov	r3, fp
 8002ad6:	f04f 0000 	mov.w	r0, #0
 8002ada:	f04f 0100 	mov.w	r1, #0
 8002ade:	0159      	lsls	r1, r3, #5
 8002ae0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ae4:	0150      	lsls	r0, r2, #5
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	ebb2 080a 	subs.w	r8, r2, sl
 8002aee:	eb63 090b 	sbc.w	r9, r3, fp
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002afe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b06:	ebb2 0408 	subs.w	r4, r2, r8
 8002b0a:	eb63 0509 	sbc.w	r5, r3, r9
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	f04f 0300 	mov.w	r3, #0
 8002b16:	00eb      	lsls	r3, r5, #3
 8002b18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b1c:	00e2      	lsls	r2, r4, #3
 8002b1e:	4614      	mov	r4, r2
 8002b20:	461d      	mov	r5, r3
 8002b22:	eb14 030a 	adds.w	r3, r4, sl
 8002b26:	603b      	str	r3, [r7, #0]
 8002b28:	eb45 030b 	adc.w	r3, r5, fp
 8002b2c:	607b      	str	r3, [r7, #4]
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b3a:	4629      	mov	r1, r5
 8002b3c:	028b      	lsls	r3, r1, #10
 8002b3e:	4621      	mov	r1, r4
 8002b40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b44:	4621      	mov	r1, r4
 8002b46:	028a      	lsls	r2, r1, #10
 8002b48:	4610      	mov	r0, r2
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b4e:	2200      	movs	r2, #0
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	60fa      	str	r2, [r7, #12]
 8002b54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b58:	f7fd fbf2 	bl	8000340 <__aeabi_uldivmod>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4613      	mov	r3, r2
 8002b62:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	0c1b      	lsrs	r3, r3, #16
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	3301      	adds	r3, #1
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002b74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b7e:	e002      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b80:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b82:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3740      	adds	r7, #64	; 0x40
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b92:	bf00      	nop
 8002b94:	40023800 	.word	0x40023800
 8002b98:	00f42400 	.word	0x00f42400
 8002b9c:	017d7840 	.word	0x017d7840

08002ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba4:	4b03      	ldr	r3, [pc, #12]	; (8002bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20000010 	.word	0x20000010

08002bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bbc:	f7ff fff0 	bl	8002ba0 <HAL_RCC_GetHCLKFreq>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	0a9b      	lsrs	r3, r3, #10
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	4903      	ldr	r1, [pc, #12]	; (8002bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bce:	5ccb      	ldrb	r3, [r1, r3]
 8002bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	0800b454 	.word	0x0800b454

08002be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002be4:	f7ff ffdc 	bl	8002ba0 <HAL_RCC_GetHCLKFreq>
 8002be8:	4602      	mov	r2, r0
 8002bea:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	0b5b      	lsrs	r3, r3, #13
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	4903      	ldr	r1, [pc, #12]	; (8002c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bf6:	5ccb      	ldrb	r3, [r1, r3]
 8002bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40023800 	.word	0x40023800
 8002c04:	0800b454 	.word	0x0800b454

08002c08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	220f      	movs	r2, #15
 8002c16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c18:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <HAL_RCC_GetClockConfig+0x5c>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 0203 	and.w	r2, r3, #3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c24:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <HAL_RCC_GetClockConfig+0x5c>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <HAL_RCC_GetClockConfig+0x5c>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c3c:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <HAL_RCC_GetClockConfig+0x5c>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	08db      	lsrs	r3, r3, #3
 8002c42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c4a:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <HAL_RCC_GetClockConfig+0x60>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0207 	and.w	r2, r3, #7
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	601a      	str	r2, [r3, #0]
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40023c00 	.word	0x40023c00

08002c6c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d105      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d035      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c94:	4b67      	ldr	r3, [pc, #412]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c9a:	f7ff f81b 	bl	8001cd4 <HAL_GetTick>
 8002c9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ca2:	f7ff f817 	bl	8001cd4 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e0ba      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cb4:	4b60      	ldr	r3, [pc, #384]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1f0      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	019a      	lsls	r2, r3, #6
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	071b      	lsls	r3, r3, #28
 8002ccc:	495a      	ldr	r1, [pc, #360]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002cd4:	4b57      	ldr	r3, [pc, #348]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cda:	f7fe fffb 	bl	8001cd4 <HAL_GetTick>
 8002cde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ce2:	f7fe fff7 	bl	8001cd4 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e09a      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cf4:	4b50      	ldr	r3, [pc, #320]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 8083 	beq.w	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	4b49      	ldr	r3, [pc, #292]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	4a48      	ldr	r2, [pc, #288]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d1e:	4b46      	ldr	r3, [pc, #280]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002d2a:	4b44      	ldr	r3, [pc, #272]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a43      	ldr	r2, [pc, #268]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d34:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d36:	f7fe ffcd 	bl	8001cd4 <HAL_GetTick>
 8002d3a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d3e:	f7fe ffc9 	bl	8001cd4 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e06c      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d50:	4b3a      	ldr	r3, [pc, #232]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d5c:	4b36      	ldr	r3, [pc, #216]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d64:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d02f      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d028      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d7a:	4b2f      	ldr	r3, [pc, #188]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d82:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d84:	4b2e      	ldr	r3, [pc, #184]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d8a:	4b2d      	ldr	r3, [pc, #180]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002d90:	4a29      	ldr	r2, [pc, #164]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d96:	4b28      	ldr	r3, [pc, #160]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d114      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002da2:	f7fe ff97 	bl	8001cd4 <HAL_GetTick>
 8002da6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da8:	e00a      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002daa:	f7fe ff93 	bl	8001cd4 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e034      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc0:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0ee      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dd8:	d10d      	bne.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002dda:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dee:	4912      	ldr	r1, [pc, #72]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	608b      	str	r3, [r1, #8]
 8002df4:	e005      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002df6:	4b10      	ldr	r3, [pc, #64]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	4a0f      	ldr	r2, [pc, #60]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002dfc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e00:	6093      	str	r3, [r2, #8]
 8002e02:	4b0d      	ldr	r3, [pc, #52]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e0e:	490a      	ldr	r1, [pc, #40]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0308 	and.w	r3, r3, #8
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	7c1a      	ldrb	r2, [r3, #16]
 8002e24:	4b07      	ldr	r3, [pc, #28]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e26:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	42470068 	.word	0x42470068
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40007000 	.word	0x40007000
 8002e40:	42470e40 	.word	0x42470e40
 8002e44:	424711e0 	.word	0x424711e0

08002e48 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e066      	b.n	8002f2c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	7f5b      	ldrb	r3, [r3, #29]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d105      	bne.n	8002e74 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7fe f92e 	bl	80010d0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	22ca      	movs	r2, #202	; 0xca
 8002e80:	625a      	str	r2, [r3, #36]	; 0x24
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2253      	movs	r2, #83	; 0x53
 8002e88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fa45 	bl	800331a <RTC_EnterInitMode>
 8002e90:	4603      	mov	r3, r0
 8002e92:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d12c      	bne.n	8002ef4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002ea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eac:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6899      	ldr	r1, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	68d2      	ldr	r2, [r2, #12]
 8002ed4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6919      	ldr	r1, [r3, #16]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	041a      	lsls	r2, r3, #16
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fa4c 	bl	8003388 <RTC_ExitInitMode>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d113      	bne.n	8002f22 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f08:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	699a      	ldr	r2, [r3, #24]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	22ff      	movs	r2, #255	; 0xff
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f34:	b590      	push	{r4, r7, lr}
 8002f36:	b087      	sub	sp, #28
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	7f1b      	ldrb	r3, [r3, #28]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_RTC_SetTime+0x1c>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e087      	b.n	8003060 <HAL_RTC_SetTime+0x12c>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2201      	movs	r2, #1
 8002f54:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2202      	movs	r2, #2
 8002f5a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d126      	bne.n	8002fb0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d102      	bne.n	8002f76 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2200      	movs	r2, #0
 8002f74:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 fa29 	bl	80033d2 <RTC_ByteToBcd2>
 8002f80:	4603      	mov	r3, r0
 8002f82:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	785b      	ldrb	r3, [r3, #1]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 fa22 	bl	80033d2 <RTC_ByteToBcd2>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002f92:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	789b      	ldrb	r3, [r3, #2]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 fa1a 	bl	80033d2 <RTC_ByteToBcd2>
 8002f9e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002fa0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	78db      	ldrb	r3, [r3, #3]
 8002fa8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002faa:	4313      	orrs	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	e018      	b.n	8002fe2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d102      	bne.n	8002fc4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	785b      	ldrb	r3, [r3, #1]
 8002fce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002fd0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002fd6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	78db      	ldrb	r3, [r3, #3]
 8002fdc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	22ca      	movs	r2, #202	; 0xca
 8002fe8:	625a      	str	r2, [r3, #36]	; 0x24
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2253      	movs	r2, #83	; 0x53
 8002ff0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 f991 	bl	800331a <RTC_EnterInitMode>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002ffc:	7cfb      	ldrb	r3, [r7, #19]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d120      	bne.n	8003044 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800300c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003010:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003020:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6899      	ldr	r1, [r3, #8]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	431a      	orrs	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 f9a4 	bl	8003388 <RTC_ExitInitMode>
 8003040:	4603      	mov	r3, r0
 8003042:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003044:	7cfb      	ldrb	r3, [r7, #19]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d102      	bne.n	8003050 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2201      	movs	r2, #1
 800304e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	22ff      	movs	r2, #255	; 0xff
 8003056:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	771a      	strb	r2, [r3, #28]

  return status;
 800305e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003060:	4618      	mov	r0, r3
 8003062:	371c      	adds	r7, #28
 8003064:	46bd      	mov	sp, r7
 8003066:	bd90      	pop	{r4, r7, pc}

08003068 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800309a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800309e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	0c1b      	lsrs	r3, r3, #16
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	0a1b      	lsrs	r3, r3, #8
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	0d9b      	lsrs	r3, r3, #22
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d11a      	bne.n	800311a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 f98f 	bl	800340c <RTC_Bcd2ToByte>
 80030ee:	4603      	mov	r3, r0
 80030f0:	461a      	mov	r2, r3
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	785b      	ldrb	r3, [r3, #1]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 f986 	bl	800340c <RTC_Bcd2ToByte>
 8003100:	4603      	mov	r3, r0
 8003102:	461a      	mov	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	789b      	ldrb	r3, [r3, #2]
 800310c:	4618      	mov	r0, r3
 800310e:	f000 f97d 	bl	800340c <RTC_Bcd2ToByte>
 8003112:	4603      	mov	r3, r0
 8003114:	461a      	mov	r2, r3
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	7f1b      	ldrb	r3, [r3, #28]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_RTC_SetDate+0x1c>
 800313c:	2302      	movs	r3, #2
 800313e:	e071      	b.n	8003224 <HAL_RTC_SetDate+0x100>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2201      	movs	r2, #1
 8003144:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2202      	movs	r2, #2
 800314a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10e      	bne.n	8003170 <HAL_RTC_SetDate+0x4c>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	785b      	ldrb	r3, [r3, #1]
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	2b00      	cmp	r3, #0
 800315c:	d008      	beq.n	8003170 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	785b      	ldrb	r3, [r3, #1]
 8003162:	f023 0310 	bic.w	r3, r3, #16
 8003166:	b2db      	uxtb	r3, r3
 8003168:	330a      	adds	r3, #10
 800316a:	b2da      	uxtb	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d11c      	bne.n	80031b0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	78db      	ldrb	r3, [r3, #3]
 800317a:	4618      	mov	r0, r3
 800317c:	f000 f929 	bl	80033d2 <RTC_ByteToBcd2>
 8003180:	4603      	mov	r3, r0
 8003182:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	785b      	ldrb	r3, [r3, #1]
 8003188:	4618      	mov	r0, r3
 800318a:	f000 f922 	bl	80033d2 <RTC_ByteToBcd2>
 800318e:	4603      	mov	r3, r0
 8003190:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003192:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	789b      	ldrb	r3, [r3, #2]
 8003198:	4618      	mov	r0, r3
 800319a:	f000 f91a 	bl	80033d2 <RTC_ByteToBcd2>
 800319e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80031a0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80031aa:	4313      	orrs	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	e00e      	b.n	80031ce <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	78db      	ldrb	r3, [r3, #3]
 80031b4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	785b      	ldrb	r3, [r3, #1]
 80031ba:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80031bc:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80031c2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80031ca:	4313      	orrs	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	22ca      	movs	r2, #202	; 0xca
 80031d4:	625a      	str	r2, [r3, #36]	; 0x24
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2253      	movs	r2, #83	; 0x53
 80031dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 f89b 	bl	800331a <RTC_EnterInitMode>
 80031e4:	4603      	mov	r3, r0
 80031e6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80031e8:	7cfb      	ldrb	r3, [r7, #19]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10c      	bne.n	8003208 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80031f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80031fc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f8c2 	bl	8003388 <RTC_ExitInitMode>
 8003204:	4603      	mov	r3, r0
 8003206:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003208:	7cfb      	ldrb	r3, [r7, #19]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d102      	bne.n	8003214 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	22ff      	movs	r2, #255	; 0xff
 800321a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	771a      	strb	r2, [r3, #28]

  return status;
 8003222:	7cfb      	ldrb	r3, [r7, #19]
}
 8003224:	4618      	mov	r0, r3
 8003226:	371c      	adds	r7, #28
 8003228:	46bd      	mov	sp, r7
 800322a:	bd90      	pop	{r4, r7, pc}

0800322c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003246:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800324a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	0c1b      	lsrs	r3, r3, #16
 8003250:	b2da      	uxtb	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	0a1b      	lsrs	r3, r3, #8
 800325a:	b2db      	uxtb	r3, r3
 800325c:	f003 031f 	and.w	r3, r3, #31
 8003260:	b2da      	uxtb	r2, r3
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800326e:	b2da      	uxtb	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	0b5b      	lsrs	r3, r3, #13
 8003278:	b2db      	uxtb	r3, r3
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	b2da      	uxtb	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d11a      	bne.n	80032c0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	78db      	ldrb	r3, [r3, #3]
 800328e:	4618      	mov	r0, r3
 8003290:	f000 f8bc 	bl	800340c <RTC_Bcd2ToByte>
 8003294:	4603      	mov	r3, r0
 8003296:	461a      	mov	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	785b      	ldrb	r3, [r3, #1]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 f8b3 	bl	800340c <RTC_Bcd2ToByte>
 80032a6:	4603      	mov	r3, r0
 80032a8:	461a      	mov	r2, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	789b      	ldrb	r3, [r3, #2]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 f8aa 	bl	800340c <RTC_Bcd2ToByte>
 80032b8:	4603      	mov	r3, r0
 80032ba:	461a      	mov	r2, r3
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b084      	sub	sp, #16
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032e4:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032e6:	f7fe fcf5 	bl	8001cd4 <HAL_GetTick>
 80032ea:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80032ec:	e009      	b.n	8003302 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80032ee:	f7fe fcf1 	bl	8001cd4 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032fc:	d901      	bls.n	8003302 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e007      	b.n	8003312 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0320 	and.w	r3, r3, #32
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0ee      	beq.n	80032ee <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b084      	sub	sp, #16
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003334:	2b00      	cmp	r3, #0
 8003336:	d122      	bne.n	800337e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003346:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003348:	f7fe fcc4 	bl	8001cd4 <HAL_GetTick>
 800334c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800334e:	e00c      	b.n	800336a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003350:	f7fe fcc0 	bl	8001cd4 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800335e:	d904      	bls.n	800336a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2204      	movs	r2, #4
 8003364:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003374:	2b00      	cmp	r3, #0
 8003376:	d102      	bne.n	800337e <RTC_EnterInitMode+0x64>
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d1e8      	bne.n	8003350 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800337e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003390:	2300      	movs	r3, #0
 8003392:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033a2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 0320 	and.w	r3, r3, #32
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10a      	bne.n	80033c8 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7ff ff89 	bl	80032ca <HAL_RTC_WaitForSynchro>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d004      	beq.n	80033c8 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2204      	movs	r2, #4
 80033c2:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b085      	sub	sp, #20
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	4603      	mov	r3, r0
 80033da:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80033e0:	e005      	b.n	80033ee <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	3301      	adds	r3, #1
 80033e6:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80033e8:	79fb      	ldrb	r3, [r7, #7]
 80033ea:	3b0a      	subs	r3, #10
 80033ec:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	2b09      	cmp	r3, #9
 80033f2:	d8f6      	bhi.n	80033e2 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	b2db      	uxtb	r3, r3
}
 8003400:	4618      	mov	r0, r3
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	091b      	lsrs	r3, r3, #4
 800341e:	b2db      	uxtb	r3, r3
 8003420:	461a      	mov	r2, r3
 8003422:	0092      	lsls	r2, r2, #2
 8003424:	4413      	add	r3, r2
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	b2da      	uxtb	r2, r3
 8003432:	7bfb      	ldrb	r3, [r7, #15]
 8003434:	4413      	add	r3, r2
 8003436:	b2db      	uxtb	r3, r3
}
 8003438:	4618      	mov	r0, r3
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e041      	b.n	80034da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d106      	bne.n	8003470 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f839 	bl	80034e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3304      	adds	r3, #4
 8003480:	4619      	mov	r1, r3
 8003482:	4610      	mov	r0, r2
 8003484:	f000 f9ca 	bl	800381c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
	...

080034f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b01      	cmp	r3, #1
 800350a:	d001      	beq.n	8003510 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e044      	b.n	800359a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0201 	orr.w	r2, r2, #1
 8003526:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a1e      	ldr	r2, [pc, #120]	; (80035a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d018      	beq.n	8003564 <HAL_TIM_Base_Start_IT+0x6c>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800353a:	d013      	beq.n	8003564 <HAL_TIM_Base_Start_IT+0x6c>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a1a      	ldr	r2, [pc, #104]	; (80035ac <HAL_TIM_Base_Start_IT+0xb4>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00e      	beq.n	8003564 <HAL_TIM_Base_Start_IT+0x6c>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a19      	ldr	r2, [pc, #100]	; (80035b0 <HAL_TIM_Base_Start_IT+0xb8>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d009      	beq.n	8003564 <HAL_TIM_Base_Start_IT+0x6c>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a17      	ldr	r2, [pc, #92]	; (80035b4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d004      	beq.n	8003564 <HAL_TIM_Base_Start_IT+0x6c>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a16      	ldr	r2, [pc, #88]	; (80035b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d111      	bne.n	8003588 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2b06      	cmp	r3, #6
 8003574:	d010      	beq.n	8003598 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0201 	orr.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003586:	e007      	b.n	8003598 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	40010000 	.word	0x40010000
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40000800 	.word	0x40000800
 80035b4:	40000c00 	.word	0x40000c00
 80035b8:	40014000 	.word	0x40014000

080035bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d122      	bne.n	8003618 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d11b      	bne.n	8003618 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0202 	mvn.w	r2, #2
 80035e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f8ee 	bl	80037e0 <HAL_TIM_IC_CaptureCallback>
 8003604:	e005      	b.n	8003612 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f8e0 	bl	80037cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f8f1 	bl	80037f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	2b04      	cmp	r3, #4
 8003624:	d122      	bne.n	800366c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b04      	cmp	r3, #4
 8003632:	d11b      	bne.n	800366c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f06f 0204 	mvn.w	r2, #4
 800363c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2202      	movs	r2, #2
 8003642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f8c4 	bl	80037e0 <HAL_TIM_IC_CaptureCallback>
 8003658:	e005      	b.n	8003666 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f8b6 	bl	80037cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f8c7 	bl	80037f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b08      	cmp	r3, #8
 8003678:	d122      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b08      	cmp	r3, #8
 8003686:	d11b      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0208 	mvn.w	r2, #8
 8003690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2204      	movs	r2, #4
 8003696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f89a 	bl	80037e0 <HAL_TIM_IC_CaptureCallback>
 80036ac:	e005      	b.n	80036ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f88c 	bl	80037cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f89d 	bl	80037f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f003 0310 	and.w	r3, r3, #16
 80036ca:	2b10      	cmp	r3, #16
 80036cc:	d122      	bne.n	8003714 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0310 	and.w	r3, r3, #16
 80036d8:	2b10      	cmp	r3, #16
 80036da:	d11b      	bne.n	8003714 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f06f 0210 	mvn.w	r2, #16
 80036e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2208      	movs	r2, #8
 80036ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f870 	bl	80037e0 <HAL_TIM_IC_CaptureCallback>
 8003700:	e005      	b.n	800370e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f862 	bl	80037cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f873 	bl	80037f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b01      	cmp	r3, #1
 8003720:	d10e      	bne.n	8003740 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b01      	cmp	r3, #1
 800372e:	d107      	bne.n	8003740 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0201 	mvn.w	r2, #1
 8003738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7fd fb7e 	bl	8000e3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374a:	2b80      	cmp	r3, #128	; 0x80
 800374c:	d10e      	bne.n	800376c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003758:	2b80      	cmp	r3, #128	; 0x80
 800375a:	d107      	bne.n	800376c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f8e2 	bl	8003930 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003776:	2b40      	cmp	r3, #64	; 0x40
 8003778:	d10e      	bne.n	8003798 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003784:	2b40      	cmp	r3, #64	; 0x40
 8003786:	d107      	bne.n	8003798 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f838 	bl	8003808 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	d10e      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 0320 	and.w	r3, r3, #32
 80037b0:	2b20      	cmp	r3, #32
 80037b2:	d107      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f06f 0220 	mvn.w	r2, #32
 80037bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f8ac 	bl	800391c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037c4:	bf00      	nop
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a34      	ldr	r2, [pc, #208]	; (8003900 <TIM_Base_SetConfig+0xe4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00f      	beq.n	8003854 <TIM_Base_SetConfig+0x38>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383a:	d00b      	beq.n	8003854 <TIM_Base_SetConfig+0x38>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a31      	ldr	r2, [pc, #196]	; (8003904 <TIM_Base_SetConfig+0xe8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d007      	beq.n	8003854 <TIM_Base_SetConfig+0x38>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a30      	ldr	r2, [pc, #192]	; (8003908 <TIM_Base_SetConfig+0xec>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d003      	beq.n	8003854 <TIM_Base_SetConfig+0x38>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a2f      	ldr	r2, [pc, #188]	; (800390c <TIM_Base_SetConfig+0xf0>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d108      	bne.n	8003866 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	4313      	orrs	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a25      	ldr	r2, [pc, #148]	; (8003900 <TIM_Base_SetConfig+0xe4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d01b      	beq.n	80038a6 <TIM_Base_SetConfig+0x8a>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003874:	d017      	beq.n	80038a6 <TIM_Base_SetConfig+0x8a>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a22      	ldr	r2, [pc, #136]	; (8003904 <TIM_Base_SetConfig+0xe8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d013      	beq.n	80038a6 <TIM_Base_SetConfig+0x8a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a21      	ldr	r2, [pc, #132]	; (8003908 <TIM_Base_SetConfig+0xec>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00f      	beq.n	80038a6 <TIM_Base_SetConfig+0x8a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a20      	ldr	r2, [pc, #128]	; (800390c <TIM_Base_SetConfig+0xf0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d00b      	beq.n	80038a6 <TIM_Base_SetConfig+0x8a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a1f      	ldr	r2, [pc, #124]	; (8003910 <TIM_Base_SetConfig+0xf4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d007      	beq.n	80038a6 <TIM_Base_SetConfig+0x8a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a1e      	ldr	r2, [pc, #120]	; (8003914 <TIM_Base_SetConfig+0xf8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d003      	beq.n	80038a6 <TIM_Base_SetConfig+0x8a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a1d      	ldr	r2, [pc, #116]	; (8003918 <TIM_Base_SetConfig+0xfc>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d108      	bne.n	80038b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a08      	ldr	r2, [pc, #32]	; (8003900 <TIM_Base_SetConfig+0xe4>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d103      	bne.n	80038ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	615a      	str	r2, [r3, #20]
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40010000 	.word	0x40010000
 8003904:	40000400 	.word	0x40000400
 8003908:	40000800 	.word	0x40000800
 800390c:	40000c00 	.word	0x40000c00
 8003910:	40014000 	.word	0x40014000
 8003914:	40014400 	.word	0x40014400
 8003918:	40014800 	.word	0x40014800

0800391c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e03f      	b.n	80039d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d106      	bne.n	8003970 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7fd fbdc 	bl	8001128 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2224      	movs	r2, #36	; 0x24
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003986:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fddf 	bl	800454c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	691a      	ldr	r2, [r3, #16]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800399c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695a      	ldr	r2, [r3, #20]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b08a      	sub	sp, #40	; 0x28
 80039e2:	af02      	add	r7, sp, #8
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	603b      	str	r3, [r7, #0]
 80039ea:	4613      	mov	r3, r2
 80039ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b20      	cmp	r3, #32
 80039fc:	d17c      	bne.n	8003af8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <HAL_UART_Transmit+0x2c>
 8003a04:	88fb      	ldrh	r3, [r7, #6]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e075      	b.n	8003afa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_UART_Transmit+0x3e>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	e06e      	b.n	8003afa <HAL_UART_Transmit+0x11c>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2221      	movs	r2, #33	; 0x21
 8003a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a32:	f7fe f94f 	bl	8001cd4 <HAL_GetTick>
 8003a36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	88fa      	ldrh	r2, [r7, #6]
 8003a3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	88fa      	ldrh	r2, [r7, #6]
 8003a42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a4c:	d108      	bne.n	8003a60 <HAL_UART_Transmit+0x82>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d104      	bne.n	8003a60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	61bb      	str	r3, [r7, #24]
 8003a5e:	e003      	b.n	8003a68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a64:	2300      	movs	r3, #0
 8003a66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a70:	e02a      	b.n	8003ac8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	2180      	movs	r1, #128	; 0x80
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 fb1f 	bl	80040c0 <UART_WaitOnFlagUntilTimeout>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e036      	b.n	8003afa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10b      	bne.n	8003aaa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	881b      	ldrh	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aa0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	3302      	adds	r3, #2
 8003aa6:	61bb      	str	r3, [r7, #24]
 8003aa8:	e007      	b.n	8003aba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	781a      	ldrb	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1cf      	bne.n	8003a72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	2140      	movs	r1, #64	; 0x40
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 faef 	bl	80040c0 <UART_WaitOnFlagUntilTimeout>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e006      	b.n	8003afa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	e000      	b.n	8003afa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003af8:	2302      	movs	r3, #2
  }
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3720      	adds	r7, #32
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b084      	sub	sp, #16
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d11d      	bne.n	8003b58 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <HAL_UART_Receive_IT+0x26>
 8003b22:	88fb      	ldrh	r3, [r7, #6]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e016      	b.n	8003b5a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d101      	bne.n	8003b3a <HAL_UART_Receive_IT+0x38>
 8003b36:	2302      	movs	r3, #2
 8003b38:	e00f      	b.n	8003b5a <HAL_UART_Receive_IT+0x58>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003b48:	88fb      	ldrh	r3, [r7, #6]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	68b9      	ldr	r1, [r7, #8]
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 fb24 	bl	800419c <UART_Start_Receive_IT>
 8003b54:	4603      	mov	r3, r0
 8003b56:	e000      	b.n	8003b5a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003b58:	2302      	movs	r3, #2
  }
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
	...

08003b64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b0ba      	sub	sp, #232	; 0xe8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003ba2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10f      	bne.n	8003bca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d009      	beq.n	8003bca <HAL_UART_IRQHandler+0x66>
 8003bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bba:	f003 0320 	and.w	r3, r3, #32
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fc07 	bl	80043d6 <UART_Receive_IT>
      return;
 8003bc8:	e256      	b.n	8004078 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003bca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 80de 	beq.w	8003d90 <HAL_UART_IRQHandler+0x22c>
 8003bd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d106      	bne.n	8003bee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 80d1 	beq.w	8003d90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00b      	beq.n	8003c12 <HAL_UART_IRQHandler+0xae>
 8003bfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d005      	beq.n	8003c12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f043 0201 	orr.w	r2, r3, #1
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00b      	beq.n	8003c36 <HAL_UART_IRQHandler+0xd2>
 8003c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d005      	beq.n	8003c36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	f043 0202 	orr.w	r2, r3, #2
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00b      	beq.n	8003c5a <HAL_UART_IRQHandler+0xf6>
 8003c42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d005      	beq.n	8003c5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f043 0204 	orr.w	r2, r3, #4
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d011      	beq.n	8003c8a <HAL_UART_IRQHandler+0x126>
 8003c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c6a:	f003 0320 	and.w	r3, r3, #32
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d105      	bne.n	8003c7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d005      	beq.n	8003c8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	f043 0208 	orr.w	r2, r3, #8
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 81ed 	beq.w	800406e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x14e>
 8003ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ca4:	f003 0320 	and.w	r3, r3, #32
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fb92 	bl	80043d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbc:	2b40      	cmp	r3, #64	; 0x40
 8003cbe:	bf0c      	ite	eq
 8003cc0:	2301      	moveq	r3, #1
 8003cc2:	2300      	movne	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d103      	bne.n	8003cde <HAL_UART_IRQHandler+0x17a>
 8003cd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d04f      	beq.n	8003d7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fa9a 	bl	8004218 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cee:	2b40      	cmp	r3, #64	; 0x40
 8003cf0:	d141      	bne.n	8003d76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3314      	adds	r3, #20
 8003cf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d00:	e853 3f00 	ldrex	r3, [r3]
 8003d04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	3314      	adds	r3, #20
 8003d1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d2e:	e841 2300 	strex	r3, r2, [r1]
 8003d32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1d9      	bne.n	8003cf2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d013      	beq.n	8003d6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4a:	4a7d      	ldr	r2, [pc, #500]	; (8003f40 <HAL_UART_IRQHandler+0x3dc>)
 8003d4c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fe f91c 	bl	8001f90 <HAL_DMA_Abort_IT>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d016      	beq.n	8003d8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d68:	4610      	mov	r0, r2
 8003d6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d6c:	e00e      	b.n	8003d8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f990 	bl	8004094 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d74:	e00a      	b.n	8003d8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f98c 	bl	8004094 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d7c:	e006      	b.n	8003d8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f988 	bl	8004094 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d8a:	e170      	b.n	800406e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d8c:	bf00      	nop
    return;
 8003d8e:	e16e      	b.n	800406e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	f040 814a 	bne.w	800402e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d9e:	f003 0310 	and.w	r3, r3, #16
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 8143 	beq.w	800402e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dac:	f003 0310 	and.w	r3, r3, #16
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 813c 	beq.w	800402e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003db6:	2300      	movs	r3, #0
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	60bb      	str	r3, [r7, #8]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd6:	2b40      	cmp	r3, #64	; 0x40
 8003dd8:	f040 80b4 	bne.w	8003f44 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003de8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 8140 	beq.w	8004072 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003df6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	f080 8139 	bcs.w	8004072 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e06:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e12:	f000 8088 	beq.w	8003f26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	330c      	adds	r3, #12
 8003e1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e24:	e853 3f00 	ldrex	r3, [r3]
 8003e28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	330c      	adds	r3, #12
 8003e3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e52:	e841 2300 	strex	r3, r2, [r1]
 8003e56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1d9      	bne.n	8003e16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3314      	adds	r3, #20
 8003e68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e74:	f023 0301 	bic.w	r3, r3, #1
 8003e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3314      	adds	r3, #20
 8003e82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e92:	e841 2300 	strex	r3, r2, [r1]
 8003e96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1e1      	bne.n	8003e62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3314      	adds	r3, #20
 8003ea4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ea8:	e853 3f00 	ldrex	r3, [r3]
 8003eac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003eae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3314      	adds	r3, #20
 8003ebe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ec2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ec4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ec8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003eca:	e841 2300 	strex	r3, r2, [r1]
 8003ece:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ed0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1e3      	bne.n	8003e9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	330c      	adds	r3, #12
 8003eea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eee:	e853 3f00 	ldrex	r3, [r3]
 8003ef2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ef6:	f023 0310 	bic.w	r3, r3, #16
 8003efa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	330c      	adds	r3, #12
 8003f04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f08:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f0a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f10:	e841 2300 	strex	r3, r2, [r1]
 8003f14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1e3      	bne.n	8003ee4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fd ffc5 	bl	8001eb0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	4619      	mov	r1, r3
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f8b6 	bl	80040a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f3c:	e099      	b.n	8004072 <HAL_UART_IRQHandler+0x50e>
 8003f3e:	bf00      	nop
 8003f40:	080042df 	.word	0x080042df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 808b 	beq.w	8004076 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003f60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 8086 	beq.w	8004076 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	330c      	adds	r3, #12
 8003f70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f74:	e853 3f00 	ldrex	r3, [r3]
 8003f78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	330c      	adds	r3, #12
 8003f8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f8e:	647a      	str	r2, [r7, #68]	; 0x44
 8003f90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f96:	e841 2300 	strex	r3, r2, [r1]
 8003f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1e3      	bne.n	8003f6a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	3314      	adds	r3, #20
 8003fa8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	e853 3f00 	ldrex	r3, [r3]
 8003fb0:	623b      	str	r3, [r7, #32]
   return(result);
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	f023 0301 	bic.w	r3, r3, #1
 8003fb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3314      	adds	r3, #20
 8003fc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003fc6:	633a      	str	r2, [r7, #48]	; 0x30
 8003fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fce:	e841 2300 	strex	r3, r2, [r1]
 8003fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1e3      	bne.n	8003fa2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	330c      	adds	r3, #12
 8003fee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 0310 	bic.w	r3, r3, #16
 8003ffe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	330c      	adds	r3, #12
 8004008:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800400c:	61fa      	str	r2, [r7, #28]
 800400e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004010:	69b9      	ldr	r1, [r7, #24]
 8004012:	69fa      	ldr	r2, [r7, #28]
 8004014:	e841 2300 	strex	r3, r2, [r1]
 8004018:	617b      	str	r3, [r7, #20]
   return(result);
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e3      	bne.n	8003fe8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004020:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004024:	4619      	mov	r1, r3
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f83e 	bl	80040a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800402c:	e023      	b.n	8004076 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800402e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004036:	2b00      	cmp	r3, #0
 8004038:	d009      	beq.n	800404e <HAL_UART_IRQHandler+0x4ea>
 800403a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800403e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f95d 	bl	8004306 <UART_Transmit_IT>
    return;
 800404c:	e014      	b.n	8004078 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800404e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00e      	beq.n	8004078 <HAL_UART_IRQHandler+0x514>
 800405a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800405e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	d008      	beq.n	8004078 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f99d 	bl	80043a6 <UART_EndTransmit_IT>
    return;
 800406c:	e004      	b.n	8004078 <HAL_UART_IRQHandler+0x514>
    return;
 800406e:	bf00      	nop
 8004070:	e002      	b.n	8004078 <HAL_UART_IRQHandler+0x514>
      return;
 8004072:	bf00      	nop
 8004074:	e000      	b.n	8004078 <HAL_UART_IRQHandler+0x514>
      return;
 8004076:	bf00      	nop
  }
}
 8004078:	37e8      	adds	r7, #232	; 0xe8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop

08004080 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b090      	sub	sp, #64	; 0x40
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	603b      	str	r3, [r7, #0]
 80040cc:	4613      	mov	r3, r2
 80040ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040d0:	e050      	b.n	8004174 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d8:	d04c      	beq.n	8004174 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d007      	beq.n	80040f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80040e0:	f7fd fdf8 	bl	8001cd4 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d241      	bcs.n	8004174 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	330c      	adds	r3, #12
 80040f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fa:	e853 3f00 	ldrex	r3, [r3]
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	330c      	adds	r3, #12
 800410e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004110:	637a      	str	r2, [r7, #52]	; 0x34
 8004112:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004114:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004116:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004118:	e841 2300 	strex	r3, r2, [r1]
 800411c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800411e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1e5      	bne.n	80040f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3314      	adds	r3, #20
 800412a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	e853 3f00 	ldrex	r3, [r3]
 8004132:	613b      	str	r3, [r7, #16]
   return(result);
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f023 0301 	bic.w	r3, r3, #1
 800413a:	63bb      	str	r3, [r7, #56]	; 0x38
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3314      	adds	r3, #20
 8004142:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004144:	623a      	str	r2, [r7, #32]
 8004146:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004148:	69f9      	ldr	r1, [r7, #28]
 800414a:	6a3a      	ldr	r2, [r7, #32]
 800414c:	e841 2300 	strex	r3, r2, [r1]
 8004150:	61bb      	str	r3, [r7, #24]
   return(result);
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1e5      	bne.n	8004124 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e00f      	b.n	8004194 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	4013      	ands	r3, r2
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	429a      	cmp	r2, r3
 8004182:	bf0c      	ite	eq
 8004184:	2301      	moveq	r3, #1
 8004186:	2300      	movne	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	461a      	mov	r2, r3
 800418c:	79fb      	ldrb	r3, [r7, #7]
 800418e:	429a      	cmp	r2, r3
 8004190:	d09f      	beq.n	80040d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3740      	adds	r7, #64	; 0x40
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	4613      	mov	r3, r2
 80041a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	88fa      	ldrh	r2, [r7, #6]
 80041b4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	88fa      	ldrh	r2, [r7, #6]
 80041ba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2222      	movs	r2, #34	; 0x22
 80041c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d007      	beq.n	80041ea <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041e8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695a      	ldr	r2, [r3, #20]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f042 0201 	orr.w	r2, r2, #1
 80041f8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0220 	orr.w	r2, r2, #32
 8004208:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3714      	adds	r7, #20
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004218:	b480      	push	{r7}
 800421a:	b095      	sub	sp, #84	; 0x54
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	330c      	adds	r3, #12
 8004226:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800422a:	e853 3f00 	ldrex	r3, [r3]
 800422e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004232:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004236:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	330c      	adds	r3, #12
 800423e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004240:	643a      	str	r2, [r7, #64]	; 0x40
 8004242:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004246:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800424e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e5      	bne.n	8004220 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3314      	adds	r3, #20
 800425a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	e853 3f00 	ldrex	r3, [r3]
 8004262:	61fb      	str	r3, [r7, #28]
   return(result);
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f023 0301 	bic.w	r3, r3, #1
 800426a:	64bb      	str	r3, [r7, #72]	; 0x48
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	3314      	adds	r3, #20
 8004272:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004274:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004276:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004278:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800427a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800427c:	e841 2300 	strex	r3, r2, [r1]
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1e5      	bne.n	8004254 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428c:	2b01      	cmp	r3, #1
 800428e:	d119      	bne.n	80042c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	330c      	adds	r3, #12
 8004296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	e853 3f00 	ldrex	r3, [r3]
 800429e:	60bb      	str	r3, [r7, #8]
   return(result);
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f023 0310 	bic.w	r3, r3, #16
 80042a6:	647b      	str	r3, [r7, #68]	; 0x44
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	330c      	adds	r3, #12
 80042ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042b0:	61ba      	str	r2, [r7, #24]
 80042b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	6979      	ldr	r1, [r7, #20]
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	e841 2300 	strex	r3, r2, [r1]
 80042bc:	613b      	str	r3, [r7, #16]
   return(result);
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e5      	bne.n	8004290 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80042d2:	bf00      	nop
 80042d4:	3754      	adds	r7, #84	; 0x54
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b084      	sub	sp, #16
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f7ff fecb 	bl	8004094 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042fe:	bf00      	nop
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004306:	b480      	push	{r7}
 8004308:	b085      	sub	sp, #20
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b21      	cmp	r3, #33	; 0x21
 8004318:	d13e      	bne.n	8004398 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004322:	d114      	bne.n	800434e <UART_Transmit_IT+0x48>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d110      	bne.n	800434e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004340:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	1c9a      	adds	r2, r3, #2
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	621a      	str	r2, [r3, #32]
 800434c:	e008      	b.n	8004360 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	1c59      	adds	r1, r3, #1
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6211      	str	r1, [r2, #32]
 8004358:	781a      	ldrb	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004364:	b29b      	uxth	r3, r3
 8004366:	3b01      	subs	r3, #1
 8004368:	b29b      	uxth	r3, r3
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	4619      	mov	r1, r3
 800436e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10f      	bne.n	8004394 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004382:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004392:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004394:	2300      	movs	r3, #0
 8004396:	e000      	b.n	800439a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004398:	2302      	movs	r3, #2
  }
}
 800439a:	4618      	mov	r0, r3
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b082      	sub	sp, #8
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff fe5a 	bl	8004080 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b08c      	sub	sp, #48	; 0x30
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b22      	cmp	r3, #34	; 0x22
 80043e8:	f040 80ab 	bne.w	8004542 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f4:	d117      	bne.n	8004426 <UART_Receive_IT+0x50>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d113      	bne.n	8004426 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80043fe:	2300      	movs	r3, #0
 8004400:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004406:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	b29b      	uxth	r3, r3
 8004410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004414:	b29a      	uxth	r2, r3
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441e:	1c9a      	adds	r2, r3, #2
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	629a      	str	r2, [r3, #40]	; 0x28
 8004424:	e026      	b.n	8004474 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800442c:	2300      	movs	r3, #0
 800442e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004438:	d007      	beq.n	800444a <UART_Receive_IT+0x74>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10a      	bne.n	8004458 <UART_Receive_IT+0x82>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d106      	bne.n	8004458 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	b2da      	uxtb	r2, r3
 8004452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004454:	701a      	strb	r2, [r3, #0]
 8004456:	e008      	b.n	800446a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	b2db      	uxtb	r3, r3
 8004460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004464:	b2da      	uxtb	r2, r3
 8004466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004468:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004478:	b29b      	uxth	r3, r3
 800447a:	3b01      	subs	r3, #1
 800447c:	b29b      	uxth	r3, r3
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	4619      	mov	r1, r3
 8004482:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004484:	2b00      	cmp	r3, #0
 8004486:	d15a      	bne.n	800453e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0220 	bic.w	r2, r2, #32
 8004496:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68da      	ldr	r2, [r3, #12]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	695a      	ldr	r2, [r3, #20]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0201 	bic.w	r2, r2, #1
 80044b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d135      	bne.n	8004534 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	330c      	adds	r3, #12
 80044d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	e853 3f00 	ldrex	r3, [r3]
 80044dc:	613b      	str	r3, [r7, #16]
   return(result);
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f023 0310 	bic.w	r3, r3, #16
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	330c      	adds	r3, #12
 80044ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ee:	623a      	str	r2, [r7, #32]
 80044f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f2:	69f9      	ldr	r1, [r7, #28]
 80044f4:	6a3a      	ldr	r2, [r7, #32]
 80044f6:	e841 2300 	strex	r3, r2, [r1]
 80044fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1e5      	bne.n	80044ce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0310 	and.w	r3, r3, #16
 800450c:	2b10      	cmp	r3, #16
 800450e:	d10a      	bne.n	8004526 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004510:	2300      	movs	r3, #0
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800452a:	4619      	mov	r1, r3
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7ff fdbb 	bl	80040a8 <HAL_UARTEx_RxEventCallback>
 8004532:	e002      	b.n	800453a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7fc fb0f 	bl	8000b58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800453a:	2300      	movs	r3, #0
 800453c:	e002      	b.n	8004544 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	e000      	b.n	8004544 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004542:	2302      	movs	r3, #2
  }
}
 8004544:	4618      	mov	r0, r3
 8004546:	3730      	adds	r7, #48	; 0x30
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800454c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004550:	b0c0      	sub	sp, #256	; 0x100
 8004552:	af00      	add	r7, sp, #0
 8004554:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004568:	68d9      	ldr	r1, [r3, #12]
 800456a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	ea40 0301 	orr.w	r3, r0, r1
 8004574:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	431a      	orrs	r2, r3
 8004584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	431a      	orrs	r2, r3
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045a4:	f021 010c 	bic.w	r1, r1, #12
 80045a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045b2:	430b      	orrs	r3, r1
 80045b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c6:	6999      	ldr	r1, [r3, #24]
 80045c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	ea40 0301 	orr.w	r3, r0, r1
 80045d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	4b8f      	ldr	r3, [pc, #572]	; (8004818 <UART_SetConfig+0x2cc>)
 80045dc:	429a      	cmp	r2, r3
 80045de:	d005      	beq.n	80045ec <UART_SetConfig+0xa0>
 80045e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	4b8d      	ldr	r3, [pc, #564]	; (800481c <UART_SetConfig+0x2d0>)
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d104      	bne.n	80045f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045ec:	f7fe faf8 	bl	8002be0 <HAL_RCC_GetPCLK2Freq>
 80045f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80045f4:	e003      	b.n	80045fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045f6:	f7fe fadf 	bl	8002bb8 <HAL_RCC_GetPCLK1Freq>
 80045fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004608:	f040 810c 	bne.w	8004824 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800460c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004610:	2200      	movs	r2, #0
 8004612:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004616:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800461a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800461e:	4622      	mov	r2, r4
 8004620:	462b      	mov	r3, r5
 8004622:	1891      	adds	r1, r2, r2
 8004624:	65b9      	str	r1, [r7, #88]	; 0x58
 8004626:	415b      	adcs	r3, r3
 8004628:	65fb      	str	r3, [r7, #92]	; 0x5c
 800462a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800462e:	4621      	mov	r1, r4
 8004630:	eb12 0801 	adds.w	r8, r2, r1
 8004634:	4629      	mov	r1, r5
 8004636:	eb43 0901 	adc.w	r9, r3, r1
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004646:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800464a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800464e:	4690      	mov	r8, r2
 8004650:	4699      	mov	r9, r3
 8004652:	4623      	mov	r3, r4
 8004654:	eb18 0303 	adds.w	r3, r8, r3
 8004658:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800465c:	462b      	mov	r3, r5
 800465e:	eb49 0303 	adc.w	r3, r9, r3
 8004662:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004672:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004676:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800467a:	460b      	mov	r3, r1
 800467c:	18db      	adds	r3, r3, r3
 800467e:	653b      	str	r3, [r7, #80]	; 0x50
 8004680:	4613      	mov	r3, r2
 8004682:	eb42 0303 	adc.w	r3, r2, r3
 8004686:	657b      	str	r3, [r7, #84]	; 0x54
 8004688:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800468c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004690:	f7fb fe56 	bl	8000340 <__aeabi_uldivmod>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4b61      	ldr	r3, [pc, #388]	; (8004820 <UART_SetConfig+0x2d4>)
 800469a:	fba3 2302 	umull	r2, r3, r3, r2
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	011c      	lsls	r4, r3, #4
 80046a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046a6:	2200      	movs	r2, #0
 80046a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80046b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80046b4:	4642      	mov	r2, r8
 80046b6:	464b      	mov	r3, r9
 80046b8:	1891      	adds	r1, r2, r2
 80046ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80046bc:	415b      	adcs	r3, r3
 80046be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046c4:	4641      	mov	r1, r8
 80046c6:	eb12 0a01 	adds.w	sl, r2, r1
 80046ca:	4649      	mov	r1, r9
 80046cc:	eb43 0b01 	adc.w	fp, r3, r1
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046e4:	4692      	mov	sl, r2
 80046e6:	469b      	mov	fp, r3
 80046e8:	4643      	mov	r3, r8
 80046ea:	eb1a 0303 	adds.w	r3, sl, r3
 80046ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046f2:	464b      	mov	r3, r9
 80046f4:	eb4b 0303 	adc.w	r3, fp, r3
 80046f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80046fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004708:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800470c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004710:	460b      	mov	r3, r1
 8004712:	18db      	adds	r3, r3, r3
 8004714:	643b      	str	r3, [r7, #64]	; 0x40
 8004716:	4613      	mov	r3, r2
 8004718:	eb42 0303 	adc.w	r3, r2, r3
 800471c:	647b      	str	r3, [r7, #68]	; 0x44
 800471e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004722:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004726:	f7fb fe0b 	bl	8000340 <__aeabi_uldivmod>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	4611      	mov	r1, r2
 8004730:	4b3b      	ldr	r3, [pc, #236]	; (8004820 <UART_SetConfig+0x2d4>)
 8004732:	fba3 2301 	umull	r2, r3, r3, r1
 8004736:	095b      	lsrs	r3, r3, #5
 8004738:	2264      	movs	r2, #100	; 0x64
 800473a:	fb02 f303 	mul.w	r3, r2, r3
 800473e:	1acb      	subs	r3, r1, r3
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004746:	4b36      	ldr	r3, [pc, #216]	; (8004820 <UART_SetConfig+0x2d4>)
 8004748:	fba3 2302 	umull	r2, r3, r3, r2
 800474c:	095b      	lsrs	r3, r3, #5
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004754:	441c      	add	r4, r3
 8004756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800475a:	2200      	movs	r2, #0
 800475c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004760:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004764:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004768:	4642      	mov	r2, r8
 800476a:	464b      	mov	r3, r9
 800476c:	1891      	adds	r1, r2, r2
 800476e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004770:	415b      	adcs	r3, r3
 8004772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004774:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004778:	4641      	mov	r1, r8
 800477a:	1851      	adds	r1, r2, r1
 800477c:	6339      	str	r1, [r7, #48]	; 0x30
 800477e:	4649      	mov	r1, r9
 8004780:	414b      	adcs	r3, r1
 8004782:	637b      	str	r3, [r7, #52]	; 0x34
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004790:	4659      	mov	r1, fp
 8004792:	00cb      	lsls	r3, r1, #3
 8004794:	4651      	mov	r1, sl
 8004796:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800479a:	4651      	mov	r1, sl
 800479c:	00ca      	lsls	r2, r1, #3
 800479e:	4610      	mov	r0, r2
 80047a0:	4619      	mov	r1, r3
 80047a2:	4603      	mov	r3, r0
 80047a4:	4642      	mov	r2, r8
 80047a6:	189b      	adds	r3, r3, r2
 80047a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047ac:	464b      	mov	r3, r9
 80047ae:	460a      	mov	r2, r1
 80047b0:	eb42 0303 	adc.w	r3, r2, r3
 80047b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80047c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80047c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80047cc:	460b      	mov	r3, r1
 80047ce:	18db      	adds	r3, r3, r3
 80047d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80047d2:	4613      	mov	r3, r2
 80047d4:	eb42 0303 	adc.w	r3, r2, r3
 80047d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80047e2:	f7fb fdad 	bl	8000340 <__aeabi_uldivmod>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	4b0d      	ldr	r3, [pc, #52]	; (8004820 <UART_SetConfig+0x2d4>)
 80047ec:	fba3 1302 	umull	r1, r3, r3, r2
 80047f0:	095b      	lsrs	r3, r3, #5
 80047f2:	2164      	movs	r1, #100	; 0x64
 80047f4:	fb01 f303 	mul.w	r3, r1, r3
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	3332      	adds	r3, #50	; 0x32
 80047fe:	4a08      	ldr	r2, [pc, #32]	; (8004820 <UART_SetConfig+0x2d4>)
 8004800:	fba2 2303 	umull	r2, r3, r2, r3
 8004804:	095b      	lsrs	r3, r3, #5
 8004806:	f003 0207 	and.w	r2, r3, #7
 800480a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4422      	add	r2, r4
 8004812:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004814:	e105      	b.n	8004a22 <UART_SetConfig+0x4d6>
 8004816:	bf00      	nop
 8004818:	40011000 	.word	0x40011000
 800481c:	40011400 	.word	0x40011400
 8004820:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004828:	2200      	movs	r2, #0
 800482a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800482e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004832:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004836:	4642      	mov	r2, r8
 8004838:	464b      	mov	r3, r9
 800483a:	1891      	adds	r1, r2, r2
 800483c:	6239      	str	r1, [r7, #32]
 800483e:	415b      	adcs	r3, r3
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
 8004842:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004846:	4641      	mov	r1, r8
 8004848:	1854      	adds	r4, r2, r1
 800484a:	4649      	mov	r1, r9
 800484c:	eb43 0501 	adc.w	r5, r3, r1
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	00eb      	lsls	r3, r5, #3
 800485a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800485e:	00e2      	lsls	r2, r4, #3
 8004860:	4614      	mov	r4, r2
 8004862:	461d      	mov	r5, r3
 8004864:	4643      	mov	r3, r8
 8004866:	18e3      	adds	r3, r4, r3
 8004868:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800486c:	464b      	mov	r3, r9
 800486e:	eb45 0303 	adc.w	r3, r5, r3
 8004872:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004882:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004886:	f04f 0200 	mov.w	r2, #0
 800488a:	f04f 0300 	mov.w	r3, #0
 800488e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004892:	4629      	mov	r1, r5
 8004894:	008b      	lsls	r3, r1, #2
 8004896:	4621      	mov	r1, r4
 8004898:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800489c:	4621      	mov	r1, r4
 800489e:	008a      	lsls	r2, r1, #2
 80048a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80048a4:	f7fb fd4c 	bl	8000340 <__aeabi_uldivmod>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4b60      	ldr	r3, [pc, #384]	; (8004a30 <UART_SetConfig+0x4e4>)
 80048ae:	fba3 2302 	umull	r2, r3, r3, r2
 80048b2:	095b      	lsrs	r3, r3, #5
 80048b4:	011c      	lsls	r4, r3, #4
 80048b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ba:	2200      	movs	r2, #0
 80048bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80048c8:	4642      	mov	r2, r8
 80048ca:	464b      	mov	r3, r9
 80048cc:	1891      	adds	r1, r2, r2
 80048ce:	61b9      	str	r1, [r7, #24]
 80048d0:	415b      	adcs	r3, r3
 80048d2:	61fb      	str	r3, [r7, #28]
 80048d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048d8:	4641      	mov	r1, r8
 80048da:	1851      	adds	r1, r2, r1
 80048dc:	6139      	str	r1, [r7, #16]
 80048de:	4649      	mov	r1, r9
 80048e0:	414b      	adcs	r3, r1
 80048e2:	617b      	str	r3, [r7, #20]
 80048e4:	f04f 0200 	mov.w	r2, #0
 80048e8:	f04f 0300 	mov.w	r3, #0
 80048ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048f0:	4659      	mov	r1, fp
 80048f2:	00cb      	lsls	r3, r1, #3
 80048f4:	4651      	mov	r1, sl
 80048f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048fa:	4651      	mov	r1, sl
 80048fc:	00ca      	lsls	r2, r1, #3
 80048fe:	4610      	mov	r0, r2
 8004900:	4619      	mov	r1, r3
 8004902:	4603      	mov	r3, r0
 8004904:	4642      	mov	r2, r8
 8004906:	189b      	adds	r3, r3, r2
 8004908:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800490c:	464b      	mov	r3, r9
 800490e:	460a      	mov	r2, r1
 8004910:	eb42 0303 	adc.w	r3, r2, r3
 8004914:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	67bb      	str	r3, [r7, #120]	; 0x78
 8004922:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	f04f 0300 	mov.w	r3, #0
 800492c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004930:	4649      	mov	r1, r9
 8004932:	008b      	lsls	r3, r1, #2
 8004934:	4641      	mov	r1, r8
 8004936:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800493a:	4641      	mov	r1, r8
 800493c:	008a      	lsls	r2, r1, #2
 800493e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004942:	f7fb fcfd 	bl	8000340 <__aeabi_uldivmod>
 8004946:	4602      	mov	r2, r0
 8004948:	460b      	mov	r3, r1
 800494a:	4b39      	ldr	r3, [pc, #228]	; (8004a30 <UART_SetConfig+0x4e4>)
 800494c:	fba3 1302 	umull	r1, r3, r3, r2
 8004950:	095b      	lsrs	r3, r3, #5
 8004952:	2164      	movs	r1, #100	; 0x64
 8004954:	fb01 f303 	mul.w	r3, r1, r3
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	011b      	lsls	r3, r3, #4
 800495c:	3332      	adds	r3, #50	; 0x32
 800495e:	4a34      	ldr	r2, [pc, #208]	; (8004a30 <UART_SetConfig+0x4e4>)
 8004960:	fba2 2303 	umull	r2, r3, r2, r3
 8004964:	095b      	lsrs	r3, r3, #5
 8004966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800496a:	441c      	add	r4, r3
 800496c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004970:	2200      	movs	r2, #0
 8004972:	673b      	str	r3, [r7, #112]	; 0x70
 8004974:	677a      	str	r2, [r7, #116]	; 0x74
 8004976:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800497a:	4642      	mov	r2, r8
 800497c:	464b      	mov	r3, r9
 800497e:	1891      	adds	r1, r2, r2
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	415b      	adcs	r3, r3
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800498a:	4641      	mov	r1, r8
 800498c:	1851      	adds	r1, r2, r1
 800498e:	6039      	str	r1, [r7, #0]
 8004990:	4649      	mov	r1, r9
 8004992:	414b      	adcs	r3, r1
 8004994:	607b      	str	r3, [r7, #4]
 8004996:	f04f 0200 	mov.w	r2, #0
 800499a:	f04f 0300 	mov.w	r3, #0
 800499e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049a2:	4659      	mov	r1, fp
 80049a4:	00cb      	lsls	r3, r1, #3
 80049a6:	4651      	mov	r1, sl
 80049a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049ac:	4651      	mov	r1, sl
 80049ae:	00ca      	lsls	r2, r1, #3
 80049b0:	4610      	mov	r0, r2
 80049b2:	4619      	mov	r1, r3
 80049b4:	4603      	mov	r3, r0
 80049b6:	4642      	mov	r2, r8
 80049b8:	189b      	adds	r3, r3, r2
 80049ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80049bc:	464b      	mov	r3, r9
 80049be:	460a      	mov	r2, r1
 80049c0:	eb42 0303 	adc.w	r3, r2, r3
 80049c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	663b      	str	r3, [r7, #96]	; 0x60
 80049d0:	667a      	str	r2, [r7, #100]	; 0x64
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	f04f 0300 	mov.w	r3, #0
 80049da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80049de:	4649      	mov	r1, r9
 80049e0:	008b      	lsls	r3, r1, #2
 80049e2:	4641      	mov	r1, r8
 80049e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049e8:	4641      	mov	r1, r8
 80049ea:	008a      	lsls	r2, r1, #2
 80049ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80049f0:	f7fb fca6 	bl	8000340 <__aeabi_uldivmod>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4b0d      	ldr	r3, [pc, #52]	; (8004a30 <UART_SetConfig+0x4e4>)
 80049fa:	fba3 1302 	umull	r1, r3, r3, r2
 80049fe:	095b      	lsrs	r3, r3, #5
 8004a00:	2164      	movs	r1, #100	; 0x64
 8004a02:	fb01 f303 	mul.w	r3, r1, r3
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	3332      	adds	r3, #50	; 0x32
 8004a0c:	4a08      	ldr	r2, [pc, #32]	; (8004a30 <UART_SetConfig+0x4e4>)
 8004a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a12:	095b      	lsrs	r3, r3, #5
 8004a14:	f003 020f 	and.w	r2, r3, #15
 8004a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4422      	add	r2, r4
 8004a20:	609a      	str	r2, [r3, #8]
}
 8004a22:	bf00      	nop
 8004a24:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a2e:	bf00      	nop
 8004a30:	51eb851f 	.word	0x51eb851f

08004a34 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f103 0208 	add.w	r2, r3, #8
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f04f 32ff 	mov.w	r2, #4294967295
 8004a4c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f103 0208 	add.w	r2, r3, #8
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f103 0208 	add.w	r2, r3, #8
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b085      	sub	sp, #20
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
 8004a96:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa4:	d103      	bne.n	8004aae <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	e00c      	b.n	8004ac8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	3308      	adds	r3, #8
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	e002      	b.n	8004abc <vListInsert+0x2e>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d2f6      	bcs.n	8004ab6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	601a      	str	r2, [r3, #0]
}
 8004af4:	bf00      	nop
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6892      	ldr	r2, [r2, #8]
 8004b16:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6852      	ldr	r2, [r2, #4]
 8004b20:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d103      	bne.n	8004b34 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	1e5a      	subs	r2, r3, #1
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10a      	bne.n	8004b82 <xQueueGenericReset+0x2e>
        __asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	60fb      	str	r3, [r7, #12]
    }
 8004b7e:	bf00      	nop
 8004b80:	e7fe      	b.n	8004b80 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d05d      	beq.n	8004c44 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d059      	beq.n	8004c44 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b98:	2100      	movs	r1, #0
 8004b9a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d000      	beq.n	8004ba4 <xQueueGenericReset+0x50>
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d14c      	bne.n	8004c44 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8004baa:	f002 fead 	bl	8007908 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb6:	6939      	ldr	r1, [r7, #16]
 8004bb8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bba:	fb01 f303 	mul.w	r3, r1, r3
 8004bbe:	441a      	add	r2, r3
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	6939      	ldr	r1, [r7, #16]
 8004bde:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004be0:	fb01 f303 	mul.w	r3, r1, r3
 8004be4:	441a      	add	r2, r3
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	22ff      	movs	r2, #255	; 0xff
 8004bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	22ff      	movs	r2, #255	; 0xff
 8004bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d114      	bne.n	8004c2a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d01a      	beq.n	8004c3e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	3310      	adds	r3, #16
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f001 fb4f 	bl	80062b0 <xTaskRemoveFromEventList>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d012      	beq.n	8004c3e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004c18:	4b15      	ldr	r3, [pc, #84]	; (8004c70 <xQueueGenericReset+0x11c>)
 8004c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	e009      	b.n	8004c3e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	3310      	adds	r3, #16
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff ff00 	bl	8004a34 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	3324      	adds	r3, #36	; 0x24
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff fefb 	bl	8004a34 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8004c3e:	f002 fe93 	bl	8007968 <vPortExitCritical>
 8004c42:	e001      	b.n	8004c48 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8004c44:	2300      	movs	r3, #0
 8004c46:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10a      	bne.n	8004c64 <xQueueGenericReset+0x110>
        __asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	60bb      	str	r3, [r7, #8]
    }
 8004c60:	bf00      	nop
 8004c62:	e7fe      	b.n	8004c62 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8004c64:	697b      	ldr	r3, [r7, #20]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	e000ed04 	.word	0xe000ed04

08004c74 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08a      	sub	sp, #40	; 0x28
 8004c78:	af02      	add	r7, sp, #8
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8004c82:	2300      	movs	r3, #0
 8004c84:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d02e      	beq.n	8004cea <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	fba3 2302 	umull	r2, r3, r3, r2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d000      	beq.n	8004c9c <xQueueGenericCreate+0x28>
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d123      	bne.n	8004cea <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004caa:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004cae:	d81c      	bhi.n	8004cea <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	fb02 f303 	mul.w	r3, r2, r3
 8004cb8:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	3350      	adds	r3, #80	; 0x50
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f002 ff8a 	bl	8007bd8 <pvPortMalloc>
 8004cc4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d01c      	beq.n	8004d06 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	3350      	adds	r3, #80	; 0x50
 8004cd4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004cd6:	79fa      	ldrb	r2, [r7, #7]
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	68b9      	ldr	r1, [r7, #8]
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f000 f814 	bl	8004d10 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8004ce8:	e00d      	b.n	8004d06 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10a      	bne.n	8004d06 <xQueueGenericCreate+0x92>
        __asm volatile
 8004cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	613b      	str	r3, [r7, #16]
    }
 8004d02:	bf00      	nop
 8004d04:	e7fe      	b.n	8004d04 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004d06:	69fb      	ldr	r3, [r7, #28]
    }
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3720      	adds	r7, #32
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
 8004d1c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d103      	bne.n	8004d2c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	e002      	b.n	8004d32 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d3e:	2101      	movs	r1, #1
 8004d40:	69b8      	ldr	r0, [r7, #24]
 8004d42:	f7ff ff07 	bl	8004b54 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	78fa      	ldrb	r2, [r7, #3]
 8004d4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8004d4e:	78fb      	ldrb	r3, [r7, #3]
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	68f9      	ldr	r1, [r7, #12]
 8004d54:	2073      	movs	r0, #115	; 0x73
 8004d56:	f004 f8c7 	bl	8008ee8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8004d5a:	bf00      	nop
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b090      	sub	sp, #64	; 0x40
 8004d68:	af02      	add	r7, sp, #8
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004d72:	2300      	movs	r3, #0
 8004d74:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10a      	bne.n	8004d96 <xQueueGenericSend+0x32>
        __asm volatile
 8004d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004d92:	bf00      	nop
 8004d94:	e7fe      	b.n	8004d94 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d103      	bne.n	8004da4 <xQueueGenericSend+0x40>
 8004d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <xQueueGenericSend+0x44>
 8004da4:	2301      	movs	r3, #1
 8004da6:	e000      	b.n	8004daa <xQueueGenericSend+0x46>
 8004da8:	2300      	movs	r3, #0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10a      	bne.n	8004dc4 <xQueueGenericSend+0x60>
        __asm volatile
 8004dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004dc0:	bf00      	nop
 8004dc2:	e7fe      	b.n	8004dc2 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d103      	bne.n	8004dd2 <xQueueGenericSend+0x6e>
 8004dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d101      	bne.n	8004dd6 <xQueueGenericSend+0x72>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <xQueueGenericSend+0x74>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10a      	bne.n	8004df2 <xQueueGenericSend+0x8e>
        __asm volatile
 8004ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de0:	f383 8811 	msr	BASEPRI, r3
 8004de4:	f3bf 8f6f 	isb	sy
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	623b      	str	r3, [r7, #32]
    }
 8004dee:	bf00      	nop
 8004df0:	e7fe      	b.n	8004df0 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004df2:	f001 fc6f 	bl	80066d4 <xTaskGetSchedulerState>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d102      	bne.n	8004e02 <xQueueGenericSend+0x9e>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <xQueueGenericSend+0xa2>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <xQueueGenericSend+0xa4>
 8004e06:	2300      	movs	r3, #0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10a      	bne.n	8004e22 <xQueueGenericSend+0xbe>
        __asm volatile
 8004e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	61fb      	str	r3, [r7, #28]
    }
 8004e1e:	bf00      	nop
 8004e20:	e7fe      	b.n	8004e20 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004e22:	f002 fd71 	bl	8007908 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d302      	bcc.n	8004e38 <xQueueGenericSend+0xd4>
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d136      	bne.n	8004ea6 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8004e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f004 fdb4 	bl	80099a8 <SEGGER_SYSVIEW_ShrinkId>
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	6879      	ldr	r1, [r7, #4]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4601      	mov	r1, r0
 8004e4c:	205a      	movs	r0, #90	; 0x5a
 8004e4e:	f004 f8c1 	bl	8008fd4 <SEGGER_SYSVIEW_RecordU32x4>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	68b9      	ldr	r1, [r7, #8]
 8004e56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e58:	f000 fb53 	bl	8005502 <prvCopyDataToQueue>
 8004e5c:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d010      	beq.n	8004e88 <xQueueGenericSend+0x124>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e68:	3324      	adds	r3, #36	; 0x24
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f001 fa20 	bl	80062b0 <xTaskRemoveFromEventList>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d013      	beq.n	8004e9e <xQueueGenericSend+0x13a>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004e76:	4b4d      	ldr	r3, [pc, #308]	; (8004fac <xQueueGenericSend+0x248>)
 8004e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	e00a      	b.n	8004e9e <xQueueGenericSend+0x13a>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8004e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <xQueueGenericSend+0x13a>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8004e8e:	4b47      	ldr	r3, [pc, #284]	; (8004fac <xQueueGenericSend+0x248>)
 8004e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004e9e:	f002 fd63 	bl	8007968 <vPortExitCritical>
                return pdPASS;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e07d      	b.n	8004fa2 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d110      	bne.n	8004ece <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004eac:	f002 fd5c 	bl	8007968 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f004 fd78 	bl	80099a8 <SEGGER_SYSVIEW_ShrinkId>
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4601      	mov	r1, r0
 8004ec4:	205a      	movs	r0, #90	; 0x5a
 8004ec6:	f004 f885 	bl	8008fd4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	e069      	b.n	8004fa2 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d106      	bne.n	8004ee2 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004ed4:	f107 0314 	add.w	r3, r7, #20
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f001 fac1 	bl	8006460 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004ee2:	f002 fd41 	bl	8007968 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004ee6:	f000 feb7 	bl	8005c58 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004eea:	f002 fd0d 	bl	8007908 <vPortEnterCritical>
 8004eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ef4:	b25b      	sxtb	r3, r3
 8004ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efa:	d103      	bne.n	8004f04 <xQueueGenericSend+0x1a0>
 8004efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f0a:	b25b      	sxtb	r3, r3
 8004f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f10:	d103      	bne.n	8004f1a <xQueueGenericSend+0x1b6>
 8004f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f1a:	f002 fd25 	bl	8007968 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f1e:	1d3a      	adds	r2, r7, #4
 8004f20:	f107 0314 	add.w	r3, r7, #20
 8004f24:	4611      	mov	r1, r2
 8004f26:	4618      	mov	r0, r3
 8004f28:	f001 fab0 	bl	800648c <xTaskCheckForTimeOut>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d124      	bne.n	8004f7c <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f34:	f000 fbdd 	bl	80056f2 <prvIsQueueFull>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d018      	beq.n	8004f70 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f40:	3310      	adds	r3, #16
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	4611      	mov	r1, r2
 8004f46:	4618      	mov	r0, r3
 8004f48:	f001 f946 	bl	80061d8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004f4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f4e:	f000 fb68 	bl	8005622 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004f52:	f000 fe8f 	bl	8005c74 <xTaskResumeAll>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f47f af62 	bne.w	8004e22 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8004f5e:	4b13      	ldr	r3, [pc, #76]	; (8004fac <xQueueGenericSend+0x248>)
 8004f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	e758      	b.n	8004e22 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004f70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f72:	f000 fb56 	bl	8005622 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004f76:	f000 fe7d 	bl	8005c74 <xTaskResumeAll>
 8004f7a:	e752      	b.n	8004e22 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004f7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f7e:	f000 fb50 	bl	8005622 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004f82:	f000 fe77 	bl	8005c74 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8004f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f004 fd0d 	bl	80099a8 <SEGGER_SYSVIEW_ShrinkId>
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	6879      	ldr	r1, [r7, #4]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	460b      	mov	r3, r1
 8004f98:	4601      	mov	r1, r0
 8004f9a:	205a      	movs	r0, #90	; 0x5a
 8004f9c:	f004 f81a 	bl	8008fd4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8004fa0:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3738      	adds	r7, #56	; 0x38
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	e000ed04 	.word	0xe000ed04

08004fb0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b092      	sub	sp, #72	; 0x48
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
 8004fbc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 8004fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10a      	bne.n	8004fde <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8004fda:	bf00      	nop
 8004fdc:	e7fe      	b.n	8004fdc <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d103      	bne.n	8004fec <xQueueGenericSendFromISR+0x3c>
 8004fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <xQueueGenericSendFromISR+0x40>
 8004fec:	2301      	movs	r3, #1
 8004fee:	e000      	b.n	8004ff2 <xQueueGenericSendFromISR+0x42>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10a      	bne.n	800500c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005008:	bf00      	nop
 800500a:	e7fe      	b.n	800500a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b02      	cmp	r3, #2
 8005010:	d103      	bne.n	800501a <xQueueGenericSendFromISR+0x6a>
 8005012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005016:	2b01      	cmp	r3, #1
 8005018:	d101      	bne.n	800501e <xQueueGenericSendFromISR+0x6e>
 800501a:	2301      	movs	r3, #1
 800501c:	e000      	b.n	8005020 <xQueueGenericSendFromISR+0x70>
 800501e:	2300      	movs	r3, #0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10a      	bne.n	800503a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8005024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005036:	bf00      	nop
 8005038:	e7fe      	b.n	8005038 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800503a:	f002 fd8d 	bl	8007b58 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800503e:	f3ef 8211 	mrs	r2, BASEPRI
 8005042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005046:	f383 8811 	msr	BASEPRI, r3
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	623a      	str	r2, [r7, #32]
 8005054:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8005056:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005058:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800505a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800505c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800505e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005062:	429a      	cmp	r2, r3
 8005064:	d302      	bcc.n	800506c <xQueueGenericSendFromISR+0xbc>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b02      	cmp	r3, #2
 800506a:	d150      	bne.n	800510e <xQueueGenericSendFromISR+0x15e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800506c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800506e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005072:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	637b      	str	r3, [r7, #52]	; 0x34

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 800507c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800507e:	4618      	mov	r0, r3
 8005080:	f004 fc92 	bl	80099a8 <SEGGER_SYSVIEW_ShrinkId>
 8005084:	4601      	mov	r1, r0
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	461a      	mov	r2, r3
 800508a:	2060      	movs	r0, #96	; 0x60
 800508c:	f003 fed2 	bl	8008e34 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	68b9      	ldr	r1, [r7, #8]
 8005094:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005096:	f000 fa34 	bl	8005502 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800509a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800509e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a2:	d112      	bne.n	80050ca <xQueueGenericSendFromISR+0x11a>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d02d      	beq.n	8005108 <xQueueGenericSendFromISR+0x158>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ae:	3324      	adds	r3, #36	; 0x24
 80050b0:	4618      	mov	r0, r3
 80050b2:	f001 f8fd 	bl	80062b0 <xTaskRemoveFromEventList>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d025      	beq.n	8005108 <xQueueGenericSendFromISR+0x158>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d022      	beq.n	8005108 <xQueueGenericSendFromISR+0x158>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	601a      	str	r2, [r3, #0]
 80050c8:	e01e      	b.n	8005108 <xQueueGenericSendFromISR+0x158>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 80050ca:	f000 fef5 	bl	8005eb8 <uxTaskGetNumberOfTasks>
 80050ce:	6338      	str	r0, [r7, #48]	; 0x30
 80050d0:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80050d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d916      	bls.n	8005108 <xQueueGenericSendFromISR+0x158>
 80050da:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80050de:	2b7f      	cmp	r3, #127	; 0x7f
 80050e0:	d10a      	bne.n	80050f8 <xQueueGenericSendFromISR+0x148>
        __asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	61bb      	str	r3, [r7, #24]
    }
 80050f4:	bf00      	nop
 80050f6:	e7fe      	b.n	80050f6 <xQueueGenericSendFromISR+0x146>
 80050f8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80050fc:	3301      	adds	r3, #1
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	b25a      	sxtb	r2, r3
 8005102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8005108:	2301      	movs	r3, #1
 800510a:	647b      	str	r3, [r7, #68]	; 0x44
        {
 800510c:	e00b      	b.n	8005126 <xQueueGenericSendFromISR+0x176>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800510e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005110:	4618      	mov	r0, r3
 8005112:	f004 fc49 	bl	80099a8 <SEGGER_SYSVIEW_ShrinkId>
 8005116:	4601      	mov	r1, r0
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	461a      	mov	r2, r3
 800511c:	2060      	movs	r0, #96	; 0x60
 800511e:	f003 fe89 	bl	8008e34 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8005122:	2300      	movs	r3, #0
 8005124:	647b      	str	r3, [r7, #68]	; 0x44
 8005126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005128:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005130:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005134:	4618      	mov	r0, r3
 8005136:	3748      	adds	r7, #72	; 0x48
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800513c:	b590      	push	{r4, r7, lr}
 800513e:	b08f      	sub	sp, #60	; 0x3c
 8005140:	af02      	add	r7, sp, #8
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005148:	2300      	movs	r3, #0
 800514a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10a      	bne.n	800516c <xQueueReceive+0x30>
        __asm volatile
 8005156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	623b      	str	r3, [r7, #32]
    }
 8005168:	bf00      	nop
 800516a:	e7fe      	b.n	800516a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d103      	bne.n	800517a <xQueueReceive+0x3e>
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <xQueueReceive+0x42>
 800517a:	2301      	movs	r3, #1
 800517c:	e000      	b.n	8005180 <xQueueReceive+0x44>
 800517e:	2300      	movs	r3, #0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10a      	bne.n	800519a <xQueueReceive+0x5e>
        __asm volatile
 8005184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005188:	f383 8811 	msr	BASEPRI, r3
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	61fb      	str	r3, [r7, #28]
    }
 8005196:	bf00      	nop
 8005198:	e7fe      	b.n	8005198 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800519a:	f001 fa9b 	bl	80066d4 <xTaskGetSchedulerState>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d102      	bne.n	80051aa <xQueueReceive+0x6e>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <xQueueReceive+0x72>
 80051aa:	2301      	movs	r3, #1
 80051ac:	e000      	b.n	80051b0 <xQueueReceive+0x74>
 80051ae:	2300      	movs	r3, #0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10a      	bne.n	80051ca <xQueueReceive+0x8e>
        __asm volatile
 80051b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	61bb      	str	r3, [r7, #24]
    }
 80051c6:	bf00      	nop
 80051c8:	e7fe      	b.n	80051c8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80051ca:	f002 fb9d 	bl	8007908 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d02f      	beq.n	800523a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80051da:	68b9      	ldr	r1, [r7, #8]
 80051dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051de:	f000 f9fa 	bl	80055d6 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80051e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e4:	4618      	mov	r0, r3
 80051e6:	f004 fbdf 	bl	80099a8 <SEGGER_SYSVIEW_ShrinkId>
 80051ea:	4604      	mov	r4, r0
 80051ec:	2000      	movs	r0, #0
 80051ee:	f004 fbdb 	bl	80099a8 <SEGGER_SYSVIEW_ShrinkId>
 80051f2:	4602      	mov	r2, r0
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2101      	movs	r1, #1
 80051f8:	9100      	str	r1, [sp, #0]
 80051fa:	4621      	mov	r1, r4
 80051fc:	205c      	movs	r0, #92	; 0x5c
 80051fe:	f003 fee9 	bl	8008fd4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	1e5a      	subs	r2, r3, #1
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800520a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00f      	beq.n	8005232 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005214:	3310      	adds	r3, #16
 8005216:	4618      	mov	r0, r3
 8005218:	f001 f84a 	bl	80062b0 <xTaskRemoveFromEventList>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d007      	beq.n	8005232 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005222:	4b4d      	ldr	r3, [pc, #308]	; (8005358 <xQueueReceive+0x21c>)
 8005224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005232:	f002 fb99 	bl	8007968 <vPortExitCritical>
                return pdPASS;
 8005236:	2301      	movs	r3, #1
 8005238:	e08a      	b.n	8005350 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d113      	bne.n	8005268 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005240:	f002 fb92 	bl	8007968 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005246:	4618      	mov	r0, r3
 8005248:	f004 fbae 	bl	80099a8 <SEGGER_SYSVIEW_ShrinkId>
 800524c:	4604      	mov	r4, r0
 800524e:	2000      	movs	r0, #0
 8005250:	f004 fbaa 	bl	80099a8 <SEGGER_SYSVIEW_ShrinkId>
 8005254:	4602      	mov	r2, r0
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2101      	movs	r1, #1
 800525a:	9100      	str	r1, [sp, #0]
 800525c:	4621      	mov	r1, r4
 800525e:	205c      	movs	r0, #92	; 0x5c
 8005260:	f003 feb8 	bl	8008fd4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8005264:	2300      	movs	r3, #0
 8005266:	e073      	b.n	8005350 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526a:	2b00      	cmp	r3, #0
 800526c:	d106      	bne.n	800527c <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800526e:	f107 0310 	add.w	r3, r7, #16
 8005272:	4618      	mov	r0, r3
 8005274:	f001 f8f4 	bl	8006460 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005278:	2301      	movs	r3, #1
 800527a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800527c:	f002 fb74 	bl	8007968 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005280:	f000 fcea 	bl	8005c58 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005284:	f002 fb40 	bl	8007908 <vPortEnterCritical>
 8005288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800528e:	b25b      	sxtb	r3, r3
 8005290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005294:	d103      	bne.n	800529e <xQueueReceive+0x162>
 8005296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052a4:	b25b      	sxtb	r3, r3
 80052a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052aa:	d103      	bne.n	80052b4 <xQueueReceive+0x178>
 80052ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052b4:	f002 fb58 	bl	8007968 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052b8:	1d3a      	adds	r2, r7, #4
 80052ba:	f107 0310 	add.w	r3, r7, #16
 80052be:	4611      	mov	r1, r2
 80052c0:	4618      	mov	r0, r3
 80052c2:	f001 f8e3 	bl	800648c <xTaskCheckForTimeOut>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d124      	bne.n	8005316 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052ce:	f000 f9fa 	bl	80056c6 <prvIsQueueEmpty>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d018      	beq.n	800530a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80052d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052da:	3324      	adds	r3, #36	; 0x24
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	4611      	mov	r1, r2
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 ff79 	bl	80061d8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80052e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052e8:	f000 f99b 	bl	8005622 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80052ec:	f000 fcc2 	bl	8005c74 <xTaskResumeAll>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f47f af69 	bne.w	80051ca <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80052f8:	4b17      	ldr	r3, [pc, #92]	; (8005358 <xQueueReceive+0x21c>)
 80052fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	e75f      	b.n	80051ca <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800530a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800530c:	f000 f989 	bl	8005622 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005310:	f000 fcb0 	bl	8005c74 <xTaskResumeAll>
 8005314:	e759      	b.n	80051ca <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005318:	f000 f983 	bl	8005622 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800531c:	f000 fcaa 	bl	8005c74 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005322:	f000 f9d0 	bl	80056c6 <prvIsQueueEmpty>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	f43f af4e 	beq.w	80051ca <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005330:	4618      	mov	r0, r3
 8005332:	f004 fb39 	bl	80099a8 <SEGGER_SYSVIEW_ShrinkId>
 8005336:	4604      	mov	r4, r0
 8005338:	2000      	movs	r0, #0
 800533a:	f004 fb35 	bl	80099a8 <SEGGER_SYSVIEW_ShrinkId>
 800533e:	4602      	mov	r2, r0
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2101      	movs	r1, #1
 8005344:	9100      	str	r1, [sp, #0]
 8005346:	4621      	mov	r1, r4
 8005348:	205c      	movs	r0, #92	; 0x5c
 800534a:	f003 fe43 	bl	8008fd4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800534e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005350:	4618      	mov	r0, r3
 8005352:	3734      	adds	r7, #52	; 0x34
 8005354:	46bd      	mov	sp, r7
 8005356:	bd90      	pop	{r4, r7, pc}
 8005358:	e000ed04 	.word	0xe000ed04

0800535c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800535c:	b590      	push	{r4, r7, lr}
 800535e:	b091      	sub	sp, #68	; 0x44
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800536c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10a      	bne.n	8005388 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8005372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005376:	f383 8811 	msr	BASEPRI, r3
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005384:	bf00      	nop
 8005386:	e7fe      	b.n	8005386 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d103      	bne.n	8005396 <xQueueReceiveFromISR+0x3a>
 800538e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <xQueueReceiveFromISR+0x3e>
 8005396:	2301      	movs	r3, #1
 8005398:	e000      	b.n	800539c <xQueueReceiveFromISR+0x40>
 800539a:	2300      	movs	r3, #0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10a      	bne.n	80053b6 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	623b      	str	r3, [r7, #32]
    }
 80053b2:	bf00      	nop
 80053b4:	e7fe      	b.n	80053b4 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80053b6:	f002 fbcf 	bl	8007b58 <vPortValidateInterruptPriority>
        __asm volatile
 80053ba:	f3ef 8211 	mrs	r2, BASEPRI
 80053be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	61fa      	str	r2, [r7, #28]
 80053d0:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 80053d2:	69fb      	ldr	r3, [r7, #28]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80053d4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053da:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d055      	beq.n	800548e <xQueueReceiveFromISR+0x132>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 80053e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 80053ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ee:	4618      	mov	r0, r3
 80053f0:	f004 fada 	bl	80099a8 <SEGGER_SYSVIEW_ShrinkId>
 80053f4:	4604      	mov	r4, r0
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f004 fad5 	bl	80099a8 <SEGGER_SYSVIEW_ShrinkId>
 80053fe:	4602      	mov	r2, r0
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4621      	mov	r1, r4
 8005404:	2062      	movs	r0, #98	; 0x62
 8005406:	f003 fd6f 	bl	8008ee8 <SEGGER_SYSVIEW_RecordU32x3>

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800540a:	68b9      	ldr	r1, [r7, #8]
 800540c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800540e:	f000 f8e2 	bl	80055d6 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005414:	1e5a      	subs	r2, r3, #1
 8005416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005418:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800541a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800541e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005422:	d112      	bne.n	800544a <xQueueReceiveFromISR+0xee>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d02d      	beq.n	8005488 <xQueueReceiveFromISR+0x12c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800542c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542e:	3310      	adds	r3, #16
 8005430:	4618      	mov	r0, r3
 8005432:	f000 ff3d 	bl	80062b0 <xTaskRemoveFromEventList>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d025      	beq.n	8005488 <xQueueReceiveFromISR+0x12c>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d022      	beq.n	8005488 <xQueueReceiveFromISR+0x12c>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	e01e      	b.n	8005488 <xQueueReceiveFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 800544a:	f000 fd35 	bl	8005eb8 <uxTaskGetNumberOfTasks>
 800544e:	62b8      	str	r0, [r7, #40]	; 0x28
 8005450:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005456:	429a      	cmp	r2, r3
 8005458:	d916      	bls.n	8005488 <xQueueReceiveFromISR+0x12c>
 800545a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800545e:	2b7f      	cmp	r3, #127	; 0x7f
 8005460:	d10a      	bne.n	8005478 <xQueueReceiveFromISR+0x11c>
        __asm volatile
 8005462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005466:	f383 8811 	msr	BASEPRI, r3
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	617b      	str	r3, [r7, #20]
    }
 8005474:	bf00      	nop
 8005476:	e7fe      	b.n	8005476 <xQueueReceiveFromISR+0x11a>
 8005478:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800547c:	3301      	adds	r3, #1
 800547e:	b2db      	uxtb	r3, r3
 8005480:	b25a      	sxtb	r2, r3
 8005482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8005488:	2301      	movs	r3, #1
 800548a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800548c:	e010      	b.n	80054b0 <xQueueReceiveFromISR+0x154>
        }
        else
        {
            xReturn = pdFAIL;
 800548e:	2300      	movs	r3, #0
 8005490:	63fb      	str	r3, [r7, #60]	; 0x3c
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8005492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005494:	4618      	mov	r0, r3
 8005496:	f004 fa87 	bl	80099a8 <SEGGER_SYSVIEW_ShrinkId>
 800549a:	4604      	mov	r4, r0
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	4618      	mov	r0, r3
 80054a0:	f004 fa82 	bl	80099a8 <SEGGER_SYSVIEW_ShrinkId>
 80054a4:	4602      	mov	r2, r0
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4621      	mov	r1, r4
 80054aa:	2062      	movs	r0, #98	; 0x62
 80054ac:	f003 fd1c 	bl	8008ee8 <SEGGER_SYSVIEW_RecordU32x3>
 80054b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b2:	613b      	str	r3, [r7, #16]
        __asm volatile
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	f383 8811 	msr	BASEPRI, r3
    }
 80054ba:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80054bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3744      	adds	r7, #68	; 0x44
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd90      	pop	{r4, r7, pc}

080054c6 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b084      	sub	sp, #16
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10a      	bne.n	80054ea <uxQueueMessagesWaiting+0x24>
        __asm volatile
 80054d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d8:	f383 8811 	msr	BASEPRI, r3
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	60bb      	str	r3, [r7, #8]
    }
 80054e6:	bf00      	nop
 80054e8:	e7fe      	b.n	80054e8 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 80054ea:	f002 fa0d 	bl	8007908 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f2:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80054f4:	f002 fa38 	bl	8007968 <vPortExitCritical>

    return uxReturn;
 80054f8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b086      	sub	sp, #24
 8005506:	af00      	add	r7, sp, #0
 8005508:	60f8      	str	r0, [r7, #12]
 800550a:	60b9      	str	r1, [r7, #8]
 800550c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800550e:	2300      	movs	r3, #0
 8005510:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10d      	bne.n	800553c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d14d      	bne.n	80055c4 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	4618      	mov	r0, r3
 800552e:	f001 f8ef 	bl	8006710 <xTaskPriorityDisinherit>
 8005532:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	609a      	str	r2, [r3, #8]
 800553a:	e043      	b.n	80055c4 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d119      	bne.n	8005576 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6858      	ldr	r0, [r3, #4]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	461a      	mov	r2, r3
 800554c:	68b9      	ldr	r1, [r7, #8]
 800554e:	f004 fbc3 	bl	8009cd8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555a:	441a      	add	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	429a      	cmp	r2, r3
 800556a:	d32b      	bcc.n	80055c4 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	605a      	str	r2, [r3, #4]
 8005574:	e026      	b.n	80055c4 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	68d8      	ldr	r0, [r3, #12]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	461a      	mov	r2, r3
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	f004 fba9 	bl	8009cd8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	68da      	ldr	r2, [r3, #12]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	425b      	negs	r3, r3
 8005590:	441a      	add	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d207      	bcs.n	80055b2 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	689a      	ldr	r2, [r3, #8]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	425b      	negs	r3, r3
 80055ac:	441a      	add	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d105      	bne.n	80055c4 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	3b01      	subs	r3, #1
 80055c2:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80055cc:	697b      	ldr	r3, [r7, #20]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b082      	sub	sp, #8
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d018      	beq.n	800561a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f0:	441a      	add	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d303      	bcc.n	800560a <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68d9      	ldr	r1, [r3, #12]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	461a      	mov	r2, r3
 8005614:	6838      	ldr	r0, [r7, #0]
 8005616:	f004 fb5f 	bl	8009cd8 <memcpy>
    }
}
 800561a:	bf00      	nop
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b084      	sub	sp, #16
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800562a:	f002 f96d 	bl	8007908 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005634:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005636:	e011      	b.n	800565c <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	2b00      	cmp	r3, #0
 800563e:	d012      	beq.n	8005666 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3324      	adds	r3, #36	; 0x24
 8005644:	4618      	mov	r0, r3
 8005646:	f000 fe33 	bl	80062b0 <xTaskRemoveFromEventList>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8005650:	f000 ff82 	bl	8006558 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005654:	7bfb      	ldrb	r3, [r7, #15]
 8005656:	3b01      	subs	r3, #1
 8005658:	b2db      	uxtb	r3, r3
 800565a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800565c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005660:	2b00      	cmp	r3, #0
 8005662:	dce9      	bgt.n	8005638 <prvUnlockQueue+0x16>
 8005664:	e000      	b.n	8005668 <prvUnlockQueue+0x46>
                    break;
 8005666:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	22ff      	movs	r2, #255	; 0xff
 800566c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005670:	f002 f97a 	bl	8007968 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005674:	f002 f948 	bl	8007908 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800567e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005680:	e011      	b.n	80056a6 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d012      	beq.n	80056b0 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	3310      	adds	r3, #16
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fe0e 	bl	80062b0 <xTaskRemoveFromEventList>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800569a:	f000 ff5d 	bl	8006558 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800569e:	7bbb      	ldrb	r3, [r7, #14]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80056a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	dce9      	bgt.n	8005682 <prvUnlockQueue+0x60>
 80056ae:	e000      	b.n	80056b2 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80056b0:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	22ff      	movs	r2, #255	; 0xff
 80056b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80056ba:	f002 f955 	bl	8007968 <vPortExitCritical>
}
 80056be:	bf00      	nop
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b084      	sub	sp, #16
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80056ce:	f002 f91b 	bl	8007908 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d102      	bne.n	80056e0 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80056da:	2301      	movs	r3, #1
 80056dc:	60fb      	str	r3, [r7, #12]
 80056de:	e001      	b.n	80056e4 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80056e0:	2300      	movs	r3, #0
 80056e2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80056e4:	f002 f940 	bl	8007968 <vPortExitCritical>

    return xReturn;
 80056e8:	68fb      	ldr	r3, [r7, #12]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b084      	sub	sp, #16
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80056fa:	f002 f905 	bl	8007908 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005706:	429a      	cmp	r2, r3
 8005708:	d102      	bne.n	8005710 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800570a:	2301      	movs	r3, #1
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	e001      	b.n	8005714 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005710:	2300      	movs	r3, #0
 8005712:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005714:	f002 f928 	bl	8007968 <vPortExitCritical>

    return xReturn;
 8005718:	68fb      	ldr	r3, [r7, #12]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005722:	b480      	push	{r7}
 8005724:	b087      	sub	sp, #28
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10a      	bne.n	800574a <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8005734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005738:	f383 8811 	msr	BASEPRI, r3
 800573c:	f3bf 8f6f 	isb	sy
 8005740:	f3bf 8f4f 	dsb	sy
 8005744:	60fb      	str	r3, [r7, #12]
    }
 8005746:	bf00      	nop
 8005748:	e7fe      	b.n	8005748 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005752:	429a      	cmp	r2, r3
 8005754:	d102      	bne.n	800575c <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8005756:	2301      	movs	r3, #1
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	e001      	b.n	8005760 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 800575c:	2300      	movs	r3, #0
 800575e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005760:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005762:	4618      	mov	r0, r3
 8005764:	371c      	adds	r7, #28
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
	...

08005770 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800577a:	2300      	movs	r3, #0
 800577c:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10a      	bne.n	800579a <vQueueAddToRegistry+0x2a>
        __asm volatile
 8005784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	60fb      	str	r3, [r7, #12]
    }
 8005796:	bf00      	nop
 8005798:	e7fe      	b.n	8005798 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d024      	beq.n	80057ea <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057a0:	2300      	movs	r3, #0
 80057a2:	617b      	str	r3, [r7, #20]
 80057a4:	e01e      	b.n	80057e4 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80057a6:	4a1c      	ldr	r2, [pc, #112]	; (8005818 <vQueueAddToRegistry+0xa8>)
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	00db      	lsls	r3, r3, #3
 80057ac:	4413      	add	r3, r2
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d105      	bne.n	80057c2 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	4a17      	ldr	r2, [pc, #92]	; (8005818 <vQueueAddToRegistry+0xa8>)
 80057bc:	4413      	add	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
                    break;
 80057c0:	e013      	b.n	80057ea <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10a      	bne.n	80057de <vQueueAddToRegistry+0x6e>
 80057c8:	4a13      	ldr	r2, [pc, #76]	; (8005818 <vQueueAddToRegistry+0xa8>)
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d104      	bne.n	80057de <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	4a0f      	ldr	r2, [pc, #60]	; (8005818 <vQueueAddToRegistry+0xa8>)
 80057da:	4413      	add	r3, r2
 80057dc:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	3301      	adds	r3, #1
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2b07      	cmp	r3, #7
 80057e8:	d9dd      	bls.n	80057a6 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00f      	beq.n	8005810 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4618      	mov	r0, r3
 8005800:	f004 f8d2 	bl	80099a8 <SEGGER_SYSVIEW_ShrinkId>
 8005804:	4601      	mov	r1, r0
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	461a      	mov	r2, r3
 800580a:	2071      	movs	r0, #113	; 0x71
 800580c:	f003 fb12 	bl	8008e34 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8005810:	bf00      	nop
 8005812:	3718      	adds	r7, #24
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	200001f0 	.word	0x200001f0

0800581c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800582c:	f002 f86c 	bl	8007908 <vPortEnterCritical>
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005836:	b25b      	sxtb	r3, r3
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583c:	d103      	bne.n	8005846 <vQueueWaitForMessageRestricted+0x2a>
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800584c:	b25b      	sxtb	r3, r3
 800584e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005852:	d103      	bne.n	800585c <vQueueWaitForMessageRestricted+0x40>
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800585c:	f002 f884 	bl	8007968 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005864:	2b00      	cmp	r3, #0
 8005866:	d106      	bne.n	8005876 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	3324      	adds	r3, #36	; 0x24
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	68b9      	ldr	r1, [r7, #8]
 8005870:	4618      	mov	r0, r3
 8005872:	f000 fcd5 	bl	8006220 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005876:	6978      	ldr	r0, [r7, #20]
 8005878:	f7ff fed3 	bl	8005622 <prvUnlockQueue>
    }
 800587c:	bf00      	nop
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005884:	b580      	push	{r7, lr}
 8005886:	b08c      	sub	sp, #48	; 0x30
 8005888:	af04      	add	r7, sp, #16
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	603b      	str	r3, [r7, #0]
 8005890:	4613      	mov	r3, r2
 8005892:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005894:	88fb      	ldrh	r3, [r7, #6]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4618      	mov	r0, r3
 800589a:	f002 f99d 	bl	8007bd8 <pvPortMalloc>
 800589e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d013      	beq.n	80058ce <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80058a6:	2058      	movs	r0, #88	; 0x58
 80058a8:	f002 f996 	bl	8007bd8 <pvPortMalloc>
 80058ac:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d008      	beq.n	80058c6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80058b4:	2258      	movs	r2, #88	; 0x58
 80058b6:	2100      	movs	r1, #0
 80058b8:	69f8      	ldr	r0, [r7, #28]
 80058ba:	f004 fa1b 	bl	8009cf4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	631a      	str	r2, [r3, #48]	; 0x30
 80058c4:	e005      	b.n	80058d2 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80058c6:	6978      	ldr	r0, [r7, #20]
 80058c8:	f002 fa40 	bl	8007d4c <vPortFree>
 80058cc:	e001      	b.n	80058d2 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80058ce:	2300      	movs	r3, #0
 80058d0:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d013      	beq.n	8005900 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058d8:	88fa      	ldrh	r2, [r7, #6]
 80058da:	2300      	movs	r3, #0
 80058dc:	9303      	str	r3, [sp, #12]
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	9302      	str	r3, [sp, #8]
 80058e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e4:	9301      	str	r3, [sp, #4]
 80058e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68b9      	ldr	r1, [r7, #8]
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 f80e 	bl	8005910 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80058f4:	69f8      	ldr	r0, [r7, #28]
 80058f6:	f000 f899 	bl	8005a2c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80058fa:	2301      	movs	r3, #1
 80058fc:	61bb      	str	r3, [r7, #24]
 80058fe:	e002      	b.n	8005906 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005900:	f04f 33ff 	mov.w	r3, #4294967295
 8005904:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005906:	69bb      	ldr	r3, [r7, #24]
    }
 8005908:	4618      	mov	r0, r3
 800590a:	3720      	adds	r7, #32
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b088      	sub	sp, #32
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800591e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005920:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	461a      	mov	r2, r3
 8005928:	21a5      	movs	r1, #165	; 0xa5
 800592a:	f004 f9e3 	bl	8009cf4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800592e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005938:	3b01      	subs	r3, #1
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	f023 0307 	bic.w	r3, r3, #7
 8005946:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	f003 0307 	and.w	r3, r3, #7
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00a      	beq.n	8005968 <prvInitialiseNewTask+0x58>
        __asm volatile
 8005952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	617b      	str	r3, [r7, #20]
    }
 8005964:	bf00      	nop
 8005966:	e7fe      	b.n	8005966 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d01e      	beq.n	80059ac <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800596e:	2300      	movs	r3, #0
 8005970:	61fb      	str	r3, [r7, #28]
 8005972:	e012      	b.n	800599a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	4413      	add	r3, r2
 800597a:	7819      	ldrb	r1, [r3, #0]
 800597c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	4413      	add	r3, r2
 8005982:	3334      	adds	r3, #52	; 0x34
 8005984:	460a      	mov	r2, r1
 8005986:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	4413      	add	r3, r2
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d006      	beq.n	80059a2 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	3301      	adds	r3, #1
 8005998:	61fb      	str	r3, [r7, #28]
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	2b09      	cmp	r3, #9
 800599e:	d9e9      	bls.n	8005974 <prvInitialiseNewTask+0x64>
 80059a0:	e000      	b.n	80059a4 <prvInitialiseNewTask+0x94>
            {
                break;
 80059a2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80059ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	d90a      	bls.n	80059c8 <prvInitialiseNewTask+0xb8>
        __asm volatile
 80059b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	613b      	str	r3, [r7, #16]
    }
 80059c4:	bf00      	nop
 80059c6:	e7fe      	b.n	80059c6 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80059c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ca:	2b04      	cmp	r3, #4
 80059cc:	d901      	bls.n	80059d2 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059ce:	2304      	movs	r3, #4
 80059d0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80059d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059d6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80059d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059dc:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e0:	3304      	adds	r3, #4
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7ff f846 	bl	8004a74 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ea:	3318      	adds	r3, #24
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7ff f841 	bl	8004a74 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fa:	f1c3 0205 	rsb	r2, r3, #5
 80059fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a00:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a06:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	68f9      	ldr	r1, [r7, #12]
 8005a0c:	69b8      	ldr	r0, [r7, #24]
 8005a0e:	f001 fe4b 	bl	80076a8 <pxPortInitialiseStack>
 8005a12:	4602      	mov	r2, r0
 8005a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a16:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d002      	beq.n	8005a24 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a22:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005a24:	bf00      	nop
 8005a26:	3720      	adds	r7, #32
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005a2c:	b5b0      	push	{r4, r5, r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005a34:	f001 ff68 	bl	8007908 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005a38:	4b4f      	ldr	r3, [pc, #316]	; (8005b78 <prvAddNewTaskToReadyList+0x14c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	4a4e      	ldr	r2, [pc, #312]	; (8005b78 <prvAddNewTaskToReadyList+0x14c>)
 8005a40:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005a42:	4b4e      	ldr	r3, [pc, #312]	; (8005b7c <prvAddNewTaskToReadyList+0x150>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d109      	bne.n	8005a5e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005a4a:	4a4c      	ldr	r2, [pc, #304]	; (8005b7c <prvAddNewTaskToReadyList+0x150>)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a50:	4b49      	ldr	r3, [pc, #292]	; (8005b78 <prvAddNewTaskToReadyList+0x14c>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d110      	bne.n	8005a7a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005a58:	f000 fda2 	bl	80065a0 <prvInitialiseTaskLists>
 8005a5c:	e00d      	b.n	8005a7a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005a5e:	4b48      	ldr	r3, [pc, #288]	; (8005b80 <prvAddNewTaskToReadyList+0x154>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d109      	bne.n	8005a7a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a66:	4b45      	ldr	r3, [pc, #276]	; (8005b7c <prvAddNewTaskToReadyList+0x150>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d802      	bhi.n	8005a7a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005a74:	4a41      	ldr	r2, [pc, #260]	; (8005b7c <prvAddNewTaskToReadyList+0x150>)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005a7a:	4b42      	ldr	r3, [pc, #264]	; (8005b84 <prvAddNewTaskToReadyList+0x158>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	4a40      	ldr	r2, [pc, #256]	; (8005b84 <prvAddNewTaskToReadyList+0x158>)
 8005a82:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a84:	4b3f      	ldr	r3, [pc, #252]	; (8005b84 <prvAddNewTaskToReadyList+0x158>)
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d016      	beq.n	8005ac0 <prvAddNewTaskToReadyList+0x94>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f003 fec1 	bl	800981c <SEGGER_SYSVIEW_OnTaskCreate>
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aaa:	461d      	mov	r5, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	461c      	mov	r4, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab6:	1ae3      	subs	r3, r4, r3
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	462b      	mov	r3, r5
 8005abc:	f002 fb08 	bl	80080d0 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f003 ff2e 	bl	8009924 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005acc:	2201      	movs	r2, #1
 8005ace:	409a      	lsls	r2, r3
 8005ad0:	4b2d      	ldr	r3, [pc, #180]	; (8005b88 <prvAddNewTaskToReadyList+0x15c>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	4a2c      	ldr	r2, [pc, #176]	; (8005b88 <prvAddNewTaskToReadyList+0x15c>)
 8005ad8:	6013      	str	r3, [r2, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ade:	492b      	ldr	r1, [pc, #172]	; (8005b8c <prvAddNewTaskToReadyList+0x160>)
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	440b      	add	r3, r1
 8005aea:	3304      	adds	r3, #4
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	60fb      	str	r3, [r7, #12]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	609a      	str	r2, [r3, #8]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	689a      	ldr	r2, [r3, #8]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	60da      	str	r2, [r3, #12]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	3204      	adds	r2, #4
 8005b06:	605a      	str	r2, [r3, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	1d1a      	adds	r2, r3, #4
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	609a      	str	r2, [r3, #8]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b14:	4613      	mov	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4a1b      	ldr	r2, [pc, #108]	; (8005b8c <prvAddNewTaskToReadyList+0x160>)
 8005b1e:	441a      	add	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	615a      	str	r2, [r3, #20]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b28:	4918      	ldr	r1, [pc, #96]	; (8005b8c <prvAddNewTaskToReadyList+0x160>)
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	440b      	add	r3, r1
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	1c59      	adds	r1, r3, #1
 8005b38:	4814      	ldr	r0, [pc, #80]	; (8005b8c <prvAddNewTaskToReadyList+0x160>)
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4403      	add	r3, r0
 8005b44:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005b46:	f001 ff0f 	bl	8007968 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005b4a:	4b0d      	ldr	r3, [pc, #52]	; (8005b80 <prvAddNewTaskToReadyList+0x154>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00e      	beq.n	8005b70 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b52:	4b0a      	ldr	r3, [pc, #40]	; (8005b7c <prvAddNewTaskToReadyList+0x150>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d207      	bcs.n	8005b70 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005b60:	4b0b      	ldr	r3, [pc, #44]	; (8005b90 <prvAddNewTaskToReadyList+0x164>)
 8005b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b66:	601a      	str	r2, [r3, #0]
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005b70:	bf00      	nop
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bdb0      	pop	{r4, r5, r7, pc}
 8005b78:	20000308 	.word	0x20000308
 8005b7c:	20000230 	.word	0x20000230
 8005b80:	20000314 	.word	0x20000314
 8005b84:	20000324 	.word	0x20000324
 8005b88:	20000310 	.word	0x20000310
 8005b8c:	20000234 	.word	0x20000234
 8005b90:	e000ed04 	.word	0xe000ed04

08005b94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8005b9a:	4b27      	ldr	r3, [pc, #156]	; (8005c38 <vTaskStartScheduler+0xa4>)
 8005b9c:	9301      	str	r3, [sp, #4]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	2282      	movs	r2, #130	; 0x82
 8005ba6:	4925      	ldr	r1, [pc, #148]	; (8005c3c <vTaskStartScheduler+0xa8>)
 8005ba8:	4825      	ldr	r0, [pc, #148]	; (8005c40 <vTaskStartScheduler+0xac>)
 8005baa:	f7ff fe6b 	bl	8005884 <xTaskCreate>
 8005bae:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d102      	bne.n	8005bbc <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8005bb6:	f001 fa01 	bl	8006fbc <xTimerCreateTimerTask>
 8005bba:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d124      	bne.n	8005c0c <vTaskStartScheduler+0x78>
        __asm volatile
 8005bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc6:	f383 8811 	msr	BASEPRI, r3
 8005bca:	f3bf 8f6f 	isb	sy
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	60bb      	str	r3, [r7, #8]
    }
 8005bd4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8005bd6:	4b1b      	ldr	r3, [pc, #108]	; (8005c44 <vTaskStartScheduler+0xb0>)
 8005bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bdc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005bde:	4b1a      	ldr	r3, [pc, #104]	; (8005c48 <vTaskStartScheduler+0xb4>)
 8005be0:	2201      	movs	r2, #1
 8005be2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005be4:	4b19      	ldr	r3, [pc, #100]	; (8005c4c <vTaskStartScheduler+0xb8>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8005bea:	4b19      	ldr	r3, [pc, #100]	; (8005c50 <vTaskStartScheduler+0xbc>)
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	4b12      	ldr	r3, [pc, #72]	; (8005c38 <vTaskStartScheduler+0xa4>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d102      	bne.n	8005bfc <vTaskStartScheduler+0x68>
 8005bf6:	f003 fdf5 	bl	80097e4 <SEGGER_SYSVIEW_OnIdle>
 8005bfa:	e004      	b.n	8005c06 <vTaskStartScheduler+0x72>
 8005bfc:	4b14      	ldr	r3, [pc, #80]	; (8005c50 <vTaskStartScheduler+0xbc>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f003 fe4d 	bl	80098a0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8005c06:	f001 fddd 	bl	80077c4 <xPortStartScheduler>
 8005c0a:	e00e      	b.n	8005c2a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c12:	d10a      	bne.n	8005c2a <vTaskStartScheduler+0x96>
        __asm volatile
 8005c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	607b      	str	r3, [r7, #4]
    }
 8005c26:	bf00      	nop
 8005c28:	e7fe      	b.n	8005c28 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005c2a:	4b0a      	ldr	r3, [pc, #40]	; (8005c54 <vTaskStartScheduler+0xc0>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
}
 8005c2e:	bf00      	nop
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	2000032c 	.word	0x2000032c
 8005c3c:	0800b374 	.word	0x0800b374
 8005c40:	08006571 	.word	0x08006571
 8005c44:	20000328 	.word	0x20000328
 8005c48:	20000314 	.word	0x20000314
 8005c4c:	2000030c 	.word	0x2000030c
 8005c50:	20000230 	.word	0x20000230
 8005c54:	20000020 	.word	0x20000020

08005c58 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005c5c:	4b04      	ldr	r3, [pc, #16]	; (8005c70 <vTaskSuspendAll+0x18>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3301      	adds	r3, #1
 8005c62:	4a03      	ldr	r2, [pc, #12]	; (8005c70 <vTaskSuspendAll+0x18>)
 8005c64:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005c66:	bf00      	nop
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	20000330 	.word	0x20000330

08005c74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b088      	sub	sp, #32
 8005c78:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005c82:	4b73      	ldr	r3, [pc, #460]	; (8005e50 <xTaskResumeAll+0x1dc>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10a      	bne.n	8005ca0 <xTaskResumeAll+0x2c>
        __asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	607b      	str	r3, [r7, #4]
    }
 8005c9c:	bf00      	nop
 8005c9e:	e7fe      	b.n	8005c9e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005ca0:	f001 fe32 	bl	8007908 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005ca4:	4b6a      	ldr	r3, [pc, #424]	; (8005e50 <xTaskResumeAll+0x1dc>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	4a69      	ldr	r2, [pc, #420]	; (8005e50 <xTaskResumeAll+0x1dc>)
 8005cac:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cae:	4b68      	ldr	r3, [pc, #416]	; (8005e50 <xTaskResumeAll+0x1dc>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f040 80c4 	bne.w	8005e40 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005cb8:	4b66      	ldr	r3, [pc, #408]	; (8005e54 <xTaskResumeAll+0x1e0>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 80bf 	beq.w	8005e40 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cc2:	e08e      	b.n	8005de2 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cc4:	4b64      	ldr	r3, [pc, #400]	; (8005e58 <xTaskResumeAll+0x1e4>)
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd0:	613b      	str	r3, [r7, #16]
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	69fa      	ldr	r2, [r7, #28]
 8005cd8:	6a12      	ldr	r2, [r2, #32]
 8005cda:	609a      	str	r2, [r3, #8]
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	69fa      	ldr	r2, [r7, #28]
 8005ce2:	69d2      	ldr	r2, [r2, #28]
 8005ce4:	605a      	str	r2, [r3, #4]
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	685a      	ldr	r2, [r3, #4]
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	3318      	adds	r3, #24
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d103      	bne.n	8005cfa <xTaskResumeAll+0x86>
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	6a1a      	ldr	r2, [r3, #32]
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	605a      	str	r2, [r3, #4]
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	629a      	str	r2, [r3, #40]	; 0x28
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	1e5a      	subs	r2, r3, #1
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	69fa      	ldr	r2, [r7, #28]
 8005d16:	68d2      	ldr	r2, [r2, #12]
 8005d18:	609a      	str	r2, [r3, #8]
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	69fa      	ldr	r2, [r7, #28]
 8005d20:	6892      	ldr	r2, [r2, #8]
 8005d22:	605a      	str	r2, [r3, #4]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d103      	bne.n	8005d38 <xTaskResumeAll+0xc4>
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	605a      	str	r2, [r3, #4]
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	615a      	str	r2, [r3, #20]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	1e5a      	subs	r2, r3, #1
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f003 fdea 	bl	8009924 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d54:	2201      	movs	r2, #1
 8005d56:	409a      	lsls	r2, r3
 8005d58:	4b40      	ldr	r3, [pc, #256]	; (8005e5c <xTaskResumeAll+0x1e8>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	4a3f      	ldr	r2, [pc, #252]	; (8005e5c <xTaskResumeAll+0x1e8>)
 8005d60:	6013      	str	r3, [r2, #0]
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d66:	493e      	ldr	r1, [pc, #248]	; (8005e60 <xTaskResumeAll+0x1ec>)
 8005d68:	4613      	mov	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	440b      	add	r3, r1
 8005d72:	3304      	adds	r3, #4
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	60bb      	str	r3, [r7, #8]
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	609a      	str	r2, [r3, #8]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	689a      	ldr	r2, [r3, #8]
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	60da      	str	r2, [r3, #12]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	69fa      	ldr	r2, [r7, #28]
 8005d8c:	3204      	adds	r2, #4
 8005d8e:	605a      	str	r2, [r3, #4]
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	1d1a      	adds	r2, r3, #4
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	609a      	str	r2, [r3, #8]
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4a2e      	ldr	r2, [pc, #184]	; (8005e60 <xTaskResumeAll+0x1ec>)
 8005da6:	441a      	add	r2, r3
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	615a      	str	r2, [r3, #20]
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db0:	492b      	ldr	r1, [pc, #172]	; (8005e60 <xTaskResumeAll+0x1ec>)
 8005db2:	4613      	mov	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4413      	add	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	440b      	add	r3, r1
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	1c59      	adds	r1, r3, #1
 8005dc0:	4827      	ldr	r0, [pc, #156]	; (8005e60 <xTaskResumeAll+0x1ec>)
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4403      	add	r3, r0
 8005dcc:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd2:	4b24      	ldr	r3, [pc, #144]	; (8005e64 <xTaskResumeAll+0x1f0>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d302      	bcc.n	8005de2 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8005ddc:	4b22      	ldr	r3, [pc, #136]	; (8005e68 <xTaskResumeAll+0x1f4>)
 8005dde:	2201      	movs	r2, #1
 8005de0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005de2:	4b1d      	ldr	r3, [pc, #116]	; (8005e58 <xTaskResumeAll+0x1e4>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f47f af6c 	bne.w	8005cc4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005df2:	f000 fc53 	bl	800669c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005df6:	4b1d      	ldr	r3, [pc, #116]	; (8005e6c <xTaskResumeAll+0x1f8>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d010      	beq.n	8005e24 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005e02:	f000 f865 	bl	8005ed0 <xTaskIncrementTick>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8005e0c:	4b16      	ldr	r3, [pc, #88]	; (8005e68 <xTaskResumeAll+0x1f4>)
 8005e0e:	2201      	movs	r2, #1
 8005e10:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	3b01      	subs	r3, #1
 8005e16:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1f1      	bne.n	8005e02 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8005e1e:	4b13      	ldr	r3, [pc, #76]	; (8005e6c <xTaskResumeAll+0x1f8>)
 8005e20:	2200      	movs	r2, #0
 8005e22:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005e24:	4b10      	ldr	r3, [pc, #64]	; (8005e68 <xTaskResumeAll+0x1f4>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d009      	beq.n	8005e40 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005e30:	4b0f      	ldr	r3, [pc, #60]	; (8005e70 <xTaskResumeAll+0x1fc>)
 8005e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005e40:	f001 fd92 	bl	8007968 <vPortExitCritical>

    return xAlreadyYielded;
 8005e44:	69bb      	ldr	r3, [r7, #24]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3720      	adds	r7, #32
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	20000330 	.word	0x20000330
 8005e54:	20000308 	.word	0x20000308
 8005e58:	200002c8 	.word	0x200002c8
 8005e5c:	20000310 	.word	0x20000310
 8005e60:	20000234 	.word	0x20000234
 8005e64:	20000230 	.word	0x20000230
 8005e68:	2000031c 	.word	0x2000031c
 8005e6c:	20000318 	.word	0x20000318
 8005e70:	e000ed04 	.word	0xe000ed04

08005e74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005e7a:	4b05      	ldr	r3, [pc, #20]	; (8005e90 <xTaskGetTickCount+0x1c>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005e80:	687b      	ldr	r3, [r7, #4]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	2000030c 	.word	0x2000030c

08005e94 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e9a:	f001 fe5d 	bl	8007b58 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8005ea2:	4b04      	ldr	r3, [pc, #16]	; (8005eb4 <xTaskGetTickCountFromISR+0x20>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005ea8:	683b      	ldr	r3, [r7, #0]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	2000030c 	.word	0x2000030c

08005eb8 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8005eb8:	b480      	push	{r7}
 8005eba:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8005ebc:	4b03      	ldr	r3, [pc, #12]	; (8005ecc <uxTaskGetNumberOfTasks+0x14>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	20000308 	.word	0x20000308

08005ed0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b08a      	sub	sp, #40	; 0x28
 8005ed4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005eda:	4b7f      	ldr	r3, [pc, #508]	; (80060d8 <xTaskIncrementTick+0x208>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f040 80f0 	bne.w	80060c4 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ee4:	4b7d      	ldr	r3, [pc, #500]	; (80060dc <xTaskIncrementTick+0x20c>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005eec:	4a7b      	ldr	r2, [pc, #492]	; (80060dc <xTaskIncrementTick+0x20c>)
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d120      	bne.n	8005f3a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005ef8:	4b79      	ldr	r3, [pc, #484]	; (80060e0 <xTaskIncrementTick+0x210>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00a      	beq.n	8005f18 <xTaskIncrementTick+0x48>
        __asm volatile
 8005f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f06:	f383 8811 	msr	BASEPRI, r3
 8005f0a:	f3bf 8f6f 	isb	sy
 8005f0e:	f3bf 8f4f 	dsb	sy
 8005f12:	607b      	str	r3, [r7, #4]
    }
 8005f14:	bf00      	nop
 8005f16:	e7fe      	b.n	8005f16 <xTaskIncrementTick+0x46>
 8005f18:	4b71      	ldr	r3, [pc, #452]	; (80060e0 <xTaskIncrementTick+0x210>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	61fb      	str	r3, [r7, #28]
 8005f1e:	4b71      	ldr	r3, [pc, #452]	; (80060e4 <xTaskIncrementTick+0x214>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a6f      	ldr	r2, [pc, #444]	; (80060e0 <xTaskIncrementTick+0x210>)
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	4a6f      	ldr	r2, [pc, #444]	; (80060e4 <xTaskIncrementTick+0x214>)
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	6013      	str	r3, [r2, #0]
 8005f2c:	4b6e      	ldr	r3, [pc, #440]	; (80060e8 <xTaskIncrementTick+0x218>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3301      	adds	r3, #1
 8005f32:	4a6d      	ldr	r2, [pc, #436]	; (80060e8 <xTaskIncrementTick+0x218>)
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	f000 fbb1 	bl	800669c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005f3a:	4b6c      	ldr	r3, [pc, #432]	; (80060ec <xTaskIncrementTick+0x21c>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6a3a      	ldr	r2, [r7, #32]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	f0c0 80aa 	bcc.w	800609a <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f46:	4b66      	ldr	r3, [pc, #408]	; (80060e0 <xTaskIncrementTick+0x210>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d104      	bne.n	8005f5a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f50:	4b66      	ldr	r3, [pc, #408]	; (80060ec <xTaskIncrementTick+0x21c>)
 8005f52:	f04f 32ff 	mov.w	r2, #4294967295
 8005f56:	601a      	str	r2, [r3, #0]
                    break;
 8005f58:	e09f      	b.n	800609a <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f5a:	4b61      	ldr	r3, [pc, #388]	; (80060e0 <xTaskIncrementTick+0x210>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8005f6a:	6a3a      	ldr	r2, [r7, #32]
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d203      	bcs.n	8005f7a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005f72:	4a5e      	ldr	r2, [pc, #376]	; (80060ec <xTaskIncrementTick+0x21c>)
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8005f78:	e08f      	b.n	800609a <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	68d2      	ldr	r2, [r2, #12]
 8005f88:	609a      	str	r2, [r3, #8]
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	6892      	ldr	r2, [r2, #8]
 8005f92:	605a      	str	r2, [r3, #4]
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d103      	bne.n	8005fa8 <xTaskIncrementTick+0xd8>
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	605a      	str	r2, [r3, #4]
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	2200      	movs	r2, #0
 8005fac:	615a      	str	r2, [r3, #20]
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	1e5a      	subs	r2, r3, #1
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d01e      	beq.n	8005ffe <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	6a12      	ldr	r2, [r2, #32]
 8005fce:	609a      	str	r2, [r3, #8]
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	69d2      	ldr	r2, [r2, #28]
 8005fd8:	605a      	str	r2, [r3, #4]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	3318      	adds	r3, #24
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d103      	bne.n	8005fee <xTaskIncrementTick+0x11e>
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	6a1a      	ldr	r2, [r3, #32]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	605a      	str	r2, [r3, #4]
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	629a      	str	r2, [r3, #40]	; 0x28
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	1e5a      	subs	r2, r3, #1
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	4618      	mov	r0, r3
 8006002:	f003 fc8f 	bl	8009924 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600a:	2201      	movs	r2, #1
 800600c:	409a      	lsls	r2, r3
 800600e:	4b38      	ldr	r3, [pc, #224]	; (80060f0 <xTaskIncrementTick+0x220>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4313      	orrs	r3, r2
 8006014:	4a36      	ldr	r2, [pc, #216]	; (80060f0 <xTaskIncrementTick+0x220>)
 8006016:	6013      	str	r3, [r2, #0]
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800601c:	4935      	ldr	r1, [pc, #212]	; (80060f4 <xTaskIncrementTick+0x224>)
 800601e:	4613      	mov	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	440b      	add	r3, r1
 8006028:	3304      	adds	r3, #4
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	60bb      	str	r3, [r7, #8]
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	609a      	str	r2, [r3, #8]
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	60da      	str	r2, [r3, #12]
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	3204      	adds	r2, #4
 8006044:	605a      	str	r2, [r3, #4]
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	1d1a      	adds	r2, r3, #4
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	609a      	str	r2, [r3, #8]
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006052:	4613      	mov	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	4a26      	ldr	r2, [pc, #152]	; (80060f4 <xTaskIncrementTick+0x224>)
 800605c:	441a      	add	r2, r3
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	615a      	str	r2, [r3, #20]
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006066:	4923      	ldr	r1, [pc, #140]	; (80060f4 <xTaskIncrementTick+0x224>)
 8006068:	4613      	mov	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	440b      	add	r3, r1
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	1c59      	adds	r1, r3, #1
 8006076:	481f      	ldr	r0, [pc, #124]	; (80060f4 <xTaskIncrementTick+0x224>)
 8006078:	4613      	mov	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4413      	add	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4403      	add	r3, r0
 8006082:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006088:	4b1b      	ldr	r3, [pc, #108]	; (80060f8 <xTaskIncrementTick+0x228>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608e:	429a      	cmp	r2, r3
 8006090:	f67f af59 	bls.w	8005f46 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8006094:	2301      	movs	r3, #1
 8006096:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006098:	e755      	b.n	8005f46 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800609a:	4b17      	ldr	r3, [pc, #92]	; (80060f8 <xTaskIncrementTick+0x228>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a0:	4914      	ldr	r1, [pc, #80]	; (80060f4 <xTaskIncrementTick+0x224>)
 80060a2:	4613      	mov	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	440b      	add	r3, r1
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d901      	bls.n	80060b6 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 80060b2:	2301      	movs	r3, #1
 80060b4:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80060b6:	4b11      	ldr	r3, [pc, #68]	; (80060fc <xTaskIncrementTick+0x22c>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d007      	beq.n	80060ce <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 80060be:	2301      	movs	r3, #1
 80060c0:	627b      	str	r3, [r7, #36]	; 0x24
 80060c2:	e004      	b.n	80060ce <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80060c4:	4b0e      	ldr	r3, [pc, #56]	; (8006100 <xTaskIncrementTick+0x230>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	3301      	adds	r3, #1
 80060ca:	4a0d      	ldr	r2, [pc, #52]	; (8006100 <xTaskIncrementTick+0x230>)
 80060cc:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3728      	adds	r7, #40	; 0x28
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	20000330 	.word	0x20000330
 80060dc:	2000030c 	.word	0x2000030c
 80060e0:	200002c0 	.word	0x200002c0
 80060e4:	200002c4 	.word	0x200002c4
 80060e8:	20000320 	.word	0x20000320
 80060ec:	20000328 	.word	0x20000328
 80060f0:	20000310 	.word	0x20000310
 80060f4:	20000234 	.word	0x20000234
 80060f8:	20000230 	.word	0x20000230
 80060fc:	2000031c 	.word	0x2000031c
 8006100:	20000318 	.word	0x20000318

08006104 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800610a:	4b2d      	ldr	r3, [pc, #180]	; (80061c0 <vTaskSwitchContext+0xbc>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006112:	4b2c      	ldr	r3, [pc, #176]	; (80061c4 <vTaskSwitchContext+0xc0>)
 8006114:	2201      	movs	r2, #1
 8006116:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8006118:	e04d      	b.n	80061b6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800611a:	4b2a      	ldr	r3, [pc, #168]	; (80061c4 <vTaskSwitchContext+0xc0>)
 800611c:	2200      	movs	r2, #0
 800611e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006120:	4b29      	ldr	r3, [pc, #164]	; (80061c8 <vTaskSwitchContext+0xc4>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	fab3 f383 	clz	r3, r3
 800612c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800612e:	7afb      	ldrb	r3, [r7, #11]
 8006130:	f1c3 031f 	rsb	r3, r3, #31
 8006134:	617b      	str	r3, [r7, #20]
 8006136:	4925      	ldr	r1, [pc, #148]	; (80061cc <vTaskSwitchContext+0xc8>)
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	4613      	mov	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	440b      	add	r3, r1
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10a      	bne.n	8006160 <vTaskSwitchContext+0x5c>
        __asm volatile
 800614a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	607b      	str	r3, [r7, #4]
    }
 800615c:	bf00      	nop
 800615e:	e7fe      	b.n	800615e <vTaskSwitchContext+0x5a>
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	4613      	mov	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4a18      	ldr	r2, [pc, #96]	; (80061cc <vTaskSwitchContext+0xc8>)
 800616c:	4413      	add	r3, r2
 800616e:	613b      	str	r3, [r7, #16]
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	605a      	str	r2, [r3, #4]
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	3308      	adds	r3, #8
 8006182:	429a      	cmp	r2, r3
 8006184:	d104      	bne.n	8006190 <vTaskSwitchContext+0x8c>
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	605a      	str	r2, [r3, #4]
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	4a0e      	ldr	r2, [pc, #56]	; (80061d0 <vTaskSwitchContext+0xcc>)
 8006198:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800619a:	4b0d      	ldr	r3, [pc, #52]	; (80061d0 <vTaskSwitchContext+0xcc>)
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	4b0d      	ldr	r3, [pc, #52]	; (80061d4 <vTaskSwitchContext+0xd0>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d102      	bne.n	80061ac <vTaskSwitchContext+0xa8>
 80061a6:	f003 fb1d 	bl	80097e4 <SEGGER_SYSVIEW_OnIdle>
}
 80061aa:	e004      	b.n	80061b6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80061ac:	4b08      	ldr	r3, [pc, #32]	; (80061d0 <vTaskSwitchContext+0xcc>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4618      	mov	r0, r3
 80061b2:	f003 fb75 	bl	80098a0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80061b6:	bf00      	nop
 80061b8:	3718      	adds	r7, #24
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	20000330 	.word	0x20000330
 80061c4:	2000031c 	.word	0x2000031c
 80061c8:	20000310 	.word	0x20000310
 80061cc:	20000234 	.word	0x20000234
 80061d0:	20000230 	.word	0x20000230
 80061d4:	2000032c 	.word	0x2000032c

080061d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10a      	bne.n	80061fe <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	60fb      	str	r3, [r7, #12]
    }
 80061fa:	bf00      	nop
 80061fc:	e7fe      	b.n	80061fc <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061fe:	4b07      	ldr	r3, [pc, #28]	; (800621c <vTaskPlaceOnEventList+0x44>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3318      	adds	r3, #24
 8006204:	4619      	mov	r1, r3
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7fe fc41 	bl	8004a8e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800620c:	2101      	movs	r1, #1
 800620e:	6838      	ldr	r0, [r7, #0]
 8006210:	f000 fe54 	bl	8006ebc <prvAddCurrentTaskToDelayedList>
}
 8006214:	bf00      	nop
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	20000230 	.word	0x20000230

08006220 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006220:	b580      	push	{r7, lr}
 8006222:	b086      	sub	sp, #24
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10a      	bne.n	8006248 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	613b      	str	r3, [r7, #16]
    }
 8006244:	bf00      	nop
 8006246:	e7fe      	b.n	8006246 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	617b      	str	r3, [r7, #20]
 800624e:	4b17      	ldr	r3, [pc, #92]	; (80062ac <vTaskPlaceOnEventListRestricted+0x8c>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	61da      	str	r2, [r3, #28]
 8006256:	4b15      	ldr	r3, [pc, #84]	; (80062ac <vTaskPlaceOnEventListRestricted+0x8c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	6892      	ldr	r2, [r2, #8]
 800625e:	621a      	str	r2, [r3, #32]
 8006260:	4b12      	ldr	r3, [pc, #72]	; (80062ac <vTaskPlaceOnEventListRestricted+0x8c>)
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	3218      	adds	r2, #24
 800626a:	605a      	str	r2, [r3, #4]
 800626c:	4b0f      	ldr	r3, [pc, #60]	; (80062ac <vTaskPlaceOnEventListRestricted+0x8c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f103 0218 	add.w	r2, r3, #24
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	609a      	str	r2, [r3, #8]
 8006278:	4b0c      	ldr	r3, [pc, #48]	; (80062ac <vTaskPlaceOnEventListRestricted+0x8c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	629a      	str	r2, [r3, #40]	; 0x28
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8006290:	f04f 33ff 	mov.w	r3, #4294967295
 8006294:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8006296:	2024      	movs	r0, #36	; 0x24
 8006298:	f002 fd72 	bl	8008d80 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800629c:	6879      	ldr	r1, [r7, #4]
 800629e:	68b8      	ldr	r0, [r7, #8]
 80062a0:	f000 fe0c 	bl	8006ebc <prvAddCurrentTaskToDelayedList>
    }
 80062a4:	bf00      	nop
 80062a6:	3718      	adds	r7, #24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	20000230 	.word	0x20000230

080062b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b08a      	sub	sp, #40	; 0x28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10a      	bne.n	80062dc <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	60fb      	str	r3, [r7, #12]
    }
 80062d8:	bf00      	nop
 80062da:	e7fe      	b.n	80062da <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80062dc:	6a3b      	ldr	r3, [r7, #32]
 80062de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e0:	61fb      	str	r3, [r7, #28]
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	6a3a      	ldr	r2, [r7, #32]
 80062e8:	6a12      	ldr	r2, [r2, #32]
 80062ea:	609a      	str	r2, [r3, #8]
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	6a3a      	ldr	r2, [r7, #32]
 80062f2:	69d2      	ldr	r2, [r2, #28]
 80062f4:	605a      	str	r2, [r3, #4]
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	3318      	adds	r3, #24
 80062fe:	429a      	cmp	r2, r3
 8006300:	d103      	bne.n	800630a <xTaskRemoveFromEventList+0x5a>
 8006302:	6a3b      	ldr	r3, [r7, #32]
 8006304:	6a1a      	ldr	r2, [r3, #32]
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	605a      	str	r2, [r3, #4]
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	2200      	movs	r2, #0
 800630e:	629a      	str	r2, [r3, #40]	; 0x28
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	1e5a      	subs	r2, r3, #1
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800631a:	4b4b      	ldr	r3, [pc, #300]	; (8006448 <xTaskRemoveFromEventList+0x198>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d162      	bne.n	80063e8 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	617b      	str	r3, [r7, #20]
 8006328:	6a3b      	ldr	r3, [r7, #32]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	6a3a      	ldr	r2, [r7, #32]
 800632e:	68d2      	ldr	r2, [r2, #12]
 8006330:	609a      	str	r2, [r3, #8]
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	6a3a      	ldr	r2, [r7, #32]
 8006338:	6892      	ldr	r2, [r2, #8]
 800633a:	605a      	str	r2, [r3, #4]
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	3304      	adds	r3, #4
 8006344:	429a      	cmp	r2, r3
 8006346:	d103      	bne.n	8006350 <xTaskRemoveFromEventList+0xa0>
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	68da      	ldr	r2, [r3, #12]
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	605a      	str	r2, [r3, #4]
 8006350:	6a3b      	ldr	r3, [r7, #32]
 8006352:	2200      	movs	r2, #0
 8006354:	615a      	str	r2, [r3, #20]
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	1e5a      	subs	r2, r3, #1
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	4618      	mov	r0, r3
 8006364:	f003 fade 	bl	8009924 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636c:	2201      	movs	r2, #1
 800636e:	409a      	lsls	r2, r3
 8006370:	4b36      	ldr	r3, [pc, #216]	; (800644c <xTaskRemoveFromEventList+0x19c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4313      	orrs	r3, r2
 8006376:	4a35      	ldr	r2, [pc, #212]	; (800644c <xTaskRemoveFromEventList+0x19c>)
 8006378:	6013      	str	r3, [r2, #0]
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800637e:	4934      	ldr	r1, [pc, #208]	; (8006450 <xTaskRemoveFromEventList+0x1a0>)
 8006380:	4613      	mov	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	440b      	add	r3, r1
 800638a:	3304      	adds	r3, #4
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	613b      	str	r3, [r7, #16]
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	609a      	str	r2, [r3, #8]
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	689a      	ldr	r2, [r3, #8]
 800639a:	6a3b      	ldr	r3, [r7, #32]
 800639c:	60da      	str	r2, [r3, #12]
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	6a3a      	ldr	r2, [r7, #32]
 80063a4:	3204      	adds	r2, #4
 80063a6:	605a      	str	r2, [r3, #4]
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	1d1a      	adds	r2, r3, #4
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	609a      	str	r2, [r3, #8]
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b4:	4613      	mov	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4a24      	ldr	r2, [pc, #144]	; (8006450 <xTaskRemoveFromEventList+0x1a0>)
 80063be:	441a      	add	r2, r3
 80063c0:	6a3b      	ldr	r3, [r7, #32]
 80063c2:	615a      	str	r2, [r3, #20]
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c8:	4921      	ldr	r1, [pc, #132]	; (8006450 <xTaskRemoveFromEventList+0x1a0>)
 80063ca:	4613      	mov	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	440b      	add	r3, r1
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	1c59      	adds	r1, r3, #1
 80063d8:	481d      	ldr	r0, [pc, #116]	; (8006450 <xTaskRemoveFromEventList+0x1a0>)
 80063da:	4613      	mov	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4403      	add	r3, r0
 80063e4:	6019      	str	r1, [r3, #0]
 80063e6:	e01b      	b.n	8006420 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80063e8:	4b1a      	ldr	r3, [pc, #104]	; (8006454 <xTaskRemoveFromEventList+0x1a4>)
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	61bb      	str	r3, [r7, #24]
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	61da      	str	r2, [r3, #28]
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	621a      	str	r2, [r3, #32]
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	6a3a      	ldr	r2, [r7, #32]
 8006402:	3218      	adds	r2, #24
 8006404:	605a      	str	r2, [r3, #4]
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	f103 0218 	add.w	r2, r3, #24
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	609a      	str	r2, [r3, #8]
 8006410:	6a3b      	ldr	r3, [r7, #32]
 8006412:	4a10      	ldr	r2, [pc, #64]	; (8006454 <xTaskRemoveFromEventList+0x1a4>)
 8006414:	629a      	str	r2, [r3, #40]	; 0x28
 8006416:	4b0f      	ldr	r3, [pc, #60]	; (8006454 <xTaskRemoveFromEventList+0x1a4>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	3301      	adds	r3, #1
 800641c:	4a0d      	ldr	r2, [pc, #52]	; (8006454 <xTaskRemoveFromEventList+0x1a4>)
 800641e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006420:	6a3b      	ldr	r3, [r7, #32]
 8006422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006424:	4b0c      	ldr	r3, [pc, #48]	; (8006458 <xTaskRemoveFromEventList+0x1a8>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642a:	429a      	cmp	r2, r3
 800642c:	d905      	bls.n	800643a <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800642e:	2301      	movs	r3, #1
 8006430:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006432:	4b0a      	ldr	r3, [pc, #40]	; (800645c <xTaskRemoveFromEventList+0x1ac>)
 8006434:	2201      	movs	r2, #1
 8006436:	601a      	str	r2, [r3, #0]
 8006438:	e001      	b.n	800643e <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 800643a:	2300      	movs	r3, #0
 800643c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006440:	4618      	mov	r0, r3
 8006442:	3728      	adds	r7, #40	; 0x28
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	20000330 	.word	0x20000330
 800644c:	20000310 	.word	0x20000310
 8006450:	20000234 	.word	0x20000234
 8006454:	200002c8 	.word	0x200002c8
 8006458:	20000230 	.word	0x20000230
 800645c:	2000031c 	.word	0x2000031c

08006460 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006468:	4b06      	ldr	r3, [pc, #24]	; (8006484 <vTaskInternalSetTimeOutState+0x24>)
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006470:	4b05      	ldr	r3, [pc, #20]	; (8006488 <vTaskInternalSetTimeOutState+0x28>)
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	605a      	str	r2, [r3, #4]
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	20000320 	.word	0x20000320
 8006488:	2000030c 	.word	0x2000030c

0800648c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b088      	sub	sp, #32
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10a      	bne.n	80064b2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800649c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	613b      	str	r3, [r7, #16]
    }
 80064ae:	bf00      	nop
 80064b0:	e7fe      	b.n	80064b0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10a      	bne.n	80064ce <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80064b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064bc:	f383 8811 	msr	BASEPRI, r3
 80064c0:	f3bf 8f6f 	isb	sy
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	60fb      	str	r3, [r7, #12]
    }
 80064ca:	bf00      	nop
 80064cc:	e7fe      	b.n	80064cc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80064ce:	f001 fa1b 	bl	8007908 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80064d2:	4b1f      	ldr	r3, [pc, #124]	; (8006550 <xTaskCheckForTimeOut+0xc4>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ea:	d102      	bne.n	80064f2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80064ec:	2300      	movs	r3, #0
 80064ee:	61fb      	str	r3, [r7, #28]
 80064f0:	e026      	b.n	8006540 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	4b17      	ldr	r3, [pc, #92]	; (8006554 <xTaskCheckForTimeOut+0xc8>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d00a      	beq.n	8006514 <xTaskCheckForTimeOut+0x88>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	429a      	cmp	r2, r3
 8006506:	d305      	bcc.n	8006514 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006508:	2301      	movs	r3, #1
 800650a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	2200      	movs	r2, #0
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	e015      	b.n	8006540 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	429a      	cmp	r2, r3
 800651c:	d20b      	bcs.n	8006536 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	1ad2      	subs	r2, r2, r3
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7ff ff98 	bl	8006460 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006530:	2300      	movs	r3, #0
 8006532:	61fb      	str	r3, [r7, #28]
 8006534:	e004      	b.n	8006540 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2200      	movs	r2, #0
 800653a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800653c:	2301      	movs	r3, #1
 800653e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006540:	f001 fa12 	bl	8007968 <vPortExitCritical>

    return xReturn;
 8006544:	69fb      	ldr	r3, [r7, #28]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3720      	adds	r7, #32
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	2000030c 	.word	0x2000030c
 8006554:	20000320 	.word	0x20000320

08006558 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006558:	b480      	push	{r7}
 800655a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800655c:	4b03      	ldr	r3, [pc, #12]	; (800656c <vTaskMissedYield+0x14>)
 800655e:	2201      	movs	r2, #1
 8006560:	601a      	str	r2, [r3, #0]
}
 8006562:	bf00      	nop
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	2000031c 	.word	0x2000031c

08006570 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006578:	f000 f852 	bl	8006620 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800657c:	4b06      	ldr	r3, [pc, #24]	; (8006598 <prvIdleTask+0x28>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d9f9      	bls.n	8006578 <prvIdleTask+0x8>
            {
                taskYIELD();
 8006584:	4b05      	ldr	r3, [pc, #20]	; (800659c <prvIdleTask+0x2c>)
 8006586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800658a:	601a      	str	r2, [r3, #0]
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006594:	e7f0      	b.n	8006578 <prvIdleTask+0x8>
 8006596:	bf00      	nop
 8006598:	20000234 	.word	0x20000234
 800659c:	e000ed04 	.word	0xe000ed04

080065a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065a6:	2300      	movs	r3, #0
 80065a8:	607b      	str	r3, [r7, #4]
 80065aa:	e00c      	b.n	80065c6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	4613      	mov	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4a12      	ldr	r2, [pc, #72]	; (8006600 <prvInitialiseTaskLists+0x60>)
 80065b8:	4413      	add	r3, r2
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7fe fa3a 	bl	8004a34 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	3301      	adds	r3, #1
 80065c4:	607b      	str	r3, [r7, #4]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	d9ef      	bls.n	80065ac <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80065cc:	480d      	ldr	r0, [pc, #52]	; (8006604 <prvInitialiseTaskLists+0x64>)
 80065ce:	f7fe fa31 	bl	8004a34 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80065d2:	480d      	ldr	r0, [pc, #52]	; (8006608 <prvInitialiseTaskLists+0x68>)
 80065d4:	f7fe fa2e 	bl	8004a34 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80065d8:	480c      	ldr	r0, [pc, #48]	; (800660c <prvInitialiseTaskLists+0x6c>)
 80065da:	f7fe fa2b 	bl	8004a34 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80065de:	480c      	ldr	r0, [pc, #48]	; (8006610 <prvInitialiseTaskLists+0x70>)
 80065e0:	f7fe fa28 	bl	8004a34 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80065e4:	480b      	ldr	r0, [pc, #44]	; (8006614 <prvInitialiseTaskLists+0x74>)
 80065e6:	f7fe fa25 	bl	8004a34 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80065ea:	4b0b      	ldr	r3, [pc, #44]	; (8006618 <prvInitialiseTaskLists+0x78>)
 80065ec:	4a05      	ldr	r2, [pc, #20]	; (8006604 <prvInitialiseTaskLists+0x64>)
 80065ee:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80065f0:	4b0a      	ldr	r3, [pc, #40]	; (800661c <prvInitialiseTaskLists+0x7c>)
 80065f2:	4a05      	ldr	r2, [pc, #20]	; (8006608 <prvInitialiseTaskLists+0x68>)
 80065f4:	601a      	str	r2, [r3, #0]
}
 80065f6:	bf00      	nop
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	20000234 	.word	0x20000234
 8006604:	20000298 	.word	0x20000298
 8006608:	200002ac 	.word	0x200002ac
 800660c:	200002c8 	.word	0x200002c8
 8006610:	200002dc 	.word	0x200002dc
 8006614:	200002f4 	.word	0x200002f4
 8006618:	200002c0 	.word	0x200002c0
 800661c:	200002c4 	.word	0x200002c4

08006620 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006626:	e019      	b.n	800665c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8006628:	f001 f96e 	bl	8007908 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800662c:	4b10      	ldr	r3, [pc, #64]	; (8006670 <prvCheckTasksWaitingTermination+0x50>)
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	3304      	adds	r3, #4
 8006638:	4618      	mov	r0, r3
 800663a:	f7fe fa61 	bl	8004b00 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800663e:	4b0d      	ldr	r3, [pc, #52]	; (8006674 <prvCheckTasksWaitingTermination+0x54>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3b01      	subs	r3, #1
 8006644:	4a0b      	ldr	r2, [pc, #44]	; (8006674 <prvCheckTasksWaitingTermination+0x54>)
 8006646:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8006648:	4b0b      	ldr	r3, [pc, #44]	; (8006678 <prvCheckTasksWaitingTermination+0x58>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3b01      	subs	r3, #1
 800664e:	4a0a      	ldr	r2, [pc, #40]	; (8006678 <prvCheckTasksWaitingTermination+0x58>)
 8006650:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8006652:	f001 f989 	bl	8007968 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f810 	bl	800667c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800665c:	4b06      	ldr	r3, [pc, #24]	; (8006678 <prvCheckTasksWaitingTermination+0x58>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1e1      	bne.n	8006628 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8006664:	bf00      	nop
 8006666:	bf00      	nop
 8006668:	3708      	adds	r7, #8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	200002dc 	.word	0x200002dc
 8006674:	20000308 	.word	0x20000308
 8006678:	200002f0 	.word	0x200002f0

0800667c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006688:	4618      	mov	r0, r3
 800668a:	f001 fb5f 	bl	8007d4c <vPortFree>
            vPortFree( pxTCB );
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f001 fb5c 	bl	8007d4c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006694:	bf00      	nop
 8006696:	3708      	adds	r7, #8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800669c:	b480      	push	{r7}
 800669e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066a0:	4b0a      	ldr	r3, [pc, #40]	; (80066cc <prvResetNextTaskUnblockTime+0x30>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d104      	bne.n	80066b4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80066aa:	4b09      	ldr	r3, [pc, #36]	; (80066d0 <prvResetNextTaskUnblockTime+0x34>)
 80066ac:	f04f 32ff 	mov.w	r2, #4294967295
 80066b0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80066b2:	e005      	b.n	80066c0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80066b4:	4b05      	ldr	r3, [pc, #20]	; (80066cc <prvResetNextTaskUnblockTime+0x30>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a04      	ldr	r2, [pc, #16]	; (80066d0 <prvResetNextTaskUnblockTime+0x34>)
 80066be:	6013      	str	r3, [r2, #0]
}
 80066c0:	bf00      	nop
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	200002c0 	.word	0x200002c0
 80066d0:	20000328 	.word	0x20000328

080066d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80066da:	4b0b      	ldr	r3, [pc, #44]	; (8006708 <xTaskGetSchedulerState+0x34>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d102      	bne.n	80066e8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80066e2:	2301      	movs	r3, #1
 80066e4:	607b      	str	r3, [r7, #4]
 80066e6:	e008      	b.n	80066fa <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066e8:	4b08      	ldr	r3, [pc, #32]	; (800670c <xTaskGetSchedulerState+0x38>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d102      	bne.n	80066f6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80066f0:	2302      	movs	r3, #2
 80066f2:	607b      	str	r3, [r7, #4]
 80066f4:	e001      	b.n	80066fa <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80066f6:	2300      	movs	r3, #0
 80066f8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80066fa:	687b      	ldr	r3, [r7, #4]
    }
 80066fc:	4618      	mov	r0, r3
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	20000314 	.word	0x20000314
 800670c:	20000330 	.word	0x20000330

08006710 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800671c:	2300      	movs	r3, #0
 800671e:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	f000 8095 	beq.w	8006852 <xTaskPriorityDisinherit+0x142>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006728:	4b4c      	ldr	r3, [pc, #304]	; (800685c <xTaskPriorityDisinherit+0x14c>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	429a      	cmp	r2, r3
 8006730:	d00a      	beq.n	8006748 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8006732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	613b      	str	r3, [r7, #16]
    }
 8006744:	bf00      	nop
 8006746:	e7fe      	b.n	8006746 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10a      	bne.n	8006766 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8006750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006754:	f383 8811 	msr	BASEPRI, r3
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	60fb      	str	r3, [r7, #12]
    }
 8006762:	bf00      	nop
 8006764:	e7fe      	b.n	8006764 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800676a:	1e5a      	subs	r2, r3, #1
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006778:	429a      	cmp	r2, r3
 800677a:	d06a      	beq.n	8006852 <xTaskPriorityDisinherit+0x142>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006780:	2b00      	cmp	r3, #0
 8006782:	d166      	bne.n	8006852 <xTaskPriorityDisinherit+0x142>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	3304      	adds	r3, #4
 8006788:	4618      	mov	r0, r3
 800678a:	f7fe f9b9 	bl	8004b00 <uxListRemove>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10a      	bne.n	80067aa <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006798:	2201      	movs	r2, #1
 800679a:	fa02 f303 	lsl.w	r3, r2, r3
 800679e:	43da      	mvns	r2, r3
 80067a0:	4b2f      	ldr	r3, [pc, #188]	; (8006860 <xTaskPriorityDisinherit+0x150>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4013      	ands	r3, r2
 80067a6:	4a2e      	ldr	r2, [pc, #184]	; (8006860 <xTaskPriorityDisinherit+0x150>)
 80067a8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4619      	mov	r1, r3
 80067ae:	204a      	movs	r0, #74	; 0x4a
 80067b0:	f002 fb04 	bl	8008dbc <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c0:	f1c3 0205 	rsb	r2, r3, #5
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f003 f8aa 	bl	8009924 <SEGGER_SYSVIEW_OnTaskStartReady>
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d4:	2201      	movs	r2, #1
 80067d6:	409a      	lsls	r2, r3
 80067d8:	4b21      	ldr	r3, [pc, #132]	; (8006860 <xTaskPriorityDisinherit+0x150>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4313      	orrs	r3, r2
 80067de:	4a20      	ldr	r2, [pc, #128]	; (8006860 <xTaskPriorityDisinherit+0x150>)
 80067e0:	6013      	str	r3, [r2, #0]
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e6:	491f      	ldr	r1, [pc, #124]	; (8006864 <xTaskPriorityDisinherit+0x154>)
 80067e8:	4613      	mov	r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	440b      	add	r3, r1
 80067f2:	3304      	adds	r3, #4
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	617b      	str	r3, [r7, #20]
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	609a      	str	r2, [r3, #8]
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	689a      	ldr	r2, [r3, #8]
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	60da      	str	r2, [r3, #12]
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	69ba      	ldr	r2, [r7, #24]
 800680c:	3204      	adds	r2, #4
 800680e:	605a      	str	r2, [r3, #4]
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	1d1a      	adds	r2, r3, #4
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	609a      	str	r2, [r3, #8]
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800681c:	4613      	mov	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4a0f      	ldr	r2, [pc, #60]	; (8006864 <xTaskPriorityDisinherit+0x154>)
 8006826:	441a      	add	r2, r3
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	615a      	str	r2, [r3, #20]
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006830:	490c      	ldr	r1, [pc, #48]	; (8006864 <xTaskPriorityDisinherit+0x154>)
 8006832:	4613      	mov	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	440b      	add	r3, r1
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	1c59      	adds	r1, r3, #1
 8006840:	4808      	ldr	r0, [pc, #32]	; (8006864 <xTaskPriorityDisinherit+0x154>)
 8006842:	4613      	mov	r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4403      	add	r3, r0
 800684c:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800684e:	2301      	movs	r3, #1
 8006850:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006852:	69fb      	ldr	r3, [r7, #28]
    }
 8006854:	4618      	mov	r0, r3
 8006856:	3720      	adds	r7, #32
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	20000230 	.word	0x20000230
 8006860:	20000310 	.word	0x20000310
 8006864:	20000234 	.word	0x20000234

08006868 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006868:	b580      	push	{r7, lr}
 800686a:	b088      	sub	sp, #32
 800686c:	af02      	add	r7, sp, #8
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
 8006874:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00a      	beq.n	8006892 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	613b      	str	r3, [r7, #16]
    }
 800688e:	bf00      	nop
 8006890:	e7fe      	b.n	8006890 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8006892:	f001 f839 	bl	8007908 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006896:	4b36      	ldr	r3, [pc, #216]	; (8006970 <xTaskGenericNotifyWait+0x108>)
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	4413      	add	r3, r2
 800689e:	3354      	adds	r3, #84	; 0x54
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d022      	beq.n	80068ee <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80068a8:	4b31      	ldr	r3, [pc, #196]	; (8006970 <xTaskGenericNotifyWait+0x108>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	3214      	adds	r2, #20
 80068b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	43d2      	mvns	r2, r2
 80068b8:	4011      	ands	r1, r2
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	3214      	adds	r2, #20
 80068be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80068c2:	4b2b      	ldr	r3, [pc, #172]	; (8006970 <xTaskGenericNotifyWait+0x108>)
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	4413      	add	r3, r2
 80068ca:	3354      	adds	r3, #84	; 0x54
 80068cc:	2201      	movs	r2, #1
 80068ce:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80068d0:	6a3b      	ldr	r3, [r7, #32]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00b      	beq.n	80068ee <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068d6:	2101      	movs	r1, #1
 80068d8:	6a38      	ldr	r0, [r7, #32]
 80068da:	f000 faef 	bl	8006ebc <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80068de:	4b25      	ldr	r3, [pc, #148]	; (8006974 <xTaskGenericNotifyWait+0x10c>)
 80068e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80068ee:	f001 f83b 	bl	8007968 <vPortExitCritical>

        taskENTER_CRITICAL();
 80068f2:	f001 f809 	bl	8007908 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT();
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	4613      	mov	r3, r2
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	68b9      	ldr	r1, [r7, #8]
 8006902:	2040      	movs	r0, #64	; 0x40
 8006904:	f002 fb66 	bl	8008fd4 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d007      	beq.n	800691e <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800690e:	4b18      	ldr	r3, [pc, #96]	; (8006970 <xTaskGenericNotifyWait+0x108>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	3214      	adds	r2, #20
 8006916:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800691e:	4b14      	ldr	r3, [pc, #80]	; (8006970 <xTaskGenericNotifyWait+0x108>)
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4413      	add	r3, r2
 8006926:	3354      	adds	r3, #84	; 0x54
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b02      	cmp	r3, #2
 800692e:	d002      	beq.n	8006936 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8006930:	2300      	movs	r3, #0
 8006932:	617b      	str	r3, [r7, #20]
 8006934:	e00e      	b.n	8006954 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8006936:	4b0e      	ldr	r3, [pc, #56]	; (8006970 <xTaskGenericNotifyWait+0x108>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	3214      	adds	r2, #20
 800693e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	43d2      	mvns	r2, r2
 8006946:	4011      	ands	r1, r2
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	3214      	adds	r2, #20
 800694c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8006950:	2301      	movs	r3, #1
 8006952:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8006954:	4b06      	ldr	r3, [pc, #24]	; (8006970 <xTaskGenericNotifyWait+0x108>)
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4413      	add	r3, r2
 800695c:	3354      	adds	r3, #84	; 0x54
 800695e:	2200      	movs	r2, #0
 8006960:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8006962:	f001 f801 	bl	8007968 <vPortExitCritical>

        return xReturn;
 8006966:	697b      	ldr	r3, [r7, #20]
    }
 8006968:	4618      	mov	r0, r3
 800696a:	3718      	adds	r7, #24
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	20000230 	.word	0x20000230
 8006974:	e000ed04 	.word	0xe000ed04

08006978 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006978:	b580      	push	{r7, lr}
 800697a:	b090      	sub	sp, #64	; 0x40
 800697c:	af02      	add	r7, sp, #8
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
 8006984:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8006986:	2301      	movs	r3, #1
 8006988:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00a      	beq.n	80069a6 <xTaskGenericNotify+0x2e>
        __asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	623b      	str	r3, [r7, #32]
    }
 80069a2:	bf00      	nop
 80069a4:	e7fe      	b.n	80069a4 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10a      	bne.n	80069c2 <xTaskGenericNotify+0x4a>
        __asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	61fb      	str	r3, [r7, #28]
    }
 80069be:	bf00      	nop
 80069c0:	e7fe      	b.n	80069c0 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 80069c6:	f000 ff9f 	bl	8007908 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80069ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d006      	beq.n	80069de <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80069d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	3214      	adds	r2, #20
 80069d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069dc:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80069de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	4413      	add	r3, r2
 80069e4:	3354      	adds	r3, #84	; 0x54
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80069ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	4413      	add	r3, r2
 80069f2:	3354      	adds	r3, #84	; 0x54
 80069f4:	2202      	movs	r2, #2
 80069f6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80069f8:	78fb      	ldrb	r3, [r7, #3]
 80069fa:	2b04      	cmp	r3, #4
 80069fc:	d83b      	bhi.n	8006a76 <xTaskGenericNotify+0xfe>
 80069fe:	a201      	add	r2, pc, #4	; (adr r2, 8006a04 <xTaskGenericNotify+0x8c>)
 8006a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a04:	08006a95 	.word	0x08006a95
 8006a08:	08006a19 	.word	0x08006a19
 8006a0c:	08006a35 	.word	0x08006a35
 8006a10:	08006a4d 	.word	0x08006a4d
 8006a14:	08006a5b 	.word	0x08006a5b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	3214      	adds	r2, #20
 8006a1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	ea42 0103 	orr.w	r1, r2, r3
 8006a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	3214      	adds	r2, #20
 8006a2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006a32:	e032      	b.n	8006a9a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	3214      	adds	r2, #20
 8006a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a3e:	1c59      	adds	r1, r3, #1
 8006a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	3214      	adds	r2, #20
 8006a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006a4a:	e026      	b.n	8006a9a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	3214      	adds	r2, #20
 8006a52:	6879      	ldr	r1, [r7, #4]
 8006a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006a58:	e01f      	b.n	8006a9a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006a5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d006      	beq.n	8006a70 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	3214      	adds	r2, #20
 8006a68:	6879      	ldr	r1, [r7, #4]
 8006a6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006a6e:	e014      	b.n	8006a9a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8006a70:	2300      	movs	r3, #0
 8006a72:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8006a74:	e011      	b.n	8006a9a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006a76:	4b55      	ldr	r3, [pc, #340]	; (8006bcc <xTaskGenericNotify+0x254>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00c      	beq.n	8006a98 <xTaskGenericNotify+0x120>
        __asm volatile
 8006a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a82:	f383 8811 	msr	BASEPRI, r3
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	f3bf 8f4f 	dsb	sy
 8006a8e:	61bb      	str	r3, [r7, #24]
    }
 8006a90:	bf00      	nop
 8006a92:	e7fe      	b.n	8006a92 <xTaskGenericNotify+0x11a>
                    break;
 8006a94:	bf00      	nop
 8006a96:	e000      	b.n	8006a9a <xTaskGenericNotify+0x122>

                    break;
 8006a98:	bf00      	nop
            }

            traceTASK_NOTIFY();
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f002 ff83 	bl	80099a8 <SEGGER_SYSVIEW_ShrinkId>
 8006aa2:	4601      	mov	r1, r0
 8006aa4:	78fa      	ldrb	r2, [r7, #3]
 8006aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	203e      	movs	r0, #62	; 0x3e
 8006ab0:	f002 fa90 	bl	8008fd4 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006ab4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d17f      	bne.n	8006bbc <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ac8:	68d2      	ldr	r2, [r2, #12]
 8006aca:	609a      	str	r2, [r3, #8]
 8006acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ad2:	6892      	ldr	r2, [r2, #8]
 8006ad4:	605a      	str	r2, [r3, #4]
 8006ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad8:	685a      	ldr	r2, [r3, #4]
 8006ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006adc:	3304      	adds	r3, #4
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d103      	bne.n	8006aea <xTaskGenericNotify+0x172>
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae4:	68da      	ldr	r2, [r3, #12]
 8006ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae8:	605a      	str	r2, [r3, #4]
 8006aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aec:	2200      	movs	r2, #0
 8006aee:	615a      	str	r2, [r3, #20]
 8006af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	1e5a      	subs	r2, r3, #1
 8006af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af8:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8006afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afc:	4618      	mov	r0, r3
 8006afe:	f002 ff11 	bl	8009924 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b06:	2201      	movs	r2, #1
 8006b08:	409a      	lsls	r2, r3
 8006b0a:	4b31      	ldr	r3, [pc, #196]	; (8006bd0 <xTaskGenericNotify+0x258>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	4a2f      	ldr	r2, [pc, #188]	; (8006bd0 <xTaskGenericNotify+0x258>)
 8006b12:	6013      	str	r3, [r2, #0]
 8006b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b18:	492e      	ldr	r1, [pc, #184]	; (8006bd4 <xTaskGenericNotify+0x25c>)
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	440b      	add	r3, r1
 8006b24:	3304      	adds	r3, #4
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	627b      	str	r3, [r7, #36]	; 0x24
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b2e:	609a      	str	r2, [r3, #8]
 8006b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b32:	689a      	ldr	r2, [r3, #8]
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	60da      	str	r2, [r3, #12]
 8006b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b3e:	3204      	adds	r2, #4
 8006b40:	605a      	str	r2, [r3, #4]
 8006b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b44:	1d1a      	adds	r2, r3, #4
 8006b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b48:	609a      	str	r2, [r3, #8]
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b4e:	4613      	mov	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4a1f      	ldr	r2, [pc, #124]	; (8006bd4 <xTaskGenericNotify+0x25c>)
 8006b58:	441a      	add	r2, r3
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	615a      	str	r2, [r3, #20]
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b62:	491c      	ldr	r1, [pc, #112]	; (8006bd4 <xTaskGenericNotify+0x25c>)
 8006b64:	4613      	mov	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	440b      	add	r3, r1
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	1c59      	adds	r1, r3, #1
 8006b72:	4818      	ldr	r0, [pc, #96]	; (8006bd4 <xTaskGenericNotify+0x25c>)
 8006b74:	4613      	mov	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4413      	add	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4403      	add	r3, r0
 8006b7e:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00a      	beq.n	8006b9e <xTaskGenericNotify+0x226>
        __asm volatile
 8006b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8c:	f383 8811 	msr	BASEPRI, r3
 8006b90:	f3bf 8f6f 	isb	sy
 8006b94:	f3bf 8f4f 	dsb	sy
 8006b98:	617b      	str	r3, [r7, #20]
    }
 8006b9a:	bf00      	nop
 8006b9c:	e7fe      	b.n	8006b9c <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba2:	4b0d      	ldr	r3, [pc, #52]	; (8006bd8 <xTaskGenericNotify+0x260>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d907      	bls.n	8006bbc <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8006bac:	4b0b      	ldr	r3, [pc, #44]	; (8006bdc <xTaskGenericNotify+0x264>)
 8006bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006bbc:	f000 fed4 	bl	8007968 <vPortExitCritical>

        return xReturn;
 8006bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3738      	adds	r7, #56	; 0x38
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	2000030c 	.word	0x2000030c
 8006bd0:	20000310 	.word	0x20000310
 8006bd4:	20000234 	.word	0x20000234
 8006bd8:	20000230 	.word	0x20000230
 8006bdc:	e000ed04 	.word	0xe000ed04

08006be0 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b094      	sub	sp, #80	; 0x50
 8006be4:	af02      	add	r7, sp, #8
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10a      	bne.n	8006c0e <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8006bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfc:	f383 8811 	msr	BASEPRI, r3
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006c0a:	bf00      	nop
 8006c0c:	e7fe      	b.n	8006c0c <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00a      	beq.n	8006c2a <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8006c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c18:	f383 8811 	msr	BASEPRI, r3
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8006c26:	bf00      	nop
 8006c28:	e7fe      	b.n	8006c28 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c2a:	f000 ff95 	bl	8007b58 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	643b      	str	r3, [r7, #64]	; 0x40
        __asm volatile
 8006c32:	f3ef 8211 	mrs	r2, BASEPRI
 8006c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3a:	f383 8811 	msr	BASEPRI, r3
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	623a      	str	r2, [r7, #32]
 8006c48:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8006c4a:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8006c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d006      	beq.n	8006c62 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c56:	68ba      	ldr	r2, [r7, #8]
 8006c58:	3214      	adds	r2, #20
 8006c5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c60:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006c62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	4413      	add	r3, r2
 8006c68:	3354      	adds	r3, #84	; 0x54
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006c70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	4413      	add	r3, r2
 8006c76:	3354      	adds	r3, #84	; 0x54
 8006c78:	2202      	movs	r2, #2
 8006c7a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006c7c:	78fb      	ldrb	r3, [r7, #3]
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	d83b      	bhi.n	8006cfa <xTaskGenericNotifyFromISR+0x11a>
 8006c82:	a201      	add	r2, pc, #4	; (adr r2, 8006c88 <xTaskGenericNotifyFromISR+0xa8>)
 8006c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c88:	08006d19 	.word	0x08006d19
 8006c8c:	08006c9d 	.word	0x08006c9d
 8006c90:	08006cb9 	.word	0x08006cb9
 8006c94:	08006cd1 	.word	0x08006cd1
 8006c98:	08006cdf 	.word	0x08006cdf
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	3214      	adds	r2, #20
 8006ca2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	ea42 0103 	orr.w	r1, r2, r3
 8006cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	3214      	adds	r2, #20
 8006cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006cb6:	e032      	b.n	8006d1e <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	3214      	adds	r2, #20
 8006cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cc2:	1c59      	adds	r1, r3, #1
 8006cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	3214      	adds	r2, #20
 8006cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006cce:	e026      	b.n	8006d1e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	3214      	adds	r2, #20
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006cdc:	e01f      	b.n	8006d1e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006cde:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d006      	beq.n	8006cf4 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	3214      	adds	r2, #20
 8006cec:	6879      	ldr	r1, [r7, #4]
 8006cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006cf2:	e014      	b.n	8006d1e <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8006cf8:	e011      	b.n	8006d1e <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006cfa:	4b69      	ldr	r3, [pc, #420]	; (8006ea0 <xTaskGenericNotifyFromISR+0x2c0>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00c      	beq.n	8006d1c <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8006d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	61bb      	str	r3, [r7, #24]
    }
 8006d14:	bf00      	nop
 8006d16:	e7fe      	b.n	8006d16 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8006d18:	bf00      	nop
 8006d1a:	e000      	b.n	8006d1e <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8006d1c:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR();
 8006d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d20:	4618      	mov	r0, r3
 8006d22:	f002 fe41 	bl	80099a8 <SEGGER_SYSVIEW_ShrinkId>
 8006d26:	78f9      	ldrb	r1, [r7, #3]
 8006d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d2c:	9201      	str	r2, [sp, #4]
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	460b      	mov	r3, r1
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	4601      	mov	r1, r0
 8006d36:	203f      	movs	r0, #63	; 0x3f
 8006d38:	f002 f9de 	bl	80090f8 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006d3c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	f040 80a2 	bne.w	8006e8a <xTaskGenericNotifyFromISR+0x2aa>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00a      	beq.n	8006d64 <xTaskGenericNotifyFromISR+0x184>
        __asm volatile
 8006d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	617b      	str	r3, [r7, #20]
    }
 8006d60:	bf00      	nop
 8006d62:	e7fe      	b.n	8006d62 <xTaskGenericNotifyFromISR+0x182>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d64:	4b4f      	ldr	r3, [pc, #316]	; (8006ea4 <xTaskGenericNotifyFromISR+0x2c4>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d162      	bne.n	8006e32 <xTaskGenericNotifyFromISR+0x252>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	633b      	str	r3, [r7, #48]	; 0x30
 8006d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d78:	68d2      	ldr	r2, [r2, #12]
 8006d7a:	609a      	str	r2, [r3, #8]
 8006d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d82:	6892      	ldr	r2, [r2, #8]
 8006d84:	605a      	str	r2, [r3, #4]
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	685a      	ldr	r2, [r3, #4]
 8006d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d103      	bne.n	8006d9a <xTaskGenericNotifyFromISR+0x1ba>
 8006d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d94:	68da      	ldr	r2, [r3, #12]
 8006d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d98:	605a      	str	r2, [r3, #4]
 8006d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	615a      	str	r2, [r3, #20]
 8006da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	1e5a      	subs	r2, r3, #1
 8006da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8006daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dac:	4618      	mov	r0, r3
 8006dae:	f002 fdb9 	bl	8009924 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db6:	2201      	movs	r2, #1
 8006db8:	409a      	lsls	r2, r3
 8006dba:	4b3b      	ldr	r3, [pc, #236]	; (8006ea8 <xTaskGenericNotifyFromISR+0x2c8>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	4a39      	ldr	r2, [pc, #228]	; (8006ea8 <xTaskGenericNotifyFromISR+0x2c8>)
 8006dc2:	6013      	str	r3, [r2, #0]
 8006dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc8:	4938      	ldr	r1, [pc, #224]	; (8006eac <xTaskGenericNotifyFromISR+0x2cc>)
 8006dca:	4613      	mov	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	440b      	add	r3, r1
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dde:	609a      	str	r2, [r3, #8]
 8006de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de2:	689a      	ldr	r2, [r3, #8]
 8006de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de6:	60da      	str	r2, [r3, #12]
 8006de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006dee:	3204      	adds	r2, #4
 8006df0:	605a      	str	r2, [r3, #4]
 8006df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006df4:	1d1a      	adds	r2, r3, #4
 8006df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df8:	609a      	str	r2, [r3, #8]
 8006dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dfe:	4613      	mov	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4a29      	ldr	r2, [pc, #164]	; (8006eac <xTaskGenericNotifyFromISR+0x2cc>)
 8006e08:	441a      	add	r2, r3
 8006e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e0c:	615a      	str	r2, [r3, #20]
 8006e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e12:	4926      	ldr	r1, [pc, #152]	; (8006eac <xTaskGenericNotifyFromISR+0x2cc>)
 8006e14:	4613      	mov	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	440b      	add	r3, r1
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	1c59      	adds	r1, r3, #1
 8006e22:	4822      	ldr	r0, [pc, #136]	; (8006eac <xTaskGenericNotifyFromISR+0x2cc>)
 8006e24:	4613      	mov	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4403      	add	r3, r0
 8006e2e:	6019      	str	r1, [r3, #0]
 8006e30:	e01b      	b.n	8006e6a <xTaskGenericNotifyFromISR+0x28a>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006e32:	4b1f      	ldr	r3, [pc, #124]	; (8006eb0 <xTaskGenericNotifyFromISR+0x2d0>)
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	637b      	str	r3, [r7, #52]	; 0x34
 8006e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e3c:	61da      	str	r2, [r3, #28]
 8006e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e40:	689a      	ldr	r2, [r3, #8]
 8006e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e44:	621a      	str	r2, [r3, #32]
 8006e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e4c:	3218      	adds	r2, #24
 8006e4e:	605a      	str	r2, [r3, #4]
 8006e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e52:	f103 0218 	add.w	r2, r3, #24
 8006e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e58:	609a      	str	r2, [r3, #8]
 8006e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e5c:	4a14      	ldr	r2, [pc, #80]	; (8006eb0 <xTaskGenericNotifyFromISR+0x2d0>)
 8006e5e:	629a      	str	r2, [r3, #40]	; 0x28
 8006e60:	4b13      	ldr	r3, [pc, #76]	; (8006eb0 <xTaskGenericNotifyFromISR+0x2d0>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3301      	adds	r3, #1
 8006e66:	4a12      	ldr	r2, [pc, #72]	; (8006eb0 <xTaskGenericNotifyFromISR+0x2d0>)
 8006e68:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e6e:	4b11      	ldr	r3, [pc, #68]	; (8006eb4 <xTaskGenericNotifyFromISR+0x2d4>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d908      	bls.n	8006e8a <xTaskGenericNotifyFromISR+0x2aa>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d002      	beq.n	8006e84 <xTaskGenericNotifyFromISR+0x2a4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e80:	2201      	movs	r2, #1
 8006e82:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8006e84:	4b0c      	ldr	r3, [pc, #48]	; (8006eb8 <xTaskGenericNotifyFromISR+0x2d8>)
 8006e86:	2201      	movs	r2, #1
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e8c:	613b      	str	r3, [r7, #16]
        __asm volatile
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	f383 8811 	msr	BASEPRI, r3
    }
 8006e94:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8006e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3748      	adds	r7, #72	; 0x48
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	2000030c 	.word	0x2000030c
 8006ea4:	20000330 	.word	0x20000330
 8006ea8:	20000310 	.word	0x20000310
 8006eac:	20000234 	.word	0x20000234
 8006eb0:	200002c8 	.word	0x200002c8
 8006eb4:	20000230 	.word	0x20000230
 8006eb8:	2000031c 	.word	0x2000031c

08006ebc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006ec6:	4b36      	ldr	r3, [pc, #216]	; (8006fa0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ecc:	4b35      	ldr	r3, [pc, #212]	; (8006fa4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fd fe14 	bl	8004b00 <uxListRemove>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10b      	bne.n	8006ef6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006ede:	4b31      	ldr	r3, [pc, #196]	; (8006fa4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eea:	43da      	mvns	r2, r3
 8006eec:	4b2e      	ldr	r3, [pc, #184]	; (8006fa8 <prvAddCurrentTaskToDelayedList+0xec>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	4a2d      	ldr	r2, [pc, #180]	; (8006fa8 <prvAddCurrentTaskToDelayedList+0xec>)
 8006ef4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006efc:	d124      	bne.n	8006f48 <prvAddCurrentTaskToDelayedList+0x8c>
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d021      	beq.n	8006f48 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f04:	4b29      	ldr	r3, [pc, #164]	; (8006fac <prvAddCurrentTaskToDelayedList+0xf0>)
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	613b      	str	r3, [r7, #16]
 8006f0a:	4b26      	ldr	r3, [pc, #152]	; (8006fa4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	609a      	str	r2, [r3, #8]
 8006f12:	4b24      	ldr	r3, [pc, #144]	; (8006fa4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	6892      	ldr	r2, [r2, #8]
 8006f1a:	60da      	str	r2, [r3, #12]
 8006f1c:	4b21      	ldr	r3, [pc, #132]	; (8006fa4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	3204      	adds	r2, #4
 8006f26:	605a      	str	r2, [r3, #4]
 8006f28:	4b1e      	ldr	r3, [pc, #120]	; (8006fa4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	1d1a      	adds	r2, r3, #4
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	609a      	str	r2, [r3, #8]
 8006f32:	4b1c      	ldr	r3, [pc, #112]	; (8006fa4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a1d      	ldr	r2, [pc, #116]	; (8006fac <prvAddCurrentTaskToDelayedList+0xf0>)
 8006f38:	615a      	str	r2, [r3, #20]
 8006f3a:	4b1c      	ldr	r3, [pc, #112]	; (8006fac <prvAddCurrentTaskToDelayedList+0xf0>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	4a1a      	ldr	r2, [pc, #104]	; (8006fac <prvAddCurrentTaskToDelayedList+0xf0>)
 8006f42:	6013      	str	r3, [r2, #0]
 8006f44:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006f46:	e026      	b.n	8006f96 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f50:	4b14      	ldr	r3, [pc, #80]	; (8006fa4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d209      	bcs.n	8006f74 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f60:	4b13      	ldr	r3, [pc, #76]	; (8006fb0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	4b0f      	ldr	r3, [pc, #60]	; (8006fa4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3304      	adds	r3, #4
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	f7fd fd8e 	bl	8004a8e <vListInsert>
}
 8006f72:	e010      	b.n	8006f96 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f74:	4b0f      	ldr	r3, [pc, #60]	; (8006fb4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	4b0a      	ldr	r3, [pc, #40]	; (8006fa4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	3304      	adds	r3, #4
 8006f7e:	4619      	mov	r1, r3
 8006f80:	4610      	mov	r0, r2
 8006f82:	f7fd fd84 	bl	8004a8e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8006f86:	4b0c      	ldr	r3, [pc, #48]	; (8006fb8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d202      	bcs.n	8006f96 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8006f90:	4a09      	ldr	r2, [pc, #36]	; (8006fb8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6013      	str	r3, [r2, #0]
}
 8006f96:	bf00      	nop
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	2000030c 	.word	0x2000030c
 8006fa4:	20000230 	.word	0x20000230
 8006fa8:	20000310 	.word	0x20000310
 8006fac:	200002f4 	.word	0x200002f4
 8006fb0:	200002c4 	.word	0x200002c4
 8006fb4:	200002c0 	.word	0x200002c0
 8006fb8:	20000328 	.word	0x20000328

08006fbc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006fc6:	f000 faef 	bl	80075a8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006fca:	4b11      	ldr	r3, [pc, #68]	; (8007010 <xTimerCreateTimerTask+0x54>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00b      	beq.n	8006fea <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8006fd2:	4b10      	ldr	r3, [pc, #64]	; (8007014 <xTimerCreateTimerTask+0x58>)
 8006fd4:	9301      	str	r3, [sp, #4]
 8006fd6:	2304      	movs	r3, #4
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	2300      	movs	r3, #0
 8006fdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006fe0:	490d      	ldr	r1, [pc, #52]	; (8007018 <xTimerCreateTimerTask+0x5c>)
 8006fe2:	480e      	ldr	r0, [pc, #56]	; (800701c <xTimerCreateTimerTask+0x60>)
 8006fe4:	f7fe fc4e 	bl	8005884 <xTaskCreate>
 8006fe8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d10a      	bne.n	8007006 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	603b      	str	r3, [r7, #0]
    }
 8007002:	bf00      	nop
 8007004:	e7fe      	b.n	8007004 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8007006:	687b      	ldr	r3, [r7, #4]
    }
 8007008:	4618      	mov	r0, r3
 800700a:	3708      	adds	r7, #8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	20000364 	.word	0x20000364
 8007014:	20000368 	.word	0x20000368
 8007018:	0800b37c 	.word	0x0800b37c
 800701c:	08007215 	.word	0x08007215

08007020 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8007020:	b580      	push	{r7, lr}
 8007022:	b088      	sub	sp, #32
 8007024:	af02      	add	r7, sp, #8
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
 800702c:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800702e:	202c      	movs	r0, #44	; 0x2c
 8007030:	f000 fdd2 	bl	8007bd8 <pvPortMalloc>
 8007034:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00d      	beq.n	8007058 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	9301      	str	r3, [sp, #4]
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	9300      	str	r3, [sp, #0]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	68b9      	ldr	r1, [r7, #8]
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f000 f805 	bl	8007062 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8007058:	697b      	ldr	r3, [r7, #20]
        }
 800705a:	4618      	mov	r0, r3
 800705c:	3718      	adds	r7, #24
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8007062:	b580      	push	{r7, lr}
 8007064:	b086      	sub	sp, #24
 8007066:	af00      	add	r7, sp, #0
 8007068:	60f8      	str	r0, [r7, #12]
 800706a:	60b9      	str	r1, [r7, #8]
 800706c:	607a      	str	r2, [r7, #4]
 800706e:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10a      	bne.n	800708c <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8007076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	617b      	str	r3, [r7, #20]
    }
 8007088:	bf00      	nop
 800708a:	e7fe      	b.n	800708a <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 800708c:	f000 fa8c 	bl	80075a8 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 800709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	6a3a      	ldr	r2, [r7, #32]
 80070a6:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	3304      	adds	r3, #4
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fd fce1 	bl	8004a74 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d008      	beq.n	80070ca <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80070b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070be:	f043 0304 	orr.w	r3, r3, #4
 80070c2:	b2da      	uxtb	r2, r3
 80070c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 80070ca:	bf00      	nop
 80070cc:	3718      	adds	r7, #24
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
	...

080070d4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b08a      	sub	sp, #40	; 0x28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
 80070e0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80070e2:	2300      	movs	r3, #0
 80070e4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10a      	bne.n	8007102 <xTimerGenericCommand+0x2e>
        __asm volatile
 80070ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	623b      	str	r3, [r7, #32]
    }
 80070fe:	bf00      	nop
 8007100:	e7fe      	b.n	8007100 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8007102:	4b1a      	ldr	r3, [pc, #104]	; (800716c <xTimerGenericCommand+0x98>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d02a      	beq.n	8007160 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2b05      	cmp	r3, #5
 800711a:	dc18      	bgt.n	800714e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800711c:	f7ff fada 	bl	80066d4 <xTaskGetSchedulerState>
 8007120:	4603      	mov	r3, r0
 8007122:	2b02      	cmp	r3, #2
 8007124:	d109      	bne.n	800713a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007126:	4b11      	ldr	r3, [pc, #68]	; (800716c <xTimerGenericCommand+0x98>)
 8007128:	6818      	ldr	r0, [r3, #0]
 800712a:	f107 0114 	add.w	r1, r7, #20
 800712e:	2300      	movs	r3, #0
 8007130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007132:	f7fd fe17 	bl	8004d64 <xQueueGenericSend>
 8007136:	6278      	str	r0, [r7, #36]	; 0x24
 8007138:	e012      	b.n	8007160 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800713a:	4b0c      	ldr	r3, [pc, #48]	; (800716c <xTimerGenericCommand+0x98>)
 800713c:	6818      	ldr	r0, [r3, #0]
 800713e:	f107 0114 	add.w	r1, r7, #20
 8007142:	2300      	movs	r3, #0
 8007144:	2200      	movs	r2, #0
 8007146:	f7fd fe0d 	bl	8004d64 <xQueueGenericSend>
 800714a:	6278      	str	r0, [r7, #36]	; 0x24
 800714c:	e008      	b.n	8007160 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800714e:	4b07      	ldr	r3, [pc, #28]	; (800716c <xTimerGenericCommand+0x98>)
 8007150:	6818      	ldr	r0, [r3, #0]
 8007152:	f107 0114 	add.w	r1, r7, #20
 8007156:	2300      	movs	r3, #0
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	f7fd ff29 	bl	8004fb0 <xQueueGenericSendFromISR>
 800715e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8007162:	4618      	mov	r0, r3
 8007164:	3728      	adds	r7, #40	; 0x28
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	20000364 	.word	0x20000364

08007170 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800717c:	e008      	b.n	8007190 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	4413      	add	r3, r2
 8007186:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6a1b      	ldr	r3, [r3, #32]
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	699a      	ldr	r2, [r3, #24]
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	18d1      	adds	r1, r2, r3
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f000 f8dd 	bl	800735c <prvInsertTimerInActiveList>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1ea      	bne.n	800717e <prvReloadTimer+0xe>
        }
    }
 80071a8:	bf00      	nop
 80071aa:	bf00      	nop
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
	...

080071b4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071be:	4b14      	ldr	r3, [pc, #80]	; (8007210 <prvProcessExpiredTimer+0x5c>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	3304      	adds	r3, #4
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7fd fc97 	bl	8004b00 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071d8:	f003 0304 	and.w	r3, r3, #4
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d005      	beq.n	80071ec <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80071e0:	683a      	ldr	r2, [r7, #0]
 80071e2:	6879      	ldr	r1, [r7, #4]
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f7ff ffc3 	bl	8007170 <prvReloadTimer>
 80071ea:	e008      	b.n	80071fe <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071f2:	f023 0301 	bic.w	r3, r3, #1
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	4798      	blx	r3
    }
 8007206:	bf00      	nop
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	2000035c 	.word	0x2000035c

08007214 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800721c:	f107 0308 	add.w	r3, r7, #8
 8007220:	4618      	mov	r0, r3
 8007222:	f000 f857 	bl	80072d4 <prvGetNextExpireTime>
 8007226:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	4619      	mov	r1, r3
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f000 f803 	bl	8007238 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007232:	f000 f8d5 	bl	80073e0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007236:	e7f1      	b.n	800721c <prvTimerTask+0x8>

08007238 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007242:	f7fe fd09 	bl	8005c58 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007246:	f107 0308 	add.w	r3, r7, #8
 800724a:	4618      	mov	r0, r3
 800724c:	f000 f866 	bl	800731c <prvSampleTimeNow>
 8007250:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d130      	bne.n	80072ba <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10a      	bne.n	8007274 <prvProcessTimerOrBlockTask+0x3c>
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	429a      	cmp	r2, r3
 8007264:	d806      	bhi.n	8007274 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8007266:	f7fe fd05 	bl	8005c74 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800726a:	68f9      	ldr	r1, [r7, #12]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f7ff ffa1 	bl	80071b4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007272:	e024      	b.n	80072be <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d008      	beq.n	800728c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800727a:	4b13      	ldr	r3, [pc, #76]	; (80072c8 <prvProcessTimerOrBlockTask+0x90>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <prvProcessTimerOrBlockTask+0x50>
 8007284:	2301      	movs	r3, #1
 8007286:	e000      	b.n	800728a <prvProcessTimerOrBlockTask+0x52>
 8007288:	2300      	movs	r3, #0
 800728a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800728c:	4b0f      	ldr	r3, [pc, #60]	; (80072cc <prvProcessTimerOrBlockTask+0x94>)
 800728e:	6818      	ldr	r0, [r3, #0]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	4619      	mov	r1, r3
 800729a:	f7fe fabf 	bl	800581c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800729e:	f7fe fce9 	bl	8005c74 <xTaskResumeAll>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10a      	bne.n	80072be <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80072a8:	4b09      	ldr	r3, [pc, #36]	; (80072d0 <prvProcessTimerOrBlockTask+0x98>)
 80072aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072ae:	601a      	str	r2, [r3, #0]
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	f3bf 8f6f 	isb	sy
    }
 80072b8:	e001      	b.n	80072be <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80072ba:	f7fe fcdb 	bl	8005c74 <xTaskResumeAll>
    }
 80072be:	bf00      	nop
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	20000360 	.word	0x20000360
 80072cc:	20000364 	.word	0x20000364
 80072d0:	e000ed04 	.word	0xe000ed04

080072d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80072dc:	4b0e      	ldr	r3, [pc, #56]	; (8007318 <prvGetNextExpireTime+0x44>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <prvGetNextExpireTime+0x16>
 80072e6:	2201      	movs	r2, #1
 80072e8:	e000      	b.n	80072ec <prvGetNextExpireTime+0x18>
 80072ea:	2200      	movs	r2, #0
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d105      	bne.n	8007304 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072f8:	4b07      	ldr	r3, [pc, #28]	; (8007318 <prvGetNextExpireTime+0x44>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	60fb      	str	r3, [r7, #12]
 8007302:	e001      	b.n	8007308 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007304:	2300      	movs	r3, #0
 8007306:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007308:	68fb      	ldr	r3, [r7, #12]
    }
 800730a:	4618      	mov	r0, r3
 800730c:	3714      	adds	r7, #20
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	2000035c 	.word	0x2000035c

0800731c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007324:	f7fe fda6 	bl	8005e74 <xTaskGetTickCount>
 8007328:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800732a:	4b0b      	ldr	r3, [pc, #44]	; (8007358 <prvSampleTimeNow+0x3c>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	429a      	cmp	r2, r3
 8007332:	d205      	bcs.n	8007340 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007334:	f000 f912 	bl	800755c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	e002      	b.n	8007346 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8007346:	4a04      	ldr	r2, [pc, #16]	; (8007358 <prvSampleTimeNow+0x3c>)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800734c:	68fb      	ldr	r3, [r7, #12]
    }
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	2000036c 	.word	0x2000036c

0800735c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
 8007368:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800736a:	2300      	movs	r3, #0
 800736c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	429a      	cmp	r2, r3
 8007380:	d812      	bhi.n	80073a8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	1ad2      	subs	r2, r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	429a      	cmp	r2, r3
 800738e:	d302      	bcc.n	8007396 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007390:	2301      	movs	r3, #1
 8007392:	617b      	str	r3, [r7, #20]
 8007394:	e01b      	b.n	80073ce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007396:	4b10      	ldr	r3, [pc, #64]	; (80073d8 <prvInsertTimerInActiveList+0x7c>)
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3304      	adds	r3, #4
 800739e:	4619      	mov	r1, r3
 80073a0:	4610      	mov	r0, r2
 80073a2:	f7fd fb74 	bl	8004a8e <vListInsert>
 80073a6:	e012      	b.n	80073ce <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d206      	bcs.n	80073be <prvInsertTimerInActiveList+0x62>
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d302      	bcc.n	80073be <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80073b8:	2301      	movs	r3, #1
 80073ba:	617b      	str	r3, [r7, #20]
 80073bc:	e007      	b.n	80073ce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073be:	4b07      	ldr	r3, [pc, #28]	; (80073dc <prvInsertTimerInActiveList+0x80>)
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	3304      	adds	r3, #4
 80073c6:	4619      	mov	r1, r3
 80073c8:	4610      	mov	r0, r2
 80073ca:	f7fd fb60 	bl	8004a8e <vListInsert>
            }
        }

        return xProcessTimerNow;
 80073ce:	697b      	ldr	r3, [r7, #20]
    }
 80073d0:	4618      	mov	r0, r3
 80073d2:	3718      	adds	r7, #24
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	20000360 	.word	0x20000360
 80073dc:	2000035c 	.word	0x2000035c

080073e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b088      	sub	sp, #32
 80073e4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073e6:	e0a6      	b.n	8007536 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f2c0 80a2 	blt.w	8007534 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d004      	beq.n	8007406 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	3304      	adds	r3, #4
 8007400:	4618      	mov	r0, r3
 8007402:	f7fd fb7d 	bl	8004b00 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007406:	1d3b      	adds	r3, r7, #4
 8007408:	4618      	mov	r0, r3
 800740a:	f7ff ff87 	bl	800731c <prvSampleTimeNow>
 800740e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	3b01      	subs	r3, #1
 8007414:	2b08      	cmp	r3, #8
 8007416:	f200 808e 	bhi.w	8007536 <prvProcessReceivedCommands+0x156>
 800741a:	a201      	add	r2, pc, #4	; (adr r2, 8007420 <prvProcessReceivedCommands+0x40>)
 800741c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007420:	08007445 	.word	0x08007445
 8007424:	08007445 	.word	0x08007445
 8007428:	080074ad 	.word	0x080074ad
 800742c:	080074c1 	.word	0x080074c1
 8007430:	0800750b 	.word	0x0800750b
 8007434:	08007445 	.word	0x08007445
 8007438:	08007445 	.word	0x08007445
 800743c:	080074ad 	.word	0x080074ad
 8007440:	080074c1 	.word	0x080074c1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800744a:	f043 0301 	orr.w	r3, r3, #1
 800744e:	b2da      	uxtb	r2, r3
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	699b      	ldr	r3, [r3, #24]
 800745c:	18d1      	adds	r1, r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	69ba      	ldr	r2, [r7, #24]
 8007462:	69f8      	ldr	r0, [r7, #28]
 8007464:	f7ff ff7a 	bl	800735c <prvInsertTimerInActiveList>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d063      	beq.n	8007536 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007474:	f003 0304 	and.w	r3, r3, #4
 8007478:	2b00      	cmp	r3, #0
 800747a:	d009      	beq.n	8007490 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	4413      	add	r3, r2
 8007484:	69ba      	ldr	r2, [r7, #24]
 8007486:	4619      	mov	r1, r3
 8007488:	69f8      	ldr	r0, [r7, #28]
 800748a:	f7ff fe71 	bl	8007170 <prvReloadTimer>
 800748e:	e008      	b.n	80074a2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007496:	f023 0301 	bic.w	r3, r3, #1
 800749a:	b2da      	uxtb	r2, r3
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	69f8      	ldr	r0, [r7, #28]
 80074a8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80074aa:	e044      	b.n	8007536 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074b2:	f023 0301 	bic.w	r3, r3, #1
 80074b6:	b2da      	uxtb	r2, r3
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80074be:	e03a      	b.n	8007536 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074c6:	f043 0301 	orr.w	r3, r3, #1
 80074ca:	b2da      	uxtb	r2, r3
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10a      	bne.n	80074f6 <prvProcessReceivedCommands+0x116>
        __asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	617b      	str	r3, [r7, #20]
    }
 80074f2:	bf00      	nop
 80074f4:	e7fe      	b.n	80074f4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	699a      	ldr	r2, [r3, #24]
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	18d1      	adds	r1, r2, r3
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	69ba      	ldr	r2, [r7, #24]
 8007502:	69f8      	ldr	r0, [r7, #28]
 8007504:	f7ff ff2a 	bl	800735c <prvInsertTimerInActiveList>
                        break;
 8007508:	e015      	b.n	8007536 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007510:	f003 0302 	and.w	r3, r3, #2
 8007514:	2b00      	cmp	r3, #0
 8007516:	d103      	bne.n	8007520 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8007518:	69f8      	ldr	r0, [r7, #28]
 800751a:	f000 fc17 	bl	8007d4c <vPortFree>
 800751e:	e00a      	b.n	8007536 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007526:	f023 0301 	bic.w	r3, r3, #1
 800752a:	b2da      	uxtb	r2, r3
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007532:	e000      	b.n	8007536 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8007534:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007536:	4b08      	ldr	r3, [pc, #32]	; (8007558 <prvProcessReceivedCommands+0x178>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f107 0108 	add.w	r1, r7, #8
 800753e:	2200      	movs	r2, #0
 8007540:	4618      	mov	r0, r3
 8007542:	f7fd fdfb 	bl	800513c <xQueueReceive>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	f47f af4d 	bne.w	80073e8 <prvProcessReceivedCommands+0x8>
        }
    }
 800754e:	bf00      	nop
 8007550:	bf00      	nop
 8007552:	3720      	adds	r7, #32
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	20000364 	.word	0x20000364

0800755c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007562:	e009      	b.n	8007578 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007564:	4b0e      	ldr	r3, [pc, #56]	; (80075a0 <prvSwitchTimerLists+0x44>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800756e:	f04f 31ff 	mov.w	r1, #4294967295
 8007572:	6838      	ldr	r0, [r7, #0]
 8007574:	f7ff fe1e 	bl	80071b4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007578:	4b09      	ldr	r3, [pc, #36]	; (80075a0 <prvSwitchTimerLists+0x44>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1f0      	bne.n	8007564 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8007582:	4b07      	ldr	r3, [pc, #28]	; (80075a0 <prvSwitchTimerLists+0x44>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8007588:	4b06      	ldr	r3, [pc, #24]	; (80075a4 <prvSwitchTimerLists+0x48>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a04      	ldr	r2, [pc, #16]	; (80075a0 <prvSwitchTimerLists+0x44>)
 800758e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007590:	4a04      	ldr	r2, [pc, #16]	; (80075a4 <prvSwitchTimerLists+0x48>)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6013      	str	r3, [r2, #0]
    }
 8007596:	bf00      	nop
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	2000035c 	.word	0x2000035c
 80075a4:	20000360 	.word	0x20000360

080075a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80075a8:	b580      	push	{r7, lr}
 80075aa:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80075ac:	f000 f9ac 	bl	8007908 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80075b0:	4b12      	ldr	r3, [pc, #72]	; (80075fc <prvCheckForValidListAndQueue+0x54>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d11d      	bne.n	80075f4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80075b8:	4811      	ldr	r0, [pc, #68]	; (8007600 <prvCheckForValidListAndQueue+0x58>)
 80075ba:	f7fd fa3b 	bl	8004a34 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80075be:	4811      	ldr	r0, [pc, #68]	; (8007604 <prvCheckForValidListAndQueue+0x5c>)
 80075c0:	f7fd fa38 	bl	8004a34 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80075c4:	4b10      	ldr	r3, [pc, #64]	; (8007608 <prvCheckForValidListAndQueue+0x60>)
 80075c6:	4a0e      	ldr	r2, [pc, #56]	; (8007600 <prvCheckForValidListAndQueue+0x58>)
 80075c8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80075ca:	4b10      	ldr	r3, [pc, #64]	; (800760c <prvCheckForValidListAndQueue+0x64>)
 80075cc:	4a0d      	ldr	r2, [pc, #52]	; (8007604 <prvCheckForValidListAndQueue+0x5c>)
 80075ce:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80075d0:	2200      	movs	r2, #0
 80075d2:	210c      	movs	r1, #12
 80075d4:	200a      	movs	r0, #10
 80075d6:	f7fd fb4d 	bl	8004c74 <xQueueGenericCreate>
 80075da:	4603      	mov	r3, r0
 80075dc:	4a07      	ldr	r2, [pc, #28]	; (80075fc <prvCheckForValidListAndQueue+0x54>)
 80075de:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80075e0:	4b06      	ldr	r3, [pc, #24]	; (80075fc <prvCheckForValidListAndQueue+0x54>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d005      	beq.n	80075f4 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80075e8:	4b04      	ldr	r3, [pc, #16]	; (80075fc <prvCheckForValidListAndQueue+0x54>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4908      	ldr	r1, [pc, #32]	; (8007610 <prvCheckForValidListAndQueue+0x68>)
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fe f8be 	bl	8005770 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80075f4:	f000 f9b8 	bl	8007968 <vPortExitCritical>
    }
 80075f8:	bf00      	nop
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	20000364 	.word	0x20000364
 8007600:	20000334 	.word	0x20000334
 8007604:	20000348 	.word	0x20000348
 8007608:	2000035c 	.word	0x2000035c
 800760c:	20000360 	.word	0x20000360
 8007610:	0800b384 	.word	0x0800b384

08007614 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	613b      	str	r3, [r7, #16]

        configASSERT( xTimer );
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10a      	bne.n	800763c <xTimerIsTimerActive+0x28>
        __asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	60fb      	str	r3, [r7, #12]
    }
 8007638:	bf00      	nop
 800763a:	e7fe      	b.n	800763a <xTimerIsTimerActive+0x26>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
 800763c:	f000 f964 	bl	8007908 <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	2b00      	cmp	r3, #0
 800764c:	d102      	bne.n	8007654 <xTimerIsTimerActive+0x40>
            {
                xReturn = pdFALSE;
 800764e:	2300      	movs	r3, #0
 8007650:	617b      	str	r3, [r7, #20]
 8007652:	e001      	b.n	8007658 <xTimerIsTimerActive+0x44>
            }
            else
            {
                xReturn = pdTRUE;
 8007654:	2301      	movs	r3, #1
 8007656:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 8007658:	f000 f986 	bl	8007968 <vPortExitCritical>

        return xReturn;
 800765c:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 800765e:	4618      	mov	r0, r3
 8007660:	3718      	adds	r7, #24
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8007666:	b580      	push	{r7, lr}
 8007668:	b086      	sub	sp, #24
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10a      	bne.n	800768e <pvTimerGetTimerID+0x28>
        __asm volatile
 8007678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767c:	f383 8811 	msr	BASEPRI, r3
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	60fb      	str	r3, [r7, #12]
    }
 800768a:	bf00      	nop
 800768c:	e7fe      	b.n	800768c <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 800768e:	f000 f93b 	bl	8007908 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	69db      	ldr	r3, [r3, #28]
 8007696:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8007698:	f000 f966 	bl	8007968 <vPortExitCritical>

        return pvReturn;
 800769c:	693b      	ldr	r3, [r7, #16]
    }
 800769e:	4618      	mov	r0, r3
 80076a0:	3718      	adds	r7, #24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
	...

080076a8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	3b04      	subs	r3, #4
 80076b8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80076c0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	3b04      	subs	r3, #4
 80076c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	f023 0201 	bic.w	r2, r3, #1
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	3b04      	subs	r3, #4
 80076d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80076d8:	4a0c      	ldr	r2, [pc, #48]	; (800770c <pxPortInitialiseStack+0x64>)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	3b14      	subs	r3, #20
 80076e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	3b04      	subs	r3, #4
 80076ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f06f 0202 	mvn.w	r2, #2
 80076f6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	3b20      	subs	r3, #32
 80076fc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80076fe:	68fb      	ldr	r3, [r7, #12]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	08007711 	.word	0x08007711

08007710 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007716:	2300      	movs	r3, #0
 8007718:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800771a:	4b12      	ldr	r3, [pc, #72]	; (8007764 <prvTaskExitError+0x54>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007722:	d00a      	beq.n	800773a <prvTaskExitError+0x2a>
        __asm volatile
 8007724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007728:	f383 8811 	msr	BASEPRI, r3
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	60fb      	str	r3, [r7, #12]
    }
 8007736:	bf00      	nop
 8007738:	e7fe      	b.n	8007738 <prvTaskExitError+0x28>
        __asm volatile
 800773a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773e:	f383 8811 	msr	BASEPRI, r3
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	60bb      	str	r3, [r7, #8]
    }
 800774c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800774e:	bf00      	nop
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d0fc      	beq.n	8007750 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007756:	bf00      	nop
 8007758:	bf00      	nop
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	20000024 	.word	0x20000024
	...

08007770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007770:	4b07      	ldr	r3, [pc, #28]	; (8007790 <pxCurrentTCBConst2>)
 8007772:	6819      	ldr	r1, [r3, #0]
 8007774:	6808      	ldr	r0, [r1, #0]
 8007776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777a:	f380 8809 	msr	PSP, r0
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f04f 0000 	mov.w	r0, #0
 8007786:	f380 8811 	msr	BASEPRI, r0
 800778a:	4770      	bx	lr
 800778c:	f3af 8000 	nop.w

08007790 <pxCurrentTCBConst2>:
 8007790:	20000230 	.word	0x20000230
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007794:	bf00      	nop
 8007796:	bf00      	nop

08007798 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007798:	4808      	ldr	r0, [pc, #32]	; (80077bc <prvPortStartFirstTask+0x24>)
 800779a:	6800      	ldr	r0, [r0, #0]
 800779c:	6800      	ldr	r0, [r0, #0]
 800779e:	f380 8808 	msr	MSP, r0
 80077a2:	f04f 0000 	mov.w	r0, #0
 80077a6:	f380 8814 	msr	CONTROL, r0
 80077aa:	b662      	cpsie	i
 80077ac:	b661      	cpsie	f
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	df00      	svc	0
 80077b8:	bf00      	nop
 80077ba:	0000      	.short	0x0000
 80077bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80077c0:	bf00      	nop
 80077c2:	bf00      	nop

080077c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80077ca:	4b46      	ldr	r3, [pc, #280]	; (80078e4 <xPortStartScheduler+0x120>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a46      	ldr	r2, [pc, #280]	; (80078e8 <xPortStartScheduler+0x124>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d10a      	bne.n	80077ea <xPortStartScheduler+0x26>
        __asm volatile
 80077d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d8:	f383 8811 	msr	BASEPRI, r3
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	613b      	str	r3, [r7, #16]
    }
 80077e6:	bf00      	nop
 80077e8:	e7fe      	b.n	80077e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80077ea:	4b3e      	ldr	r3, [pc, #248]	; (80078e4 <xPortStartScheduler+0x120>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a3f      	ldr	r2, [pc, #252]	; (80078ec <xPortStartScheduler+0x128>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d10a      	bne.n	800780a <xPortStartScheduler+0x46>
        __asm volatile
 80077f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f8:	f383 8811 	msr	BASEPRI, r3
 80077fc:	f3bf 8f6f 	isb	sy
 8007800:	f3bf 8f4f 	dsb	sy
 8007804:	60fb      	str	r3, [r7, #12]
    }
 8007806:	bf00      	nop
 8007808:	e7fe      	b.n	8007808 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800780a:	4b39      	ldr	r3, [pc, #228]	; (80078f0 <xPortStartScheduler+0x12c>)
 800780c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	b2db      	uxtb	r3, r3
 8007814:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	22ff      	movs	r2, #255	; 0xff
 800781a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	b2db      	uxtb	r3, r3
 8007822:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007824:	78fb      	ldrb	r3, [r7, #3]
 8007826:	b2db      	uxtb	r3, r3
 8007828:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800782c:	b2da      	uxtb	r2, r3
 800782e:	4b31      	ldr	r3, [pc, #196]	; (80078f4 <xPortStartScheduler+0x130>)
 8007830:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007832:	4b31      	ldr	r3, [pc, #196]	; (80078f8 <xPortStartScheduler+0x134>)
 8007834:	2207      	movs	r2, #7
 8007836:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007838:	e009      	b.n	800784e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800783a:	4b2f      	ldr	r3, [pc, #188]	; (80078f8 <xPortStartScheduler+0x134>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	3b01      	subs	r3, #1
 8007840:	4a2d      	ldr	r2, [pc, #180]	; (80078f8 <xPortStartScheduler+0x134>)
 8007842:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007844:	78fb      	ldrb	r3, [r7, #3]
 8007846:	b2db      	uxtb	r3, r3
 8007848:	005b      	lsls	r3, r3, #1
 800784a:	b2db      	uxtb	r3, r3
 800784c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800784e:	78fb      	ldrb	r3, [r7, #3]
 8007850:	b2db      	uxtb	r3, r3
 8007852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007856:	2b80      	cmp	r3, #128	; 0x80
 8007858:	d0ef      	beq.n	800783a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800785a:	4b27      	ldr	r3, [pc, #156]	; (80078f8 <xPortStartScheduler+0x134>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f1c3 0307 	rsb	r3, r3, #7
 8007862:	2b04      	cmp	r3, #4
 8007864:	d00a      	beq.n	800787c <xPortStartScheduler+0xb8>
        __asm volatile
 8007866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	60bb      	str	r3, [r7, #8]
    }
 8007878:	bf00      	nop
 800787a:	e7fe      	b.n	800787a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800787c:	4b1e      	ldr	r3, [pc, #120]	; (80078f8 <xPortStartScheduler+0x134>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	021b      	lsls	r3, r3, #8
 8007882:	4a1d      	ldr	r2, [pc, #116]	; (80078f8 <xPortStartScheduler+0x134>)
 8007884:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007886:	4b1c      	ldr	r3, [pc, #112]	; (80078f8 <xPortStartScheduler+0x134>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800788e:	4a1a      	ldr	r2, [pc, #104]	; (80078f8 <xPortStartScheduler+0x134>)
 8007890:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	b2da      	uxtb	r2, r3
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800789a:	4b18      	ldr	r3, [pc, #96]	; (80078fc <xPortStartScheduler+0x138>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a17      	ldr	r2, [pc, #92]	; (80078fc <xPortStartScheduler+0x138>)
 80078a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078a4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80078a6:	4b15      	ldr	r3, [pc, #84]	; (80078fc <xPortStartScheduler+0x138>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a14      	ldr	r2, [pc, #80]	; (80078fc <xPortStartScheduler+0x138>)
 80078ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80078b0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80078b2:	f000 f8db 	bl	8007a6c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80078b6:	4b12      	ldr	r3, [pc, #72]	; (8007900 <xPortStartScheduler+0x13c>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80078bc:	f000 f8fa 	bl	8007ab4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078c0:	4b10      	ldr	r3, [pc, #64]	; (8007904 <xPortStartScheduler+0x140>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a0f      	ldr	r2, [pc, #60]	; (8007904 <xPortStartScheduler+0x140>)
 80078c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80078ca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80078cc:	f7ff ff64 	bl	8007798 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80078d0:	f7fe fc18 	bl	8006104 <vTaskSwitchContext>
    prvTaskExitError();
 80078d4:	f7ff ff1c 	bl	8007710 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3718      	adds	r7, #24
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	e000ed00 	.word	0xe000ed00
 80078e8:	410fc271 	.word	0x410fc271
 80078ec:	410fc270 	.word	0x410fc270
 80078f0:	e000e400 	.word	0xe000e400
 80078f4:	20000370 	.word	0x20000370
 80078f8:	20000374 	.word	0x20000374
 80078fc:	e000ed20 	.word	0xe000ed20
 8007900:	20000024 	.word	0x20000024
 8007904:	e000ef34 	.word	0xe000ef34

08007908 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
        __asm volatile
 800790e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007912:	f383 8811 	msr	BASEPRI, r3
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	607b      	str	r3, [r7, #4]
    }
 8007920:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007922:	4b0f      	ldr	r3, [pc, #60]	; (8007960 <vPortEnterCritical+0x58>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	3301      	adds	r3, #1
 8007928:	4a0d      	ldr	r2, [pc, #52]	; (8007960 <vPortEnterCritical+0x58>)
 800792a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800792c:	4b0c      	ldr	r3, [pc, #48]	; (8007960 <vPortEnterCritical+0x58>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d10f      	bne.n	8007954 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007934:	4b0b      	ldr	r3, [pc, #44]	; (8007964 <vPortEnterCritical+0x5c>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <vPortEnterCritical+0x4c>
        __asm volatile
 800793e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	603b      	str	r3, [r7, #0]
    }
 8007950:	bf00      	nop
 8007952:	e7fe      	b.n	8007952 <vPortEnterCritical+0x4a>
    }
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr
 8007960:	20000024 	.word	0x20000024
 8007964:	e000ed04 	.word	0xe000ed04

08007968 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800796e:	4b12      	ldr	r3, [pc, #72]	; (80079b8 <vPortExitCritical+0x50>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10a      	bne.n	800798c <vPortExitCritical+0x24>
        __asm volatile
 8007976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	607b      	str	r3, [r7, #4]
    }
 8007988:	bf00      	nop
 800798a:	e7fe      	b.n	800798a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800798c:	4b0a      	ldr	r3, [pc, #40]	; (80079b8 <vPortExitCritical+0x50>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	3b01      	subs	r3, #1
 8007992:	4a09      	ldr	r2, [pc, #36]	; (80079b8 <vPortExitCritical+0x50>)
 8007994:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007996:	4b08      	ldr	r3, [pc, #32]	; (80079b8 <vPortExitCritical+0x50>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d105      	bne.n	80079aa <vPortExitCritical+0x42>
 800799e:	2300      	movs	r3, #0
 80079a0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	f383 8811 	msr	BASEPRI, r3
    }
 80079a8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80079aa:	bf00      	nop
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	20000024 	.word	0x20000024
 80079bc:	00000000 	.word	0x00000000

080079c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80079c0:	f3ef 8009 	mrs	r0, PSP
 80079c4:	f3bf 8f6f 	isb	sy
 80079c8:	4b15      	ldr	r3, [pc, #84]	; (8007a20 <pxCurrentTCBConst>)
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	f01e 0f10 	tst.w	lr, #16
 80079d0:	bf08      	it	eq
 80079d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079da:	6010      	str	r0, [r2, #0]
 80079dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80079e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80079e4:	f380 8811 	msr	BASEPRI, r0
 80079e8:	f3bf 8f4f 	dsb	sy
 80079ec:	f3bf 8f6f 	isb	sy
 80079f0:	f7fe fb88 	bl	8006104 <vTaskSwitchContext>
 80079f4:	f04f 0000 	mov.w	r0, #0
 80079f8:	f380 8811 	msr	BASEPRI, r0
 80079fc:	bc09      	pop	{r0, r3}
 80079fe:	6819      	ldr	r1, [r3, #0]
 8007a00:	6808      	ldr	r0, [r1, #0]
 8007a02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a06:	f01e 0f10 	tst.w	lr, #16
 8007a0a:	bf08      	it	eq
 8007a0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a10:	f380 8809 	msr	PSP, r0
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	f3af 8000 	nop.w

08007a20 <pxCurrentTCBConst>:
 8007a20:	20000230 	.word	0x20000230
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007a24:	bf00      	nop
 8007a26:	bf00      	nop

08007a28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
        __asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	607b      	str	r3, [r7, #4]
    }
 8007a40:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007a42:	f7fe fa45 	bl	8005ed0 <xTaskIncrementTick>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a4c:	4b06      	ldr	r3, [pc, #24]	; (8007a68 <SysTick_Handler+0x40>)
 8007a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	2300      	movs	r3, #0
 8007a56:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	f383 8811 	msr	BASEPRI, r3
    }
 8007a5e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8007a60:	bf00      	nop
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	e000ed04 	.word	0xe000ed04

08007a6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a70:	4b0b      	ldr	r3, [pc, #44]	; (8007aa0 <vPortSetupTimerInterrupt+0x34>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a76:	4b0b      	ldr	r3, [pc, #44]	; (8007aa4 <vPortSetupTimerInterrupt+0x38>)
 8007a78:	2200      	movs	r2, #0
 8007a7a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a7c:	4b0a      	ldr	r3, [pc, #40]	; (8007aa8 <vPortSetupTimerInterrupt+0x3c>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a0a      	ldr	r2, [pc, #40]	; (8007aac <vPortSetupTimerInterrupt+0x40>)
 8007a82:	fba2 2303 	umull	r2, r3, r2, r3
 8007a86:	099b      	lsrs	r3, r3, #6
 8007a88:	4a09      	ldr	r2, [pc, #36]	; (8007ab0 <vPortSetupTimerInterrupt+0x44>)
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a8e:	4b04      	ldr	r3, [pc, #16]	; (8007aa0 <vPortSetupTimerInterrupt+0x34>)
 8007a90:	2207      	movs	r2, #7
 8007a92:	601a      	str	r2, [r3, #0]
}
 8007a94:	bf00      	nop
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	e000e010 	.word	0xe000e010
 8007aa4:	e000e018 	.word	0xe000e018
 8007aa8:	20000010 	.word	0x20000010
 8007aac:	10624dd3 	.word	0x10624dd3
 8007ab0:	e000e014 	.word	0xe000e014

08007ab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007ab4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ac4 <vPortEnableVFP+0x10>
 8007ab8:	6801      	ldr	r1, [r0, #0]
 8007aba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007abe:	6001      	str	r1, [r0, #0]
 8007ac0:	4770      	bx	lr
 8007ac2:	0000      	.short	0x0000
 8007ac4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007ac8:	bf00      	nop
 8007aca:	bf00      	nop

08007acc <vSetVarulMaxPRIGROUPValue>:
/*-----------------------------------------------------------*/
/////////
#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue( void )
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ad2:	4b1f      	ldr	r3, [pc, #124]	; (8007b50 <vSetVarulMaxPRIGROUPValue+0x84>)
 8007ad4:	60fb      	str	r3, [r7, #12]
	volatile uint8_t ucMaxPriorityValue;
	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	22ff      	movs	r2, #255	; 0xff
 8007ada:	701a      	strb	r2, [r3, #0]
	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	71fb      	strb	r3, [r7, #7]
	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ae4:	4b1b      	ldr	r3, [pc, #108]	; (8007b54 <vSetVarulMaxPRIGROUPValue+0x88>)
 8007ae6:	2207      	movs	r2, #7
 8007ae8:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007aea:	e009      	b.n	8007b00 <vSetVarulMaxPRIGROUPValue+0x34>
	{
		ulMaxPRIGROUPValue--;
 8007aec:	4b19      	ldr	r3, [pc, #100]	; (8007b54 <vSetVarulMaxPRIGROUPValue+0x88>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3b01      	subs	r3, #1
 8007af2:	4a18      	ldr	r2, [pc, #96]	; (8007b54 <vSetVarulMaxPRIGROUPValue+0x88>)
 8007af4:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007af6:	79fb      	ldrb	r3, [r7, #7]
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	005b      	lsls	r3, r3, #1
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	71fb      	strb	r3, [r7, #7]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b00:	79fb      	ldrb	r3, [r7, #7]
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b08:	2b80      	cmp	r3, #128	; 0x80
 8007b0a:	d0ef      	beq.n	8007aec <vSetVarulMaxPRIGROUPValue+0x20>
#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b0c:	4b11      	ldr	r3, [pc, #68]	; (8007b54 <vSetVarulMaxPRIGROUPValue+0x88>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f1c3 0307 	rsb	r3, r3, #7
 8007b14:	2b04      	cmp	r3, #4
 8007b16:	d00a      	beq.n	8007b2e <vSetVarulMaxPRIGROUPValue+0x62>
        __asm volatile
 8007b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1c:	f383 8811 	msr	BASEPRI, r3
 8007b20:	f3bf 8f6f 	isb	sy
 8007b24:	f3bf 8f4f 	dsb	sy
 8007b28:	60bb      	str	r3, [r7, #8]
    }
 8007b2a:	bf00      	nop
 8007b2c:	e7fe      	b.n	8007b2c <vSetVarulMaxPRIGROUPValue+0x60>
	}
#endif
	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b2e:	4b09      	ldr	r3, [pc, #36]	; (8007b54 <vSetVarulMaxPRIGROUPValue+0x88>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	021b      	lsls	r3, r3, #8
 8007b34:	4a07      	ldr	r2, [pc, #28]	; (8007b54 <vSetVarulMaxPRIGROUPValue+0x88>)
 8007b36:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b38:	4b06      	ldr	r3, [pc, #24]	; (8007b54 <vSetVarulMaxPRIGROUPValue+0x88>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b40:	4a04      	ldr	r2, [pc, #16]	; (8007b54 <vSetVarulMaxPRIGROUPValue+0x88>)
 8007b42:	6013      	str	r3, [r2, #0]
}
 8007b44:	bf00      	nop
 8007b46:	3714      	adds	r7, #20
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr
 8007b50:	e000e400 	.word	0xe000e400
 8007b54:	20000374 	.word	0x20000374

08007b58 <vPortValidateInterruptPriority>:

////////
#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007b5e:	f3ef 8305 	mrs	r3, IPSR
 8007b62:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2b0f      	cmp	r3, #15
 8007b68:	d914      	bls.n	8007b94 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b6a:	4a17      	ldr	r2, [pc, #92]	; (8007bc8 <vPortValidateInterruptPriority+0x70>)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	4413      	add	r3, r2
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b74:	4b15      	ldr	r3, [pc, #84]	; (8007bcc <vPortValidateInterruptPriority+0x74>)
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	7afa      	ldrb	r2, [r7, #11]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d20a      	bcs.n	8007b94 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8007b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b82:	f383 8811 	msr	BASEPRI, r3
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	607b      	str	r3, [r7, #4]
    }
 8007b90:	bf00      	nop
 8007b92:	e7fe      	b.n	8007b92 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b94:	4b0e      	ldr	r3, [pc, #56]	; (8007bd0 <vPortValidateInterruptPriority+0x78>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b9c:	4b0d      	ldr	r3, [pc, #52]	; (8007bd4 <vPortValidateInterruptPriority+0x7c>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d90a      	bls.n	8007bba <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8007ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	603b      	str	r3, [r7, #0]
    }
 8007bb6:	bf00      	nop
 8007bb8:	e7fe      	b.n	8007bb8 <vPortValidateInterruptPriority+0x60>
    }
 8007bba:	bf00      	nop
 8007bbc:	3714      	adds	r7, #20
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	e000e3f0 	.word	0xe000e3f0
 8007bcc:	20000370 	.word	0x20000370
 8007bd0:	e000ed0c 	.word	0xe000ed0c
 8007bd4:	20000374 	.word	0x20000374

08007bd8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b08a      	sub	sp, #40	; 0x28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8007be0:	2300      	movs	r3, #0
 8007be2:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8007be4:	f7fe f838 	bl	8005c58 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007be8:	4b53      	ldr	r3, [pc, #332]	; (8007d38 <pvPortMalloc+0x160>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d101      	bne.n	8007bf4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007bf0:	f000 f908 	bl	8007e04 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d012      	beq.n	8007c20 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8007bfa:	2208      	movs	r2, #8
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f003 0307 	and.w	r3, r3, #7
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	3308      	adds	r3, #8
 8007c06:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	43db      	mvns	r3, r3
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d804      	bhi.n	8007c1c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	4413      	add	r3, r2
 8007c18:	607b      	str	r3, [r7, #4]
 8007c1a:	e001      	b.n	8007c20 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	db70      	blt.n	8007d08 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d06d      	beq.n	8007d08 <pvPortMalloc+0x130>
 8007c2c:	4b43      	ldr	r3, [pc, #268]	; (8007d3c <pvPortMalloc+0x164>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d868      	bhi.n	8007d08 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007c36:	4b42      	ldr	r3, [pc, #264]	; (8007d40 <pvPortMalloc+0x168>)
 8007c38:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007c3a:	4b41      	ldr	r3, [pc, #260]	; (8007d40 <pvPortMalloc+0x168>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c40:	e004      	b.n	8007c4c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8007c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c44:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d903      	bls.n	8007c5e <pvPortMalloc+0x86>
 8007c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d1f1      	bne.n	8007c42 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007c5e:	4b36      	ldr	r3, [pc, #216]	; (8007d38 <pvPortMalloc+0x160>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d04f      	beq.n	8007d08 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c68:	6a3b      	ldr	r3, [r7, #32]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2208      	movs	r2, #8
 8007c6e:	4413      	add	r3, r2
 8007c70:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	6a3b      	ldr	r3, [r7, #32]
 8007c78:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7c:	685a      	ldr	r2, [r3, #4]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	1ad2      	subs	r2, r2, r3
 8007c82:	2308      	movs	r3, #8
 8007c84:	005b      	lsls	r3, r3, #1
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d91f      	bls.n	8007cca <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4413      	add	r3, r2
 8007c90:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f003 0307 	and.w	r3, r3, #7
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00a      	beq.n	8007cb2 <pvPortMalloc+0xda>
        __asm volatile
 8007c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca0:	f383 8811 	msr	BASEPRI, r3
 8007ca4:	f3bf 8f6f 	isb	sy
 8007ca8:	f3bf 8f4f 	dsb	sy
 8007cac:	613b      	str	r3, [r7, #16]
    }
 8007cae:	bf00      	nop
 8007cb0:	e7fe      	b.n	8007cb0 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb4:	685a      	ldr	r2, [r3, #4]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	1ad2      	subs	r2, r2, r3
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007cc4:	6978      	ldr	r0, [r7, #20]
 8007cc6:	f000 f8f9 	bl	8007ebc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007cca:	4b1c      	ldr	r3, [pc, #112]	; (8007d3c <pvPortMalloc+0x164>)
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	4a19      	ldr	r2, [pc, #100]	; (8007d3c <pvPortMalloc+0x164>)
 8007cd6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007cd8:	4b18      	ldr	r3, [pc, #96]	; (8007d3c <pvPortMalloc+0x164>)
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	4b19      	ldr	r3, [pc, #100]	; (8007d44 <pvPortMalloc+0x16c>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d203      	bcs.n	8007cec <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ce4:	4b15      	ldr	r3, [pc, #84]	; (8007d3c <pvPortMalloc+0x164>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a16      	ldr	r2, [pc, #88]	; (8007d44 <pvPortMalloc+0x16c>)
 8007cea:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8007cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007cfe:	4b12      	ldr	r3, [pc, #72]	; (8007d48 <pvPortMalloc+0x170>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	3301      	adds	r3, #1
 8007d04:	4a10      	ldr	r2, [pc, #64]	; (8007d48 <pvPortMalloc+0x170>)
 8007d06:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007d08:	f7fd ffb4 	bl	8005c74 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	f003 0307 	and.w	r3, r3, #7
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00a      	beq.n	8007d2c <pvPortMalloc+0x154>
        __asm volatile
 8007d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1a:	f383 8811 	msr	BASEPRI, r3
 8007d1e:	f3bf 8f6f 	isb	sy
 8007d22:	f3bf 8f4f 	dsb	sy
 8007d26:	60fb      	str	r3, [r7, #12]
    }
 8007d28:	bf00      	nop
 8007d2a:	e7fe      	b.n	8007d2a <pvPortMalloc+0x152>
    return pvReturn;
 8007d2c:	69fb      	ldr	r3, [r7, #28]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3728      	adds	r7, #40	; 0x28
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	2000cb80 	.word	0x2000cb80
 8007d3c:	2000cb84 	.word	0x2000cb84
 8007d40:	2000cb78 	.word	0x2000cb78
 8007d44:	2000cb88 	.word	0x2000cb88
 8007d48:	2000cb8c 	.word	0x2000cb8c

08007d4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b086      	sub	sp, #24
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d049      	beq.n	8007df2 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007d5e:	2308      	movs	r3, #8
 8007d60:	425b      	negs	r3, r3
 8007d62:	697a      	ldr	r2, [r7, #20]
 8007d64:	4413      	add	r3, r2
 8007d66:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	db0a      	blt.n	8007d8a <vPortFree+0x3e>
        __asm volatile
 8007d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d78:	f383 8811 	msr	BASEPRI, r3
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	60fb      	str	r3, [r7, #12]
    }
 8007d86:	bf00      	nop
 8007d88:	e7fe      	b.n	8007d88 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00a      	beq.n	8007da8 <vPortFree+0x5c>
        __asm volatile
 8007d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d96:	f383 8811 	msr	BASEPRI, r3
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	60bb      	str	r3, [r7, #8]
    }
 8007da4:	bf00      	nop
 8007da6:	e7fe      	b.n	8007da6 <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	0fdb      	lsrs	r3, r3, #31
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d01c      	beq.n	8007df2 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d118      	bne.n	8007df2 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8007dcc:	f7fd ff44 	bl	8005c58 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	4b09      	ldr	r3, [pc, #36]	; (8007dfc <vPortFree+0xb0>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4413      	add	r3, r2
 8007dda:	4a08      	ldr	r2, [pc, #32]	; (8007dfc <vPortFree+0xb0>)
 8007ddc:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007dde:	6938      	ldr	r0, [r7, #16]
 8007de0:	f000 f86c 	bl	8007ebc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007de4:	4b06      	ldr	r3, [pc, #24]	; (8007e00 <vPortFree+0xb4>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3301      	adds	r3, #1
 8007dea:	4a05      	ldr	r2, [pc, #20]	; (8007e00 <vPortFree+0xb4>)
 8007dec:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007dee:	f7fd ff41 	bl	8005c74 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007df2:	bf00      	nop
 8007df4:	3718      	adds	r7, #24
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	2000cb84 	.word	0x2000cb84
 8007e00:	2000cb90 	.word	0x2000cb90

08007e04 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e0a:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8007e0e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007e10:	4b25      	ldr	r3, [pc, #148]	; (8007ea8 <prvHeapInit+0xa4>)
 8007e12:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f003 0307 	and.w	r3, r3, #7
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00c      	beq.n	8007e38 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	3307      	adds	r3, #7
 8007e22:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f023 0307 	bic.w	r3, r3, #7
 8007e2a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	4a1d      	ldr	r2, [pc, #116]	; (8007ea8 <prvHeapInit+0xa4>)
 8007e34:	4413      	add	r3, r2
 8007e36:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e3c:	4a1b      	ldr	r2, [pc, #108]	; (8007eac <prvHeapInit+0xa8>)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007e42:	4b1a      	ldr	r3, [pc, #104]	; (8007eac <prvHeapInit+0xa8>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007e50:	2208      	movs	r2, #8
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	1a9b      	subs	r3, r3, r2
 8007e56:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f023 0307 	bic.w	r3, r3, #7
 8007e5e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	4a13      	ldr	r2, [pc, #76]	; (8007eb0 <prvHeapInit+0xac>)
 8007e64:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007e66:	4b12      	ldr	r3, [pc, #72]	; (8007eb0 <prvHeapInit+0xac>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007e6e:	4b10      	ldr	r3, [pc, #64]	; (8007eb0 <prvHeapInit+0xac>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2200      	movs	r2, #0
 8007e74:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	1ad2      	subs	r2, r2, r3
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e84:	4b0a      	ldr	r3, [pc, #40]	; (8007eb0 <prvHeapInit+0xac>)
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	4a08      	ldr	r2, [pc, #32]	; (8007eb4 <prvHeapInit+0xb0>)
 8007e92:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	4a07      	ldr	r2, [pc, #28]	; (8007eb8 <prvHeapInit+0xb4>)
 8007e9a:	6013      	str	r3, [r2, #0]
}
 8007e9c:	bf00      	nop
 8007e9e:	3714      	adds	r7, #20
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	20000378 	.word	0x20000378
 8007eac:	2000cb78 	.word	0x2000cb78
 8007eb0:	2000cb80 	.word	0x2000cb80
 8007eb4:	2000cb88 	.word	0x2000cb88
 8007eb8:	2000cb84 	.word	0x2000cb84

08007ebc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ec4:	4b28      	ldr	r3, [pc, #160]	; (8007f68 <prvInsertBlockIntoFreeList+0xac>)
 8007ec6:	60fb      	str	r3, [r7, #12]
 8007ec8:	e002      	b.n	8007ed0 <prvInsertBlockIntoFreeList+0x14>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	60fb      	str	r3, [r7, #12]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d8f7      	bhi.n	8007eca <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	68ba      	ldr	r2, [r7, #8]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d108      	bne.n	8007efe <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	685a      	ldr	r2, [r3, #4]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	441a      	add	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	441a      	add	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d118      	bne.n	8007f44 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	4b15      	ldr	r3, [pc, #84]	; (8007f6c <prvInsertBlockIntoFreeList+0xb0>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d00d      	beq.n	8007f3a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685a      	ldr	r2, [r3, #4]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	441a      	add	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	601a      	str	r2, [r3, #0]
 8007f38:	e008      	b.n	8007f4c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f3a:	4b0c      	ldr	r3, [pc, #48]	; (8007f6c <prvInsertBlockIntoFreeList+0xb0>)
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	601a      	str	r2, [r3, #0]
 8007f42:	e003      	b.n	8007f4c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d002      	beq.n	8007f5a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007f5a:	bf00      	nop
 8007f5c:	3714      	adds	r7, #20
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	2000cb78 	.word	0x2000cb78
 8007f6c:	2000cb80 	.word	0x2000cb80

08007f70 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8007f70:	b580      	push	{r7, lr}
 8007f72:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8007f74:	4803      	ldr	r0, [pc, #12]	; (8007f84 <_cbSendSystemDesc+0x14>)
 8007f76:	f001 fbdf 	bl	8009738 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8007f7a:	4803      	ldr	r0, [pc, #12]	; (8007f88 <_cbSendSystemDesc+0x18>)
 8007f7c:	f001 fbdc 	bl	8009738 <SEGGER_SYSVIEW_SendSysDesc>
}
 8007f80:	bf00      	nop
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	0800b38c 	.word	0x0800b38c
 8007f88:	0800b3c0 	.word	0x0800b3c0

08007f8c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8007f90:	4b06      	ldr	r3, [pc, #24]	; (8007fac <SEGGER_SYSVIEW_Conf+0x20>)
 8007f92:	6818      	ldr	r0, [r3, #0]
 8007f94:	4b05      	ldr	r3, [pc, #20]	; (8007fac <SEGGER_SYSVIEW_Conf+0x20>)
 8007f96:	6819      	ldr	r1, [r3, #0]
 8007f98:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <SEGGER_SYSVIEW_Conf+0x24>)
 8007f9a:	4a06      	ldr	r2, [pc, #24]	; (8007fb4 <SEGGER_SYSVIEW_Conf+0x28>)
 8007f9c:	f000 fe9c 	bl	8008cd8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8007fa0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8007fa4:	f000 fedc 	bl	8008d60 <SEGGER_SYSVIEW_SetRAMBase>
}
 8007fa8:	bf00      	nop
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	20000010 	.word	0x20000010
 8007fb0:	08007f71 	.word	0x08007f71
 8007fb4:	0800b45c 	.word	0x0800b45c

08007fb8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8007fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	607b      	str	r3, [r7, #4]
 8007fc2:	e033      	b.n	800802c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8007fc4:	491e      	ldr	r1, [pc, #120]	; (8008040 <_cbSendTaskList+0x88>)
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	4413      	add	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	440b      	add	r3, r1
 8007fd2:	6818      	ldr	r0, [r3, #0]
 8007fd4:	491a      	ldr	r1, [pc, #104]	; (8008040 <_cbSendTaskList+0x88>)
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4413      	add	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	440b      	add	r3, r1
 8007fe2:	3304      	adds	r3, #4
 8007fe4:	6819      	ldr	r1, [r3, #0]
 8007fe6:	4c16      	ldr	r4, [pc, #88]	; (8008040 <_cbSendTaskList+0x88>)
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	4613      	mov	r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	4413      	add	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4423      	add	r3, r4
 8007ff4:	3308      	adds	r3, #8
 8007ff6:	681c      	ldr	r4, [r3, #0]
 8007ff8:	4d11      	ldr	r5, [pc, #68]	; (8008040 <_cbSendTaskList+0x88>)
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4413      	add	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	442b      	add	r3, r5
 8008006:	330c      	adds	r3, #12
 8008008:	681d      	ldr	r5, [r3, #0]
 800800a:	4e0d      	ldr	r6, [pc, #52]	; (8008040 <_cbSendTaskList+0x88>)
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	4613      	mov	r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4413      	add	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4433      	add	r3, r6
 8008018:	3310      	adds	r3, #16
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	462b      	mov	r3, r5
 8008020:	4622      	mov	r2, r4
 8008022:	f000 f8bd 	bl	80081a0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	3301      	adds	r3, #1
 800802a:	607b      	str	r3, [r7, #4]
 800802c:	4b05      	ldr	r3, [pc, #20]	; (8008044 <_cbSendTaskList+0x8c>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	429a      	cmp	r2, r3
 8008034:	d3c6      	bcc.n	8007fc4 <_cbSendTaskList+0xc>
  }
}
 8008036:	bf00      	nop
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008040:	2000cb94 	.word	0x2000cb94
 8008044:	2000cc34 	.word	0x2000cc34

08008048 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8008048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800804c:	b082      	sub	sp, #8
 800804e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8008050:	f7fd ff20 	bl	8005e94 <xTaskGetTickCountFromISR>
 8008054:	4603      	mov	r3, r0
 8008056:	2200      	movs	r2, #0
 8008058:	469a      	mov	sl, r3
 800805a:	4693      	mov	fp, r2
 800805c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8008060:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008064:	4602      	mov	r2, r0
 8008066:	460b      	mov	r3, r1
 8008068:	f04f 0a00 	mov.w	sl, #0
 800806c:	f04f 0b00 	mov.w	fp, #0
 8008070:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8008074:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8008078:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800807c:	4652      	mov	r2, sl
 800807e:	465b      	mov	r3, fp
 8008080:	1a14      	subs	r4, r2, r0
 8008082:	eb63 0501 	sbc.w	r5, r3, r1
 8008086:	f04f 0200 	mov.w	r2, #0
 800808a:	f04f 0300 	mov.w	r3, #0
 800808e:	00ab      	lsls	r3, r5, #2
 8008090:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8008094:	00a2      	lsls	r2, r4, #2
 8008096:	4614      	mov	r4, r2
 8008098:	461d      	mov	r5, r3
 800809a:	eb14 0800 	adds.w	r8, r4, r0
 800809e:	eb45 0901 	adc.w	r9, r5, r1
 80080a2:	f04f 0200 	mov.w	r2, #0
 80080a6:	f04f 0300 	mov.w	r3, #0
 80080aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80080ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80080b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80080b6:	4690      	mov	r8, r2
 80080b8:	4699      	mov	r9, r3
 80080ba:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80080be:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80080c2:	4610      	mov	r0, r2
 80080c4:	4619      	mov	r1, r3
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080080d0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af02      	add	r7, sp, #8
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
 80080dc:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80080de:	2205      	movs	r2, #5
 80080e0:	492b      	ldr	r1, [pc, #172]	; (8008190 <SYSVIEW_AddTask+0xc0>)
 80080e2:	68b8      	ldr	r0, [r7, #8]
 80080e4:	f001 fde8 	bl	8009cb8 <memcmp>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d04b      	beq.n	8008186 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80080ee:	4b29      	ldr	r3, [pc, #164]	; (8008194 <SYSVIEW_AddTask+0xc4>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2b07      	cmp	r3, #7
 80080f4:	d903      	bls.n	80080fe <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80080f6:	4828      	ldr	r0, [pc, #160]	; (8008198 <SYSVIEW_AddTask+0xc8>)
 80080f8:	f001 fd4c 	bl	8009b94 <SEGGER_SYSVIEW_Warn>
    return;
 80080fc:	e044      	b.n	8008188 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80080fe:	4b25      	ldr	r3, [pc, #148]	; (8008194 <SYSVIEW_AddTask+0xc4>)
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	4926      	ldr	r1, [pc, #152]	; (800819c <SYSVIEW_AddTask+0xcc>)
 8008104:	4613      	mov	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4413      	add	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	440b      	add	r3, r1
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8008112:	4b20      	ldr	r3, [pc, #128]	; (8008194 <SYSVIEW_AddTask+0xc4>)
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	4921      	ldr	r1, [pc, #132]	; (800819c <SYSVIEW_AddTask+0xcc>)
 8008118:	4613      	mov	r3, r2
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	4413      	add	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	440b      	add	r3, r1
 8008122:	3304      	adds	r3, #4
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8008128:	4b1a      	ldr	r3, [pc, #104]	; (8008194 <SYSVIEW_AddTask+0xc4>)
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	491b      	ldr	r1, [pc, #108]	; (800819c <SYSVIEW_AddTask+0xcc>)
 800812e:	4613      	mov	r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	440b      	add	r3, r1
 8008138:	3308      	adds	r3, #8
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800813e:	4b15      	ldr	r3, [pc, #84]	; (8008194 <SYSVIEW_AddTask+0xc4>)
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	4916      	ldr	r1, [pc, #88]	; (800819c <SYSVIEW_AddTask+0xcc>)
 8008144:	4613      	mov	r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	4413      	add	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	440b      	add	r3, r1
 800814e:	330c      	adds	r3, #12
 8008150:	683a      	ldr	r2, [r7, #0]
 8008152:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8008154:	4b0f      	ldr	r3, [pc, #60]	; (8008194 <SYSVIEW_AddTask+0xc4>)
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	4910      	ldr	r1, [pc, #64]	; (800819c <SYSVIEW_AddTask+0xcc>)
 800815a:	4613      	mov	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4413      	add	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	440b      	add	r3, r1
 8008164:	3310      	adds	r3, #16
 8008166:	69ba      	ldr	r2, [r7, #24]
 8008168:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800816a:	4b0a      	ldr	r3, [pc, #40]	; (8008194 <SYSVIEW_AddTask+0xc4>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	3301      	adds	r3, #1
 8008170:	4a08      	ldr	r2, [pc, #32]	; (8008194 <SYSVIEW_AddTask+0xc4>)
 8008172:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	68b9      	ldr	r1, [r7, #8]
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f000 f80e 	bl	80081a0 <SYSVIEW_SendTaskInfo>
 8008184:	e000      	b.n	8008188 <SYSVIEW_AddTask+0xb8>
    return;
 8008186:	bf00      	nop

}
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	0800b3d0 	.word	0x0800b3d0
 8008194:	2000cc34 	.word	0x2000cc34
 8008198:	0800b3d8 	.word	0x0800b3d8
 800819c:	2000cb94 	.word	0x2000cb94

080081a0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b08a      	sub	sp, #40	; 0x28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
 80081ac:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80081ae:	f107 0314 	add.w	r3, r7, #20
 80081b2:	2214      	movs	r2, #20
 80081b4:	2100      	movs	r1, #0
 80081b6:	4618      	mov	r0, r3
 80081b8:	f001 fd9c 	bl	8009cf4 <memset>
  TaskInfo.TaskID     = TaskID;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80081cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ce:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80081d0:	f107 0314 	add.w	r3, r7, #20
 80081d4:	4618      	mov	r0, r3
 80081d6:	f001 f9b7 	bl	8009548 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80081da:	bf00      	nop
 80081dc:	3728      	adds	r7, #40	; 0x28
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
	...

080081e4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80081ea:	4b26      	ldr	r3, [pc, #152]	; (8008284 <_DoInit+0xa0>)
 80081ec:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80081ee:	22a8      	movs	r2, #168	; 0xa8
 80081f0:	2100      	movs	r1, #0
 80081f2:	6838      	ldr	r0, [r7, #0]
 80081f4:	f001 fd7e 	bl	8009cf4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	2203      	movs	r2, #3
 80081fc:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	2203      	movs	r2, #3
 8008202:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	4a20      	ldr	r2, [pc, #128]	; (8008288 <_DoInit+0xa4>)
 8008208:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	4a1f      	ldr	r2, [pc, #124]	; (800828c <_DoInit+0xa8>)
 800820e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008216:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	2200      	movs	r2, #0
 800821c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	2200      	movs	r2, #0
 8008222:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	2200      	movs	r2, #0
 8008228:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	4a16      	ldr	r2, [pc, #88]	; (8008288 <_DoInit+0xa4>)
 800822e:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	4a17      	ldr	r2, [pc, #92]	; (8008290 <_DoInit+0xac>)
 8008234:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	2210      	movs	r2, #16
 800823a:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	2200      	movs	r2, #0
 8008240:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	2200      	movs	r2, #0
 8008246:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	2200      	movs	r2, #0
 800824c:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800824e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8008252:	2300      	movs	r3, #0
 8008254:	607b      	str	r3, [r7, #4]
 8008256:	e00c      	b.n	8008272 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f1c3 030f 	rsb	r3, r3, #15
 800825e:	4a0d      	ldr	r2, [pc, #52]	; (8008294 <_DoInit+0xb0>)
 8008260:	5cd1      	ldrb	r1, [r2, r3]
 8008262:	683a      	ldr	r2, [r7, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4413      	add	r3, r2
 8008268:	460a      	mov	r2, r1
 800826a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	3301      	adds	r3, #1
 8008270:	607b      	str	r3, [r7, #4]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2b0f      	cmp	r3, #15
 8008276:	d9ef      	bls.n	8008258 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8008278:	f3bf 8f5f 	dmb	sy
}
 800827c:	bf00      	nop
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	2000cc38 	.word	0x2000cc38
 8008288:	0800b428 	.word	0x0800b428
 800828c:	2000cce0 	.word	0x2000cce0
 8008290:	2000d0e0 	.word	0x2000d0e0
 8008294:	0800b464 	.word	0x0800b464

08008298 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8008298:	b580      	push	{r7, lr}
 800829a:	b08a      	sub	sp, #40	; 0x28
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80082a4:	2300      	movs	r3, #0
 80082a6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80082b4:	69ba      	ldr	r2, [r7, #24]
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d905      	bls.n	80082c8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80082bc:	69ba      	ldr	r2, [r7, #24]
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	3b01      	subs	r3, #1
 80082c4:	627b      	str	r3, [r7, #36]	; 0x24
 80082c6:	e007      	b.n	80082d8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	689a      	ldr	r2, [r3, #8]
 80082cc:	69b9      	ldr	r1, [r7, #24]
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	1acb      	subs	r3, r1, r3
 80082d2:	4413      	add	r3, r2
 80082d4:	3b01      	subs	r3, #1
 80082d6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	689a      	ldr	r2, [r3, #8]
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082e2:	4293      	cmp	r3, r2
 80082e4:	bf28      	it	cs
 80082e6:	4613      	movcs	r3, r2
 80082e8:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80082ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4293      	cmp	r3, r2
 80082f0:	bf28      	it	cs
 80082f2:	4613      	movcs	r3, r2
 80082f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	685a      	ldr	r2, [r3, #4]
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	4413      	add	r3, r2
 80082fe:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8008300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008302:	68b9      	ldr	r1, [r7, #8]
 8008304:	6978      	ldr	r0, [r7, #20]
 8008306:	f001 fce7 	bl	8009cd8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800830a:	6a3a      	ldr	r2, [r7, #32]
 800830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830e:	4413      	add	r3, r2
 8008310:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008316:	4413      	add	r3, r2
 8008318:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8008322:	69fa      	ldr	r2, [r7, #28]
 8008324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008326:	4413      	add	r3, r2
 8008328:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	69fa      	ldr	r2, [r7, #28]
 8008330:	429a      	cmp	r2, r3
 8008332:	d101      	bne.n	8008338 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8008334:	2300      	movs	r3, #0
 8008336:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008338:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	69fa      	ldr	r2, [r7, #28]
 8008340:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1b2      	bne.n	80082ae <_WriteBlocking+0x16>
  return NumBytesWritten;
 8008348:	6a3b      	ldr	r3, [r7, #32]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3728      	adds	r7, #40	; 0x28
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8008352:	b580      	push	{r7, lr}
 8008354:	b088      	sub	sp, #32
 8008356:	af00      	add	r7, sp, #0
 8008358:	60f8      	str	r0, [r7, #12]
 800835a:	60b9      	str	r1, [r7, #8]
 800835c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	689a      	ldr	r2, [r3, #8]
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800836e:	69ba      	ldr	r2, [r7, #24]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	429a      	cmp	r2, r3
 8008374:	d911      	bls.n	800839a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	685a      	ldr	r2, [r3, #4]
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	4413      	add	r3, r2
 800837e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	68b9      	ldr	r1, [r7, #8]
 8008384:	6938      	ldr	r0, [r7, #16]
 8008386:	f001 fca7 	bl	8009cd8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800838a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800838e:	69fa      	ldr	r2, [r7, #28]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	441a      	add	r2, r3
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8008398:	e01f      	b.n	80083da <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	685a      	ldr	r2, [r3, #4]
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	4413      	add	r3, r2
 80083a6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	68b9      	ldr	r1, [r7, #8]
 80083ac:	6938      	ldr	r0, [r7, #16]
 80083ae:	f001 fc93 	bl	8009cd8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	1ad3      	subs	r3, r2, r3
 80083b8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	4413      	add	r3, r2
 80083c6:	697a      	ldr	r2, [r7, #20]
 80083c8:	4619      	mov	r1, r3
 80083ca:	6938      	ldr	r0, [r7, #16]
 80083cc:	f001 fc84 	bl	8009cd8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80083d0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	697a      	ldr	r2, [r7, #20]
 80083d8:	60da      	str	r2, [r3, #12]
}
 80083da:	bf00      	nop
 80083dc:	3720      	adds	r7, #32
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80083e2:	b480      	push	{r7}
 80083e4:	b087      	sub	sp, #28
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80083f6:	693a      	ldr	r2, [r7, #16]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d808      	bhi.n	8008410 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	689a      	ldr	r2, [r3, #8]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	1ad2      	subs	r2, r2, r3
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	4413      	add	r3, r2
 800840a:	3b01      	subs	r3, #1
 800840c:	617b      	str	r3, [r7, #20]
 800840e:	e004      	b.n	800841a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	3b01      	subs	r3, #1
 8008418:	617b      	str	r3, [r7, #20]
  }
  return r;
 800841a:	697b      	ldr	r3, [r7, #20]
}
 800841c:	4618      	mov	r0, r3
 800841e:	371c      	adds	r7, #28
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8008428:	b580      	push	{r7, lr}
 800842a:	b08c      	sub	sp, #48	; 0x30
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8008434:	4b3e      	ldr	r3, [pc, #248]	; (8008530 <SEGGER_RTT_ReadNoLock+0x108>)
 8008436:	623b      	str	r3, [r7, #32]
 8008438:	6a3b      	ldr	r3, [r7, #32]
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	b2db      	uxtb	r3, r3
 800843e:	2b00      	cmp	r3, #0
 8008440:	d101      	bne.n	8008446 <SEGGER_RTT_ReadNoLock+0x1e>
 8008442:	f7ff fecf 	bl	80081e4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	4613      	mov	r3, r2
 800844a:	005b      	lsls	r3, r3, #1
 800844c:	4413      	add	r3, r2
 800844e:	00db      	lsls	r3, r3, #3
 8008450:	3360      	adds	r3, #96	; 0x60
 8008452:	4a37      	ldr	r2, [pc, #220]	; (8008530 <SEGGER_RTT_ReadNoLock+0x108>)
 8008454:	4413      	add	r3, r2
 8008456:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8008468:	2300      	movs	r3, #0
 800846a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800846c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800846e:	69bb      	ldr	r3, [r7, #24]
 8008470:	429a      	cmp	r2, r3
 8008472:	d92b      	bls.n	80084cc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	689a      	ldr	r2, [r3, #8]
 8008478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847a:	1ad3      	subs	r3, r2, r3
 800847c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800847e:	697a      	ldr	r2, [r7, #20]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4293      	cmp	r3, r2
 8008484:	bf28      	it	cs
 8008486:	4613      	movcs	r3, r2
 8008488:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008490:	4413      	add	r3, r2
 8008492:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	6939      	ldr	r1, [r7, #16]
 8008498:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800849a:	f001 fc1d 	bl	8009cd8 <memcpy>
    NumBytesRead += NumBytesRem;
 800849e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	4413      	add	r3, r2
 80084a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80084a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	4413      	add	r3, r2
 80084ac:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	1ad3      	subs	r3, r2, r3
 80084b4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80084b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	4413      	add	r3, r2
 80084bc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d101      	bne.n	80084cc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80084c8:	2300      	movs	r3, #0
 80084ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80084cc:	69ba      	ldr	r2, [r7, #24]
 80084ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80084d4:	697a      	ldr	r2, [r7, #20]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4293      	cmp	r3, r2
 80084da:	bf28      	it	cs
 80084dc:	4613      	movcs	r3, r2
 80084de:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d019      	beq.n	800851a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	685a      	ldr	r2, [r3, #4]
 80084ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ec:	4413      	add	r3, r2
 80084ee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80084f0:	697a      	ldr	r2, [r7, #20]
 80084f2:	6939      	ldr	r1, [r7, #16]
 80084f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084f6:	f001 fbef 	bl	8009cd8 <memcpy>
    NumBytesRead += NumBytesRem;
 80084fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	4413      	add	r3, r2
 8008500:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8008502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	4413      	add	r3, r2
 8008508:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8008512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	4413      	add	r3, r2
 8008518:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800851a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851c:	2b00      	cmp	r3, #0
 800851e:	d002      	beq.n	8008526 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008524:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8008526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008528:	4618      	mov	r0, r3
 800852a:	3730      	adds	r7, #48	; 0x30
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	2000cc38 	.word	0x2000cc38

08008534 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8008534:	b580      	push	{r7, lr}
 8008536:	b088      	sub	sp, #32
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	1c5a      	adds	r2, r3, #1
 8008548:	4613      	mov	r3, r2
 800854a:	005b      	lsls	r3, r3, #1
 800854c:	4413      	add	r3, r2
 800854e:	00db      	lsls	r3, r3, #3
 8008550:	4a1f      	ldr	r2, [pc, #124]	; (80085d0 <SEGGER_RTT_WriteNoLock+0x9c>)
 8008552:	4413      	add	r3, r2
 8008554:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	2b02      	cmp	r3, #2
 800855c:	d029      	beq.n	80085b2 <SEGGER_RTT_WriteNoLock+0x7e>
 800855e:	2b02      	cmp	r3, #2
 8008560:	d82e      	bhi.n	80085c0 <SEGGER_RTT_WriteNoLock+0x8c>
 8008562:	2b00      	cmp	r3, #0
 8008564:	d002      	beq.n	800856c <SEGGER_RTT_WriteNoLock+0x38>
 8008566:	2b01      	cmp	r3, #1
 8008568:	d013      	beq.n	8008592 <SEGGER_RTT_WriteNoLock+0x5e>
 800856a:	e029      	b.n	80085c0 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800856c:	6978      	ldr	r0, [r7, #20]
 800856e:	f7ff ff38 	bl	80083e2 <_GetAvailWriteSpace>
 8008572:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8008574:	693a      	ldr	r2, [r7, #16]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	429a      	cmp	r2, r3
 800857a:	d202      	bcs.n	8008582 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800857c:	2300      	movs	r3, #0
 800857e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8008580:	e021      	b.n	80085c6 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	69b9      	ldr	r1, [r7, #24]
 800858a:	6978      	ldr	r0, [r7, #20]
 800858c:	f7ff fee1 	bl	8008352 <_WriteNoCheck>
    break;
 8008590:	e019      	b.n	80085c6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8008592:	6978      	ldr	r0, [r7, #20]
 8008594:	f7ff ff25 	bl	80083e2 <_GetAvailWriteSpace>
 8008598:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	4293      	cmp	r3, r2
 80085a0:	bf28      	it	cs
 80085a2:	4613      	movcs	r3, r2
 80085a4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80085a6:	69fa      	ldr	r2, [r7, #28]
 80085a8:	69b9      	ldr	r1, [r7, #24]
 80085aa:	6978      	ldr	r0, [r7, #20]
 80085ac:	f7ff fed1 	bl	8008352 <_WriteNoCheck>
    break;
 80085b0:	e009      	b.n	80085c6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	69b9      	ldr	r1, [r7, #24]
 80085b6:	6978      	ldr	r0, [r7, #20]
 80085b8:	f7ff fe6e 	bl	8008298 <_WriteBlocking>
 80085bc:	61f8      	str	r0, [r7, #28]
    break;
 80085be:	e002      	b.n	80085c6 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80085c0:	2300      	movs	r3, #0
 80085c2:	61fb      	str	r3, [r7, #28]
    break;
 80085c4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80085c6:	69fb      	ldr	r3, [r7, #28]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3720      	adds	r7, #32
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	2000cc38 	.word	0x2000cc38

080085d4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b088      	sub	sp, #32
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80085e0:	4b0e      	ldr	r3, [pc, #56]	; (800861c <SEGGER_RTT_Write+0x48>)
 80085e2:	61fb      	str	r3, [r7, #28]
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d101      	bne.n	80085f2 <SEGGER_RTT_Write+0x1e>
 80085ee:	f7ff fdf9 	bl	80081e4 <_DoInit>
  SEGGER_RTT_LOCK();
 80085f2:	f3ef 8311 	mrs	r3, BASEPRI
 80085f6:	f04f 0120 	mov.w	r1, #32
 80085fa:	f381 8811 	msr	BASEPRI, r1
 80085fe:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	68b9      	ldr	r1, [r7, #8]
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f7ff ff95 	bl	8008534 <SEGGER_RTT_WriteNoLock>
 800860a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8008612:	697b      	ldr	r3, [r7, #20]
}
 8008614:	4618      	mov	r0, r3
 8008616:	3720      	adds	r7, #32
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	2000cc38 	.word	0x2000cc38

08008620 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8008620:	b580      	push	{r7, lr}
 8008622:	b088      	sub	sp, #32
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
 800862c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800862e:	4b3d      	ldr	r3, [pc, #244]	; (8008724 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8008630:	61bb      	str	r3, [r7, #24]
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	b2db      	uxtb	r3, r3
 8008638:	2b00      	cmp	r3, #0
 800863a:	d101      	bne.n	8008640 <SEGGER_RTT_AllocUpBuffer+0x20>
 800863c:	f7ff fdd2 	bl	80081e4 <_DoInit>
  SEGGER_RTT_LOCK();
 8008640:	f3ef 8311 	mrs	r3, BASEPRI
 8008644:	f04f 0120 	mov.w	r1, #32
 8008648:	f381 8811 	msr	BASEPRI, r1
 800864c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800864e:	4b35      	ldr	r3, [pc, #212]	; (8008724 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8008650:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8008652:	2300      	movs	r3, #0
 8008654:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8008656:	6939      	ldr	r1, [r7, #16]
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	1c5a      	adds	r2, r3, #1
 800865c:	4613      	mov	r3, r2
 800865e:	005b      	lsls	r3, r3, #1
 8008660:	4413      	add	r3, r2
 8008662:	00db      	lsls	r3, r3, #3
 8008664:	440b      	add	r3, r1
 8008666:	3304      	adds	r3, #4
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d008      	beq.n	8008680 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	3301      	adds	r3, #1
 8008672:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	69fa      	ldr	r2, [r7, #28]
 800867a:	429a      	cmp	r2, r3
 800867c:	dbeb      	blt.n	8008656 <SEGGER_RTT_AllocUpBuffer+0x36>
 800867e:	e000      	b.n	8008682 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8008680:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	69fa      	ldr	r2, [r7, #28]
 8008688:	429a      	cmp	r2, r3
 800868a:	da3f      	bge.n	800870c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800868c:	6939      	ldr	r1, [r7, #16]
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	1c5a      	adds	r2, r3, #1
 8008692:	4613      	mov	r3, r2
 8008694:	005b      	lsls	r3, r3, #1
 8008696:	4413      	add	r3, r2
 8008698:	00db      	lsls	r3, r3, #3
 800869a:	440b      	add	r3, r1
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80086a0:	6939      	ldr	r1, [r7, #16]
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	1c5a      	adds	r2, r3, #1
 80086a6:	4613      	mov	r3, r2
 80086a8:	005b      	lsls	r3, r3, #1
 80086aa:	4413      	add	r3, r2
 80086ac:	00db      	lsls	r3, r3, #3
 80086ae:	440b      	add	r3, r1
 80086b0:	3304      	adds	r3, #4
 80086b2:	68ba      	ldr	r2, [r7, #8]
 80086b4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80086b6:	6939      	ldr	r1, [r7, #16]
 80086b8:	69fa      	ldr	r2, [r7, #28]
 80086ba:	4613      	mov	r3, r2
 80086bc:	005b      	lsls	r3, r3, #1
 80086be:	4413      	add	r3, r2
 80086c0:	00db      	lsls	r3, r3, #3
 80086c2:	440b      	add	r3, r1
 80086c4:	3320      	adds	r3, #32
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80086ca:	6939      	ldr	r1, [r7, #16]
 80086cc:	69fa      	ldr	r2, [r7, #28]
 80086ce:	4613      	mov	r3, r2
 80086d0:	005b      	lsls	r3, r3, #1
 80086d2:	4413      	add	r3, r2
 80086d4:	00db      	lsls	r3, r3, #3
 80086d6:	440b      	add	r3, r1
 80086d8:	3328      	adds	r3, #40	; 0x28
 80086da:	2200      	movs	r2, #0
 80086dc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80086de:	6939      	ldr	r1, [r7, #16]
 80086e0:	69fa      	ldr	r2, [r7, #28]
 80086e2:	4613      	mov	r3, r2
 80086e4:	005b      	lsls	r3, r3, #1
 80086e6:	4413      	add	r3, r2
 80086e8:	00db      	lsls	r3, r3, #3
 80086ea:	440b      	add	r3, r1
 80086ec:	3324      	adds	r3, #36	; 0x24
 80086ee:	2200      	movs	r2, #0
 80086f0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80086f2:	6939      	ldr	r1, [r7, #16]
 80086f4:	69fa      	ldr	r2, [r7, #28]
 80086f6:	4613      	mov	r3, r2
 80086f8:	005b      	lsls	r3, r3, #1
 80086fa:	4413      	add	r3, r2
 80086fc:	00db      	lsls	r3, r3, #3
 80086fe:	440b      	add	r3, r1
 8008700:	332c      	adds	r3, #44	; 0x2c
 8008702:	683a      	ldr	r2, [r7, #0]
 8008704:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008706:	f3bf 8f5f 	dmb	sy
 800870a:	e002      	b.n	8008712 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800870c:	f04f 33ff 	mov.w	r3, #4294967295
 8008710:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8008718:	69fb      	ldr	r3, [r7, #28]
}
 800871a:	4618      	mov	r0, r3
 800871c:	3720      	adds	r7, #32
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	2000cc38 	.word	0x2000cc38

08008728 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8008728:	b580      	push	{r7, lr}
 800872a:	b08a      	sub	sp, #40	; 0x28
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
 8008734:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8008736:	4b21      	ldr	r3, [pc, #132]	; (80087bc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8008738:	623b      	str	r3, [r7, #32]
 800873a:	6a3b      	ldr	r3, [r7, #32]
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	b2db      	uxtb	r3, r3
 8008740:	2b00      	cmp	r3, #0
 8008742:	d101      	bne.n	8008748 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8008744:	f7ff fd4e 	bl	80081e4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008748:	4b1c      	ldr	r3, [pc, #112]	; (80087bc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800874a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2b02      	cmp	r3, #2
 8008750:	d82c      	bhi.n	80087ac <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8008752:	f3ef 8311 	mrs	r3, BASEPRI
 8008756:	f04f 0120 	mov.w	r1, #32
 800875a:	f381 8811 	msr	BASEPRI, r1
 800875e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	4613      	mov	r3, r2
 8008764:	005b      	lsls	r3, r3, #1
 8008766:	4413      	add	r3, r2
 8008768:	00db      	lsls	r3, r3, #3
 800876a:	3360      	adds	r3, #96	; 0x60
 800876c:	69fa      	ldr	r2, [r7, #28]
 800876e:	4413      	add	r3, r2
 8008770:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00e      	beq.n	8008796 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	683a      	ldr	r2, [r7, #0]
 8008788:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	2200      	movs	r2, #0
 800878e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	2200      	movs	r2, #0
 8008794:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800879a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800879c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80087a6:	2300      	movs	r3, #0
 80087a8:	627b      	str	r3, [r7, #36]	; 0x24
 80087aa:	e002      	b.n	80087b2 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80087ac:	f04f 33ff 	mov.w	r3, #4294967295
 80087b0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80087b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3728      	adds	r7, #40	; 0x28
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	2000cc38 	.word	0x2000cc38

080087c0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80087c0:	b480      	push	{r7}
 80087c2:	b087      	sub	sp, #28
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	1c5a      	adds	r2, r3, #1
 80087d4:	60fa      	str	r2, [r7, #12]
 80087d6:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2b80      	cmp	r3, #128	; 0x80
 80087dc:	d90a      	bls.n	80087f4 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80087de:	2380      	movs	r3, #128	; 0x80
 80087e0:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80087e2:	e007      	b.n	80087f4 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80087e4:	68ba      	ldr	r2, [r7, #8]
 80087e6:	1c53      	adds	r3, r2, #1
 80087e8:	60bb      	str	r3, [r7, #8]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	1c59      	adds	r1, r3, #1
 80087ee:	60f9      	str	r1, [r7, #12]
 80087f0:	7812      	ldrb	r2, [r2, #0]
 80087f2:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	1e5a      	subs	r2, r3, #1
 80087f8:	607a      	str	r2, [r7, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <_EncodeStr+0x46>
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1ee      	bne.n	80087e4 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	1ad3      	subs	r3, r2, r3
 800880c:	b2da      	uxtb	r2, r3
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8008812:	68fb      	ldr	r3, [r7, #12]
}
 8008814:	4618      	mov	r0, r3
 8008816:	371c      	adds	r7, #28
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	3307      	adds	r3, #7
}
 800882c:	4618      	mov	r0, r3
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800883e:	4b35      	ldr	r3, [pc, #212]	; (8008914 <_HandleIncomingPacket+0xdc>)
 8008840:	7e1b      	ldrb	r3, [r3, #24]
 8008842:	4618      	mov	r0, r3
 8008844:	1cfb      	adds	r3, r7, #3
 8008846:	2201      	movs	r2, #1
 8008848:	4619      	mov	r1, r3
 800884a:	f7ff fded 	bl	8008428 <SEGGER_RTT_ReadNoLock>
 800884e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d052      	beq.n	80088fc <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8008856:	78fb      	ldrb	r3, [r7, #3]
 8008858:	2b80      	cmp	r3, #128	; 0x80
 800885a:	d031      	beq.n	80088c0 <_HandleIncomingPacket+0x88>
 800885c:	2b80      	cmp	r3, #128	; 0x80
 800885e:	dc40      	bgt.n	80088e2 <_HandleIncomingPacket+0xaa>
 8008860:	2b07      	cmp	r3, #7
 8008862:	dc15      	bgt.n	8008890 <_HandleIncomingPacket+0x58>
 8008864:	2b00      	cmp	r3, #0
 8008866:	dd3c      	ble.n	80088e2 <_HandleIncomingPacket+0xaa>
 8008868:	3b01      	subs	r3, #1
 800886a:	2b06      	cmp	r3, #6
 800886c:	d839      	bhi.n	80088e2 <_HandleIncomingPacket+0xaa>
 800886e:	a201      	add	r2, pc, #4	; (adr r2, 8008874 <_HandleIncomingPacket+0x3c>)
 8008870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008874:	08008897 	.word	0x08008897
 8008878:	0800889d 	.word	0x0800889d
 800887c:	080088a3 	.word	0x080088a3
 8008880:	080088a9 	.word	0x080088a9
 8008884:	080088af 	.word	0x080088af
 8008888:	080088b5 	.word	0x080088b5
 800888c:	080088bb 	.word	0x080088bb
 8008890:	2b7f      	cmp	r3, #127	; 0x7f
 8008892:	d035      	beq.n	8008900 <_HandleIncomingPacket+0xc8>
 8008894:	e025      	b.n	80088e2 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8008896:	f000 fcdd 	bl	8009254 <SEGGER_SYSVIEW_Start>
      break;
 800889a:	e036      	b.n	800890a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800889c:	f000 fd94 	bl	80093c8 <SEGGER_SYSVIEW_Stop>
      break;
 80088a0:	e033      	b.n	800890a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80088a2:	f000 ff6d 	bl	8009780 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80088a6:	e030      	b.n	800890a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80088a8:	f000 ff32 	bl	8009710 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80088ac:	e02d      	b.n	800890a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80088ae:	f000 fdb1 	bl	8009414 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80088b2:	e02a      	b.n	800890a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80088b4:	f001 f930 	bl	8009b18 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80088b8:	e027      	b.n	800890a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80088ba:	f001 f90f 	bl	8009adc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80088be:	e024      	b.n	800890a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80088c0:	4b14      	ldr	r3, [pc, #80]	; (8008914 <_HandleIncomingPacket+0xdc>)
 80088c2:	7e1b      	ldrb	r3, [r3, #24]
 80088c4:	4618      	mov	r0, r3
 80088c6:	1cfb      	adds	r3, r7, #3
 80088c8:	2201      	movs	r2, #1
 80088ca:	4619      	mov	r1, r3
 80088cc:	f7ff fdac 	bl	8008428 <SEGGER_RTT_ReadNoLock>
 80088d0:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d015      	beq.n	8008904 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80088d8:	78fb      	ldrb	r3, [r7, #3]
 80088da:	4618      	mov	r0, r3
 80088dc:	f001 f874 	bl	80099c8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80088e0:	e010      	b.n	8008904 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80088e2:	78fb      	ldrb	r3, [r7, #3]
 80088e4:	b25b      	sxtb	r3, r3
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	da0e      	bge.n	8008908 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80088ea:	4b0a      	ldr	r3, [pc, #40]	; (8008914 <_HandleIncomingPacket+0xdc>)
 80088ec:	7e1b      	ldrb	r3, [r3, #24]
 80088ee:	4618      	mov	r0, r3
 80088f0:	1cfb      	adds	r3, r7, #3
 80088f2:	2201      	movs	r2, #1
 80088f4:	4619      	mov	r1, r3
 80088f6:	f7ff fd97 	bl	8008428 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80088fa:	e005      	b.n	8008908 <_HandleIncomingPacket+0xd0>
    }
  }
 80088fc:	bf00      	nop
 80088fe:	e004      	b.n	800890a <_HandleIncomingPacket+0xd2>
      break;
 8008900:	bf00      	nop
 8008902:	e002      	b.n	800890a <_HandleIncomingPacket+0xd2>
      break;
 8008904:	bf00      	nop
 8008906:	e000      	b.n	800890a <_HandleIncomingPacket+0xd2>
      break;
 8008908:	bf00      	nop
}
 800890a:	bf00      	nop
 800890c:	3708      	adds	r7, #8
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	2000d4f8 	.word	0x2000d4f8

08008918 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8008918:	b580      	push	{r7, lr}
 800891a:	b08c      	sub	sp, #48	; 0x30
 800891c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800891e:	2301      	movs	r3, #1
 8008920:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8008922:	1d3b      	adds	r3, r7, #4
 8008924:	3301      	adds	r3, #1
 8008926:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800892c:	4b31      	ldr	r3, [pc, #196]	; (80089f4 <_TrySendOverflowPacket+0xdc>)
 800892e:	695b      	ldr	r3, [r3, #20]
 8008930:	62bb      	str	r3, [r7, #40]	; 0x28
 8008932:	e00b      	b.n	800894c <_TrySendOverflowPacket+0x34>
 8008934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008936:	b2da      	uxtb	r2, r3
 8008938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893a:	1c59      	adds	r1, r3, #1
 800893c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800893e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008942:	b2d2      	uxtb	r2, r2
 8008944:	701a      	strb	r2, [r3, #0]
 8008946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008948:	09db      	lsrs	r3, r3, #7
 800894a:	62bb      	str	r3, [r7, #40]	; 0x28
 800894c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894e:	2b7f      	cmp	r3, #127	; 0x7f
 8008950:	d8f0      	bhi.n	8008934 <_TrySendOverflowPacket+0x1c>
 8008952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008954:	1c5a      	adds	r2, r3, #1
 8008956:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800895a:	b2d2      	uxtb	r2, r2
 800895c:	701a      	strb	r2, [r3, #0]
 800895e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008960:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008962:	4b25      	ldr	r3, [pc, #148]	; (80089f8 <_TrySendOverflowPacket+0xe0>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8008968:	4b22      	ldr	r3, [pc, #136]	; (80089f4 <_TrySendOverflowPacket+0xdc>)
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	69ba      	ldr	r2, [r7, #24]
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	627b      	str	r3, [r7, #36]	; 0x24
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	623b      	str	r3, [r7, #32]
 800897a:	e00b      	b.n	8008994 <_TrySendOverflowPacket+0x7c>
 800897c:	6a3b      	ldr	r3, [r7, #32]
 800897e:	b2da      	uxtb	r2, r3
 8008980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008982:	1c59      	adds	r1, r3, #1
 8008984:	6279      	str	r1, [r7, #36]	; 0x24
 8008986:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800898a:	b2d2      	uxtb	r2, r2
 800898c:	701a      	strb	r2, [r3, #0]
 800898e:	6a3b      	ldr	r3, [r7, #32]
 8008990:	09db      	lsrs	r3, r3, #7
 8008992:	623b      	str	r3, [r7, #32]
 8008994:	6a3b      	ldr	r3, [r7, #32]
 8008996:	2b7f      	cmp	r3, #127	; 0x7f
 8008998:	d8f0      	bhi.n	800897c <_TrySendOverflowPacket+0x64>
 800899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899c:	1c5a      	adds	r2, r3, #1
 800899e:	627a      	str	r2, [r7, #36]	; 0x24
 80089a0:	6a3a      	ldr	r2, [r7, #32]
 80089a2:	b2d2      	uxtb	r2, r2
 80089a4:	701a      	strb	r2, [r3, #0]
 80089a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80089aa:	4b12      	ldr	r3, [pc, #72]	; (80089f4 <_TrySendOverflowPacket+0xdc>)
 80089ac:	785b      	ldrb	r3, [r3, #1]
 80089ae:	4618      	mov	r0, r3
 80089b0:	1d3b      	adds	r3, r7, #4
 80089b2:	69fa      	ldr	r2, [r7, #28]
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	461a      	mov	r2, r3
 80089b8:	1d3b      	adds	r3, r7, #4
 80089ba:	4619      	mov	r1, r3
 80089bc:	f7f7 fc10 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80089c0:	4603      	mov	r3, r0
 80089c2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d009      	beq.n	80089de <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80089ca:	4a0a      	ldr	r2, [pc, #40]	; (80089f4 <_TrySendOverflowPacket+0xdc>)
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80089d0:	4b08      	ldr	r3, [pc, #32]	; (80089f4 <_TrySendOverflowPacket+0xdc>)
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	3b01      	subs	r3, #1
 80089d6:	b2da      	uxtb	r2, r3
 80089d8:	4b06      	ldr	r3, [pc, #24]	; (80089f4 <_TrySendOverflowPacket+0xdc>)
 80089da:	701a      	strb	r2, [r3, #0]
 80089dc:	e004      	b.n	80089e8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80089de:	4b05      	ldr	r3, [pc, #20]	; (80089f4 <_TrySendOverflowPacket+0xdc>)
 80089e0:	695b      	ldr	r3, [r3, #20]
 80089e2:	3301      	adds	r3, #1
 80089e4:	4a03      	ldr	r2, [pc, #12]	; (80089f4 <_TrySendOverflowPacket+0xdc>)
 80089e6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80089e8:	693b      	ldr	r3, [r7, #16]
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3730      	adds	r7, #48	; 0x30
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	2000d4f8 	.word	0x2000d4f8
 80089f8:	e0001004 	.word	0xe0001004

080089fc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b08a      	sub	sp, #40	; 0x28
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8008a08:	4b98      	ldr	r3, [pc, #608]	; (8008c6c <_SendPacket+0x270>)
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d010      	beq.n	8008a32 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8008a10:	4b96      	ldr	r3, [pc, #600]	; (8008c6c <_SendPacket+0x270>)
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f000 812d 	beq.w	8008c74 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8008a1a:	4b94      	ldr	r3, [pc, #592]	; (8008c6c <_SendPacket+0x270>)
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d109      	bne.n	8008a36 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8008a22:	f7ff ff79 	bl	8008918 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8008a26:	4b91      	ldr	r3, [pc, #580]	; (8008c6c <_SendPacket+0x270>)
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	f040 8124 	bne.w	8008c78 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8008a30:	e001      	b.n	8008a36 <_SendPacket+0x3a>
    goto Send;
 8008a32:	bf00      	nop
 8008a34:	e000      	b.n	8008a38 <_SendPacket+0x3c>
Send:
 8008a36:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2b1f      	cmp	r3, #31
 8008a3c:	d809      	bhi.n	8008a52 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8008a3e:	4b8b      	ldr	r3, [pc, #556]	; (8008c6c <_SendPacket+0x270>)
 8008a40:	69da      	ldr	r2, [r3, #28]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	fa22 f303 	lsr.w	r3, r2, r3
 8008a48:	f003 0301 	and.w	r3, r3, #1
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f040 8115 	bne.w	8008c7c <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2b17      	cmp	r3, #23
 8008a56:	d807      	bhi.n	8008a68 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	60fb      	str	r3, [r7, #12]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	b2da      	uxtb	r2, r3
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	701a      	strb	r2, [r3, #0]
 8008a66:	e0c4      	b.n	8008bf2 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	1ad3      	subs	r3, r2, r3
 8008a6e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	2b7f      	cmp	r3, #127	; 0x7f
 8008a74:	d912      	bls.n	8008a9c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	09da      	lsrs	r2, r3, #7
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	60fb      	str	r3, [r7, #12]
 8008a80:	b2d2      	uxtb	r2, r2
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	3a01      	subs	r2, #1
 8008a8e:	60fa      	str	r2, [r7, #12]
 8008a90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008a94:	b2da      	uxtb	r2, r3
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	701a      	strb	r2, [r3, #0]
 8008a9a:	e006      	b.n	8008aaa <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	60fb      	str	r3, [r7, #12]
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	b2da      	uxtb	r2, r3
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2b7e      	cmp	r3, #126	; 0x7e
 8008aae:	d807      	bhi.n	8008ac0 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	60fb      	str	r3, [r7, #12]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	701a      	strb	r2, [r3, #0]
 8008abe:	e098      	b.n	8008bf2 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ac6:	d212      	bcs.n	8008aee <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	09da      	lsrs	r2, r3, #7
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	60fb      	str	r3, [r7, #12]
 8008ad2:	b2d2      	uxtb	r2, r2
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	3a01      	subs	r2, #1
 8008ae0:	60fa      	str	r2, [r7, #12]
 8008ae2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008ae6:	b2da      	uxtb	r2, r3
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	701a      	strb	r2, [r3, #0]
 8008aec:	e081      	b.n	8008bf2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008af4:	d21d      	bcs.n	8008b32 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	0b9a      	lsrs	r2, r3, #14
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	3b01      	subs	r3, #1
 8008afe:	60fb      	str	r3, [r7, #12]
 8008b00:	b2d2      	uxtb	r2, r2
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	09db      	lsrs	r3, r3, #7
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	3a01      	subs	r2, #1
 8008b10:	60fa      	str	r2, [r7, #12]
 8008b12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b16:	b2da      	uxtb	r2, r3
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	3a01      	subs	r2, #1
 8008b24:	60fa      	str	r2, [r7, #12]
 8008b26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b2a:	b2da      	uxtb	r2, r3
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	701a      	strb	r2, [r3, #0]
 8008b30:	e05f      	b.n	8008bf2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b38:	d228      	bcs.n	8008b8c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	0d5a      	lsrs	r2, r3, #21
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	3b01      	subs	r3, #1
 8008b42:	60fb      	str	r3, [r7, #12]
 8008b44:	b2d2      	uxtb	r2, r2
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	0b9b      	lsrs	r3, r3, #14
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	3a01      	subs	r2, #1
 8008b54:	60fa      	str	r2, [r7, #12]
 8008b56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	09db      	lsrs	r3, r3, #7
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	3a01      	subs	r2, #1
 8008b6a:	60fa      	str	r2, [r7, #12]
 8008b6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	3a01      	subs	r2, #1
 8008b7e:	60fa      	str	r2, [r7, #12]
 8008b80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	701a      	strb	r2, [r3, #0]
 8008b8a:	e032      	b.n	8008bf2 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	0f1a      	lsrs	r2, r3, #28
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	3b01      	subs	r3, #1
 8008b94:	60fb      	str	r3, [r7, #12]
 8008b96:	b2d2      	uxtb	r2, r2
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	0d5b      	lsrs	r3, r3, #21
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	3a01      	subs	r2, #1
 8008ba6:	60fa      	str	r2, [r7, #12]
 8008ba8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bac:	b2da      	uxtb	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	0b9b      	lsrs	r3, r3, #14
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	3a01      	subs	r2, #1
 8008bbc:	60fa      	str	r2, [r7, #12]
 8008bbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	09db      	lsrs	r3, r3, #7
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	3a01      	subs	r2, #1
 8008bd2:	60fa      	str	r2, [r7, #12]
 8008bd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bd8:	b2da      	uxtb	r2, r3
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	3a01      	subs	r2, #1
 8008be6:	60fa      	str	r2, [r7, #12]
 8008be8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bec:	b2da      	uxtb	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008bf2:	4b1f      	ldr	r3, [pc, #124]	; (8008c70 <_SendPacket+0x274>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8008bf8:	4b1c      	ldr	r3, [pc, #112]	; (8008c6c <_SendPacket+0x270>)
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	69ba      	ldr	r2, [r7, #24]
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	627b      	str	r3, [r7, #36]	; 0x24
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	623b      	str	r3, [r7, #32]
 8008c0a:	e00b      	b.n	8008c24 <_SendPacket+0x228>
 8008c0c:	6a3b      	ldr	r3, [r7, #32]
 8008c0e:	b2da      	uxtb	r2, r3
 8008c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c12:	1c59      	adds	r1, r3, #1
 8008c14:	6279      	str	r1, [r7, #36]	; 0x24
 8008c16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008c1a:	b2d2      	uxtb	r2, r2
 8008c1c:	701a      	strb	r2, [r3, #0]
 8008c1e:	6a3b      	ldr	r3, [r7, #32]
 8008c20:	09db      	lsrs	r3, r3, #7
 8008c22:	623b      	str	r3, [r7, #32]
 8008c24:	6a3b      	ldr	r3, [r7, #32]
 8008c26:	2b7f      	cmp	r3, #127	; 0x7f
 8008c28:	d8f0      	bhi.n	8008c0c <_SendPacket+0x210>
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2c:	1c5a      	adds	r2, r3, #1
 8008c2e:	627a      	str	r2, [r7, #36]	; 0x24
 8008c30:	6a3a      	ldr	r2, [r7, #32]
 8008c32:	b2d2      	uxtb	r2, r2
 8008c34:	701a      	strb	r2, [r3, #0]
 8008c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c38:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8008c3a:	4b0c      	ldr	r3, [pc, #48]	; (8008c6c <_SendPacket+0x270>)
 8008c3c:	785b      	ldrb	r3, [r3, #1]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	461a      	mov	r2, r3
 8008c48:	68f9      	ldr	r1, [r7, #12]
 8008c4a:	f7f7 fac9 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8008c4e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d003      	beq.n	8008c5e <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8008c56:	4a05      	ldr	r2, [pc, #20]	; (8008c6c <_SendPacket+0x270>)
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	60d3      	str	r3, [r2, #12]
 8008c5c:	e00f      	b.n	8008c7e <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8008c5e:	4b03      	ldr	r3, [pc, #12]	; (8008c6c <_SendPacket+0x270>)
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	3301      	adds	r3, #1
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	4b01      	ldr	r3, [pc, #4]	; (8008c6c <_SendPacket+0x270>)
 8008c68:	701a      	strb	r2, [r3, #0]
 8008c6a:	e008      	b.n	8008c7e <_SendPacket+0x282>
 8008c6c:	2000d4f8 	.word	0x2000d4f8
 8008c70:	e0001004 	.word	0xe0001004
    goto SendDone;
 8008c74:	bf00      	nop
 8008c76:	e002      	b.n	8008c7e <_SendPacket+0x282>
      goto SendDone;
 8008c78:	bf00      	nop
 8008c7a:	e000      	b.n	8008c7e <_SendPacket+0x282>
      goto SendDone;
 8008c7c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8008c7e:	4b14      	ldr	r3, [pc, #80]	; (8008cd0 <_SendPacket+0x2d4>)
 8008c80:	7e1b      	ldrb	r3, [r3, #24]
 8008c82:	4619      	mov	r1, r3
 8008c84:	4a13      	ldr	r2, [pc, #76]	; (8008cd4 <_SendPacket+0x2d8>)
 8008c86:	460b      	mov	r3, r1
 8008c88:	005b      	lsls	r3, r3, #1
 8008c8a:	440b      	add	r3, r1
 8008c8c:	00db      	lsls	r3, r3, #3
 8008c8e:	4413      	add	r3, r2
 8008c90:	336c      	adds	r3, #108	; 0x6c
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	4b0e      	ldr	r3, [pc, #56]	; (8008cd0 <_SendPacket+0x2d4>)
 8008c96:	7e1b      	ldrb	r3, [r3, #24]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	490e      	ldr	r1, [pc, #56]	; (8008cd4 <_SendPacket+0x2d8>)
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	005b      	lsls	r3, r3, #1
 8008ca0:	4403      	add	r3, r0
 8008ca2:	00db      	lsls	r3, r3, #3
 8008ca4:	440b      	add	r3, r1
 8008ca6:	3370      	adds	r3, #112	; 0x70
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d00b      	beq.n	8008cc6 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8008cae:	4b08      	ldr	r3, [pc, #32]	; (8008cd0 <_SendPacket+0x2d4>)
 8008cb0:	789b      	ldrb	r3, [r3, #2]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d107      	bne.n	8008cc6 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8008cb6:	4b06      	ldr	r3, [pc, #24]	; (8008cd0 <_SendPacket+0x2d4>)
 8008cb8:	2201      	movs	r2, #1
 8008cba:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8008cbc:	f7ff fdbc 	bl	8008838 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8008cc0:	4b03      	ldr	r3, [pc, #12]	; (8008cd0 <_SendPacket+0x2d4>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8008cc6:	bf00      	nop
 8008cc8:	3728      	adds	r7, #40	; 0x28
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	2000d4f8 	.word	0x2000d4f8
 8008cd4:	2000cc38 	.word	0x2000cc38

08008cd8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b086      	sub	sp, #24
 8008cdc:	af02      	add	r7, sp, #8
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	607a      	str	r2, [r7, #4]
 8008ce4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008cec:	4917      	ldr	r1, [pc, #92]	; (8008d4c <SEGGER_SYSVIEW_Init+0x74>)
 8008cee:	4818      	ldr	r0, [pc, #96]	; (8008d50 <SEGGER_SYSVIEW_Init+0x78>)
 8008cf0:	f7ff fc96 	bl	8008620 <SEGGER_RTT_AllocUpBuffer>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	b2da      	uxtb	r2, r3
 8008cf8:	4b16      	ldr	r3, [pc, #88]	; (8008d54 <SEGGER_SYSVIEW_Init+0x7c>)
 8008cfa:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8008cfc:	4b15      	ldr	r3, [pc, #84]	; (8008d54 <SEGGER_SYSVIEW_Init+0x7c>)
 8008cfe:	785a      	ldrb	r2, [r3, #1]
 8008d00:	4b14      	ldr	r3, [pc, #80]	; (8008d54 <SEGGER_SYSVIEW_Init+0x7c>)
 8008d02:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8008d04:	4b13      	ldr	r3, [pc, #76]	; (8008d54 <SEGGER_SYSVIEW_Init+0x7c>)
 8008d06:	7e1b      	ldrb	r3, [r3, #24]
 8008d08:	4618      	mov	r0, r3
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	9300      	str	r3, [sp, #0]
 8008d0e:	2308      	movs	r3, #8
 8008d10:	4a11      	ldr	r2, [pc, #68]	; (8008d58 <SEGGER_SYSVIEW_Init+0x80>)
 8008d12:	490f      	ldr	r1, [pc, #60]	; (8008d50 <SEGGER_SYSVIEW_Init+0x78>)
 8008d14:	f7ff fd08 	bl	8008728 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8008d18:	4b0e      	ldr	r3, [pc, #56]	; (8008d54 <SEGGER_SYSVIEW_Init+0x7c>)
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008d1e:	4b0f      	ldr	r3, [pc, #60]	; (8008d5c <SEGGER_SYSVIEW_Init+0x84>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a0c      	ldr	r2, [pc, #48]	; (8008d54 <SEGGER_SYSVIEW_Init+0x7c>)
 8008d24:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8008d26:	4a0b      	ldr	r2, [pc, #44]	; (8008d54 <SEGGER_SYSVIEW_Init+0x7c>)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8008d2c:	4a09      	ldr	r2, [pc, #36]	; (8008d54 <SEGGER_SYSVIEW_Init+0x7c>)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8008d32:	4a08      	ldr	r2, [pc, #32]	; (8008d54 <SEGGER_SYSVIEW_Init+0x7c>)
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8008d38:	4a06      	ldr	r2, [pc, #24]	; (8008d54 <SEGGER_SYSVIEW_Init+0x7c>)
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8008d3e:	4b05      	ldr	r3, [pc, #20]	; (8008d54 <SEGGER_SYSVIEW_Init+0x7c>)
 8008d40:	2200      	movs	r2, #0
 8008d42:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8008d44:	bf00      	nop
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	2000d0f0 	.word	0x2000d0f0
 8008d50:	0800b43c 	.word	0x0800b43c
 8008d54:	2000d4f8 	.word	0x2000d4f8
 8008d58:	2000d4f0 	.word	0x2000d4f0
 8008d5c:	e0001004 	.word	0xe0001004

08008d60 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8008d68:	4a04      	ldr	r2, [pc, #16]	; (8008d7c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6113      	str	r3, [r2, #16]
}
 8008d6e:	bf00      	nop
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	2000d4f8 	.word	0x2000d4f8

08008d80 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008d88:	f3ef 8311 	mrs	r3, BASEPRI
 8008d8c:	f04f 0120 	mov.w	r1, #32
 8008d90:	f381 8811 	msr	BASEPRI, r1
 8008d94:	60fb      	str	r3, [r7, #12]
 8008d96:	4808      	ldr	r0, [pc, #32]	; (8008db8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8008d98:	f7ff fd42 	bl	8008820 <_PreparePacket>
 8008d9c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	68b9      	ldr	r1, [r7, #8]
 8008da2:	68b8      	ldr	r0, [r7, #8]
 8008da4:	f7ff fe2a 	bl	80089fc <_SendPacket>
  RECORD_END();
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f383 8811 	msr	BASEPRI, r3
}
 8008dae:	bf00      	nop
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	2000d528 	.word	0x2000d528

08008dbc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b088      	sub	sp, #32
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008dc6:	f3ef 8311 	mrs	r3, BASEPRI
 8008dca:	f04f 0120 	mov.w	r1, #32
 8008dce:	f381 8811 	msr	BASEPRI, r1
 8008dd2:	617b      	str	r3, [r7, #20]
 8008dd4:	4816      	ldr	r0, [pc, #88]	; (8008e30 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8008dd6:	f7ff fd23 	bl	8008820 <_PreparePacket>
 8008dda:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	61fb      	str	r3, [r7, #28]
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	61bb      	str	r3, [r7, #24]
 8008de8:	e00b      	b.n	8008e02 <SEGGER_SYSVIEW_RecordU32+0x46>
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	b2da      	uxtb	r2, r3
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	1c59      	adds	r1, r3, #1
 8008df2:	61f9      	str	r1, [r7, #28]
 8008df4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008df8:	b2d2      	uxtb	r2, r2
 8008dfa:	701a      	strb	r2, [r3, #0]
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	09db      	lsrs	r3, r3, #7
 8008e00:	61bb      	str	r3, [r7, #24]
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	2b7f      	cmp	r3, #127	; 0x7f
 8008e06:	d8f0      	bhi.n	8008dea <SEGGER_SYSVIEW_RecordU32+0x2e>
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	1c5a      	adds	r2, r3, #1
 8008e0c:	61fa      	str	r2, [r7, #28]
 8008e0e:	69ba      	ldr	r2, [r7, #24]
 8008e10:	b2d2      	uxtb	r2, r2
 8008e12:	701a      	strb	r2, [r3, #0]
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	68f9      	ldr	r1, [r7, #12]
 8008e1c:	6938      	ldr	r0, [r7, #16]
 8008e1e:	f7ff fded 	bl	80089fc <_SendPacket>
  RECORD_END();
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	f383 8811 	msr	BASEPRI, r3
}
 8008e28:	bf00      	nop
 8008e2a:	3720      	adds	r7, #32
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	2000d528 	.word	0x2000d528

08008e34 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b08c      	sub	sp, #48	; 0x30
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8008e40:	f3ef 8311 	mrs	r3, BASEPRI
 8008e44:	f04f 0120 	mov.w	r1, #32
 8008e48:	f381 8811 	msr	BASEPRI, r1
 8008e4c:	61fb      	str	r3, [r7, #28]
 8008e4e:	4825      	ldr	r0, [pc, #148]	; (8008ee4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8008e50:	f7ff fce6 	bl	8008820 <_PreparePacket>
 8008e54:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e62:	e00b      	b.n	8008e7c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8008e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e66:	b2da      	uxtb	r2, r3
 8008e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6a:	1c59      	adds	r1, r3, #1
 8008e6c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008e6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008e72:	b2d2      	uxtb	r2, r2
 8008e74:	701a      	strb	r2, [r3, #0]
 8008e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e78:	09db      	lsrs	r3, r3, #7
 8008e7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7e:	2b7f      	cmp	r3, #127	; 0x7f
 8008e80:	d8f0      	bhi.n	8008e64 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8008e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e84:	1c5a      	adds	r2, r3, #1
 8008e86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e8a:	b2d2      	uxtb	r2, r2
 8008e8c:	701a      	strb	r2, [r3, #0]
 8008e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e90:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	627b      	str	r3, [r7, #36]	; 0x24
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	623b      	str	r3, [r7, #32]
 8008e9a:	e00b      	b.n	8008eb4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	b2da      	uxtb	r2, r3
 8008ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea2:	1c59      	adds	r1, r3, #1
 8008ea4:	6279      	str	r1, [r7, #36]	; 0x24
 8008ea6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008eaa:	b2d2      	uxtb	r2, r2
 8008eac:	701a      	strb	r2, [r3, #0]
 8008eae:	6a3b      	ldr	r3, [r7, #32]
 8008eb0:	09db      	lsrs	r3, r3, #7
 8008eb2:	623b      	str	r3, [r7, #32]
 8008eb4:	6a3b      	ldr	r3, [r7, #32]
 8008eb6:	2b7f      	cmp	r3, #127	; 0x7f
 8008eb8:	d8f0      	bhi.n	8008e9c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	1c5a      	adds	r2, r3, #1
 8008ebe:	627a      	str	r2, [r7, #36]	; 0x24
 8008ec0:	6a3a      	ldr	r2, [r7, #32]
 8008ec2:	b2d2      	uxtb	r2, r2
 8008ec4:	701a      	strb	r2, [r3, #0]
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	6979      	ldr	r1, [r7, #20]
 8008ece:	69b8      	ldr	r0, [r7, #24]
 8008ed0:	f7ff fd94 	bl	80089fc <_SendPacket>
  RECORD_END();
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	f383 8811 	msr	BASEPRI, r3
}
 8008eda:	bf00      	nop
 8008edc:	3730      	adds	r7, #48	; 0x30
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	2000d528 	.word	0x2000d528

08008ee8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b08e      	sub	sp, #56	; 0x38
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	607a      	str	r2, [r7, #4]
 8008ef4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8008ef6:	f3ef 8311 	mrs	r3, BASEPRI
 8008efa:	f04f 0120 	mov.w	r1, #32
 8008efe:	f381 8811 	msr	BASEPRI, r1
 8008f02:	61fb      	str	r3, [r7, #28]
 8008f04:	4832      	ldr	r0, [pc, #200]	; (8008fd0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8008f06:	f7ff fc8b 	bl	8008820 <_PreparePacket>
 8008f0a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	637b      	str	r3, [r7, #52]	; 0x34
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	633b      	str	r3, [r7, #48]	; 0x30
 8008f18:	e00b      	b.n	8008f32 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1c:	b2da      	uxtb	r2, r3
 8008f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f20:	1c59      	adds	r1, r3, #1
 8008f22:	6379      	str	r1, [r7, #52]	; 0x34
 8008f24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f28:	b2d2      	uxtb	r2, r2
 8008f2a:	701a      	strb	r2, [r3, #0]
 8008f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2e:	09db      	lsrs	r3, r3, #7
 8008f30:	633b      	str	r3, [r7, #48]	; 0x30
 8008f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f34:	2b7f      	cmp	r3, #127	; 0x7f
 8008f36:	d8f0      	bhi.n	8008f1a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8008f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f3a:	1c5a      	adds	r2, r3, #1
 8008f3c:	637a      	str	r2, [r7, #52]	; 0x34
 8008f3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f40:	b2d2      	uxtb	r2, r2
 8008f42:	701a      	strb	r2, [r3, #0]
 8008f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f46:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f50:	e00b      	b.n	8008f6a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8008f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f54:	b2da      	uxtb	r2, r3
 8008f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f58:	1c59      	adds	r1, r3, #1
 8008f5a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008f5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f60:	b2d2      	uxtb	r2, r2
 8008f62:	701a      	strb	r2, [r3, #0]
 8008f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f66:	09db      	lsrs	r3, r3, #7
 8008f68:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6c:	2b7f      	cmp	r3, #127	; 0x7f
 8008f6e:	d8f0      	bhi.n	8008f52 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8008f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f72:	1c5a      	adds	r2, r3, #1
 8008f74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f78:	b2d2      	uxtb	r2, r2
 8008f7a:	701a      	strb	r2, [r3, #0]
 8008f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	627b      	str	r3, [r7, #36]	; 0x24
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	623b      	str	r3, [r7, #32]
 8008f88:	e00b      	b.n	8008fa2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8008f8a:	6a3b      	ldr	r3, [r7, #32]
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f90:	1c59      	adds	r1, r3, #1
 8008f92:	6279      	str	r1, [r7, #36]	; 0x24
 8008f94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f98:	b2d2      	uxtb	r2, r2
 8008f9a:	701a      	strb	r2, [r3, #0]
 8008f9c:	6a3b      	ldr	r3, [r7, #32]
 8008f9e:	09db      	lsrs	r3, r3, #7
 8008fa0:	623b      	str	r3, [r7, #32]
 8008fa2:	6a3b      	ldr	r3, [r7, #32]
 8008fa4:	2b7f      	cmp	r3, #127	; 0x7f
 8008fa6:	d8f0      	bhi.n	8008f8a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008faa:	1c5a      	adds	r2, r3, #1
 8008fac:	627a      	str	r2, [r7, #36]	; 0x24
 8008fae:	6a3a      	ldr	r2, [r7, #32]
 8008fb0:	b2d2      	uxtb	r2, r2
 8008fb2:	701a      	strb	r2, [r3, #0]
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	6979      	ldr	r1, [r7, #20]
 8008fbc:	69b8      	ldr	r0, [r7, #24]
 8008fbe:	f7ff fd1d 	bl	80089fc <_SendPacket>
  RECORD_END();
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	f383 8811 	msr	BASEPRI, r3
}
 8008fc8:	bf00      	nop
 8008fca:	3738      	adds	r7, #56	; 0x38
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	2000d528 	.word	0x2000d528

08008fd4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b090      	sub	sp, #64	; 0x40
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	607a      	str	r2, [r7, #4]
 8008fe0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8008fe2:	f3ef 8311 	mrs	r3, BASEPRI
 8008fe6:	f04f 0120 	mov.w	r1, #32
 8008fea:	f381 8811 	msr	BASEPRI, r1
 8008fee:	61fb      	str	r3, [r7, #28]
 8008ff0:	4840      	ldr	r0, [pc, #256]	; (80090f4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8008ff2:	f7ff fc15 	bl	8008820 <_PreparePacket>
 8008ff6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	63bb      	str	r3, [r7, #56]	; 0x38
 8009004:	e00b      	b.n	800901e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8009006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009008:	b2da      	uxtb	r2, r3
 800900a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800900c:	1c59      	adds	r1, r3, #1
 800900e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009010:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009014:	b2d2      	uxtb	r2, r2
 8009016:	701a      	strb	r2, [r3, #0]
 8009018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901a:	09db      	lsrs	r3, r3, #7
 800901c:	63bb      	str	r3, [r7, #56]	; 0x38
 800901e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009020:	2b7f      	cmp	r3, #127	; 0x7f
 8009022:	d8f0      	bhi.n	8009006 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8009024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009026:	1c5a      	adds	r2, r3, #1
 8009028:	63fa      	str	r2, [r7, #60]	; 0x3c
 800902a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800902c:	b2d2      	uxtb	r2, r2
 800902e:	701a      	strb	r2, [r3, #0]
 8009030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009032:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	637b      	str	r3, [r7, #52]	; 0x34
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	633b      	str	r3, [r7, #48]	; 0x30
 800903c:	e00b      	b.n	8009056 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800903e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009040:	b2da      	uxtb	r2, r3
 8009042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009044:	1c59      	adds	r1, r3, #1
 8009046:	6379      	str	r1, [r7, #52]	; 0x34
 8009048:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800904c:	b2d2      	uxtb	r2, r2
 800904e:	701a      	strb	r2, [r3, #0]
 8009050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009052:	09db      	lsrs	r3, r3, #7
 8009054:	633b      	str	r3, [r7, #48]	; 0x30
 8009056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009058:	2b7f      	cmp	r3, #127	; 0x7f
 800905a:	d8f0      	bhi.n	800903e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800905c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800905e:	1c5a      	adds	r2, r3, #1
 8009060:	637a      	str	r2, [r7, #52]	; 0x34
 8009062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009064:	b2d2      	uxtb	r2, r2
 8009066:	701a      	strb	r2, [r3, #0]
 8009068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800906a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	62bb      	str	r3, [r7, #40]	; 0x28
 8009074:	e00b      	b.n	800908e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8009076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009078:	b2da      	uxtb	r2, r3
 800907a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907c:	1c59      	adds	r1, r3, #1
 800907e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009080:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009084:	b2d2      	uxtb	r2, r2
 8009086:	701a      	strb	r2, [r3, #0]
 8009088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908a:	09db      	lsrs	r3, r3, #7
 800908c:	62bb      	str	r3, [r7, #40]	; 0x28
 800908e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009090:	2b7f      	cmp	r3, #127	; 0x7f
 8009092:	d8f0      	bhi.n	8009076 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8009094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009096:	1c5a      	adds	r2, r3, #1
 8009098:	62fa      	str	r2, [r7, #44]	; 0x2c
 800909a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800909c:	b2d2      	uxtb	r2, r2
 800909e:	701a      	strb	r2, [r3, #0]
 80090a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	627b      	str	r3, [r7, #36]	; 0x24
 80090a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090aa:	623b      	str	r3, [r7, #32]
 80090ac:	e00b      	b.n	80090c6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80090ae:	6a3b      	ldr	r3, [r7, #32]
 80090b0:	b2da      	uxtb	r2, r3
 80090b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b4:	1c59      	adds	r1, r3, #1
 80090b6:	6279      	str	r1, [r7, #36]	; 0x24
 80090b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80090bc:	b2d2      	uxtb	r2, r2
 80090be:	701a      	strb	r2, [r3, #0]
 80090c0:	6a3b      	ldr	r3, [r7, #32]
 80090c2:	09db      	lsrs	r3, r3, #7
 80090c4:	623b      	str	r3, [r7, #32]
 80090c6:	6a3b      	ldr	r3, [r7, #32]
 80090c8:	2b7f      	cmp	r3, #127	; 0x7f
 80090ca:	d8f0      	bhi.n	80090ae <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80090cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ce:	1c5a      	adds	r2, r3, #1
 80090d0:	627a      	str	r2, [r7, #36]	; 0x24
 80090d2:	6a3a      	ldr	r2, [r7, #32]
 80090d4:	b2d2      	uxtb	r2, r2
 80090d6:	701a      	strb	r2, [r3, #0]
 80090d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090da:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	6979      	ldr	r1, [r7, #20]
 80090e0:	69b8      	ldr	r0, [r7, #24]
 80090e2:	f7ff fc8b 	bl	80089fc <_SendPacket>
  RECORD_END();
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	f383 8811 	msr	BASEPRI, r3
}
 80090ec:	bf00      	nop
 80090ee:	3740      	adds	r7, #64	; 0x40
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	2000d528 	.word	0x2000d528

080090f8 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b092      	sub	sp, #72	; 0x48
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
 8009104:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8009106:	f3ef 8311 	mrs	r3, BASEPRI
 800910a:	f04f 0120 	mov.w	r1, #32
 800910e:	f381 8811 	msr	BASEPRI, r1
 8009112:	61fb      	str	r3, [r7, #28]
 8009114:	484e      	ldr	r0, [pc, #312]	; (8009250 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8009116:	f7ff fb83 	bl	8008820 <_PreparePacket>
 800911a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	647b      	str	r3, [r7, #68]	; 0x44
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	643b      	str	r3, [r7, #64]	; 0x40
 8009128:	e00b      	b.n	8009142 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 800912a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800912c:	b2da      	uxtb	r2, r3
 800912e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009130:	1c59      	adds	r1, r3, #1
 8009132:	6479      	str	r1, [r7, #68]	; 0x44
 8009134:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009138:	b2d2      	uxtb	r2, r2
 800913a:	701a      	strb	r2, [r3, #0]
 800913c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800913e:	09db      	lsrs	r3, r3, #7
 8009140:	643b      	str	r3, [r7, #64]	; 0x40
 8009142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009144:	2b7f      	cmp	r3, #127	; 0x7f
 8009146:	d8f0      	bhi.n	800912a <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8009148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800914a:	1c5a      	adds	r2, r3, #1
 800914c:	647a      	str	r2, [r7, #68]	; 0x44
 800914e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009150:	b2d2      	uxtb	r2, r2
 8009152:	701a      	strb	r2, [r3, #0]
 8009154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009156:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009160:	e00b      	b.n	800917a <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8009162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009164:	b2da      	uxtb	r2, r3
 8009166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009168:	1c59      	adds	r1, r3, #1
 800916a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800916c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009170:	b2d2      	uxtb	r2, r2
 8009172:	701a      	strb	r2, [r3, #0]
 8009174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009176:	09db      	lsrs	r3, r3, #7
 8009178:	63bb      	str	r3, [r7, #56]	; 0x38
 800917a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917c:	2b7f      	cmp	r3, #127	; 0x7f
 800917e:	d8f0      	bhi.n	8009162 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8009180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009182:	1c5a      	adds	r2, r3, #1
 8009184:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009186:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009188:	b2d2      	uxtb	r2, r2
 800918a:	701a      	strb	r2, [r3, #0]
 800918c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800918e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	637b      	str	r3, [r7, #52]	; 0x34
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	633b      	str	r3, [r7, #48]	; 0x30
 8009198:	e00b      	b.n	80091b2 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 800919a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919c:	b2da      	uxtb	r2, r3
 800919e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a0:	1c59      	adds	r1, r3, #1
 80091a2:	6379      	str	r1, [r7, #52]	; 0x34
 80091a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80091a8:	b2d2      	uxtb	r2, r2
 80091aa:	701a      	strb	r2, [r3, #0]
 80091ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ae:	09db      	lsrs	r3, r3, #7
 80091b0:	633b      	str	r3, [r7, #48]	; 0x30
 80091b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b4:	2b7f      	cmp	r3, #127	; 0x7f
 80091b6:	d8f0      	bhi.n	800919a <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 80091b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ba:	1c5a      	adds	r2, r3, #1
 80091bc:	637a      	str	r2, [r7, #52]	; 0x34
 80091be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091c0:	b2d2      	uxtb	r2, r2
 80091c2:	701a      	strb	r2, [r3, #0]
 80091c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80091d0:	e00b      	b.n	80091ea <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 80091d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d4:	b2da      	uxtb	r2, r3
 80091d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d8:	1c59      	adds	r1, r3, #1
 80091da:	62f9      	str	r1, [r7, #44]	; 0x2c
 80091dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80091e0:	b2d2      	uxtb	r2, r2
 80091e2:	701a      	strb	r2, [r3, #0]
 80091e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e6:	09db      	lsrs	r3, r3, #7
 80091e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80091ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ec:	2b7f      	cmp	r3, #127	; 0x7f
 80091ee:	d8f0      	bhi.n	80091d2 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 80091f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f2:	1c5a      	adds	r2, r3, #1
 80091f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091f8:	b2d2      	uxtb	r2, r2
 80091fa:	701a      	strb	r2, [r3, #0]
 80091fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	627b      	str	r3, [r7, #36]	; 0x24
 8009204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009206:	623b      	str	r3, [r7, #32]
 8009208:	e00b      	b.n	8009222 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 800920a:	6a3b      	ldr	r3, [r7, #32]
 800920c:	b2da      	uxtb	r2, r3
 800920e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009210:	1c59      	adds	r1, r3, #1
 8009212:	6279      	str	r1, [r7, #36]	; 0x24
 8009214:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009218:	b2d2      	uxtb	r2, r2
 800921a:	701a      	strb	r2, [r3, #0]
 800921c:	6a3b      	ldr	r3, [r7, #32]
 800921e:	09db      	lsrs	r3, r3, #7
 8009220:	623b      	str	r3, [r7, #32]
 8009222:	6a3b      	ldr	r3, [r7, #32]
 8009224:	2b7f      	cmp	r3, #127	; 0x7f
 8009226:	d8f0      	bhi.n	800920a <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8009228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922a:	1c5a      	adds	r2, r3, #1
 800922c:	627a      	str	r2, [r7, #36]	; 0x24
 800922e:	6a3a      	ldr	r2, [r7, #32]
 8009230:	b2d2      	uxtb	r2, r2
 8009232:	701a      	strb	r2, [r3, #0]
 8009234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009236:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	6979      	ldr	r1, [r7, #20]
 800923c:	69b8      	ldr	r0, [r7, #24]
 800923e:	f7ff fbdd 	bl	80089fc <_SendPacket>
  RECORD_END();
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	f383 8811 	msr	BASEPRI, r3
}
 8009248:	bf00      	nop
 800924a:	3748      	adds	r7, #72	; 0x48
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	2000d528 	.word	0x2000d528

08009254 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8009254:	b580      	push	{r7, lr}
 8009256:	b08c      	sub	sp, #48	; 0x30
 8009258:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800925a:	4b58      	ldr	r3, [pc, #352]	; (80093bc <SEGGER_SYSVIEW_Start+0x168>)
 800925c:	2201      	movs	r2, #1
 800925e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8009260:	f3ef 8311 	mrs	r3, BASEPRI
 8009264:	f04f 0120 	mov.w	r1, #32
 8009268:	f381 8811 	msr	BASEPRI, r1
 800926c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800926e:	4b53      	ldr	r3, [pc, #332]	; (80093bc <SEGGER_SYSVIEW_Start+0x168>)
 8009270:	785b      	ldrb	r3, [r3, #1]
 8009272:	220a      	movs	r2, #10
 8009274:	4952      	ldr	r1, [pc, #328]	; (80093c0 <SEGGER_SYSVIEW_Start+0x16c>)
 8009276:	4618      	mov	r0, r3
 8009278:	f7f6 ffb2 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8009282:	200a      	movs	r0, #10
 8009284:	f7ff fd7c 	bl	8008d80 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009288:	f3ef 8311 	mrs	r3, BASEPRI
 800928c:	f04f 0120 	mov.w	r1, #32
 8009290:	f381 8811 	msr	BASEPRI, r1
 8009294:	60bb      	str	r3, [r7, #8]
 8009296:	484b      	ldr	r0, [pc, #300]	; (80093c4 <SEGGER_SYSVIEW_Start+0x170>)
 8009298:	f7ff fac2 	bl	8008820 <_PreparePacket>
 800929c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092a6:	4b45      	ldr	r3, [pc, #276]	; (80093bc <SEGGER_SYSVIEW_Start+0x168>)
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80092ac:	e00b      	b.n	80092c6 <SEGGER_SYSVIEW_Start+0x72>
 80092ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b0:	b2da      	uxtb	r2, r3
 80092b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b4:	1c59      	adds	r1, r3, #1
 80092b6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80092b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80092bc:	b2d2      	uxtb	r2, r2
 80092be:	701a      	strb	r2, [r3, #0]
 80092c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c2:	09db      	lsrs	r3, r3, #7
 80092c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80092c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c8:	2b7f      	cmp	r3, #127	; 0x7f
 80092ca:	d8f0      	bhi.n	80092ae <SEGGER_SYSVIEW_Start+0x5a>
 80092cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ce:	1c5a      	adds	r2, r3, #1
 80092d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80092d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092d4:	b2d2      	uxtb	r2, r2
 80092d6:	701a      	strb	r2, [r3, #0]
 80092d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092da:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	627b      	str	r3, [r7, #36]	; 0x24
 80092e0:	4b36      	ldr	r3, [pc, #216]	; (80093bc <SEGGER_SYSVIEW_Start+0x168>)
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	623b      	str	r3, [r7, #32]
 80092e6:	e00b      	b.n	8009300 <SEGGER_SYSVIEW_Start+0xac>
 80092e8:	6a3b      	ldr	r3, [r7, #32]
 80092ea:	b2da      	uxtb	r2, r3
 80092ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ee:	1c59      	adds	r1, r3, #1
 80092f0:	6279      	str	r1, [r7, #36]	; 0x24
 80092f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80092f6:	b2d2      	uxtb	r2, r2
 80092f8:	701a      	strb	r2, [r3, #0]
 80092fa:	6a3b      	ldr	r3, [r7, #32]
 80092fc:	09db      	lsrs	r3, r3, #7
 80092fe:	623b      	str	r3, [r7, #32]
 8009300:	6a3b      	ldr	r3, [r7, #32]
 8009302:	2b7f      	cmp	r3, #127	; 0x7f
 8009304:	d8f0      	bhi.n	80092e8 <SEGGER_SYSVIEW_Start+0x94>
 8009306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009308:	1c5a      	adds	r2, r3, #1
 800930a:	627a      	str	r2, [r7, #36]	; 0x24
 800930c:	6a3a      	ldr	r2, [r7, #32]
 800930e:	b2d2      	uxtb	r2, r2
 8009310:	701a      	strb	r2, [r3, #0]
 8009312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009314:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	61fb      	str	r3, [r7, #28]
 800931a:	4b28      	ldr	r3, [pc, #160]	; (80093bc <SEGGER_SYSVIEW_Start+0x168>)
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	61bb      	str	r3, [r7, #24]
 8009320:	e00b      	b.n	800933a <SEGGER_SYSVIEW_Start+0xe6>
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	b2da      	uxtb	r2, r3
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	1c59      	adds	r1, r3, #1
 800932a:	61f9      	str	r1, [r7, #28]
 800932c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009330:	b2d2      	uxtb	r2, r2
 8009332:	701a      	strb	r2, [r3, #0]
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	09db      	lsrs	r3, r3, #7
 8009338:	61bb      	str	r3, [r7, #24]
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	2b7f      	cmp	r3, #127	; 0x7f
 800933e:	d8f0      	bhi.n	8009322 <SEGGER_SYSVIEW_Start+0xce>
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	1c5a      	adds	r2, r3, #1
 8009344:	61fa      	str	r2, [r7, #28]
 8009346:	69ba      	ldr	r2, [r7, #24]
 8009348:	b2d2      	uxtb	r2, r2
 800934a:	701a      	strb	r2, [r3, #0]
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	617b      	str	r3, [r7, #20]
 8009354:	2300      	movs	r3, #0
 8009356:	613b      	str	r3, [r7, #16]
 8009358:	e00b      	b.n	8009372 <SEGGER_SYSVIEW_Start+0x11e>
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	b2da      	uxtb	r2, r3
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	1c59      	adds	r1, r3, #1
 8009362:	6179      	str	r1, [r7, #20]
 8009364:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009368:	b2d2      	uxtb	r2, r2
 800936a:	701a      	strb	r2, [r3, #0]
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	09db      	lsrs	r3, r3, #7
 8009370:	613b      	str	r3, [r7, #16]
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	2b7f      	cmp	r3, #127	; 0x7f
 8009376:	d8f0      	bhi.n	800935a <SEGGER_SYSVIEW_Start+0x106>
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	1c5a      	adds	r2, r3, #1
 800937c:	617a      	str	r2, [r7, #20]
 800937e:	693a      	ldr	r2, [r7, #16]
 8009380:	b2d2      	uxtb	r2, r2
 8009382:	701a      	strb	r2, [r3, #0]
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8009388:	2218      	movs	r2, #24
 800938a:	6839      	ldr	r1, [r7, #0]
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f7ff fb35 	bl	80089fc <_SendPacket>
      RECORD_END();
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8009398:	4b08      	ldr	r3, [pc, #32]	; (80093bc <SEGGER_SYSVIEW_Start+0x168>)
 800939a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939c:	2b00      	cmp	r3, #0
 800939e:	d002      	beq.n	80093a6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80093a0:	4b06      	ldr	r3, [pc, #24]	; (80093bc <SEGGER_SYSVIEW_Start+0x168>)
 80093a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80093a6:	f000 f9eb 	bl	8009780 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80093aa:	f000 f9b1 	bl	8009710 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80093ae:	f000 fbb3 	bl	8009b18 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80093b2:	bf00      	nop
 80093b4:	3730      	adds	r7, #48	; 0x30
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	2000d4f8 	.word	0x2000d4f8
 80093c0:	0800b478 	.word	0x0800b478
 80093c4:	2000d528 	.word	0x2000d528

080093c8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80093ce:	f3ef 8311 	mrs	r3, BASEPRI
 80093d2:	f04f 0120 	mov.w	r1, #32
 80093d6:	f381 8811 	msr	BASEPRI, r1
 80093da:	607b      	str	r3, [r7, #4]
 80093dc:	480b      	ldr	r0, [pc, #44]	; (800940c <SEGGER_SYSVIEW_Stop+0x44>)
 80093de:	f7ff fa1f 	bl	8008820 <_PreparePacket>
 80093e2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80093e4:	4b0a      	ldr	r3, [pc, #40]	; (8009410 <SEGGER_SYSVIEW_Stop+0x48>)
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d007      	beq.n	80093fc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80093ec:	220b      	movs	r2, #11
 80093ee:	6839      	ldr	r1, [r7, #0]
 80093f0:	6838      	ldr	r0, [r7, #0]
 80093f2:	f7ff fb03 	bl	80089fc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80093f6:	4b06      	ldr	r3, [pc, #24]	; (8009410 <SEGGER_SYSVIEW_Stop+0x48>)
 80093f8:	2200      	movs	r2, #0
 80093fa:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f383 8811 	msr	BASEPRI, r3
}
 8009402:	bf00      	nop
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	2000d528 	.word	0x2000d528
 8009410:	2000d4f8 	.word	0x2000d4f8

08009414 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8009414:	b580      	push	{r7, lr}
 8009416:	b08c      	sub	sp, #48	; 0x30
 8009418:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800941a:	f3ef 8311 	mrs	r3, BASEPRI
 800941e:	f04f 0120 	mov.w	r1, #32
 8009422:	f381 8811 	msr	BASEPRI, r1
 8009426:	60fb      	str	r3, [r7, #12]
 8009428:	4845      	ldr	r0, [pc, #276]	; (8009540 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800942a:	f7ff f9f9 	bl	8008820 <_PreparePacket>
 800942e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009438:	4b42      	ldr	r3, [pc, #264]	; (8009544 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	62bb      	str	r3, [r7, #40]	; 0x28
 800943e:	e00b      	b.n	8009458 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8009440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009442:	b2da      	uxtb	r2, r3
 8009444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009446:	1c59      	adds	r1, r3, #1
 8009448:	62f9      	str	r1, [r7, #44]	; 0x2c
 800944a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800944e:	b2d2      	uxtb	r2, r2
 8009450:	701a      	strb	r2, [r3, #0]
 8009452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009454:	09db      	lsrs	r3, r3, #7
 8009456:	62bb      	str	r3, [r7, #40]	; 0x28
 8009458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945a:	2b7f      	cmp	r3, #127	; 0x7f
 800945c:	d8f0      	bhi.n	8009440 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800945e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009460:	1c5a      	adds	r2, r3, #1
 8009462:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009466:	b2d2      	uxtb	r2, r2
 8009468:	701a      	strb	r2, [r3, #0]
 800946a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800946c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	627b      	str	r3, [r7, #36]	; 0x24
 8009472:	4b34      	ldr	r3, [pc, #208]	; (8009544 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	623b      	str	r3, [r7, #32]
 8009478:	e00b      	b.n	8009492 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800947a:	6a3b      	ldr	r3, [r7, #32]
 800947c:	b2da      	uxtb	r2, r3
 800947e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009480:	1c59      	adds	r1, r3, #1
 8009482:	6279      	str	r1, [r7, #36]	; 0x24
 8009484:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009488:	b2d2      	uxtb	r2, r2
 800948a:	701a      	strb	r2, [r3, #0]
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	09db      	lsrs	r3, r3, #7
 8009490:	623b      	str	r3, [r7, #32]
 8009492:	6a3b      	ldr	r3, [r7, #32]
 8009494:	2b7f      	cmp	r3, #127	; 0x7f
 8009496:	d8f0      	bhi.n	800947a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8009498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949a:	1c5a      	adds	r2, r3, #1
 800949c:	627a      	str	r2, [r7, #36]	; 0x24
 800949e:	6a3a      	ldr	r2, [r7, #32]
 80094a0:	b2d2      	uxtb	r2, r2
 80094a2:	701a      	strb	r2, [r3, #0]
 80094a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	61fb      	str	r3, [r7, #28]
 80094ac:	4b25      	ldr	r3, [pc, #148]	; (8009544 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80094ae:	691b      	ldr	r3, [r3, #16]
 80094b0:	61bb      	str	r3, [r7, #24]
 80094b2:	e00b      	b.n	80094cc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	b2da      	uxtb	r2, r3
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	1c59      	adds	r1, r3, #1
 80094bc:	61f9      	str	r1, [r7, #28]
 80094be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80094c2:	b2d2      	uxtb	r2, r2
 80094c4:	701a      	strb	r2, [r3, #0]
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	09db      	lsrs	r3, r3, #7
 80094ca:	61bb      	str	r3, [r7, #24]
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	2b7f      	cmp	r3, #127	; 0x7f
 80094d0:	d8f0      	bhi.n	80094b4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	1c5a      	adds	r2, r3, #1
 80094d6:	61fa      	str	r2, [r7, #28]
 80094d8:	69ba      	ldr	r2, [r7, #24]
 80094da:	b2d2      	uxtb	r2, r2
 80094dc:	701a      	strb	r2, [r3, #0]
 80094de:	69fb      	ldr	r3, [r7, #28]
 80094e0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	617b      	str	r3, [r7, #20]
 80094e6:	2300      	movs	r3, #0
 80094e8:	613b      	str	r3, [r7, #16]
 80094ea:	e00b      	b.n	8009504 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	b2da      	uxtb	r2, r3
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	1c59      	adds	r1, r3, #1
 80094f4:	6179      	str	r1, [r7, #20]
 80094f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80094fa:	b2d2      	uxtb	r2, r2
 80094fc:	701a      	strb	r2, [r3, #0]
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	09db      	lsrs	r3, r3, #7
 8009502:	613b      	str	r3, [r7, #16]
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	2b7f      	cmp	r3, #127	; 0x7f
 8009508:	d8f0      	bhi.n	80094ec <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	1c5a      	adds	r2, r3, #1
 800950e:	617a      	str	r2, [r7, #20]
 8009510:	693a      	ldr	r2, [r7, #16]
 8009512:	b2d2      	uxtb	r2, r2
 8009514:	701a      	strb	r2, [r3, #0]
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800951a:	2218      	movs	r2, #24
 800951c:	6879      	ldr	r1, [r7, #4]
 800951e:	68b8      	ldr	r0, [r7, #8]
 8009520:	f7ff fa6c 	bl	80089fc <_SendPacket>
  RECORD_END();
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800952a:	4b06      	ldr	r3, [pc, #24]	; (8009544 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800952c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952e:	2b00      	cmp	r3, #0
 8009530:	d002      	beq.n	8009538 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8009532:	4b04      	ldr	r3, [pc, #16]	; (8009544 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009536:	4798      	blx	r3
  }
}
 8009538:	bf00      	nop
 800953a:	3730      	adds	r7, #48	; 0x30
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	2000d528 	.word	0x2000d528
 8009544:	2000d4f8 	.word	0x2000d4f8

08009548 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8009548:	b580      	push	{r7, lr}
 800954a:	b092      	sub	sp, #72	; 0x48
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8009550:	f3ef 8311 	mrs	r3, BASEPRI
 8009554:	f04f 0120 	mov.w	r1, #32
 8009558:	f381 8811 	msr	BASEPRI, r1
 800955c:	617b      	str	r3, [r7, #20]
 800955e:	486a      	ldr	r0, [pc, #424]	; (8009708 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8009560:	f7ff f95e 	bl	8008820 <_PreparePacket>
 8009564:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	647b      	str	r3, [r7, #68]	; 0x44
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	4b66      	ldr	r3, [pc, #408]	; (800970c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	1ad3      	subs	r3, r2, r3
 8009578:	643b      	str	r3, [r7, #64]	; 0x40
 800957a:	e00b      	b.n	8009594 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800957c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800957e:	b2da      	uxtb	r2, r3
 8009580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009582:	1c59      	adds	r1, r3, #1
 8009584:	6479      	str	r1, [r7, #68]	; 0x44
 8009586:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800958a:	b2d2      	uxtb	r2, r2
 800958c:	701a      	strb	r2, [r3, #0]
 800958e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009590:	09db      	lsrs	r3, r3, #7
 8009592:	643b      	str	r3, [r7, #64]	; 0x40
 8009594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009596:	2b7f      	cmp	r3, #127	; 0x7f
 8009598:	d8f0      	bhi.n	800957c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800959a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800959c:	1c5a      	adds	r2, r3, #1
 800959e:	647a      	str	r2, [r7, #68]	; 0x44
 80095a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095a2:	b2d2      	uxtb	r2, r2
 80095a4:	701a      	strb	r2, [r3, #0]
 80095a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80095b4:	e00b      	b.n	80095ce <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80095b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b8:	b2da      	uxtb	r2, r3
 80095ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095bc:	1c59      	adds	r1, r3, #1
 80095be:	63f9      	str	r1, [r7, #60]	; 0x3c
 80095c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80095c4:	b2d2      	uxtb	r2, r2
 80095c6:	701a      	strb	r2, [r3, #0]
 80095c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ca:	09db      	lsrs	r3, r3, #7
 80095cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80095ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d0:	2b7f      	cmp	r3, #127	; 0x7f
 80095d2:	d8f0      	bhi.n	80095b6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80095d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095d6:	1c5a      	adds	r2, r3, #1
 80095d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80095da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095dc:	b2d2      	uxtb	r2, r2
 80095de:	701a      	strb	r2, [r3, #0]
 80095e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095e2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	2220      	movs	r2, #32
 80095ea:	4619      	mov	r1, r3
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f7ff f8e7 	bl	80087c0 <_EncodeStr>
 80095f2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80095f4:	2209      	movs	r2, #9
 80095f6:	68f9      	ldr	r1, [r7, #12]
 80095f8:	6938      	ldr	r0, [r7, #16]
 80095fa:	f7ff f9ff 	bl	80089fc <_SendPacket>
  //
  pPayload = pPayloadStart;
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	637b      	str	r3, [r7, #52]	; 0x34
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	4b40      	ldr	r3, [pc, #256]	; (800970c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	633b      	str	r3, [r7, #48]	; 0x30
 8009612:	e00b      	b.n	800962c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8009614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009616:	b2da      	uxtb	r2, r3
 8009618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800961a:	1c59      	adds	r1, r3, #1
 800961c:	6379      	str	r1, [r7, #52]	; 0x34
 800961e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009622:	b2d2      	uxtb	r2, r2
 8009624:	701a      	strb	r2, [r3, #0]
 8009626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009628:	09db      	lsrs	r3, r3, #7
 800962a:	633b      	str	r3, [r7, #48]	; 0x30
 800962c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962e:	2b7f      	cmp	r3, #127	; 0x7f
 8009630:	d8f0      	bhi.n	8009614 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8009632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009634:	1c5a      	adds	r2, r3, #1
 8009636:	637a      	str	r2, [r7, #52]	; 0x34
 8009638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800963a:	b2d2      	uxtb	r2, r2
 800963c:	701a      	strb	r2, [r3, #0]
 800963e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009640:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	62bb      	str	r3, [r7, #40]	; 0x28
 800964c:	e00b      	b.n	8009666 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800964e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009650:	b2da      	uxtb	r2, r3
 8009652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009654:	1c59      	adds	r1, r3, #1
 8009656:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009658:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800965c:	b2d2      	uxtb	r2, r2
 800965e:	701a      	strb	r2, [r3, #0]
 8009660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009662:	09db      	lsrs	r3, r3, #7
 8009664:	62bb      	str	r3, [r7, #40]	; 0x28
 8009666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009668:	2b7f      	cmp	r3, #127	; 0x7f
 800966a:	d8f0      	bhi.n	800964e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800966c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966e:	1c5a      	adds	r2, r3, #1
 8009670:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009674:	b2d2      	uxtb	r2, r2
 8009676:	701a      	strb	r2, [r3, #0]
 8009678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800967a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	627b      	str	r3, [r7, #36]	; 0x24
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	691b      	ldr	r3, [r3, #16]
 8009684:	623b      	str	r3, [r7, #32]
 8009686:	e00b      	b.n	80096a0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8009688:	6a3b      	ldr	r3, [r7, #32]
 800968a:	b2da      	uxtb	r2, r3
 800968c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968e:	1c59      	adds	r1, r3, #1
 8009690:	6279      	str	r1, [r7, #36]	; 0x24
 8009692:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009696:	b2d2      	uxtb	r2, r2
 8009698:	701a      	strb	r2, [r3, #0]
 800969a:	6a3b      	ldr	r3, [r7, #32]
 800969c:	09db      	lsrs	r3, r3, #7
 800969e:	623b      	str	r3, [r7, #32]
 80096a0:	6a3b      	ldr	r3, [r7, #32]
 80096a2:	2b7f      	cmp	r3, #127	; 0x7f
 80096a4:	d8f0      	bhi.n	8009688 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80096a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a8:	1c5a      	adds	r2, r3, #1
 80096aa:	627a      	str	r2, [r7, #36]	; 0x24
 80096ac:	6a3a      	ldr	r2, [r7, #32]
 80096ae:	b2d2      	uxtb	r2, r2
 80096b0:	701a      	strb	r2, [r3, #0]
 80096b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	61fb      	str	r3, [r7, #28]
 80096ba:	2300      	movs	r3, #0
 80096bc:	61bb      	str	r3, [r7, #24]
 80096be:	e00b      	b.n	80096d8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	b2da      	uxtb	r2, r3
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	1c59      	adds	r1, r3, #1
 80096c8:	61f9      	str	r1, [r7, #28]
 80096ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80096ce:	b2d2      	uxtb	r2, r2
 80096d0:	701a      	strb	r2, [r3, #0]
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	09db      	lsrs	r3, r3, #7
 80096d6:	61bb      	str	r3, [r7, #24]
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	2b7f      	cmp	r3, #127	; 0x7f
 80096dc:	d8f0      	bhi.n	80096c0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	1c5a      	adds	r2, r3, #1
 80096e2:	61fa      	str	r2, [r7, #28]
 80096e4:	69ba      	ldr	r2, [r7, #24]
 80096e6:	b2d2      	uxtb	r2, r2
 80096e8:	701a      	strb	r2, [r3, #0]
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80096ee:	2215      	movs	r2, #21
 80096f0:	68f9      	ldr	r1, [r7, #12]
 80096f2:	6938      	ldr	r0, [r7, #16]
 80096f4:	f7ff f982 	bl	80089fc <_SendPacket>
  RECORD_END();
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	f383 8811 	msr	BASEPRI, r3
}
 80096fe:	bf00      	nop
 8009700:	3748      	adds	r7, #72	; 0x48
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	2000d528 	.word	0x2000d528
 800970c:	2000d4f8 	.word	0x2000d4f8

08009710 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8009710:	b580      	push	{r7, lr}
 8009712:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8009714:	4b07      	ldr	r3, [pc, #28]	; (8009734 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8009716:	6a1b      	ldr	r3, [r3, #32]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d008      	beq.n	800972e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800971c:	4b05      	ldr	r3, [pc, #20]	; (8009734 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800971e:	6a1b      	ldr	r3, [r3, #32]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d003      	beq.n	800972e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8009726:	4b03      	ldr	r3, [pc, #12]	; (8009734 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8009728:	6a1b      	ldr	r3, [r3, #32]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	4798      	blx	r3
  }
}
 800972e:	bf00      	nop
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	2000d4f8 	.word	0x2000d4f8

08009738 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009740:	f3ef 8311 	mrs	r3, BASEPRI
 8009744:	f04f 0120 	mov.w	r1, #32
 8009748:	f381 8811 	msr	BASEPRI, r1
 800974c:	617b      	str	r3, [r7, #20]
 800974e:	480b      	ldr	r0, [pc, #44]	; (800977c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8009750:	f7ff f866 	bl	8008820 <_PreparePacket>
 8009754:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009756:	2280      	movs	r2, #128	; 0x80
 8009758:	6879      	ldr	r1, [r7, #4]
 800975a:	6938      	ldr	r0, [r7, #16]
 800975c:	f7ff f830 	bl	80087c0 <_EncodeStr>
 8009760:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8009762:	220e      	movs	r2, #14
 8009764:	68f9      	ldr	r1, [r7, #12]
 8009766:	6938      	ldr	r0, [r7, #16]
 8009768:	f7ff f948 	bl	80089fc <_SendPacket>
  RECORD_END();
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	f383 8811 	msr	BASEPRI, r3
}
 8009772:	bf00      	nop
 8009774:	3718      	adds	r7, #24
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	2000d528 	.word	0x2000d528

08009780 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8009780:	b590      	push	{r4, r7, lr}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8009786:	4b15      	ldr	r3, [pc, #84]	; (80097dc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8009788:	6a1b      	ldr	r3, [r3, #32]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d01a      	beq.n	80097c4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800978e:	4b13      	ldr	r3, [pc, #76]	; (80097dc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8009790:	6a1b      	ldr	r3, [r3, #32]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d015      	beq.n	80097c4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8009798:	4b10      	ldr	r3, [pc, #64]	; (80097dc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800979a:	6a1b      	ldr	r3, [r3, #32]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4798      	blx	r3
 80097a0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80097a4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80097a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097aa:	f04f 0200 	mov.w	r2, #0
 80097ae:	f04f 0300 	mov.w	r3, #0
 80097b2:	000a      	movs	r2, r1
 80097b4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80097b6:	4613      	mov	r3, r2
 80097b8:	461a      	mov	r2, r3
 80097ba:	4621      	mov	r1, r4
 80097bc:	200d      	movs	r0, #13
 80097be:	f7ff fb39 	bl	8008e34 <SEGGER_SYSVIEW_RecordU32x2>
 80097c2:	e006      	b.n	80097d2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80097c4:	4b06      	ldr	r3, [pc, #24]	; (80097e0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4619      	mov	r1, r3
 80097ca:	200c      	movs	r0, #12
 80097cc:	f7ff faf6 	bl	8008dbc <SEGGER_SYSVIEW_RecordU32>
  }
}
 80097d0:	bf00      	nop
 80097d2:	bf00      	nop
 80097d4:	370c      	adds	r7, #12
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd90      	pop	{r4, r7, pc}
 80097da:	bf00      	nop
 80097dc:	2000d4f8 	.word	0x2000d4f8
 80097e0:	e0001004 	.word	0xe0001004

080097e4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80097ea:	f3ef 8311 	mrs	r3, BASEPRI
 80097ee:	f04f 0120 	mov.w	r1, #32
 80097f2:	f381 8811 	msr	BASEPRI, r1
 80097f6:	607b      	str	r3, [r7, #4]
 80097f8:	4807      	ldr	r0, [pc, #28]	; (8009818 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80097fa:	f7ff f811 	bl	8008820 <_PreparePacket>
 80097fe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8009800:	2211      	movs	r2, #17
 8009802:	6839      	ldr	r1, [r7, #0]
 8009804:	6838      	ldr	r0, [r7, #0]
 8009806:	f7ff f8f9 	bl	80089fc <_SendPacket>
  RECORD_END();
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f383 8811 	msr	BASEPRI, r3
}
 8009810:	bf00      	nop
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	2000d528 	.word	0x2000d528

0800981c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800981c:	b580      	push	{r7, lr}
 800981e:	b088      	sub	sp, #32
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009824:	f3ef 8311 	mrs	r3, BASEPRI
 8009828:	f04f 0120 	mov.w	r1, #32
 800982c:	f381 8811 	msr	BASEPRI, r1
 8009830:	617b      	str	r3, [r7, #20]
 8009832:	4819      	ldr	r0, [pc, #100]	; (8009898 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8009834:	f7fe fff4 	bl	8008820 <_PreparePacket>
 8009838:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800983e:	4b17      	ldr	r3, [pc, #92]	; (800989c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8009840:	691b      	ldr	r3, [r3, #16]
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	1ad3      	subs	r3, r2, r3
 8009846:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	61fb      	str	r3, [r7, #28]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	61bb      	str	r3, [r7, #24]
 8009850:	e00b      	b.n	800986a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8009852:	69bb      	ldr	r3, [r7, #24]
 8009854:	b2da      	uxtb	r2, r3
 8009856:	69fb      	ldr	r3, [r7, #28]
 8009858:	1c59      	adds	r1, r3, #1
 800985a:	61f9      	str	r1, [r7, #28]
 800985c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009860:	b2d2      	uxtb	r2, r2
 8009862:	701a      	strb	r2, [r3, #0]
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	09db      	lsrs	r3, r3, #7
 8009868:	61bb      	str	r3, [r7, #24]
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	2b7f      	cmp	r3, #127	; 0x7f
 800986e:	d8f0      	bhi.n	8009852 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	1c5a      	adds	r2, r3, #1
 8009874:	61fa      	str	r2, [r7, #28]
 8009876:	69ba      	ldr	r2, [r7, #24]
 8009878:	b2d2      	uxtb	r2, r2
 800987a:	701a      	strb	r2, [r3, #0]
 800987c:	69fb      	ldr	r3, [r7, #28]
 800987e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8009880:	2208      	movs	r2, #8
 8009882:	68f9      	ldr	r1, [r7, #12]
 8009884:	6938      	ldr	r0, [r7, #16]
 8009886:	f7ff f8b9 	bl	80089fc <_SendPacket>
  RECORD_END();
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	f383 8811 	msr	BASEPRI, r3
}
 8009890:	bf00      	nop
 8009892:	3720      	adds	r7, #32
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	2000d528 	.word	0x2000d528
 800989c:	2000d4f8 	.word	0x2000d4f8

080098a0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b088      	sub	sp, #32
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80098a8:	f3ef 8311 	mrs	r3, BASEPRI
 80098ac:	f04f 0120 	mov.w	r1, #32
 80098b0:	f381 8811 	msr	BASEPRI, r1
 80098b4:	617b      	str	r3, [r7, #20]
 80098b6:	4819      	ldr	r0, [pc, #100]	; (800991c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80098b8:	f7fe ffb2 	bl	8008820 <_PreparePacket>
 80098bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80098c2:	4b17      	ldr	r3, [pc, #92]	; (8009920 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	1ad3      	subs	r3, r2, r3
 80098ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	61fb      	str	r3, [r7, #28]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	61bb      	str	r3, [r7, #24]
 80098d4:	e00b      	b.n	80098ee <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80098d6:	69bb      	ldr	r3, [r7, #24]
 80098d8:	b2da      	uxtb	r2, r3
 80098da:	69fb      	ldr	r3, [r7, #28]
 80098dc:	1c59      	adds	r1, r3, #1
 80098de:	61f9      	str	r1, [r7, #28]
 80098e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80098e4:	b2d2      	uxtb	r2, r2
 80098e6:	701a      	strb	r2, [r3, #0]
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	09db      	lsrs	r3, r3, #7
 80098ec:	61bb      	str	r3, [r7, #24]
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	2b7f      	cmp	r3, #127	; 0x7f
 80098f2:	d8f0      	bhi.n	80098d6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	1c5a      	adds	r2, r3, #1
 80098f8:	61fa      	str	r2, [r7, #28]
 80098fa:	69ba      	ldr	r2, [r7, #24]
 80098fc:	b2d2      	uxtb	r2, r2
 80098fe:	701a      	strb	r2, [r3, #0]
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8009904:	2204      	movs	r2, #4
 8009906:	68f9      	ldr	r1, [r7, #12]
 8009908:	6938      	ldr	r0, [r7, #16]
 800990a:	f7ff f877 	bl	80089fc <_SendPacket>
  RECORD_END();
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	f383 8811 	msr	BASEPRI, r3
}
 8009914:	bf00      	nop
 8009916:	3720      	adds	r7, #32
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	2000d528 	.word	0x2000d528
 8009920:	2000d4f8 	.word	0x2000d4f8

08009924 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8009924:	b580      	push	{r7, lr}
 8009926:	b088      	sub	sp, #32
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800992c:	f3ef 8311 	mrs	r3, BASEPRI
 8009930:	f04f 0120 	mov.w	r1, #32
 8009934:	f381 8811 	msr	BASEPRI, r1
 8009938:	617b      	str	r3, [r7, #20]
 800993a:	4819      	ldr	r0, [pc, #100]	; (80099a0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800993c:	f7fe ff70 	bl	8008820 <_PreparePacket>
 8009940:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009946:	4b17      	ldr	r3, [pc, #92]	; (80099a4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	1ad3      	subs	r3, r2, r3
 800994e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	61fb      	str	r3, [r7, #28]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	61bb      	str	r3, [r7, #24]
 8009958:	e00b      	b.n	8009972 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	b2da      	uxtb	r2, r3
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	1c59      	adds	r1, r3, #1
 8009962:	61f9      	str	r1, [r7, #28]
 8009964:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009968:	b2d2      	uxtb	r2, r2
 800996a:	701a      	strb	r2, [r3, #0]
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	09db      	lsrs	r3, r3, #7
 8009970:	61bb      	str	r3, [r7, #24]
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	2b7f      	cmp	r3, #127	; 0x7f
 8009976:	d8f0      	bhi.n	800995a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	1c5a      	adds	r2, r3, #1
 800997c:	61fa      	str	r2, [r7, #28]
 800997e:	69ba      	ldr	r2, [r7, #24]
 8009980:	b2d2      	uxtb	r2, r2
 8009982:	701a      	strb	r2, [r3, #0]
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8009988:	2206      	movs	r2, #6
 800998a:	68f9      	ldr	r1, [r7, #12]
 800998c:	6938      	ldr	r0, [r7, #16]
 800998e:	f7ff f835 	bl	80089fc <_SendPacket>
  RECORD_END();
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	f383 8811 	msr	BASEPRI, r3
}
 8009998:	bf00      	nop
 800999a:	3720      	adds	r7, #32
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	2000d528 	.word	0x2000d528
 80099a4:	2000d4f8 	.word	0x2000d4f8

080099a8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80099b0:	4b04      	ldr	r3, [pc, #16]	; (80099c4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	1ad3      	subs	r3, r2, r3
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr
 80099c4:	2000d4f8 	.word	0x2000d4f8

080099c8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b08c      	sub	sp, #48	; 0x30
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	4603      	mov	r3, r0
 80099d0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80099d2:	4b40      	ldr	r3, [pc, #256]	; (8009ad4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d077      	beq.n	8009aca <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80099da:	4b3e      	ldr	r3, [pc, #248]	; (8009ad4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80099e0:	2300      	movs	r3, #0
 80099e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80099e4:	e008      	b.n	80099f8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80099e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e8:	691b      	ldr	r3, [r3, #16]
 80099ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80099ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d007      	beq.n	8009a02 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80099f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f4:	3301      	adds	r3, #1
 80099f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80099f8:	79fb      	ldrb	r3, [r7, #7]
 80099fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d3f2      	bcc.n	80099e6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8009a00:	e000      	b.n	8009a04 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8009a02:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8009a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d055      	beq.n	8009ab6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009a0a:	f3ef 8311 	mrs	r3, BASEPRI
 8009a0e:	f04f 0120 	mov.w	r1, #32
 8009a12:	f381 8811 	msr	BASEPRI, r1
 8009a16:	617b      	str	r3, [r7, #20]
 8009a18:	482f      	ldr	r0, [pc, #188]	; (8009ad8 <SEGGER_SYSVIEW_SendModule+0x110>)
 8009a1a:	f7fe ff01 	bl	8008820 <_PreparePacket>
 8009a1e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	627b      	str	r3, [r7, #36]	; 0x24
 8009a28:	79fb      	ldrb	r3, [r7, #7]
 8009a2a:	623b      	str	r3, [r7, #32]
 8009a2c:	e00b      	b.n	8009a46 <SEGGER_SYSVIEW_SendModule+0x7e>
 8009a2e:	6a3b      	ldr	r3, [r7, #32]
 8009a30:	b2da      	uxtb	r2, r3
 8009a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a34:	1c59      	adds	r1, r3, #1
 8009a36:	6279      	str	r1, [r7, #36]	; 0x24
 8009a38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009a3c:	b2d2      	uxtb	r2, r2
 8009a3e:	701a      	strb	r2, [r3, #0]
 8009a40:	6a3b      	ldr	r3, [r7, #32]
 8009a42:	09db      	lsrs	r3, r3, #7
 8009a44:	623b      	str	r3, [r7, #32]
 8009a46:	6a3b      	ldr	r3, [r7, #32]
 8009a48:	2b7f      	cmp	r3, #127	; 0x7f
 8009a4a:	d8f0      	bhi.n	8009a2e <SEGGER_SYSVIEW_SendModule+0x66>
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4e:	1c5a      	adds	r2, r3, #1
 8009a50:	627a      	str	r2, [r7, #36]	; 0x24
 8009a52:	6a3a      	ldr	r2, [r7, #32]
 8009a54:	b2d2      	uxtb	r2, r2
 8009a56:	701a      	strb	r2, [r3, #0]
 8009a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	61fb      	str	r3, [r7, #28]
 8009a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	61bb      	str	r3, [r7, #24]
 8009a66:	e00b      	b.n	8009a80 <SEGGER_SYSVIEW_SendModule+0xb8>
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	b2da      	uxtb	r2, r3
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	1c59      	adds	r1, r3, #1
 8009a70:	61f9      	str	r1, [r7, #28]
 8009a72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009a76:	b2d2      	uxtb	r2, r2
 8009a78:	701a      	strb	r2, [r3, #0]
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	09db      	lsrs	r3, r3, #7
 8009a7e:	61bb      	str	r3, [r7, #24]
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	2b7f      	cmp	r3, #127	; 0x7f
 8009a84:	d8f0      	bhi.n	8009a68 <SEGGER_SYSVIEW_SendModule+0xa0>
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	1c5a      	adds	r2, r3, #1
 8009a8a:	61fa      	str	r2, [r7, #28]
 8009a8c:	69ba      	ldr	r2, [r7, #24]
 8009a8e:	b2d2      	uxtb	r2, r2
 8009a90:	701a      	strb	r2, [r3, #0]
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2280      	movs	r2, #128	; 0x80
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	f7fe fe8e 	bl	80087c0 <_EncodeStr>
 8009aa4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8009aa6:	2216      	movs	r2, #22
 8009aa8:	68f9      	ldr	r1, [r7, #12]
 8009aaa:	6938      	ldr	r0, [r7, #16]
 8009aac:	f7fe ffa6 	bl	80089fc <_SendPacket>
      RECORD_END();
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8009ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d006      	beq.n	8009aca <SEGGER_SYSVIEW_SendModule+0x102>
 8009abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d002      	beq.n	8009aca <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8009ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	4798      	blx	r3
    }
  }
}
 8009aca:	bf00      	nop
 8009acc:	3730      	adds	r7, #48	; 0x30
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	2000d520 	.word	0x2000d520
 8009ad8:	2000d528 	.word	0x2000d528

08009adc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8009ae2:	4b0c      	ldr	r3, [pc, #48]	; (8009b14 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00f      	beq.n	8009b0a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8009aea:	4b0a      	ldr	r3, [pc, #40]	; (8009b14 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d002      	beq.n	8009afe <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d1f2      	bne.n	8009af0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8009b0a:	bf00      	nop
 8009b0c:	3708      	adds	r7, #8
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	2000d520 	.word	0x2000d520

08009b18 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b086      	sub	sp, #24
 8009b1c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8009b1e:	f3ef 8311 	mrs	r3, BASEPRI
 8009b22:	f04f 0120 	mov.w	r1, #32
 8009b26:	f381 8811 	msr	BASEPRI, r1
 8009b2a:	60fb      	str	r3, [r7, #12]
 8009b2c:	4817      	ldr	r0, [pc, #92]	; (8009b8c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8009b2e:	f7fe fe77 	bl	8008820 <_PreparePacket>
 8009b32:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	617b      	str	r3, [r7, #20]
 8009b3c:	4b14      	ldr	r3, [pc, #80]	; (8009b90 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	613b      	str	r3, [r7, #16]
 8009b42:	e00b      	b.n	8009b5c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	b2da      	uxtb	r2, r3
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	1c59      	adds	r1, r3, #1
 8009b4c:	6179      	str	r1, [r7, #20]
 8009b4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009b52:	b2d2      	uxtb	r2, r2
 8009b54:	701a      	strb	r2, [r3, #0]
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	09db      	lsrs	r3, r3, #7
 8009b5a:	613b      	str	r3, [r7, #16]
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	2b7f      	cmp	r3, #127	; 0x7f
 8009b60:	d8f0      	bhi.n	8009b44 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	1c5a      	adds	r2, r3, #1
 8009b66:	617a      	str	r2, [r7, #20]
 8009b68:	693a      	ldr	r2, [r7, #16]
 8009b6a:	b2d2      	uxtb	r2, r2
 8009b6c:	701a      	strb	r2, [r3, #0]
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8009b72:	221b      	movs	r2, #27
 8009b74:	6879      	ldr	r1, [r7, #4]
 8009b76:	68b8      	ldr	r0, [r7, #8]
 8009b78:	f7fe ff40 	bl	80089fc <_SendPacket>
  RECORD_END();
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f383 8811 	msr	BASEPRI, r3
}
 8009b82:	bf00      	nop
 8009b84:	3718      	adds	r7, #24
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	2000d528 	.word	0x2000d528
 8009b90:	2000d524 	.word	0x2000d524

08009b94 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b08a      	sub	sp, #40	; 0x28
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009b9c:	f3ef 8311 	mrs	r3, BASEPRI
 8009ba0:	f04f 0120 	mov.w	r1, #32
 8009ba4:	f381 8811 	msr	BASEPRI, r1
 8009ba8:	617b      	str	r3, [r7, #20]
 8009baa:	4827      	ldr	r0, [pc, #156]	; (8009c48 <SEGGER_SYSVIEW_Warn+0xb4>)
 8009bac:	f7fe fe38 	bl	8008820 <_PreparePacket>
 8009bb0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009bb2:	2280      	movs	r2, #128	; 0x80
 8009bb4:	6879      	ldr	r1, [r7, #4]
 8009bb6:	6938      	ldr	r0, [r7, #16]
 8009bb8:	f7fe fe02 	bl	80087c0 <_EncodeStr>
 8009bbc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	623b      	str	r3, [r7, #32]
 8009bc6:	e00b      	b.n	8009be0 <SEGGER_SYSVIEW_Warn+0x4c>
 8009bc8:	6a3b      	ldr	r3, [r7, #32]
 8009bca:	b2da      	uxtb	r2, r3
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	1c59      	adds	r1, r3, #1
 8009bd0:	6279      	str	r1, [r7, #36]	; 0x24
 8009bd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009bd6:	b2d2      	uxtb	r2, r2
 8009bd8:	701a      	strb	r2, [r3, #0]
 8009bda:	6a3b      	ldr	r3, [r7, #32]
 8009bdc:	09db      	lsrs	r3, r3, #7
 8009bde:	623b      	str	r3, [r7, #32]
 8009be0:	6a3b      	ldr	r3, [r7, #32]
 8009be2:	2b7f      	cmp	r3, #127	; 0x7f
 8009be4:	d8f0      	bhi.n	8009bc8 <SEGGER_SYSVIEW_Warn+0x34>
 8009be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be8:	1c5a      	adds	r2, r3, #1
 8009bea:	627a      	str	r2, [r7, #36]	; 0x24
 8009bec:	6a3a      	ldr	r2, [r7, #32]
 8009bee:	b2d2      	uxtb	r2, r2
 8009bf0:	701a      	strb	r2, [r3, #0]
 8009bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	61fb      	str	r3, [r7, #28]
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	61bb      	str	r3, [r7, #24]
 8009bfe:	e00b      	b.n	8009c18 <SEGGER_SYSVIEW_Warn+0x84>
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	b2da      	uxtb	r2, r3
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	1c59      	adds	r1, r3, #1
 8009c08:	61f9      	str	r1, [r7, #28]
 8009c0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009c0e:	b2d2      	uxtb	r2, r2
 8009c10:	701a      	strb	r2, [r3, #0]
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	09db      	lsrs	r3, r3, #7
 8009c16:	61bb      	str	r3, [r7, #24]
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8009c1c:	d8f0      	bhi.n	8009c00 <SEGGER_SYSVIEW_Warn+0x6c>
 8009c1e:	69fb      	ldr	r3, [r7, #28]
 8009c20:	1c5a      	adds	r2, r3, #1
 8009c22:	61fa      	str	r2, [r7, #28]
 8009c24:	69ba      	ldr	r2, [r7, #24]
 8009c26:	b2d2      	uxtb	r2, r2
 8009c28:	701a      	strb	r2, [r3, #0]
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8009c2e:	221a      	movs	r2, #26
 8009c30:	68f9      	ldr	r1, [r7, #12]
 8009c32:	6938      	ldr	r0, [r7, #16]
 8009c34:	f7fe fee2 	bl	80089fc <_SendPacket>
  RECORD_END();
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	f383 8811 	msr	BASEPRI, r3
}
 8009c3e:	bf00      	nop
 8009c40:	3728      	adds	r7, #40	; 0x28
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	2000d528 	.word	0x2000d528

08009c4c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]
 8009c58:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8009c5a:	683a      	ldr	r2, [r7, #0]
 8009c5c:	6879      	ldr	r1, [r7, #4]
 8009c5e:	2000      	movs	r0, #0
 8009c60:	f7fe fcb8 	bl	80085d4 <SEGGER_RTT_Write>
  return len;
 8009c64:	683b      	ldr	r3, [r7, #0]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3710      	adds	r7, #16
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
	...

08009c70 <__libc_init_array>:
 8009c70:	b570      	push	{r4, r5, r6, lr}
 8009c72:	4d0d      	ldr	r5, [pc, #52]	; (8009ca8 <__libc_init_array+0x38>)
 8009c74:	4c0d      	ldr	r4, [pc, #52]	; (8009cac <__libc_init_array+0x3c>)
 8009c76:	1b64      	subs	r4, r4, r5
 8009c78:	10a4      	asrs	r4, r4, #2
 8009c7a:	2600      	movs	r6, #0
 8009c7c:	42a6      	cmp	r6, r4
 8009c7e:	d109      	bne.n	8009c94 <__libc_init_array+0x24>
 8009c80:	4d0b      	ldr	r5, [pc, #44]	; (8009cb0 <__libc_init_array+0x40>)
 8009c82:	4c0c      	ldr	r4, [pc, #48]	; (8009cb4 <__libc_init_array+0x44>)
 8009c84:	f001 f996 	bl	800afb4 <_init>
 8009c88:	1b64      	subs	r4, r4, r5
 8009c8a:	10a4      	asrs	r4, r4, #2
 8009c8c:	2600      	movs	r6, #0
 8009c8e:	42a6      	cmp	r6, r4
 8009c90:	d105      	bne.n	8009c9e <__libc_init_array+0x2e>
 8009c92:	bd70      	pop	{r4, r5, r6, pc}
 8009c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c98:	4798      	blx	r3
 8009c9a:	3601      	adds	r6, #1
 8009c9c:	e7ee      	b.n	8009c7c <__libc_init_array+0xc>
 8009c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ca2:	4798      	blx	r3
 8009ca4:	3601      	adds	r6, #1
 8009ca6:	e7f2      	b.n	8009c8e <__libc_init_array+0x1e>
 8009ca8:	0800b524 	.word	0x0800b524
 8009cac:	0800b524 	.word	0x0800b524
 8009cb0:	0800b524 	.word	0x0800b524
 8009cb4:	0800b528 	.word	0x0800b528

08009cb8 <memcmp>:
 8009cb8:	b510      	push	{r4, lr}
 8009cba:	3901      	subs	r1, #1
 8009cbc:	4402      	add	r2, r0
 8009cbe:	4290      	cmp	r0, r2
 8009cc0:	d101      	bne.n	8009cc6 <memcmp+0xe>
 8009cc2:	2000      	movs	r0, #0
 8009cc4:	e005      	b.n	8009cd2 <memcmp+0x1a>
 8009cc6:	7803      	ldrb	r3, [r0, #0]
 8009cc8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009ccc:	42a3      	cmp	r3, r4
 8009cce:	d001      	beq.n	8009cd4 <memcmp+0x1c>
 8009cd0:	1b18      	subs	r0, r3, r4
 8009cd2:	bd10      	pop	{r4, pc}
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	e7f2      	b.n	8009cbe <memcmp+0x6>

08009cd8 <memcpy>:
 8009cd8:	440a      	add	r2, r1
 8009cda:	4291      	cmp	r1, r2
 8009cdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ce0:	d100      	bne.n	8009ce4 <memcpy+0xc>
 8009ce2:	4770      	bx	lr
 8009ce4:	b510      	push	{r4, lr}
 8009ce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cee:	4291      	cmp	r1, r2
 8009cf0:	d1f9      	bne.n	8009ce6 <memcpy+0xe>
 8009cf2:	bd10      	pop	{r4, pc}

08009cf4 <memset>:
 8009cf4:	4402      	add	r2, r0
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d100      	bne.n	8009cfe <memset+0xa>
 8009cfc:	4770      	bx	lr
 8009cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8009d02:	e7f9      	b.n	8009cf8 <memset+0x4>

08009d04 <iprintf>:
 8009d04:	b40f      	push	{r0, r1, r2, r3}
 8009d06:	4b0a      	ldr	r3, [pc, #40]	; (8009d30 <iprintf+0x2c>)
 8009d08:	b513      	push	{r0, r1, r4, lr}
 8009d0a:	681c      	ldr	r4, [r3, #0]
 8009d0c:	b124      	cbz	r4, 8009d18 <iprintf+0x14>
 8009d0e:	69a3      	ldr	r3, [r4, #24]
 8009d10:	b913      	cbnz	r3, 8009d18 <iprintf+0x14>
 8009d12:	4620      	mov	r0, r4
 8009d14:	f000 f886 	bl	8009e24 <__sinit>
 8009d18:	ab05      	add	r3, sp, #20
 8009d1a:	9a04      	ldr	r2, [sp, #16]
 8009d1c:	68a1      	ldr	r1, [r4, #8]
 8009d1e:	9301      	str	r3, [sp, #4]
 8009d20:	4620      	mov	r0, r4
 8009d22:	f000 fb39 	bl	800a398 <_vfiprintf_r>
 8009d26:	b002      	add	sp, #8
 8009d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d2c:	b004      	add	sp, #16
 8009d2e:	4770      	bx	lr
 8009d30:	20000028 	.word	0x20000028

08009d34 <siprintf>:
 8009d34:	b40e      	push	{r1, r2, r3}
 8009d36:	b500      	push	{lr}
 8009d38:	b09c      	sub	sp, #112	; 0x70
 8009d3a:	ab1d      	add	r3, sp, #116	; 0x74
 8009d3c:	9002      	str	r0, [sp, #8]
 8009d3e:	9006      	str	r0, [sp, #24]
 8009d40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d44:	4809      	ldr	r0, [pc, #36]	; (8009d6c <siprintf+0x38>)
 8009d46:	9107      	str	r1, [sp, #28]
 8009d48:	9104      	str	r1, [sp, #16]
 8009d4a:	4909      	ldr	r1, [pc, #36]	; (8009d70 <siprintf+0x3c>)
 8009d4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d50:	9105      	str	r1, [sp, #20]
 8009d52:	6800      	ldr	r0, [r0, #0]
 8009d54:	9301      	str	r3, [sp, #4]
 8009d56:	a902      	add	r1, sp, #8
 8009d58:	f000 f9f4 	bl	800a144 <_svfiprintf_r>
 8009d5c:	9b02      	ldr	r3, [sp, #8]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	701a      	strb	r2, [r3, #0]
 8009d62:	b01c      	add	sp, #112	; 0x70
 8009d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d68:	b003      	add	sp, #12
 8009d6a:	4770      	bx	lr
 8009d6c:	20000028 	.word	0x20000028
 8009d70:	ffff0208 	.word	0xffff0208

08009d74 <std>:
 8009d74:	2300      	movs	r3, #0
 8009d76:	b510      	push	{r4, lr}
 8009d78:	4604      	mov	r4, r0
 8009d7a:	e9c0 3300 	strd	r3, r3, [r0]
 8009d7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d82:	6083      	str	r3, [r0, #8]
 8009d84:	8181      	strh	r1, [r0, #12]
 8009d86:	6643      	str	r3, [r0, #100]	; 0x64
 8009d88:	81c2      	strh	r2, [r0, #14]
 8009d8a:	6183      	str	r3, [r0, #24]
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	2208      	movs	r2, #8
 8009d90:	305c      	adds	r0, #92	; 0x5c
 8009d92:	f7ff ffaf 	bl	8009cf4 <memset>
 8009d96:	4b05      	ldr	r3, [pc, #20]	; (8009dac <std+0x38>)
 8009d98:	6263      	str	r3, [r4, #36]	; 0x24
 8009d9a:	4b05      	ldr	r3, [pc, #20]	; (8009db0 <std+0x3c>)
 8009d9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d9e:	4b05      	ldr	r3, [pc, #20]	; (8009db4 <std+0x40>)
 8009da0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009da2:	4b05      	ldr	r3, [pc, #20]	; (8009db8 <std+0x44>)
 8009da4:	6224      	str	r4, [r4, #32]
 8009da6:	6323      	str	r3, [r4, #48]	; 0x30
 8009da8:	bd10      	pop	{r4, pc}
 8009daa:	bf00      	nop
 8009dac:	0800a941 	.word	0x0800a941
 8009db0:	0800a963 	.word	0x0800a963
 8009db4:	0800a99b 	.word	0x0800a99b
 8009db8:	0800a9bf 	.word	0x0800a9bf

08009dbc <_cleanup_r>:
 8009dbc:	4901      	ldr	r1, [pc, #4]	; (8009dc4 <_cleanup_r+0x8>)
 8009dbe:	f000 b8af 	b.w	8009f20 <_fwalk_reent>
 8009dc2:	bf00      	nop
 8009dc4:	0800ac75 	.word	0x0800ac75

08009dc8 <__sfmoreglue>:
 8009dc8:	b570      	push	{r4, r5, r6, lr}
 8009dca:	2268      	movs	r2, #104	; 0x68
 8009dcc:	1e4d      	subs	r5, r1, #1
 8009dce:	4355      	muls	r5, r2
 8009dd0:	460e      	mov	r6, r1
 8009dd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009dd6:	f000 f8e5 	bl	8009fa4 <_malloc_r>
 8009dda:	4604      	mov	r4, r0
 8009ddc:	b140      	cbz	r0, 8009df0 <__sfmoreglue+0x28>
 8009dde:	2100      	movs	r1, #0
 8009de0:	e9c0 1600 	strd	r1, r6, [r0]
 8009de4:	300c      	adds	r0, #12
 8009de6:	60a0      	str	r0, [r4, #8]
 8009de8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009dec:	f7ff ff82 	bl	8009cf4 <memset>
 8009df0:	4620      	mov	r0, r4
 8009df2:	bd70      	pop	{r4, r5, r6, pc}

08009df4 <__sfp_lock_acquire>:
 8009df4:	4801      	ldr	r0, [pc, #4]	; (8009dfc <__sfp_lock_acquire+0x8>)
 8009df6:	f000 b8b3 	b.w	8009f60 <__retarget_lock_acquire_recursive>
 8009dfa:	bf00      	nop
 8009dfc:	2000d60c 	.word	0x2000d60c

08009e00 <__sfp_lock_release>:
 8009e00:	4801      	ldr	r0, [pc, #4]	; (8009e08 <__sfp_lock_release+0x8>)
 8009e02:	f000 b8ae 	b.w	8009f62 <__retarget_lock_release_recursive>
 8009e06:	bf00      	nop
 8009e08:	2000d60c 	.word	0x2000d60c

08009e0c <__sinit_lock_acquire>:
 8009e0c:	4801      	ldr	r0, [pc, #4]	; (8009e14 <__sinit_lock_acquire+0x8>)
 8009e0e:	f000 b8a7 	b.w	8009f60 <__retarget_lock_acquire_recursive>
 8009e12:	bf00      	nop
 8009e14:	2000d60d 	.word	0x2000d60d

08009e18 <__sinit_lock_release>:
 8009e18:	4801      	ldr	r0, [pc, #4]	; (8009e20 <__sinit_lock_release+0x8>)
 8009e1a:	f000 b8a2 	b.w	8009f62 <__retarget_lock_release_recursive>
 8009e1e:	bf00      	nop
 8009e20:	2000d60d 	.word	0x2000d60d

08009e24 <__sinit>:
 8009e24:	b510      	push	{r4, lr}
 8009e26:	4604      	mov	r4, r0
 8009e28:	f7ff fff0 	bl	8009e0c <__sinit_lock_acquire>
 8009e2c:	69a3      	ldr	r3, [r4, #24]
 8009e2e:	b11b      	cbz	r3, 8009e38 <__sinit+0x14>
 8009e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e34:	f7ff bff0 	b.w	8009e18 <__sinit_lock_release>
 8009e38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009e3c:	6523      	str	r3, [r4, #80]	; 0x50
 8009e3e:	4b13      	ldr	r3, [pc, #76]	; (8009e8c <__sinit+0x68>)
 8009e40:	4a13      	ldr	r2, [pc, #76]	; (8009e90 <__sinit+0x6c>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	62a2      	str	r2, [r4, #40]	; 0x28
 8009e46:	42a3      	cmp	r3, r4
 8009e48:	bf04      	itt	eq
 8009e4a:	2301      	moveq	r3, #1
 8009e4c:	61a3      	streq	r3, [r4, #24]
 8009e4e:	4620      	mov	r0, r4
 8009e50:	f000 f820 	bl	8009e94 <__sfp>
 8009e54:	6060      	str	r0, [r4, #4]
 8009e56:	4620      	mov	r0, r4
 8009e58:	f000 f81c 	bl	8009e94 <__sfp>
 8009e5c:	60a0      	str	r0, [r4, #8]
 8009e5e:	4620      	mov	r0, r4
 8009e60:	f000 f818 	bl	8009e94 <__sfp>
 8009e64:	2200      	movs	r2, #0
 8009e66:	60e0      	str	r0, [r4, #12]
 8009e68:	2104      	movs	r1, #4
 8009e6a:	6860      	ldr	r0, [r4, #4]
 8009e6c:	f7ff ff82 	bl	8009d74 <std>
 8009e70:	68a0      	ldr	r0, [r4, #8]
 8009e72:	2201      	movs	r2, #1
 8009e74:	2109      	movs	r1, #9
 8009e76:	f7ff ff7d 	bl	8009d74 <std>
 8009e7a:	68e0      	ldr	r0, [r4, #12]
 8009e7c:	2202      	movs	r2, #2
 8009e7e:	2112      	movs	r1, #18
 8009e80:	f7ff ff78 	bl	8009d74 <std>
 8009e84:	2301      	movs	r3, #1
 8009e86:	61a3      	str	r3, [r4, #24]
 8009e88:	e7d2      	b.n	8009e30 <__sinit+0xc>
 8009e8a:	bf00      	nop
 8009e8c:	0800b484 	.word	0x0800b484
 8009e90:	08009dbd 	.word	0x08009dbd

08009e94 <__sfp>:
 8009e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e96:	4607      	mov	r7, r0
 8009e98:	f7ff ffac 	bl	8009df4 <__sfp_lock_acquire>
 8009e9c:	4b1e      	ldr	r3, [pc, #120]	; (8009f18 <__sfp+0x84>)
 8009e9e:	681e      	ldr	r6, [r3, #0]
 8009ea0:	69b3      	ldr	r3, [r6, #24]
 8009ea2:	b913      	cbnz	r3, 8009eaa <__sfp+0x16>
 8009ea4:	4630      	mov	r0, r6
 8009ea6:	f7ff ffbd 	bl	8009e24 <__sinit>
 8009eaa:	3648      	adds	r6, #72	; 0x48
 8009eac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	d503      	bpl.n	8009ebc <__sfp+0x28>
 8009eb4:	6833      	ldr	r3, [r6, #0]
 8009eb6:	b30b      	cbz	r3, 8009efc <__sfp+0x68>
 8009eb8:	6836      	ldr	r6, [r6, #0]
 8009eba:	e7f7      	b.n	8009eac <__sfp+0x18>
 8009ebc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ec0:	b9d5      	cbnz	r5, 8009ef8 <__sfp+0x64>
 8009ec2:	4b16      	ldr	r3, [pc, #88]	; (8009f1c <__sfp+0x88>)
 8009ec4:	60e3      	str	r3, [r4, #12]
 8009ec6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009eca:	6665      	str	r5, [r4, #100]	; 0x64
 8009ecc:	f000 f847 	bl	8009f5e <__retarget_lock_init_recursive>
 8009ed0:	f7ff ff96 	bl	8009e00 <__sfp_lock_release>
 8009ed4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ed8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009edc:	6025      	str	r5, [r4, #0]
 8009ede:	61a5      	str	r5, [r4, #24]
 8009ee0:	2208      	movs	r2, #8
 8009ee2:	4629      	mov	r1, r5
 8009ee4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ee8:	f7ff ff04 	bl	8009cf4 <memset>
 8009eec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ef0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ef8:	3468      	adds	r4, #104	; 0x68
 8009efa:	e7d9      	b.n	8009eb0 <__sfp+0x1c>
 8009efc:	2104      	movs	r1, #4
 8009efe:	4638      	mov	r0, r7
 8009f00:	f7ff ff62 	bl	8009dc8 <__sfmoreglue>
 8009f04:	4604      	mov	r4, r0
 8009f06:	6030      	str	r0, [r6, #0]
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	d1d5      	bne.n	8009eb8 <__sfp+0x24>
 8009f0c:	f7ff ff78 	bl	8009e00 <__sfp_lock_release>
 8009f10:	230c      	movs	r3, #12
 8009f12:	603b      	str	r3, [r7, #0]
 8009f14:	e7ee      	b.n	8009ef4 <__sfp+0x60>
 8009f16:	bf00      	nop
 8009f18:	0800b484 	.word	0x0800b484
 8009f1c:	ffff0001 	.word	0xffff0001

08009f20 <_fwalk_reent>:
 8009f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f24:	4606      	mov	r6, r0
 8009f26:	4688      	mov	r8, r1
 8009f28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009f2c:	2700      	movs	r7, #0
 8009f2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f32:	f1b9 0901 	subs.w	r9, r9, #1
 8009f36:	d505      	bpl.n	8009f44 <_fwalk_reent+0x24>
 8009f38:	6824      	ldr	r4, [r4, #0]
 8009f3a:	2c00      	cmp	r4, #0
 8009f3c:	d1f7      	bne.n	8009f2e <_fwalk_reent+0xe>
 8009f3e:	4638      	mov	r0, r7
 8009f40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f44:	89ab      	ldrh	r3, [r5, #12]
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d907      	bls.n	8009f5a <_fwalk_reent+0x3a>
 8009f4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f4e:	3301      	adds	r3, #1
 8009f50:	d003      	beq.n	8009f5a <_fwalk_reent+0x3a>
 8009f52:	4629      	mov	r1, r5
 8009f54:	4630      	mov	r0, r6
 8009f56:	47c0      	blx	r8
 8009f58:	4307      	orrs	r7, r0
 8009f5a:	3568      	adds	r5, #104	; 0x68
 8009f5c:	e7e9      	b.n	8009f32 <_fwalk_reent+0x12>

08009f5e <__retarget_lock_init_recursive>:
 8009f5e:	4770      	bx	lr

08009f60 <__retarget_lock_acquire_recursive>:
 8009f60:	4770      	bx	lr

08009f62 <__retarget_lock_release_recursive>:
 8009f62:	4770      	bx	lr

08009f64 <sbrk_aligned>:
 8009f64:	b570      	push	{r4, r5, r6, lr}
 8009f66:	4e0e      	ldr	r6, [pc, #56]	; (8009fa0 <sbrk_aligned+0x3c>)
 8009f68:	460c      	mov	r4, r1
 8009f6a:	6831      	ldr	r1, [r6, #0]
 8009f6c:	4605      	mov	r5, r0
 8009f6e:	b911      	cbnz	r1, 8009f76 <sbrk_aligned+0x12>
 8009f70:	f000 fcd6 	bl	800a920 <_sbrk_r>
 8009f74:	6030      	str	r0, [r6, #0]
 8009f76:	4621      	mov	r1, r4
 8009f78:	4628      	mov	r0, r5
 8009f7a:	f000 fcd1 	bl	800a920 <_sbrk_r>
 8009f7e:	1c43      	adds	r3, r0, #1
 8009f80:	d00a      	beq.n	8009f98 <sbrk_aligned+0x34>
 8009f82:	1cc4      	adds	r4, r0, #3
 8009f84:	f024 0403 	bic.w	r4, r4, #3
 8009f88:	42a0      	cmp	r0, r4
 8009f8a:	d007      	beq.n	8009f9c <sbrk_aligned+0x38>
 8009f8c:	1a21      	subs	r1, r4, r0
 8009f8e:	4628      	mov	r0, r5
 8009f90:	f000 fcc6 	bl	800a920 <_sbrk_r>
 8009f94:	3001      	adds	r0, #1
 8009f96:	d101      	bne.n	8009f9c <sbrk_aligned+0x38>
 8009f98:	f04f 34ff 	mov.w	r4, #4294967295
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	bd70      	pop	{r4, r5, r6, pc}
 8009fa0:	2000d614 	.word	0x2000d614

08009fa4 <_malloc_r>:
 8009fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa8:	1ccd      	adds	r5, r1, #3
 8009faa:	f025 0503 	bic.w	r5, r5, #3
 8009fae:	3508      	adds	r5, #8
 8009fb0:	2d0c      	cmp	r5, #12
 8009fb2:	bf38      	it	cc
 8009fb4:	250c      	movcc	r5, #12
 8009fb6:	2d00      	cmp	r5, #0
 8009fb8:	4607      	mov	r7, r0
 8009fba:	db01      	blt.n	8009fc0 <_malloc_r+0x1c>
 8009fbc:	42a9      	cmp	r1, r5
 8009fbe:	d905      	bls.n	8009fcc <_malloc_r+0x28>
 8009fc0:	230c      	movs	r3, #12
 8009fc2:	603b      	str	r3, [r7, #0]
 8009fc4:	2600      	movs	r6, #0
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fcc:	4e2e      	ldr	r6, [pc, #184]	; (800a088 <_malloc_r+0xe4>)
 8009fce:	f000 ff1f 	bl	800ae10 <__malloc_lock>
 8009fd2:	6833      	ldr	r3, [r6, #0]
 8009fd4:	461c      	mov	r4, r3
 8009fd6:	bb34      	cbnz	r4, 800a026 <_malloc_r+0x82>
 8009fd8:	4629      	mov	r1, r5
 8009fda:	4638      	mov	r0, r7
 8009fdc:	f7ff ffc2 	bl	8009f64 <sbrk_aligned>
 8009fe0:	1c43      	adds	r3, r0, #1
 8009fe2:	4604      	mov	r4, r0
 8009fe4:	d14d      	bne.n	800a082 <_malloc_r+0xde>
 8009fe6:	6834      	ldr	r4, [r6, #0]
 8009fe8:	4626      	mov	r6, r4
 8009fea:	2e00      	cmp	r6, #0
 8009fec:	d140      	bne.n	800a070 <_malloc_r+0xcc>
 8009fee:	6823      	ldr	r3, [r4, #0]
 8009ff0:	4631      	mov	r1, r6
 8009ff2:	4638      	mov	r0, r7
 8009ff4:	eb04 0803 	add.w	r8, r4, r3
 8009ff8:	f000 fc92 	bl	800a920 <_sbrk_r>
 8009ffc:	4580      	cmp	r8, r0
 8009ffe:	d13a      	bne.n	800a076 <_malloc_r+0xd2>
 800a000:	6821      	ldr	r1, [r4, #0]
 800a002:	3503      	adds	r5, #3
 800a004:	1a6d      	subs	r5, r5, r1
 800a006:	f025 0503 	bic.w	r5, r5, #3
 800a00a:	3508      	adds	r5, #8
 800a00c:	2d0c      	cmp	r5, #12
 800a00e:	bf38      	it	cc
 800a010:	250c      	movcc	r5, #12
 800a012:	4629      	mov	r1, r5
 800a014:	4638      	mov	r0, r7
 800a016:	f7ff ffa5 	bl	8009f64 <sbrk_aligned>
 800a01a:	3001      	adds	r0, #1
 800a01c:	d02b      	beq.n	800a076 <_malloc_r+0xd2>
 800a01e:	6823      	ldr	r3, [r4, #0]
 800a020:	442b      	add	r3, r5
 800a022:	6023      	str	r3, [r4, #0]
 800a024:	e00e      	b.n	800a044 <_malloc_r+0xa0>
 800a026:	6822      	ldr	r2, [r4, #0]
 800a028:	1b52      	subs	r2, r2, r5
 800a02a:	d41e      	bmi.n	800a06a <_malloc_r+0xc6>
 800a02c:	2a0b      	cmp	r2, #11
 800a02e:	d916      	bls.n	800a05e <_malloc_r+0xba>
 800a030:	1961      	adds	r1, r4, r5
 800a032:	42a3      	cmp	r3, r4
 800a034:	6025      	str	r5, [r4, #0]
 800a036:	bf18      	it	ne
 800a038:	6059      	strne	r1, [r3, #4]
 800a03a:	6863      	ldr	r3, [r4, #4]
 800a03c:	bf08      	it	eq
 800a03e:	6031      	streq	r1, [r6, #0]
 800a040:	5162      	str	r2, [r4, r5]
 800a042:	604b      	str	r3, [r1, #4]
 800a044:	4638      	mov	r0, r7
 800a046:	f104 060b 	add.w	r6, r4, #11
 800a04a:	f000 fee7 	bl	800ae1c <__malloc_unlock>
 800a04e:	f026 0607 	bic.w	r6, r6, #7
 800a052:	1d23      	adds	r3, r4, #4
 800a054:	1af2      	subs	r2, r6, r3
 800a056:	d0b6      	beq.n	8009fc6 <_malloc_r+0x22>
 800a058:	1b9b      	subs	r3, r3, r6
 800a05a:	50a3      	str	r3, [r4, r2]
 800a05c:	e7b3      	b.n	8009fc6 <_malloc_r+0x22>
 800a05e:	6862      	ldr	r2, [r4, #4]
 800a060:	42a3      	cmp	r3, r4
 800a062:	bf0c      	ite	eq
 800a064:	6032      	streq	r2, [r6, #0]
 800a066:	605a      	strne	r2, [r3, #4]
 800a068:	e7ec      	b.n	800a044 <_malloc_r+0xa0>
 800a06a:	4623      	mov	r3, r4
 800a06c:	6864      	ldr	r4, [r4, #4]
 800a06e:	e7b2      	b.n	8009fd6 <_malloc_r+0x32>
 800a070:	4634      	mov	r4, r6
 800a072:	6876      	ldr	r6, [r6, #4]
 800a074:	e7b9      	b.n	8009fea <_malloc_r+0x46>
 800a076:	230c      	movs	r3, #12
 800a078:	603b      	str	r3, [r7, #0]
 800a07a:	4638      	mov	r0, r7
 800a07c:	f000 fece 	bl	800ae1c <__malloc_unlock>
 800a080:	e7a1      	b.n	8009fc6 <_malloc_r+0x22>
 800a082:	6025      	str	r5, [r4, #0]
 800a084:	e7de      	b.n	800a044 <_malloc_r+0xa0>
 800a086:	bf00      	nop
 800a088:	2000d610 	.word	0x2000d610

0800a08c <__ssputs_r>:
 800a08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a090:	688e      	ldr	r6, [r1, #8]
 800a092:	429e      	cmp	r6, r3
 800a094:	4682      	mov	sl, r0
 800a096:	460c      	mov	r4, r1
 800a098:	4690      	mov	r8, r2
 800a09a:	461f      	mov	r7, r3
 800a09c:	d838      	bhi.n	800a110 <__ssputs_r+0x84>
 800a09e:	898a      	ldrh	r2, [r1, #12]
 800a0a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a0a4:	d032      	beq.n	800a10c <__ssputs_r+0x80>
 800a0a6:	6825      	ldr	r5, [r4, #0]
 800a0a8:	6909      	ldr	r1, [r1, #16]
 800a0aa:	eba5 0901 	sub.w	r9, r5, r1
 800a0ae:	6965      	ldr	r5, [r4, #20]
 800a0b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	444b      	add	r3, r9
 800a0bc:	106d      	asrs	r5, r5, #1
 800a0be:	429d      	cmp	r5, r3
 800a0c0:	bf38      	it	cc
 800a0c2:	461d      	movcc	r5, r3
 800a0c4:	0553      	lsls	r3, r2, #21
 800a0c6:	d531      	bpl.n	800a12c <__ssputs_r+0xa0>
 800a0c8:	4629      	mov	r1, r5
 800a0ca:	f7ff ff6b 	bl	8009fa4 <_malloc_r>
 800a0ce:	4606      	mov	r6, r0
 800a0d0:	b950      	cbnz	r0, 800a0e8 <__ssputs_r+0x5c>
 800a0d2:	230c      	movs	r3, #12
 800a0d4:	f8ca 3000 	str.w	r3, [sl]
 800a0d8:	89a3      	ldrh	r3, [r4, #12]
 800a0da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0de:	81a3      	strh	r3, [r4, #12]
 800a0e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0e8:	6921      	ldr	r1, [r4, #16]
 800a0ea:	464a      	mov	r2, r9
 800a0ec:	f7ff fdf4 	bl	8009cd8 <memcpy>
 800a0f0:	89a3      	ldrh	r3, [r4, #12]
 800a0f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0fa:	81a3      	strh	r3, [r4, #12]
 800a0fc:	6126      	str	r6, [r4, #16]
 800a0fe:	6165      	str	r5, [r4, #20]
 800a100:	444e      	add	r6, r9
 800a102:	eba5 0509 	sub.w	r5, r5, r9
 800a106:	6026      	str	r6, [r4, #0]
 800a108:	60a5      	str	r5, [r4, #8]
 800a10a:	463e      	mov	r6, r7
 800a10c:	42be      	cmp	r6, r7
 800a10e:	d900      	bls.n	800a112 <__ssputs_r+0x86>
 800a110:	463e      	mov	r6, r7
 800a112:	6820      	ldr	r0, [r4, #0]
 800a114:	4632      	mov	r2, r6
 800a116:	4641      	mov	r1, r8
 800a118:	f000 fe60 	bl	800addc <memmove>
 800a11c:	68a3      	ldr	r3, [r4, #8]
 800a11e:	1b9b      	subs	r3, r3, r6
 800a120:	60a3      	str	r3, [r4, #8]
 800a122:	6823      	ldr	r3, [r4, #0]
 800a124:	4433      	add	r3, r6
 800a126:	6023      	str	r3, [r4, #0]
 800a128:	2000      	movs	r0, #0
 800a12a:	e7db      	b.n	800a0e4 <__ssputs_r+0x58>
 800a12c:	462a      	mov	r2, r5
 800a12e:	f000 fec7 	bl	800aec0 <_realloc_r>
 800a132:	4606      	mov	r6, r0
 800a134:	2800      	cmp	r0, #0
 800a136:	d1e1      	bne.n	800a0fc <__ssputs_r+0x70>
 800a138:	6921      	ldr	r1, [r4, #16]
 800a13a:	4650      	mov	r0, sl
 800a13c:	f000 fe74 	bl	800ae28 <_free_r>
 800a140:	e7c7      	b.n	800a0d2 <__ssputs_r+0x46>
	...

0800a144 <_svfiprintf_r>:
 800a144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a148:	4698      	mov	r8, r3
 800a14a:	898b      	ldrh	r3, [r1, #12]
 800a14c:	061b      	lsls	r3, r3, #24
 800a14e:	b09d      	sub	sp, #116	; 0x74
 800a150:	4607      	mov	r7, r0
 800a152:	460d      	mov	r5, r1
 800a154:	4614      	mov	r4, r2
 800a156:	d50e      	bpl.n	800a176 <_svfiprintf_r+0x32>
 800a158:	690b      	ldr	r3, [r1, #16]
 800a15a:	b963      	cbnz	r3, 800a176 <_svfiprintf_r+0x32>
 800a15c:	2140      	movs	r1, #64	; 0x40
 800a15e:	f7ff ff21 	bl	8009fa4 <_malloc_r>
 800a162:	6028      	str	r0, [r5, #0]
 800a164:	6128      	str	r0, [r5, #16]
 800a166:	b920      	cbnz	r0, 800a172 <_svfiprintf_r+0x2e>
 800a168:	230c      	movs	r3, #12
 800a16a:	603b      	str	r3, [r7, #0]
 800a16c:	f04f 30ff 	mov.w	r0, #4294967295
 800a170:	e0d1      	b.n	800a316 <_svfiprintf_r+0x1d2>
 800a172:	2340      	movs	r3, #64	; 0x40
 800a174:	616b      	str	r3, [r5, #20]
 800a176:	2300      	movs	r3, #0
 800a178:	9309      	str	r3, [sp, #36]	; 0x24
 800a17a:	2320      	movs	r3, #32
 800a17c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a180:	f8cd 800c 	str.w	r8, [sp, #12]
 800a184:	2330      	movs	r3, #48	; 0x30
 800a186:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a330 <_svfiprintf_r+0x1ec>
 800a18a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a18e:	f04f 0901 	mov.w	r9, #1
 800a192:	4623      	mov	r3, r4
 800a194:	469a      	mov	sl, r3
 800a196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a19a:	b10a      	cbz	r2, 800a1a0 <_svfiprintf_r+0x5c>
 800a19c:	2a25      	cmp	r2, #37	; 0x25
 800a19e:	d1f9      	bne.n	800a194 <_svfiprintf_r+0x50>
 800a1a0:	ebba 0b04 	subs.w	fp, sl, r4
 800a1a4:	d00b      	beq.n	800a1be <_svfiprintf_r+0x7a>
 800a1a6:	465b      	mov	r3, fp
 800a1a8:	4622      	mov	r2, r4
 800a1aa:	4629      	mov	r1, r5
 800a1ac:	4638      	mov	r0, r7
 800a1ae:	f7ff ff6d 	bl	800a08c <__ssputs_r>
 800a1b2:	3001      	adds	r0, #1
 800a1b4:	f000 80aa 	beq.w	800a30c <_svfiprintf_r+0x1c8>
 800a1b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1ba:	445a      	add	r2, fp
 800a1bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a1be:	f89a 3000 	ldrb.w	r3, [sl]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f000 80a2 	beq.w	800a30c <_svfiprintf_r+0x1c8>
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1d2:	f10a 0a01 	add.w	sl, sl, #1
 800a1d6:	9304      	str	r3, [sp, #16]
 800a1d8:	9307      	str	r3, [sp, #28]
 800a1da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1de:	931a      	str	r3, [sp, #104]	; 0x68
 800a1e0:	4654      	mov	r4, sl
 800a1e2:	2205      	movs	r2, #5
 800a1e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1e8:	4851      	ldr	r0, [pc, #324]	; (800a330 <_svfiprintf_r+0x1ec>)
 800a1ea:	f7f6 f859 	bl	80002a0 <memchr>
 800a1ee:	9a04      	ldr	r2, [sp, #16]
 800a1f0:	b9d8      	cbnz	r0, 800a22a <_svfiprintf_r+0xe6>
 800a1f2:	06d0      	lsls	r0, r2, #27
 800a1f4:	bf44      	itt	mi
 800a1f6:	2320      	movmi	r3, #32
 800a1f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1fc:	0711      	lsls	r1, r2, #28
 800a1fe:	bf44      	itt	mi
 800a200:	232b      	movmi	r3, #43	; 0x2b
 800a202:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a206:	f89a 3000 	ldrb.w	r3, [sl]
 800a20a:	2b2a      	cmp	r3, #42	; 0x2a
 800a20c:	d015      	beq.n	800a23a <_svfiprintf_r+0xf6>
 800a20e:	9a07      	ldr	r2, [sp, #28]
 800a210:	4654      	mov	r4, sl
 800a212:	2000      	movs	r0, #0
 800a214:	f04f 0c0a 	mov.w	ip, #10
 800a218:	4621      	mov	r1, r4
 800a21a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a21e:	3b30      	subs	r3, #48	; 0x30
 800a220:	2b09      	cmp	r3, #9
 800a222:	d94e      	bls.n	800a2c2 <_svfiprintf_r+0x17e>
 800a224:	b1b0      	cbz	r0, 800a254 <_svfiprintf_r+0x110>
 800a226:	9207      	str	r2, [sp, #28]
 800a228:	e014      	b.n	800a254 <_svfiprintf_r+0x110>
 800a22a:	eba0 0308 	sub.w	r3, r0, r8
 800a22e:	fa09 f303 	lsl.w	r3, r9, r3
 800a232:	4313      	orrs	r3, r2
 800a234:	9304      	str	r3, [sp, #16]
 800a236:	46a2      	mov	sl, r4
 800a238:	e7d2      	b.n	800a1e0 <_svfiprintf_r+0x9c>
 800a23a:	9b03      	ldr	r3, [sp, #12]
 800a23c:	1d19      	adds	r1, r3, #4
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	9103      	str	r1, [sp, #12]
 800a242:	2b00      	cmp	r3, #0
 800a244:	bfbb      	ittet	lt
 800a246:	425b      	neglt	r3, r3
 800a248:	f042 0202 	orrlt.w	r2, r2, #2
 800a24c:	9307      	strge	r3, [sp, #28]
 800a24e:	9307      	strlt	r3, [sp, #28]
 800a250:	bfb8      	it	lt
 800a252:	9204      	strlt	r2, [sp, #16]
 800a254:	7823      	ldrb	r3, [r4, #0]
 800a256:	2b2e      	cmp	r3, #46	; 0x2e
 800a258:	d10c      	bne.n	800a274 <_svfiprintf_r+0x130>
 800a25a:	7863      	ldrb	r3, [r4, #1]
 800a25c:	2b2a      	cmp	r3, #42	; 0x2a
 800a25e:	d135      	bne.n	800a2cc <_svfiprintf_r+0x188>
 800a260:	9b03      	ldr	r3, [sp, #12]
 800a262:	1d1a      	adds	r2, r3, #4
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	9203      	str	r2, [sp, #12]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	bfb8      	it	lt
 800a26c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a270:	3402      	adds	r4, #2
 800a272:	9305      	str	r3, [sp, #20]
 800a274:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a340 <_svfiprintf_r+0x1fc>
 800a278:	7821      	ldrb	r1, [r4, #0]
 800a27a:	2203      	movs	r2, #3
 800a27c:	4650      	mov	r0, sl
 800a27e:	f7f6 f80f 	bl	80002a0 <memchr>
 800a282:	b140      	cbz	r0, 800a296 <_svfiprintf_r+0x152>
 800a284:	2340      	movs	r3, #64	; 0x40
 800a286:	eba0 000a 	sub.w	r0, r0, sl
 800a28a:	fa03 f000 	lsl.w	r0, r3, r0
 800a28e:	9b04      	ldr	r3, [sp, #16]
 800a290:	4303      	orrs	r3, r0
 800a292:	3401      	adds	r4, #1
 800a294:	9304      	str	r3, [sp, #16]
 800a296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a29a:	4826      	ldr	r0, [pc, #152]	; (800a334 <_svfiprintf_r+0x1f0>)
 800a29c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2a0:	2206      	movs	r2, #6
 800a2a2:	f7f5 fffd 	bl	80002a0 <memchr>
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	d038      	beq.n	800a31c <_svfiprintf_r+0x1d8>
 800a2aa:	4b23      	ldr	r3, [pc, #140]	; (800a338 <_svfiprintf_r+0x1f4>)
 800a2ac:	bb1b      	cbnz	r3, 800a2f6 <_svfiprintf_r+0x1b2>
 800a2ae:	9b03      	ldr	r3, [sp, #12]
 800a2b0:	3307      	adds	r3, #7
 800a2b2:	f023 0307 	bic.w	r3, r3, #7
 800a2b6:	3308      	adds	r3, #8
 800a2b8:	9303      	str	r3, [sp, #12]
 800a2ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2bc:	4433      	add	r3, r6
 800a2be:	9309      	str	r3, [sp, #36]	; 0x24
 800a2c0:	e767      	b.n	800a192 <_svfiprintf_r+0x4e>
 800a2c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2c6:	460c      	mov	r4, r1
 800a2c8:	2001      	movs	r0, #1
 800a2ca:	e7a5      	b.n	800a218 <_svfiprintf_r+0xd4>
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	3401      	adds	r4, #1
 800a2d0:	9305      	str	r3, [sp, #20]
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	f04f 0c0a 	mov.w	ip, #10
 800a2d8:	4620      	mov	r0, r4
 800a2da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2de:	3a30      	subs	r2, #48	; 0x30
 800a2e0:	2a09      	cmp	r2, #9
 800a2e2:	d903      	bls.n	800a2ec <_svfiprintf_r+0x1a8>
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d0c5      	beq.n	800a274 <_svfiprintf_r+0x130>
 800a2e8:	9105      	str	r1, [sp, #20]
 800a2ea:	e7c3      	b.n	800a274 <_svfiprintf_r+0x130>
 800a2ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e7f0      	b.n	800a2d8 <_svfiprintf_r+0x194>
 800a2f6:	ab03      	add	r3, sp, #12
 800a2f8:	9300      	str	r3, [sp, #0]
 800a2fa:	462a      	mov	r2, r5
 800a2fc:	4b0f      	ldr	r3, [pc, #60]	; (800a33c <_svfiprintf_r+0x1f8>)
 800a2fe:	a904      	add	r1, sp, #16
 800a300:	4638      	mov	r0, r7
 800a302:	f3af 8000 	nop.w
 800a306:	1c42      	adds	r2, r0, #1
 800a308:	4606      	mov	r6, r0
 800a30a:	d1d6      	bne.n	800a2ba <_svfiprintf_r+0x176>
 800a30c:	89ab      	ldrh	r3, [r5, #12]
 800a30e:	065b      	lsls	r3, r3, #25
 800a310:	f53f af2c 	bmi.w	800a16c <_svfiprintf_r+0x28>
 800a314:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a316:	b01d      	add	sp, #116	; 0x74
 800a318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a31c:	ab03      	add	r3, sp, #12
 800a31e:	9300      	str	r3, [sp, #0]
 800a320:	462a      	mov	r2, r5
 800a322:	4b06      	ldr	r3, [pc, #24]	; (800a33c <_svfiprintf_r+0x1f8>)
 800a324:	a904      	add	r1, sp, #16
 800a326:	4638      	mov	r0, r7
 800a328:	f000 f9d4 	bl	800a6d4 <_printf_i>
 800a32c:	e7eb      	b.n	800a306 <_svfiprintf_r+0x1c2>
 800a32e:	bf00      	nop
 800a330:	0800b4e8 	.word	0x0800b4e8
 800a334:	0800b4f2 	.word	0x0800b4f2
 800a338:	00000000 	.word	0x00000000
 800a33c:	0800a08d 	.word	0x0800a08d
 800a340:	0800b4ee 	.word	0x0800b4ee

0800a344 <__sfputc_r>:
 800a344:	6893      	ldr	r3, [r2, #8]
 800a346:	3b01      	subs	r3, #1
 800a348:	2b00      	cmp	r3, #0
 800a34a:	b410      	push	{r4}
 800a34c:	6093      	str	r3, [r2, #8]
 800a34e:	da08      	bge.n	800a362 <__sfputc_r+0x1e>
 800a350:	6994      	ldr	r4, [r2, #24]
 800a352:	42a3      	cmp	r3, r4
 800a354:	db01      	blt.n	800a35a <__sfputc_r+0x16>
 800a356:	290a      	cmp	r1, #10
 800a358:	d103      	bne.n	800a362 <__sfputc_r+0x1e>
 800a35a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a35e:	f000 bb33 	b.w	800a9c8 <__swbuf_r>
 800a362:	6813      	ldr	r3, [r2, #0]
 800a364:	1c58      	adds	r0, r3, #1
 800a366:	6010      	str	r0, [r2, #0]
 800a368:	7019      	strb	r1, [r3, #0]
 800a36a:	4608      	mov	r0, r1
 800a36c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a370:	4770      	bx	lr

0800a372 <__sfputs_r>:
 800a372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a374:	4606      	mov	r6, r0
 800a376:	460f      	mov	r7, r1
 800a378:	4614      	mov	r4, r2
 800a37a:	18d5      	adds	r5, r2, r3
 800a37c:	42ac      	cmp	r4, r5
 800a37e:	d101      	bne.n	800a384 <__sfputs_r+0x12>
 800a380:	2000      	movs	r0, #0
 800a382:	e007      	b.n	800a394 <__sfputs_r+0x22>
 800a384:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a388:	463a      	mov	r2, r7
 800a38a:	4630      	mov	r0, r6
 800a38c:	f7ff ffda 	bl	800a344 <__sfputc_r>
 800a390:	1c43      	adds	r3, r0, #1
 800a392:	d1f3      	bne.n	800a37c <__sfputs_r+0xa>
 800a394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a398 <_vfiprintf_r>:
 800a398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39c:	460d      	mov	r5, r1
 800a39e:	b09d      	sub	sp, #116	; 0x74
 800a3a0:	4614      	mov	r4, r2
 800a3a2:	4698      	mov	r8, r3
 800a3a4:	4606      	mov	r6, r0
 800a3a6:	b118      	cbz	r0, 800a3b0 <_vfiprintf_r+0x18>
 800a3a8:	6983      	ldr	r3, [r0, #24]
 800a3aa:	b90b      	cbnz	r3, 800a3b0 <_vfiprintf_r+0x18>
 800a3ac:	f7ff fd3a 	bl	8009e24 <__sinit>
 800a3b0:	4b89      	ldr	r3, [pc, #548]	; (800a5d8 <_vfiprintf_r+0x240>)
 800a3b2:	429d      	cmp	r5, r3
 800a3b4:	d11b      	bne.n	800a3ee <_vfiprintf_r+0x56>
 800a3b6:	6875      	ldr	r5, [r6, #4]
 800a3b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3ba:	07d9      	lsls	r1, r3, #31
 800a3bc:	d405      	bmi.n	800a3ca <_vfiprintf_r+0x32>
 800a3be:	89ab      	ldrh	r3, [r5, #12]
 800a3c0:	059a      	lsls	r2, r3, #22
 800a3c2:	d402      	bmi.n	800a3ca <_vfiprintf_r+0x32>
 800a3c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3c6:	f7ff fdcb 	bl	8009f60 <__retarget_lock_acquire_recursive>
 800a3ca:	89ab      	ldrh	r3, [r5, #12]
 800a3cc:	071b      	lsls	r3, r3, #28
 800a3ce:	d501      	bpl.n	800a3d4 <_vfiprintf_r+0x3c>
 800a3d0:	692b      	ldr	r3, [r5, #16]
 800a3d2:	b9eb      	cbnz	r3, 800a410 <_vfiprintf_r+0x78>
 800a3d4:	4629      	mov	r1, r5
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	f000 fb48 	bl	800aa6c <__swsetup_r>
 800a3dc:	b1c0      	cbz	r0, 800a410 <_vfiprintf_r+0x78>
 800a3de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3e0:	07dc      	lsls	r4, r3, #31
 800a3e2:	d50e      	bpl.n	800a402 <_vfiprintf_r+0x6a>
 800a3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e8:	b01d      	add	sp, #116	; 0x74
 800a3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ee:	4b7b      	ldr	r3, [pc, #492]	; (800a5dc <_vfiprintf_r+0x244>)
 800a3f0:	429d      	cmp	r5, r3
 800a3f2:	d101      	bne.n	800a3f8 <_vfiprintf_r+0x60>
 800a3f4:	68b5      	ldr	r5, [r6, #8]
 800a3f6:	e7df      	b.n	800a3b8 <_vfiprintf_r+0x20>
 800a3f8:	4b79      	ldr	r3, [pc, #484]	; (800a5e0 <_vfiprintf_r+0x248>)
 800a3fa:	429d      	cmp	r5, r3
 800a3fc:	bf08      	it	eq
 800a3fe:	68f5      	ldreq	r5, [r6, #12]
 800a400:	e7da      	b.n	800a3b8 <_vfiprintf_r+0x20>
 800a402:	89ab      	ldrh	r3, [r5, #12]
 800a404:	0598      	lsls	r0, r3, #22
 800a406:	d4ed      	bmi.n	800a3e4 <_vfiprintf_r+0x4c>
 800a408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a40a:	f7ff fdaa 	bl	8009f62 <__retarget_lock_release_recursive>
 800a40e:	e7e9      	b.n	800a3e4 <_vfiprintf_r+0x4c>
 800a410:	2300      	movs	r3, #0
 800a412:	9309      	str	r3, [sp, #36]	; 0x24
 800a414:	2320      	movs	r3, #32
 800a416:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a41a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a41e:	2330      	movs	r3, #48	; 0x30
 800a420:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a5e4 <_vfiprintf_r+0x24c>
 800a424:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a428:	f04f 0901 	mov.w	r9, #1
 800a42c:	4623      	mov	r3, r4
 800a42e:	469a      	mov	sl, r3
 800a430:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a434:	b10a      	cbz	r2, 800a43a <_vfiprintf_r+0xa2>
 800a436:	2a25      	cmp	r2, #37	; 0x25
 800a438:	d1f9      	bne.n	800a42e <_vfiprintf_r+0x96>
 800a43a:	ebba 0b04 	subs.w	fp, sl, r4
 800a43e:	d00b      	beq.n	800a458 <_vfiprintf_r+0xc0>
 800a440:	465b      	mov	r3, fp
 800a442:	4622      	mov	r2, r4
 800a444:	4629      	mov	r1, r5
 800a446:	4630      	mov	r0, r6
 800a448:	f7ff ff93 	bl	800a372 <__sfputs_r>
 800a44c:	3001      	adds	r0, #1
 800a44e:	f000 80aa 	beq.w	800a5a6 <_vfiprintf_r+0x20e>
 800a452:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a454:	445a      	add	r2, fp
 800a456:	9209      	str	r2, [sp, #36]	; 0x24
 800a458:	f89a 3000 	ldrb.w	r3, [sl]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	f000 80a2 	beq.w	800a5a6 <_vfiprintf_r+0x20e>
 800a462:	2300      	movs	r3, #0
 800a464:	f04f 32ff 	mov.w	r2, #4294967295
 800a468:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a46c:	f10a 0a01 	add.w	sl, sl, #1
 800a470:	9304      	str	r3, [sp, #16]
 800a472:	9307      	str	r3, [sp, #28]
 800a474:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a478:	931a      	str	r3, [sp, #104]	; 0x68
 800a47a:	4654      	mov	r4, sl
 800a47c:	2205      	movs	r2, #5
 800a47e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a482:	4858      	ldr	r0, [pc, #352]	; (800a5e4 <_vfiprintf_r+0x24c>)
 800a484:	f7f5 ff0c 	bl	80002a0 <memchr>
 800a488:	9a04      	ldr	r2, [sp, #16]
 800a48a:	b9d8      	cbnz	r0, 800a4c4 <_vfiprintf_r+0x12c>
 800a48c:	06d1      	lsls	r1, r2, #27
 800a48e:	bf44      	itt	mi
 800a490:	2320      	movmi	r3, #32
 800a492:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a496:	0713      	lsls	r3, r2, #28
 800a498:	bf44      	itt	mi
 800a49a:	232b      	movmi	r3, #43	; 0x2b
 800a49c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4a0:	f89a 3000 	ldrb.w	r3, [sl]
 800a4a4:	2b2a      	cmp	r3, #42	; 0x2a
 800a4a6:	d015      	beq.n	800a4d4 <_vfiprintf_r+0x13c>
 800a4a8:	9a07      	ldr	r2, [sp, #28]
 800a4aa:	4654      	mov	r4, sl
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	f04f 0c0a 	mov.w	ip, #10
 800a4b2:	4621      	mov	r1, r4
 800a4b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4b8:	3b30      	subs	r3, #48	; 0x30
 800a4ba:	2b09      	cmp	r3, #9
 800a4bc:	d94e      	bls.n	800a55c <_vfiprintf_r+0x1c4>
 800a4be:	b1b0      	cbz	r0, 800a4ee <_vfiprintf_r+0x156>
 800a4c0:	9207      	str	r2, [sp, #28]
 800a4c2:	e014      	b.n	800a4ee <_vfiprintf_r+0x156>
 800a4c4:	eba0 0308 	sub.w	r3, r0, r8
 800a4c8:	fa09 f303 	lsl.w	r3, r9, r3
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	9304      	str	r3, [sp, #16]
 800a4d0:	46a2      	mov	sl, r4
 800a4d2:	e7d2      	b.n	800a47a <_vfiprintf_r+0xe2>
 800a4d4:	9b03      	ldr	r3, [sp, #12]
 800a4d6:	1d19      	adds	r1, r3, #4
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	9103      	str	r1, [sp, #12]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	bfbb      	ittet	lt
 800a4e0:	425b      	neglt	r3, r3
 800a4e2:	f042 0202 	orrlt.w	r2, r2, #2
 800a4e6:	9307      	strge	r3, [sp, #28]
 800a4e8:	9307      	strlt	r3, [sp, #28]
 800a4ea:	bfb8      	it	lt
 800a4ec:	9204      	strlt	r2, [sp, #16]
 800a4ee:	7823      	ldrb	r3, [r4, #0]
 800a4f0:	2b2e      	cmp	r3, #46	; 0x2e
 800a4f2:	d10c      	bne.n	800a50e <_vfiprintf_r+0x176>
 800a4f4:	7863      	ldrb	r3, [r4, #1]
 800a4f6:	2b2a      	cmp	r3, #42	; 0x2a
 800a4f8:	d135      	bne.n	800a566 <_vfiprintf_r+0x1ce>
 800a4fa:	9b03      	ldr	r3, [sp, #12]
 800a4fc:	1d1a      	adds	r2, r3, #4
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	9203      	str	r2, [sp, #12]
 800a502:	2b00      	cmp	r3, #0
 800a504:	bfb8      	it	lt
 800a506:	f04f 33ff 	movlt.w	r3, #4294967295
 800a50a:	3402      	adds	r4, #2
 800a50c:	9305      	str	r3, [sp, #20]
 800a50e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a5f4 <_vfiprintf_r+0x25c>
 800a512:	7821      	ldrb	r1, [r4, #0]
 800a514:	2203      	movs	r2, #3
 800a516:	4650      	mov	r0, sl
 800a518:	f7f5 fec2 	bl	80002a0 <memchr>
 800a51c:	b140      	cbz	r0, 800a530 <_vfiprintf_r+0x198>
 800a51e:	2340      	movs	r3, #64	; 0x40
 800a520:	eba0 000a 	sub.w	r0, r0, sl
 800a524:	fa03 f000 	lsl.w	r0, r3, r0
 800a528:	9b04      	ldr	r3, [sp, #16]
 800a52a:	4303      	orrs	r3, r0
 800a52c:	3401      	adds	r4, #1
 800a52e:	9304      	str	r3, [sp, #16]
 800a530:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a534:	482c      	ldr	r0, [pc, #176]	; (800a5e8 <_vfiprintf_r+0x250>)
 800a536:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a53a:	2206      	movs	r2, #6
 800a53c:	f7f5 feb0 	bl	80002a0 <memchr>
 800a540:	2800      	cmp	r0, #0
 800a542:	d03f      	beq.n	800a5c4 <_vfiprintf_r+0x22c>
 800a544:	4b29      	ldr	r3, [pc, #164]	; (800a5ec <_vfiprintf_r+0x254>)
 800a546:	bb1b      	cbnz	r3, 800a590 <_vfiprintf_r+0x1f8>
 800a548:	9b03      	ldr	r3, [sp, #12]
 800a54a:	3307      	adds	r3, #7
 800a54c:	f023 0307 	bic.w	r3, r3, #7
 800a550:	3308      	adds	r3, #8
 800a552:	9303      	str	r3, [sp, #12]
 800a554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a556:	443b      	add	r3, r7
 800a558:	9309      	str	r3, [sp, #36]	; 0x24
 800a55a:	e767      	b.n	800a42c <_vfiprintf_r+0x94>
 800a55c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a560:	460c      	mov	r4, r1
 800a562:	2001      	movs	r0, #1
 800a564:	e7a5      	b.n	800a4b2 <_vfiprintf_r+0x11a>
 800a566:	2300      	movs	r3, #0
 800a568:	3401      	adds	r4, #1
 800a56a:	9305      	str	r3, [sp, #20]
 800a56c:	4619      	mov	r1, r3
 800a56e:	f04f 0c0a 	mov.w	ip, #10
 800a572:	4620      	mov	r0, r4
 800a574:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a578:	3a30      	subs	r2, #48	; 0x30
 800a57a:	2a09      	cmp	r2, #9
 800a57c:	d903      	bls.n	800a586 <_vfiprintf_r+0x1ee>
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d0c5      	beq.n	800a50e <_vfiprintf_r+0x176>
 800a582:	9105      	str	r1, [sp, #20]
 800a584:	e7c3      	b.n	800a50e <_vfiprintf_r+0x176>
 800a586:	fb0c 2101 	mla	r1, ip, r1, r2
 800a58a:	4604      	mov	r4, r0
 800a58c:	2301      	movs	r3, #1
 800a58e:	e7f0      	b.n	800a572 <_vfiprintf_r+0x1da>
 800a590:	ab03      	add	r3, sp, #12
 800a592:	9300      	str	r3, [sp, #0]
 800a594:	462a      	mov	r2, r5
 800a596:	4b16      	ldr	r3, [pc, #88]	; (800a5f0 <_vfiprintf_r+0x258>)
 800a598:	a904      	add	r1, sp, #16
 800a59a:	4630      	mov	r0, r6
 800a59c:	f3af 8000 	nop.w
 800a5a0:	4607      	mov	r7, r0
 800a5a2:	1c78      	adds	r0, r7, #1
 800a5a4:	d1d6      	bne.n	800a554 <_vfiprintf_r+0x1bc>
 800a5a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5a8:	07d9      	lsls	r1, r3, #31
 800a5aa:	d405      	bmi.n	800a5b8 <_vfiprintf_r+0x220>
 800a5ac:	89ab      	ldrh	r3, [r5, #12]
 800a5ae:	059a      	lsls	r2, r3, #22
 800a5b0:	d402      	bmi.n	800a5b8 <_vfiprintf_r+0x220>
 800a5b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5b4:	f7ff fcd5 	bl	8009f62 <__retarget_lock_release_recursive>
 800a5b8:	89ab      	ldrh	r3, [r5, #12]
 800a5ba:	065b      	lsls	r3, r3, #25
 800a5bc:	f53f af12 	bmi.w	800a3e4 <_vfiprintf_r+0x4c>
 800a5c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5c2:	e711      	b.n	800a3e8 <_vfiprintf_r+0x50>
 800a5c4:	ab03      	add	r3, sp, #12
 800a5c6:	9300      	str	r3, [sp, #0]
 800a5c8:	462a      	mov	r2, r5
 800a5ca:	4b09      	ldr	r3, [pc, #36]	; (800a5f0 <_vfiprintf_r+0x258>)
 800a5cc:	a904      	add	r1, sp, #16
 800a5ce:	4630      	mov	r0, r6
 800a5d0:	f000 f880 	bl	800a6d4 <_printf_i>
 800a5d4:	e7e4      	b.n	800a5a0 <_vfiprintf_r+0x208>
 800a5d6:	bf00      	nop
 800a5d8:	0800b4a8 	.word	0x0800b4a8
 800a5dc:	0800b4c8 	.word	0x0800b4c8
 800a5e0:	0800b488 	.word	0x0800b488
 800a5e4:	0800b4e8 	.word	0x0800b4e8
 800a5e8:	0800b4f2 	.word	0x0800b4f2
 800a5ec:	00000000 	.word	0x00000000
 800a5f0:	0800a373 	.word	0x0800a373
 800a5f4:	0800b4ee 	.word	0x0800b4ee

0800a5f8 <_printf_common>:
 800a5f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5fc:	4616      	mov	r6, r2
 800a5fe:	4699      	mov	r9, r3
 800a600:	688a      	ldr	r2, [r1, #8]
 800a602:	690b      	ldr	r3, [r1, #16]
 800a604:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a608:	4293      	cmp	r3, r2
 800a60a:	bfb8      	it	lt
 800a60c:	4613      	movlt	r3, r2
 800a60e:	6033      	str	r3, [r6, #0]
 800a610:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a614:	4607      	mov	r7, r0
 800a616:	460c      	mov	r4, r1
 800a618:	b10a      	cbz	r2, 800a61e <_printf_common+0x26>
 800a61a:	3301      	adds	r3, #1
 800a61c:	6033      	str	r3, [r6, #0]
 800a61e:	6823      	ldr	r3, [r4, #0]
 800a620:	0699      	lsls	r1, r3, #26
 800a622:	bf42      	ittt	mi
 800a624:	6833      	ldrmi	r3, [r6, #0]
 800a626:	3302      	addmi	r3, #2
 800a628:	6033      	strmi	r3, [r6, #0]
 800a62a:	6825      	ldr	r5, [r4, #0]
 800a62c:	f015 0506 	ands.w	r5, r5, #6
 800a630:	d106      	bne.n	800a640 <_printf_common+0x48>
 800a632:	f104 0a19 	add.w	sl, r4, #25
 800a636:	68e3      	ldr	r3, [r4, #12]
 800a638:	6832      	ldr	r2, [r6, #0]
 800a63a:	1a9b      	subs	r3, r3, r2
 800a63c:	42ab      	cmp	r3, r5
 800a63e:	dc26      	bgt.n	800a68e <_printf_common+0x96>
 800a640:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a644:	1e13      	subs	r3, r2, #0
 800a646:	6822      	ldr	r2, [r4, #0]
 800a648:	bf18      	it	ne
 800a64a:	2301      	movne	r3, #1
 800a64c:	0692      	lsls	r2, r2, #26
 800a64e:	d42b      	bmi.n	800a6a8 <_printf_common+0xb0>
 800a650:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a654:	4649      	mov	r1, r9
 800a656:	4638      	mov	r0, r7
 800a658:	47c0      	blx	r8
 800a65a:	3001      	adds	r0, #1
 800a65c:	d01e      	beq.n	800a69c <_printf_common+0xa4>
 800a65e:	6823      	ldr	r3, [r4, #0]
 800a660:	68e5      	ldr	r5, [r4, #12]
 800a662:	6832      	ldr	r2, [r6, #0]
 800a664:	f003 0306 	and.w	r3, r3, #6
 800a668:	2b04      	cmp	r3, #4
 800a66a:	bf08      	it	eq
 800a66c:	1aad      	subeq	r5, r5, r2
 800a66e:	68a3      	ldr	r3, [r4, #8]
 800a670:	6922      	ldr	r2, [r4, #16]
 800a672:	bf0c      	ite	eq
 800a674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a678:	2500      	movne	r5, #0
 800a67a:	4293      	cmp	r3, r2
 800a67c:	bfc4      	itt	gt
 800a67e:	1a9b      	subgt	r3, r3, r2
 800a680:	18ed      	addgt	r5, r5, r3
 800a682:	2600      	movs	r6, #0
 800a684:	341a      	adds	r4, #26
 800a686:	42b5      	cmp	r5, r6
 800a688:	d11a      	bne.n	800a6c0 <_printf_common+0xc8>
 800a68a:	2000      	movs	r0, #0
 800a68c:	e008      	b.n	800a6a0 <_printf_common+0xa8>
 800a68e:	2301      	movs	r3, #1
 800a690:	4652      	mov	r2, sl
 800a692:	4649      	mov	r1, r9
 800a694:	4638      	mov	r0, r7
 800a696:	47c0      	blx	r8
 800a698:	3001      	adds	r0, #1
 800a69a:	d103      	bne.n	800a6a4 <_printf_common+0xac>
 800a69c:	f04f 30ff 	mov.w	r0, #4294967295
 800a6a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6a4:	3501      	adds	r5, #1
 800a6a6:	e7c6      	b.n	800a636 <_printf_common+0x3e>
 800a6a8:	18e1      	adds	r1, r4, r3
 800a6aa:	1c5a      	adds	r2, r3, #1
 800a6ac:	2030      	movs	r0, #48	; 0x30
 800a6ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a6b2:	4422      	add	r2, r4
 800a6b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a6b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a6bc:	3302      	adds	r3, #2
 800a6be:	e7c7      	b.n	800a650 <_printf_common+0x58>
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	4622      	mov	r2, r4
 800a6c4:	4649      	mov	r1, r9
 800a6c6:	4638      	mov	r0, r7
 800a6c8:	47c0      	blx	r8
 800a6ca:	3001      	adds	r0, #1
 800a6cc:	d0e6      	beq.n	800a69c <_printf_common+0xa4>
 800a6ce:	3601      	adds	r6, #1
 800a6d0:	e7d9      	b.n	800a686 <_printf_common+0x8e>
	...

0800a6d4 <_printf_i>:
 800a6d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6d8:	7e0f      	ldrb	r7, [r1, #24]
 800a6da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a6dc:	2f78      	cmp	r7, #120	; 0x78
 800a6de:	4691      	mov	r9, r2
 800a6e0:	4680      	mov	r8, r0
 800a6e2:	460c      	mov	r4, r1
 800a6e4:	469a      	mov	sl, r3
 800a6e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a6ea:	d807      	bhi.n	800a6fc <_printf_i+0x28>
 800a6ec:	2f62      	cmp	r7, #98	; 0x62
 800a6ee:	d80a      	bhi.n	800a706 <_printf_i+0x32>
 800a6f0:	2f00      	cmp	r7, #0
 800a6f2:	f000 80d8 	beq.w	800a8a6 <_printf_i+0x1d2>
 800a6f6:	2f58      	cmp	r7, #88	; 0x58
 800a6f8:	f000 80a3 	beq.w	800a842 <_printf_i+0x16e>
 800a6fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a700:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a704:	e03a      	b.n	800a77c <_printf_i+0xa8>
 800a706:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a70a:	2b15      	cmp	r3, #21
 800a70c:	d8f6      	bhi.n	800a6fc <_printf_i+0x28>
 800a70e:	a101      	add	r1, pc, #4	; (adr r1, 800a714 <_printf_i+0x40>)
 800a710:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a714:	0800a76d 	.word	0x0800a76d
 800a718:	0800a781 	.word	0x0800a781
 800a71c:	0800a6fd 	.word	0x0800a6fd
 800a720:	0800a6fd 	.word	0x0800a6fd
 800a724:	0800a6fd 	.word	0x0800a6fd
 800a728:	0800a6fd 	.word	0x0800a6fd
 800a72c:	0800a781 	.word	0x0800a781
 800a730:	0800a6fd 	.word	0x0800a6fd
 800a734:	0800a6fd 	.word	0x0800a6fd
 800a738:	0800a6fd 	.word	0x0800a6fd
 800a73c:	0800a6fd 	.word	0x0800a6fd
 800a740:	0800a88d 	.word	0x0800a88d
 800a744:	0800a7b1 	.word	0x0800a7b1
 800a748:	0800a86f 	.word	0x0800a86f
 800a74c:	0800a6fd 	.word	0x0800a6fd
 800a750:	0800a6fd 	.word	0x0800a6fd
 800a754:	0800a8af 	.word	0x0800a8af
 800a758:	0800a6fd 	.word	0x0800a6fd
 800a75c:	0800a7b1 	.word	0x0800a7b1
 800a760:	0800a6fd 	.word	0x0800a6fd
 800a764:	0800a6fd 	.word	0x0800a6fd
 800a768:	0800a877 	.word	0x0800a877
 800a76c:	682b      	ldr	r3, [r5, #0]
 800a76e:	1d1a      	adds	r2, r3, #4
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	602a      	str	r2, [r5, #0]
 800a774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a778:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a77c:	2301      	movs	r3, #1
 800a77e:	e0a3      	b.n	800a8c8 <_printf_i+0x1f4>
 800a780:	6820      	ldr	r0, [r4, #0]
 800a782:	6829      	ldr	r1, [r5, #0]
 800a784:	0606      	lsls	r6, r0, #24
 800a786:	f101 0304 	add.w	r3, r1, #4
 800a78a:	d50a      	bpl.n	800a7a2 <_printf_i+0xce>
 800a78c:	680e      	ldr	r6, [r1, #0]
 800a78e:	602b      	str	r3, [r5, #0]
 800a790:	2e00      	cmp	r6, #0
 800a792:	da03      	bge.n	800a79c <_printf_i+0xc8>
 800a794:	232d      	movs	r3, #45	; 0x2d
 800a796:	4276      	negs	r6, r6
 800a798:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a79c:	485e      	ldr	r0, [pc, #376]	; (800a918 <_printf_i+0x244>)
 800a79e:	230a      	movs	r3, #10
 800a7a0:	e019      	b.n	800a7d6 <_printf_i+0x102>
 800a7a2:	680e      	ldr	r6, [r1, #0]
 800a7a4:	602b      	str	r3, [r5, #0]
 800a7a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a7aa:	bf18      	it	ne
 800a7ac:	b236      	sxthne	r6, r6
 800a7ae:	e7ef      	b.n	800a790 <_printf_i+0xbc>
 800a7b0:	682b      	ldr	r3, [r5, #0]
 800a7b2:	6820      	ldr	r0, [r4, #0]
 800a7b4:	1d19      	adds	r1, r3, #4
 800a7b6:	6029      	str	r1, [r5, #0]
 800a7b8:	0601      	lsls	r1, r0, #24
 800a7ba:	d501      	bpl.n	800a7c0 <_printf_i+0xec>
 800a7bc:	681e      	ldr	r6, [r3, #0]
 800a7be:	e002      	b.n	800a7c6 <_printf_i+0xf2>
 800a7c0:	0646      	lsls	r6, r0, #25
 800a7c2:	d5fb      	bpl.n	800a7bc <_printf_i+0xe8>
 800a7c4:	881e      	ldrh	r6, [r3, #0]
 800a7c6:	4854      	ldr	r0, [pc, #336]	; (800a918 <_printf_i+0x244>)
 800a7c8:	2f6f      	cmp	r7, #111	; 0x6f
 800a7ca:	bf0c      	ite	eq
 800a7cc:	2308      	moveq	r3, #8
 800a7ce:	230a      	movne	r3, #10
 800a7d0:	2100      	movs	r1, #0
 800a7d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a7d6:	6865      	ldr	r5, [r4, #4]
 800a7d8:	60a5      	str	r5, [r4, #8]
 800a7da:	2d00      	cmp	r5, #0
 800a7dc:	bfa2      	ittt	ge
 800a7de:	6821      	ldrge	r1, [r4, #0]
 800a7e0:	f021 0104 	bicge.w	r1, r1, #4
 800a7e4:	6021      	strge	r1, [r4, #0]
 800a7e6:	b90e      	cbnz	r6, 800a7ec <_printf_i+0x118>
 800a7e8:	2d00      	cmp	r5, #0
 800a7ea:	d04d      	beq.n	800a888 <_printf_i+0x1b4>
 800a7ec:	4615      	mov	r5, r2
 800a7ee:	fbb6 f1f3 	udiv	r1, r6, r3
 800a7f2:	fb03 6711 	mls	r7, r3, r1, r6
 800a7f6:	5dc7      	ldrb	r7, [r0, r7]
 800a7f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a7fc:	4637      	mov	r7, r6
 800a7fe:	42bb      	cmp	r3, r7
 800a800:	460e      	mov	r6, r1
 800a802:	d9f4      	bls.n	800a7ee <_printf_i+0x11a>
 800a804:	2b08      	cmp	r3, #8
 800a806:	d10b      	bne.n	800a820 <_printf_i+0x14c>
 800a808:	6823      	ldr	r3, [r4, #0]
 800a80a:	07de      	lsls	r6, r3, #31
 800a80c:	d508      	bpl.n	800a820 <_printf_i+0x14c>
 800a80e:	6923      	ldr	r3, [r4, #16]
 800a810:	6861      	ldr	r1, [r4, #4]
 800a812:	4299      	cmp	r1, r3
 800a814:	bfde      	ittt	le
 800a816:	2330      	movle	r3, #48	; 0x30
 800a818:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a81c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a820:	1b52      	subs	r2, r2, r5
 800a822:	6122      	str	r2, [r4, #16]
 800a824:	f8cd a000 	str.w	sl, [sp]
 800a828:	464b      	mov	r3, r9
 800a82a:	aa03      	add	r2, sp, #12
 800a82c:	4621      	mov	r1, r4
 800a82e:	4640      	mov	r0, r8
 800a830:	f7ff fee2 	bl	800a5f8 <_printf_common>
 800a834:	3001      	adds	r0, #1
 800a836:	d14c      	bne.n	800a8d2 <_printf_i+0x1fe>
 800a838:	f04f 30ff 	mov.w	r0, #4294967295
 800a83c:	b004      	add	sp, #16
 800a83e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a842:	4835      	ldr	r0, [pc, #212]	; (800a918 <_printf_i+0x244>)
 800a844:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a848:	6829      	ldr	r1, [r5, #0]
 800a84a:	6823      	ldr	r3, [r4, #0]
 800a84c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a850:	6029      	str	r1, [r5, #0]
 800a852:	061d      	lsls	r5, r3, #24
 800a854:	d514      	bpl.n	800a880 <_printf_i+0x1ac>
 800a856:	07df      	lsls	r7, r3, #31
 800a858:	bf44      	itt	mi
 800a85a:	f043 0320 	orrmi.w	r3, r3, #32
 800a85e:	6023      	strmi	r3, [r4, #0]
 800a860:	b91e      	cbnz	r6, 800a86a <_printf_i+0x196>
 800a862:	6823      	ldr	r3, [r4, #0]
 800a864:	f023 0320 	bic.w	r3, r3, #32
 800a868:	6023      	str	r3, [r4, #0]
 800a86a:	2310      	movs	r3, #16
 800a86c:	e7b0      	b.n	800a7d0 <_printf_i+0xfc>
 800a86e:	6823      	ldr	r3, [r4, #0]
 800a870:	f043 0320 	orr.w	r3, r3, #32
 800a874:	6023      	str	r3, [r4, #0]
 800a876:	2378      	movs	r3, #120	; 0x78
 800a878:	4828      	ldr	r0, [pc, #160]	; (800a91c <_printf_i+0x248>)
 800a87a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a87e:	e7e3      	b.n	800a848 <_printf_i+0x174>
 800a880:	0659      	lsls	r1, r3, #25
 800a882:	bf48      	it	mi
 800a884:	b2b6      	uxthmi	r6, r6
 800a886:	e7e6      	b.n	800a856 <_printf_i+0x182>
 800a888:	4615      	mov	r5, r2
 800a88a:	e7bb      	b.n	800a804 <_printf_i+0x130>
 800a88c:	682b      	ldr	r3, [r5, #0]
 800a88e:	6826      	ldr	r6, [r4, #0]
 800a890:	6961      	ldr	r1, [r4, #20]
 800a892:	1d18      	adds	r0, r3, #4
 800a894:	6028      	str	r0, [r5, #0]
 800a896:	0635      	lsls	r5, r6, #24
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	d501      	bpl.n	800a8a0 <_printf_i+0x1cc>
 800a89c:	6019      	str	r1, [r3, #0]
 800a89e:	e002      	b.n	800a8a6 <_printf_i+0x1d2>
 800a8a0:	0670      	lsls	r0, r6, #25
 800a8a2:	d5fb      	bpl.n	800a89c <_printf_i+0x1c8>
 800a8a4:	8019      	strh	r1, [r3, #0]
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	6123      	str	r3, [r4, #16]
 800a8aa:	4615      	mov	r5, r2
 800a8ac:	e7ba      	b.n	800a824 <_printf_i+0x150>
 800a8ae:	682b      	ldr	r3, [r5, #0]
 800a8b0:	1d1a      	adds	r2, r3, #4
 800a8b2:	602a      	str	r2, [r5, #0]
 800a8b4:	681d      	ldr	r5, [r3, #0]
 800a8b6:	6862      	ldr	r2, [r4, #4]
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	f7f5 fcf0 	bl	80002a0 <memchr>
 800a8c0:	b108      	cbz	r0, 800a8c6 <_printf_i+0x1f2>
 800a8c2:	1b40      	subs	r0, r0, r5
 800a8c4:	6060      	str	r0, [r4, #4]
 800a8c6:	6863      	ldr	r3, [r4, #4]
 800a8c8:	6123      	str	r3, [r4, #16]
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8d0:	e7a8      	b.n	800a824 <_printf_i+0x150>
 800a8d2:	6923      	ldr	r3, [r4, #16]
 800a8d4:	462a      	mov	r2, r5
 800a8d6:	4649      	mov	r1, r9
 800a8d8:	4640      	mov	r0, r8
 800a8da:	47d0      	blx	sl
 800a8dc:	3001      	adds	r0, #1
 800a8de:	d0ab      	beq.n	800a838 <_printf_i+0x164>
 800a8e0:	6823      	ldr	r3, [r4, #0]
 800a8e2:	079b      	lsls	r3, r3, #30
 800a8e4:	d413      	bmi.n	800a90e <_printf_i+0x23a>
 800a8e6:	68e0      	ldr	r0, [r4, #12]
 800a8e8:	9b03      	ldr	r3, [sp, #12]
 800a8ea:	4298      	cmp	r0, r3
 800a8ec:	bfb8      	it	lt
 800a8ee:	4618      	movlt	r0, r3
 800a8f0:	e7a4      	b.n	800a83c <_printf_i+0x168>
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	4632      	mov	r2, r6
 800a8f6:	4649      	mov	r1, r9
 800a8f8:	4640      	mov	r0, r8
 800a8fa:	47d0      	blx	sl
 800a8fc:	3001      	adds	r0, #1
 800a8fe:	d09b      	beq.n	800a838 <_printf_i+0x164>
 800a900:	3501      	adds	r5, #1
 800a902:	68e3      	ldr	r3, [r4, #12]
 800a904:	9903      	ldr	r1, [sp, #12]
 800a906:	1a5b      	subs	r3, r3, r1
 800a908:	42ab      	cmp	r3, r5
 800a90a:	dcf2      	bgt.n	800a8f2 <_printf_i+0x21e>
 800a90c:	e7eb      	b.n	800a8e6 <_printf_i+0x212>
 800a90e:	2500      	movs	r5, #0
 800a910:	f104 0619 	add.w	r6, r4, #25
 800a914:	e7f5      	b.n	800a902 <_printf_i+0x22e>
 800a916:	bf00      	nop
 800a918:	0800b4f9 	.word	0x0800b4f9
 800a91c:	0800b50a 	.word	0x0800b50a

0800a920 <_sbrk_r>:
 800a920:	b538      	push	{r3, r4, r5, lr}
 800a922:	4d06      	ldr	r5, [pc, #24]	; (800a93c <_sbrk_r+0x1c>)
 800a924:	2300      	movs	r3, #0
 800a926:	4604      	mov	r4, r0
 800a928:	4608      	mov	r0, r1
 800a92a:	602b      	str	r3, [r5, #0]
 800a92c:	f000 fb34 	bl	800af98 <_sbrk>
 800a930:	1c43      	adds	r3, r0, #1
 800a932:	d102      	bne.n	800a93a <_sbrk_r+0x1a>
 800a934:	682b      	ldr	r3, [r5, #0]
 800a936:	b103      	cbz	r3, 800a93a <_sbrk_r+0x1a>
 800a938:	6023      	str	r3, [r4, #0]
 800a93a:	bd38      	pop	{r3, r4, r5, pc}
 800a93c:	2000d618 	.word	0x2000d618

0800a940 <__sread>:
 800a940:	b510      	push	{r4, lr}
 800a942:	460c      	mov	r4, r1
 800a944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a948:	f000 faea 	bl	800af20 <_read_r>
 800a94c:	2800      	cmp	r0, #0
 800a94e:	bfab      	itete	ge
 800a950:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a952:	89a3      	ldrhlt	r3, [r4, #12]
 800a954:	181b      	addge	r3, r3, r0
 800a956:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a95a:	bfac      	ite	ge
 800a95c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a95e:	81a3      	strhlt	r3, [r4, #12]
 800a960:	bd10      	pop	{r4, pc}

0800a962 <__swrite>:
 800a962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a966:	461f      	mov	r7, r3
 800a968:	898b      	ldrh	r3, [r1, #12]
 800a96a:	05db      	lsls	r3, r3, #23
 800a96c:	4605      	mov	r5, r0
 800a96e:	460c      	mov	r4, r1
 800a970:	4616      	mov	r6, r2
 800a972:	d505      	bpl.n	800a980 <__swrite+0x1e>
 800a974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a978:	2302      	movs	r3, #2
 800a97a:	2200      	movs	r2, #0
 800a97c:	f000 f9b6 	bl	800acec <_lseek_r>
 800a980:	89a3      	ldrh	r3, [r4, #12]
 800a982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a98a:	81a3      	strh	r3, [r4, #12]
 800a98c:	4632      	mov	r2, r6
 800a98e:	463b      	mov	r3, r7
 800a990:	4628      	mov	r0, r5
 800a992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a996:	f7ff b959 	b.w	8009c4c <_write_r>

0800a99a <__sseek>:
 800a99a:	b510      	push	{r4, lr}
 800a99c:	460c      	mov	r4, r1
 800a99e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9a2:	f000 f9a3 	bl	800acec <_lseek_r>
 800a9a6:	1c43      	adds	r3, r0, #1
 800a9a8:	89a3      	ldrh	r3, [r4, #12]
 800a9aa:	bf15      	itete	ne
 800a9ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a9b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9b6:	81a3      	strheq	r3, [r4, #12]
 800a9b8:	bf18      	it	ne
 800a9ba:	81a3      	strhne	r3, [r4, #12]
 800a9bc:	bd10      	pop	{r4, pc}

0800a9be <__sclose>:
 800a9be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9c2:	f000 b8c1 	b.w	800ab48 <_close_r>
	...

0800a9c8 <__swbuf_r>:
 800a9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ca:	460e      	mov	r6, r1
 800a9cc:	4614      	mov	r4, r2
 800a9ce:	4605      	mov	r5, r0
 800a9d0:	b118      	cbz	r0, 800a9da <__swbuf_r+0x12>
 800a9d2:	6983      	ldr	r3, [r0, #24]
 800a9d4:	b90b      	cbnz	r3, 800a9da <__swbuf_r+0x12>
 800a9d6:	f7ff fa25 	bl	8009e24 <__sinit>
 800a9da:	4b21      	ldr	r3, [pc, #132]	; (800aa60 <__swbuf_r+0x98>)
 800a9dc:	429c      	cmp	r4, r3
 800a9de:	d12b      	bne.n	800aa38 <__swbuf_r+0x70>
 800a9e0:	686c      	ldr	r4, [r5, #4]
 800a9e2:	69a3      	ldr	r3, [r4, #24]
 800a9e4:	60a3      	str	r3, [r4, #8]
 800a9e6:	89a3      	ldrh	r3, [r4, #12]
 800a9e8:	071a      	lsls	r2, r3, #28
 800a9ea:	d52f      	bpl.n	800aa4c <__swbuf_r+0x84>
 800a9ec:	6923      	ldr	r3, [r4, #16]
 800a9ee:	b36b      	cbz	r3, 800aa4c <__swbuf_r+0x84>
 800a9f0:	6923      	ldr	r3, [r4, #16]
 800a9f2:	6820      	ldr	r0, [r4, #0]
 800a9f4:	1ac0      	subs	r0, r0, r3
 800a9f6:	6963      	ldr	r3, [r4, #20]
 800a9f8:	b2f6      	uxtb	r6, r6
 800a9fa:	4283      	cmp	r3, r0
 800a9fc:	4637      	mov	r7, r6
 800a9fe:	dc04      	bgt.n	800aa0a <__swbuf_r+0x42>
 800aa00:	4621      	mov	r1, r4
 800aa02:	4628      	mov	r0, r5
 800aa04:	f000 f936 	bl	800ac74 <_fflush_r>
 800aa08:	bb30      	cbnz	r0, 800aa58 <__swbuf_r+0x90>
 800aa0a:	68a3      	ldr	r3, [r4, #8]
 800aa0c:	3b01      	subs	r3, #1
 800aa0e:	60a3      	str	r3, [r4, #8]
 800aa10:	6823      	ldr	r3, [r4, #0]
 800aa12:	1c5a      	adds	r2, r3, #1
 800aa14:	6022      	str	r2, [r4, #0]
 800aa16:	701e      	strb	r6, [r3, #0]
 800aa18:	6963      	ldr	r3, [r4, #20]
 800aa1a:	3001      	adds	r0, #1
 800aa1c:	4283      	cmp	r3, r0
 800aa1e:	d004      	beq.n	800aa2a <__swbuf_r+0x62>
 800aa20:	89a3      	ldrh	r3, [r4, #12]
 800aa22:	07db      	lsls	r3, r3, #31
 800aa24:	d506      	bpl.n	800aa34 <__swbuf_r+0x6c>
 800aa26:	2e0a      	cmp	r6, #10
 800aa28:	d104      	bne.n	800aa34 <__swbuf_r+0x6c>
 800aa2a:	4621      	mov	r1, r4
 800aa2c:	4628      	mov	r0, r5
 800aa2e:	f000 f921 	bl	800ac74 <_fflush_r>
 800aa32:	b988      	cbnz	r0, 800aa58 <__swbuf_r+0x90>
 800aa34:	4638      	mov	r0, r7
 800aa36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa38:	4b0a      	ldr	r3, [pc, #40]	; (800aa64 <__swbuf_r+0x9c>)
 800aa3a:	429c      	cmp	r4, r3
 800aa3c:	d101      	bne.n	800aa42 <__swbuf_r+0x7a>
 800aa3e:	68ac      	ldr	r4, [r5, #8]
 800aa40:	e7cf      	b.n	800a9e2 <__swbuf_r+0x1a>
 800aa42:	4b09      	ldr	r3, [pc, #36]	; (800aa68 <__swbuf_r+0xa0>)
 800aa44:	429c      	cmp	r4, r3
 800aa46:	bf08      	it	eq
 800aa48:	68ec      	ldreq	r4, [r5, #12]
 800aa4a:	e7ca      	b.n	800a9e2 <__swbuf_r+0x1a>
 800aa4c:	4621      	mov	r1, r4
 800aa4e:	4628      	mov	r0, r5
 800aa50:	f000 f80c 	bl	800aa6c <__swsetup_r>
 800aa54:	2800      	cmp	r0, #0
 800aa56:	d0cb      	beq.n	800a9f0 <__swbuf_r+0x28>
 800aa58:	f04f 37ff 	mov.w	r7, #4294967295
 800aa5c:	e7ea      	b.n	800aa34 <__swbuf_r+0x6c>
 800aa5e:	bf00      	nop
 800aa60:	0800b4a8 	.word	0x0800b4a8
 800aa64:	0800b4c8 	.word	0x0800b4c8
 800aa68:	0800b488 	.word	0x0800b488

0800aa6c <__swsetup_r>:
 800aa6c:	4b32      	ldr	r3, [pc, #200]	; (800ab38 <__swsetup_r+0xcc>)
 800aa6e:	b570      	push	{r4, r5, r6, lr}
 800aa70:	681d      	ldr	r5, [r3, #0]
 800aa72:	4606      	mov	r6, r0
 800aa74:	460c      	mov	r4, r1
 800aa76:	b125      	cbz	r5, 800aa82 <__swsetup_r+0x16>
 800aa78:	69ab      	ldr	r3, [r5, #24]
 800aa7a:	b913      	cbnz	r3, 800aa82 <__swsetup_r+0x16>
 800aa7c:	4628      	mov	r0, r5
 800aa7e:	f7ff f9d1 	bl	8009e24 <__sinit>
 800aa82:	4b2e      	ldr	r3, [pc, #184]	; (800ab3c <__swsetup_r+0xd0>)
 800aa84:	429c      	cmp	r4, r3
 800aa86:	d10f      	bne.n	800aaa8 <__swsetup_r+0x3c>
 800aa88:	686c      	ldr	r4, [r5, #4]
 800aa8a:	89a3      	ldrh	r3, [r4, #12]
 800aa8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa90:	0719      	lsls	r1, r3, #28
 800aa92:	d42c      	bmi.n	800aaee <__swsetup_r+0x82>
 800aa94:	06dd      	lsls	r5, r3, #27
 800aa96:	d411      	bmi.n	800aabc <__swsetup_r+0x50>
 800aa98:	2309      	movs	r3, #9
 800aa9a:	6033      	str	r3, [r6, #0]
 800aa9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aaa0:	81a3      	strh	r3, [r4, #12]
 800aaa2:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa6:	e03e      	b.n	800ab26 <__swsetup_r+0xba>
 800aaa8:	4b25      	ldr	r3, [pc, #148]	; (800ab40 <__swsetup_r+0xd4>)
 800aaaa:	429c      	cmp	r4, r3
 800aaac:	d101      	bne.n	800aab2 <__swsetup_r+0x46>
 800aaae:	68ac      	ldr	r4, [r5, #8]
 800aab0:	e7eb      	b.n	800aa8a <__swsetup_r+0x1e>
 800aab2:	4b24      	ldr	r3, [pc, #144]	; (800ab44 <__swsetup_r+0xd8>)
 800aab4:	429c      	cmp	r4, r3
 800aab6:	bf08      	it	eq
 800aab8:	68ec      	ldreq	r4, [r5, #12]
 800aaba:	e7e6      	b.n	800aa8a <__swsetup_r+0x1e>
 800aabc:	0758      	lsls	r0, r3, #29
 800aabe:	d512      	bpl.n	800aae6 <__swsetup_r+0x7a>
 800aac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aac2:	b141      	cbz	r1, 800aad6 <__swsetup_r+0x6a>
 800aac4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aac8:	4299      	cmp	r1, r3
 800aaca:	d002      	beq.n	800aad2 <__swsetup_r+0x66>
 800aacc:	4630      	mov	r0, r6
 800aace:	f000 f9ab 	bl	800ae28 <_free_r>
 800aad2:	2300      	movs	r3, #0
 800aad4:	6363      	str	r3, [r4, #52]	; 0x34
 800aad6:	89a3      	ldrh	r3, [r4, #12]
 800aad8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aadc:	81a3      	strh	r3, [r4, #12]
 800aade:	2300      	movs	r3, #0
 800aae0:	6063      	str	r3, [r4, #4]
 800aae2:	6923      	ldr	r3, [r4, #16]
 800aae4:	6023      	str	r3, [r4, #0]
 800aae6:	89a3      	ldrh	r3, [r4, #12]
 800aae8:	f043 0308 	orr.w	r3, r3, #8
 800aaec:	81a3      	strh	r3, [r4, #12]
 800aaee:	6923      	ldr	r3, [r4, #16]
 800aaf0:	b94b      	cbnz	r3, 800ab06 <__swsetup_r+0x9a>
 800aaf2:	89a3      	ldrh	r3, [r4, #12]
 800aaf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aaf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aafc:	d003      	beq.n	800ab06 <__swsetup_r+0x9a>
 800aafe:	4621      	mov	r1, r4
 800ab00:	4630      	mov	r0, r6
 800ab02:	f000 f92b 	bl	800ad5c <__smakebuf_r>
 800ab06:	89a0      	ldrh	r0, [r4, #12]
 800ab08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab0c:	f010 0301 	ands.w	r3, r0, #1
 800ab10:	d00a      	beq.n	800ab28 <__swsetup_r+0xbc>
 800ab12:	2300      	movs	r3, #0
 800ab14:	60a3      	str	r3, [r4, #8]
 800ab16:	6963      	ldr	r3, [r4, #20]
 800ab18:	425b      	negs	r3, r3
 800ab1a:	61a3      	str	r3, [r4, #24]
 800ab1c:	6923      	ldr	r3, [r4, #16]
 800ab1e:	b943      	cbnz	r3, 800ab32 <__swsetup_r+0xc6>
 800ab20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab24:	d1ba      	bne.n	800aa9c <__swsetup_r+0x30>
 800ab26:	bd70      	pop	{r4, r5, r6, pc}
 800ab28:	0781      	lsls	r1, r0, #30
 800ab2a:	bf58      	it	pl
 800ab2c:	6963      	ldrpl	r3, [r4, #20]
 800ab2e:	60a3      	str	r3, [r4, #8]
 800ab30:	e7f4      	b.n	800ab1c <__swsetup_r+0xb0>
 800ab32:	2000      	movs	r0, #0
 800ab34:	e7f7      	b.n	800ab26 <__swsetup_r+0xba>
 800ab36:	bf00      	nop
 800ab38:	20000028 	.word	0x20000028
 800ab3c:	0800b4a8 	.word	0x0800b4a8
 800ab40:	0800b4c8 	.word	0x0800b4c8
 800ab44:	0800b488 	.word	0x0800b488

0800ab48 <_close_r>:
 800ab48:	b538      	push	{r3, r4, r5, lr}
 800ab4a:	4d06      	ldr	r5, [pc, #24]	; (800ab64 <_close_r+0x1c>)
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	4604      	mov	r4, r0
 800ab50:	4608      	mov	r0, r1
 800ab52:	602b      	str	r3, [r5, #0]
 800ab54:	f7f6 fc03 	bl	800135e <_close>
 800ab58:	1c43      	adds	r3, r0, #1
 800ab5a:	d102      	bne.n	800ab62 <_close_r+0x1a>
 800ab5c:	682b      	ldr	r3, [r5, #0]
 800ab5e:	b103      	cbz	r3, 800ab62 <_close_r+0x1a>
 800ab60:	6023      	str	r3, [r4, #0]
 800ab62:	bd38      	pop	{r3, r4, r5, pc}
 800ab64:	2000d618 	.word	0x2000d618

0800ab68 <__sflush_r>:
 800ab68:	898a      	ldrh	r2, [r1, #12]
 800ab6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab6e:	4605      	mov	r5, r0
 800ab70:	0710      	lsls	r0, r2, #28
 800ab72:	460c      	mov	r4, r1
 800ab74:	d458      	bmi.n	800ac28 <__sflush_r+0xc0>
 800ab76:	684b      	ldr	r3, [r1, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	dc05      	bgt.n	800ab88 <__sflush_r+0x20>
 800ab7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	dc02      	bgt.n	800ab88 <__sflush_r+0x20>
 800ab82:	2000      	movs	r0, #0
 800ab84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab8a:	2e00      	cmp	r6, #0
 800ab8c:	d0f9      	beq.n	800ab82 <__sflush_r+0x1a>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab94:	682f      	ldr	r7, [r5, #0]
 800ab96:	602b      	str	r3, [r5, #0]
 800ab98:	d032      	beq.n	800ac00 <__sflush_r+0x98>
 800ab9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab9c:	89a3      	ldrh	r3, [r4, #12]
 800ab9e:	075a      	lsls	r2, r3, #29
 800aba0:	d505      	bpl.n	800abae <__sflush_r+0x46>
 800aba2:	6863      	ldr	r3, [r4, #4]
 800aba4:	1ac0      	subs	r0, r0, r3
 800aba6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aba8:	b10b      	cbz	r3, 800abae <__sflush_r+0x46>
 800abaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800abac:	1ac0      	subs	r0, r0, r3
 800abae:	2300      	movs	r3, #0
 800abb0:	4602      	mov	r2, r0
 800abb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abb4:	6a21      	ldr	r1, [r4, #32]
 800abb6:	4628      	mov	r0, r5
 800abb8:	47b0      	blx	r6
 800abba:	1c43      	adds	r3, r0, #1
 800abbc:	89a3      	ldrh	r3, [r4, #12]
 800abbe:	d106      	bne.n	800abce <__sflush_r+0x66>
 800abc0:	6829      	ldr	r1, [r5, #0]
 800abc2:	291d      	cmp	r1, #29
 800abc4:	d82c      	bhi.n	800ac20 <__sflush_r+0xb8>
 800abc6:	4a2a      	ldr	r2, [pc, #168]	; (800ac70 <__sflush_r+0x108>)
 800abc8:	40ca      	lsrs	r2, r1
 800abca:	07d6      	lsls	r6, r2, #31
 800abcc:	d528      	bpl.n	800ac20 <__sflush_r+0xb8>
 800abce:	2200      	movs	r2, #0
 800abd0:	6062      	str	r2, [r4, #4]
 800abd2:	04d9      	lsls	r1, r3, #19
 800abd4:	6922      	ldr	r2, [r4, #16]
 800abd6:	6022      	str	r2, [r4, #0]
 800abd8:	d504      	bpl.n	800abe4 <__sflush_r+0x7c>
 800abda:	1c42      	adds	r2, r0, #1
 800abdc:	d101      	bne.n	800abe2 <__sflush_r+0x7a>
 800abde:	682b      	ldr	r3, [r5, #0]
 800abe0:	b903      	cbnz	r3, 800abe4 <__sflush_r+0x7c>
 800abe2:	6560      	str	r0, [r4, #84]	; 0x54
 800abe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abe6:	602f      	str	r7, [r5, #0]
 800abe8:	2900      	cmp	r1, #0
 800abea:	d0ca      	beq.n	800ab82 <__sflush_r+0x1a>
 800abec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abf0:	4299      	cmp	r1, r3
 800abf2:	d002      	beq.n	800abfa <__sflush_r+0x92>
 800abf4:	4628      	mov	r0, r5
 800abf6:	f000 f917 	bl	800ae28 <_free_r>
 800abfa:	2000      	movs	r0, #0
 800abfc:	6360      	str	r0, [r4, #52]	; 0x34
 800abfe:	e7c1      	b.n	800ab84 <__sflush_r+0x1c>
 800ac00:	6a21      	ldr	r1, [r4, #32]
 800ac02:	2301      	movs	r3, #1
 800ac04:	4628      	mov	r0, r5
 800ac06:	47b0      	blx	r6
 800ac08:	1c41      	adds	r1, r0, #1
 800ac0a:	d1c7      	bne.n	800ab9c <__sflush_r+0x34>
 800ac0c:	682b      	ldr	r3, [r5, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d0c4      	beq.n	800ab9c <__sflush_r+0x34>
 800ac12:	2b1d      	cmp	r3, #29
 800ac14:	d001      	beq.n	800ac1a <__sflush_r+0xb2>
 800ac16:	2b16      	cmp	r3, #22
 800ac18:	d101      	bne.n	800ac1e <__sflush_r+0xb6>
 800ac1a:	602f      	str	r7, [r5, #0]
 800ac1c:	e7b1      	b.n	800ab82 <__sflush_r+0x1a>
 800ac1e:	89a3      	ldrh	r3, [r4, #12]
 800ac20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac24:	81a3      	strh	r3, [r4, #12]
 800ac26:	e7ad      	b.n	800ab84 <__sflush_r+0x1c>
 800ac28:	690f      	ldr	r7, [r1, #16]
 800ac2a:	2f00      	cmp	r7, #0
 800ac2c:	d0a9      	beq.n	800ab82 <__sflush_r+0x1a>
 800ac2e:	0793      	lsls	r3, r2, #30
 800ac30:	680e      	ldr	r6, [r1, #0]
 800ac32:	bf08      	it	eq
 800ac34:	694b      	ldreq	r3, [r1, #20]
 800ac36:	600f      	str	r7, [r1, #0]
 800ac38:	bf18      	it	ne
 800ac3a:	2300      	movne	r3, #0
 800ac3c:	eba6 0807 	sub.w	r8, r6, r7
 800ac40:	608b      	str	r3, [r1, #8]
 800ac42:	f1b8 0f00 	cmp.w	r8, #0
 800ac46:	dd9c      	ble.n	800ab82 <__sflush_r+0x1a>
 800ac48:	6a21      	ldr	r1, [r4, #32]
 800ac4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac4c:	4643      	mov	r3, r8
 800ac4e:	463a      	mov	r2, r7
 800ac50:	4628      	mov	r0, r5
 800ac52:	47b0      	blx	r6
 800ac54:	2800      	cmp	r0, #0
 800ac56:	dc06      	bgt.n	800ac66 <__sflush_r+0xfe>
 800ac58:	89a3      	ldrh	r3, [r4, #12]
 800ac5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac5e:	81a3      	strh	r3, [r4, #12]
 800ac60:	f04f 30ff 	mov.w	r0, #4294967295
 800ac64:	e78e      	b.n	800ab84 <__sflush_r+0x1c>
 800ac66:	4407      	add	r7, r0
 800ac68:	eba8 0800 	sub.w	r8, r8, r0
 800ac6c:	e7e9      	b.n	800ac42 <__sflush_r+0xda>
 800ac6e:	bf00      	nop
 800ac70:	20400001 	.word	0x20400001

0800ac74 <_fflush_r>:
 800ac74:	b538      	push	{r3, r4, r5, lr}
 800ac76:	690b      	ldr	r3, [r1, #16]
 800ac78:	4605      	mov	r5, r0
 800ac7a:	460c      	mov	r4, r1
 800ac7c:	b913      	cbnz	r3, 800ac84 <_fflush_r+0x10>
 800ac7e:	2500      	movs	r5, #0
 800ac80:	4628      	mov	r0, r5
 800ac82:	bd38      	pop	{r3, r4, r5, pc}
 800ac84:	b118      	cbz	r0, 800ac8e <_fflush_r+0x1a>
 800ac86:	6983      	ldr	r3, [r0, #24]
 800ac88:	b90b      	cbnz	r3, 800ac8e <_fflush_r+0x1a>
 800ac8a:	f7ff f8cb 	bl	8009e24 <__sinit>
 800ac8e:	4b14      	ldr	r3, [pc, #80]	; (800ace0 <_fflush_r+0x6c>)
 800ac90:	429c      	cmp	r4, r3
 800ac92:	d11b      	bne.n	800accc <_fflush_r+0x58>
 800ac94:	686c      	ldr	r4, [r5, #4]
 800ac96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d0ef      	beq.n	800ac7e <_fflush_r+0xa>
 800ac9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aca0:	07d0      	lsls	r0, r2, #31
 800aca2:	d404      	bmi.n	800acae <_fflush_r+0x3a>
 800aca4:	0599      	lsls	r1, r3, #22
 800aca6:	d402      	bmi.n	800acae <_fflush_r+0x3a>
 800aca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acaa:	f7ff f959 	bl	8009f60 <__retarget_lock_acquire_recursive>
 800acae:	4628      	mov	r0, r5
 800acb0:	4621      	mov	r1, r4
 800acb2:	f7ff ff59 	bl	800ab68 <__sflush_r>
 800acb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acb8:	07da      	lsls	r2, r3, #31
 800acba:	4605      	mov	r5, r0
 800acbc:	d4e0      	bmi.n	800ac80 <_fflush_r+0xc>
 800acbe:	89a3      	ldrh	r3, [r4, #12]
 800acc0:	059b      	lsls	r3, r3, #22
 800acc2:	d4dd      	bmi.n	800ac80 <_fflush_r+0xc>
 800acc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acc6:	f7ff f94c 	bl	8009f62 <__retarget_lock_release_recursive>
 800acca:	e7d9      	b.n	800ac80 <_fflush_r+0xc>
 800accc:	4b05      	ldr	r3, [pc, #20]	; (800ace4 <_fflush_r+0x70>)
 800acce:	429c      	cmp	r4, r3
 800acd0:	d101      	bne.n	800acd6 <_fflush_r+0x62>
 800acd2:	68ac      	ldr	r4, [r5, #8]
 800acd4:	e7df      	b.n	800ac96 <_fflush_r+0x22>
 800acd6:	4b04      	ldr	r3, [pc, #16]	; (800ace8 <_fflush_r+0x74>)
 800acd8:	429c      	cmp	r4, r3
 800acda:	bf08      	it	eq
 800acdc:	68ec      	ldreq	r4, [r5, #12]
 800acde:	e7da      	b.n	800ac96 <_fflush_r+0x22>
 800ace0:	0800b4a8 	.word	0x0800b4a8
 800ace4:	0800b4c8 	.word	0x0800b4c8
 800ace8:	0800b488 	.word	0x0800b488

0800acec <_lseek_r>:
 800acec:	b538      	push	{r3, r4, r5, lr}
 800acee:	4d07      	ldr	r5, [pc, #28]	; (800ad0c <_lseek_r+0x20>)
 800acf0:	4604      	mov	r4, r0
 800acf2:	4608      	mov	r0, r1
 800acf4:	4611      	mov	r1, r2
 800acf6:	2200      	movs	r2, #0
 800acf8:	602a      	str	r2, [r5, #0]
 800acfa:	461a      	mov	r2, r3
 800acfc:	f7f6 fb56 	bl	80013ac <_lseek>
 800ad00:	1c43      	adds	r3, r0, #1
 800ad02:	d102      	bne.n	800ad0a <_lseek_r+0x1e>
 800ad04:	682b      	ldr	r3, [r5, #0]
 800ad06:	b103      	cbz	r3, 800ad0a <_lseek_r+0x1e>
 800ad08:	6023      	str	r3, [r4, #0]
 800ad0a:	bd38      	pop	{r3, r4, r5, pc}
 800ad0c:	2000d618 	.word	0x2000d618

0800ad10 <__swhatbuf_r>:
 800ad10:	b570      	push	{r4, r5, r6, lr}
 800ad12:	460e      	mov	r6, r1
 800ad14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad18:	2900      	cmp	r1, #0
 800ad1a:	b096      	sub	sp, #88	; 0x58
 800ad1c:	4614      	mov	r4, r2
 800ad1e:	461d      	mov	r5, r3
 800ad20:	da08      	bge.n	800ad34 <__swhatbuf_r+0x24>
 800ad22:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ad26:	2200      	movs	r2, #0
 800ad28:	602a      	str	r2, [r5, #0]
 800ad2a:	061a      	lsls	r2, r3, #24
 800ad2c:	d410      	bmi.n	800ad50 <__swhatbuf_r+0x40>
 800ad2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad32:	e00e      	b.n	800ad52 <__swhatbuf_r+0x42>
 800ad34:	466a      	mov	r2, sp
 800ad36:	f000 f905 	bl	800af44 <_fstat_r>
 800ad3a:	2800      	cmp	r0, #0
 800ad3c:	dbf1      	blt.n	800ad22 <__swhatbuf_r+0x12>
 800ad3e:	9a01      	ldr	r2, [sp, #4]
 800ad40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad48:	425a      	negs	r2, r3
 800ad4a:	415a      	adcs	r2, r3
 800ad4c:	602a      	str	r2, [r5, #0]
 800ad4e:	e7ee      	b.n	800ad2e <__swhatbuf_r+0x1e>
 800ad50:	2340      	movs	r3, #64	; 0x40
 800ad52:	2000      	movs	r0, #0
 800ad54:	6023      	str	r3, [r4, #0]
 800ad56:	b016      	add	sp, #88	; 0x58
 800ad58:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ad5c <__smakebuf_r>:
 800ad5c:	898b      	ldrh	r3, [r1, #12]
 800ad5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad60:	079d      	lsls	r5, r3, #30
 800ad62:	4606      	mov	r6, r0
 800ad64:	460c      	mov	r4, r1
 800ad66:	d507      	bpl.n	800ad78 <__smakebuf_r+0x1c>
 800ad68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad6c:	6023      	str	r3, [r4, #0]
 800ad6e:	6123      	str	r3, [r4, #16]
 800ad70:	2301      	movs	r3, #1
 800ad72:	6163      	str	r3, [r4, #20]
 800ad74:	b002      	add	sp, #8
 800ad76:	bd70      	pop	{r4, r5, r6, pc}
 800ad78:	ab01      	add	r3, sp, #4
 800ad7a:	466a      	mov	r2, sp
 800ad7c:	f7ff ffc8 	bl	800ad10 <__swhatbuf_r>
 800ad80:	9900      	ldr	r1, [sp, #0]
 800ad82:	4605      	mov	r5, r0
 800ad84:	4630      	mov	r0, r6
 800ad86:	f7ff f90d 	bl	8009fa4 <_malloc_r>
 800ad8a:	b948      	cbnz	r0, 800ada0 <__smakebuf_r+0x44>
 800ad8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad90:	059a      	lsls	r2, r3, #22
 800ad92:	d4ef      	bmi.n	800ad74 <__smakebuf_r+0x18>
 800ad94:	f023 0303 	bic.w	r3, r3, #3
 800ad98:	f043 0302 	orr.w	r3, r3, #2
 800ad9c:	81a3      	strh	r3, [r4, #12]
 800ad9e:	e7e3      	b.n	800ad68 <__smakebuf_r+0xc>
 800ada0:	4b0d      	ldr	r3, [pc, #52]	; (800add8 <__smakebuf_r+0x7c>)
 800ada2:	62b3      	str	r3, [r6, #40]	; 0x28
 800ada4:	89a3      	ldrh	r3, [r4, #12]
 800ada6:	6020      	str	r0, [r4, #0]
 800ada8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adac:	81a3      	strh	r3, [r4, #12]
 800adae:	9b00      	ldr	r3, [sp, #0]
 800adb0:	6163      	str	r3, [r4, #20]
 800adb2:	9b01      	ldr	r3, [sp, #4]
 800adb4:	6120      	str	r0, [r4, #16]
 800adb6:	b15b      	cbz	r3, 800add0 <__smakebuf_r+0x74>
 800adb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adbc:	4630      	mov	r0, r6
 800adbe:	f000 f8d3 	bl	800af68 <_isatty_r>
 800adc2:	b128      	cbz	r0, 800add0 <__smakebuf_r+0x74>
 800adc4:	89a3      	ldrh	r3, [r4, #12]
 800adc6:	f023 0303 	bic.w	r3, r3, #3
 800adca:	f043 0301 	orr.w	r3, r3, #1
 800adce:	81a3      	strh	r3, [r4, #12]
 800add0:	89a0      	ldrh	r0, [r4, #12]
 800add2:	4305      	orrs	r5, r0
 800add4:	81a5      	strh	r5, [r4, #12]
 800add6:	e7cd      	b.n	800ad74 <__smakebuf_r+0x18>
 800add8:	08009dbd 	.word	0x08009dbd

0800addc <memmove>:
 800addc:	4288      	cmp	r0, r1
 800adde:	b510      	push	{r4, lr}
 800ade0:	eb01 0402 	add.w	r4, r1, r2
 800ade4:	d902      	bls.n	800adec <memmove+0x10>
 800ade6:	4284      	cmp	r4, r0
 800ade8:	4623      	mov	r3, r4
 800adea:	d807      	bhi.n	800adfc <memmove+0x20>
 800adec:	1e43      	subs	r3, r0, #1
 800adee:	42a1      	cmp	r1, r4
 800adf0:	d008      	beq.n	800ae04 <memmove+0x28>
 800adf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800adfa:	e7f8      	b.n	800adee <memmove+0x12>
 800adfc:	4402      	add	r2, r0
 800adfe:	4601      	mov	r1, r0
 800ae00:	428a      	cmp	r2, r1
 800ae02:	d100      	bne.n	800ae06 <memmove+0x2a>
 800ae04:	bd10      	pop	{r4, pc}
 800ae06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae0e:	e7f7      	b.n	800ae00 <memmove+0x24>

0800ae10 <__malloc_lock>:
 800ae10:	4801      	ldr	r0, [pc, #4]	; (800ae18 <__malloc_lock+0x8>)
 800ae12:	f7ff b8a5 	b.w	8009f60 <__retarget_lock_acquire_recursive>
 800ae16:	bf00      	nop
 800ae18:	2000d60b 	.word	0x2000d60b

0800ae1c <__malloc_unlock>:
 800ae1c:	4801      	ldr	r0, [pc, #4]	; (800ae24 <__malloc_unlock+0x8>)
 800ae1e:	f7ff b8a0 	b.w	8009f62 <__retarget_lock_release_recursive>
 800ae22:	bf00      	nop
 800ae24:	2000d60b 	.word	0x2000d60b

0800ae28 <_free_r>:
 800ae28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae2a:	2900      	cmp	r1, #0
 800ae2c:	d044      	beq.n	800aeb8 <_free_r+0x90>
 800ae2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae32:	9001      	str	r0, [sp, #4]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	f1a1 0404 	sub.w	r4, r1, #4
 800ae3a:	bfb8      	it	lt
 800ae3c:	18e4      	addlt	r4, r4, r3
 800ae3e:	f7ff ffe7 	bl	800ae10 <__malloc_lock>
 800ae42:	4a1e      	ldr	r2, [pc, #120]	; (800aebc <_free_r+0x94>)
 800ae44:	9801      	ldr	r0, [sp, #4]
 800ae46:	6813      	ldr	r3, [r2, #0]
 800ae48:	b933      	cbnz	r3, 800ae58 <_free_r+0x30>
 800ae4a:	6063      	str	r3, [r4, #4]
 800ae4c:	6014      	str	r4, [r2, #0]
 800ae4e:	b003      	add	sp, #12
 800ae50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae54:	f7ff bfe2 	b.w	800ae1c <__malloc_unlock>
 800ae58:	42a3      	cmp	r3, r4
 800ae5a:	d908      	bls.n	800ae6e <_free_r+0x46>
 800ae5c:	6825      	ldr	r5, [r4, #0]
 800ae5e:	1961      	adds	r1, r4, r5
 800ae60:	428b      	cmp	r3, r1
 800ae62:	bf01      	itttt	eq
 800ae64:	6819      	ldreq	r1, [r3, #0]
 800ae66:	685b      	ldreq	r3, [r3, #4]
 800ae68:	1949      	addeq	r1, r1, r5
 800ae6a:	6021      	streq	r1, [r4, #0]
 800ae6c:	e7ed      	b.n	800ae4a <_free_r+0x22>
 800ae6e:	461a      	mov	r2, r3
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	b10b      	cbz	r3, 800ae78 <_free_r+0x50>
 800ae74:	42a3      	cmp	r3, r4
 800ae76:	d9fa      	bls.n	800ae6e <_free_r+0x46>
 800ae78:	6811      	ldr	r1, [r2, #0]
 800ae7a:	1855      	adds	r5, r2, r1
 800ae7c:	42a5      	cmp	r5, r4
 800ae7e:	d10b      	bne.n	800ae98 <_free_r+0x70>
 800ae80:	6824      	ldr	r4, [r4, #0]
 800ae82:	4421      	add	r1, r4
 800ae84:	1854      	adds	r4, r2, r1
 800ae86:	42a3      	cmp	r3, r4
 800ae88:	6011      	str	r1, [r2, #0]
 800ae8a:	d1e0      	bne.n	800ae4e <_free_r+0x26>
 800ae8c:	681c      	ldr	r4, [r3, #0]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	6053      	str	r3, [r2, #4]
 800ae92:	4421      	add	r1, r4
 800ae94:	6011      	str	r1, [r2, #0]
 800ae96:	e7da      	b.n	800ae4e <_free_r+0x26>
 800ae98:	d902      	bls.n	800aea0 <_free_r+0x78>
 800ae9a:	230c      	movs	r3, #12
 800ae9c:	6003      	str	r3, [r0, #0]
 800ae9e:	e7d6      	b.n	800ae4e <_free_r+0x26>
 800aea0:	6825      	ldr	r5, [r4, #0]
 800aea2:	1961      	adds	r1, r4, r5
 800aea4:	428b      	cmp	r3, r1
 800aea6:	bf04      	itt	eq
 800aea8:	6819      	ldreq	r1, [r3, #0]
 800aeaa:	685b      	ldreq	r3, [r3, #4]
 800aeac:	6063      	str	r3, [r4, #4]
 800aeae:	bf04      	itt	eq
 800aeb0:	1949      	addeq	r1, r1, r5
 800aeb2:	6021      	streq	r1, [r4, #0]
 800aeb4:	6054      	str	r4, [r2, #4]
 800aeb6:	e7ca      	b.n	800ae4e <_free_r+0x26>
 800aeb8:	b003      	add	sp, #12
 800aeba:	bd30      	pop	{r4, r5, pc}
 800aebc:	2000d610 	.word	0x2000d610

0800aec0 <_realloc_r>:
 800aec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aec4:	4680      	mov	r8, r0
 800aec6:	4614      	mov	r4, r2
 800aec8:	460e      	mov	r6, r1
 800aeca:	b921      	cbnz	r1, 800aed6 <_realloc_r+0x16>
 800aecc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aed0:	4611      	mov	r1, r2
 800aed2:	f7ff b867 	b.w	8009fa4 <_malloc_r>
 800aed6:	b92a      	cbnz	r2, 800aee4 <_realloc_r+0x24>
 800aed8:	f7ff ffa6 	bl	800ae28 <_free_r>
 800aedc:	4625      	mov	r5, r4
 800aede:	4628      	mov	r0, r5
 800aee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aee4:	f000 f850 	bl	800af88 <_malloc_usable_size_r>
 800aee8:	4284      	cmp	r4, r0
 800aeea:	4607      	mov	r7, r0
 800aeec:	d802      	bhi.n	800aef4 <_realloc_r+0x34>
 800aeee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aef2:	d812      	bhi.n	800af1a <_realloc_r+0x5a>
 800aef4:	4621      	mov	r1, r4
 800aef6:	4640      	mov	r0, r8
 800aef8:	f7ff f854 	bl	8009fa4 <_malloc_r>
 800aefc:	4605      	mov	r5, r0
 800aefe:	2800      	cmp	r0, #0
 800af00:	d0ed      	beq.n	800aede <_realloc_r+0x1e>
 800af02:	42bc      	cmp	r4, r7
 800af04:	4622      	mov	r2, r4
 800af06:	4631      	mov	r1, r6
 800af08:	bf28      	it	cs
 800af0a:	463a      	movcs	r2, r7
 800af0c:	f7fe fee4 	bl	8009cd8 <memcpy>
 800af10:	4631      	mov	r1, r6
 800af12:	4640      	mov	r0, r8
 800af14:	f7ff ff88 	bl	800ae28 <_free_r>
 800af18:	e7e1      	b.n	800aede <_realloc_r+0x1e>
 800af1a:	4635      	mov	r5, r6
 800af1c:	e7df      	b.n	800aede <_realloc_r+0x1e>
	...

0800af20 <_read_r>:
 800af20:	b538      	push	{r3, r4, r5, lr}
 800af22:	4d07      	ldr	r5, [pc, #28]	; (800af40 <_read_r+0x20>)
 800af24:	4604      	mov	r4, r0
 800af26:	4608      	mov	r0, r1
 800af28:	4611      	mov	r1, r2
 800af2a:	2200      	movs	r2, #0
 800af2c:	602a      	str	r2, [r5, #0]
 800af2e:	461a      	mov	r2, r3
 800af30:	f7f6 f9f8 	bl	8001324 <_read>
 800af34:	1c43      	adds	r3, r0, #1
 800af36:	d102      	bne.n	800af3e <_read_r+0x1e>
 800af38:	682b      	ldr	r3, [r5, #0]
 800af3a:	b103      	cbz	r3, 800af3e <_read_r+0x1e>
 800af3c:	6023      	str	r3, [r4, #0]
 800af3e:	bd38      	pop	{r3, r4, r5, pc}
 800af40:	2000d618 	.word	0x2000d618

0800af44 <_fstat_r>:
 800af44:	b538      	push	{r3, r4, r5, lr}
 800af46:	4d07      	ldr	r5, [pc, #28]	; (800af64 <_fstat_r+0x20>)
 800af48:	2300      	movs	r3, #0
 800af4a:	4604      	mov	r4, r0
 800af4c:	4608      	mov	r0, r1
 800af4e:	4611      	mov	r1, r2
 800af50:	602b      	str	r3, [r5, #0]
 800af52:	f7f6 fa10 	bl	8001376 <_fstat>
 800af56:	1c43      	adds	r3, r0, #1
 800af58:	d102      	bne.n	800af60 <_fstat_r+0x1c>
 800af5a:	682b      	ldr	r3, [r5, #0]
 800af5c:	b103      	cbz	r3, 800af60 <_fstat_r+0x1c>
 800af5e:	6023      	str	r3, [r4, #0]
 800af60:	bd38      	pop	{r3, r4, r5, pc}
 800af62:	bf00      	nop
 800af64:	2000d618 	.word	0x2000d618

0800af68 <_isatty_r>:
 800af68:	b538      	push	{r3, r4, r5, lr}
 800af6a:	4d06      	ldr	r5, [pc, #24]	; (800af84 <_isatty_r+0x1c>)
 800af6c:	2300      	movs	r3, #0
 800af6e:	4604      	mov	r4, r0
 800af70:	4608      	mov	r0, r1
 800af72:	602b      	str	r3, [r5, #0]
 800af74:	f7f6 fa0f 	bl	8001396 <_isatty>
 800af78:	1c43      	adds	r3, r0, #1
 800af7a:	d102      	bne.n	800af82 <_isatty_r+0x1a>
 800af7c:	682b      	ldr	r3, [r5, #0]
 800af7e:	b103      	cbz	r3, 800af82 <_isatty_r+0x1a>
 800af80:	6023      	str	r3, [r4, #0]
 800af82:	bd38      	pop	{r3, r4, r5, pc}
 800af84:	2000d618 	.word	0x2000d618

0800af88 <_malloc_usable_size_r>:
 800af88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af8c:	1f18      	subs	r0, r3, #4
 800af8e:	2b00      	cmp	r3, #0
 800af90:	bfbc      	itt	lt
 800af92:	580b      	ldrlt	r3, [r1, r0]
 800af94:	18c0      	addlt	r0, r0, r3
 800af96:	4770      	bx	lr

0800af98 <_sbrk>:
 800af98:	4a04      	ldr	r2, [pc, #16]	; (800afac <_sbrk+0x14>)
 800af9a:	6811      	ldr	r1, [r2, #0]
 800af9c:	4603      	mov	r3, r0
 800af9e:	b909      	cbnz	r1, 800afa4 <_sbrk+0xc>
 800afa0:	4903      	ldr	r1, [pc, #12]	; (800afb0 <_sbrk+0x18>)
 800afa2:	6011      	str	r1, [r2, #0]
 800afa4:	6810      	ldr	r0, [r2, #0]
 800afa6:	4403      	add	r3, r0
 800afa8:	6013      	str	r3, [r2, #0]
 800afaa:	4770      	bx	lr
 800afac:	2000d61c 	.word	0x2000d61c
 800afb0:	2000d620 	.word	0x2000d620

0800afb4 <_init>:
 800afb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afb6:	bf00      	nop
 800afb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afba:	bc08      	pop	{r3}
 800afbc:	469e      	mov	lr, r3
 800afbe:	4770      	bx	lr

0800afc0 <_fini>:
 800afc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afc2:	bf00      	nop
 800afc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afc6:	bc08      	pop	{r3}
 800afc8:	469e      	mov	lr, r3
 800afca:	4770      	bx	lr
