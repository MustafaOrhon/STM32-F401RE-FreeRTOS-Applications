
1_FreeRTOS_Projects.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006304  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  080064a4  080064a4  000164a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006658  08006658  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006658  08006658  00016658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006660  08006660  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006660  08006660  00016660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006664  08006664  00016664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d4a4  20000078  080066e0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000d51c  080066e0  0002d51c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001516f  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f0c  00000000  00000000  00035217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  00038128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001238  00000000  00000000  000394e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019686  00000000  00000000  0003a720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d18  00000000  00000000  00053da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b978  00000000  00000000  00068abe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00104436  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058f0  00000000  00000000  00104488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800648c 	.word	0x0800648c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800648c 	.word	0x0800648c

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	2000cb34 	.word	0x2000cb34

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b974 	b.w	8000574 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468e      	mov	lr, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d14d      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d969      	bls.n	800038c <__udivmoddi4+0xe8>
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	b152      	cbz	r2, 80002d4 <__udivmoddi4+0x30>
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	f1c2 0120 	rsb	r1, r2, #32
 80002c6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ce:	ea41 0e03 	orr.w	lr, r1, r3
 80002d2:	4094      	lsls	r4, r2
 80002d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d8:	0c21      	lsrs	r1, r4, #16
 80002da:	fbbe f6f8 	udiv	r6, lr, r8
 80002de:	fa1f f78c 	uxth.w	r7, ip
 80002e2:	fb08 e316 	mls	r3, r8, r6, lr
 80002e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ea:	fb06 f107 	mul.w	r1, r6, r7
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002fa:	f080 811f 	bcs.w	800053c <__udivmoddi4+0x298>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 811c 	bls.w	800053c <__udivmoddi4+0x298>
 8000304:	3e02      	subs	r6, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a5b      	subs	r3, r3, r1
 800030a:	b2a4      	uxth	r4, r4
 800030c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000310:	fb08 3310 	mls	r3, r8, r0, r3
 8000314:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000318:	fb00 f707 	mul.w	r7, r0, r7
 800031c:	42a7      	cmp	r7, r4
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x92>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f100 33ff 	add.w	r3, r0, #4294967295
 8000328:	f080 810a 	bcs.w	8000540 <__udivmoddi4+0x29c>
 800032c:	42a7      	cmp	r7, r4
 800032e:	f240 8107 	bls.w	8000540 <__udivmoddi4+0x29c>
 8000332:	4464      	add	r4, ip
 8000334:	3802      	subs	r0, #2
 8000336:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033a:	1be4      	subs	r4, r4, r7
 800033c:	2600      	movs	r6, #0
 800033e:	b11d      	cbz	r5, 8000348 <__udivmoddi4+0xa4>
 8000340:	40d4      	lsrs	r4, r2
 8000342:	2300      	movs	r3, #0
 8000344:	e9c5 4300 	strd	r4, r3, [r5]
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0xc2>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80ef 	beq.w	8000536 <__udivmoddi4+0x292>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x160>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xd4>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80f9 	bhi.w	800056a <__udivmoddi4+0x2c6>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0303 	sbc.w	r3, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	469e      	mov	lr, r3
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e0      	beq.n	8000348 <__udivmoddi4+0xa4>
 8000386:	e9c5 4e00 	strd	r4, lr, [r5]
 800038a:	e7dd      	b.n	8000348 <__udivmoddi4+0xa4>
 800038c:	b902      	cbnz	r2, 8000390 <__udivmoddi4+0xec>
 800038e:	deff      	udf	#255	; 0xff
 8000390:	fab2 f282 	clz	r2, r2
 8000394:	2a00      	cmp	r2, #0
 8000396:	f040 8092 	bne.w	80004be <__udivmoddi4+0x21a>
 800039a:	eba1 010c 	sub.w	r1, r1, ip
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f fe8c 	uxth.w	lr, ip
 80003a6:	2601      	movs	r6, #1
 80003a8:	0c20      	lsrs	r0, r4, #16
 80003aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ae:	fb07 1113 	mls	r1, r7, r3, r1
 80003b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b6:	fb0e f003 	mul.w	r0, lr, r3
 80003ba:	4288      	cmp	r0, r1
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x12c>
 80003be:	eb1c 0101 	adds.w	r1, ip, r1
 80003c2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x12a>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f200 80cb 	bhi.w	8000564 <__udivmoddi4+0x2c0>
 80003ce:	4643      	mov	r3, r8
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d8:	fb07 1110 	mls	r1, r7, r0, r1
 80003dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e0:	fb0e fe00 	mul.w	lr, lr, r0
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x156>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x154>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2ca>
 80003f8:	4608      	mov	r0, r1
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000402:	e79c      	b.n	800033e <__udivmoddi4+0x9a>
 8000404:	f1c6 0720 	rsb	r7, r6, #32
 8000408:	40b3      	lsls	r3, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f407 	lsr.w	r4, r0, r7
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	431c      	orrs	r4, r3
 800041c:	40f9      	lsrs	r1, r7
 800041e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000422:	fa00 f306 	lsl.w	r3, r0, r6
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	0c20      	lsrs	r0, r4, #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fb09 1118 	mls	r1, r9, r8, r1
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	fb08 f00e 	mul.w	r0, r8, lr
 800043c:	4288      	cmp	r0, r1
 800043e:	fa02 f206 	lsl.w	r2, r2, r6
 8000442:	d90b      	bls.n	800045c <__udivmoddi4+0x1b8>
 8000444:	eb1c 0101 	adds.w	r1, ip, r1
 8000448:	f108 3aff 	add.w	sl, r8, #4294967295
 800044c:	f080 8088 	bcs.w	8000560 <__udivmoddi4+0x2bc>
 8000450:	4288      	cmp	r0, r1
 8000452:	f240 8085 	bls.w	8000560 <__udivmoddi4+0x2bc>
 8000456:	f1a8 0802 	sub.w	r8, r8, #2
 800045a:	4461      	add	r1, ip
 800045c:	1a09      	subs	r1, r1, r0
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb1 f0f9 	udiv	r0, r1, r9
 8000464:	fb09 1110 	mls	r1, r9, r0, r1
 8000468:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000470:	458e      	cmp	lr, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x1e2>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f100 34ff 	add.w	r4, r0, #4294967295
 800047c:	d26c      	bcs.n	8000558 <__udivmoddi4+0x2b4>
 800047e:	458e      	cmp	lr, r1
 8000480:	d96a      	bls.n	8000558 <__udivmoddi4+0x2b4>
 8000482:	3802      	subs	r0, #2
 8000484:	4461      	add	r1, ip
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	fba0 9402 	umull	r9, r4, r0, r2
 800048e:	eba1 010e 	sub.w	r1, r1, lr
 8000492:	42a1      	cmp	r1, r4
 8000494:	46c8      	mov	r8, r9
 8000496:	46a6      	mov	lr, r4
 8000498:	d356      	bcc.n	8000548 <__udivmoddi4+0x2a4>
 800049a:	d053      	beq.n	8000544 <__udivmoddi4+0x2a0>
 800049c:	b15d      	cbz	r5, 80004b6 <__udivmoddi4+0x212>
 800049e:	ebb3 0208 	subs.w	r2, r3, r8
 80004a2:	eb61 010e 	sbc.w	r1, r1, lr
 80004a6:	fa01 f707 	lsl.w	r7, r1, r7
 80004aa:	fa22 f306 	lsr.w	r3, r2, r6
 80004ae:	40f1      	lsrs	r1, r6
 80004b0:	431f      	orrs	r7, r3
 80004b2:	e9c5 7100 	strd	r7, r1, [r5]
 80004b6:	2600      	movs	r6, #0
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	40d8      	lsrs	r0, r3
 80004c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c8:	fa21 f303 	lsr.w	r3, r1, r3
 80004cc:	4091      	lsls	r1, r2
 80004ce:	4301      	orrs	r1, r0
 80004d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d4:	fa1f fe8c 	uxth.w	lr, ip
 80004d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004dc:	fb07 3610 	mls	r6, r7, r0, r3
 80004e0:	0c0b      	lsrs	r3, r1, #16
 80004e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e6:	fb00 f60e 	mul.w	r6, r0, lr
 80004ea:	429e      	cmp	r6, r3
 80004ec:	fa04 f402 	lsl.w	r4, r4, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x260>
 80004f2:	eb1c 0303 	adds.w	r3, ip, r3
 80004f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fa:	d22f      	bcs.n	800055c <__udivmoddi4+0x2b8>
 80004fc:	429e      	cmp	r6, r3
 80004fe:	d92d      	bls.n	800055c <__udivmoddi4+0x2b8>
 8000500:	3802      	subs	r0, #2
 8000502:	4463      	add	r3, ip
 8000504:	1b9b      	subs	r3, r3, r6
 8000506:	b289      	uxth	r1, r1
 8000508:	fbb3 f6f7 	udiv	r6, r3, r7
 800050c:	fb07 3316 	mls	r3, r7, r6, r3
 8000510:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000514:	fb06 f30e 	mul.w	r3, r6, lr
 8000518:	428b      	cmp	r3, r1
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x28a>
 800051c:	eb1c 0101 	adds.w	r1, ip, r1
 8000520:	f106 38ff 	add.w	r8, r6, #4294967295
 8000524:	d216      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 8000526:	428b      	cmp	r3, r1
 8000528:	d914      	bls.n	8000554 <__udivmoddi4+0x2b0>
 800052a:	3e02      	subs	r6, #2
 800052c:	4461      	add	r1, ip
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000534:	e738      	b.n	80003a8 <__udivmoddi4+0x104>
 8000536:	462e      	mov	r6, r5
 8000538:	4628      	mov	r0, r5
 800053a:	e705      	b.n	8000348 <__udivmoddi4+0xa4>
 800053c:	4606      	mov	r6, r0
 800053e:	e6e3      	b.n	8000308 <__udivmoddi4+0x64>
 8000540:	4618      	mov	r0, r3
 8000542:	e6f8      	b.n	8000336 <__udivmoddi4+0x92>
 8000544:	454b      	cmp	r3, r9
 8000546:	d2a9      	bcs.n	800049c <__udivmoddi4+0x1f8>
 8000548:	ebb9 0802 	subs.w	r8, r9, r2
 800054c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000550:	3801      	subs	r0, #1
 8000552:	e7a3      	b.n	800049c <__udivmoddi4+0x1f8>
 8000554:	4646      	mov	r6, r8
 8000556:	e7ea      	b.n	800052e <__udivmoddi4+0x28a>
 8000558:	4620      	mov	r0, r4
 800055a:	e794      	b.n	8000486 <__udivmoddi4+0x1e2>
 800055c:	4640      	mov	r0, r8
 800055e:	e7d1      	b.n	8000504 <__udivmoddi4+0x260>
 8000560:	46d0      	mov	r8, sl
 8000562:	e77b      	b.n	800045c <__udivmoddi4+0x1b8>
 8000564:	3b02      	subs	r3, #2
 8000566:	4461      	add	r1, ip
 8000568:	e732      	b.n	80003d0 <__udivmoddi4+0x12c>
 800056a:	4630      	mov	r0, r6
 800056c:	e709      	b.n	8000382 <__udivmoddi4+0xde>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x156>

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fa51 	bl	8000a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f85b 	bl	800063c <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

DWT_CTRL |= (1<<0);
 8000586:	4b23      	ldr	r3, [pc, #140]	; (8000614 <main+0x9c>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a22      	ldr	r2, [pc, #136]	; (8000614 <main+0x9c>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6013      	str	r3, [r2, #0]


SEGGER_SYSVIEW_Conf();
 8000592:	f003 fc73 	bl	8003e7c <SEGGER_SYSVIEW_Conf>
vSetVarulMaxPRIGROUPValue();
 8000596:	f003 fa11 	bl	80039bc <vSetVarulMaxPRIGROUPValue>
SEGGER_SYSVIEW_Start();
 800059a:	f004 fd25 	bl	8004fe8 <SEGGER_SYSVIEW_Start>


/**********************************PREEMPTIVE IS DISABLED SO CO-OPERATIVE SCHEDULING IS WORKING********************/
status = xTaskCreate(Task1_Handler,"Task 1",configMINIMAL_STACK_SIZE,"Hello World From Task-1",2,&Task1_Handle);
 800059e:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <main+0xa0>)
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	2302      	movs	r3, #2
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	4b1d      	ldr	r3, [pc, #116]	; (800061c <main+0xa4>)
 80005a8:	2282      	movs	r2, #130	; 0x82
 80005aa:	491d      	ldr	r1, [pc, #116]	; (8000620 <main+0xa8>)
 80005ac:	481d      	ldr	r0, [pc, #116]	; (8000624 <main+0xac>)
 80005ae:	f001 fdfb 	bl	80021a8 <xTaskCreate>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a1c      	ldr	r2, [pc, #112]	; (8000628 <main+0xb0>)
 80005b6:	6013      	str	r3, [r2, #0]

configASSERT(status == pdPASS); // Check if it is succesfully created
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <main+0xb0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d00a      	beq.n	80005d6 <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005c4:	f383 8811 	msr	BASEPRI, r3
 80005c8:	f3bf 8f6f 	isb	sy
 80005cc:	f3bf 8f4f 	dsb	sy
 80005d0:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005d2:	bf00      	nop
 80005d4:	e7fe      	b.n	80005d4 <main+0x5c>

status = xTaskCreate(Task2_Handler,"Task 2",configMINIMAL_STACK_SIZE,"Hello World From Task-2",2,&Task2_Handle);
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <main+0xb4>)
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2302      	movs	r3, #2
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	4b14      	ldr	r3, [pc, #80]	; (8000630 <main+0xb8>)
 80005e0:	2282      	movs	r2, #130	; 0x82
 80005e2:	4914      	ldr	r1, [pc, #80]	; (8000634 <main+0xbc>)
 80005e4:	4814      	ldr	r0, [pc, #80]	; (8000638 <main+0xc0>)
 80005e6:	f001 fddf 	bl	80021a8 <xTaskCreate>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <main+0xb0>)
 80005ee:	6013      	str	r3, [r2, #0]

configASSERT(status == pdPASS);  // Check if it is succesfully created
 80005f0:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <main+0xb0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d00a      	beq.n	800060e <main+0x96>
        __asm volatile
 80005f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005fc:	f383 8811 	msr	BASEPRI, r3
 8000600:	f3bf 8f6f 	isb	sy
 8000604:	f3bf 8f4f 	dsb	sy
 8000608:	603b      	str	r3, [r7, #0]
    }
 800060a:	bf00      	nop
 800060c:	e7fe      	b.n	800060c <main+0x94>

vTaskStartScheduler();
 800060e:	f001 ff45 	bl	800249c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000612:	e7fe      	b.n	8000612 <main+0x9a>
 8000614:	e0001000 	.word	0xe0001000
 8000618:	20000094 	.word	0x20000094
 800061c:	080064a4 	.word	0x080064a4
 8000620:	080064bc 	.word	0x080064bc
 8000624:	08000711 	.word	0x08000711
 8000628:	2000009c 	.word	0x2000009c
 800062c:	20000098 	.word	0x20000098
 8000630:	080064c4 	.word	0x080064c4
 8000634:	080064dc 	.word	0x080064dc
 8000638:	08000735 	.word	0x08000735

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	; 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f005 fa1c 	bl	8005a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b28      	ldr	r3, [pc, #160]	; (8000708 <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a27      	ldr	r2, [pc, #156]	; (8000708 <SystemClock_Config+0xcc>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b25      	ldr	r3, [pc, #148]	; (8000708 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b22      	ldr	r3, [pc, #136]	; (800070c <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000688:	4a20      	ldr	r2, [pc, #128]	; (800070c <SystemClock_Config+0xd0>)
 800068a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1e      	ldr	r3, [pc, #120]	; (800070c <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a4:	2310      	movs	r3, #16
 80006a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a8:	2302      	movs	r3, #2
 80006aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b0:	2308      	movs	r3, #8
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80006b4:	2354      	movs	r3, #84	; 0x54
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006bc:	2304      	movs	r3, #4
 80006be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 fad1 	bl	8000c6c <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006d0:	f000 f851 	bl	8000776 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	2102      	movs	r1, #2
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fd33 	bl	800115c <HAL_RCC_ClockConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006fc:	f000 f83b 	bl	8000776 <Error_Handler>
  }
}
 8000700:	bf00      	nop
 8000702:	3750      	adds	r7, #80	; 0x50
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <Task1_Handler>:

/* USER CODE BEGIN 4 */
static void Task1_Handler(void *params)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]

	while(1)
	{
        printf("%s\n",(char*)params);
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f005 fa2b 	bl	8005b74 <puts>
        taskYIELD();
 800071e:	4b04      	ldr	r3, [pc, #16]	; (8000730 <Task1_Handler+0x20>)
 8000720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	f3bf 8f4f 	dsb	sy
 800072a:	f3bf 8f6f 	isb	sy
        printf("%s\n",(char*)params);
 800072e:	e7f3      	b.n	8000718 <Task1_Handler+0x8>
 8000730:	e000ed04 	.word	0xe000ed04

08000734 <Task2_Handler>:

	}

}
static void Task2_Handler(void *params)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n",(char*)params);
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f005 fa19 	bl	8005b74 <puts>
        taskYIELD()
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <Task2_Handler+0x20>)
 8000744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	f3bf 8f4f 	dsb	sy
 800074e:	f3bf 8f6f 	isb	sy
		printf("%s\n",(char*)params);
 8000752:	e7f3      	b.n	800073c <Task2_Handler+0x8>
 8000754:	e000ed04 	.word	0xe000ed04

08000758 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000768:	d101      	bne.n	800076e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800076a:	f000 f97d 	bl	8000a68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077a:	b672      	cpsid	i
}
 800077c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800077e:	e7fe      	b.n	800077e <Error_Handler+0x8>

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <HAL_MspInit+0x4c>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078e:	4a0f      	ldr	r2, [pc, #60]	; (80007cc <HAL_MspInit+0x4c>)
 8000790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000794:	6453      	str	r3, [r2, #68]	; 0x44
 8000796:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <HAL_MspInit+0x4c>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <HAL_MspInit+0x4c>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	4a08      	ldr	r2, [pc, #32]	; (80007cc <HAL_MspInit+0x4c>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b0:	6413      	str	r3, [r2, #64]	; 0x40
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_MspInit+0x4c>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MspInit 1 */
  //NVIC_SetPriorityGrouping(0);

  /* USER CODE END MspInit 1 */
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800

080007d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08e      	sub	sp, #56	; 0x38
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007d8:	2300      	movs	r3, #0
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80007dc:	2300      	movs	r3, #0
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	4b34      	ldr	r3, [pc, #208]	; (80008b8 <HAL_InitTick+0xe8>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	4a33      	ldr	r2, [pc, #204]	; (80008b8 <HAL_InitTick+0xe8>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	6413      	str	r3, [r2, #64]	; 0x40
 80007f0:	4b31      	ldr	r3, [pc, #196]	; (80008b8 <HAL_InitTick+0xe8>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f4:	f003 0301 	and.w	r3, r3, #1
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007fc:	f107 0210 	add.w	r2, r7, #16
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4611      	mov	r1, r2
 8000806:	4618      	mov	r0, r3
 8000808:	f000 fe74 	bl	80014f4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800080c:	6a3b      	ldr	r3, [r7, #32]
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000812:	2b00      	cmp	r3, #0
 8000814:	d103      	bne.n	800081e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000816:	f000 fe59 	bl	80014cc <HAL_RCC_GetPCLK1Freq>
 800081a:	6378      	str	r0, [r7, #52]	; 0x34
 800081c:	e004      	b.n	8000828 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800081e:	f000 fe55 	bl	80014cc <HAL_RCC_GetPCLK1Freq>
 8000822:	4603      	mov	r3, r0
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800082a:	4a24      	ldr	r2, [pc, #144]	; (80008bc <HAL_InitTick+0xec>)
 800082c:	fba2 2303 	umull	r2, r3, r2, r3
 8000830:	0c9b      	lsrs	r3, r3, #18
 8000832:	3b01      	subs	r3, #1
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000836:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <HAL_InitTick+0xf0>)
 8000838:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800083c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800083e:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <HAL_InitTick+0xf0>)
 8000840:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000844:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000846:	4a1e      	ldr	r2, [pc, #120]	; (80008c0 <HAL_InitTick+0xf0>)
 8000848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800084a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <HAL_InitTick+0xf0>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000852:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <HAL_InitTick+0xf0>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000858:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <HAL_InitTick+0xf0>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800085e:	4818      	ldr	r0, [pc, #96]	; (80008c0 <HAL_InitTick+0xf0>)
 8000860:	f000 fe7a 	bl	8001558 <HAL_TIM_Base_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800086a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800086e:	2b00      	cmp	r3, #0
 8000870:	d11b      	bne.n	80008aa <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000872:	4813      	ldr	r0, [pc, #76]	; (80008c0 <HAL_InitTick+0xf0>)
 8000874:	f000 feca 	bl	800160c <HAL_TIM_Base_Start_IT>
 8000878:	4603      	mov	r3, r0
 800087a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800087e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000882:	2b00      	cmp	r3, #0
 8000884:	d111      	bne.n	80008aa <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000886:	201c      	movs	r0, #28
 8000888:	f000 f9e2 	bl	8000c50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2b0f      	cmp	r3, #15
 8000890:	d808      	bhi.n	80008a4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000892:	2200      	movs	r2, #0
 8000894:	6879      	ldr	r1, [r7, #4]
 8000896:	201c      	movs	r0, #28
 8000898:	f000 f9be 	bl	8000c18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800089c:	4a09      	ldr	r2, [pc, #36]	; (80008c4 <HAL_InitTick+0xf4>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6013      	str	r3, [r2, #0]
 80008a2:	e002      	b.n	80008aa <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80008a4:	2301      	movs	r3, #1
 80008a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3738      	adds	r7, #56	; 0x38
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	431bde83 	.word	0x431bde83
 80008c0:	200000a0 	.word	0x200000a0
 80008c4:	20000004 	.word	0x20000004

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <NMI_Handler+0x4>

080008ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <HardFault_Handler+0x4>

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <MemManage_Handler+0x4>

080008da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <BusFault_Handler+0x4>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <UsageFault_Handler+0x4>

080008e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008f8:	4802      	ldr	r0, [pc, #8]	; (8000904 <TIM2_IRQHandler+0x10>)
 80008fa:	f000 fee9 	bl	80016d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200000a0 	.word	0x200000a0

08000908 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	e00a      	b.n	8000930 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800091a:	f3af 8000 	nop.w
 800091e:	4601      	mov	r1, r0
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	1c5a      	adds	r2, r3, #1
 8000924:	60ba      	str	r2, [r7, #8]
 8000926:	b2ca      	uxtb	r2, r1
 8000928:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	3301      	adds	r3, #1
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	697a      	ldr	r2, [r7, #20]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	429a      	cmp	r2, r3
 8000936:	dbf0      	blt.n	800091a <_read+0x12>
  }

  return len;
 8000938:	687b      	ldr	r3, [r7, #4]
}
 800093a:	4618      	mov	r0, r3
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000942:	b480      	push	{r7}
 8000944:	b083      	sub	sp, #12
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800094e:	4618      	mov	r0, r3
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800095a:	b480      	push	{r7}
 800095c:	b083      	sub	sp, #12
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
 8000962:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800096a:	605a      	str	r2, [r3, #4]
  return 0;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <_isatty>:

int _isatty(int file)
{
 800097a:	b480      	push	{r7}
 800097c:	b083      	sub	sp, #12
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000982:	2301      	movs	r3, #1
}
 8000984:	4618      	mov	r0, r3
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
	...

080009ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <SystemInit+0x20>)
 80009b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b6:	4a05      	ldr	r2, [pc, #20]	; (80009cc <SystemInit+0x20>)
 80009b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009d4:	480d      	ldr	r0, [pc, #52]	; (8000a0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009d6:	490e      	ldr	r1, [pc, #56]	; (8000a10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009d8:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009dc:	e002      	b.n	80009e4 <LoopCopyDataInit>

080009de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e2:	3304      	adds	r3, #4

080009e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e8:	d3f9      	bcc.n	80009de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ea:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009ec:	4c0b      	ldr	r4, [pc, #44]	; (8000a1c <LoopFillZerobss+0x26>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f0:	e001      	b.n	80009f6 <LoopFillZerobss>

080009f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f4:	3204      	adds	r2, #4

080009f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f8:	d3fb      	bcc.n	80009f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009fa:	f7ff ffd7 	bl	80009ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009fe:	f005 f801 	bl	8005a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a02:	f7ff fdb9 	bl	8000578 <main>
  bx  lr    
 8000a06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a08:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a10:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000a14:	08006668 	.word	0x08006668
  ldr r2, =_sbss
 8000a18:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000a1c:	2000d51c 	.word	0x2000d51c

08000a20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a20:	e7fe      	b.n	8000a20 <ADC_IRQHandler>
	...

08000a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <HAL_Init+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <HAL_Init+0x40>)
 8000a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a34:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <HAL_Init+0x40>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <HAL_Init+0x40>)
 8000a3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <HAL_Init+0x40>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <HAL_Init+0x40>)
 8000a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f000 f8d8 	bl	8000c02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a52:	200f      	movs	r0, #15
 8000a54:	f7ff febc 	bl	80007d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a58:	f7ff fe92 	bl	8000780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023c00 	.word	0x40023c00

08000a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_IncTick+0x20>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_IncTick+0x24>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4413      	add	r3, r2
 8000a78:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <HAL_IncTick+0x24>)
 8000a7a:	6013      	str	r3, [r2, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	200000e8 	.word	0x200000e8

08000a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  return uwTick;
 8000a94:	4b03      	ldr	r3, [pc, #12]	; (8000aa4 <HAL_GetTick+0x14>)
 8000a96:	681b      	ldr	r3, [r3, #0]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	200000e8 	.word	0x200000e8

08000aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <__NVIC_SetPriorityGrouping+0x44>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000abe:	68ba      	ldr	r2, [r7, #8]
 8000ac0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ada:	4a04      	ldr	r2, [pc, #16]	; (8000aec <__NVIC_SetPriorityGrouping+0x44>)
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	60d3      	str	r3, [r2, #12]
}
 8000ae0:	bf00      	nop
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <__NVIC_GetPriorityGrouping+0x18>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	0a1b      	lsrs	r3, r3, #8
 8000afa:	f003 0307 	and.w	r3, r3, #7
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	db0b      	blt.n	8000b36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	f003 021f 	and.w	r2, r3, #31
 8000b24:	4907      	ldr	r1, [pc, #28]	; (8000b44 <__NVIC_EnableIRQ+0x38>)
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	095b      	lsrs	r3, r3, #5
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000e100 	.word	0xe000e100

08000b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	db0a      	blt.n	8000b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	490c      	ldr	r1, [pc, #48]	; (8000b94 <__NVIC_SetPriority+0x4c>)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	0112      	lsls	r2, r2, #4
 8000b68:	b2d2      	uxtb	r2, r2
 8000b6a:	440b      	add	r3, r1
 8000b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b70:	e00a      	b.n	8000b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4908      	ldr	r1, [pc, #32]	; (8000b98 <__NVIC_SetPriority+0x50>)
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	f003 030f 	and.w	r3, r3, #15
 8000b7e:	3b04      	subs	r3, #4
 8000b80:	0112      	lsls	r2, r2, #4
 8000b82:	b2d2      	uxtb	r2, r2
 8000b84:	440b      	add	r3, r1
 8000b86:	761a      	strb	r2, [r3, #24]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000e100 	.word	0xe000e100
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b089      	sub	sp, #36	; 0x24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	f1c3 0307 	rsb	r3, r3, #7
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	bf28      	it	cs
 8000bba:	2304      	movcs	r3, #4
 8000bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	2b06      	cmp	r3, #6
 8000bc4:	d902      	bls.n	8000bcc <NVIC_EncodePriority+0x30>
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3b03      	subs	r3, #3
 8000bca:	e000      	b.n	8000bce <NVIC_EncodePriority+0x32>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43da      	mvns	r2, r3
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	401a      	ands	r2, r3
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be4:	f04f 31ff 	mov.w	r1, #4294967295
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa01 f303 	lsl.w	r3, r1, r3
 8000bee:	43d9      	mvns	r1, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	4313      	orrs	r3, r2
         );
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3724      	adds	r7, #36	; 0x24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f7ff ff4c 	bl	8000aa8 <__NVIC_SetPriorityGrouping>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
 8000c24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c2a:	f7ff ff61 	bl	8000af0 <__NVIC_GetPriorityGrouping>
 8000c2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	68b9      	ldr	r1, [r7, #8]
 8000c34:	6978      	ldr	r0, [r7, #20]
 8000c36:	f7ff ffb1 	bl	8000b9c <NVIC_EncodePriority>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c40:	4611      	mov	r1, r2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff ff80 	bl	8000b48 <__NVIC_SetPriority>
}
 8000c48:	bf00      	nop
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ff54 	bl	8000b0c <__NVIC_EnableIRQ>
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e267      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d075      	beq.n	8000d76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c8a:	4b88      	ldr	r3, [pc, #544]	; (8000eac <HAL_RCC_OscConfig+0x240>)
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	f003 030c 	and.w	r3, r3, #12
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	d00c      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c96:	4b85      	ldr	r3, [pc, #532]	; (8000eac <HAL_RCC_OscConfig+0x240>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c9e:	2b08      	cmp	r3, #8
 8000ca0:	d112      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ca2:	4b82      	ldr	r3, [pc, #520]	; (8000eac <HAL_RCC_OscConfig+0x240>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000caa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000cae:	d10b      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cb0:	4b7e      	ldr	r3, [pc, #504]	; (8000eac <HAL_RCC_OscConfig+0x240>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d05b      	beq.n	8000d74 <HAL_RCC_OscConfig+0x108>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d157      	bne.n	8000d74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e242      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd0:	d106      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x74>
 8000cd2:	4b76      	ldr	r3, [pc, #472]	; (8000eac <HAL_RCC_OscConfig+0x240>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a75      	ldr	r2, [pc, #468]	; (8000eac <HAL_RCC_OscConfig+0x240>)
 8000cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	e01d      	b.n	8000d1c <HAL_RCC_OscConfig+0xb0>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ce8:	d10c      	bne.n	8000d04 <HAL_RCC_OscConfig+0x98>
 8000cea:	4b70      	ldr	r3, [pc, #448]	; (8000eac <HAL_RCC_OscConfig+0x240>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a6f      	ldr	r2, [pc, #444]	; (8000eac <HAL_RCC_OscConfig+0x240>)
 8000cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	4b6d      	ldr	r3, [pc, #436]	; (8000eac <HAL_RCC_OscConfig+0x240>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a6c      	ldr	r2, [pc, #432]	; (8000eac <HAL_RCC_OscConfig+0x240>)
 8000cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	e00b      	b.n	8000d1c <HAL_RCC_OscConfig+0xb0>
 8000d04:	4b69      	ldr	r3, [pc, #420]	; (8000eac <HAL_RCC_OscConfig+0x240>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a68      	ldr	r2, [pc, #416]	; (8000eac <HAL_RCC_OscConfig+0x240>)
 8000d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d0e:	6013      	str	r3, [r2, #0]
 8000d10:	4b66      	ldr	r3, [pc, #408]	; (8000eac <HAL_RCC_OscConfig+0x240>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a65      	ldr	r2, [pc, #404]	; (8000eac <HAL_RCC_OscConfig+0x240>)
 8000d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d013      	beq.n	8000d4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d24:	f7ff feb4 	bl	8000a90 <HAL_GetTick>
 8000d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2a:	e008      	b.n	8000d3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d2c:	f7ff feb0 	bl	8000a90 <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	2b64      	cmp	r3, #100	; 0x64
 8000d38:	d901      	bls.n	8000d3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	e207      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d3e:	4b5b      	ldr	r3, [pc, #364]	; (8000eac <HAL_RCC_OscConfig+0x240>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d0f0      	beq.n	8000d2c <HAL_RCC_OscConfig+0xc0>
 8000d4a:	e014      	b.n	8000d76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d4c:	f7ff fea0 	bl	8000a90 <HAL_GetTick>
 8000d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d52:	e008      	b.n	8000d66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d54:	f7ff fe9c 	bl	8000a90 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2b64      	cmp	r3, #100	; 0x64
 8000d60:	d901      	bls.n	8000d66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e1f3      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d66:	4b51      	ldr	r3, [pc, #324]	; (8000eac <HAL_RCC_OscConfig+0x240>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d1f0      	bne.n	8000d54 <HAL_RCC_OscConfig+0xe8>
 8000d72:	e000      	b.n	8000d76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d063      	beq.n	8000e4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d82:	4b4a      	ldr	r3, [pc, #296]	; (8000eac <HAL_RCC_OscConfig+0x240>)
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	f003 030c 	and.w	r3, r3, #12
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d00b      	beq.n	8000da6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d8e:	4b47      	ldr	r3, [pc, #284]	; (8000eac <HAL_RCC_OscConfig+0x240>)
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d96:	2b08      	cmp	r3, #8
 8000d98:	d11c      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d9a:	4b44      	ldr	r3, [pc, #272]	; (8000eac <HAL_RCC_OscConfig+0x240>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d116      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000da6:	4b41      	ldr	r3, [pc, #260]	; (8000eac <HAL_RCC_OscConfig+0x240>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d005      	beq.n	8000dbe <HAL_RCC_OscConfig+0x152>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d001      	beq.n	8000dbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e1c7      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dbe:	4b3b      	ldr	r3, [pc, #236]	; (8000eac <HAL_RCC_OscConfig+0x240>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	691b      	ldr	r3, [r3, #16]
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	4937      	ldr	r1, [pc, #220]	; (8000eac <HAL_RCC_OscConfig+0x240>)
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dd2:	e03a      	b.n	8000e4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d020      	beq.n	8000e1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ddc:	4b34      	ldr	r3, [pc, #208]	; (8000eb0 <HAL_RCC_OscConfig+0x244>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000de2:	f7ff fe55 	bl	8000a90 <HAL_GetTick>
 8000de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de8:	e008      	b.n	8000dfc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dea:	f7ff fe51 	bl	8000a90 <HAL_GetTick>
 8000dee:	4602      	mov	r2, r0
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d901      	bls.n	8000dfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	e1a8      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dfc:	4b2b      	ldr	r3, [pc, #172]	; (8000eac <HAL_RCC_OscConfig+0x240>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0302 	and.w	r3, r3, #2
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d0f0      	beq.n	8000dea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e08:	4b28      	ldr	r3, [pc, #160]	; (8000eac <HAL_RCC_OscConfig+0x240>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	691b      	ldr	r3, [r3, #16]
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	4925      	ldr	r1, [pc, #148]	; (8000eac <HAL_RCC_OscConfig+0x240>)
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	600b      	str	r3, [r1, #0]
 8000e1c:	e015      	b.n	8000e4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e1e:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <HAL_RCC_OscConfig+0x244>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e24:	f7ff fe34 	bl	8000a90 <HAL_GetTick>
 8000e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e2a:	e008      	b.n	8000e3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e2c:	f7ff fe30 	bl	8000a90 <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d901      	bls.n	8000e3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e187      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e3e:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <HAL_RCC_OscConfig+0x240>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d1f0      	bne.n	8000e2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f003 0308 	and.w	r3, r3, #8
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d036      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d016      	beq.n	8000e8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_RCC_OscConfig+0x248>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e64:	f7ff fe14 	bl	8000a90 <HAL_GetTick>
 8000e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e6a:	e008      	b.n	8000e7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e6c:	f7ff fe10 	bl	8000a90 <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d901      	bls.n	8000e7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e167      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <HAL_RCC_OscConfig+0x240>)
 8000e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d0f0      	beq.n	8000e6c <HAL_RCC_OscConfig+0x200>
 8000e8a:	e01b      	b.n	8000ec4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <HAL_RCC_OscConfig+0x248>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e92:	f7ff fdfd 	bl	8000a90 <HAL_GetTick>
 8000e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e98:	e00e      	b.n	8000eb8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e9a:	f7ff fdf9 	bl	8000a90 <HAL_GetTick>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d907      	bls.n	8000eb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e150      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	42470000 	.word	0x42470000
 8000eb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eb8:	4b88      	ldr	r3, [pc, #544]	; (80010dc <HAL_RCC_OscConfig+0x470>)
 8000eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ebc:	f003 0302 	and.w	r3, r3, #2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1ea      	bne.n	8000e9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f003 0304 	and.w	r3, r3, #4
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f000 8097 	beq.w	8001000 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ed6:	4b81      	ldr	r3, [pc, #516]	; (80010dc <HAL_RCC_OscConfig+0x470>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d10f      	bne.n	8000f02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	4b7d      	ldr	r3, [pc, #500]	; (80010dc <HAL_RCC_OscConfig+0x470>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	4a7c      	ldr	r2, [pc, #496]	; (80010dc <HAL_RCC_OscConfig+0x470>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef2:	4b7a      	ldr	r3, [pc, #488]	; (80010dc <HAL_RCC_OscConfig+0x470>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000efe:	2301      	movs	r3, #1
 8000f00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f02:	4b77      	ldr	r3, [pc, #476]	; (80010e0 <HAL_RCC_OscConfig+0x474>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d118      	bne.n	8000f40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f0e:	4b74      	ldr	r3, [pc, #464]	; (80010e0 <HAL_RCC_OscConfig+0x474>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a73      	ldr	r2, [pc, #460]	; (80010e0 <HAL_RCC_OscConfig+0x474>)
 8000f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f1a:	f7ff fdb9 	bl	8000a90 <HAL_GetTick>
 8000f1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f20:	e008      	b.n	8000f34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f22:	f7ff fdb5 	bl	8000a90 <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d901      	bls.n	8000f34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000f30:	2303      	movs	r3, #3
 8000f32:	e10c      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f34:	4b6a      	ldr	r3, [pc, #424]	; (80010e0 <HAL_RCC_OscConfig+0x474>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d0f0      	beq.n	8000f22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d106      	bne.n	8000f56 <HAL_RCC_OscConfig+0x2ea>
 8000f48:	4b64      	ldr	r3, [pc, #400]	; (80010dc <HAL_RCC_OscConfig+0x470>)
 8000f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f4c:	4a63      	ldr	r2, [pc, #396]	; (80010dc <HAL_RCC_OscConfig+0x470>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6713      	str	r3, [r2, #112]	; 0x70
 8000f54:	e01c      	b.n	8000f90 <HAL_RCC_OscConfig+0x324>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	2b05      	cmp	r3, #5
 8000f5c:	d10c      	bne.n	8000f78 <HAL_RCC_OscConfig+0x30c>
 8000f5e:	4b5f      	ldr	r3, [pc, #380]	; (80010dc <HAL_RCC_OscConfig+0x470>)
 8000f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f62:	4a5e      	ldr	r2, [pc, #376]	; (80010dc <HAL_RCC_OscConfig+0x470>)
 8000f64:	f043 0304 	orr.w	r3, r3, #4
 8000f68:	6713      	str	r3, [r2, #112]	; 0x70
 8000f6a:	4b5c      	ldr	r3, [pc, #368]	; (80010dc <HAL_RCC_OscConfig+0x470>)
 8000f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f6e:	4a5b      	ldr	r2, [pc, #364]	; (80010dc <HAL_RCC_OscConfig+0x470>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6713      	str	r3, [r2, #112]	; 0x70
 8000f76:	e00b      	b.n	8000f90 <HAL_RCC_OscConfig+0x324>
 8000f78:	4b58      	ldr	r3, [pc, #352]	; (80010dc <HAL_RCC_OscConfig+0x470>)
 8000f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f7c:	4a57      	ldr	r2, [pc, #348]	; (80010dc <HAL_RCC_OscConfig+0x470>)
 8000f7e:	f023 0301 	bic.w	r3, r3, #1
 8000f82:	6713      	str	r3, [r2, #112]	; 0x70
 8000f84:	4b55      	ldr	r3, [pc, #340]	; (80010dc <HAL_RCC_OscConfig+0x470>)
 8000f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f88:	4a54      	ldr	r2, [pc, #336]	; (80010dc <HAL_RCC_OscConfig+0x470>)
 8000f8a:	f023 0304 	bic.w	r3, r3, #4
 8000f8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d015      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f98:	f7ff fd7a 	bl	8000a90 <HAL_GetTick>
 8000f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f9e:	e00a      	b.n	8000fb6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fa0:	f7ff fd76 	bl	8000a90 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e0cb      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb6:	4b49      	ldr	r3, [pc, #292]	; (80010dc <HAL_RCC_OscConfig+0x470>)
 8000fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0ee      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x334>
 8000fc2:	e014      	b.n	8000fee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fc4:	f7ff fd64 	bl	8000a90 <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fca:	e00a      	b.n	8000fe2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fcc:	f7ff fd60 	bl	8000a90 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e0b5      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fe2:	4b3e      	ldr	r3, [pc, #248]	; (80010dc <HAL_RCC_OscConfig+0x470>)
 8000fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1ee      	bne.n	8000fcc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000fee:	7dfb      	ldrb	r3, [r7, #23]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d105      	bne.n	8001000 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ff4:	4b39      	ldr	r3, [pc, #228]	; (80010dc <HAL_RCC_OscConfig+0x470>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	4a38      	ldr	r2, [pc, #224]	; (80010dc <HAL_RCC_OscConfig+0x470>)
 8000ffa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	2b00      	cmp	r3, #0
 8001006:	f000 80a1 	beq.w	800114c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800100a:	4b34      	ldr	r3, [pc, #208]	; (80010dc <HAL_RCC_OscConfig+0x470>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 030c 	and.w	r3, r3, #12
 8001012:	2b08      	cmp	r3, #8
 8001014:	d05c      	beq.n	80010d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	2b02      	cmp	r3, #2
 800101c:	d141      	bne.n	80010a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800101e:	4b31      	ldr	r3, [pc, #196]	; (80010e4 <HAL_RCC_OscConfig+0x478>)
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001024:	f7ff fd34 	bl	8000a90 <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800102c:	f7ff fd30 	bl	8000a90 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e087      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800103e:	4b27      	ldr	r3, [pc, #156]	; (80010dc <HAL_RCC_OscConfig+0x470>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f0      	bne.n	800102c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69da      	ldr	r2, [r3, #28]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6a1b      	ldr	r3, [r3, #32]
 8001052:	431a      	orrs	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	019b      	lsls	r3, r3, #6
 800105a:	431a      	orrs	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001060:	085b      	lsrs	r3, r3, #1
 8001062:	3b01      	subs	r3, #1
 8001064:	041b      	lsls	r3, r3, #16
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106c:	061b      	lsls	r3, r3, #24
 800106e:	491b      	ldr	r1, [pc, #108]	; (80010dc <HAL_RCC_OscConfig+0x470>)
 8001070:	4313      	orrs	r3, r2
 8001072:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001074:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <HAL_RCC_OscConfig+0x478>)
 8001076:	2201      	movs	r2, #1
 8001078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107a:	f7ff fd09 	bl	8000a90 <HAL_GetTick>
 800107e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001080:	e008      	b.n	8001094 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001082:	f7ff fd05 	bl	8000a90 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e05c      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_RCC_OscConfig+0x470>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d0f0      	beq.n	8001082 <HAL_RCC_OscConfig+0x416>
 80010a0:	e054      	b.n	800114c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <HAL_RCC_OscConfig+0x478>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a8:	f7ff fcf2 	bl	8000a90 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010b0:	f7ff fcee 	bl	8000a90 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e045      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_RCC_OscConfig+0x470>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1f0      	bne.n	80010b0 <HAL_RCC_OscConfig+0x444>
 80010ce:	e03d      	b.n	800114c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d107      	bne.n	80010e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e038      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40007000 	.word	0x40007000
 80010e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80010e8:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <HAL_RCC_OscConfig+0x4ec>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d028      	beq.n	8001148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001100:	429a      	cmp	r2, r3
 8001102:	d121      	bne.n	8001148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800110e:	429a      	cmp	r2, r3
 8001110:	d11a      	bne.n	8001148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001118:	4013      	ands	r3, r2
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800111e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001120:	4293      	cmp	r3, r2
 8001122:	d111      	bne.n	8001148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112e:	085b      	lsrs	r3, r3, #1
 8001130:	3b01      	subs	r3, #1
 8001132:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001134:	429a      	cmp	r2, r3
 8001136:	d107      	bne.n	8001148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001142:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001144:	429a      	cmp	r2, r3
 8001146:	d001      	beq.n	800114c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e000      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800

0800115c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d101      	bne.n	8001170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e0cc      	b.n	800130a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001170:	4b68      	ldr	r3, [pc, #416]	; (8001314 <HAL_RCC_ClockConfig+0x1b8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0307 	and.w	r3, r3, #7
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	429a      	cmp	r2, r3
 800117c:	d90c      	bls.n	8001198 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800117e:	4b65      	ldr	r3, [pc, #404]	; (8001314 <HAL_RCC_ClockConfig+0x1b8>)
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001186:	4b63      	ldr	r3, [pc, #396]	; (8001314 <HAL_RCC_ClockConfig+0x1b8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	d001      	beq.n	8001198 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e0b8      	b.n	800130a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d020      	beq.n	80011e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d005      	beq.n	80011bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011b0:	4b59      	ldr	r3, [pc, #356]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	4a58      	ldr	r2, [pc, #352]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80011b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0308 	and.w	r3, r3, #8
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d005      	beq.n	80011d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011c8:	4b53      	ldr	r3, [pc, #332]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	4a52      	ldr	r2, [pc, #328]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80011ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011d4:	4b50      	ldr	r3, [pc, #320]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	494d      	ldr	r1, [pc, #308]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d044      	beq.n	800127c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d107      	bne.n	800120a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fa:	4b47      	ldr	r3, [pc, #284]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d119      	bne.n	800123a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e07f      	b.n	800130a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d003      	beq.n	800121a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001216:	2b03      	cmp	r3, #3
 8001218:	d107      	bne.n	800122a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800121a:	4b3f      	ldr	r3, [pc, #252]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d109      	bne.n	800123a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e06f      	b.n	800130a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122a:	4b3b      	ldr	r3, [pc, #236]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e067      	b.n	800130a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800123a:	4b37      	ldr	r3, [pc, #220]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f023 0203 	bic.w	r2, r3, #3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	4934      	ldr	r1, [pc, #208]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 8001248:	4313      	orrs	r3, r2
 800124a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800124c:	f7ff fc20 	bl	8000a90 <HAL_GetTick>
 8001250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001252:	e00a      	b.n	800126a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001254:	f7ff fc1c 	bl	8000a90 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001262:	4293      	cmp	r3, r2
 8001264:	d901      	bls.n	800126a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e04f      	b.n	800130a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800126a:	4b2b      	ldr	r3, [pc, #172]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 020c 	and.w	r2, r3, #12
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	429a      	cmp	r2, r3
 800127a:	d1eb      	bne.n	8001254 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800127c:	4b25      	ldr	r3, [pc, #148]	; (8001314 <HAL_RCC_ClockConfig+0x1b8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	429a      	cmp	r2, r3
 8001288:	d20c      	bcs.n	80012a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800128a:	4b22      	ldr	r3, [pc, #136]	; (8001314 <HAL_RCC_ClockConfig+0x1b8>)
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001292:	4b20      	ldr	r3, [pc, #128]	; (8001314 <HAL_RCC_ClockConfig+0x1b8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	429a      	cmp	r2, r3
 800129e:	d001      	beq.n	80012a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e032      	b.n	800130a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d008      	beq.n	80012c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	4916      	ldr	r1, [pc, #88]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d009      	beq.n	80012e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	490e      	ldr	r1, [pc, #56]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012e2:	f000 f821 	bl	8001328 <HAL_RCC_GetSysClockFreq>
 80012e6:	4602      	mov	r2, r0
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	091b      	lsrs	r3, r3, #4
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	490a      	ldr	r1, [pc, #40]	; (800131c <HAL_RCC_ClockConfig+0x1c0>)
 80012f4:	5ccb      	ldrb	r3, [r1, r3]
 80012f6:	fa22 f303 	lsr.w	r3, r2, r3
 80012fa:	4a09      	ldr	r2, [pc, #36]	; (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 80012fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <HAL_RCC_ClockConfig+0x1c8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fa64 	bl	80007d0 <HAL_InitTick>

  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023c00 	.word	0x40023c00
 8001318:	40023800 	.word	0x40023800
 800131c:	080065b4 	.word	0x080065b4
 8001320:	20000000 	.word	0x20000000
 8001324:	20000004 	.word	0x20000004

08001328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800132c:	b090      	sub	sp, #64	; 0x40
 800132e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001330:	2300      	movs	r3, #0
 8001332:	637b      	str	r3, [r7, #52]	; 0x34
 8001334:	2300      	movs	r3, #0
 8001336:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001338:	2300      	movs	r3, #0
 800133a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800133c:	2300      	movs	r3, #0
 800133e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001340:	4b59      	ldr	r3, [pc, #356]	; (80014a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f003 030c 	and.w	r3, r3, #12
 8001348:	2b08      	cmp	r3, #8
 800134a:	d00d      	beq.n	8001368 <HAL_RCC_GetSysClockFreq+0x40>
 800134c:	2b08      	cmp	r3, #8
 800134e:	f200 80a1 	bhi.w	8001494 <HAL_RCC_GetSysClockFreq+0x16c>
 8001352:	2b00      	cmp	r3, #0
 8001354:	d002      	beq.n	800135c <HAL_RCC_GetSysClockFreq+0x34>
 8001356:	2b04      	cmp	r3, #4
 8001358:	d003      	beq.n	8001362 <HAL_RCC_GetSysClockFreq+0x3a>
 800135a:	e09b      	b.n	8001494 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800135c:	4b53      	ldr	r3, [pc, #332]	; (80014ac <HAL_RCC_GetSysClockFreq+0x184>)
 800135e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001360:	e09b      	b.n	800149a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001362:	4b53      	ldr	r3, [pc, #332]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001364:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001366:	e098      	b.n	800149a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001368:	4b4f      	ldr	r3, [pc, #316]	; (80014a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001370:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001372:	4b4d      	ldr	r3, [pc, #308]	; (80014a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d028      	beq.n	80013d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800137e:	4b4a      	ldr	r3, [pc, #296]	; (80014a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	099b      	lsrs	r3, r3, #6
 8001384:	2200      	movs	r2, #0
 8001386:	623b      	str	r3, [r7, #32]
 8001388:	627a      	str	r2, [r7, #36]	; 0x24
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001390:	2100      	movs	r1, #0
 8001392:	4b47      	ldr	r3, [pc, #284]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001394:	fb03 f201 	mul.w	r2, r3, r1
 8001398:	2300      	movs	r3, #0
 800139a:	fb00 f303 	mul.w	r3, r0, r3
 800139e:	4413      	add	r3, r2
 80013a0:	4a43      	ldr	r2, [pc, #268]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80013a2:	fba0 1202 	umull	r1, r2, r0, r2
 80013a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013a8:	460a      	mov	r2, r1
 80013aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80013ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013ae:	4413      	add	r3, r2
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b4:	2200      	movs	r2, #0
 80013b6:	61bb      	str	r3, [r7, #24]
 80013b8:	61fa      	str	r2, [r7, #28]
 80013ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80013c2:	f7fe ff57 	bl	8000274 <__aeabi_uldivmod>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4613      	mov	r3, r2
 80013cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013ce:	e053      	b.n	8001478 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013d0:	4b35      	ldr	r3, [pc, #212]	; (80014a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	099b      	lsrs	r3, r3, #6
 80013d6:	2200      	movs	r2, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	617a      	str	r2, [r7, #20]
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80013e2:	f04f 0b00 	mov.w	fp, #0
 80013e6:	4652      	mov	r2, sl
 80013e8:	465b      	mov	r3, fp
 80013ea:	f04f 0000 	mov.w	r0, #0
 80013ee:	f04f 0100 	mov.w	r1, #0
 80013f2:	0159      	lsls	r1, r3, #5
 80013f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013f8:	0150      	lsls	r0, r2, #5
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	ebb2 080a 	subs.w	r8, r2, sl
 8001402:	eb63 090b 	sbc.w	r9, r3, fp
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	f04f 0300 	mov.w	r3, #0
 800140e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001412:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001416:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800141a:	ebb2 0408 	subs.w	r4, r2, r8
 800141e:	eb63 0509 	sbc.w	r5, r3, r9
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	f04f 0300 	mov.w	r3, #0
 800142a:	00eb      	lsls	r3, r5, #3
 800142c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001430:	00e2      	lsls	r2, r4, #3
 8001432:	4614      	mov	r4, r2
 8001434:	461d      	mov	r5, r3
 8001436:	eb14 030a 	adds.w	r3, r4, sl
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	eb45 030b 	adc.w	r3, r5, fp
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	f04f 0300 	mov.w	r3, #0
 800144a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800144e:	4629      	mov	r1, r5
 8001450:	028b      	lsls	r3, r1, #10
 8001452:	4621      	mov	r1, r4
 8001454:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001458:	4621      	mov	r1, r4
 800145a:	028a      	lsls	r2, r1, #10
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001462:	2200      	movs	r2, #0
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	60fa      	str	r2, [r7, #12]
 8001468:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800146c:	f7fe ff02 	bl	8000274 <__aeabi_uldivmod>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4613      	mov	r3, r2
 8001476:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001478:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	0c1b      	lsrs	r3, r3, #16
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	3301      	adds	r3, #1
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001488:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800148a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800148c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001490:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001492:	e002      	b.n	800149a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <HAL_RCC_GetSysClockFreq+0x184>)
 8001496:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001498:	bf00      	nop
    }
  }
  return sysclockfreq;
 800149a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800149c:	4618      	mov	r0, r3
 800149e:	3740      	adds	r7, #64	; 0x40
 80014a0:	46bd      	mov	sp, r7
 80014a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800
 80014ac:	00f42400 	.word	0x00f42400
 80014b0:	017d7840 	.word	0x017d7840

080014b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80014ba:	681b      	ldr	r3, [r3, #0]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000000 	.word	0x20000000

080014cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014d0:	f7ff fff0 	bl	80014b4 <HAL_RCC_GetHCLKFreq>
 80014d4:	4602      	mov	r2, r0
 80014d6:	4b05      	ldr	r3, [pc, #20]	; (80014ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	0a9b      	lsrs	r3, r3, #10
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	4903      	ldr	r1, [pc, #12]	; (80014f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014e2:	5ccb      	ldrb	r3, [r1, r3]
 80014e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40023800 	.word	0x40023800
 80014f0:	080065c4 	.word	0x080065c4

080014f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	220f      	movs	r2, #15
 8001502:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_RCC_GetClockConfig+0x5c>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 0203 	and.w	r2, r3, #3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <HAL_RCC_GetClockConfig+0x5c>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <HAL_RCC_GetClockConfig+0x5c>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_RCC_GetClockConfig+0x5c>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	08db      	lsrs	r3, r3, #3
 800152e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001536:	4b07      	ldr	r3, [pc, #28]	; (8001554 <HAL_RCC_GetClockConfig+0x60>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0207 	and.w	r2, r3, #7
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	601a      	str	r2, [r3, #0]
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800
 8001554:	40023c00 	.word	0x40023c00

08001558 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e041      	b.n	80015ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d106      	bne.n	8001584 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 f839 	bl	80015f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2202      	movs	r2, #2
 8001588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3304      	adds	r3, #4
 8001594:	4619      	mov	r1, r3
 8001596:	4610      	mov	r0, r2
 8001598:	f000 f9ca 	bl	8001930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b01      	cmp	r3, #1
 800161e:	d001      	beq.n	8001624 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e044      	b.n	80016ae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2202      	movs	r2, #2
 8001628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 0201 	orr.w	r2, r2, #1
 800163a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a1e      	ldr	r2, [pc, #120]	; (80016bc <HAL_TIM_Base_Start_IT+0xb0>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d018      	beq.n	8001678 <HAL_TIM_Base_Start_IT+0x6c>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800164e:	d013      	beq.n	8001678 <HAL_TIM_Base_Start_IT+0x6c>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a1a      	ldr	r2, [pc, #104]	; (80016c0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d00e      	beq.n	8001678 <HAL_TIM_Base_Start_IT+0x6c>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a19      	ldr	r2, [pc, #100]	; (80016c4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d009      	beq.n	8001678 <HAL_TIM_Base_Start_IT+0x6c>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a17      	ldr	r2, [pc, #92]	; (80016c8 <HAL_TIM_Base_Start_IT+0xbc>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d004      	beq.n	8001678 <HAL_TIM_Base_Start_IT+0x6c>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a16      	ldr	r2, [pc, #88]	; (80016cc <HAL_TIM_Base_Start_IT+0xc0>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d111      	bne.n	800169c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2b06      	cmp	r3, #6
 8001688:	d010      	beq.n	80016ac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f042 0201 	orr.w	r2, r2, #1
 8001698:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800169a:	e007      	b.n	80016ac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0201 	orr.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40010000 	.word	0x40010000
 80016c0:	40000400 	.word	0x40000400
 80016c4:	40000800 	.word	0x40000800
 80016c8:	40000c00 	.word	0x40000c00
 80016cc:	40014000 	.word	0x40014000

080016d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d122      	bne.n	800172c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d11b      	bne.n	800172c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f06f 0202 	mvn.w	r2, #2
 80016fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 f8ee 	bl	80018f4 <HAL_TIM_IC_CaptureCallback>
 8001718:	e005      	b.n	8001726 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 f8e0 	bl	80018e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 f8f1 	bl	8001908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	2b04      	cmp	r3, #4
 8001738:	d122      	bne.n	8001780 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b04      	cmp	r3, #4
 8001746:	d11b      	bne.n	8001780 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f06f 0204 	mvn.w	r2, #4
 8001750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2202      	movs	r2, #2
 8001756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f8c4 	bl	80018f4 <HAL_TIM_IC_CaptureCallback>
 800176c:	e005      	b.n	800177a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 f8b6 	bl	80018e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f8c7 	bl	8001908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	2b08      	cmp	r3, #8
 800178c:	d122      	bne.n	80017d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	2b08      	cmp	r3, #8
 800179a:	d11b      	bne.n	80017d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f06f 0208 	mvn.w	r2, #8
 80017a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2204      	movs	r2, #4
 80017aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f89a 	bl	80018f4 <HAL_TIM_IC_CaptureCallback>
 80017c0:	e005      	b.n	80017ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f88c 	bl	80018e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f89d 	bl	8001908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	f003 0310 	and.w	r3, r3, #16
 80017de:	2b10      	cmp	r3, #16
 80017e0:	d122      	bne.n	8001828 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	f003 0310 	and.w	r3, r3, #16
 80017ec:	2b10      	cmp	r3, #16
 80017ee:	d11b      	bne.n	8001828 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f06f 0210 	mvn.w	r2, #16
 80017f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2208      	movs	r2, #8
 80017fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f870 	bl	80018f4 <HAL_TIM_IC_CaptureCallback>
 8001814:	e005      	b.n	8001822 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f862 	bl	80018e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 f873 	bl	8001908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b01      	cmp	r3, #1
 8001834:	d10e      	bne.n	8001854 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b01      	cmp	r3, #1
 8001842:	d107      	bne.n	8001854 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f06f 0201 	mvn.w	r2, #1
 800184c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7fe ff82 	bl	8000758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800185e:	2b80      	cmp	r3, #128	; 0x80
 8001860:	d10e      	bne.n	8001880 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800186c:	2b80      	cmp	r3, #128	; 0x80
 800186e:	d107      	bne.n	8001880 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f8e2 	bl	8001a44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800188a:	2b40      	cmp	r3, #64	; 0x40
 800188c:	d10e      	bne.n	80018ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001898:	2b40      	cmp	r3, #64	; 0x40
 800189a:	d107      	bne.n	80018ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f838 	bl	800191c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	f003 0320 	and.w	r3, r3, #32
 80018b6:	2b20      	cmp	r3, #32
 80018b8:	d10e      	bne.n	80018d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	f003 0320 	and.w	r3, r3, #32
 80018c4:	2b20      	cmp	r3, #32
 80018c6:	d107      	bne.n	80018d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f06f 0220 	mvn.w	r2, #32
 80018d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 f8ac 	bl	8001a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a34      	ldr	r2, [pc, #208]	; (8001a14 <TIM_Base_SetConfig+0xe4>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d00f      	beq.n	8001968 <TIM_Base_SetConfig+0x38>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800194e:	d00b      	beq.n	8001968 <TIM_Base_SetConfig+0x38>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a31      	ldr	r2, [pc, #196]	; (8001a18 <TIM_Base_SetConfig+0xe8>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d007      	beq.n	8001968 <TIM_Base_SetConfig+0x38>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a30      	ldr	r2, [pc, #192]	; (8001a1c <TIM_Base_SetConfig+0xec>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d003      	beq.n	8001968 <TIM_Base_SetConfig+0x38>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a2f      	ldr	r2, [pc, #188]	; (8001a20 <TIM_Base_SetConfig+0xf0>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d108      	bne.n	800197a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800196e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	4313      	orrs	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a25      	ldr	r2, [pc, #148]	; (8001a14 <TIM_Base_SetConfig+0xe4>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d01b      	beq.n	80019ba <TIM_Base_SetConfig+0x8a>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001988:	d017      	beq.n	80019ba <TIM_Base_SetConfig+0x8a>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a22      	ldr	r2, [pc, #136]	; (8001a18 <TIM_Base_SetConfig+0xe8>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d013      	beq.n	80019ba <TIM_Base_SetConfig+0x8a>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a21      	ldr	r2, [pc, #132]	; (8001a1c <TIM_Base_SetConfig+0xec>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d00f      	beq.n	80019ba <TIM_Base_SetConfig+0x8a>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a20      	ldr	r2, [pc, #128]	; (8001a20 <TIM_Base_SetConfig+0xf0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d00b      	beq.n	80019ba <TIM_Base_SetConfig+0x8a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a1f      	ldr	r2, [pc, #124]	; (8001a24 <TIM_Base_SetConfig+0xf4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d007      	beq.n	80019ba <TIM_Base_SetConfig+0x8a>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a1e      	ldr	r2, [pc, #120]	; (8001a28 <TIM_Base_SetConfig+0xf8>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d003      	beq.n	80019ba <TIM_Base_SetConfig+0x8a>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <TIM_Base_SetConfig+0xfc>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d108      	bne.n	80019cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a08      	ldr	r2, [pc, #32]	; (8001a14 <TIM_Base_SetConfig+0xe4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d103      	bne.n	8001a00 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	691a      	ldr	r2, [r3, #16]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	615a      	str	r2, [r3, #20]
}
 8001a06:	bf00      	nop
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40010000 	.word	0x40010000
 8001a18:	40000400 	.word	0x40000400
 8001a1c:	40000800 	.word	0x40000800
 8001a20:	40000c00 	.word	0x40000c00
 8001a24:	40014000 	.word	0x40014000
 8001a28:	40014400 	.word	0x40014400
 8001a2c:	40014800 	.word	0x40014800

08001a30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f103 0208 	add.w	r2, r3, #8
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a70:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f103 0208 	add.w	r2, r3, #8
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f103 0208 	add.w	r2, r3, #8
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b085      	sub	sp, #20
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac8:	d103      	bne.n	8001ad2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	e00c      	b.n	8001aec <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3308      	adds	r3, #8
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	e002      	b.n	8001ae0 <vListInsert+0x2e>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d2f6      	bcs.n	8001ada <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	601a      	str	r2, [r3, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6892      	ldr	r2, [r2, #8]
 8001b3a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6852      	ldr	r2, [r2, #4]
 8001b44:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d103      	bne.n	8001b58 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	1e5a      	subs	r2, r3, #1
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001b82:	2301      	movs	r3, #1
 8001b84:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10a      	bne.n	8001ba6 <xQueueGenericReset+0x2e>
        __asm volatile
 8001b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b94:	f383 8811 	msr	BASEPRI, r3
 8001b98:	f3bf 8f6f 	isb	sy
 8001b9c:	f3bf 8f4f 	dsb	sy
 8001ba0:	60fb      	str	r3, [r7, #12]
    }
 8001ba2:	bf00      	nop
 8001ba4:	e7fe      	b.n	8001ba4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d052      	beq.n	8001c52 <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d04e      	beq.n	8001c52 <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	fba3 2302 	umull	r2, r3, r3, r2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d000      	beq.n	8001bc8 <xQueueGenericReset+0x50>
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d141      	bne.n	8001c52 <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 8001bce:	f001 fe13 	bl	80037f8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bda:	6939      	ldr	r1, [r7, #16]
 8001bdc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001bde:	fb01 f303 	mul.w	r3, r1, r3
 8001be2:	441a      	add	r2, r3
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	2200      	movs	r2, #0
 8001bec:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	6939      	ldr	r1, [r7, #16]
 8001c02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c04:	fb01 f303 	mul.w	r3, r1, r3
 8001c08:	441a      	add	r2, r3
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	22ff      	movs	r2, #255	; 0xff
 8001c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	22ff      	movs	r2, #255	; 0xff
 8001c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d109      	bne.n	8001c38 <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00f      	beq.n	8001c4c <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	3310      	adds	r3, #16
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 ff85 	bl	8002b40 <xTaskRemoveFromEventList>
 8001c36:	e009      	b.n	8001c4c <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	3310      	adds	r3, #16
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff0b 	bl	8001a58 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	3324      	adds	r3, #36	; 0x24
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff ff06 	bl	8001a58 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001c4c:	f001 fe04 	bl	8003858 <vPortExitCritical>
 8001c50:	e001      	b.n	8001c56 <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10a      	bne.n	8001c72 <xQueueGenericReset+0xfa>
        __asm volatile
 8001c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c60:	f383 8811 	msr	BASEPRI, r3
 8001c64:	f3bf 8f6f 	isb	sy
 8001c68:	f3bf 8f4f 	dsb	sy
 8001c6c:	60bb      	str	r3, [r7, #8]
    }
 8001c6e:	bf00      	nop
 8001c70:	e7fe      	b.n	8001c70 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001c72:	697b      	ldr	r3, [r7, #20]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
 8001c80:	af02      	add	r7, sp, #8
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	4613      	mov	r3, r2
 8001c88:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d02e      	beq.n	8001cf2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001c94:	2100      	movs	r1, #0
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d000      	beq.n	8001ca4 <xQueueGenericCreate+0x28>
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d123      	bne.n	8001cf2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001cb2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001cb6:	d81c      	bhi.n	8001cf2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	fb02 f303 	mul.w	r3, r2, r3
 8001cc0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	3350      	adds	r3, #80	; 0x50
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f001 fefe 	bl	8003ac8 <pvPortMalloc>
 8001ccc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d01c      	beq.n	8001d0e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	3350      	adds	r3, #80	; 0x50
 8001cdc:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001cde:	79fa      	ldrb	r2, [r7, #7]
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f000 f814 	bl	8001d18 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001cf0:	e00d      	b.n	8001d0e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d10a      	bne.n	8001d0e <xQueueGenericCreate+0x92>
        __asm volatile
 8001cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cfc:	f383 8811 	msr	BASEPRI, r3
 8001d00:	f3bf 8f6f 	isb	sy
 8001d04:	f3bf 8f4f 	dsb	sy
 8001d08:	613b      	str	r3, [r7, #16]
    }
 8001d0a:	bf00      	nop
 8001d0c:	e7fe      	b.n	8001d0c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001d0e:	69fb      	ldr	r3, [r7, #28]
    }
 8001d10:	4618      	mov	r0, r3
 8001d12:	3720      	adds	r7, #32
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
 8001d24:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d103      	bne.n	8001d34 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	e002      	b.n	8001d3a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001d46:	2101      	movs	r1, #1
 8001d48:	69b8      	ldr	r0, [r7, #24]
 8001d4a:	f7ff ff15 	bl	8001b78 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	78fa      	ldrb	r2, [r7, #3]
 8001d52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8001d56:	78fb      	ldrb	r3, [r7, #3]
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	68f9      	ldr	r1, [r7, #12]
 8001d5c:	2073      	movs	r0, #115	; 0x73
 8001d5e:	f003 f83b 	bl	8004dd8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b08f      	sub	sp, #60	; 0x3c
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10a      	bne.n	8001d9c <xQueueReceive+0x30>
        __asm volatile
 8001d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d8a:	f383 8811 	msr	BASEPRI, r3
 8001d8e:	f3bf 8f6f 	isb	sy
 8001d92:	f3bf 8f4f 	dsb	sy
 8001d96:	623b      	str	r3, [r7, #32]
    }
 8001d98:	bf00      	nop
 8001d9a:	e7fe      	b.n	8001d9a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d103      	bne.n	8001daa <xQueueReceive+0x3e>
 8001da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <xQueueReceive+0x42>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <xQueueReceive+0x44>
 8001dae:	2300      	movs	r3, #0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10a      	bne.n	8001dca <xQueueReceive+0x5e>
        __asm volatile
 8001db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db8:	f383 8811 	msr	BASEPRI, r3
 8001dbc:	f3bf 8f6f 	isb	sy
 8001dc0:	f3bf 8f4f 	dsb	sy
 8001dc4:	61fb      	str	r3, [r7, #28]
    }
 8001dc6:	bf00      	nop
 8001dc8:	e7fe      	b.n	8001dc8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001dca:	f001 f8c5 	bl	8002f58 <xTaskGetSchedulerState>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d102      	bne.n	8001dda <xQueueReceive+0x6e>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <xQueueReceive+0x72>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <xQueueReceive+0x74>
 8001dde:	2300      	movs	r3, #0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10a      	bne.n	8001dfa <xQueueReceive+0x8e>
        __asm volatile
 8001de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de8:	f383 8811 	msr	BASEPRI, r3
 8001dec:	f3bf 8f6f 	isb	sy
 8001df0:	f3bf 8f4f 	dsb	sy
 8001df4:	61bb      	str	r3, [r7, #24]
    }
 8001df6:	bf00      	nop
 8001df8:	e7fe      	b.n	8001df8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001dfa:	f001 fcfd 	bl	80037f8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d024      	beq.n	8001e54 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001e0a:	68b9      	ldr	r1, [r7, #8]
 8001e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e0e:	f000 f8b3 	bl	8001f78 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8001e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e14:	4618      	mov	r0, r3
 8001e16:	f003 fc91 	bl	800573c <SEGGER_SYSVIEW_ShrinkId>
 8001e1a:	4604      	mov	r4, r0
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f003 fc8d 	bl	800573c <SEGGER_SYSVIEW_ShrinkId>
 8001e22:	4602      	mov	r2, r0
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2101      	movs	r1, #1
 8001e28:	9100      	str	r1, [sp, #0]
 8001e2a:	4621      	mov	r1, r4
 8001e2c:	205c      	movs	r0, #92	; 0x5c
 8001e2e:	f003 f849 	bl	8004ec4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	1e5a      	subs	r2, r3, #1
 8001e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e38:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d004      	beq.n	8001e4c <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e44:	3310      	adds	r3, #16
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 fe7a 	bl	8002b40 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001e4c:	f001 fd04 	bl	8003858 <vPortExitCritical>
                return pdPASS;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e08a      	b.n	8001f6a <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d113      	bne.n	8001e82 <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001e5a:	f001 fcfd 	bl	8003858 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e60:	4618      	mov	r0, r3
 8001e62:	f003 fc6b 	bl	800573c <SEGGER_SYSVIEW_ShrinkId>
 8001e66:	4604      	mov	r4, r0
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f003 fc67 	bl	800573c <SEGGER_SYSVIEW_ShrinkId>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2101      	movs	r1, #1
 8001e74:	9100      	str	r1, [sp, #0]
 8001e76:	4621      	mov	r1, r4
 8001e78:	205c      	movs	r0, #92	; 0x5c
 8001e7a:	f003 f823 	bl	8004ec4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e073      	b.n	8001f6a <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d106      	bne.n	8001e96 <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001e88:	f107 0310 	add.w	r3, r7, #16
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 ff2f 	bl	8002cf0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001e92:	2301      	movs	r3, #1
 8001e94:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001e96:	f001 fcdf 	bl	8003858 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001e9a:	f000 fb61 	bl	8002560 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001e9e:	f001 fcab 	bl	80037f8 <vPortEnterCritical>
 8001ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ea8:	b25b      	sxtb	r3, r3
 8001eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eae:	d103      	bne.n	8001eb8 <xQueueReceive+0x14c>
 8001eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ebe:	b25b      	sxtb	r3, r3
 8001ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec4:	d103      	bne.n	8001ece <xQueueReceive+0x162>
 8001ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ece:	f001 fcc3 	bl	8003858 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001ed2:	1d3a      	adds	r2, r7, #4
 8001ed4:	f107 0310 	add.w	r3, r7, #16
 8001ed8:	4611      	mov	r1, r2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 ff1e 	bl	8002d1c <xTaskCheckForTimeOut>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d124      	bne.n	8001f30 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001ee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ee8:	f000 f8be 	bl	8002068 <prvIsQueueEmpty>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d018      	beq.n	8001f24 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef4:	3324      	adds	r3, #36	; 0x24
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	4611      	mov	r1, r2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fdb4 	bl	8002a68 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f02:	f000 f85f 	bl	8001fc4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001f06:	f000 fb39 	bl	800257c <xTaskResumeAll>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f47f af74 	bne.w	8001dfa <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001f12:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <xQueueReceive+0x208>)
 8001f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	f3bf 8f4f 	dsb	sy
 8001f1e:	f3bf 8f6f 	isb	sy
 8001f22:	e76a      	b.n	8001dfa <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001f24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f26:	f000 f84d 	bl	8001fc4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001f2a:	f000 fb27 	bl	800257c <xTaskResumeAll>
 8001f2e:	e764      	b.n	8001dfa <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001f30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f32:	f000 f847 	bl	8001fc4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001f36:	f000 fb21 	bl	800257c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f3c:	f000 f894 	bl	8002068 <prvIsQueueEmpty>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f43f af59 	beq.w	8001dfa <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f003 fbf6 	bl	800573c <SEGGER_SYSVIEW_ShrinkId>
 8001f50:	4604      	mov	r4, r0
 8001f52:	2000      	movs	r0, #0
 8001f54:	f003 fbf2 	bl	800573c <SEGGER_SYSVIEW_ShrinkId>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	9100      	str	r1, [sp, #0]
 8001f60:	4621      	mov	r1, r4
 8001f62:	205c      	movs	r0, #92	; 0x5c
 8001f64:	f002 ffae 	bl	8004ec4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8001f68:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3734      	adds	r7, #52	; 0x34
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd90      	pop	{r4, r7, pc}
 8001f72:	bf00      	nop
 8001f74:	e000ed04 	.word	0xe000ed04

08001f78 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d018      	beq.n	8001fbc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	441a      	add	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d303      	bcc.n	8001fac <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68d9      	ldr	r1, [r3, #12]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	6838      	ldr	r0, [r7, #0]
 8001fb8:	f003 fd58 	bl	8005a6c <memcpy>
    }
}
 8001fbc:	bf00      	nop
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001fcc:	f001 fc14 	bl	80037f8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fd6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001fd8:	e011      	b.n	8001ffe <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d012      	beq.n	8002008 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3324      	adds	r3, #36	; 0x24
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 fdaa 	bl	8002b40 <xTaskRemoveFromEventList>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001ff2:	f000 fef9 	bl	8002de8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002002:	2b00      	cmp	r3, #0
 8002004:	dce9      	bgt.n	8001fda <prvUnlockQueue+0x16>
 8002006:	e000      	b.n	800200a <prvUnlockQueue+0x46>
                    break;
 8002008:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	22ff      	movs	r2, #255	; 0xff
 800200e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002012:	f001 fc21 	bl	8003858 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002016:	f001 fbef 	bl	80037f8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002020:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002022:	e011      	b.n	8002048 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d012      	beq.n	8002052 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3310      	adds	r3, #16
 8002030:	4618      	mov	r0, r3
 8002032:	f000 fd85 	bl	8002b40 <xTaskRemoveFromEventList>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800203c:	f000 fed4 	bl	8002de8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002040:	7bbb      	ldrb	r3, [r7, #14]
 8002042:	3b01      	subs	r3, #1
 8002044:	b2db      	uxtb	r3, r3
 8002046:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002048:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800204c:	2b00      	cmp	r3, #0
 800204e:	dce9      	bgt.n	8002024 <prvUnlockQueue+0x60>
 8002050:	e000      	b.n	8002054 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002052:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	22ff      	movs	r2, #255	; 0xff
 8002058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800205c:	f001 fbfc 	bl	8003858 <vPortExitCritical>
}
 8002060:	bf00      	nop
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002070:	f001 fbc2 	bl	80037f8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002078:	2b00      	cmp	r3, #0
 800207a:	d102      	bne.n	8002082 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800207c:	2301      	movs	r3, #1
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	e001      	b.n	8002086 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002086:	f001 fbe7 	bl	8003858 <vPortExitCritical>

    return xReturn;
 800208a:	68fb      	ldr	r3, [r7, #12]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10a      	bne.n	80020be <vQueueAddToRegistry+0x2a>
        __asm volatile
 80020a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ac:	f383 8811 	msr	BASEPRI, r3
 80020b0:	f3bf 8f6f 	isb	sy
 80020b4:	f3bf 8f4f 	dsb	sy
 80020b8:	60fb      	str	r3, [r7, #12]
    }
 80020ba:	bf00      	nop
 80020bc:	e7fe      	b.n	80020bc <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d024      	beq.n	800210e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	e01e      	b.n	8002108 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80020ca:	4a1c      	ldr	r2, [pc, #112]	; (800213c <vQueueAddToRegistry+0xa8>)
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4413      	add	r3, r2
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d105      	bne.n	80020e6 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4a17      	ldr	r2, [pc, #92]	; (800213c <vQueueAddToRegistry+0xa8>)
 80020e0:	4413      	add	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
                    break;
 80020e4:	e013      	b.n	800210e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10a      	bne.n	8002102 <vQueueAddToRegistry+0x6e>
 80020ec:	4a13      	ldr	r2, [pc, #76]	; (800213c <vQueueAddToRegistry+0xa8>)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d104      	bne.n	8002102 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4a0f      	ldr	r2, [pc, #60]	; (800213c <vQueueAddToRegistry+0xa8>)
 80020fe:	4413      	add	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	3301      	adds	r3, #1
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	2b07      	cmp	r3, #7
 800210c:	d9dd      	bls.n	80020ca <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00f      	beq.n	8002134 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4618      	mov	r0, r3
 8002124:	f003 fb0a 	bl	800573c <SEGGER_SYSVIEW_ShrinkId>
 8002128:	4601      	mov	r1, r0
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	2071      	movs	r0, #113	; 0x71
 8002130:	f002 fdf8 	bl	8004d24 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002134:	bf00      	nop
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	200000ec 	.word	0x200000ec

08002140 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002150:	f001 fb52 	bl	80037f8 <vPortEnterCritical>
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800215a:	b25b      	sxtb	r3, r3
 800215c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002160:	d103      	bne.n	800216a <vQueueWaitForMessageRestricted+0x2a>
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002170:	b25b      	sxtb	r3, r3
 8002172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002176:	d103      	bne.n	8002180 <vQueueWaitForMessageRestricted+0x40>
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002180:	f001 fb6a 	bl	8003858 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002188:	2b00      	cmp	r3, #0
 800218a:	d106      	bne.n	800219a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	3324      	adds	r3, #36	; 0x24
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	68b9      	ldr	r1, [r7, #8]
 8002194:	4618      	mov	r0, r3
 8002196:	f000 fc8b 	bl	8002ab0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800219a:	6978      	ldr	r0, [r7, #20]
 800219c:	f7ff ff12 	bl	8001fc4 <prvUnlockQueue>
    }
 80021a0:	bf00      	nop
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08c      	sub	sp, #48	; 0x30
 80021ac:	af04      	add	r7, sp, #16
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	603b      	str	r3, [r7, #0]
 80021b4:	4613      	mov	r3, r2
 80021b6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80021b8:	88fb      	ldrh	r3, [r7, #6]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4618      	mov	r0, r3
 80021be:	f001 fc83 	bl	8003ac8 <pvPortMalloc>
 80021c2:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d013      	beq.n	80021f2 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80021ca:	2058      	movs	r0, #88	; 0x58
 80021cc:	f001 fc7c 	bl	8003ac8 <pvPortMalloc>
 80021d0:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d008      	beq.n	80021ea <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80021d8:	2258      	movs	r2, #88	; 0x58
 80021da:	2100      	movs	r1, #0
 80021dc:	69f8      	ldr	r0, [r7, #28]
 80021de:	f003 fc53 	bl	8005a88 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	631a      	str	r2, [r3, #48]	; 0x30
 80021e8:	e005      	b.n	80021f6 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80021ea:	6978      	ldr	r0, [r7, #20]
 80021ec:	f001 fd26 	bl	8003c3c <vPortFree>
 80021f0:	e001      	b.n	80021f6 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d013      	beq.n	8002224 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80021fc:	88fa      	ldrh	r2, [r7, #6]
 80021fe:	2300      	movs	r3, #0
 8002200:	9303      	str	r3, [sp, #12]
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	9302      	str	r3, [sp, #8]
 8002206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 f80e 	bl	8002234 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002218:	69f8      	ldr	r0, [r7, #28]
 800221a:	f000 f899 	bl	8002350 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800221e:	2301      	movs	r3, #1
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	e002      	b.n	800222a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002224:	f04f 33ff 	mov.w	r3, #4294967295
 8002228:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800222a:	69bb      	ldr	r3, [r7, #24]
    }
 800222c:	4618      	mov	r0, r3
 800222e:	3720      	adds	r7, #32
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
 8002240:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002244:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	461a      	mov	r2, r3
 800224c:	21a5      	movs	r1, #165	; 0xa5
 800224e:	f003 fc1b 	bl	8005a88 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800225c:	3b01      	subs	r3, #1
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	f023 0307 	bic.w	r3, r3, #7
 800226a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00a      	beq.n	800228c <prvInitialiseNewTask+0x58>
        __asm volatile
 8002276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800227a:	f383 8811 	msr	BASEPRI, r3
 800227e:	f3bf 8f6f 	isb	sy
 8002282:	f3bf 8f4f 	dsb	sy
 8002286:	617b      	str	r3, [r7, #20]
    }
 8002288:	bf00      	nop
 800228a:	e7fe      	b.n	800228a <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d01e      	beq.n	80022d0 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
 8002296:	e012      	b.n	80022be <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	4413      	add	r3, r2
 800229e:	7819      	ldrb	r1, [r3, #0]
 80022a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	4413      	add	r3, r2
 80022a6:	3334      	adds	r3, #52	; 0x34
 80022a8:	460a      	mov	r2, r1
 80022aa:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	4413      	add	r3, r2
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d006      	beq.n	80022c6 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	3301      	adds	r3, #1
 80022bc:	61fb      	str	r3, [r7, #28]
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	2b09      	cmp	r3, #9
 80022c2:	d9e9      	bls.n	8002298 <prvInitialiseNewTask+0x64>
 80022c4:	e000      	b.n	80022c8 <prvInitialiseNewTask+0x94>
            {
                break;
 80022c6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80022d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d90a      	bls.n	80022ec <prvInitialiseNewTask+0xb8>
        __asm volatile
 80022d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022da:	f383 8811 	msr	BASEPRI, r3
 80022de:	f3bf 8f6f 	isb	sy
 80022e2:	f3bf 8f4f 	dsb	sy
 80022e6:	613b      	str	r3, [r7, #16]
    }
 80022e8:	bf00      	nop
 80022ea:	e7fe      	b.n	80022ea <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d901      	bls.n	80022f6 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022f2:	2304      	movs	r3, #4
 80022f4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80022f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022fa:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80022fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002300:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002304:	3304      	adds	r3, #4
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fbc6 	bl	8001a98 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800230c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230e:	3318      	adds	r3, #24
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fbc1 	bl	8001a98 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800231a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800231c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231e:	f1c3 0205 	rsb	r2, r3, #5
 8002322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002324:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800232a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	68f9      	ldr	r1, [r7, #12]
 8002330:	69b8      	ldr	r0, [r7, #24]
 8002332:	f001 f933 	bl	800359c <pxPortInitialiseStack>
 8002336:	4602      	mov	r2, r0
 8002338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800233c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233e:	2b00      	cmp	r3, #0
 8002340:	d002      	beq.n	8002348 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002346:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002348:	bf00      	nop
 800234a:	3720      	adds	r7, #32
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002350:	b5b0      	push	{r4, r5, r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af02      	add	r7, sp, #8
 8002356:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002358:	f001 fa4e 	bl	80037f8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800235c:	4b49      	ldr	r3, [pc, #292]	; (8002484 <prvAddNewTaskToReadyList+0x134>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	3301      	adds	r3, #1
 8002362:	4a48      	ldr	r2, [pc, #288]	; (8002484 <prvAddNewTaskToReadyList+0x134>)
 8002364:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002366:	4b48      	ldr	r3, [pc, #288]	; (8002488 <prvAddNewTaskToReadyList+0x138>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d109      	bne.n	8002382 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800236e:	4a46      	ldr	r2, [pc, #280]	; (8002488 <prvAddNewTaskToReadyList+0x138>)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002374:	4b43      	ldr	r3, [pc, #268]	; (8002484 <prvAddNewTaskToReadyList+0x134>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d110      	bne.n	800239e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800237c:	f000 fd52 	bl	8002e24 <prvInitialiseTaskLists>
 8002380:	e00d      	b.n	800239e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002382:	4b42      	ldr	r3, [pc, #264]	; (800248c <prvAddNewTaskToReadyList+0x13c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d109      	bne.n	800239e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800238a:	4b3f      	ldr	r3, [pc, #252]	; (8002488 <prvAddNewTaskToReadyList+0x138>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	429a      	cmp	r2, r3
 8002396:	d802      	bhi.n	800239e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002398:	4a3b      	ldr	r2, [pc, #236]	; (8002488 <prvAddNewTaskToReadyList+0x138>)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800239e:	4b3c      	ldr	r3, [pc, #240]	; (8002490 <prvAddNewTaskToReadyList+0x140>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	3301      	adds	r3, #1
 80023a4:	4a3a      	ldr	r2, [pc, #232]	; (8002490 <prvAddNewTaskToReadyList+0x140>)
 80023a6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80023a8:	4b39      	ldr	r3, [pc, #228]	; (8002490 <prvAddNewTaskToReadyList+0x140>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d016      	beq.n	80023e4 <prvAddNewTaskToReadyList+0x94>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f003 f8f9 	bl	80055b0 <SEGGER_SYSVIEW_OnTaskCreate>
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	461d      	mov	r5, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	461c      	mov	r4, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	1ae3      	subs	r3, r4, r3
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	462b      	mov	r3, r5
 80023e0:	f001 fdee 	bl	8003fc0 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f003 f966 	bl	80056b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f0:	2201      	movs	r2, #1
 80023f2:	409a      	lsls	r2, r3
 80023f4:	4b27      	ldr	r3, [pc, #156]	; (8002494 <prvAddNewTaskToReadyList+0x144>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	4a26      	ldr	r2, [pc, #152]	; (8002494 <prvAddNewTaskToReadyList+0x144>)
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002402:	4925      	ldr	r1, [pc, #148]	; (8002498 <prvAddNewTaskToReadyList+0x148>)
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	3304      	adds	r3, #4
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	3204      	adds	r2, #4
 800242a:	605a      	str	r2, [r3, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	1d1a      	adds	r2, r3, #4
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4a15      	ldr	r2, [pc, #84]	; (8002498 <prvAddNewTaskToReadyList+0x148>)
 8002442:	441a      	add	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	615a      	str	r2, [r3, #20]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800244c:	4912      	ldr	r1, [pc, #72]	; (8002498 <prvAddNewTaskToReadyList+0x148>)
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	1c59      	adds	r1, r3, #1
 800245c:	480e      	ldr	r0, [pc, #56]	; (8002498 <prvAddNewTaskToReadyList+0x148>)
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4403      	add	r3, r0
 8002468:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800246a:	f001 f9f5 	bl	8003858 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800246e:	4b07      	ldr	r3, [pc, #28]	; (800248c <prvAddNewTaskToReadyList+0x13c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002476:	4b04      	ldr	r3, [pc, #16]	; (8002488 <prvAddNewTaskToReadyList+0x138>)
 8002478:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bdb0      	pop	{r4, r5, r7, pc}
 8002482:	bf00      	nop
 8002484:	20000204 	.word	0x20000204
 8002488:	2000012c 	.word	0x2000012c
 800248c:	20000210 	.word	0x20000210
 8002490:	20000220 	.word	0x20000220
 8002494:	2000020c 	.word	0x2000020c
 8002498:	20000130 	.word	0x20000130

0800249c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80024a2:	4b27      	ldr	r3, [pc, #156]	; (8002540 <vTaskStartScheduler+0xa4>)
 80024a4:	9301      	str	r3, [sp, #4]
 80024a6:	2300      	movs	r3, #0
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	2300      	movs	r3, #0
 80024ac:	2282      	movs	r2, #130	; 0x82
 80024ae:	4925      	ldr	r1, [pc, #148]	; (8002544 <vTaskStartScheduler+0xa8>)
 80024b0:	4825      	ldr	r0, [pc, #148]	; (8002548 <vTaskStartScheduler+0xac>)
 80024b2:	f7ff fe79 	bl	80021a8 <xTaskCreate>
 80024b6:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d102      	bne.n	80024c4 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80024be:	f000 fde9 	bl	8003094 <xTimerCreateTimerTask>
 80024c2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d124      	bne.n	8002514 <vTaskStartScheduler+0x78>
        __asm volatile
 80024ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ce:	f383 8811 	msr	BASEPRI, r3
 80024d2:	f3bf 8f6f 	isb	sy
 80024d6:	f3bf 8f4f 	dsb	sy
 80024da:	60bb      	str	r3, [r7, #8]
    }
 80024dc:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80024de:	4b1b      	ldr	r3, [pc, #108]	; (800254c <vTaskStartScheduler+0xb0>)
 80024e0:	f04f 32ff 	mov.w	r2, #4294967295
 80024e4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80024e6:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <vTaskStartScheduler+0xb4>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <vTaskStartScheduler+0xb8>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80024f2:	4b19      	ldr	r3, [pc, #100]	; (8002558 <vTaskStartScheduler+0xbc>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	4b12      	ldr	r3, [pc, #72]	; (8002540 <vTaskStartScheduler+0xa4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d102      	bne.n	8002504 <vTaskStartScheduler+0x68>
 80024fe:	f003 f83b 	bl	8005578 <SEGGER_SYSVIEW_OnIdle>
 8002502:	e004      	b.n	800250e <vTaskStartScheduler+0x72>
 8002504:	4b14      	ldr	r3, [pc, #80]	; (8002558 <vTaskStartScheduler+0xbc>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f003 f893 	bl	8005634 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800250e:	f001 f8d1 	bl	80036b4 <xPortStartScheduler>
 8002512:	e00e      	b.n	8002532 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251a:	d10a      	bne.n	8002532 <vTaskStartScheduler+0x96>
        __asm volatile
 800251c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002520:	f383 8811 	msr	BASEPRI, r3
 8002524:	f3bf 8f6f 	isb	sy
 8002528:	f3bf 8f4f 	dsb	sy
 800252c:	607b      	str	r3, [r7, #4]
    }
 800252e:	bf00      	nop
 8002530:	e7fe      	b.n	8002530 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <vTaskStartScheduler+0xc0>)
 8002534:	681b      	ldr	r3, [r3, #0]
}
 8002536:	bf00      	nop
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000228 	.word	0x20000228
 8002544:	080064e4 	.word	0x080064e4
 8002548:	08002e01 	.word	0x08002e01
 800254c:	20000224 	.word	0x20000224
 8002550:	20000210 	.word	0x20000210
 8002554:	20000208 	.word	0x20000208
 8002558:	2000012c 	.word	0x2000012c
 800255c:	2000000c 	.word	0x2000000c

08002560 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002564:	4b04      	ldr	r3, [pc, #16]	; (8002578 <vTaskSuspendAll+0x18>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	3301      	adds	r3, #1
 800256a:	4a03      	ldr	r2, [pc, #12]	; (8002578 <vTaskSuspendAll+0x18>)
 800256c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800256e:	bf00      	nop
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	2000022c 	.word	0x2000022c

0800257c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800258a:	4b6d      	ldr	r3, [pc, #436]	; (8002740 <xTaskResumeAll+0x1c4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10a      	bne.n	80025a8 <xTaskResumeAll+0x2c>
        __asm volatile
 8002592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002596:	f383 8811 	msr	BASEPRI, r3
 800259a:	f3bf 8f6f 	isb	sy
 800259e:	f3bf 8f4f 	dsb	sy
 80025a2:	607b      	str	r3, [r7, #4]
    }
 80025a4:	bf00      	nop
 80025a6:	e7fe      	b.n	80025a6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80025a8:	f001 f926 	bl	80037f8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80025ac:	4b64      	ldr	r3, [pc, #400]	; (8002740 <xTaskResumeAll+0x1c4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	3b01      	subs	r3, #1
 80025b2:	4a63      	ldr	r2, [pc, #396]	; (8002740 <xTaskResumeAll+0x1c4>)
 80025b4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025b6:	4b62      	ldr	r3, [pc, #392]	; (8002740 <xTaskResumeAll+0x1c4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f040 80b8 	bne.w	8002730 <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80025c0:	4b60      	ldr	r3, [pc, #384]	; (8002744 <xTaskResumeAll+0x1c8>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 80b3 	beq.w	8002730 <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025ca:	e08e      	b.n	80026ea <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025cc:	4b5e      	ldr	r3, [pc, #376]	; (8002748 <xTaskResumeAll+0x1cc>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	6a12      	ldr	r2, [r2, #32]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	69fa      	ldr	r2, [r7, #28]
 80025ea:	69d2      	ldr	r2, [r2, #28]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3318      	adds	r3, #24
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d103      	bne.n	8002602 <xTaskResumeAll+0x86>
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	6a1a      	ldr	r2, [r3, #32]
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	2200      	movs	r2, #0
 8002606:	629a      	str	r2, [r3, #40]	; 0x28
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	1e5a      	subs	r2, r3, #1
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	69fa      	ldr	r2, [r7, #28]
 800261e:	68d2      	ldr	r2, [r2, #12]
 8002620:	609a      	str	r2, [r3, #8]
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	69fa      	ldr	r2, [r7, #28]
 8002628:	6892      	ldr	r2, [r2, #8]
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	3304      	adds	r3, #4
 8002634:	429a      	cmp	r2, r3
 8002636:	d103      	bne.n	8002640 <xTaskResumeAll+0xc4>
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	68da      	ldr	r2, [r3, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	605a      	str	r2, [r3, #4]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	2200      	movs	r2, #0
 8002644:	615a      	str	r2, [r3, #20]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	1e5a      	subs	r2, r3, #1
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	4618      	mov	r0, r3
 8002654:	f003 f830 	bl	80056b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	2201      	movs	r2, #1
 800265e:	409a      	lsls	r2, r3
 8002660:	4b3a      	ldr	r3, [pc, #232]	; (800274c <xTaskResumeAll+0x1d0>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4313      	orrs	r3, r2
 8002666:	4a39      	ldr	r2, [pc, #228]	; (800274c <xTaskResumeAll+0x1d0>)
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800266e:	4938      	ldr	r1, [pc, #224]	; (8002750 <xTaskResumeAll+0x1d4>)
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	3304      	adds	r3, #4
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	609a      	str	r2, [r3, #8]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	69fa      	ldr	r2, [r7, #28]
 8002694:	3204      	adds	r2, #4
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	1d1a      	adds	r2, r3, #4
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4a28      	ldr	r2, [pc, #160]	; (8002750 <xTaskResumeAll+0x1d4>)
 80026ae:	441a      	add	r2, r3
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	615a      	str	r2, [r3, #20]
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b8:	4925      	ldr	r1, [pc, #148]	; (8002750 <xTaskResumeAll+0x1d4>)
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	1c59      	adds	r1, r3, #1
 80026c8:	4821      	ldr	r0, [pc, #132]	; (8002750 <xTaskResumeAll+0x1d4>)
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4403      	add	r3, r0
 80026d4:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026da:	4b1e      	ldr	r3, [pc, #120]	; (8002754 <xTaskResumeAll+0x1d8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d302      	bcc.n	80026ea <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80026e4:	4b1c      	ldr	r3, [pc, #112]	; (8002758 <xTaskResumeAll+0x1dc>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026ea:	4b17      	ldr	r3, [pc, #92]	; (8002748 <xTaskResumeAll+0x1cc>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f47f af6c 	bne.w	80025cc <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80026fa:	f000 fc11 	bl	8002f20 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80026fe:	4b17      	ldr	r3, [pc, #92]	; (800275c <xTaskResumeAll+0x1e0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d010      	beq.n	800272c <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800270a:	f000 f84b 	bl	80027a4 <xTaskIncrementTick>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002714:	4b10      	ldr	r3, [pc, #64]	; (8002758 <xTaskResumeAll+0x1dc>)
 8002716:	2201      	movs	r2, #1
 8002718:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	3b01      	subs	r3, #1
 800271e:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f1      	bne.n	800270a <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002726:	4b0d      	ldr	r3, [pc, #52]	; (800275c <xTaskResumeAll+0x1e0>)
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800272c:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <xTaskResumeAll+0x1dc>)
 800272e:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002730:	f001 f892 	bl	8003858 <vPortExitCritical>

    return xAlreadyYielded;
 8002734:	697b      	ldr	r3, [r7, #20]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3720      	adds	r7, #32
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	2000022c 	.word	0x2000022c
 8002744:	20000204 	.word	0x20000204
 8002748:	200001c4 	.word	0x200001c4
 800274c:	2000020c 	.word	0x2000020c
 8002750:	20000130 	.word	0x20000130
 8002754:	2000012c 	.word	0x2000012c
 8002758:	20000218 	.word	0x20000218
 800275c:	20000214 	.word	0x20000214

08002760 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002766:	4b05      	ldr	r3, [pc, #20]	; (800277c <xTaskGetTickCount+0x1c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800276c:	687b      	ldr	r3, [r7, #4]
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	20000208 	.word	0x20000208

08002780 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002786:	f001 f95f 	bl	8003a48 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800278a:	2300      	movs	r3, #0
 800278c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800278e:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <xTaskGetTickCountFromISR+0x20>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002794:	683b      	ldr	r3, [r7, #0]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000208 	.word	0x20000208

080027a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	; 0x28
 80027a8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027ae:	4b70      	ldr	r3, [pc, #448]	; (8002970 <xTaskIncrementTick+0x1cc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f040 80d1 	bne.w	800295a <xTaskIncrementTick+0x1b6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80027b8:	4b6e      	ldr	r3, [pc, #440]	; (8002974 <xTaskIncrementTick+0x1d0>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	3301      	adds	r3, #1
 80027be:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80027c0:	4a6c      	ldr	r2, [pc, #432]	; (8002974 <xTaskIncrementTick+0x1d0>)
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d120      	bne.n	800280e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80027cc:	4b6a      	ldr	r3, [pc, #424]	; (8002978 <xTaskIncrementTick+0x1d4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00a      	beq.n	80027ec <xTaskIncrementTick+0x48>
        __asm volatile
 80027d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027da:	f383 8811 	msr	BASEPRI, r3
 80027de:	f3bf 8f6f 	isb	sy
 80027e2:	f3bf 8f4f 	dsb	sy
 80027e6:	607b      	str	r3, [r7, #4]
    }
 80027e8:	bf00      	nop
 80027ea:	e7fe      	b.n	80027ea <xTaskIncrementTick+0x46>
 80027ec:	4b62      	ldr	r3, [pc, #392]	; (8002978 <xTaskIncrementTick+0x1d4>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	61fb      	str	r3, [r7, #28]
 80027f2:	4b62      	ldr	r3, [pc, #392]	; (800297c <xTaskIncrementTick+0x1d8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a60      	ldr	r2, [pc, #384]	; (8002978 <xTaskIncrementTick+0x1d4>)
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	4a60      	ldr	r2, [pc, #384]	; (800297c <xTaskIncrementTick+0x1d8>)
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	4b5f      	ldr	r3, [pc, #380]	; (8002980 <xTaskIncrementTick+0x1dc>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	3301      	adds	r3, #1
 8002806:	4a5e      	ldr	r2, [pc, #376]	; (8002980 <xTaskIncrementTick+0x1dc>)
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	f000 fb89 	bl	8002f20 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800280e:	4b5d      	ldr	r3, [pc, #372]	; (8002984 <xTaskIncrementTick+0x1e0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6a3a      	ldr	r2, [r7, #32]
 8002814:	429a      	cmp	r2, r3
 8002816:	f0c0 80a5 	bcc.w	8002964 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800281a:	4b57      	ldr	r3, [pc, #348]	; (8002978 <xTaskIncrementTick+0x1d4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d104      	bne.n	800282e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002824:	4b57      	ldr	r3, [pc, #348]	; (8002984 <xTaskIncrementTick+0x1e0>)
 8002826:	f04f 32ff 	mov.w	r2, #4294967295
 800282a:	601a      	str	r2, [r3, #0]
                    break;
 800282c:	e09a      	b.n	8002964 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800282e:	4b52      	ldr	r3, [pc, #328]	; (8002978 <xTaskIncrementTick+0x1d4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800283e:	6a3a      	ldr	r2, [r7, #32]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	429a      	cmp	r2, r3
 8002844:	d203      	bcs.n	800284e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002846:	4a4f      	ldr	r2, [pc, #316]	; (8002984 <xTaskIncrementTick+0x1e0>)
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800284c:	e08a      	b.n	8002964 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	68d2      	ldr	r2, [r2, #12]
 800285c:	609a      	str	r2, [r3, #8]
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	6892      	ldr	r2, [r2, #8]
 8002866:	605a      	str	r2, [r3, #4]
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	3304      	adds	r3, #4
 8002870:	429a      	cmp	r2, r3
 8002872:	d103      	bne.n	800287c <xTaskIncrementTick+0xd8>
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	605a      	str	r2, [r3, #4]
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	2200      	movs	r2, #0
 8002880:	615a      	str	r2, [r3, #20]
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	1e5a      	subs	r2, r3, #1
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	2b00      	cmp	r3, #0
 8002892:	d01e      	beq.n	80028d2 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	6a12      	ldr	r2, [r2, #32]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	69d2      	ldr	r2, [r2, #28]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	3318      	adds	r3, #24
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d103      	bne.n	80028c2 <xTaskIncrementTick+0x11e>
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	6a1a      	ldr	r2, [r3, #32]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	2200      	movs	r2, #0
 80028c6:	629a      	str	r2, [r3, #40]	; 0x28
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	1e5a      	subs	r2, r3, #1
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f002 feef 	bl	80056b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	2201      	movs	r2, #1
 80028e0:	409a      	lsls	r2, r3
 80028e2:	4b29      	ldr	r3, [pc, #164]	; (8002988 <xTaskIncrementTick+0x1e4>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	4a27      	ldr	r2, [pc, #156]	; (8002988 <xTaskIncrementTick+0x1e4>)
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f0:	4926      	ldr	r1, [pc, #152]	; (800298c <xTaskIncrementTick+0x1e8>)
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	440b      	add	r3, r1
 80028fc:	3304      	adds	r3, #4
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	60da      	str	r2, [r3, #12]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	3204      	adds	r2, #4
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	1d1a      	adds	r2, r3, #4
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	609a      	str	r2, [r3, #8]
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4a17      	ldr	r2, [pc, #92]	; (800298c <xTaskIncrementTick+0x1e8>)
 8002930:	441a      	add	r2, r3
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	615a      	str	r2, [r3, #20]
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293a:	4914      	ldr	r1, [pc, #80]	; (800298c <xTaskIncrementTick+0x1e8>)
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	1c59      	adds	r1, r3, #1
 800294a:	4810      	ldr	r0, [pc, #64]	; (800298c <xTaskIncrementTick+0x1e8>)
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4403      	add	r3, r0
 8002956:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002958:	e75f      	b.n	800281a <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800295a:	4b0d      	ldr	r3, [pc, #52]	; (8002990 <xTaskIncrementTick+0x1ec>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3301      	adds	r3, #1
 8002960:	4a0b      	ldr	r2, [pc, #44]	; (8002990 <xTaskIncrementTick+0x1ec>)
 8002962:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002966:	4618      	mov	r0, r3
 8002968:	3728      	adds	r7, #40	; 0x28
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	2000022c 	.word	0x2000022c
 8002974:	20000208 	.word	0x20000208
 8002978:	200001bc 	.word	0x200001bc
 800297c:	200001c0 	.word	0x200001c0
 8002980:	2000021c 	.word	0x2000021c
 8002984:	20000224 	.word	0x20000224
 8002988:	2000020c 	.word	0x2000020c
 800298c:	20000130 	.word	0x20000130
 8002990:	20000214 	.word	0x20000214

08002994 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800299a:	4b2d      	ldr	r3, [pc, #180]	; (8002a50 <vTaskSwitchContext+0xbc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80029a2:	4b2c      	ldr	r3, [pc, #176]	; (8002a54 <vTaskSwitchContext+0xc0>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80029a8:	e04d      	b.n	8002a46 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80029aa:	4b2a      	ldr	r3, [pc, #168]	; (8002a54 <vTaskSwitchContext+0xc0>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029b0:	4b29      	ldr	r3, [pc, #164]	; (8002a58 <vTaskSwitchContext+0xc4>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	fab3 f383 	clz	r3, r3
 80029bc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80029be:	7afb      	ldrb	r3, [r7, #11]
 80029c0:	f1c3 031f 	rsb	r3, r3, #31
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	4925      	ldr	r1, [pc, #148]	; (8002a5c <vTaskSwitchContext+0xc8>)
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10a      	bne.n	80029f0 <vTaskSwitchContext+0x5c>
        __asm volatile
 80029da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029de:	f383 8811 	msr	BASEPRI, r3
 80029e2:	f3bf 8f6f 	isb	sy
 80029e6:	f3bf 8f4f 	dsb	sy
 80029ea:	607b      	str	r3, [r7, #4]
    }
 80029ec:	bf00      	nop
 80029ee:	e7fe      	b.n	80029ee <vTaskSwitchContext+0x5a>
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4a18      	ldr	r2, [pc, #96]	; (8002a5c <vTaskSwitchContext+0xc8>)
 80029fc:	4413      	add	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	3308      	adds	r3, #8
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d104      	bne.n	8002a20 <vTaskSwitchContext+0x8c>
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	605a      	str	r2, [r3, #4]
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	4a0e      	ldr	r2, [pc, #56]	; (8002a60 <vTaskSwitchContext+0xcc>)
 8002a28:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002a2a:	4b0d      	ldr	r3, [pc, #52]	; (8002a60 <vTaskSwitchContext+0xcc>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <vTaskSwitchContext+0xd0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d102      	bne.n	8002a3c <vTaskSwitchContext+0xa8>
 8002a36:	f002 fd9f 	bl	8005578 <SEGGER_SYSVIEW_OnIdle>
}
 8002a3a:	e004      	b.n	8002a46 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002a3c:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <vTaskSwitchContext+0xcc>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f002 fdf7 	bl	8005634 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002a46:	bf00      	nop
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	2000022c 	.word	0x2000022c
 8002a54:	20000218 	.word	0x20000218
 8002a58:	2000020c 	.word	0x2000020c
 8002a5c:	20000130 	.word	0x20000130
 8002a60:	2000012c 	.word	0x2000012c
 8002a64:	20000228 	.word	0x20000228

08002a68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10a      	bne.n	8002a8e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7c:	f383 8811 	msr	BASEPRI, r3
 8002a80:	f3bf 8f6f 	isb	sy
 8002a84:	f3bf 8f4f 	dsb	sy
 8002a88:	60fb      	str	r3, [r7, #12]
    }
 8002a8a:	bf00      	nop
 8002a8c:	e7fe      	b.n	8002a8c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a8e:	4b07      	ldr	r3, [pc, #28]	; (8002aac <vTaskPlaceOnEventList+0x44>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	3318      	adds	r3, #24
 8002a94:	4619      	mov	r1, r3
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff f80b 	bl	8001ab2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	6838      	ldr	r0, [r7, #0]
 8002aa0:	f000 fa78 	bl	8002f94 <prvAddCurrentTaskToDelayedList>
}
 8002aa4:	bf00      	nop
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	2000012c 	.word	0x2000012c

08002ab0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10a      	bne.n	8002ad8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac6:	f383 8811 	msr	BASEPRI, r3
 8002aca:	f3bf 8f6f 	isb	sy
 8002ace:	f3bf 8f4f 	dsb	sy
 8002ad2:	613b      	str	r3, [r7, #16]
    }
 8002ad4:	bf00      	nop
 8002ad6:	e7fe      	b.n	8002ad6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	4b17      	ldr	r3, [pc, #92]	; (8002b3c <vTaskPlaceOnEventListRestricted+0x8c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	61da      	str	r2, [r3, #28]
 8002ae6:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <vTaskPlaceOnEventListRestricted+0x8c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	6892      	ldr	r2, [r2, #8]
 8002aee:	621a      	str	r2, [r3, #32]
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <vTaskPlaceOnEventListRestricted+0x8c>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	3218      	adds	r2, #24
 8002afa:	605a      	str	r2, [r3, #4]
 8002afc:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <vTaskPlaceOnEventListRestricted+0x8c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f103 0218 	add.w	r2, r3, #24
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <vTaskPlaceOnEventListRestricted+0x8c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8002b20:	f04f 33ff 	mov.w	r3, #4294967295
 8002b24:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002b26:	2024      	movs	r0, #36	; 0x24
 8002b28:	f002 f8a2 	bl	8004c70 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	68b8      	ldr	r0, [r7, #8]
 8002b30:	f000 fa30 	bl	8002f94 <prvAddCurrentTaskToDelayedList>
    }
 8002b34:	bf00      	nop
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	2000012c 	.word	0x2000012c

08002b40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08a      	sub	sp, #40	; 0x28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10a      	bne.n	8002b6c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5a:	f383 8811 	msr	BASEPRI, r3
 8002b5e:	f3bf 8f6f 	isb	sy
 8002b62:	f3bf 8f4f 	dsb	sy
 8002b66:	60fb      	str	r3, [r7, #12]
    }
 8002b68:	bf00      	nop
 8002b6a:	e7fe      	b.n	8002b6a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	6a3a      	ldr	r2, [r7, #32]
 8002b78:	6a12      	ldr	r2, [r2, #32]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	6a3a      	ldr	r2, [r7, #32]
 8002b82:	69d2      	ldr	r2, [r2, #28]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	3318      	adds	r3, #24
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d103      	bne.n	8002b9a <xTaskRemoveFromEventList+0x5a>
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	6a1a      	ldr	r2, [r3, #32]
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	605a      	str	r2, [r3, #4]
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	629a      	str	r2, [r3, #40]	; 0x28
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	1e5a      	subs	r2, r3, #1
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002baa:	4b4b      	ldr	r3, [pc, #300]	; (8002cd8 <xTaskRemoveFromEventList+0x198>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d162      	bne.n	8002c78 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	6a3a      	ldr	r2, [r7, #32]
 8002bbe:	68d2      	ldr	r2, [r2, #12]
 8002bc0:	609a      	str	r2, [r3, #8]
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	6a3a      	ldr	r2, [r7, #32]
 8002bc8:	6892      	ldr	r2, [r2, #8]
 8002bca:	605a      	str	r2, [r3, #4]
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d103      	bne.n	8002be0 <xTaskRemoveFromEventList+0xa0>
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	605a      	str	r2, [r3, #4]
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	2200      	movs	r2, #0
 8002be4:	615a      	str	r2, [r3, #20]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	1e5a      	subs	r2, r3, #1
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f002 fd60 	bl	80056b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	409a      	lsls	r2, r3
 8002c00:	4b36      	ldr	r3, [pc, #216]	; (8002cdc <xTaskRemoveFromEventList+0x19c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	4a35      	ldr	r2, [pc, #212]	; (8002cdc <xTaskRemoveFromEventList+0x19c>)
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c0e:	4934      	ldr	r1, [pc, #208]	; (8002ce0 <xTaskRemoveFromEventList+0x1a0>)
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	613b      	str	r3, [r7, #16]
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	609a      	str	r2, [r3, #8]
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	60da      	str	r2, [r3, #12]
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	6a3a      	ldr	r2, [r7, #32]
 8002c34:	3204      	adds	r2, #4
 8002c36:	605a      	str	r2, [r3, #4]
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	1d1a      	adds	r2, r3, #4
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4a24      	ldr	r2, [pc, #144]	; (8002ce0 <xTaskRemoveFromEventList+0x1a0>)
 8002c4e:	441a      	add	r2, r3
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	615a      	str	r2, [r3, #20]
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c58:	4921      	ldr	r1, [pc, #132]	; (8002ce0 <xTaskRemoveFromEventList+0x1a0>)
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	1c59      	adds	r1, r3, #1
 8002c68:	481d      	ldr	r0, [pc, #116]	; (8002ce0 <xTaskRemoveFromEventList+0x1a0>)
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4403      	add	r3, r0
 8002c74:	6019      	str	r1, [r3, #0]
 8002c76:	e01b      	b.n	8002cb0 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002c78:	4b1a      	ldr	r3, [pc, #104]	; (8002ce4 <xTaskRemoveFromEventList+0x1a4>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	61bb      	str	r3, [r7, #24]
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	61da      	str	r2, [r3, #28]
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	621a      	str	r2, [r3, #32]
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	6a3a      	ldr	r2, [r7, #32]
 8002c92:	3218      	adds	r2, #24
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	f103 0218 	add.w	r2, r3, #24
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	4a10      	ldr	r2, [pc, #64]	; (8002ce4 <xTaskRemoveFromEventList+0x1a4>)
 8002ca4:	629a      	str	r2, [r3, #40]	; 0x28
 8002ca6:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <xTaskRemoveFromEventList+0x1a4>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	3301      	adds	r3, #1
 8002cac:	4a0d      	ldr	r2, [pc, #52]	; (8002ce4 <xTaskRemoveFromEventList+0x1a4>)
 8002cae:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <xTaskRemoveFromEventList+0x1a8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d905      	bls.n	8002cca <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002cc2:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <xTaskRemoveFromEventList+0x1ac>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	e001      	b.n	8002cce <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3728      	adds	r7, #40	; 0x28
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	2000022c 	.word	0x2000022c
 8002cdc:	2000020c 	.word	0x2000020c
 8002ce0:	20000130 	.word	0x20000130
 8002ce4:	200001c4 	.word	0x200001c4
 8002ce8:	2000012c 	.word	0x2000012c
 8002cec:	20000218 	.word	0x20000218

08002cf0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002cf8:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <vTaskInternalSetTimeOutState+0x24>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <vTaskInternalSetTimeOutState+0x28>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	605a      	str	r2, [r3, #4]
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	2000021c 	.word	0x2000021c
 8002d18:	20000208 	.word	0x20000208

08002d1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b088      	sub	sp, #32
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10a      	bne.n	8002d42 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d30:	f383 8811 	msr	BASEPRI, r3
 8002d34:	f3bf 8f6f 	isb	sy
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	613b      	str	r3, [r7, #16]
    }
 8002d3e:	bf00      	nop
 8002d40:	e7fe      	b.n	8002d40 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10a      	bne.n	8002d5e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4c:	f383 8811 	msr	BASEPRI, r3
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	60fb      	str	r3, [r7, #12]
    }
 8002d5a:	bf00      	nop
 8002d5c:	e7fe      	b.n	8002d5c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8002d5e:	f000 fd4b 	bl	80037f8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002d62:	4b1f      	ldr	r3, [pc, #124]	; (8002de0 <xTaskCheckForTimeOut+0xc4>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7a:	d102      	bne.n	8002d82 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	61fb      	str	r3, [r7, #28]
 8002d80:	e026      	b.n	8002dd0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <xTaskCheckForTimeOut+0xc8>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d00a      	beq.n	8002da4 <xTaskCheckForTimeOut+0x88>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d305      	bcc.n	8002da4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	e015      	b.n	8002dd0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d20b      	bcs.n	8002dc6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	1ad2      	subs	r2, r2, r3
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff ff98 	bl	8002cf0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61fb      	str	r3, [r7, #28]
 8002dc4:	e004      	b.n	8002dd0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002dd0:	f000 fd42 	bl	8003858 <vPortExitCritical>

    return xReturn;
 8002dd4:	69fb      	ldr	r3, [r7, #28]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3720      	adds	r7, #32
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000208 	.word	0x20000208
 8002de4:	2000021c 	.word	0x2000021c

08002de8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002dec:	4b03      	ldr	r3, [pc, #12]	; (8002dfc <vTaskMissedYield+0x14>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	601a      	str	r2, [r3, #0]
}
 8002df2:	bf00      	nop
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	20000218 	.word	0x20000218

08002e00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002e08:	f000 f84c 	bl	8002ea4 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8002e0c:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <prvIdleTask+0x20>)
 8002e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002e1c:	e7f4      	b.n	8002e08 <prvIdleTask+0x8>
 8002e1e:	bf00      	nop
 8002e20:	e000ed04 	.word	0xe000ed04

08002e24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	607b      	str	r3, [r7, #4]
 8002e2e:	e00c      	b.n	8002e4a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4a12      	ldr	r2, [pc, #72]	; (8002e84 <prvInitialiseTaskLists+0x60>)
 8002e3c:	4413      	add	r3, r2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe fe0a 	bl	8001a58 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3301      	adds	r3, #1
 8002e48:	607b      	str	r3, [r7, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d9ef      	bls.n	8002e30 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002e50:	480d      	ldr	r0, [pc, #52]	; (8002e88 <prvInitialiseTaskLists+0x64>)
 8002e52:	f7fe fe01 	bl	8001a58 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002e56:	480d      	ldr	r0, [pc, #52]	; (8002e8c <prvInitialiseTaskLists+0x68>)
 8002e58:	f7fe fdfe 	bl	8001a58 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002e5c:	480c      	ldr	r0, [pc, #48]	; (8002e90 <prvInitialiseTaskLists+0x6c>)
 8002e5e:	f7fe fdfb 	bl	8001a58 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002e62:	480c      	ldr	r0, [pc, #48]	; (8002e94 <prvInitialiseTaskLists+0x70>)
 8002e64:	f7fe fdf8 	bl	8001a58 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002e68:	480b      	ldr	r0, [pc, #44]	; (8002e98 <prvInitialiseTaskLists+0x74>)
 8002e6a:	f7fe fdf5 	bl	8001a58 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002e6e:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <prvInitialiseTaskLists+0x78>)
 8002e70:	4a05      	ldr	r2, [pc, #20]	; (8002e88 <prvInitialiseTaskLists+0x64>)
 8002e72:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e74:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <prvInitialiseTaskLists+0x7c>)
 8002e76:	4a05      	ldr	r2, [pc, #20]	; (8002e8c <prvInitialiseTaskLists+0x68>)
 8002e78:	601a      	str	r2, [r3, #0]
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20000130 	.word	0x20000130
 8002e88:	20000194 	.word	0x20000194
 8002e8c:	200001a8 	.word	0x200001a8
 8002e90:	200001c4 	.word	0x200001c4
 8002e94:	200001d8 	.word	0x200001d8
 8002e98:	200001f0 	.word	0x200001f0
 8002e9c:	200001bc 	.word	0x200001bc
 8002ea0:	200001c0 	.word	0x200001c0

08002ea4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002eaa:	e019      	b.n	8002ee0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002eac:	f000 fca4 	bl	80037f8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002eb0:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <prvCheckTasksWaitingTermination+0x50>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3304      	adds	r3, #4
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fe fe31 	bl	8001b24 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <prvCheckTasksWaitingTermination+0x54>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	4a0b      	ldr	r2, [pc, #44]	; (8002ef8 <prvCheckTasksWaitingTermination+0x54>)
 8002eca:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <prvCheckTasksWaitingTermination+0x58>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	4a0a      	ldr	r2, [pc, #40]	; (8002efc <prvCheckTasksWaitingTermination+0x58>)
 8002ed4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002ed6:	f000 fcbf 	bl	8003858 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f810 	bl	8002f00 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <prvCheckTasksWaitingTermination+0x58>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1e1      	bne.n	8002eac <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	200001d8 	.word	0x200001d8
 8002ef8:	20000204 	.word	0x20000204
 8002efc:	200001ec 	.word	0x200001ec

08002f00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fe95 	bl	8003c3c <vPortFree>
            vPortFree( pxTCB );
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 fe92 	bl	8003c3c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002f18:	bf00      	nop
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f24:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <prvResetNextTaskUnblockTime+0x30>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d104      	bne.n	8002f38 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002f2e:	4b09      	ldr	r3, [pc, #36]	; (8002f54 <prvResetNextTaskUnblockTime+0x34>)
 8002f30:	f04f 32ff 	mov.w	r2, #4294967295
 8002f34:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002f36:	e005      	b.n	8002f44 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f38:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <prvResetNextTaskUnblockTime+0x30>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a04      	ldr	r2, [pc, #16]	; (8002f54 <prvResetNextTaskUnblockTime+0x34>)
 8002f42:	6013      	str	r3, [r2, #0]
}
 8002f44:	bf00      	nop
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	200001bc 	.word	0x200001bc
 8002f54:	20000224 	.word	0x20000224

08002f58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002f5e:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <xTaskGetSchedulerState+0x34>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d102      	bne.n	8002f6c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002f66:	2301      	movs	r3, #1
 8002f68:	607b      	str	r3, [r7, #4]
 8002f6a:	e008      	b.n	8002f7e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f6c:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <xTaskGetSchedulerState+0x38>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d102      	bne.n	8002f7a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002f74:	2302      	movs	r3, #2
 8002f76:	607b      	str	r3, [r7, #4]
 8002f78:	e001      	b.n	8002f7e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002f7e:	687b      	ldr	r3, [r7, #4]
    }
 8002f80:	4618      	mov	r0, r3
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	20000210 	.word	0x20000210
 8002f90:	2000022c 	.word	0x2000022c

08002f94 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002f9e:	4b36      	ldr	r3, [pc, #216]	; (8003078 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fa4:	4b35      	ldr	r3, [pc, #212]	; (800307c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	3304      	adds	r3, #4
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fe fdba 	bl	8001b24 <uxListRemove>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10b      	bne.n	8002fce <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002fb6:	4b31      	ldr	r3, [pc, #196]	; (800307c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43da      	mvns	r2, r3
 8002fc4:	4b2e      	ldr	r3, [pc, #184]	; (8003080 <prvAddCurrentTaskToDelayedList+0xec>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	4a2d      	ldr	r2, [pc, #180]	; (8003080 <prvAddCurrentTaskToDelayedList+0xec>)
 8002fcc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd4:	d124      	bne.n	8003020 <prvAddCurrentTaskToDelayedList+0x8c>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d021      	beq.n	8003020 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fdc:	4b29      	ldr	r3, [pc, #164]	; (8003084 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	4b26      	ldr	r3, [pc, #152]	; (800307c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	609a      	str	r2, [r3, #8]
 8002fea:	4b24      	ldr	r3, [pc, #144]	; (800307c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	6892      	ldr	r2, [r2, #8]
 8002ff2:	60da      	str	r2, [r3, #12]
 8002ff4:	4b21      	ldr	r3, [pc, #132]	; (800307c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	3204      	adds	r2, #4
 8002ffe:	605a      	str	r2, [r3, #4]
 8003000:	4b1e      	ldr	r3, [pc, #120]	; (800307c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	1d1a      	adds	r2, r3, #4
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	609a      	str	r2, [r3, #8]
 800300a:	4b1c      	ldr	r3, [pc, #112]	; (800307c <prvAddCurrentTaskToDelayedList+0xe8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a1d      	ldr	r2, [pc, #116]	; (8003084 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003010:	615a      	str	r2, [r3, #20]
 8003012:	4b1c      	ldr	r3, [pc, #112]	; (8003084 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	3301      	adds	r3, #1
 8003018:	4a1a      	ldr	r2, [pc, #104]	; (8003084 <prvAddCurrentTaskToDelayedList+0xf0>)
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800301e:	e026      	b.n	800306e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4413      	add	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003028:	4b14      	ldr	r3, [pc, #80]	; (800307c <prvAddCurrentTaskToDelayedList+0xe8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	429a      	cmp	r2, r3
 8003036:	d209      	bcs.n	800304c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003038:	4b13      	ldr	r3, [pc, #76]	; (8003088 <prvAddCurrentTaskToDelayedList+0xf4>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4b0f      	ldr	r3, [pc, #60]	; (800307c <prvAddCurrentTaskToDelayedList+0xe8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3304      	adds	r3, #4
 8003042:	4619      	mov	r1, r3
 8003044:	4610      	mov	r0, r2
 8003046:	f7fe fd34 	bl	8001ab2 <vListInsert>
}
 800304a:	e010      	b.n	800306e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800304c:	4b0f      	ldr	r3, [pc, #60]	; (800308c <prvAddCurrentTaskToDelayedList+0xf8>)
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	4b0a      	ldr	r3, [pc, #40]	; (800307c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	3304      	adds	r3, #4
 8003056:	4619      	mov	r1, r3
 8003058:	4610      	mov	r0, r2
 800305a:	f7fe fd2a 	bl	8001ab2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800305e:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	429a      	cmp	r2, r3
 8003066:	d202      	bcs.n	800306e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003068:	4a09      	ldr	r2, [pc, #36]	; (8003090 <prvAddCurrentTaskToDelayedList+0xfc>)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6013      	str	r3, [r2, #0]
}
 800306e:	bf00      	nop
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20000208 	.word	0x20000208
 800307c:	2000012c 	.word	0x2000012c
 8003080:	2000020c 	.word	0x2000020c
 8003084:	200001f0 	.word	0x200001f0
 8003088:	200001c0 	.word	0x200001c0
 800308c:	200001bc 	.word	0x200001bc
 8003090:	20000224 	.word	0x20000224

08003094 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800309a:	2300      	movs	r3, #0
 800309c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800309e:	f000 fa47 	bl	8003530 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80030a2:	4b11      	ldr	r3, [pc, #68]	; (80030e8 <xTimerCreateTimerTask+0x54>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00b      	beq.n	80030c2 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80030aa:	4b10      	ldr	r3, [pc, #64]	; (80030ec <xTimerCreateTimerTask+0x58>)
 80030ac:	9301      	str	r3, [sp, #4]
 80030ae:	2302      	movs	r3, #2
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	2300      	movs	r3, #0
 80030b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80030b8:	490d      	ldr	r1, [pc, #52]	; (80030f0 <xTimerCreateTimerTask+0x5c>)
 80030ba:	480e      	ldr	r0, [pc, #56]	; (80030f4 <xTimerCreateTimerTask+0x60>)
 80030bc:	f7ff f874 	bl	80021a8 <xTaskCreate>
 80030c0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10a      	bne.n	80030de <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80030c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	603b      	str	r3, [r7, #0]
    }
 80030da:	bf00      	nop
 80030dc:	e7fe      	b.n	80030dc <xTimerCreateTimerTask+0x48>
        return xReturn;
 80030de:	687b      	ldr	r3, [r7, #4]
    }
 80030e0:	4618      	mov	r0, r3
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	20000260 	.word	0x20000260
 80030ec:	20000264 	.word	0x20000264
 80030f0:	080064ec 	.word	0x080064ec
 80030f4:	0800319d 	.word	0x0800319d

080030f8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003104:	e008      	b.n	8003118 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	4413      	add	r3, r2
 800310e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	699a      	ldr	r2, [r3, #24]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	18d1      	adds	r1, r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 f8dd 	bl	80032e4 <prvInsertTimerInActiveList>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1ea      	bne.n	8003106 <prvReloadTimer+0xe>
        }
    }
 8003130:	bf00      	nop
 8003132:	bf00      	nop
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003146:	4b14      	ldr	r3, [pc, #80]	; (8003198 <prvProcessExpiredTimer+0x5c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	3304      	adds	r3, #4
 8003154:	4618      	mov	r0, r3
 8003156:	f7fe fce5 	bl	8001b24 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f7ff ffc3 	bl	80030f8 <prvReloadTimer>
 8003172:	e008      	b.n	8003186 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800317a:	f023 0301 	bic.w	r3, r3, #1
 800317e:	b2da      	uxtb	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	4798      	blx	r3
    }
 800318e:	bf00      	nop
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20000258 	.word	0x20000258

0800319c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80031a4:	f107 0308 	add.w	r3, r7, #8
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 f857 	bl	800325c <prvGetNextExpireTime>
 80031ae:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4619      	mov	r1, r3
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 f803 	bl	80031c0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80031ba:	f000 f8d5 	bl	8003368 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80031be:	e7f1      	b.n	80031a4 <prvTimerTask+0x8>

080031c0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80031ca:	f7ff f9c9 	bl	8002560 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80031ce:	f107 0308 	add.w	r3, r7, #8
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 f866 	bl	80032a4 <prvSampleTimeNow>
 80031d8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d130      	bne.n	8003242 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10a      	bne.n	80031fc <prvProcessTimerOrBlockTask+0x3c>
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d806      	bhi.n	80031fc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80031ee:	f7ff f9c5 	bl	800257c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80031f2:	68f9      	ldr	r1, [r7, #12]
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff ffa1 	bl	800313c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80031fa:	e024      	b.n	8003246 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d008      	beq.n	8003214 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003202:	4b13      	ldr	r3, [pc, #76]	; (8003250 <prvProcessTimerOrBlockTask+0x90>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <prvProcessTimerOrBlockTask+0x50>
 800320c:	2301      	movs	r3, #1
 800320e:	e000      	b.n	8003212 <prvProcessTimerOrBlockTask+0x52>
 8003210:	2300      	movs	r3, #0
 8003212:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003214:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <prvProcessTimerOrBlockTask+0x94>)
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	4619      	mov	r1, r3
 8003222:	f7fe ff8d 	bl	8002140 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003226:	f7ff f9a9 	bl	800257c <xTaskResumeAll>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10a      	bne.n	8003246 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003230:	4b09      	ldr	r3, [pc, #36]	; (8003258 <prvProcessTimerOrBlockTask+0x98>)
 8003232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	f3bf 8f6f 	isb	sy
    }
 8003240:	e001      	b.n	8003246 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003242:	f7ff f99b 	bl	800257c <xTaskResumeAll>
    }
 8003246:	bf00      	nop
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	2000025c 	.word	0x2000025c
 8003254:	20000260 	.word	0x20000260
 8003258:	e000ed04 	.word	0xe000ed04

0800325c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003264:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <prvGetNextExpireTime+0x44>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <prvGetNextExpireTime+0x16>
 800326e:	2201      	movs	r2, #1
 8003270:	e000      	b.n	8003274 <prvGetNextExpireTime+0x18>
 8003272:	2200      	movs	r2, #0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d105      	bne.n	800328c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003280:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <prvGetNextExpireTime+0x44>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	e001      	b.n	8003290 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003290:	68fb      	ldr	r3, [r7, #12]
    }
 8003292:	4618      	mov	r0, r3
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	20000258 	.word	0x20000258

080032a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80032ac:	f7ff fa58 	bl	8002760 <xTaskGetTickCount>
 80032b0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80032b2:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <prvSampleTimeNow+0x3c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d205      	bcs.n	80032c8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80032bc:	f000 f912 	bl	80034e4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	e002      	b.n	80032ce <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80032ce:	4a04      	ldr	r2, [pc, #16]	; (80032e0 <prvSampleTimeNow+0x3c>)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80032d4:	68fb      	ldr	r3, [r7, #12]
    }
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20000268 	.word	0x20000268

080032e4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	429a      	cmp	r2, r3
 8003308:	d812      	bhi.n	8003330 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	1ad2      	subs	r2, r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	429a      	cmp	r2, r3
 8003316:	d302      	bcc.n	800331e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003318:	2301      	movs	r3, #1
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	e01b      	b.n	8003356 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800331e:	4b10      	ldr	r3, [pc, #64]	; (8003360 <prvInsertTimerInActiveList+0x7c>)
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	3304      	adds	r3, #4
 8003326:	4619      	mov	r1, r3
 8003328:	4610      	mov	r0, r2
 800332a:	f7fe fbc2 	bl	8001ab2 <vListInsert>
 800332e:	e012      	b.n	8003356 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d206      	bcs.n	8003346 <prvInsertTimerInActiveList+0x62>
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	429a      	cmp	r2, r3
 800333e:	d302      	bcc.n	8003346 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003340:	2301      	movs	r3, #1
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	e007      	b.n	8003356 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003346:	4b07      	ldr	r3, [pc, #28]	; (8003364 <prvInsertTimerInActiveList+0x80>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	3304      	adds	r3, #4
 800334e:	4619      	mov	r1, r3
 8003350:	4610      	mov	r0, r2
 8003352:	f7fe fbae 	bl	8001ab2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003356:	697b      	ldr	r3, [r7, #20]
    }
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	2000025c 	.word	0x2000025c
 8003364:	20000258 	.word	0x20000258

08003368 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800336e:	e0a6      	b.n	80034be <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f2c0 80a2 	blt.w	80034bc <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d004      	beq.n	800338e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	3304      	adds	r3, #4
 8003388:	4618      	mov	r0, r3
 800338a:	f7fe fbcb 	bl	8001b24 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800338e:	1d3b      	adds	r3, r7, #4
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff ff87 	bl	80032a4 <prvSampleTimeNow>
 8003396:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	3b01      	subs	r3, #1
 800339c:	2b08      	cmp	r3, #8
 800339e:	f200 808e 	bhi.w	80034be <prvProcessReceivedCommands+0x156>
 80033a2:	a201      	add	r2, pc, #4	; (adr r2, 80033a8 <prvProcessReceivedCommands+0x40>)
 80033a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a8:	080033cd 	.word	0x080033cd
 80033ac:	080033cd 	.word	0x080033cd
 80033b0:	08003435 	.word	0x08003435
 80033b4:	08003449 	.word	0x08003449
 80033b8:	08003493 	.word	0x08003493
 80033bc:	080033cd 	.word	0x080033cd
 80033c0:	080033cd 	.word	0x080033cd
 80033c4:	08003435 	.word	0x08003435
 80033c8:	08003449 	.word	0x08003449
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	18d1      	adds	r1, r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	69f8      	ldr	r0, [r7, #28]
 80033ec:	f7ff ff7a 	bl	80032e4 <prvInsertTimerInActiveList>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d063      	beq.n	80034be <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	d009      	beq.n	8003418 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	4413      	add	r3, r2
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4619      	mov	r1, r3
 8003410:	69f8      	ldr	r0, [r7, #28]
 8003412:	f7ff fe71 	bl	80030f8 <prvReloadTimer>
 8003416:	e008      	b.n	800342a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800341e:	f023 0301 	bic.w	r3, r3, #1
 8003422:	b2da      	uxtb	r2, r3
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	69f8      	ldr	r0, [r7, #28]
 8003430:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003432:	e044      	b.n	80034be <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800343a:	f023 0301 	bic.w	r3, r3, #1
 800343e:	b2da      	uxtb	r2, r3
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003446:	e03a      	b.n	80034be <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	b2da      	uxtb	r2, r3
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10a      	bne.n	800347e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	617b      	str	r3, [r7, #20]
    }
 800347a:	bf00      	nop
 800347c:	e7fe      	b.n	800347c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	699a      	ldr	r2, [r3, #24]
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	18d1      	adds	r1, r2, r3
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	69f8      	ldr	r0, [r7, #28]
 800348c:	f7ff ff2a 	bl	80032e4 <prvInsertTimerInActiveList>
                        break;
 8003490:	e015      	b.n	80034be <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d103      	bne.n	80034a8 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80034a0:	69f8      	ldr	r0, [r7, #28]
 80034a2:	f000 fbcb 	bl	8003c3c <vPortFree>
 80034a6:	e00a      	b.n	80034be <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034ae:	f023 0301 	bic.w	r3, r3, #1
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80034ba:	e000      	b.n	80034be <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80034bc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80034be:	4b08      	ldr	r3, [pc, #32]	; (80034e0 <prvProcessReceivedCommands+0x178>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f107 0108 	add.w	r1, r7, #8
 80034c6:	2200      	movs	r2, #0
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fe fc4f 	bl	8001d6c <xQueueReceive>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f47f af4d 	bne.w	8003370 <prvProcessReceivedCommands+0x8>
        }
    }
 80034d6:	bf00      	nop
 80034d8:	bf00      	nop
 80034da:	3720      	adds	r7, #32
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	20000260 	.word	0x20000260

080034e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80034ea:	e009      	b.n	8003500 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80034ec:	4b0e      	ldr	r3, [pc, #56]	; (8003528 <prvSwitchTimerLists+0x44>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80034f6:	f04f 31ff 	mov.w	r1, #4294967295
 80034fa:	6838      	ldr	r0, [r7, #0]
 80034fc:	f7ff fe1e 	bl	800313c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003500:	4b09      	ldr	r3, [pc, #36]	; (8003528 <prvSwitchTimerLists+0x44>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800350a:	4b07      	ldr	r3, [pc, #28]	; (8003528 <prvSwitchTimerLists+0x44>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003510:	4b06      	ldr	r3, [pc, #24]	; (800352c <prvSwitchTimerLists+0x48>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a04      	ldr	r2, [pc, #16]	; (8003528 <prvSwitchTimerLists+0x44>)
 8003516:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003518:	4a04      	ldr	r2, [pc, #16]	; (800352c <prvSwitchTimerLists+0x48>)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6013      	str	r3, [r2, #0]
    }
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20000258 	.word	0x20000258
 800352c:	2000025c 	.word	0x2000025c

08003530 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003534:	f000 f960 	bl	80037f8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003538:	4b12      	ldr	r3, [pc, #72]	; (8003584 <prvCheckForValidListAndQueue+0x54>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d11d      	bne.n	800357c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003540:	4811      	ldr	r0, [pc, #68]	; (8003588 <prvCheckForValidListAndQueue+0x58>)
 8003542:	f7fe fa89 	bl	8001a58 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003546:	4811      	ldr	r0, [pc, #68]	; (800358c <prvCheckForValidListAndQueue+0x5c>)
 8003548:	f7fe fa86 	bl	8001a58 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800354c:	4b10      	ldr	r3, [pc, #64]	; (8003590 <prvCheckForValidListAndQueue+0x60>)
 800354e:	4a0e      	ldr	r2, [pc, #56]	; (8003588 <prvCheckForValidListAndQueue+0x58>)
 8003550:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003552:	4b10      	ldr	r3, [pc, #64]	; (8003594 <prvCheckForValidListAndQueue+0x64>)
 8003554:	4a0d      	ldr	r2, [pc, #52]	; (800358c <prvCheckForValidListAndQueue+0x5c>)
 8003556:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003558:	2200      	movs	r2, #0
 800355a:	210c      	movs	r1, #12
 800355c:	200a      	movs	r0, #10
 800355e:	f7fe fb8d 	bl	8001c7c <xQueueGenericCreate>
 8003562:	4603      	mov	r3, r0
 8003564:	4a07      	ldr	r2, [pc, #28]	; (8003584 <prvCheckForValidListAndQueue+0x54>)
 8003566:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003568:	4b06      	ldr	r3, [pc, #24]	; (8003584 <prvCheckForValidListAndQueue+0x54>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003570:	4b04      	ldr	r3, [pc, #16]	; (8003584 <prvCheckForValidListAndQueue+0x54>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4908      	ldr	r1, [pc, #32]	; (8003598 <prvCheckForValidListAndQueue+0x68>)
 8003576:	4618      	mov	r0, r3
 8003578:	f7fe fd8c 	bl	8002094 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800357c:	f000 f96c 	bl	8003858 <vPortExitCritical>
    }
 8003580:	bf00      	nop
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20000260 	.word	0x20000260
 8003588:	20000230 	.word	0x20000230
 800358c:	20000244 	.word	0x20000244
 8003590:	20000258 	.word	0x20000258
 8003594:	2000025c 	.word	0x2000025c
 8003598:	080064f4 	.word	0x080064f4

0800359c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	3b04      	subs	r3, #4
 80035ac:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035b4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	3b04      	subs	r3, #4
 80035ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f023 0201 	bic.w	r2, r3, #1
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	3b04      	subs	r3, #4
 80035ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80035cc:	4a0c      	ldr	r2, [pc, #48]	; (8003600 <pxPortInitialiseStack+0x64>)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	3b14      	subs	r3, #20
 80035d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	3b04      	subs	r3, #4
 80035e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f06f 0202 	mvn.w	r2, #2
 80035ea:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	3b20      	subs	r3, #32
 80035f0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80035f2:	68fb      	ldr	r3, [r7, #12]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3714      	adds	r7, #20
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	08003605 	.word	0x08003605

08003604 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800360a:	2300      	movs	r3, #0
 800360c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800360e:	4b12      	ldr	r3, [pc, #72]	; (8003658 <prvTaskExitError+0x54>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003616:	d00a      	beq.n	800362e <prvTaskExitError+0x2a>
        __asm volatile
 8003618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	60fb      	str	r3, [r7, #12]
    }
 800362a:	bf00      	nop
 800362c:	e7fe      	b.n	800362c <prvTaskExitError+0x28>
        __asm volatile
 800362e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003632:	f383 8811 	msr	BASEPRI, r3
 8003636:	f3bf 8f6f 	isb	sy
 800363a:	f3bf 8f4f 	dsb	sy
 800363e:	60bb      	str	r3, [r7, #8]
    }
 8003640:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003642:	bf00      	nop
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0fc      	beq.n	8003644 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800364a:	bf00      	nop
 800364c:	bf00      	nop
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	20000010 	.word	0x20000010
 800365c:	00000000 	.word	0x00000000

08003660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003660:	4b07      	ldr	r3, [pc, #28]	; (8003680 <pxCurrentTCBConst2>)
 8003662:	6819      	ldr	r1, [r3, #0]
 8003664:	6808      	ldr	r0, [r1, #0]
 8003666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800366a:	f380 8809 	msr	PSP, r0
 800366e:	f3bf 8f6f 	isb	sy
 8003672:	f04f 0000 	mov.w	r0, #0
 8003676:	f380 8811 	msr	BASEPRI, r0
 800367a:	4770      	bx	lr
 800367c:	f3af 8000 	nop.w

08003680 <pxCurrentTCBConst2>:
 8003680:	2000012c 	.word	0x2000012c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003684:	bf00      	nop
 8003686:	bf00      	nop

08003688 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003688:	4808      	ldr	r0, [pc, #32]	; (80036ac <prvPortStartFirstTask+0x24>)
 800368a:	6800      	ldr	r0, [r0, #0]
 800368c:	6800      	ldr	r0, [r0, #0]
 800368e:	f380 8808 	msr	MSP, r0
 8003692:	f04f 0000 	mov.w	r0, #0
 8003696:	f380 8814 	msr	CONTROL, r0
 800369a:	b662      	cpsie	i
 800369c:	b661      	cpsie	f
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	df00      	svc	0
 80036a8:	bf00      	nop
 80036aa:	0000      	.short	0x0000
 80036ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80036b0:	bf00      	nop
 80036b2:	bf00      	nop

080036b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80036ba:	4b46      	ldr	r3, [pc, #280]	; (80037d4 <xPortStartScheduler+0x120>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a46      	ldr	r2, [pc, #280]	; (80037d8 <xPortStartScheduler+0x124>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d10a      	bne.n	80036da <xPortStartScheduler+0x26>
        __asm volatile
 80036c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c8:	f383 8811 	msr	BASEPRI, r3
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	613b      	str	r3, [r7, #16]
    }
 80036d6:	bf00      	nop
 80036d8:	e7fe      	b.n	80036d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80036da:	4b3e      	ldr	r3, [pc, #248]	; (80037d4 <xPortStartScheduler+0x120>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a3f      	ldr	r2, [pc, #252]	; (80037dc <xPortStartScheduler+0x128>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d10a      	bne.n	80036fa <xPortStartScheduler+0x46>
        __asm volatile
 80036e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e8:	f383 8811 	msr	BASEPRI, r3
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	60fb      	str	r3, [r7, #12]
    }
 80036f6:	bf00      	nop
 80036f8:	e7fe      	b.n	80036f8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80036fa:	4b39      	ldr	r3, [pc, #228]	; (80037e0 <xPortStartScheduler+0x12c>)
 80036fc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	b2db      	uxtb	r3, r3
 8003704:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	22ff      	movs	r2, #255	; 0xff
 800370a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003714:	78fb      	ldrb	r3, [r7, #3]
 8003716:	b2db      	uxtb	r3, r3
 8003718:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800371c:	b2da      	uxtb	r2, r3
 800371e:	4b31      	ldr	r3, [pc, #196]	; (80037e4 <xPortStartScheduler+0x130>)
 8003720:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003722:	4b31      	ldr	r3, [pc, #196]	; (80037e8 <xPortStartScheduler+0x134>)
 8003724:	2207      	movs	r2, #7
 8003726:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003728:	e009      	b.n	800373e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800372a:	4b2f      	ldr	r3, [pc, #188]	; (80037e8 <xPortStartScheduler+0x134>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3b01      	subs	r3, #1
 8003730:	4a2d      	ldr	r2, [pc, #180]	; (80037e8 <xPortStartScheduler+0x134>)
 8003732:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003734:	78fb      	ldrb	r3, [r7, #3]
 8003736:	b2db      	uxtb	r3, r3
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	b2db      	uxtb	r3, r3
 800373c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800373e:	78fb      	ldrb	r3, [r7, #3]
 8003740:	b2db      	uxtb	r3, r3
 8003742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003746:	2b80      	cmp	r3, #128	; 0x80
 8003748:	d0ef      	beq.n	800372a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800374a:	4b27      	ldr	r3, [pc, #156]	; (80037e8 <xPortStartScheduler+0x134>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f1c3 0307 	rsb	r3, r3, #7
 8003752:	2b04      	cmp	r3, #4
 8003754:	d00a      	beq.n	800376c <xPortStartScheduler+0xb8>
        __asm volatile
 8003756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375a:	f383 8811 	msr	BASEPRI, r3
 800375e:	f3bf 8f6f 	isb	sy
 8003762:	f3bf 8f4f 	dsb	sy
 8003766:	60bb      	str	r3, [r7, #8]
    }
 8003768:	bf00      	nop
 800376a:	e7fe      	b.n	800376a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800376c:	4b1e      	ldr	r3, [pc, #120]	; (80037e8 <xPortStartScheduler+0x134>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	021b      	lsls	r3, r3, #8
 8003772:	4a1d      	ldr	r2, [pc, #116]	; (80037e8 <xPortStartScheduler+0x134>)
 8003774:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003776:	4b1c      	ldr	r3, [pc, #112]	; (80037e8 <xPortStartScheduler+0x134>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800377e:	4a1a      	ldr	r2, [pc, #104]	; (80037e8 <xPortStartScheduler+0x134>)
 8003780:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	b2da      	uxtb	r2, r3
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800378a:	4b18      	ldr	r3, [pc, #96]	; (80037ec <xPortStartScheduler+0x138>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a17      	ldr	r2, [pc, #92]	; (80037ec <xPortStartScheduler+0x138>)
 8003790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003794:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003796:	4b15      	ldr	r3, [pc, #84]	; (80037ec <xPortStartScheduler+0x138>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a14      	ldr	r2, [pc, #80]	; (80037ec <xPortStartScheduler+0x138>)
 800379c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80037a0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80037a2:	f000 f8db 	bl	800395c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80037a6:	4b12      	ldr	r3, [pc, #72]	; (80037f0 <xPortStartScheduler+0x13c>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80037ac:	f000 f8fa 	bl	80039a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80037b0:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <xPortStartScheduler+0x140>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a0f      	ldr	r2, [pc, #60]	; (80037f4 <xPortStartScheduler+0x140>)
 80037b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80037ba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80037bc:	f7ff ff64 	bl	8003688 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80037c0:	f7ff f8e8 	bl	8002994 <vTaskSwitchContext>
    prvTaskExitError();
 80037c4:	f7ff ff1e 	bl	8003604 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	e000ed00 	.word	0xe000ed00
 80037d8:	410fc271 	.word	0x410fc271
 80037dc:	410fc270 	.word	0x410fc270
 80037e0:	e000e400 	.word	0xe000e400
 80037e4:	2000026c 	.word	0x2000026c
 80037e8:	20000270 	.word	0x20000270
 80037ec:	e000ed20 	.word	0xe000ed20
 80037f0:	20000010 	.word	0x20000010
 80037f4:	e000ef34 	.word	0xe000ef34

080037f8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
        __asm volatile
 80037fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003802:	f383 8811 	msr	BASEPRI, r3
 8003806:	f3bf 8f6f 	isb	sy
 800380a:	f3bf 8f4f 	dsb	sy
 800380e:	607b      	str	r3, [r7, #4]
    }
 8003810:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003812:	4b0f      	ldr	r3, [pc, #60]	; (8003850 <vPortEnterCritical+0x58>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3301      	adds	r3, #1
 8003818:	4a0d      	ldr	r2, [pc, #52]	; (8003850 <vPortEnterCritical+0x58>)
 800381a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800381c:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <vPortEnterCritical+0x58>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d10f      	bne.n	8003844 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003824:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <vPortEnterCritical+0x5c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <vPortEnterCritical+0x4c>
        __asm volatile
 800382e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003832:	f383 8811 	msr	BASEPRI, r3
 8003836:	f3bf 8f6f 	isb	sy
 800383a:	f3bf 8f4f 	dsb	sy
 800383e:	603b      	str	r3, [r7, #0]
    }
 8003840:	bf00      	nop
 8003842:	e7fe      	b.n	8003842 <vPortEnterCritical+0x4a>
    }
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	20000010 	.word	0x20000010
 8003854:	e000ed04 	.word	0xe000ed04

08003858 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800385e:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <vPortExitCritical+0x50>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10a      	bne.n	800387c <vPortExitCritical+0x24>
        __asm volatile
 8003866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386a:	f383 8811 	msr	BASEPRI, r3
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	607b      	str	r3, [r7, #4]
    }
 8003878:	bf00      	nop
 800387a:	e7fe      	b.n	800387a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800387c:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <vPortExitCritical+0x50>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3b01      	subs	r3, #1
 8003882:	4a09      	ldr	r2, [pc, #36]	; (80038a8 <vPortExitCritical+0x50>)
 8003884:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003886:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <vPortExitCritical+0x50>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d105      	bne.n	800389a <vPortExitCritical+0x42>
 800388e:	2300      	movs	r3, #0
 8003890:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003898:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	20000010 	.word	0x20000010
 80038ac:	00000000 	.word	0x00000000

080038b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80038b0:	f3ef 8009 	mrs	r0, PSP
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	4b15      	ldr	r3, [pc, #84]	; (8003910 <pxCurrentTCBConst>)
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	f01e 0f10 	tst.w	lr, #16
 80038c0:	bf08      	it	eq
 80038c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80038c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038ca:	6010      	str	r0, [r2, #0]
 80038cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80038d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80038d4:	f380 8811 	msr	BASEPRI, r0
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	f3bf 8f6f 	isb	sy
 80038e0:	f7ff f858 	bl	8002994 <vTaskSwitchContext>
 80038e4:	f04f 0000 	mov.w	r0, #0
 80038e8:	f380 8811 	msr	BASEPRI, r0
 80038ec:	bc09      	pop	{r0, r3}
 80038ee:	6819      	ldr	r1, [r3, #0]
 80038f0:	6808      	ldr	r0, [r1, #0]
 80038f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f6:	f01e 0f10 	tst.w	lr, #16
 80038fa:	bf08      	it	eq
 80038fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003900:	f380 8809 	msr	PSP, r0
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	f3af 8000 	nop.w

08003910 <pxCurrentTCBConst>:
 8003910:	2000012c 	.word	0x2000012c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003914:	bf00      	nop
 8003916:	bf00      	nop

08003918 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
        __asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	607b      	str	r3, [r7, #4]
    }
 8003930:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003932:	f7fe ff37 	bl	80027a4 <xTaskIncrementTick>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800393c:	4b06      	ldr	r3, [pc, #24]	; (8003958 <SysTick_Handler+0x40>)
 800393e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	2300      	movs	r3, #0
 8003946:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	f383 8811 	msr	BASEPRI, r3
    }
 800394e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003950:	bf00      	nop
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	e000ed04 	.word	0xe000ed04

0800395c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003960:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <vPortSetupTimerInterrupt+0x34>)
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003966:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <vPortSetupTimerInterrupt+0x38>)
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800396c:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <vPortSetupTimerInterrupt+0x3c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a0a      	ldr	r2, [pc, #40]	; (800399c <vPortSetupTimerInterrupt+0x40>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	099b      	lsrs	r3, r3, #6
 8003978:	4a09      	ldr	r2, [pc, #36]	; (80039a0 <vPortSetupTimerInterrupt+0x44>)
 800397a:	3b01      	subs	r3, #1
 800397c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800397e:	4b04      	ldr	r3, [pc, #16]	; (8003990 <vPortSetupTimerInterrupt+0x34>)
 8003980:	2207      	movs	r2, #7
 8003982:	601a      	str	r2, [r3, #0]
}
 8003984:	bf00      	nop
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	e000e010 	.word	0xe000e010
 8003994:	e000e018 	.word	0xe000e018
 8003998:	20000000 	.word	0x20000000
 800399c:	10624dd3 	.word	0x10624dd3
 80039a0:	e000e014 	.word	0xe000e014

080039a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80039a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80039b4 <vPortEnableVFP+0x10>
 80039a8:	6801      	ldr	r1, [r0, #0]
 80039aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80039ae:	6001      	str	r1, [r0, #0]
 80039b0:	4770      	bx	lr
 80039b2:	0000      	.short	0x0000
 80039b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80039b8:	bf00      	nop
 80039ba:	bf00      	nop

080039bc <vSetVarulMaxPRIGROUPValue>:
/*-----------------------------------------------------------*/
/////////
#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue( void )
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80039c2:	4b1f      	ldr	r3, [pc, #124]	; (8003a40 <vSetVarulMaxPRIGROUPValue+0x84>)
 80039c4:	60fb      	str	r3, [r7, #12]
	volatile uint8_t ucMaxPriorityValue;
	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	22ff      	movs	r2, #255	; 0xff
 80039ca:	701a      	strb	r2, [r3, #0]
	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	71fb      	strb	r3, [r7, #7]
	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039d4:	4b1b      	ldr	r3, [pc, #108]	; (8003a44 <vSetVarulMaxPRIGROUPValue+0x88>)
 80039d6:	2207      	movs	r2, #7
 80039d8:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039da:	e009      	b.n	80039f0 <vSetVarulMaxPRIGROUPValue+0x34>
	{
		ulMaxPRIGROUPValue--;
 80039dc:	4b19      	ldr	r3, [pc, #100]	; (8003a44 <vSetVarulMaxPRIGROUPValue+0x88>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3b01      	subs	r3, #1
 80039e2:	4a18      	ldr	r2, [pc, #96]	; (8003a44 <vSetVarulMaxPRIGROUPValue+0x88>)
 80039e4:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039e6:	79fb      	ldrb	r3, [r7, #7]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	71fb      	strb	r3, [r7, #7]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039f0:	79fb      	ldrb	r3, [r7, #7]
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f8:	2b80      	cmp	r3, #128	; 0x80
 80039fa:	d0ef      	beq.n	80039dc <vSetVarulMaxPRIGROUPValue+0x20>
#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80039fc:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <vSetVarulMaxPRIGROUPValue+0x88>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f1c3 0307 	rsb	r3, r3, #7
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d00a      	beq.n	8003a1e <vSetVarulMaxPRIGROUPValue+0x62>
        __asm volatile
 8003a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	60bb      	str	r3, [r7, #8]
    }
 8003a1a:	bf00      	nop
 8003a1c:	e7fe      	b.n	8003a1c <vSetVarulMaxPRIGROUPValue+0x60>
	}
#endif
	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a1e:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <vSetVarulMaxPRIGROUPValue+0x88>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	021b      	lsls	r3, r3, #8
 8003a24:	4a07      	ldr	r2, [pc, #28]	; (8003a44 <vSetVarulMaxPRIGROUPValue+0x88>)
 8003a26:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a28:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <vSetVarulMaxPRIGROUPValue+0x88>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a30:	4a04      	ldr	r2, [pc, #16]	; (8003a44 <vSetVarulMaxPRIGROUPValue+0x88>)
 8003a32:	6013      	str	r3, [r2, #0]
}
 8003a34:	bf00      	nop
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	e000e400 	.word	0xe000e400
 8003a44:	20000270 	.word	0x20000270

08003a48 <vPortValidateInterruptPriority>:

////////
#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003a4e:	f3ef 8305 	mrs	r3, IPSR
 8003a52:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b0f      	cmp	r3, #15
 8003a58:	d914      	bls.n	8003a84 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003a5a:	4a17      	ldr	r2, [pc, #92]	; (8003ab8 <vPortValidateInterruptPriority+0x70>)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4413      	add	r3, r2
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003a64:	4b15      	ldr	r3, [pc, #84]	; (8003abc <vPortValidateInterruptPriority+0x74>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	7afa      	ldrb	r2, [r7, #11]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d20a      	bcs.n	8003a84 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	607b      	str	r3, [r7, #4]
    }
 8003a80:	bf00      	nop
 8003a82:	e7fe      	b.n	8003a82 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003a84:	4b0e      	ldr	r3, [pc, #56]	; (8003ac0 <vPortValidateInterruptPriority+0x78>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a8c:	4b0d      	ldr	r3, [pc, #52]	; (8003ac4 <vPortValidateInterruptPriority+0x7c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d90a      	bls.n	8003aaa <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a98:	f383 8811 	msr	BASEPRI, r3
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	603b      	str	r3, [r7, #0]
    }
 8003aa6:	bf00      	nop
 8003aa8:	e7fe      	b.n	8003aa8 <vPortValidateInterruptPriority+0x60>
    }
 8003aaa:	bf00      	nop
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	e000e3f0 	.word	0xe000e3f0
 8003abc:	2000026c 	.word	0x2000026c
 8003ac0:	e000ed0c 	.word	0xe000ed0c
 8003ac4:	20000270 	.word	0x20000270

08003ac8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08a      	sub	sp, #40	; 0x28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003ad4:	f7fe fd44 	bl	8002560 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003ad8:	4b53      	ldr	r3, [pc, #332]	; (8003c28 <pvPortMalloc+0x160>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003ae0:	f000 f908 	bl	8003cf4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d012      	beq.n	8003b10 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003aea:	2208      	movs	r2, #8
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	3308      	adds	r3, #8
 8003af6:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	43db      	mvns	r3, r3
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d804      	bhi.n	8003b0c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	4413      	add	r3, r2
 8003b08:	607b      	str	r3, [r7, #4]
 8003b0a:	e001      	b.n	8003b10 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	db70      	blt.n	8003bf8 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d06d      	beq.n	8003bf8 <pvPortMalloc+0x130>
 8003b1c:	4b43      	ldr	r3, [pc, #268]	; (8003c2c <pvPortMalloc+0x164>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d868      	bhi.n	8003bf8 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003b26:	4b42      	ldr	r3, [pc, #264]	; (8003c30 <pvPortMalloc+0x168>)
 8003b28:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003b2a:	4b41      	ldr	r3, [pc, #260]	; (8003c30 <pvPortMalloc+0x168>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b30:	e004      	b.n	8003b3c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d903      	bls.n	8003b4e <pvPortMalloc+0x86>
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f1      	bne.n	8003b32 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003b4e:	4b36      	ldr	r3, [pc, #216]	; (8003c28 <pvPortMalloc+0x160>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d04f      	beq.n	8003bf8 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2208      	movs	r2, #8
 8003b5e:	4413      	add	r3, r2
 8003b60:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	1ad2      	subs	r2, r2, r3
 8003b72:	2308      	movs	r3, #8
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d91f      	bls.n	8003bba <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4413      	add	r3, r2
 8003b80:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <pvPortMalloc+0xda>
        __asm volatile
 8003b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b90:	f383 8811 	msr	BASEPRI, r3
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	613b      	str	r3, [r7, #16]
    }
 8003b9e:	bf00      	nop
 8003ba0:	e7fe      	b.n	8003ba0 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	1ad2      	subs	r2, r2, r3
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003bb4:	6978      	ldr	r0, [r7, #20]
 8003bb6:	f000 f8f9 	bl	8003dac <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003bba:	4b1c      	ldr	r3, [pc, #112]	; (8003c2c <pvPortMalloc+0x164>)
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	4a19      	ldr	r2, [pc, #100]	; (8003c2c <pvPortMalloc+0x164>)
 8003bc6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003bc8:	4b18      	ldr	r3, [pc, #96]	; (8003c2c <pvPortMalloc+0x164>)
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	4b19      	ldr	r3, [pc, #100]	; (8003c34 <pvPortMalloc+0x16c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d203      	bcs.n	8003bdc <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003bd4:	4b15      	ldr	r3, [pc, #84]	; (8003c2c <pvPortMalloc+0x164>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a16      	ldr	r2, [pc, #88]	; (8003c34 <pvPortMalloc+0x16c>)
 8003bda:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003bee:	4b12      	ldr	r3, [pc, #72]	; (8003c38 <pvPortMalloc+0x170>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	4a10      	ldr	r2, [pc, #64]	; (8003c38 <pvPortMalloc+0x170>)
 8003bf6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003bf8:	f7fe fcc0 	bl	800257c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <pvPortMalloc+0x154>
        __asm volatile
 8003c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0a:	f383 8811 	msr	BASEPRI, r3
 8003c0e:	f3bf 8f6f 	isb	sy
 8003c12:	f3bf 8f4f 	dsb	sy
 8003c16:	60fb      	str	r3, [r7, #12]
    }
 8003c18:	bf00      	nop
 8003c1a:	e7fe      	b.n	8003c1a <pvPortMalloc+0x152>
    return pvReturn;
 8003c1c:	69fb      	ldr	r3, [r7, #28]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3728      	adds	r7, #40	; 0x28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	2000ca7c 	.word	0x2000ca7c
 8003c2c:	2000ca80 	.word	0x2000ca80
 8003c30:	2000ca74 	.word	0x2000ca74
 8003c34:	2000ca84 	.word	0x2000ca84
 8003c38:	2000ca88 	.word	0x2000ca88

08003c3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d049      	beq.n	8003ce2 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003c4e:	2308      	movs	r3, #8
 8003c50:	425b      	negs	r3, r3
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4413      	add	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	db0a      	blt.n	8003c7a <vPortFree+0x3e>
        __asm volatile
 8003c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c68:	f383 8811 	msr	BASEPRI, r3
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	60fb      	str	r3, [r7, #12]
    }
 8003c76:	bf00      	nop
 8003c78:	e7fe      	b.n	8003c78 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <vPortFree+0x5c>
        __asm volatile
 8003c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c86:	f383 8811 	msr	BASEPRI, r3
 8003c8a:	f3bf 8f6f 	isb	sy
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	60bb      	str	r3, [r7, #8]
    }
 8003c94:	bf00      	nop
 8003c96:	e7fe      	b.n	8003c96 <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	0fdb      	lsrs	r3, r3, #31
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d01c      	beq.n	8003ce2 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d118      	bne.n	8003ce2 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003cbc:	f7fe fc50 	bl	8002560 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	4b09      	ldr	r3, [pc, #36]	; (8003cec <vPortFree+0xb0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4413      	add	r3, r2
 8003cca:	4a08      	ldr	r2, [pc, #32]	; (8003cec <vPortFree+0xb0>)
 8003ccc:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003cce:	6938      	ldr	r0, [r7, #16]
 8003cd0:	f000 f86c 	bl	8003dac <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003cd4:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <vPortFree+0xb4>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	4a05      	ldr	r2, [pc, #20]	; (8003cf0 <vPortFree+0xb4>)
 8003cdc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003cde:	f7fe fc4d 	bl	800257c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003ce2:	bf00      	nop
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	2000ca80 	.word	0x2000ca80
 8003cf0:	2000ca8c 	.word	0x2000ca8c

08003cf4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003cfa:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8003cfe:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003d00:	4b25      	ldr	r3, [pc, #148]	; (8003d98 <prvHeapInit+0xa4>)
 8003d02:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00c      	beq.n	8003d28 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	3307      	adds	r3, #7
 8003d12:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f023 0307 	bic.w	r3, r3, #7
 8003d1a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	4a1d      	ldr	r2, [pc, #116]	; (8003d98 <prvHeapInit+0xa4>)
 8003d24:	4413      	add	r3, r2
 8003d26:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d2c:	4a1b      	ldr	r2, [pc, #108]	; (8003d9c <prvHeapInit+0xa8>)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003d32:	4b1a      	ldr	r3, [pc, #104]	; (8003d9c <prvHeapInit+0xa8>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003d40:	2208      	movs	r2, #8
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	1a9b      	subs	r3, r3, r2
 8003d46:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f023 0307 	bic.w	r3, r3, #7
 8003d4e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4a13      	ldr	r2, [pc, #76]	; (8003da0 <prvHeapInit+0xac>)
 8003d54:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003d56:	4b12      	ldr	r3, [pc, #72]	; (8003da0 <prvHeapInit+0xac>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003d5e:	4b10      	ldr	r3, [pc, #64]	; (8003da0 <prvHeapInit+0xac>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	1ad2      	subs	r2, r2, r3
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003d74:	4b0a      	ldr	r3, [pc, #40]	; (8003da0 <prvHeapInit+0xac>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	4a08      	ldr	r2, [pc, #32]	; (8003da4 <prvHeapInit+0xb0>)
 8003d82:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	4a07      	ldr	r2, [pc, #28]	; (8003da8 <prvHeapInit+0xb4>)
 8003d8a:	6013      	str	r3, [r2, #0]
}
 8003d8c:	bf00      	nop
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	20000274 	.word	0x20000274
 8003d9c:	2000ca74 	.word	0x2000ca74
 8003da0:	2000ca7c 	.word	0x2000ca7c
 8003da4:	2000ca84 	.word	0x2000ca84
 8003da8:	2000ca80 	.word	0x2000ca80

08003dac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003db4:	4b28      	ldr	r3, [pc, #160]	; (8003e58 <prvInsertBlockIntoFreeList+0xac>)
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	e002      	b.n	8003dc0 <prvInsertBlockIntoFreeList+0x14>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d8f7      	bhi.n	8003dba <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d108      	bne.n	8003dee <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	441a      	add	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	441a      	add	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d118      	bne.n	8003e34 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	4b15      	ldr	r3, [pc, #84]	; (8003e5c <prvInsertBlockIntoFreeList+0xb0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d00d      	beq.n	8003e2a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	441a      	add	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	e008      	b.n	8003e3c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003e2a:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <prvInsertBlockIntoFreeList+0xb0>)
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	e003      	b.n	8003e3c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d002      	beq.n	8003e4a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e4a:	bf00      	nop
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	2000ca74 	.word	0x2000ca74
 8003e5c:	2000ca7c 	.word	0x2000ca7c

08003e60 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003e64:	4803      	ldr	r0, [pc, #12]	; (8003e74 <_cbSendSystemDesc+0x14>)
 8003e66:	f001 fb31 	bl	80054cc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003e6a:	4803      	ldr	r0, [pc, #12]	; (8003e78 <_cbSendSystemDesc+0x18>)
 8003e6c:	f001 fb2e 	bl	80054cc <SEGGER_SYSVIEW_SendSysDesc>
}
 8003e70:	bf00      	nop
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	080064fc 	.word	0x080064fc
 8003e78:	08006530 	.word	0x08006530

08003e7c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003e80:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <SEGGER_SYSVIEW_Conf+0x20>)
 8003e82:	6818      	ldr	r0, [r3, #0]
 8003e84:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <SEGGER_SYSVIEW_Conf+0x20>)
 8003e86:	6819      	ldr	r1, [r3, #0]
 8003e88:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <SEGGER_SYSVIEW_Conf+0x24>)
 8003e8a:	4a06      	ldr	r2, [pc, #24]	; (8003ea4 <SEGGER_SYSVIEW_Conf+0x28>)
 8003e8c:	f000 fe9c 	bl	8004bc8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003e90:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003e94:	f000 fedc 	bl	8004c50 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003e98:	bf00      	nop
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	20000000 	.word	0x20000000
 8003ea0:	08003e61 	.word	0x08003e61
 8003ea4:	080065cc 	.word	0x080065cc

08003ea8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003eae:	2300      	movs	r3, #0
 8003eb0:	607b      	str	r3, [r7, #4]
 8003eb2:	e033      	b.n	8003f1c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003eb4:	491e      	ldr	r1, [pc, #120]	; (8003f30 <_cbSendTaskList+0x88>)
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	6818      	ldr	r0, [r3, #0]
 8003ec4:	491a      	ldr	r1, [pc, #104]	; (8003f30 <_cbSendTaskList+0x88>)
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	6819      	ldr	r1, [r3, #0]
 8003ed6:	4c16      	ldr	r4, [pc, #88]	; (8003f30 <_cbSendTaskList+0x88>)
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	4613      	mov	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4423      	add	r3, r4
 8003ee4:	3308      	adds	r3, #8
 8003ee6:	681c      	ldr	r4, [r3, #0]
 8003ee8:	4d11      	ldr	r5, [pc, #68]	; (8003f30 <_cbSendTaskList+0x88>)
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	4613      	mov	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	442b      	add	r3, r5
 8003ef6:	330c      	adds	r3, #12
 8003ef8:	681d      	ldr	r5, [r3, #0]
 8003efa:	4e0d      	ldr	r6, [pc, #52]	; (8003f30 <_cbSendTaskList+0x88>)
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	4613      	mov	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4433      	add	r3, r6
 8003f08:	3310      	adds	r3, #16
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	462b      	mov	r3, r5
 8003f10:	4622      	mov	r2, r4
 8003f12:	f000 f8bd 	bl	8004090 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	607b      	str	r3, [r7, #4]
 8003f1c:	4b05      	ldr	r3, [pc, #20]	; (8003f34 <_cbSendTaskList+0x8c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d3c6      	bcc.n	8003eb4 <_cbSendTaskList+0xc>
  }
}
 8003f26:	bf00      	nop
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f30:	2000ca90 	.word	0x2000ca90
 8003f34:	2000cb30 	.word	0x2000cb30

08003f38 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f3c:	b082      	sub	sp, #8
 8003f3e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003f40:	f7fe fc1e 	bl	8002780 <xTaskGetTickCountFromISR>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2200      	movs	r2, #0
 8003f48:	469a      	mov	sl, r3
 8003f4a:	4693      	mov	fp, r2
 8003f4c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003f50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	f04f 0a00 	mov.w	sl, #0
 8003f5c:	f04f 0b00 	mov.w	fp, #0
 8003f60:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003f64:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003f68:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003f6c:	4652      	mov	r2, sl
 8003f6e:	465b      	mov	r3, fp
 8003f70:	1a14      	subs	r4, r2, r0
 8003f72:	eb63 0501 	sbc.w	r5, r3, r1
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	f04f 0300 	mov.w	r3, #0
 8003f7e:	00ab      	lsls	r3, r5, #2
 8003f80:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003f84:	00a2      	lsls	r2, r4, #2
 8003f86:	4614      	mov	r4, r2
 8003f88:	461d      	mov	r5, r3
 8003f8a:	eb14 0800 	adds.w	r8, r4, r0
 8003f8e:	eb45 0901 	adc.w	r9, r5, r1
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	f04f 0300 	mov.w	r3, #0
 8003f9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fa6:	4690      	mov	r8, r2
 8003fa8:	4699      	mov	r9, r3
 8003faa:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003fae:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003fb2:	4610      	mov	r0, r2
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003fc0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af02      	add	r7, sp, #8
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003fce:	2205      	movs	r2, #5
 8003fd0:	492b      	ldr	r1, [pc, #172]	; (8004080 <SYSVIEW_AddTask+0xc0>)
 8003fd2:	68b8      	ldr	r0, [r7, #8]
 8003fd4:	f001 fd3a 	bl	8005a4c <memcmp>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d04b      	beq.n	8004076 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003fde:	4b29      	ldr	r3, [pc, #164]	; (8004084 <SYSVIEW_AddTask+0xc4>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b07      	cmp	r3, #7
 8003fe4:	d903      	bls.n	8003fee <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003fe6:	4828      	ldr	r0, [pc, #160]	; (8004088 <SYSVIEW_AddTask+0xc8>)
 8003fe8:	f001 fc9e 	bl	8005928 <SEGGER_SYSVIEW_Warn>
    return;
 8003fec:	e044      	b.n	8004078 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003fee:	4b25      	ldr	r3, [pc, #148]	; (8004084 <SYSVIEW_AddTask+0xc4>)
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	4926      	ldr	r1, [pc, #152]	; (800408c <SYSVIEW_AddTask+0xcc>)
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004002:	4b20      	ldr	r3, [pc, #128]	; (8004084 <SYSVIEW_AddTask+0xc4>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	4921      	ldr	r1, [pc, #132]	; (800408c <SYSVIEW_AddTask+0xcc>)
 8004008:	4613      	mov	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	3304      	adds	r3, #4
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004018:	4b1a      	ldr	r3, [pc, #104]	; (8004084 <SYSVIEW_AddTask+0xc4>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	491b      	ldr	r1, [pc, #108]	; (800408c <SYSVIEW_AddTask+0xcc>)
 800401e:	4613      	mov	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	440b      	add	r3, r1
 8004028:	3308      	adds	r3, #8
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800402e:	4b15      	ldr	r3, [pc, #84]	; (8004084 <SYSVIEW_AddTask+0xc4>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	4916      	ldr	r1, [pc, #88]	; (800408c <SYSVIEW_AddTask+0xcc>)
 8004034:	4613      	mov	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	330c      	adds	r3, #12
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004044:	4b0f      	ldr	r3, [pc, #60]	; (8004084 <SYSVIEW_AddTask+0xc4>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	4910      	ldr	r1, [pc, #64]	; (800408c <SYSVIEW_AddTask+0xcc>)
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	440b      	add	r3, r1
 8004054:	3310      	adds	r3, #16
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800405a:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <SYSVIEW_AddTask+0xc4>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3301      	adds	r3, #1
 8004060:	4a08      	ldr	r2, [pc, #32]	; (8004084 <SYSVIEW_AddTask+0xc4>)
 8004062:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	68b9      	ldr	r1, [r7, #8]
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 f80e 	bl	8004090 <SYSVIEW_SendTaskInfo>
 8004074:	e000      	b.n	8004078 <SYSVIEW_AddTask+0xb8>
    return;
 8004076:	bf00      	nop

}
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	08006540 	.word	0x08006540
 8004084:	2000cb30 	.word	0x2000cb30
 8004088:	08006548 	.word	0x08006548
 800408c:	2000ca90 	.word	0x2000ca90

08004090 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004090:	b580      	push	{r7, lr}
 8004092:	b08a      	sub	sp, #40	; 0x28
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
 800409c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800409e:	f107 0314 	add.w	r3, r7, #20
 80040a2:	2214      	movs	r2, #20
 80040a4:	2100      	movs	r1, #0
 80040a6:	4618      	mov	r0, r3
 80040a8:	f001 fcee 	bl	8005a88 <memset>
  TaskInfo.TaskID     = TaskID;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80040bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040be:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80040c0:	f107 0314 	add.w	r3, r7, #20
 80040c4:	4618      	mov	r0, r3
 80040c6:	f001 f909 	bl	80052dc <SEGGER_SYSVIEW_SendTaskInfo>
}
 80040ca:	bf00      	nop
 80040cc:	3728      	adds	r7, #40	; 0x28
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
	...

080040d4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80040da:	4b26      	ldr	r3, [pc, #152]	; (8004174 <_DoInit+0xa0>)
 80040dc:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80040de:	22a8      	movs	r2, #168	; 0xa8
 80040e0:	2100      	movs	r1, #0
 80040e2:	6838      	ldr	r0, [r7, #0]
 80040e4:	f001 fcd0 	bl	8005a88 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2203      	movs	r2, #3
 80040ec:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2203      	movs	r2, #3
 80040f2:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	4a20      	ldr	r2, [pc, #128]	; (8004178 <_DoInit+0xa4>)
 80040f8:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	4a1f      	ldr	r2, [pc, #124]	; (800417c <_DoInit+0xa8>)
 80040fe:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004106:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	2200      	movs	r2, #0
 800410c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2200      	movs	r2, #0
 8004112:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2200      	movs	r2, #0
 8004118:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	4a16      	ldr	r2, [pc, #88]	; (8004178 <_DoInit+0xa4>)
 800411e:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	4a17      	ldr	r2, [pc, #92]	; (8004180 <_DoInit+0xac>)
 8004124:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2210      	movs	r2, #16
 800412a:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2200      	movs	r2, #0
 8004130:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2200      	movs	r2, #0
 8004136:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2200      	movs	r2, #0
 800413c:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800413e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004142:	2300      	movs	r3, #0
 8004144:	607b      	str	r3, [r7, #4]
 8004146:	e00c      	b.n	8004162 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f1c3 030f 	rsb	r3, r3, #15
 800414e:	4a0d      	ldr	r2, [pc, #52]	; (8004184 <_DoInit+0xb0>)
 8004150:	5cd1      	ldrb	r1, [r2, r3]
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4413      	add	r3, r2
 8004158:	460a      	mov	r2, r1
 800415a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3301      	adds	r3, #1
 8004160:	607b      	str	r3, [r7, #4]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b0f      	cmp	r3, #15
 8004166:	d9ef      	bls.n	8004148 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004168:	f3bf 8f5f 	dmb	sy
}
 800416c:	bf00      	nop
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	2000cb34 	.word	0x2000cb34
 8004178:	08006598 	.word	0x08006598
 800417c:	2000cbdc 	.word	0x2000cbdc
 8004180:	2000cfdc 	.word	0x2000cfdc
 8004184:	080065d4 	.word	0x080065d4

08004188 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004188:	b580      	push	{r7, lr}
 800418a:	b08a      	sub	sp, #40	; 0x28
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004194:	2300      	movs	r3, #0
 8004196:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d905      	bls.n	80041b8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	3b01      	subs	r3, #1
 80041b4:	627b      	str	r3, [r7, #36]	; 0x24
 80041b6:	e007      	b.n	80041c8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	69b9      	ldr	r1, [r7, #24]
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	1acb      	subs	r3, r1, r3
 80041c2:	4413      	add	r3, r2
 80041c4:	3b01      	subs	r3, #1
 80041c6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d2:	4293      	cmp	r3, r2
 80041d4:	bf28      	it	cs
 80041d6:	4613      	movcs	r3, r2
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80041da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4293      	cmp	r3, r2
 80041e0:	bf28      	it	cs
 80041e2:	4613      	movcs	r3, r2
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	4413      	add	r3, r2
 80041ee:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80041f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f2:	68b9      	ldr	r1, [r7, #8]
 80041f4:	6978      	ldr	r0, [r7, #20]
 80041f6:	f001 fc39 	bl	8005a6c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80041fa:	6a3a      	ldr	r2, [r7, #32]
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	4413      	add	r3, r2
 8004200:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	4413      	add	r3, r2
 8004208:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	4413      	add	r3, r2
 8004218:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	69fa      	ldr	r2, [r7, #28]
 8004220:	429a      	cmp	r2, r3
 8004222:	d101      	bne.n	8004228 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004224:	2300      	movs	r3, #0
 8004226:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004228:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	69fa      	ldr	r2, [r7, #28]
 8004230:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1b2      	bne.n	800419e <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004238:	6a3b      	ldr	r3, [r7, #32]
}
 800423a:	4618      	mov	r0, r3
 800423c:	3728      	adds	r7, #40	; 0x28
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004242:	b580      	push	{r7, lr}
 8004244:	b088      	sub	sp, #32
 8004246:	af00      	add	r7, sp, #0
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	429a      	cmp	r2, r3
 8004264:	d911      	bls.n	800428a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	4413      	add	r3, r2
 800426e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	68b9      	ldr	r1, [r7, #8]
 8004274:	6938      	ldr	r0, [r7, #16]
 8004276:	f001 fbf9 	bl	8005a6c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800427a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800427e:	69fa      	ldr	r2, [r7, #28]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	441a      	add	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004288:	e01f      	b.n	80042ca <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	4413      	add	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	68b9      	ldr	r1, [r7, #8]
 800429c:	6938      	ldr	r0, [r7, #16]
 800429e:	f001 fbe5 	bl	8005a6c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	4413      	add	r3, r2
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	4619      	mov	r1, r3
 80042ba:	6938      	ldr	r0, [r7, #16]
 80042bc:	f001 fbd6 	bl	8005a6c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80042c0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	60da      	str	r2, [r3, #12]
}
 80042ca:	bf00      	nop
 80042cc:	3720      	adds	r7, #32
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80042d2:	b480      	push	{r7}
 80042d4:	b087      	sub	sp, #28
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d808      	bhi.n	8004300 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	1ad2      	subs	r2, r2, r3
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	4413      	add	r3, r2
 80042fa:	3b01      	subs	r3, #1
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	e004      	b.n	800430a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	3b01      	subs	r3, #1
 8004308:	617b      	str	r3, [r7, #20]
  }
  return r;
 800430a:	697b      	ldr	r3, [r7, #20]
}
 800430c:	4618      	mov	r0, r3
 800430e:	371c      	adds	r7, #28
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004318:	b580      	push	{r7, lr}
 800431a:	b08c      	sub	sp, #48	; 0x30
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004324:	4b3e      	ldr	r3, [pc, #248]	; (8004420 <SEGGER_RTT_ReadNoLock+0x108>)
 8004326:	623b      	str	r3, [r7, #32]
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <SEGGER_RTT_ReadNoLock+0x1e>
 8004332:	f7ff fecf 	bl	80040d4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4613      	mov	r3, r2
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	4413      	add	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	3360      	adds	r3, #96	; 0x60
 8004342:	4a37      	ldr	r2, [pc, #220]	; (8004420 <SEGGER_RTT_ReadNoLock+0x108>)
 8004344:	4413      	add	r3, r2
 8004346:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004358:	2300      	movs	r3, #0
 800435a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800435c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	429a      	cmp	r2, r3
 8004362:	d92b      	bls.n	80043bc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4293      	cmp	r3, r2
 8004374:	bf28      	it	cs
 8004376:	4613      	movcs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004380:	4413      	add	r3, r2
 8004382:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	6939      	ldr	r1, [r7, #16]
 8004388:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800438a:	f001 fb6f 	bl	8005a6c <memcpy>
    NumBytesRead += NumBytesRem;
 800438e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	4413      	add	r3, r2
 8004394:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	4413      	add	r3, r2
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80043a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	4413      	add	r3, r2
 80043ac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d101      	bne.n	80043bc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80043b8:	2300      	movs	r3, #0
 80043ba:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4293      	cmp	r3, r2
 80043ca:	bf28      	it	cs
 80043cc:	4613      	movcs	r3, r2
 80043ce:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d019      	beq.n	800440a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043dc:	4413      	add	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	6939      	ldr	r1, [r7, #16]
 80043e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043e6:	f001 fb41 	bl	8005a6c <memcpy>
    NumBytesRead += NumBytesRem;
 80043ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	4413      	add	r3, r2
 80043f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80043f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	4413      	add	r3, r2
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004402:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	4413      	add	r3, r2
 8004408:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800440a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004414:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004418:	4618      	mov	r0, r3
 800441a:	3730      	adds	r7, #48	; 0x30
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	2000cb34 	.word	0x2000cb34

08004424 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004424:	b580      	push	{r7, lr}
 8004426:	b088      	sub	sp, #32
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	4613      	mov	r3, r2
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	4413      	add	r3, r2
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	4a1f      	ldr	r2, [pc, #124]	; (80044c0 <SEGGER_RTT_WriteNoLock+0x9c>)
 8004442:	4413      	add	r3, r2
 8004444:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d029      	beq.n	80044a2 <SEGGER_RTT_WriteNoLock+0x7e>
 800444e:	2b02      	cmp	r3, #2
 8004450:	d82e      	bhi.n	80044b0 <SEGGER_RTT_WriteNoLock+0x8c>
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <SEGGER_RTT_WriteNoLock+0x38>
 8004456:	2b01      	cmp	r3, #1
 8004458:	d013      	beq.n	8004482 <SEGGER_RTT_WriteNoLock+0x5e>
 800445a:	e029      	b.n	80044b0 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800445c:	6978      	ldr	r0, [r7, #20]
 800445e:	f7ff ff38 	bl	80042d2 <_GetAvailWriteSpace>
 8004462:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	429a      	cmp	r2, r3
 800446a:	d202      	bcs.n	8004472 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800446c:	2300      	movs	r3, #0
 800446e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004470:	e021      	b.n	80044b6 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	69b9      	ldr	r1, [r7, #24]
 800447a:	6978      	ldr	r0, [r7, #20]
 800447c:	f7ff fee1 	bl	8004242 <_WriteNoCheck>
    break;
 8004480:	e019      	b.n	80044b6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004482:	6978      	ldr	r0, [r7, #20]
 8004484:	f7ff ff25 	bl	80042d2 <_GetAvailWriteSpace>
 8004488:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	4293      	cmp	r3, r2
 8004490:	bf28      	it	cs
 8004492:	4613      	movcs	r3, r2
 8004494:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004496:	69fa      	ldr	r2, [r7, #28]
 8004498:	69b9      	ldr	r1, [r7, #24]
 800449a:	6978      	ldr	r0, [r7, #20]
 800449c:	f7ff fed1 	bl	8004242 <_WriteNoCheck>
    break;
 80044a0:	e009      	b.n	80044b6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	69b9      	ldr	r1, [r7, #24]
 80044a6:	6978      	ldr	r0, [r7, #20]
 80044a8:	f7ff fe6e 	bl	8004188 <_WriteBlocking>
 80044ac:	61f8      	str	r0, [r7, #28]
    break;
 80044ae:	e002      	b.n	80044b6 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80044b0:	2300      	movs	r3, #0
 80044b2:	61fb      	str	r3, [r7, #28]
    break;
 80044b4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80044b6:	69fb      	ldr	r3, [r7, #28]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3720      	adds	r7, #32
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	2000cb34 	.word	0x2000cb34

080044c4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b088      	sub	sp, #32
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80044d0:	4b0e      	ldr	r3, [pc, #56]	; (800450c <SEGGER_RTT_Write+0x48>)
 80044d2:	61fb      	str	r3, [r7, #28]
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <SEGGER_RTT_Write+0x1e>
 80044de:	f7ff fdf9 	bl	80040d4 <_DoInit>
  SEGGER_RTT_LOCK();
 80044e2:	f3ef 8311 	mrs	r3, BASEPRI
 80044e6:	f04f 0120 	mov.w	r1, #32
 80044ea:	f381 8811 	msr	BASEPRI, r1
 80044ee:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	68b9      	ldr	r1, [r7, #8]
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f7ff ff95 	bl	8004424 <SEGGER_RTT_WriteNoLock>
 80044fa:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004502:	697b      	ldr	r3, [r7, #20]
}
 8004504:	4618      	mov	r0, r3
 8004506:	3720      	adds	r7, #32
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	2000cb34 	.word	0x2000cb34

08004510 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004510:	b580      	push	{r7, lr}
 8004512:	b088      	sub	sp, #32
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
 800451c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800451e:	4b3d      	ldr	r3, [pc, #244]	; (8004614 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <SEGGER_RTT_AllocUpBuffer+0x20>
 800452c:	f7ff fdd2 	bl	80040d4 <_DoInit>
  SEGGER_RTT_LOCK();
 8004530:	f3ef 8311 	mrs	r3, BASEPRI
 8004534:	f04f 0120 	mov.w	r1, #32
 8004538:	f381 8811 	msr	BASEPRI, r1
 800453c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800453e:	4b35      	ldr	r3, [pc, #212]	; (8004614 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004540:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004542:	2300      	movs	r3, #0
 8004544:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004546:	6939      	ldr	r1, [r7, #16]
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	4613      	mov	r3, r2
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	4413      	add	r3, r2
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	440b      	add	r3, r1
 8004556:	3304      	adds	r3, #4
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d008      	beq.n	8004570 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	3301      	adds	r3, #1
 8004562:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	69fa      	ldr	r2, [r7, #28]
 800456a:	429a      	cmp	r2, r3
 800456c:	dbeb      	blt.n	8004546 <SEGGER_RTT_AllocUpBuffer+0x36>
 800456e:	e000      	b.n	8004572 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004570:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	69fa      	ldr	r2, [r7, #28]
 8004578:	429a      	cmp	r2, r3
 800457a:	da3f      	bge.n	80045fc <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800457c:	6939      	ldr	r1, [r7, #16]
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	4613      	mov	r3, r2
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	4413      	add	r3, r2
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	440b      	add	r3, r1
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004590:	6939      	ldr	r1, [r7, #16]
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	4613      	mov	r3, r2
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	4413      	add	r3, r2
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	440b      	add	r3, r1
 80045a0:	3304      	adds	r3, #4
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80045a6:	6939      	ldr	r1, [r7, #16]
 80045a8:	69fa      	ldr	r2, [r7, #28]
 80045aa:	4613      	mov	r3, r2
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	4413      	add	r3, r2
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	440b      	add	r3, r1
 80045b4:	3320      	adds	r3, #32
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80045ba:	6939      	ldr	r1, [r7, #16]
 80045bc:	69fa      	ldr	r2, [r7, #28]
 80045be:	4613      	mov	r3, r2
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	4413      	add	r3, r2
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	440b      	add	r3, r1
 80045c8:	3328      	adds	r3, #40	; 0x28
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80045ce:	6939      	ldr	r1, [r7, #16]
 80045d0:	69fa      	ldr	r2, [r7, #28]
 80045d2:	4613      	mov	r3, r2
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	4413      	add	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	440b      	add	r3, r1
 80045dc:	3324      	adds	r3, #36	; 0x24
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80045e2:	6939      	ldr	r1, [r7, #16]
 80045e4:	69fa      	ldr	r2, [r7, #28]
 80045e6:	4613      	mov	r3, r2
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	4413      	add	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	440b      	add	r3, r1
 80045f0:	332c      	adds	r3, #44	; 0x2c
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80045f6:	f3bf 8f5f 	dmb	sy
 80045fa:	e002      	b.n	8004602 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80045fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004600:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004608:	69fb      	ldr	r3, [r7, #28]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3720      	adds	r7, #32
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	2000cb34 	.word	0x2000cb34

08004618 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004618:	b580      	push	{r7, lr}
 800461a:	b08a      	sub	sp, #40	; 0x28
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004626:	4b21      	ldr	r3, [pc, #132]	; (80046ac <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004628:	623b      	str	r3, [r7, #32]
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004634:	f7ff fd4e 	bl	80040d4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004638:	4b1c      	ldr	r3, [pc, #112]	; (80046ac <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800463a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d82c      	bhi.n	800469c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004642:	f3ef 8311 	mrs	r3, BASEPRI
 8004646:	f04f 0120 	mov.w	r1, #32
 800464a:	f381 8811 	msr	BASEPRI, r1
 800464e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4613      	mov	r3, r2
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	4413      	add	r3, r2
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	3360      	adds	r3, #96	; 0x60
 800465c:	69fa      	ldr	r2, [r7, #28]
 800465e:	4413      	add	r3, r2
 8004660:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00e      	beq.n	8004686 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2200      	movs	r2, #0
 800467e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2200      	movs	r2, #0
 8004684:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800468a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800468c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004696:	2300      	movs	r3, #0
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
 800469a:	e002      	b.n	80046a2 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800469c:	f04f 33ff 	mov.w	r3, #4294967295
 80046a0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3728      	adds	r7, #40	; 0x28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	2000cb34 	.word	0x2000cb34

080046b0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	60fa      	str	r2, [r7, #12]
 80046c6:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b80      	cmp	r3, #128	; 0x80
 80046cc:	d90a      	bls.n	80046e4 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80046ce:	2380      	movs	r3, #128	; 0x80
 80046d0:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80046d2:	e007      	b.n	80046e4 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	1c53      	adds	r3, r2, #1
 80046d8:	60bb      	str	r3, [r7, #8]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	1c59      	adds	r1, r3, #1
 80046de:	60f9      	str	r1, [r7, #12]
 80046e0:	7812      	ldrb	r2, [r2, #0]
 80046e2:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	1e5a      	subs	r2, r3, #1
 80046e8:	607a      	str	r2, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <_EncodeStr+0x46>
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1ee      	bne.n	80046d4 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8004702:	68fb      	ldr	r3, [r7, #12]
}
 8004704:	4618      	mov	r0, r3
 8004706:	371c      	adds	r7, #28
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3307      	adds	r3, #7
}
 800471c:	4618      	mov	r0, r3
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800472e:	4b35      	ldr	r3, [pc, #212]	; (8004804 <_HandleIncomingPacket+0xdc>)
 8004730:	7e1b      	ldrb	r3, [r3, #24]
 8004732:	4618      	mov	r0, r3
 8004734:	1cfb      	adds	r3, r7, #3
 8004736:	2201      	movs	r2, #1
 8004738:	4619      	mov	r1, r3
 800473a:	f7ff fded 	bl	8004318 <SEGGER_RTT_ReadNoLock>
 800473e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d052      	beq.n	80047ec <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8004746:	78fb      	ldrb	r3, [r7, #3]
 8004748:	2b80      	cmp	r3, #128	; 0x80
 800474a:	d031      	beq.n	80047b0 <_HandleIncomingPacket+0x88>
 800474c:	2b80      	cmp	r3, #128	; 0x80
 800474e:	dc40      	bgt.n	80047d2 <_HandleIncomingPacket+0xaa>
 8004750:	2b07      	cmp	r3, #7
 8004752:	dc15      	bgt.n	8004780 <_HandleIncomingPacket+0x58>
 8004754:	2b00      	cmp	r3, #0
 8004756:	dd3c      	ble.n	80047d2 <_HandleIncomingPacket+0xaa>
 8004758:	3b01      	subs	r3, #1
 800475a:	2b06      	cmp	r3, #6
 800475c:	d839      	bhi.n	80047d2 <_HandleIncomingPacket+0xaa>
 800475e:	a201      	add	r2, pc, #4	; (adr r2, 8004764 <_HandleIncomingPacket+0x3c>)
 8004760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004764:	08004787 	.word	0x08004787
 8004768:	0800478d 	.word	0x0800478d
 800476c:	08004793 	.word	0x08004793
 8004770:	08004799 	.word	0x08004799
 8004774:	0800479f 	.word	0x0800479f
 8004778:	080047a5 	.word	0x080047a5
 800477c:	080047ab 	.word	0x080047ab
 8004780:	2b7f      	cmp	r3, #127	; 0x7f
 8004782:	d035      	beq.n	80047f0 <_HandleIncomingPacket+0xc8>
 8004784:	e025      	b.n	80047d2 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004786:	f000 fc2f 	bl	8004fe8 <SEGGER_SYSVIEW_Start>
      break;
 800478a:	e036      	b.n	80047fa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800478c:	f000 fce6 	bl	800515c <SEGGER_SYSVIEW_Stop>
      break;
 8004790:	e033      	b.n	80047fa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004792:	f000 febf 	bl	8005514 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004796:	e030      	b.n	80047fa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004798:	f000 fe84 	bl	80054a4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800479c:	e02d      	b.n	80047fa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800479e:	f000 fd03 	bl	80051a8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80047a2:	e02a      	b.n	80047fa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80047a4:	f001 f882 	bl	80058ac <SEGGER_SYSVIEW_SendNumModules>
      break;
 80047a8:	e027      	b.n	80047fa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80047aa:	f001 f861 	bl	8005870 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80047ae:	e024      	b.n	80047fa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80047b0:	4b14      	ldr	r3, [pc, #80]	; (8004804 <_HandleIncomingPacket+0xdc>)
 80047b2:	7e1b      	ldrb	r3, [r3, #24]
 80047b4:	4618      	mov	r0, r3
 80047b6:	1cfb      	adds	r3, r7, #3
 80047b8:	2201      	movs	r2, #1
 80047ba:	4619      	mov	r1, r3
 80047bc:	f7ff fdac 	bl	8004318 <SEGGER_RTT_ReadNoLock>
 80047c0:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d015      	beq.n	80047f4 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80047c8:	78fb      	ldrb	r3, [r7, #3]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 ffc6 	bl	800575c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80047d0:	e010      	b.n	80047f4 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80047d2:	78fb      	ldrb	r3, [r7, #3]
 80047d4:	b25b      	sxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	da0e      	bge.n	80047f8 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80047da:	4b0a      	ldr	r3, [pc, #40]	; (8004804 <_HandleIncomingPacket+0xdc>)
 80047dc:	7e1b      	ldrb	r3, [r3, #24]
 80047de:	4618      	mov	r0, r3
 80047e0:	1cfb      	adds	r3, r7, #3
 80047e2:	2201      	movs	r2, #1
 80047e4:	4619      	mov	r1, r3
 80047e6:	f7ff fd97 	bl	8004318 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80047ea:	e005      	b.n	80047f8 <_HandleIncomingPacket+0xd0>
    }
  }
 80047ec:	bf00      	nop
 80047ee:	e004      	b.n	80047fa <_HandleIncomingPacket+0xd2>
      break;
 80047f0:	bf00      	nop
 80047f2:	e002      	b.n	80047fa <_HandleIncomingPacket+0xd2>
      break;
 80047f4:	bf00      	nop
 80047f6:	e000      	b.n	80047fa <_HandleIncomingPacket+0xd2>
      break;
 80047f8:	bf00      	nop
}
 80047fa:	bf00      	nop
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	2000d3f4 	.word	0x2000d3f4

08004808 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004808:	b580      	push	{r7, lr}
 800480a:	b08c      	sub	sp, #48	; 0x30
 800480c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800480e:	2301      	movs	r3, #1
 8004810:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004812:	1d3b      	adds	r3, r7, #4
 8004814:	3301      	adds	r3, #1
 8004816:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800481c:	4b31      	ldr	r3, [pc, #196]	; (80048e4 <_TrySendOverflowPacket+0xdc>)
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	62bb      	str	r3, [r7, #40]	; 0x28
 8004822:	e00b      	b.n	800483c <_TrySendOverflowPacket+0x34>
 8004824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004826:	b2da      	uxtb	r2, r3
 8004828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482a:	1c59      	adds	r1, r3, #1
 800482c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800482e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	701a      	strb	r2, [r3, #0]
 8004836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004838:	09db      	lsrs	r3, r3, #7
 800483a:	62bb      	str	r3, [r7, #40]	; 0x28
 800483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483e:	2b7f      	cmp	r3, #127	; 0x7f
 8004840:	d8f0      	bhi.n	8004824 <_TrySendOverflowPacket+0x1c>
 8004842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]
 800484e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004850:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004852:	4b25      	ldr	r3, [pc, #148]	; (80048e8 <_TrySendOverflowPacket+0xe0>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004858:	4b22      	ldr	r3, [pc, #136]	; (80048e4 <_TrySendOverflowPacket+0xdc>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	627b      	str	r3, [r7, #36]	; 0x24
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	623b      	str	r3, [r7, #32]
 800486a:	e00b      	b.n	8004884 <_TrySendOverflowPacket+0x7c>
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	b2da      	uxtb	r2, r3
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	1c59      	adds	r1, r3, #1
 8004874:	6279      	str	r1, [r7, #36]	; 0x24
 8004876:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	701a      	strb	r2, [r3, #0]
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	09db      	lsrs	r3, r3, #7
 8004882:	623b      	str	r3, [r7, #32]
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	2b7f      	cmp	r3, #127	; 0x7f
 8004888:	d8f0      	bhi.n	800486c <_TrySendOverflowPacket+0x64>
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	627a      	str	r2, [r7, #36]	; 0x24
 8004890:	6a3a      	ldr	r2, [r7, #32]
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	701a      	strb	r2, [r3, #0]
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800489a:	4b12      	ldr	r3, [pc, #72]	; (80048e4 <_TrySendOverflowPacket+0xdc>)
 800489c:	785b      	ldrb	r3, [r3, #1]
 800489e:	4618      	mov	r0, r3
 80048a0:	1d3b      	adds	r3, r7, #4
 80048a2:	69fa      	ldr	r2, [r7, #28]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	461a      	mov	r2, r3
 80048a8:	1d3b      	adds	r3, r7, #4
 80048aa:	4619      	mov	r1, r3
 80048ac:	f7fb fc98 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80048b0:	4603      	mov	r3, r0
 80048b2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d009      	beq.n	80048ce <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80048ba:	4a0a      	ldr	r2, [pc, #40]	; (80048e4 <_TrySendOverflowPacket+0xdc>)
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80048c0:	4b08      	ldr	r3, [pc, #32]	; (80048e4 <_TrySendOverflowPacket+0xdc>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	3b01      	subs	r3, #1
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	4b06      	ldr	r3, [pc, #24]	; (80048e4 <_TrySendOverflowPacket+0xdc>)
 80048ca:	701a      	strb	r2, [r3, #0]
 80048cc:	e004      	b.n	80048d8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80048ce:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <_TrySendOverflowPacket+0xdc>)
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	3301      	adds	r3, #1
 80048d4:	4a03      	ldr	r2, [pc, #12]	; (80048e4 <_TrySendOverflowPacket+0xdc>)
 80048d6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80048d8:	693b      	ldr	r3, [r7, #16]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3730      	adds	r7, #48	; 0x30
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	2000d3f4 	.word	0x2000d3f4
 80048e8:	e0001004 	.word	0xe0001004

080048ec <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08a      	sub	sp, #40	; 0x28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80048f8:	4b98      	ldr	r3, [pc, #608]	; (8004b5c <_SendPacket+0x270>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d010      	beq.n	8004922 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004900:	4b96      	ldr	r3, [pc, #600]	; (8004b5c <_SendPacket+0x270>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 812d 	beq.w	8004b64 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800490a:	4b94      	ldr	r3, [pc, #592]	; (8004b5c <_SendPacket+0x270>)
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d109      	bne.n	8004926 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004912:	f7ff ff79 	bl	8004808 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004916:	4b91      	ldr	r3, [pc, #580]	; (8004b5c <_SendPacket+0x270>)
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	2b01      	cmp	r3, #1
 800491c:	f040 8124 	bne.w	8004b68 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004920:	e001      	b.n	8004926 <_SendPacket+0x3a>
    goto Send;
 8004922:	bf00      	nop
 8004924:	e000      	b.n	8004928 <_SendPacket+0x3c>
Send:
 8004926:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b1f      	cmp	r3, #31
 800492c:	d809      	bhi.n	8004942 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800492e:	4b8b      	ldr	r3, [pc, #556]	; (8004b5c <_SendPacket+0x270>)
 8004930:	69da      	ldr	r2, [r3, #28]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	fa22 f303 	lsr.w	r3, r2, r3
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	f040 8115 	bne.w	8004b6c <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b17      	cmp	r3, #23
 8004946:	d807      	bhi.n	8004958 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	3b01      	subs	r3, #1
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	b2da      	uxtb	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	701a      	strb	r2, [r3, #0]
 8004956:	e0c4      	b.n	8004ae2 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	2b7f      	cmp	r3, #127	; 0x7f
 8004964:	d912      	bls.n	800498c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	09da      	lsrs	r2, r3, #7
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	3b01      	subs	r3, #1
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	b2d2      	uxtb	r2, r2
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	b2db      	uxtb	r3, r3
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	3a01      	subs	r2, #1
 800497e:	60fa      	str	r2, [r7, #12]
 8004980:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004984:	b2da      	uxtb	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	701a      	strb	r2, [r3, #0]
 800498a:	e006      	b.n	800499a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	3b01      	subs	r3, #1
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	b2da      	uxtb	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b7e      	cmp	r3, #126	; 0x7e
 800499e:	d807      	bhi.n	80049b0 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	3b01      	subs	r3, #1
 80049a4:	60fb      	str	r3, [r7, #12]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	701a      	strb	r2, [r3, #0]
 80049ae:	e098      	b.n	8004ae2 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049b6:	d212      	bcs.n	80049de <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	09da      	lsrs	r2, r3, #7
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	3b01      	subs	r3, #1
 80049c0:	60fb      	str	r3, [r7, #12]
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	3a01      	subs	r2, #1
 80049d0:	60fa      	str	r2, [r7, #12]
 80049d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	701a      	strb	r2, [r3, #0]
 80049dc:	e081      	b.n	8004ae2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049e4:	d21d      	bcs.n	8004a22 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	0b9a      	lsrs	r2, r3, #14
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3b01      	subs	r3, #1
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	09db      	lsrs	r3, r3, #7
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	3a01      	subs	r2, #1
 8004a00:	60fa      	str	r2, [r7, #12]
 8004a02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	3a01      	subs	r2, #1
 8004a14:	60fa      	str	r2, [r7, #12]
 8004a16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	701a      	strb	r2, [r3, #0]
 8004a20:	e05f      	b.n	8004ae2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a28:	d228      	bcs.n	8004a7c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	0d5a      	lsrs	r2, r3, #21
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	3b01      	subs	r3, #1
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	0b9b      	lsrs	r3, r3, #14
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	3a01      	subs	r2, #1
 8004a44:	60fa      	str	r2, [r7, #12]
 8004a46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	09db      	lsrs	r3, r3, #7
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	3a01      	subs	r2, #1
 8004a5a:	60fa      	str	r2, [r7, #12]
 8004a5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	3a01      	subs	r2, #1
 8004a6e:	60fa      	str	r2, [r7, #12]
 8004a70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	701a      	strb	r2, [r3, #0]
 8004a7a:	e032      	b.n	8004ae2 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	0f1a      	lsrs	r2, r3, #28
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	b2d2      	uxtb	r2, r2
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	0d5b      	lsrs	r3, r3, #21
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	3a01      	subs	r2, #1
 8004a96:	60fa      	str	r2, [r7, #12]
 8004a98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	0b9b      	lsrs	r3, r3, #14
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	3a01      	subs	r2, #1
 8004aac:	60fa      	str	r2, [r7, #12]
 8004aae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	09db      	lsrs	r3, r3, #7
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	3a01      	subs	r2, #1
 8004ac2:	60fa      	str	r2, [r7, #12]
 8004ac4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	3a01      	subs	r2, #1
 8004ad6:	60fa      	str	r2, [r7, #12]
 8004ad8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004ae2:	4b1f      	ldr	r3, [pc, #124]	; (8004b60 <_SendPacket+0x274>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004ae8:	4b1c      	ldr	r3, [pc, #112]	; (8004b5c <_SendPacket+0x270>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	627b      	str	r3, [r7, #36]	; 0x24
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	623b      	str	r3, [r7, #32]
 8004afa:	e00b      	b.n	8004b14 <_SendPacket+0x228>
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	1c59      	adds	r1, r3, #1
 8004b04:	6279      	str	r1, [r7, #36]	; 0x24
 8004b06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	701a      	strb	r2, [r3, #0]
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	09db      	lsrs	r3, r3, #7
 8004b12:	623b      	str	r3, [r7, #32]
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	2b7f      	cmp	r3, #127	; 0x7f
 8004b18:	d8f0      	bhi.n	8004afc <_SendPacket+0x210>
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	627a      	str	r2, [r7, #36]	; 0x24
 8004b20:	6a3a      	ldr	r2, [r7, #32]
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	701a      	strb	r2, [r3, #0]
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004b2a:	4b0c      	ldr	r3, [pc, #48]	; (8004b5c <_SendPacket+0x270>)
 8004b2c:	785b      	ldrb	r3, [r3, #1]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	461a      	mov	r2, r3
 8004b38:	68f9      	ldr	r1, [r7, #12]
 8004b3a:	f7fb fb51 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004b3e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004b46:	4a05      	ldr	r2, [pc, #20]	; (8004b5c <_SendPacket+0x270>)
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	60d3      	str	r3, [r2, #12]
 8004b4c:	e00f      	b.n	8004b6e <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004b4e:	4b03      	ldr	r3, [pc, #12]	; (8004b5c <_SendPacket+0x270>)
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	3301      	adds	r3, #1
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	4b01      	ldr	r3, [pc, #4]	; (8004b5c <_SendPacket+0x270>)
 8004b58:	701a      	strb	r2, [r3, #0]
 8004b5a:	e008      	b.n	8004b6e <_SendPacket+0x282>
 8004b5c:	2000d3f4 	.word	0x2000d3f4
 8004b60:	e0001004 	.word	0xe0001004
    goto SendDone;
 8004b64:	bf00      	nop
 8004b66:	e002      	b.n	8004b6e <_SendPacket+0x282>
      goto SendDone;
 8004b68:	bf00      	nop
 8004b6a:	e000      	b.n	8004b6e <_SendPacket+0x282>
      goto SendDone;
 8004b6c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004b6e:	4b14      	ldr	r3, [pc, #80]	; (8004bc0 <_SendPacket+0x2d4>)
 8004b70:	7e1b      	ldrb	r3, [r3, #24]
 8004b72:	4619      	mov	r1, r3
 8004b74:	4a13      	ldr	r2, [pc, #76]	; (8004bc4 <_SendPacket+0x2d8>)
 8004b76:	460b      	mov	r3, r1
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	440b      	add	r3, r1
 8004b7c:	00db      	lsls	r3, r3, #3
 8004b7e:	4413      	add	r3, r2
 8004b80:	336c      	adds	r3, #108	; 0x6c
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	4b0e      	ldr	r3, [pc, #56]	; (8004bc0 <_SendPacket+0x2d4>)
 8004b86:	7e1b      	ldrb	r3, [r3, #24]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	490e      	ldr	r1, [pc, #56]	; (8004bc4 <_SendPacket+0x2d8>)
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	4403      	add	r3, r0
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	440b      	add	r3, r1
 8004b96:	3370      	adds	r3, #112	; 0x70
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d00b      	beq.n	8004bb6 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004b9e:	4b08      	ldr	r3, [pc, #32]	; (8004bc0 <_SendPacket+0x2d4>)
 8004ba0:	789b      	ldrb	r3, [r3, #2]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d107      	bne.n	8004bb6 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004ba6:	4b06      	ldr	r3, [pc, #24]	; (8004bc0 <_SendPacket+0x2d4>)
 8004ba8:	2201      	movs	r2, #1
 8004baa:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004bac:	f7ff fdbc 	bl	8004728 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004bb0:	4b03      	ldr	r3, [pc, #12]	; (8004bc0 <_SendPacket+0x2d4>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004bb6:	bf00      	nop
 8004bb8:	3728      	adds	r7, #40	; 0x28
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	2000d3f4 	.word	0x2000d3f4
 8004bc4:	2000cb34 	.word	0x2000cb34

08004bc8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af02      	add	r7, sp, #8
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
 8004bd4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bdc:	4917      	ldr	r1, [pc, #92]	; (8004c3c <SEGGER_SYSVIEW_Init+0x74>)
 8004bde:	4818      	ldr	r0, [pc, #96]	; (8004c40 <SEGGER_SYSVIEW_Init+0x78>)
 8004be0:	f7ff fc96 	bl	8004510 <SEGGER_RTT_AllocUpBuffer>
 8004be4:	4603      	mov	r3, r0
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	4b16      	ldr	r3, [pc, #88]	; (8004c44 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bea:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004bec:	4b15      	ldr	r3, [pc, #84]	; (8004c44 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bee:	785a      	ldrb	r2, [r3, #1]
 8004bf0:	4b14      	ldr	r3, [pc, #80]	; (8004c44 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bf2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004bf4:	4b13      	ldr	r3, [pc, #76]	; (8004c44 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bf6:	7e1b      	ldrb	r3, [r3, #24]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	2308      	movs	r3, #8
 8004c00:	4a11      	ldr	r2, [pc, #68]	; (8004c48 <SEGGER_SYSVIEW_Init+0x80>)
 8004c02:	490f      	ldr	r1, [pc, #60]	; (8004c40 <SEGGER_SYSVIEW_Init+0x78>)
 8004c04:	f7ff fd08 	bl	8004618 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004c08:	4b0e      	ldr	r3, [pc, #56]	; (8004c44 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004c0e:	4b0f      	ldr	r3, [pc, #60]	; (8004c4c <SEGGER_SYSVIEW_Init+0x84>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a0c      	ldr	r2, [pc, #48]	; (8004c44 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c14:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004c16:	4a0b      	ldr	r2, [pc, #44]	; (8004c44 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004c1c:	4a09      	ldr	r2, [pc, #36]	; (8004c44 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004c22:	4a08      	ldr	r2, [pc, #32]	; (8004c44 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004c28:	4a06      	ldr	r2, [pc, #24]	; (8004c44 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004c2e:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004c34:	bf00      	nop
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	2000cfec 	.word	0x2000cfec
 8004c40:	080065ac 	.word	0x080065ac
 8004c44:	2000d3f4 	.word	0x2000d3f4
 8004c48:	2000d3ec 	.word	0x2000d3ec
 8004c4c:	e0001004 	.word	0xe0001004

08004c50 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004c58:	4a04      	ldr	r2, [pc, #16]	; (8004c6c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6113      	str	r3, [r2, #16]
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	2000d3f4 	.word	0x2000d3f4

08004c70 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c78:	f3ef 8311 	mrs	r3, BASEPRI
 8004c7c:	f04f 0120 	mov.w	r1, #32
 8004c80:	f381 8811 	msr	BASEPRI, r1
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	4808      	ldr	r0, [pc, #32]	; (8004ca8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004c88:	f7ff fd42 	bl	8004710 <_PreparePacket>
 8004c8c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	68b9      	ldr	r1, [r7, #8]
 8004c92:	68b8      	ldr	r0, [r7, #8]
 8004c94:	f7ff fe2a 	bl	80048ec <_SendPacket>
  RECORD_END();
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f383 8811 	msr	BASEPRI, r3
}
 8004c9e:	bf00      	nop
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	2000d424 	.word	0x2000d424

08004cac <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b088      	sub	sp, #32
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004cb6:	f3ef 8311 	mrs	r3, BASEPRI
 8004cba:	f04f 0120 	mov.w	r1, #32
 8004cbe:	f381 8811 	msr	BASEPRI, r1
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	4816      	ldr	r0, [pc, #88]	; (8004d20 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004cc6:	f7ff fd23 	bl	8004710 <_PreparePacket>
 8004cca:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	61fb      	str	r3, [r7, #28]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	61bb      	str	r3, [r7, #24]
 8004cd8:	e00b      	b.n	8004cf2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	1c59      	adds	r1, r3, #1
 8004ce2:	61f9      	str	r1, [r7, #28]
 8004ce4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ce8:	b2d2      	uxtb	r2, r2
 8004cea:	701a      	strb	r2, [r3, #0]
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	09db      	lsrs	r3, r3, #7
 8004cf0:	61bb      	str	r3, [r7, #24]
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	2b7f      	cmp	r3, #127	; 0x7f
 8004cf6:	d8f0      	bhi.n	8004cda <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	61fa      	str	r2, [r7, #28]
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	b2d2      	uxtb	r2, r2
 8004d02:	701a      	strb	r2, [r3, #0]
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	68f9      	ldr	r1, [r7, #12]
 8004d0c:	6938      	ldr	r0, [r7, #16]
 8004d0e:	f7ff fded 	bl	80048ec <_SendPacket>
  RECORD_END();
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f383 8811 	msr	BASEPRI, r3
}
 8004d18:	bf00      	nop
 8004d1a:	3720      	adds	r7, #32
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	2000d424 	.word	0x2000d424

08004d24 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08c      	sub	sp, #48	; 0x30
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d30:	f3ef 8311 	mrs	r3, BASEPRI
 8004d34:	f04f 0120 	mov.w	r1, #32
 8004d38:	f381 8811 	msr	BASEPRI, r1
 8004d3c:	61fb      	str	r3, [r7, #28]
 8004d3e:	4825      	ldr	r0, [pc, #148]	; (8004dd4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004d40:	f7ff fce6 	bl	8004710 <_PreparePacket>
 8004d44:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d52:	e00b      	b.n	8004d6c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5a:	1c59      	adds	r1, r3, #1
 8004d5c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d62:	b2d2      	uxtb	r2, r2
 8004d64:	701a      	strb	r2, [r3, #0]
 8004d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d68:	09db      	lsrs	r3, r3, #7
 8004d6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6e:	2b7f      	cmp	r3, #127	; 0x7f
 8004d70:	d8f0      	bhi.n	8004d54 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	701a      	strb	r2, [r3, #0]
 8004d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d80:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	627b      	str	r3, [r7, #36]	; 0x24
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	623b      	str	r3, [r7, #32]
 8004d8a:	e00b      	b.n	8004da4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	1c59      	adds	r1, r3, #1
 8004d94:	6279      	str	r1, [r7, #36]	; 0x24
 8004d96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	701a      	strb	r2, [r3, #0]
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	09db      	lsrs	r3, r3, #7
 8004da2:	623b      	str	r3, [r7, #32]
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	2b7f      	cmp	r3, #127	; 0x7f
 8004da8:	d8f0      	bhi.n	8004d8c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	627a      	str	r2, [r7, #36]	; 0x24
 8004db0:	6a3a      	ldr	r2, [r7, #32]
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	701a      	strb	r2, [r3, #0]
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	6979      	ldr	r1, [r7, #20]
 8004dbe:	69b8      	ldr	r0, [r7, #24]
 8004dc0:	f7ff fd94 	bl	80048ec <_SendPacket>
  RECORD_END();
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	f383 8811 	msr	BASEPRI, r3
}
 8004dca:	bf00      	nop
 8004dcc:	3730      	adds	r7, #48	; 0x30
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	2000d424 	.word	0x2000d424

08004dd8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08e      	sub	sp, #56	; 0x38
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004de6:	f3ef 8311 	mrs	r3, BASEPRI
 8004dea:	f04f 0120 	mov.w	r1, #32
 8004dee:	f381 8811 	msr	BASEPRI, r1
 8004df2:	61fb      	str	r3, [r7, #28]
 8004df4:	4832      	ldr	r0, [pc, #200]	; (8004ec0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8004df6:	f7ff fc8b 	bl	8004710 <_PreparePacket>
 8004dfa:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	637b      	str	r3, [r7, #52]	; 0x34
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	633b      	str	r3, [r7, #48]	; 0x30
 8004e08:	e00b      	b.n	8004e22 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e10:	1c59      	adds	r1, r3, #1
 8004e12:	6379      	str	r1, [r7, #52]	; 0x34
 8004e14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	701a      	strb	r2, [r3, #0]
 8004e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1e:	09db      	lsrs	r3, r3, #7
 8004e20:	633b      	str	r3, [r7, #48]	; 0x30
 8004e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e24:	2b7f      	cmp	r3, #127	; 0x7f
 8004e26:	d8f0      	bhi.n	8004e0a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	637a      	str	r2, [r7, #52]	; 0x34
 8004e2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e30:	b2d2      	uxtb	r2, r2
 8004e32:	701a      	strb	r2, [r3, #0]
 8004e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e36:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e40:	e00b      	b.n	8004e5a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8004e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e48:	1c59      	adds	r1, r3, #1
 8004e4a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e50:	b2d2      	uxtb	r2, r2
 8004e52:	701a      	strb	r2, [r3, #0]
 8004e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e56:	09db      	lsrs	r3, r3, #7
 8004e58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e5e:	d8f0      	bhi.n	8004e42 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e68:	b2d2      	uxtb	r2, r2
 8004e6a:	701a      	strb	r2, [r3, #0]
 8004e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	627b      	str	r3, [r7, #36]	; 0x24
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	623b      	str	r3, [r7, #32]
 8004e78:	e00b      	b.n	8004e92 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	1c59      	adds	r1, r3, #1
 8004e82:	6279      	str	r1, [r7, #36]	; 0x24
 8004e84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e88:	b2d2      	uxtb	r2, r2
 8004e8a:	701a      	strb	r2, [r3, #0]
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	09db      	lsrs	r3, r3, #7
 8004e90:	623b      	str	r3, [r7, #32]
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	2b7f      	cmp	r3, #127	; 0x7f
 8004e96:	d8f0      	bhi.n	8004e7a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	627a      	str	r2, [r7, #36]	; 0x24
 8004e9e:	6a3a      	ldr	r2, [r7, #32]
 8004ea0:	b2d2      	uxtb	r2, r2
 8004ea2:	701a      	strb	r2, [r3, #0]
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	6979      	ldr	r1, [r7, #20]
 8004eac:	69b8      	ldr	r0, [r7, #24]
 8004eae:	f7ff fd1d 	bl	80048ec <_SendPacket>
  RECORD_END();
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	f383 8811 	msr	BASEPRI, r3
}
 8004eb8:	bf00      	nop
 8004eba:	3738      	adds	r7, #56	; 0x38
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	2000d424 	.word	0x2000d424

08004ec4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b090      	sub	sp, #64	; 0x40
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004ed2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ed6:	f04f 0120 	mov.w	r1, #32
 8004eda:	f381 8811 	msr	BASEPRI, r1
 8004ede:	61fb      	str	r3, [r7, #28]
 8004ee0:	4840      	ldr	r0, [pc, #256]	; (8004fe4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004ee2:	f7ff fc15 	bl	8004710 <_PreparePacket>
 8004ee6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ef4:	e00b      	b.n	8004f0e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004efc:	1c59      	adds	r1, r3, #1
 8004efe:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004f00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	701a      	strb	r2, [r3, #0]
 8004f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0a:	09db      	lsrs	r3, r3, #7
 8004f0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f10:	2b7f      	cmp	r3, #127	; 0x7f
 8004f12:	d8f0      	bhi.n	8004ef6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f1c:	b2d2      	uxtb	r2, r2
 8004f1e:	701a      	strb	r2, [r3, #0]
 8004f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f22:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	637b      	str	r3, [r7, #52]	; 0x34
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f2c:	e00b      	b.n	8004f46 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f34:	1c59      	adds	r1, r3, #1
 8004f36:	6379      	str	r1, [r7, #52]	; 0x34
 8004f38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f3c:	b2d2      	uxtb	r2, r2
 8004f3e:	701a      	strb	r2, [r3, #0]
 8004f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f42:	09db      	lsrs	r3, r3, #7
 8004f44:	633b      	str	r3, [r7, #48]	; 0x30
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	2b7f      	cmp	r3, #127	; 0x7f
 8004f4a:	d8f0      	bhi.n	8004f2e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	637a      	str	r2, [r7, #52]	; 0x34
 8004f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f54:	b2d2      	uxtb	r2, r2
 8004f56:	701a      	strb	r2, [r3, #0]
 8004f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f5a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f64:	e00b      	b.n	8004f7e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6c:	1c59      	adds	r1, r3, #1
 8004f6e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f74:	b2d2      	uxtb	r2, r2
 8004f76:	701a      	strb	r2, [r3, #0]
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	09db      	lsrs	r3, r3, #7
 8004f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f80:	2b7f      	cmp	r3, #127	; 0x7f
 8004f82:	d8f0      	bhi.n	8004f66 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f8c:	b2d2      	uxtb	r2, r2
 8004f8e:	701a      	strb	r2, [r3, #0]
 8004f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f92:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	627b      	str	r3, [r7, #36]	; 0x24
 8004f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f9a:	623b      	str	r3, [r7, #32]
 8004f9c:	e00b      	b.n	8004fb6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	1c59      	adds	r1, r3, #1
 8004fa6:	6279      	str	r1, [r7, #36]	; 0x24
 8004fa8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fac:	b2d2      	uxtb	r2, r2
 8004fae:	701a      	strb	r2, [r3, #0]
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	09db      	lsrs	r3, r3, #7
 8004fb4:	623b      	str	r3, [r7, #32]
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	2b7f      	cmp	r3, #127	; 0x7f
 8004fba:	d8f0      	bhi.n	8004f9e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	627a      	str	r2, [r7, #36]	; 0x24
 8004fc2:	6a3a      	ldr	r2, [r7, #32]
 8004fc4:	b2d2      	uxtb	r2, r2
 8004fc6:	701a      	strb	r2, [r3, #0]
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	6979      	ldr	r1, [r7, #20]
 8004fd0:	69b8      	ldr	r0, [r7, #24]
 8004fd2:	f7ff fc8b 	bl	80048ec <_SendPacket>
  RECORD_END();
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	f383 8811 	msr	BASEPRI, r3
}
 8004fdc:	bf00      	nop
 8004fde:	3740      	adds	r7, #64	; 0x40
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	2000d424 	.word	0x2000d424

08004fe8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08c      	sub	sp, #48	; 0x30
 8004fec:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004fee:	4b58      	ldr	r3, [pc, #352]	; (8005150 <SEGGER_SYSVIEW_Start+0x168>)
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004ff4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ff8:	f04f 0120 	mov.w	r1, #32
 8004ffc:	f381 8811 	msr	BASEPRI, r1
 8005000:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005002:	4b53      	ldr	r3, [pc, #332]	; (8005150 <SEGGER_SYSVIEW_Start+0x168>)
 8005004:	785b      	ldrb	r3, [r3, #1]
 8005006:	220a      	movs	r2, #10
 8005008:	4952      	ldr	r1, [pc, #328]	; (8005154 <SEGGER_SYSVIEW_Start+0x16c>)
 800500a:	4618      	mov	r0, r3
 800500c:	f7fb f8e8 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005016:	200a      	movs	r0, #10
 8005018:	f7ff fe2a 	bl	8004c70 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800501c:	f3ef 8311 	mrs	r3, BASEPRI
 8005020:	f04f 0120 	mov.w	r1, #32
 8005024:	f381 8811 	msr	BASEPRI, r1
 8005028:	60bb      	str	r3, [r7, #8]
 800502a:	484b      	ldr	r0, [pc, #300]	; (8005158 <SEGGER_SYSVIEW_Start+0x170>)
 800502c:	f7ff fb70 	bl	8004710 <_PreparePacket>
 8005030:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	62fb      	str	r3, [r7, #44]	; 0x2c
 800503a:	4b45      	ldr	r3, [pc, #276]	; (8005150 <SEGGER_SYSVIEW_Start+0x168>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005040:	e00b      	b.n	800505a <SEGGER_SYSVIEW_Start+0x72>
 8005042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005044:	b2da      	uxtb	r2, r3
 8005046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005048:	1c59      	adds	r1, r3, #1
 800504a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800504c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	701a      	strb	r2, [r3, #0]
 8005054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005056:	09db      	lsrs	r3, r3, #7
 8005058:	62bb      	str	r3, [r7, #40]	; 0x28
 800505a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505c:	2b7f      	cmp	r3, #127	; 0x7f
 800505e:	d8f0      	bhi.n	8005042 <SEGGER_SYSVIEW_Start+0x5a>
 8005060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005066:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005068:	b2d2      	uxtb	r2, r2
 800506a:	701a      	strb	r2, [r3, #0]
 800506c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	627b      	str	r3, [r7, #36]	; 0x24
 8005074:	4b36      	ldr	r3, [pc, #216]	; (8005150 <SEGGER_SYSVIEW_Start+0x168>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	623b      	str	r3, [r7, #32]
 800507a:	e00b      	b.n	8005094 <SEGGER_SYSVIEW_Start+0xac>
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	b2da      	uxtb	r2, r3
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	1c59      	adds	r1, r3, #1
 8005084:	6279      	str	r1, [r7, #36]	; 0x24
 8005086:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	09db      	lsrs	r3, r3, #7
 8005092:	623b      	str	r3, [r7, #32]
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	2b7f      	cmp	r3, #127	; 0x7f
 8005098:	d8f0      	bhi.n	800507c <SEGGER_SYSVIEW_Start+0x94>
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	1c5a      	adds	r2, r3, #1
 800509e:	627a      	str	r2, [r7, #36]	; 0x24
 80050a0:	6a3a      	ldr	r2, [r7, #32]
 80050a2:	b2d2      	uxtb	r2, r2
 80050a4:	701a      	strb	r2, [r3, #0]
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	61fb      	str	r3, [r7, #28]
 80050ae:	4b28      	ldr	r3, [pc, #160]	; (8005150 <SEGGER_SYSVIEW_Start+0x168>)
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	61bb      	str	r3, [r7, #24]
 80050b4:	e00b      	b.n	80050ce <SEGGER_SYSVIEW_Start+0xe6>
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	1c59      	adds	r1, r3, #1
 80050be:	61f9      	str	r1, [r7, #28]
 80050c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	701a      	strb	r2, [r3, #0]
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	09db      	lsrs	r3, r3, #7
 80050cc:	61bb      	str	r3, [r7, #24]
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	2b7f      	cmp	r3, #127	; 0x7f
 80050d2:	d8f0      	bhi.n	80050b6 <SEGGER_SYSVIEW_Start+0xce>
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	1c5a      	adds	r2, r3, #1
 80050d8:	61fa      	str	r2, [r7, #28]
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	b2d2      	uxtb	r2, r2
 80050de:	701a      	strb	r2, [r3, #0]
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	2300      	movs	r3, #0
 80050ea:	613b      	str	r3, [r7, #16]
 80050ec:	e00b      	b.n	8005106 <SEGGER_SYSVIEW_Start+0x11e>
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	1c59      	adds	r1, r3, #1
 80050f6:	6179      	str	r1, [r7, #20]
 80050f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	701a      	strb	r2, [r3, #0]
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	09db      	lsrs	r3, r3, #7
 8005104:	613b      	str	r3, [r7, #16]
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	2b7f      	cmp	r3, #127	; 0x7f
 800510a:	d8f0      	bhi.n	80050ee <SEGGER_SYSVIEW_Start+0x106>
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	1c5a      	adds	r2, r3, #1
 8005110:	617a      	str	r2, [r7, #20]
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	701a      	strb	r2, [r3, #0]
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800511c:	2218      	movs	r2, #24
 800511e:	6839      	ldr	r1, [r7, #0]
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff fbe3 	bl	80048ec <_SendPacket>
      RECORD_END();
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800512c:	4b08      	ldr	r3, [pc, #32]	; (8005150 <SEGGER_SYSVIEW_Start+0x168>)
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005134:	4b06      	ldr	r3, [pc, #24]	; (8005150 <SEGGER_SYSVIEW_Start+0x168>)
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800513a:	f000 f9eb 	bl	8005514 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800513e:	f000 f9b1 	bl	80054a4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005142:	f000 fbb3 	bl	80058ac <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005146:	bf00      	nop
 8005148:	3730      	adds	r7, #48	; 0x30
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	2000d3f4 	.word	0x2000d3f4
 8005154:	080065e8 	.word	0x080065e8
 8005158:	2000d424 	.word	0x2000d424

0800515c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005162:	f3ef 8311 	mrs	r3, BASEPRI
 8005166:	f04f 0120 	mov.w	r1, #32
 800516a:	f381 8811 	msr	BASEPRI, r1
 800516e:	607b      	str	r3, [r7, #4]
 8005170:	480b      	ldr	r0, [pc, #44]	; (80051a0 <SEGGER_SYSVIEW_Stop+0x44>)
 8005172:	f7ff facd 	bl	8004710 <_PreparePacket>
 8005176:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005178:	4b0a      	ldr	r3, [pc, #40]	; (80051a4 <SEGGER_SYSVIEW_Stop+0x48>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d007      	beq.n	8005190 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005180:	220b      	movs	r2, #11
 8005182:	6839      	ldr	r1, [r7, #0]
 8005184:	6838      	ldr	r0, [r7, #0]
 8005186:	f7ff fbb1 	bl	80048ec <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800518a:	4b06      	ldr	r3, [pc, #24]	; (80051a4 <SEGGER_SYSVIEW_Stop+0x48>)
 800518c:	2200      	movs	r2, #0
 800518e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f383 8811 	msr	BASEPRI, r3
}
 8005196:	bf00      	nop
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	2000d424 	.word	0x2000d424
 80051a4:	2000d3f4 	.word	0x2000d3f4

080051a8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b08c      	sub	sp, #48	; 0x30
 80051ac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80051ae:	f3ef 8311 	mrs	r3, BASEPRI
 80051b2:	f04f 0120 	mov.w	r1, #32
 80051b6:	f381 8811 	msr	BASEPRI, r1
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	4845      	ldr	r0, [pc, #276]	; (80052d4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80051be:	f7ff faa7 	bl	8004710 <_PreparePacket>
 80051c2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051cc:	4b42      	ldr	r3, [pc, #264]	; (80052d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80051d2:	e00b      	b.n	80051ec <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80051d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051da:	1c59      	adds	r1, r3, #1
 80051dc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80051de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051e2:	b2d2      	uxtb	r2, r2
 80051e4:	701a      	strb	r2, [r3, #0]
 80051e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e8:	09db      	lsrs	r3, r3, #7
 80051ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ee:	2b7f      	cmp	r3, #127	; 0x7f
 80051f0:	d8f0      	bhi.n	80051d4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80051f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f4:	1c5a      	adds	r2, r3, #1
 80051f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051fa:	b2d2      	uxtb	r2, r2
 80051fc:	701a      	strb	r2, [r3, #0]
 80051fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005200:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	627b      	str	r3, [r7, #36]	; 0x24
 8005206:	4b34      	ldr	r3, [pc, #208]	; (80052d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	623b      	str	r3, [r7, #32]
 800520c:	e00b      	b.n	8005226 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	b2da      	uxtb	r2, r3
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	1c59      	adds	r1, r3, #1
 8005216:	6279      	str	r1, [r7, #36]	; 0x24
 8005218:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800521c:	b2d2      	uxtb	r2, r2
 800521e:	701a      	strb	r2, [r3, #0]
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	09db      	lsrs	r3, r3, #7
 8005224:	623b      	str	r3, [r7, #32]
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	2b7f      	cmp	r3, #127	; 0x7f
 800522a:	d8f0      	bhi.n	800520e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	1c5a      	adds	r2, r3, #1
 8005230:	627a      	str	r2, [r7, #36]	; 0x24
 8005232:	6a3a      	ldr	r2, [r7, #32]
 8005234:	b2d2      	uxtb	r2, r2
 8005236:	701a      	strb	r2, [r3, #0]
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	61fb      	str	r3, [r7, #28]
 8005240:	4b25      	ldr	r3, [pc, #148]	; (80052d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	61bb      	str	r3, [r7, #24]
 8005246:	e00b      	b.n	8005260 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	b2da      	uxtb	r2, r3
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	1c59      	adds	r1, r3, #1
 8005250:	61f9      	str	r1, [r7, #28]
 8005252:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005256:	b2d2      	uxtb	r2, r2
 8005258:	701a      	strb	r2, [r3, #0]
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	09db      	lsrs	r3, r3, #7
 800525e:	61bb      	str	r3, [r7, #24]
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	2b7f      	cmp	r3, #127	; 0x7f
 8005264:	d8f0      	bhi.n	8005248 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	61fa      	str	r2, [r7, #28]
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	701a      	strb	r2, [r3, #0]
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	617b      	str	r3, [r7, #20]
 800527a:	2300      	movs	r3, #0
 800527c:	613b      	str	r3, [r7, #16]
 800527e:	e00b      	b.n	8005298 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	b2da      	uxtb	r2, r3
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	1c59      	adds	r1, r3, #1
 8005288:	6179      	str	r1, [r7, #20]
 800528a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	701a      	strb	r2, [r3, #0]
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	09db      	lsrs	r3, r3, #7
 8005296:	613b      	str	r3, [r7, #16]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	2b7f      	cmp	r3, #127	; 0x7f
 800529c:	d8f0      	bhi.n	8005280 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	1c5a      	adds	r2, r3, #1
 80052a2:	617a      	str	r2, [r7, #20]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	701a      	strb	r2, [r3, #0]
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80052ae:	2218      	movs	r2, #24
 80052b0:	6879      	ldr	r1, [r7, #4]
 80052b2:	68b8      	ldr	r0, [r7, #8]
 80052b4:	f7ff fb1a 	bl	80048ec <_SendPacket>
  RECORD_END();
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80052be:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80052c6:	4b04      	ldr	r3, [pc, #16]	; (80052d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	4798      	blx	r3
  }
}
 80052cc:	bf00      	nop
 80052ce:	3730      	adds	r7, #48	; 0x30
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	2000d424 	.word	0x2000d424
 80052d8:	2000d3f4 	.word	0x2000d3f4

080052dc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80052dc:	b580      	push	{r7, lr}
 80052de:	b092      	sub	sp, #72	; 0x48
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80052e4:	f3ef 8311 	mrs	r3, BASEPRI
 80052e8:	f04f 0120 	mov.w	r1, #32
 80052ec:	f381 8811 	msr	BASEPRI, r1
 80052f0:	617b      	str	r3, [r7, #20]
 80052f2:	486a      	ldr	r0, [pc, #424]	; (800549c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80052f4:	f7ff fa0c 	bl	8004710 <_PreparePacket>
 80052f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	647b      	str	r3, [r7, #68]	; 0x44
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	4b66      	ldr	r3, [pc, #408]	; (80054a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	643b      	str	r3, [r7, #64]	; 0x40
 800530e:	e00b      	b.n	8005328 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005312:	b2da      	uxtb	r2, r3
 8005314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005316:	1c59      	adds	r1, r3, #1
 8005318:	6479      	str	r1, [r7, #68]	; 0x44
 800531a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	701a      	strb	r2, [r3, #0]
 8005322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005324:	09db      	lsrs	r3, r3, #7
 8005326:	643b      	str	r3, [r7, #64]	; 0x40
 8005328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800532a:	2b7f      	cmp	r3, #127	; 0x7f
 800532c:	d8f0      	bhi.n	8005310 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800532e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	647a      	str	r2, [r7, #68]	; 0x44
 8005334:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	701a      	strb	r2, [r3, #0]
 800533a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800533c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	63bb      	str	r3, [r7, #56]	; 0x38
 8005348:	e00b      	b.n	8005362 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800534a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534c:	b2da      	uxtb	r2, r3
 800534e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005350:	1c59      	adds	r1, r3, #1
 8005352:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005354:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005358:	b2d2      	uxtb	r2, r2
 800535a:	701a      	strb	r2, [r3, #0]
 800535c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535e:	09db      	lsrs	r3, r3, #7
 8005360:	63bb      	str	r3, [r7, #56]	; 0x38
 8005362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005364:	2b7f      	cmp	r3, #127	; 0x7f
 8005366:	d8f0      	bhi.n	800534a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800536e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005370:	b2d2      	uxtb	r2, r2
 8005372:	701a      	strb	r2, [r3, #0]
 8005374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005376:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2220      	movs	r2, #32
 800537e:	4619      	mov	r1, r3
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f7ff f995 	bl	80046b0 <_EncodeStr>
 8005386:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005388:	2209      	movs	r2, #9
 800538a:	68f9      	ldr	r1, [r7, #12]
 800538c:	6938      	ldr	r0, [r7, #16]
 800538e:	f7ff faad 	bl	80048ec <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	637b      	str	r3, [r7, #52]	; 0x34
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	4b40      	ldr	r3, [pc, #256]	; (80054a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	633b      	str	r3, [r7, #48]	; 0x30
 80053a6:	e00b      	b.n	80053c0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80053a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ae:	1c59      	adds	r1, r3, #1
 80053b0:	6379      	str	r1, [r7, #52]	; 0x34
 80053b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	701a      	strb	r2, [r3, #0]
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	09db      	lsrs	r3, r3, #7
 80053be:	633b      	str	r3, [r7, #48]	; 0x30
 80053c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c2:	2b7f      	cmp	r3, #127	; 0x7f
 80053c4:	d8f0      	bhi.n	80053a8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80053c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c8:	1c5a      	adds	r2, r3, #1
 80053ca:	637a      	str	r2, [r7, #52]	; 0x34
 80053cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	701a      	strb	r2, [r3, #0]
 80053d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	62bb      	str	r3, [r7, #40]	; 0x28
 80053e0:	e00b      	b.n	80053fa <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e8:	1c59      	adds	r1, r3, #1
 80053ea:	62f9      	str	r1, [r7, #44]	; 0x2c
 80053ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	701a      	strb	r2, [r3, #0]
 80053f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f6:	09db      	lsrs	r3, r3, #7
 80053f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80053fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fc:	2b7f      	cmp	r3, #127	; 0x7f
 80053fe:	d8f0      	bhi.n	80053e2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005408:	b2d2      	uxtb	r2, r2
 800540a:	701a      	strb	r2, [r3, #0]
 800540c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	627b      	str	r3, [r7, #36]	; 0x24
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	623b      	str	r3, [r7, #32]
 800541a:	e00b      	b.n	8005434 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	b2da      	uxtb	r2, r3
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	1c59      	adds	r1, r3, #1
 8005424:	6279      	str	r1, [r7, #36]	; 0x24
 8005426:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	701a      	strb	r2, [r3, #0]
 800542e:	6a3b      	ldr	r3, [r7, #32]
 8005430:	09db      	lsrs	r3, r3, #7
 8005432:	623b      	str	r3, [r7, #32]
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	2b7f      	cmp	r3, #127	; 0x7f
 8005438:	d8f0      	bhi.n	800541c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543c:	1c5a      	adds	r2, r3, #1
 800543e:	627a      	str	r2, [r7, #36]	; 0x24
 8005440:	6a3a      	ldr	r2, [r7, #32]
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	701a      	strb	r2, [r3, #0]
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	61fb      	str	r3, [r7, #28]
 800544e:	2300      	movs	r3, #0
 8005450:	61bb      	str	r3, [r7, #24]
 8005452:	e00b      	b.n	800546c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	b2da      	uxtb	r2, r3
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	1c59      	adds	r1, r3, #1
 800545c:	61f9      	str	r1, [r7, #28]
 800545e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005462:	b2d2      	uxtb	r2, r2
 8005464:	701a      	strb	r2, [r3, #0]
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	09db      	lsrs	r3, r3, #7
 800546a:	61bb      	str	r3, [r7, #24]
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	2b7f      	cmp	r3, #127	; 0x7f
 8005470:	d8f0      	bhi.n	8005454 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	61fa      	str	r2, [r7, #28]
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	b2d2      	uxtb	r2, r2
 800547c:	701a      	strb	r2, [r3, #0]
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005482:	2215      	movs	r2, #21
 8005484:	68f9      	ldr	r1, [r7, #12]
 8005486:	6938      	ldr	r0, [r7, #16]
 8005488:	f7ff fa30 	bl	80048ec <_SendPacket>
  RECORD_END();
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f383 8811 	msr	BASEPRI, r3
}
 8005492:	bf00      	nop
 8005494:	3748      	adds	r7, #72	; 0x48
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	2000d424 	.word	0x2000d424
 80054a0:	2000d3f4 	.word	0x2000d3f4

080054a4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80054a8:	4b07      	ldr	r3, [pc, #28]	; (80054c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d008      	beq.n	80054c2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80054b0:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80054ba:	4b03      	ldr	r3, [pc, #12]	; (80054c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	4798      	blx	r3
  }
}
 80054c2:	bf00      	nop
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	2000d3f4 	.word	0x2000d3f4

080054cc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80054d4:	f3ef 8311 	mrs	r3, BASEPRI
 80054d8:	f04f 0120 	mov.w	r1, #32
 80054dc:	f381 8811 	msr	BASEPRI, r1
 80054e0:	617b      	str	r3, [r7, #20]
 80054e2:	480b      	ldr	r0, [pc, #44]	; (8005510 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80054e4:	f7ff f914 	bl	8004710 <_PreparePacket>
 80054e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80054ea:	2280      	movs	r2, #128	; 0x80
 80054ec:	6879      	ldr	r1, [r7, #4]
 80054ee:	6938      	ldr	r0, [r7, #16]
 80054f0:	f7ff f8de 	bl	80046b0 <_EncodeStr>
 80054f4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80054f6:	220e      	movs	r2, #14
 80054f8:	68f9      	ldr	r1, [r7, #12]
 80054fa:	6938      	ldr	r0, [r7, #16]
 80054fc:	f7ff f9f6 	bl	80048ec <_SendPacket>
  RECORD_END();
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f383 8811 	msr	BASEPRI, r3
}
 8005506:	bf00      	nop
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	2000d424 	.word	0x2000d424

08005514 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005514:	b590      	push	{r4, r7, lr}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800551a:	4b15      	ldr	r3, [pc, #84]	; (8005570 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d01a      	beq.n	8005558 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005522:	4b13      	ldr	r3, [pc, #76]	; (8005570 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d015      	beq.n	8005558 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800552c:	4b10      	ldr	r3, [pc, #64]	; (8005570 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4798      	blx	r3
 8005534:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005538:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800553a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800553e:	f04f 0200 	mov.w	r2, #0
 8005542:	f04f 0300 	mov.w	r3, #0
 8005546:	000a      	movs	r2, r1
 8005548:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800554a:	4613      	mov	r3, r2
 800554c:	461a      	mov	r2, r3
 800554e:	4621      	mov	r1, r4
 8005550:	200d      	movs	r0, #13
 8005552:	f7ff fbe7 	bl	8004d24 <SEGGER_SYSVIEW_RecordU32x2>
 8005556:	e006      	b.n	8005566 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005558:	4b06      	ldr	r3, [pc, #24]	; (8005574 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4619      	mov	r1, r3
 800555e:	200c      	movs	r0, #12
 8005560:	f7ff fba4 	bl	8004cac <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005564:	bf00      	nop
 8005566:	bf00      	nop
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	bd90      	pop	{r4, r7, pc}
 800556e:	bf00      	nop
 8005570:	2000d3f4 	.word	0x2000d3f4
 8005574:	e0001004 	.word	0xe0001004

08005578 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800557e:	f3ef 8311 	mrs	r3, BASEPRI
 8005582:	f04f 0120 	mov.w	r1, #32
 8005586:	f381 8811 	msr	BASEPRI, r1
 800558a:	607b      	str	r3, [r7, #4]
 800558c:	4807      	ldr	r0, [pc, #28]	; (80055ac <SEGGER_SYSVIEW_OnIdle+0x34>)
 800558e:	f7ff f8bf 	bl	8004710 <_PreparePacket>
 8005592:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005594:	2211      	movs	r2, #17
 8005596:	6839      	ldr	r1, [r7, #0]
 8005598:	6838      	ldr	r0, [r7, #0]
 800559a:	f7ff f9a7 	bl	80048ec <_SendPacket>
  RECORD_END();
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f383 8811 	msr	BASEPRI, r3
}
 80055a4:	bf00      	nop
 80055a6:	3708      	adds	r7, #8
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	2000d424 	.word	0x2000d424

080055b0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b088      	sub	sp, #32
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80055b8:	f3ef 8311 	mrs	r3, BASEPRI
 80055bc:	f04f 0120 	mov.w	r1, #32
 80055c0:	f381 8811 	msr	BASEPRI, r1
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	4819      	ldr	r0, [pc, #100]	; (800562c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80055c8:	f7ff f8a2 	bl	8004710 <_PreparePacket>
 80055cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80055d2:	4b17      	ldr	r3, [pc, #92]	; (8005630 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	61fb      	str	r3, [r7, #28]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	61bb      	str	r3, [r7, #24]
 80055e4:	e00b      	b.n	80055fe <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	1c59      	adds	r1, r3, #1
 80055ee:	61f9      	str	r1, [r7, #28]
 80055f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055f4:	b2d2      	uxtb	r2, r2
 80055f6:	701a      	strb	r2, [r3, #0]
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	09db      	lsrs	r3, r3, #7
 80055fc:	61bb      	str	r3, [r7, #24]
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	2b7f      	cmp	r3, #127	; 0x7f
 8005602:	d8f0      	bhi.n	80055e6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	61fa      	str	r2, [r7, #28]
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	b2d2      	uxtb	r2, r2
 800560e:	701a      	strb	r2, [r3, #0]
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005614:	2208      	movs	r2, #8
 8005616:	68f9      	ldr	r1, [r7, #12]
 8005618:	6938      	ldr	r0, [r7, #16]
 800561a:	f7ff f967 	bl	80048ec <_SendPacket>
  RECORD_END();
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f383 8811 	msr	BASEPRI, r3
}
 8005624:	bf00      	nop
 8005626:	3720      	adds	r7, #32
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	2000d424 	.word	0x2000d424
 8005630:	2000d3f4 	.word	0x2000d3f4

08005634 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005634:	b580      	push	{r7, lr}
 8005636:	b088      	sub	sp, #32
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800563c:	f3ef 8311 	mrs	r3, BASEPRI
 8005640:	f04f 0120 	mov.w	r1, #32
 8005644:	f381 8811 	msr	BASEPRI, r1
 8005648:	617b      	str	r3, [r7, #20]
 800564a:	4819      	ldr	r0, [pc, #100]	; (80056b0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800564c:	f7ff f860 	bl	8004710 <_PreparePacket>
 8005650:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005656:	4b17      	ldr	r3, [pc, #92]	; (80056b4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	61fb      	str	r3, [r7, #28]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	61bb      	str	r3, [r7, #24]
 8005668:	e00b      	b.n	8005682 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	b2da      	uxtb	r2, r3
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	1c59      	adds	r1, r3, #1
 8005672:	61f9      	str	r1, [r7, #28]
 8005674:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	701a      	strb	r2, [r3, #0]
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	09db      	lsrs	r3, r3, #7
 8005680:	61bb      	str	r3, [r7, #24]
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	2b7f      	cmp	r3, #127	; 0x7f
 8005686:	d8f0      	bhi.n	800566a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	61fa      	str	r2, [r7, #28]
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	b2d2      	uxtb	r2, r2
 8005692:	701a      	strb	r2, [r3, #0]
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005698:	2204      	movs	r2, #4
 800569a:	68f9      	ldr	r1, [r7, #12]
 800569c:	6938      	ldr	r0, [r7, #16]
 800569e:	f7ff f925 	bl	80048ec <_SendPacket>
  RECORD_END();
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f383 8811 	msr	BASEPRI, r3
}
 80056a8:	bf00      	nop
 80056aa:	3720      	adds	r7, #32
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	2000d424 	.word	0x2000d424
 80056b4:	2000d3f4 	.word	0x2000d3f4

080056b8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b088      	sub	sp, #32
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056c0:	f3ef 8311 	mrs	r3, BASEPRI
 80056c4:	f04f 0120 	mov.w	r1, #32
 80056c8:	f381 8811 	msr	BASEPRI, r1
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	4819      	ldr	r0, [pc, #100]	; (8005734 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80056d0:	f7ff f81e 	bl	8004710 <_PreparePacket>
 80056d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80056da:	4b17      	ldr	r3, [pc, #92]	; (8005738 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	61fb      	str	r3, [r7, #28]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	61bb      	str	r3, [r7, #24]
 80056ec:	e00b      	b.n	8005706 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	1c59      	adds	r1, r3, #1
 80056f6:	61f9      	str	r1, [r7, #28]
 80056f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056fc:	b2d2      	uxtb	r2, r2
 80056fe:	701a      	strb	r2, [r3, #0]
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	09db      	lsrs	r3, r3, #7
 8005704:	61bb      	str	r3, [r7, #24]
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	2b7f      	cmp	r3, #127	; 0x7f
 800570a:	d8f0      	bhi.n	80056ee <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	61fa      	str	r2, [r7, #28]
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	b2d2      	uxtb	r2, r2
 8005716:	701a      	strb	r2, [r3, #0]
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800571c:	2206      	movs	r2, #6
 800571e:	68f9      	ldr	r1, [r7, #12]
 8005720:	6938      	ldr	r0, [r7, #16]
 8005722:	f7ff f8e3 	bl	80048ec <_SendPacket>
  RECORD_END();
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f383 8811 	msr	BASEPRI, r3
}
 800572c:	bf00      	nop
 800572e:	3720      	adds	r7, #32
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	2000d424 	.word	0x2000d424
 8005738:	2000d3f4 	.word	0x2000d3f4

0800573c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005744:	4b04      	ldr	r3, [pc, #16]	; (8005758 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	1ad3      	subs	r3, r2, r3
}
 800574c:	4618      	mov	r0, r3
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	2000d3f4 	.word	0x2000d3f4

0800575c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800575c:	b580      	push	{r7, lr}
 800575e:	b08c      	sub	sp, #48	; 0x30
 8005760:	af00      	add	r7, sp, #0
 8005762:	4603      	mov	r3, r0
 8005764:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005766:	4b40      	ldr	r3, [pc, #256]	; (8005868 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d077      	beq.n	800585e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800576e:	4b3e      	ldr	r3, [pc, #248]	; (8005868 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005774:	2300      	movs	r3, #0
 8005776:	62bb      	str	r3, [r7, #40]	; 0x28
 8005778:	e008      	b.n	800578c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800577a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005782:	2b00      	cmp	r3, #0
 8005784:	d007      	beq.n	8005796 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005788:	3301      	adds	r3, #1
 800578a:	62bb      	str	r3, [r7, #40]	; 0x28
 800578c:	79fb      	ldrb	r3, [r7, #7]
 800578e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005790:	429a      	cmp	r2, r3
 8005792:	d3f2      	bcc.n	800577a <SEGGER_SYSVIEW_SendModule+0x1e>
 8005794:	e000      	b.n	8005798 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005796:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579a:	2b00      	cmp	r3, #0
 800579c:	d055      	beq.n	800584a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800579e:	f3ef 8311 	mrs	r3, BASEPRI
 80057a2:	f04f 0120 	mov.w	r1, #32
 80057a6:	f381 8811 	msr	BASEPRI, r1
 80057aa:	617b      	str	r3, [r7, #20]
 80057ac:	482f      	ldr	r0, [pc, #188]	; (800586c <SEGGER_SYSVIEW_SendModule+0x110>)
 80057ae:	f7fe ffaf 	bl	8004710 <_PreparePacket>
 80057b2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	627b      	str	r3, [r7, #36]	; 0x24
 80057bc:	79fb      	ldrb	r3, [r7, #7]
 80057be:	623b      	str	r3, [r7, #32]
 80057c0:	e00b      	b.n	80057da <SEGGER_SYSVIEW_SendModule+0x7e>
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	1c59      	adds	r1, r3, #1
 80057ca:	6279      	str	r1, [r7, #36]	; 0x24
 80057cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	701a      	strb	r2, [r3, #0]
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	09db      	lsrs	r3, r3, #7
 80057d8:	623b      	str	r3, [r7, #32]
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	2b7f      	cmp	r3, #127	; 0x7f
 80057de:	d8f0      	bhi.n	80057c2 <SEGGER_SYSVIEW_SendModule+0x66>
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	1c5a      	adds	r2, r3, #1
 80057e4:	627a      	str	r2, [r7, #36]	; 0x24
 80057e6:	6a3a      	ldr	r2, [r7, #32]
 80057e8:	b2d2      	uxtb	r2, r2
 80057ea:	701a      	strb	r2, [r3, #0]
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	61fb      	str	r3, [r7, #28]
 80057f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	61bb      	str	r3, [r7, #24]
 80057fa:	e00b      	b.n	8005814 <SEGGER_SYSVIEW_SendModule+0xb8>
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	1c59      	adds	r1, r3, #1
 8005804:	61f9      	str	r1, [r7, #28]
 8005806:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800580a:	b2d2      	uxtb	r2, r2
 800580c:	701a      	strb	r2, [r3, #0]
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	09db      	lsrs	r3, r3, #7
 8005812:	61bb      	str	r3, [r7, #24]
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	2b7f      	cmp	r3, #127	; 0x7f
 8005818:	d8f0      	bhi.n	80057fc <SEGGER_SYSVIEW_SendModule+0xa0>
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	61fa      	str	r2, [r7, #28]
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	b2d2      	uxtb	r2, r2
 8005824:	701a      	strb	r2, [r3, #0]
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800582a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2280      	movs	r2, #128	; 0x80
 8005830:	4619      	mov	r1, r3
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f7fe ff3c 	bl	80046b0 <_EncodeStr>
 8005838:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800583a:	2216      	movs	r2, #22
 800583c:	68f9      	ldr	r1, [r7, #12]
 800583e:	6938      	ldr	r0, [r7, #16]
 8005840:	f7ff f854 	bl	80048ec <_SendPacket>
      RECORD_END();
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800584a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584c:	2b00      	cmp	r3, #0
 800584e:	d006      	beq.n	800585e <SEGGER_SYSVIEW_SendModule+0x102>
 8005850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	4798      	blx	r3
    }
  }
}
 800585e:	bf00      	nop
 8005860:	3730      	adds	r7, #48	; 0x30
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	2000d41c 	.word	0x2000d41c
 800586c:	2000d424 	.word	0x2000d424

08005870 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005876:	4b0c      	ldr	r3, [pc, #48]	; (80058a8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00f      	beq.n	800589e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800587e:	4b0a      	ldr	r3, [pc, #40]	; (80058a8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1f2      	bne.n	8005884 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800589e:	bf00      	nop
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	2000d41c 	.word	0x2000d41c

080058ac <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80058b2:	f3ef 8311 	mrs	r3, BASEPRI
 80058b6:	f04f 0120 	mov.w	r1, #32
 80058ba:	f381 8811 	msr	BASEPRI, r1
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	4817      	ldr	r0, [pc, #92]	; (8005920 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80058c2:	f7fe ff25 	bl	8004710 <_PreparePacket>
 80058c6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	617b      	str	r3, [r7, #20]
 80058d0:	4b14      	ldr	r3, [pc, #80]	; (8005924 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	613b      	str	r3, [r7, #16]
 80058d6:	e00b      	b.n	80058f0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	1c59      	adds	r1, r3, #1
 80058e0:	6179      	str	r1, [r7, #20]
 80058e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	701a      	strb	r2, [r3, #0]
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	09db      	lsrs	r3, r3, #7
 80058ee:	613b      	str	r3, [r7, #16]
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	2b7f      	cmp	r3, #127	; 0x7f
 80058f4:	d8f0      	bhi.n	80058d8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	617a      	str	r2, [r7, #20]
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	b2d2      	uxtb	r2, r2
 8005900:	701a      	strb	r2, [r3, #0]
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005906:	221b      	movs	r2, #27
 8005908:	6879      	ldr	r1, [r7, #4]
 800590a:	68b8      	ldr	r0, [r7, #8]
 800590c:	f7fe ffee 	bl	80048ec <_SendPacket>
  RECORD_END();
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f383 8811 	msr	BASEPRI, r3
}
 8005916:	bf00      	nop
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	2000d424 	.word	0x2000d424
 8005924:	2000d420 	.word	0x2000d420

08005928 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005928:	b580      	push	{r7, lr}
 800592a:	b08a      	sub	sp, #40	; 0x28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005930:	f3ef 8311 	mrs	r3, BASEPRI
 8005934:	f04f 0120 	mov.w	r1, #32
 8005938:	f381 8811 	msr	BASEPRI, r1
 800593c:	617b      	str	r3, [r7, #20]
 800593e:	4827      	ldr	r0, [pc, #156]	; (80059dc <SEGGER_SYSVIEW_Warn+0xb4>)
 8005940:	f7fe fee6 	bl	8004710 <_PreparePacket>
 8005944:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005946:	2280      	movs	r2, #128	; 0x80
 8005948:	6879      	ldr	r1, [r7, #4]
 800594a:	6938      	ldr	r0, [r7, #16]
 800594c:	f7fe feb0 	bl	80046b0 <_EncodeStr>
 8005950:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	627b      	str	r3, [r7, #36]	; 0x24
 8005956:	2301      	movs	r3, #1
 8005958:	623b      	str	r3, [r7, #32]
 800595a:	e00b      	b.n	8005974 <SEGGER_SYSVIEW_Warn+0x4c>
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	b2da      	uxtb	r2, r3
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	1c59      	adds	r1, r3, #1
 8005964:	6279      	str	r1, [r7, #36]	; 0x24
 8005966:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800596a:	b2d2      	uxtb	r2, r2
 800596c:	701a      	strb	r2, [r3, #0]
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	09db      	lsrs	r3, r3, #7
 8005972:	623b      	str	r3, [r7, #32]
 8005974:	6a3b      	ldr	r3, [r7, #32]
 8005976:	2b7f      	cmp	r3, #127	; 0x7f
 8005978:	d8f0      	bhi.n	800595c <SEGGER_SYSVIEW_Warn+0x34>
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	627a      	str	r2, [r7, #36]	; 0x24
 8005980:	6a3a      	ldr	r2, [r7, #32]
 8005982:	b2d2      	uxtb	r2, r2
 8005984:	701a      	strb	r2, [r3, #0]
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	61fb      	str	r3, [r7, #28]
 800598e:	2300      	movs	r3, #0
 8005990:	61bb      	str	r3, [r7, #24]
 8005992:	e00b      	b.n	80059ac <SEGGER_SYSVIEW_Warn+0x84>
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	b2da      	uxtb	r2, r3
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	1c59      	adds	r1, r3, #1
 800599c:	61f9      	str	r1, [r7, #28]
 800599e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	09db      	lsrs	r3, r3, #7
 80059aa:	61bb      	str	r3, [r7, #24]
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	2b7f      	cmp	r3, #127	; 0x7f
 80059b0:	d8f0      	bhi.n	8005994 <SEGGER_SYSVIEW_Warn+0x6c>
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	61fa      	str	r2, [r7, #28]
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	b2d2      	uxtb	r2, r2
 80059bc:	701a      	strb	r2, [r3, #0]
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80059c2:	221a      	movs	r2, #26
 80059c4:	68f9      	ldr	r1, [r7, #12]
 80059c6:	6938      	ldr	r0, [r7, #16]
 80059c8:	f7fe ff90 	bl	80048ec <_SendPacket>
  RECORD_END();
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f383 8811 	msr	BASEPRI, r3
}
 80059d2:	bf00      	nop
 80059d4:	3728      	adds	r7, #40	; 0x28
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	2000d424 	.word	0x2000d424

080059e0 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
 80059ec:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	6879      	ldr	r1, [r7, #4]
 80059f2:	2000      	movs	r0, #0
 80059f4:	f7fe fd66 	bl	80044c4 <SEGGER_RTT_Write>
  return len;
 80059f8:	683b      	ldr	r3, [r7, #0]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
	...

08005a04 <__libc_init_array>:
 8005a04:	b570      	push	{r4, r5, r6, lr}
 8005a06:	4d0d      	ldr	r5, [pc, #52]	; (8005a3c <__libc_init_array+0x38>)
 8005a08:	4c0d      	ldr	r4, [pc, #52]	; (8005a40 <__libc_init_array+0x3c>)
 8005a0a:	1b64      	subs	r4, r4, r5
 8005a0c:	10a4      	asrs	r4, r4, #2
 8005a0e:	2600      	movs	r6, #0
 8005a10:	42a6      	cmp	r6, r4
 8005a12:	d109      	bne.n	8005a28 <__libc_init_array+0x24>
 8005a14:	4d0b      	ldr	r5, [pc, #44]	; (8005a44 <__libc_init_array+0x40>)
 8005a16:	4c0c      	ldr	r4, [pc, #48]	; (8005a48 <__libc_init_array+0x44>)
 8005a18:	f000 fd38 	bl	800648c <_init>
 8005a1c:	1b64      	subs	r4, r4, r5
 8005a1e:	10a4      	asrs	r4, r4, #2
 8005a20:	2600      	movs	r6, #0
 8005a22:	42a6      	cmp	r6, r4
 8005a24:	d105      	bne.n	8005a32 <__libc_init_array+0x2e>
 8005a26:	bd70      	pop	{r4, r5, r6, pc}
 8005a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a2c:	4798      	blx	r3
 8005a2e:	3601      	adds	r6, #1
 8005a30:	e7ee      	b.n	8005a10 <__libc_init_array+0xc>
 8005a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a36:	4798      	blx	r3
 8005a38:	3601      	adds	r6, #1
 8005a3a:	e7f2      	b.n	8005a22 <__libc_init_array+0x1e>
 8005a3c:	08006660 	.word	0x08006660
 8005a40:	08006660 	.word	0x08006660
 8005a44:	08006660 	.word	0x08006660
 8005a48:	08006664 	.word	0x08006664

08005a4c <memcmp>:
 8005a4c:	b510      	push	{r4, lr}
 8005a4e:	3901      	subs	r1, #1
 8005a50:	4402      	add	r2, r0
 8005a52:	4290      	cmp	r0, r2
 8005a54:	d101      	bne.n	8005a5a <memcmp+0xe>
 8005a56:	2000      	movs	r0, #0
 8005a58:	e005      	b.n	8005a66 <memcmp+0x1a>
 8005a5a:	7803      	ldrb	r3, [r0, #0]
 8005a5c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005a60:	42a3      	cmp	r3, r4
 8005a62:	d001      	beq.n	8005a68 <memcmp+0x1c>
 8005a64:	1b18      	subs	r0, r3, r4
 8005a66:	bd10      	pop	{r4, pc}
 8005a68:	3001      	adds	r0, #1
 8005a6a:	e7f2      	b.n	8005a52 <memcmp+0x6>

08005a6c <memcpy>:
 8005a6c:	440a      	add	r2, r1
 8005a6e:	4291      	cmp	r1, r2
 8005a70:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a74:	d100      	bne.n	8005a78 <memcpy+0xc>
 8005a76:	4770      	bx	lr
 8005a78:	b510      	push	{r4, lr}
 8005a7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a82:	4291      	cmp	r1, r2
 8005a84:	d1f9      	bne.n	8005a7a <memcpy+0xe>
 8005a86:	bd10      	pop	{r4, pc}

08005a88 <memset>:
 8005a88:	4402      	add	r2, r0
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d100      	bne.n	8005a92 <memset+0xa>
 8005a90:	4770      	bx	lr
 8005a92:	f803 1b01 	strb.w	r1, [r3], #1
 8005a96:	e7f9      	b.n	8005a8c <memset+0x4>

08005a98 <_puts_r>:
 8005a98:	b570      	push	{r4, r5, r6, lr}
 8005a9a:	460e      	mov	r6, r1
 8005a9c:	4605      	mov	r5, r0
 8005a9e:	b118      	cbz	r0, 8005aa8 <_puts_r+0x10>
 8005aa0:	6983      	ldr	r3, [r0, #24]
 8005aa2:	b90b      	cbnz	r3, 8005aa8 <_puts_r+0x10>
 8005aa4:	f000 fa48 	bl	8005f38 <__sinit>
 8005aa8:	69ab      	ldr	r3, [r5, #24]
 8005aaa:	68ac      	ldr	r4, [r5, #8]
 8005aac:	b913      	cbnz	r3, 8005ab4 <_puts_r+0x1c>
 8005aae:	4628      	mov	r0, r5
 8005ab0:	f000 fa42 	bl	8005f38 <__sinit>
 8005ab4:	4b2c      	ldr	r3, [pc, #176]	; (8005b68 <_puts_r+0xd0>)
 8005ab6:	429c      	cmp	r4, r3
 8005ab8:	d120      	bne.n	8005afc <_puts_r+0x64>
 8005aba:	686c      	ldr	r4, [r5, #4]
 8005abc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005abe:	07db      	lsls	r3, r3, #31
 8005ac0:	d405      	bmi.n	8005ace <_puts_r+0x36>
 8005ac2:	89a3      	ldrh	r3, [r4, #12]
 8005ac4:	0598      	lsls	r0, r3, #22
 8005ac6:	d402      	bmi.n	8005ace <_puts_r+0x36>
 8005ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aca:	f000 fad3 	bl	8006074 <__retarget_lock_acquire_recursive>
 8005ace:	89a3      	ldrh	r3, [r4, #12]
 8005ad0:	0719      	lsls	r1, r3, #28
 8005ad2:	d51d      	bpl.n	8005b10 <_puts_r+0x78>
 8005ad4:	6923      	ldr	r3, [r4, #16]
 8005ad6:	b1db      	cbz	r3, 8005b10 <_puts_r+0x78>
 8005ad8:	3e01      	subs	r6, #1
 8005ada:	68a3      	ldr	r3, [r4, #8]
 8005adc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	60a3      	str	r3, [r4, #8]
 8005ae4:	bb39      	cbnz	r1, 8005b36 <_puts_r+0x9e>
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	da38      	bge.n	8005b5c <_puts_r+0xc4>
 8005aea:	4622      	mov	r2, r4
 8005aec:	210a      	movs	r1, #10
 8005aee:	4628      	mov	r0, r5
 8005af0:	f000 f848 	bl	8005b84 <__swbuf_r>
 8005af4:	3001      	adds	r0, #1
 8005af6:	d011      	beq.n	8005b1c <_puts_r+0x84>
 8005af8:	250a      	movs	r5, #10
 8005afa:	e011      	b.n	8005b20 <_puts_r+0x88>
 8005afc:	4b1b      	ldr	r3, [pc, #108]	; (8005b6c <_puts_r+0xd4>)
 8005afe:	429c      	cmp	r4, r3
 8005b00:	d101      	bne.n	8005b06 <_puts_r+0x6e>
 8005b02:	68ac      	ldr	r4, [r5, #8]
 8005b04:	e7da      	b.n	8005abc <_puts_r+0x24>
 8005b06:	4b1a      	ldr	r3, [pc, #104]	; (8005b70 <_puts_r+0xd8>)
 8005b08:	429c      	cmp	r4, r3
 8005b0a:	bf08      	it	eq
 8005b0c:	68ec      	ldreq	r4, [r5, #12]
 8005b0e:	e7d5      	b.n	8005abc <_puts_r+0x24>
 8005b10:	4621      	mov	r1, r4
 8005b12:	4628      	mov	r0, r5
 8005b14:	f000 f888 	bl	8005c28 <__swsetup_r>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	d0dd      	beq.n	8005ad8 <_puts_r+0x40>
 8005b1c:	f04f 35ff 	mov.w	r5, #4294967295
 8005b20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b22:	07da      	lsls	r2, r3, #31
 8005b24:	d405      	bmi.n	8005b32 <_puts_r+0x9a>
 8005b26:	89a3      	ldrh	r3, [r4, #12]
 8005b28:	059b      	lsls	r3, r3, #22
 8005b2a:	d402      	bmi.n	8005b32 <_puts_r+0x9a>
 8005b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b2e:	f000 faa2 	bl	8006076 <__retarget_lock_release_recursive>
 8005b32:	4628      	mov	r0, r5
 8005b34:	bd70      	pop	{r4, r5, r6, pc}
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	da04      	bge.n	8005b44 <_puts_r+0xac>
 8005b3a:	69a2      	ldr	r2, [r4, #24]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	dc06      	bgt.n	8005b4e <_puts_r+0xb6>
 8005b40:	290a      	cmp	r1, #10
 8005b42:	d004      	beq.n	8005b4e <_puts_r+0xb6>
 8005b44:	6823      	ldr	r3, [r4, #0]
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	6022      	str	r2, [r4, #0]
 8005b4a:	7019      	strb	r1, [r3, #0]
 8005b4c:	e7c5      	b.n	8005ada <_puts_r+0x42>
 8005b4e:	4622      	mov	r2, r4
 8005b50:	4628      	mov	r0, r5
 8005b52:	f000 f817 	bl	8005b84 <__swbuf_r>
 8005b56:	3001      	adds	r0, #1
 8005b58:	d1bf      	bne.n	8005ada <_puts_r+0x42>
 8005b5a:	e7df      	b.n	8005b1c <_puts_r+0x84>
 8005b5c:	6823      	ldr	r3, [r4, #0]
 8005b5e:	250a      	movs	r5, #10
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	6022      	str	r2, [r4, #0]
 8005b64:	701d      	strb	r5, [r3, #0]
 8005b66:	e7db      	b.n	8005b20 <_puts_r+0x88>
 8005b68:	08006618 	.word	0x08006618
 8005b6c:	08006638 	.word	0x08006638
 8005b70:	080065f8 	.word	0x080065f8

08005b74 <puts>:
 8005b74:	4b02      	ldr	r3, [pc, #8]	; (8005b80 <puts+0xc>)
 8005b76:	4601      	mov	r1, r0
 8005b78:	6818      	ldr	r0, [r3, #0]
 8005b7a:	f7ff bf8d 	b.w	8005a98 <_puts_r>
 8005b7e:	bf00      	nop
 8005b80:	20000014 	.word	0x20000014

08005b84 <__swbuf_r>:
 8005b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b86:	460e      	mov	r6, r1
 8005b88:	4614      	mov	r4, r2
 8005b8a:	4605      	mov	r5, r0
 8005b8c:	b118      	cbz	r0, 8005b96 <__swbuf_r+0x12>
 8005b8e:	6983      	ldr	r3, [r0, #24]
 8005b90:	b90b      	cbnz	r3, 8005b96 <__swbuf_r+0x12>
 8005b92:	f000 f9d1 	bl	8005f38 <__sinit>
 8005b96:	4b21      	ldr	r3, [pc, #132]	; (8005c1c <__swbuf_r+0x98>)
 8005b98:	429c      	cmp	r4, r3
 8005b9a:	d12b      	bne.n	8005bf4 <__swbuf_r+0x70>
 8005b9c:	686c      	ldr	r4, [r5, #4]
 8005b9e:	69a3      	ldr	r3, [r4, #24]
 8005ba0:	60a3      	str	r3, [r4, #8]
 8005ba2:	89a3      	ldrh	r3, [r4, #12]
 8005ba4:	071a      	lsls	r2, r3, #28
 8005ba6:	d52f      	bpl.n	8005c08 <__swbuf_r+0x84>
 8005ba8:	6923      	ldr	r3, [r4, #16]
 8005baa:	b36b      	cbz	r3, 8005c08 <__swbuf_r+0x84>
 8005bac:	6923      	ldr	r3, [r4, #16]
 8005bae:	6820      	ldr	r0, [r4, #0]
 8005bb0:	1ac0      	subs	r0, r0, r3
 8005bb2:	6963      	ldr	r3, [r4, #20]
 8005bb4:	b2f6      	uxtb	r6, r6
 8005bb6:	4283      	cmp	r3, r0
 8005bb8:	4637      	mov	r7, r6
 8005bba:	dc04      	bgt.n	8005bc6 <__swbuf_r+0x42>
 8005bbc:	4621      	mov	r1, r4
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	f000 f926 	bl	8005e10 <_fflush_r>
 8005bc4:	bb30      	cbnz	r0, 8005c14 <__swbuf_r+0x90>
 8005bc6:	68a3      	ldr	r3, [r4, #8]
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	60a3      	str	r3, [r4, #8]
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	1c5a      	adds	r2, r3, #1
 8005bd0:	6022      	str	r2, [r4, #0]
 8005bd2:	701e      	strb	r6, [r3, #0]
 8005bd4:	6963      	ldr	r3, [r4, #20]
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	4283      	cmp	r3, r0
 8005bda:	d004      	beq.n	8005be6 <__swbuf_r+0x62>
 8005bdc:	89a3      	ldrh	r3, [r4, #12]
 8005bde:	07db      	lsls	r3, r3, #31
 8005be0:	d506      	bpl.n	8005bf0 <__swbuf_r+0x6c>
 8005be2:	2e0a      	cmp	r6, #10
 8005be4:	d104      	bne.n	8005bf0 <__swbuf_r+0x6c>
 8005be6:	4621      	mov	r1, r4
 8005be8:	4628      	mov	r0, r5
 8005bea:	f000 f911 	bl	8005e10 <_fflush_r>
 8005bee:	b988      	cbnz	r0, 8005c14 <__swbuf_r+0x90>
 8005bf0:	4638      	mov	r0, r7
 8005bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bf4:	4b0a      	ldr	r3, [pc, #40]	; (8005c20 <__swbuf_r+0x9c>)
 8005bf6:	429c      	cmp	r4, r3
 8005bf8:	d101      	bne.n	8005bfe <__swbuf_r+0x7a>
 8005bfa:	68ac      	ldr	r4, [r5, #8]
 8005bfc:	e7cf      	b.n	8005b9e <__swbuf_r+0x1a>
 8005bfe:	4b09      	ldr	r3, [pc, #36]	; (8005c24 <__swbuf_r+0xa0>)
 8005c00:	429c      	cmp	r4, r3
 8005c02:	bf08      	it	eq
 8005c04:	68ec      	ldreq	r4, [r5, #12]
 8005c06:	e7ca      	b.n	8005b9e <__swbuf_r+0x1a>
 8005c08:	4621      	mov	r1, r4
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	f000 f80c 	bl	8005c28 <__swsetup_r>
 8005c10:	2800      	cmp	r0, #0
 8005c12:	d0cb      	beq.n	8005bac <__swbuf_r+0x28>
 8005c14:	f04f 37ff 	mov.w	r7, #4294967295
 8005c18:	e7ea      	b.n	8005bf0 <__swbuf_r+0x6c>
 8005c1a:	bf00      	nop
 8005c1c:	08006618 	.word	0x08006618
 8005c20:	08006638 	.word	0x08006638
 8005c24:	080065f8 	.word	0x080065f8

08005c28 <__swsetup_r>:
 8005c28:	4b32      	ldr	r3, [pc, #200]	; (8005cf4 <__swsetup_r+0xcc>)
 8005c2a:	b570      	push	{r4, r5, r6, lr}
 8005c2c:	681d      	ldr	r5, [r3, #0]
 8005c2e:	4606      	mov	r6, r0
 8005c30:	460c      	mov	r4, r1
 8005c32:	b125      	cbz	r5, 8005c3e <__swsetup_r+0x16>
 8005c34:	69ab      	ldr	r3, [r5, #24]
 8005c36:	b913      	cbnz	r3, 8005c3e <__swsetup_r+0x16>
 8005c38:	4628      	mov	r0, r5
 8005c3a:	f000 f97d 	bl	8005f38 <__sinit>
 8005c3e:	4b2e      	ldr	r3, [pc, #184]	; (8005cf8 <__swsetup_r+0xd0>)
 8005c40:	429c      	cmp	r4, r3
 8005c42:	d10f      	bne.n	8005c64 <__swsetup_r+0x3c>
 8005c44:	686c      	ldr	r4, [r5, #4]
 8005c46:	89a3      	ldrh	r3, [r4, #12]
 8005c48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c4c:	0719      	lsls	r1, r3, #28
 8005c4e:	d42c      	bmi.n	8005caa <__swsetup_r+0x82>
 8005c50:	06dd      	lsls	r5, r3, #27
 8005c52:	d411      	bmi.n	8005c78 <__swsetup_r+0x50>
 8005c54:	2309      	movs	r3, #9
 8005c56:	6033      	str	r3, [r6, #0]
 8005c58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c5c:	81a3      	strh	r3, [r4, #12]
 8005c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c62:	e03e      	b.n	8005ce2 <__swsetup_r+0xba>
 8005c64:	4b25      	ldr	r3, [pc, #148]	; (8005cfc <__swsetup_r+0xd4>)
 8005c66:	429c      	cmp	r4, r3
 8005c68:	d101      	bne.n	8005c6e <__swsetup_r+0x46>
 8005c6a:	68ac      	ldr	r4, [r5, #8]
 8005c6c:	e7eb      	b.n	8005c46 <__swsetup_r+0x1e>
 8005c6e:	4b24      	ldr	r3, [pc, #144]	; (8005d00 <__swsetup_r+0xd8>)
 8005c70:	429c      	cmp	r4, r3
 8005c72:	bf08      	it	eq
 8005c74:	68ec      	ldreq	r4, [r5, #12]
 8005c76:	e7e6      	b.n	8005c46 <__swsetup_r+0x1e>
 8005c78:	0758      	lsls	r0, r3, #29
 8005c7a:	d512      	bpl.n	8005ca2 <__swsetup_r+0x7a>
 8005c7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c7e:	b141      	cbz	r1, 8005c92 <__swsetup_r+0x6a>
 8005c80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c84:	4299      	cmp	r1, r3
 8005c86:	d002      	beq.n	8005c8e <__swsetup_r+0x66>
 8005c88:	4630      	mov	r0, r6
 8005c8a:	f000 fa5b 	bl	8006144 <_free_r>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	6363      	str	r3, [r4, #52]	; 0x34
 8005c92:	89a3      	ldrh	r3, [r4, #12]
 8005c94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c98:	81a3      	strh	r3, [r4, #12]
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	6063      	str	r3, [r4, #4]
 8005c9e:	6923      	ldr	r3, [r4, #16]
 8005ca0:	6023      	str	r3, [r4, #0]
 8005ca2:	89a3      	ldrh	r3, [r4, #12]
 8005ca4:	f043 0308 	orr.w	r3, r3, #8
 8005ca8:	81a3      	strh	r3, [r4, #12]
 8005caa:	6923      	ldr	r3, [r4, #16]
 8005cac:	b94b      	cbnz	r3, 8005cc2 <__swsetup_r+0x9a>
 8005cae:	89a3      	ldrh	r3, [r4, #12]
 8005cb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb8:	d003      	beq.n	8005cc2 <__swsetup_r+0x9a>
 8005cba:	4621      	mov	r1, r4
 8005cbc:	4630      	mov	r0, r6
 8005cbe:	f000 fa01 	bl	80060c4 <__smakebuf_r>
 8005cc2:	89a0      	ldrh	r0, [r4, #12]
 8005cc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cc8:	f010 0301 	ands.w	r3, r0, #1
 8005ccc:	d00a      	beq.n	8005ce4 <__swsetup_r+0xbc>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60a3      	str	r3, [r4, #8]
 8005cd2:	6963      	ldr	r3, [r4, #20]
 8005cd4:	425b      	negs	r3, r3
 8005cd6:	61a3      	str	r3, [r4, #24]
 8005cd8:	6923      	ldr	r3, [r4, #16]
 8005cda:	b943      	cbnz	r3, 8005cee <__swsetup_r+0xc6>
 8005cdc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ce0:	d1ba      	bne.n	8005c58 <__swsetup_r+0x30>
 8005ce2:	bd70      	pop	{r4, r5, r6, pc}
 8005ce4:	0781      	lsls	r1, r0, #30
 8005ce6:	bf58      	it	pl
 8005ce8:	6963      	ldrpl	r3, [r4, #20]
 8005cea:	60a3      	str	r3, [r4, #8]
 8005cec:	e7f4      	b.n	8005cd8 <__swsetup_r+0xb0>
 8005cee:	2000      	movs	r0, #0
 8005cf0:	e7f7      	b.n	8005ce2 <__swsetup_r+0xba>
 8005cf2:	bf00      	nop
 8005cf4:	20000014 	.word	0x20000014
 8005cf8:	08006618 	.word	0x08006618
 8005cfc:	08006638 	.word	0x08006638
 8005d00:	080065f8 	.word	0x080065f8

08005d04 <__sflush_r>:
 8005d04:	898a      	ldrh	r2, [r1, #12]
 8005d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d0a:	4605      	mov	r5, r0
 8005d0c:	0710      	lsls	r0, r2, #28
 8005d0e:	460c      	mov	r4, r1
 8005d10:	d458      	bmi.n	8005dc4 <__sflush_r+0xc0>
 8005d12:	684b      	ldr	r3, [r1, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	dc05      	bgt.n	8005d24 <__sflush_r+0x20>
 8005d18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	dc02      	bgt.n	8005d24 <__sflush_r+0x20>
 8005d1e:	2000      	movs	r0, #0
 8005d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d26:	2e00      	cmp	r6, #0
 8005d28:	d0f9      	beq.n	8005d1e <__sflush_r+0x1a>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d30:	682f      	ldr	r7, [r5, #0]
 8005d32:	602b      	str	r3, [r5, #0]
 8005d34:	d032      	beq.n	8005d9c <__sflush_r+0x98>
 8005d36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d38:	89a3      	ldrh	r3, [r4, #12]
 8005d3a:	075a      	lsls	r2, r3, #29
 8005d3c:	d505      	bpl.n	8005d4a <__sflush_r+0x46>
 8005d3e:	6863      	ldr	r3, [r4, #4]
 8005d40:	1ac0      	subs	r0, r0, r3
 8005d42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d44:	b10b      	cbz	r3, 8005d4a <__sflush_r+0x46>
 8005d46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d48:	1ac0      	subs	r0, r0, r3
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d50:	6a21      	ldr	r1, [r4, #32]
 8005d52:	4628      	mov	r0, r5
 8005d54:	47b0      	blx	r6
 8005d56:	1c43      	adds	r3, r0, #1
 8005d58:	89a3      	ldrh	r3, [r4, #12]
 8005d5a:	d106      	bne.n	8005d6a <__sflush_r+0x66>
 8005d5c:	6829      	ldr	r1, [r5, #0]
 8005d5e:	291d      	cmp	r1, #29
 8005d60:	d82c      	bhi.n	8005dbc <__sflush_r+0xb8>
 8005d62:	4a2a      	ldr	r2, [pc, #168]	; (8005e0c <__sflush_r+0x108>)
 8005d64:	40ca      	lsrs	r2, r1
 8005d66:	07d6      	lsls	r6, r2, #31
 8005d68:	d528      	bpl.n	8005dbc <__sflush_r+0xb8>
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	6062      	str	r2, [r4, #4]
 8005d6e:	04d9      	lsls	r1, r3, #19
 8005d70:	6922      	ldr	r2, [r4, #16]
 8005d72:	6022      	str	r2, [r4, #0]
 8005d74:	d504      	bpl.n	8005d80 <__sflush_r+0x7c>
 8005d76:	1c42      	adds	r2, r0, #1
 8005d78:	d101      	bne.n	8005d7e <__sflush_r+0x7a>
 8005d7a:	682b      	ldr	r3, [r5, #0]
 8005d7c:	b903      	cbnz	r3, 8005d80 <__sflush_r+0x7c>
 8005d7e:	6560      	str	r0, [r4, #84]	; 0x54
 8005d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d82:	602f      	str	r7, [r5, #0]
 8005d84:	2900      	cmp	r1, #0
 8005d86:	d0ca      	beq.n	8005d1e <__sflush_r+0x1a>
 8005d88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d8c:	4299      	cmp	r1, r3
 8005d8e:	d002      	beq.n	8005d96 <__sflush_r+0x92>
 8005d90:	4628      	mov	r0, r5
 8005d92:	f000 f9d7 	bl	8006144 <_free_r>
 8005d96:	2000      	movs	r0, #0
 8005d98:	6360      	str	r0, [r4, #52]	; 0x34
 8005d9a:	e7c1      	b.n	8005d20 <__sflush_r+0x1c>
 8005d9c:	6a21      	ldr	r1, [r4, #32]
 8005d9e:	2301      	movs	r3, #1
 8005da0:	4628      	mov	r0, r5
 8005da2:	47b0      	blx	r6
 8005da4:	1c41      	adds	r1, r0, #1
 8005da6:	d1c7      	bne.n	8005d38 <__sflush_r+0x34>
 8005da8:	682b      	ldr	r3, [r5, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0c4      	beq.n	8005d38 <__sflush_r+0x34>
 8005dae:	2b1d      	cmp	r3, #29
 8005db0:	d001      	beq.n	8005db6 <__sflush_r+0xb2>
 8005db2:	2b16      	cmp	r3, #22
 8005db4:	d101      	bne.n	8005dba <__sflush_r+0xb6>
 8005db6:	602f      	str	r7, [r5, #0]
 8005db8:	e7b1      	b.n	8005d1e <__sflush_r+0x1a>
 8005dba:	89a3      	ldrh	r3, [r4, #12]
 8005dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dc0:	81a3      	strh	r3, [r4, #12]
 8005dc2:	e7ad      	b.n	8005d20 <__sflush_r+0x1c>
 8005dc4:	690f      	ldr	r7, [r1, #16]
 8005dc6:	2f00      	cmp	r7, #0
 8005dc8:	d0a9      	beq.n	8005d1e <__sflush_r+0x1a>
 8005dca:	0793      	lsls	r3, r2, #30
 8005dcc:	680e      	ldr	r6, [r1, #0]
 8005dce:	bf08      	it	eq
 8005dd0:	694b      	ldreq	r3, [r1, #20]
 8005dd2:	600f      	str	r7, [r1, #0]
 8005dd4:	bf18      	it	ne
 8005dd6:	2300      	movne	r3, #0
 8005dd8:	eba6 0807 	sub.w	r8, r6, r7
 8005ddc:	608b      	str	r3, [r1, #8]
 8005dde:	f1b8 0f00 	cmp.w	r8, #0
 8005de2:	dd9c      	ble.n	8005d1e <__sflush_r+0x1a>
 8005de4:	6a21      	ldr	r1, [r4, #32]
 8005de6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005de8:	4643      	mov	r3, r8
 8005dea:	463a      	mov	r2, r7
 8005dec:	4628      	mov	r0, r5
 8005dee:	47b0      	blx	r6
 8005df0:	2800      	cmp	r0, #0
 8005df2:	dc06      	bgt.n	8005e02 <__sflush_r+0xfe>
 8005df4:	89a3      	ldrh	r3, [r4, #12]
 8005df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dfa:	81a3      	strh	r3, [r4, #12]
 8005dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8005e00:	e78e      	b.n	8005d20 <__sflush_r+0x1c>
 8005e02:	4407      	add	r7, r0
 8005e04:	eba8 0800 	sub.w	r8, r8, r0
 8005e08:	e7e9      	b.n	8005dde <__sflush_r+0xda>
 8005e0a:	bf00      	nop
 8005e0c:	20400001 	.word	0x20400001

08005e10 <_fflush_r>:
 8005e10:	b538      	push	{r3, r4, r5, lr}
 8005e12:	690b      	ldr	r3, [r1, #16]
 8005e14:	4605      	mov	r5, r0
 8005e16:	460c      	mov	r4, r1
 8005e18:	b913      	cbnz	r3, 8005e20 <_fflush_r+0x10>
 8005e1a:	2500      	movs	r5, #0
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	bd38      	pop	{r3, r4, r5, pc}
 8005e20:	b118      	cbz	r0, 8005e2a <_fflush_r+0x1a>
 8005e22:	6983      	ldr	r3, [r0, #24]
 8005e24:	b90b      	cbnz	r3, 8005e2a <_fflush_r+0x1a>
 8005e26:	f000 f887 	bl	8005f38 <__sinit>
 8005e2a:	4b14      	ldr	r3, [pc, #80]	; (8005e7c <_fflush_r+0x6c>)
 8005e2c:	429c      	cmp	r4, r3
 8005e2e:	d11b      	bne.n	8005e68 <_fflush_r+0x58>
 8005e30:	686c      	ldr	r4, [r5, #4]
 8005e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d0ef      	beq.n	8005e1a <_fflush_r+0xa>
 8005e3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e3c:	07d0      	lsls	r0, r2, #31
 8005e3e:	d404      	bmi.n	8005e4a <_fflush_r+0x3a>
 8005e40:	0599      	lsls	r1, r3, #22
 8005e42:	d402      	bmi.n	8005e4a <_fflush_r+0x3a>
 8005e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e46:	f000 f915 	bl	8006074 <__retarget_lock_acquire_recursive>
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	4621      	mov	r1, r4
 8005e4e:	f7ff ff59 	bl	8005d04 <__sflush_r>
 8005e52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e54:	07da      	lsls	r2, r3, #31
 8005e56:	4605      	mov	r5, r0
 8005e58:	d4e0      	bmi.n	8005e1c <_fflush_r+0xc>
 8005e5a:	89a3      	ldrh	r3, [r4, #12]
 8005e5c:	059b      	lsls	r3, r3, #22
 8005e5e:	d4dd      	bmi.n	8005e1c <_fflush_r+0xc>
 8005e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e62:	f000 f908 	bl	8006076 <__retarget_lock_release_recursive>
 8005e66:	e7d9      	b.n	8005e1c <_fflush_r+0xc>
 8005e68:	4b05      	ldr	r3, [pc, #20]	; (8005e80 <_fflush_r+0x70>)
 8005e6a:	429c      	cmp	r4, r3
 8005e6c:	d101      	bne.n	8005e72 <_fflush_r+0x62>
 8005e6e:	68ac      	ldr	r4, [r5, #8]
 8005e70:	e7df      	b.n	8005e32 <_fflush_r+0x22>
 8005e72:	4b04      	ldr	r3, [pc, #16]	; (8005e84 <_fflush_r+0x74>)
 8005e74:	429c      	cmp	r4, r3
 8005e76:	bf08      	it	eq
 8005e78:	68ec      	ldreq	r4, [r5, #12]
 8005e7a:	e7da      	b.n	8005e32 <_fflush_r+0x22>
 8005e7c:	08006618 	.word	0x08006618
 8005e80:	08006638 	.word	0x08006638
 8005e84:	080065f8 	.word	0x080065f8

08005e88 <std>:
 8005e88:	2300      	movs	r3, #0
 8005e8a:	b510      	push	{r4, lr}
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	e9c0 3300 	strd	r3, r3, [r0]
 8005e92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e96:	6083      	str	r3, [r0, #8]
 8005e98:	8181      	strh	r1, [r0, #12]
 8005e9a:	6643      	str	r3, [r0, #100]	; 0x64
 8005e9c:	81c2      	strh	r2, [r0, #14]
 8005e9e:	6183      	str	r3, [r0, #24]
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	2208      	movs	r2, #8
 8005ea4:	305c      	adds	r0, #92	; 0x5c
 8005ea6:	f7ff fdef 	bl	8005a88 <memset>
 8005eaa:	4b05      	ldr	r3, [pc, #20]	; (8005ec0 <std+0x38>)
 8005eac:	6263      	str	r3, [r4, #36]	; 0x24
 8005eae:	4b05      	ldr	r3, [pc, #20]	; (8005ec4 <std+0x3c>)
 8005eb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005eb2:	4b05      	ldr	r3, [pc, #20]	; (8005ec8 <std+0x40>)
 8005eb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005eb6:	4b05      	ldr	r3, [pc, #20]	; (8005ecc <std+0x44>)
 8005eb8:	6224      	str	r4, [r4, #32]
 8005eba:	6323      	str	r3, [r4, #48]	; 0x30
 8005ebc:	bd10      	pop	{r4, pc}
 8005ebe:	bf00      	nop
 8005ec0:	08006325 	.word	0x08006325
 8005ec4:	08006347 	.word	0x08006347
 8005ec8:	0800637f 	.word	0x0800637f
 8005ecc:	080063a3 	.word	0x080063a3

08005ed0 <_cleanup_r>:
 8005ed0:	4901      	ldr	r1, [pc, #4]	; (8005ed8 <_cleanup_r+0x8>)
 8005ed2:	f000 b8af 	b.w	8006034 <_fwalk_reent>
 8005ed6:	bf00      	nop
 8005ed8:	08005e11 	.word	0x08005e11

08005edc <__sfmoreglue>:
 8005edc:	b570      	push	{r4, r5, r6, lr}
 8005ede:	2268      	movs	r2, #104	; 0x68
 8005ee0:	1e4d      	subs	r5, r1, #1
 8005ee2:	4355      	muls	r5, r2
 8005ee4:	460e      	mov	r6, r1
 8005ee6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005eea:	f000 f997 	bl	800621c <_malloc_r>
 8005eee:	4604      	mov	r4, r0
 8005ef0:	b140      	cbz	r0, 8005f04 <__sfmoreglue+0x28>
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	e9c0 1600 	strd	r1, r6, [r0]
 8005ef8:	300c      	adds	r0, #12
 8005efa:	60a0      	str	r0, [r4, #8]
 8005efc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f00:	f7ff fdc2 	bl	8005a88 <memset>
 8005f04:	4620      	mov	r0, r4
 8005f06:	bd70      	pop	{r4, r5, r6, pc}

08005f08 <__sfp_lock_acquire>:
 8005f08:	4801      	ldr	r0, [pc, #4]	; (8005f10 <__sfp_lock_acquire+0x8>)
 8005f0a:	f000 b8b3 	b.w	8006074 <__retarget_lock_acquire_recursive>
 8005f0e:	bf00      	nop
 8005f10:	2000d508 	.word	0x2000d508

08005f14 <__sfp_lock_release>:
 8005f14:	4801      	ldr	r0, [pc, #4]	; (8005f1c <__sfp_lock_release+0x8>)
 8005f16:	f000 b8ae 	b.w	8006076 <__retarget_lock_release_recursive>
 8005f1a:	bf00      	nop
 8005f1c:	2000d508 	.word	0x2000d508

08005f20 <__sinit_lock_acquire>:
 8005f20:	4801      	ldr	r0, [pc, #4]	; (8005f28 <__sinit_lock_acquire+0x8>)
 8005f22:	f000 b8a7 	b.w	8006074 <__retarget_lock_acquire_recursive>
 8005f26:	bf00      	nop
 8005f28:	2000d509 	.word	0x2000d509

08005f2c <__sinit_lock_release>:
 8005f2c:	4801      	ldr	r0, [pc, #4]	; (8005f34 <__sinit_lock_release+0x8>)
 8005f2e:	f000 b8a2 	b.w	8006076 <__retarget_lock_release_recursive>
 8005f32:	bf00      	nop
 8005f34:	2000d509 	.word	0x2000d509

08005f38 <__sinit>:
 8005f38:	b510      	push	{r4, lr}
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	f7ff fff0 	bl	8005f20 <__sinit_lock_acquire>
 8005f40:	69a3      	ldr	r3, [r4, #24]
 8005f42:	b11b      	cbz	r3, 8005f4c <__sinit+0x14>
 8005f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f48:	f7ff bff0 	b.w	8005f2c <__sinit_lock_release>
 8005f4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f50:	6523      	str	r3, [r4, #80]	; 0x50
 8005f52:	4b13      	ldr	r3, [pc, #76]	; (8005fa0 <__sinit+0x68>)
 8005f54:	4a13      	ldr	r2, [pc, #76]	; (8005fa4 <__sinit+0x6c>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f5a:	42a3      	cmp	r3, r4
 8005f5c:	bf04      	itt	eq
 8005f5e:	2301      	moveq	r3, #1
 8005f60:	61a3      	streq	r3, [r4, #24]
 8005f62:	4620      	mov	r0, r4
 8005f64:	f000 f820 	bl	8005fa8 <__sfp>
 8005f68:	6060      	str	r0, [r4, #4]
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	f000 f81c 	bl	8005fa8 <__sfp>
 8005f70:	60a0      	str	r0, [r4, #8]
 8005f72:	4620      	mov	r0, r4
 8005f74:	f000 f818 	bl	8005fa8 <__sfp>
 8005f78:	2200      	movs	r2, #0
 8005f7a:	60e0      	str	r0, [r4, #12]
 8005f7c:	2104      	movs	r1, #4
 8005f7e:	6860      	ldr	r0, [r4, #4]
 8005f80:	f7ff ff82 	bl	8005e88 <std>
 8005f84:	68a0      	ldr	r0, [r4, #8]
 8005f86:	2201      	movs	r2, #1
 8005f88:	2109      	movs	r1, #9
 8005f8a:	f7ff ff7d 	bl	8005e88 <std>
 8005f8e:	68e0      	ldr	r0, [r4, #12]
 8005f90:	2202      	movs	r2, #2
 8005f92:	2112      	movs	r1, #18
 8005f94:	f7ff ff78 	bl	8005e88 <std>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	61a3      	str	r3, [r4, #24]
 8005f9c:	e7d2      	b.n	8005f44 <__sinit+0xc>
 8005f9e:	bf00      	nop
 8005fa0:	080065f4 	.word	0x080065f4
 8005fa4:	08005ed1 	.word	0x08005ed1

08005fa8 <__sfp>:
 8005fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005faa:	4607      	mov	r7, r0
 8005fac:	f7ff ffac 	bl	8005f08 <__sfp_lock_acquire>
 8005fb0:	4b1e      	ldr	r3, [pc, #120]	; (800602c <__sfp+0x84>)
 8005fb2:	681e      	ldr	r6, [r3, #0]
 8005fb4:	69b3      	ldr	r3, [r6, #24]
 8005fb6:	b913      	cbnz	r3, 8005fbe <__sfp+0x16>
 8005fb8:	4630      	mov	r0, r6
 8005fba:	f7ff ffbd 	bl	8005f38 <__sinit>
 8005fbe:	3648      	adds	r6, #72	; 0x48
 8005fc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	d503      	bpl.n	8005fd0 <__sfp+0x28>
 8005fc8:	6833      	ldr	r3, [r6, #0]
 8005fca:	b30b      	cbz	r3, 8006010 <__sfp+0x68>
 8005fcc:	6836      	ldr	r6, [r6, #0]
 8005fce:	e7f7      	b.n	8005fc0 <__sfp+0x18>
 8005fd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005fd4:	b9d5      	cbnz	r5, 800600c <__sfp+0x64>
 8005fd6:	4b16      	ldr	r3, [pc, #88]	; (8006030 <__sfp+0x88>)
 8005fd8:	60e3      	str	r3, [r4, #12]
 8005fda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005fde:	6665      	str	r5, [r4, #100]	; 0x64
 8005fe0:	f000 f847 	bl	8006072 <__retarget_lock_init_recursive>
 8005fe4:	f7ff ff96 	bl	8005f14 <__sfp_lock_release>
 8005fe8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005fec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ff0:	6025      	str	r5, [r4, #0]
 8005ff2:	61a5      	str	r5, [r4, #24]
 8005ff4:	2208      	movs	r2, #8
 8005ff6:	4629      	mov	r1, r5
 8005ff8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ffc:	f7ff fd44 	bl	8005a88 <memset>
 8006000:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006004:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006008:	4620      	mov	r0, r4
 800600a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800600c:	3468      	adds	r4, #104	; 0x68
 800600e:	e7d9      	b.n	8005fc4 <__sfp+0x1c>
 8006010:	2104      	movs	r1, #4
 8006012:	4638      	mov	r0, r7
 8006014:	f7ff ff62 	bl	8005edc <__sfmoreglue>
 8006018:	4604      	mov	r4, r0
 800601a:	6030      	str	r0, [r6, #0]
 800601c:	2800      	cmp	r0, #0
 800601e:	d1d5      	bne.n	8005fcc <__sfp+0x24>
 8006020:	f7ff ff78 	bl	8005f14 <__sfp_lock_release>
 8006024:	230c      	movs	r3, #12
 8006026:	603b      	str	r3, [r7, #0]
 8006028:	e7ee      	b.n	8006008 <__sfp+0x60>
 800602a:	bf00      	nop
 800602c:	080065f4 	.word	0x080065f4
 8006030:	ffff0001 	.word	0xffff0001

08006034 <_fwalk_reent>:
 8006034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006038:	4606      	mov	r6, r0
 800603a:	4688      	mov	r8, r1
 800603c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006040:	2700      	movs	r7, #0
 8006042:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006046:	f1b9 0901 	subs.w	r9, r9, #1
 800604a:	d505      	bpl.n	8006058 <_fwalk_reent+0x24>
 800604c:	6824      	ldr	r4, [r4, #0]
 800604e:	2c00      	cmp	r4, #0
 8006050:	d1f7      	bne.n	8006042 <_fwalk_reent+0xe>
 8006052:	4638      	mov	r0, r7
 8006054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006058:	89ab      	ldrh	r3, [r5, #12]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d907      	bls.n	800606e <_fwalk_reent+0x3a>
 800605e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006062:	3301      	adds	r3, #1
 8006064:	d003      	beq.n	800606e <_fwalk_reent+0x3a>
 8006066:	4629      	mov	r1, r5
 8006068:	4630      	mov	r0, r6
 800606a:	47c0      	blx	r8
 800606c:	4307      	orrs	r7, r0
 800606e:	3568      	adds	r5, #104	; 0x68
 8006070:	e7e9      	b.n	8006046 <_fwalk_reent+0x12>

08006072 <__retarget_lock_init_recursive>:
 8006072:	4770      	bx	lr

08006074 <__retarget_lock_acquire_recursive>:
 8006074:	4770      	bx	lr

08006076 <__retarget_lock_release_recursive>:
 8006076:	4770      	bx	lr

08006078 <__swhatbuf_r>:
 8006078:	b570      	push	{r4, r5, r6, lr}
 800607a:	460e      	mov	r6, r1
 800607c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006080:	2900      	cmp	r1, #0
 8006082:	b096      	sub	sp, #88	; 0x58
 8006084:	4614      	mov	r4, r2
 8006086:	461d      	mov	r5, r3
 8006088:	da08      	bge.n	800609c <__swhatbuf_r+0x24>
 800608a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	602a      	str	r2, [r5, #0]
 8006092:	061a      	lsls	r2, r3, #24
 8006094:	d410      	bmi.n	80060b8 <__swhatbuf_r+0x40>
 8006096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800609a:	e00e      	b.n	80060ba <__swhatbuf_r+0x42>
 800609c:	466a      	mov	r2, sp
 800609e:	f000 f995 	bl	80063cc <_fstat_r>
 80060a2:	2800      	cmp	r0, #0
 80060a4:	dbf1      	blt.n	800608a <__swhatbuf_r+0x12>
 80060a6:	9a01      	ldr	r2, [sp, #4]
 80060a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80060ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80060b0:	425a      	negs	r2, r3
 80060b2:	415a      	adcs	r2, r3
 80060b4:	602a      	str	r2, [r5, #0]
 80060b6:	e7ee      	b.n	8006096 <__swhatbuf_r+0x1e>
 80060b8:	2340      	movs	r3, #64	; 0x40
 80060ba:	2000      	movs	r0, #0
 80060bc:	6023      	str	r3, [r4, #0]
 80060be:	b016      	add	sp, #88	; 0x58
 80060c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080060c4 <__smakebuf_r>:
 80060c4:	898b      	ldrh	r3, [r1, #12]
 80060c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060c8:	079d      	lsls	r5, r3, #30
 80060ca:	4606      	mov	r6, r0
 80060cc:	460c      	mov	r4, r1
 80060ce:	d507      	bpl.n	80060e0 <__smakebuf_r+0x1c>
 80060d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80060d4:	6023      	str	r3, [r4, #0]
 80060d6:	6123      	str	r3, [r4, #16]
 80060d8:	2301      	movs	r3, #1
 80060da:	6163      	str	r3, [r4, #20]
 80060dc:	b002      	add	sp, #8
 80060de:	bd70      	pop	{r4, r5, r6, pc}
 80060e0:	ab01      	add	r3, sp, #4
 80060e2:	466a      	mov	r2, sp
 80060e4:	f7ff ffc8 	bl	8006078 <__swhatbuf_r>
 80060e8:	9900      	ldr	r1, [sp, #0]
 80060ea:	4605      	mov	r5, r0
 80060ec:	4630      	mov	r0, r6
 80060ee:	f000 f895 	bl	800621c <_malloc_r>
 80060f2:	b948      	cbnz	r0, 8006108 <__smakebuf_r+0x44>
 80060f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060f8:	059a      	lsls	r2, r3, #22
 80060fa:	d4ef      	bmi.n	80060dc <__smakebuf_r+0x18>
 80060fc:	f023 0303 	bic.w	r3, r3, #3
 8006100:	f043 0302 	orr.w	r3, r3, #2
 8006104:	81a3      	strh	r3, [r4, #12]
 8006106:	e7e3      	b.n	80060d0 <__smakebuf_r+0xc>
 8006108:	4b0d      	ldr	r3, [pc, #52]	; (8006140 <__smakebuf_r+0x7c>)
 800610a:	62b3      	str	r3, [r6, #40]	; 0x28
 800610c:	89a3      	ldrh	r3, [r4, #12]
 800610e:	6020      	str	r0, [r4, #0]
 8006110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006114:	81a3      	strh	r3, [r4, #12]
 8006116:	9b00      	ldr	r3, [sp, #0]
 8006118:	6163      	str	r3, [r4, #20]
 800611a:	9b01      	ldr	r3, [sp, #4]
 800611c:	6120      	str	r0, [r4, #16]
 800611e:	b15b      	cbz	r3, 8006138 <__smakebuf_r+0x74>
 8006120:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006124:	4630      	mov	r0, r6
 8006126:	f000 f963 	bl	80063f0 <_isatty_r>
 800612a:	b128      	cbz	r0, 8006138 <__smakebuf_r+0x74>
 800612c:	89a3      	ldrh	r3, [r4, #12]
 800612e:	f023 0303 	bic.w	r3, r3, #3
 8006132:	f043 0301 	orr.w	r3, r3, #1
 8006136:	81a3      	strh	r3, [r4, #12]
 8006138:	89a0      	ldrh	r0, [r4, #12]
 800613a:	4305      	orrs	r5, r0
 800613c:	81a5      	strh	r5, [r4, #12]
 800613e:	e7cd      	b.n	80060dc <__smakebuf_r+0x18>
 8006140:	08005ed1 	.word	0x08005ed1

08006144 <_free_r>:
 8006144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006146:	2900      	cmp	r1, #0
 8006148:	d044      	beq.n	80061d4 <_free_r+0x90>
 800614a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800614e:	9001      	str	r0, [sp, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	f1a1 0404 	sub.w	r4, r1, #4
 8006156:	bfb8      	it	lt
 8006158:	18e4      	addlt	r4, r4, r3
 800615a:	f000 f96b 	bl	8006434 <__malloc_lock>
 800615e:	4a1e      	ldr	r2, [pc, #120]	; (80061d8 <_free_r+0x94>)
 8006160:	9801      	ldr	r0, [sp, #4]
 8006162:	6813      	ldr	r3, [r2, #0]
 8006164:	b933      	cbnz	r3, 8006174 <_free_r+0x30>
 8006166:	6063      	str	r3, [r4, #4]
 8006168:	6014      	str	r4, [r2, #0]
 800616a:	b003      	add	sp, #12
 800616c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006170:	f000 b966 	b.w	8006440 <__malloc_unlock>
 8006174:	42a3      	cmp	r3, r4
 8006176:	d908      	bls.n	800618a <_free_r+0x46>
 8006178:	6825      	ldr	r5, [r4, #0]
 800617a:	1961      	adds	r1, r4, r5
 800617c:	428b      	cmp	r3, r1
 800617e:	bf01      	itttt	eq
 8006180:	6819      	ldreq	r1, [r3, #0]
 8006182:	685b      	ldreq	r3, [r3, #4]
 8006184:	1949      	addeq	r1, r1, r5
 8006186:	6021      	streq	r1, [r4, #0]
 8006188:	e7ed      	b.n	8006166 <_free_r+0x22>
 800618a:	461a      	mov	r2, r3
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	b10b      	cbz	r3, 8006194 <_free_r+0x50>
 8006190:	42a3      	cmp	r3, r4
 8006192:	d9fa      	bls.n	800618a <_free_r+0x46>
 8006194:	6811      	ldr	r1, [r2, #0]
 8006196:	1855      	adds	r5, r2, r1
 8006198:	42a5      	cmp	r5, r4
 800619a:	d10b      	bne.n	80061b4 <_free_r+0x70>
 800619c:	6824      	ldr	r4, [r4, #0]
 800619e:	4421      	add	r1, r4
 80061a0:	1854      	adds	r4, r2, r1
 80061a2:	42a3      	cmp	r3, r4
 80061a4:	6011      	str	r1, [r2, #0]
 80061a6:	d1e0      	bne.n	800616a <_free_r+0x26>
 80061a8:	681c      	ldr	r4, [r3, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	6053      	str	r3, [r2, #4]
 80061ae:	4421      	add	r1, r4
 80061b0:	6011      	str	r1, [r2, #0]
 80061b2:	e7da      	b.n	800616a <_free_r+0x26>
 80061b4:	d902      	bls.n	80061bc <_free_r+0x78>
 80061b6:	230c      	movs	r3, #12
 80061b8:	6003      	str	r3, [r0, #0]
 80061ba:	e7d6      	b.n	800616a <_free_r+0x26>
 80061bc:	6825      	ldr	r5, [r4, #0]
 80061be:	1961      	adds	r1, r4, r5
 80061c0:	428b      	cmp	r3, r1
 80061c2:	bf04      	itt	eq
 80061c4:	6819      	ldreq	r1, [r3, #0]
 80061c6:	685b      	ldreq	r3, [r3, #4]
 80061c8:	6063      	str	r3, [r4, #4]
 80061ca:	bf04      	itt	eq
 80061cc:	1949      	addeq	r1, r1, r5
 80061ce:	6021      	streq	r1, [r4, #0]
 80061d0:	6054      	str	r4, [r2, #4]
 80061d2:	e7ca      	b.n	800616a <_free_r+0x26>
 80061d4:	b003      	add	sp, #12
 80061d6:	bd30      	pop	{r4, r5, pc}
 80061d8:	2000d50c 	.word	0x2000d50c

080061dc <sbrk_aligned>:
 80061dc:	b570      	push	{r4, r5, r6, lr}
 80061de:	4e0e      	ldr	r6, [pc, #56]	; (8006218 <sbrk_aligned+0x3c>)
 80061e0:	460c      	mov	r4, r1
 80061e2:	6831      	ldr	r1, [r6, #0]
 80061e4:	4605      	mov	r5, r0
 80061e6:	b911      	cbnz	r1, 80061ee <sbrk_aligned+0x12>
 80061e8:	f000 f88c 	bl	8006304 <_sbrk_r>
 80061ec:	6030      	str	r0, [r6, #0]
 80061ee:	4621      	mov	r1, r4
 80061f0:	4628      	mov	r0, r5
 80061f2:	f000 f887 	bl	8006304 <_sbrk_r>
 80061f6:	1c43      	adds	r3, r0, #1
 80061f8:	d00a      	beq.n	8006210 <sbrk_aligned+0x34>
 80061fa:	1cc4      	adds	r4, r0, #3
 80061fc:	f024 0403 	bic.w	r4, r4, #3
 8006200:	42a0      	cmp	r0, r4
 8006202:	d007      	beq.n	8006214 <sbrk_aligned+0x38>
 8006204:	1a21      	subs	r1, r4, r0
 8006206:	4628      	mov	r0, r5
 8006208:	f000 f87c 	bl	8006304 <_sbrk_r>
 800620c:	3001      	adds	r0, #1
 800620e:	d101      	bne.n	8006214 <sbrk_aligned+0x38>
 8006210:	f04f 34ff 	mov.w	r4, #4294967295
 8006214:	4620      	mov	r0, r4
 8006216:	bd70      	pop	{r4, r5, r6, pc}
 8006218:	2000d510 	.word	0x2000d510

0800621c <_malloc_r>:
 800621c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006220:	1ccd      	adds	r5, r1, #3
 8006222:	f025 0503 	bic.w	r5, r5, #3
 8006226:	3508      	adds	r5, #8
 8006228:	2d0c      	cmp	r5, #12
 800622a:	bf38      	it	cc
 800622c:	250c      	movcc	r5, #12
 800622e:	2d00      	cmp	r5, #0
 8006230:	4607      	mov	r7, r0
 8006232:	db01      	blt.n	8006238 <_malloc_r+0x1c>
 8006234:	42a9      	cmp	r1, r5
 8006236:	d905      	bls.n	8006244 <_malloc_r+0x28>
 8006238:	230c      	movs	r3, #12
 800623a:	603b      	str	r3, [r7, #0]
 800623c:	2600      	movs	r6, #0
 800623e:	4630      	mov	r0, r6
 8006240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006244:	4e2e      	ldr	r6, [pc, #184]	; (8006300 <_malloc_r+0xe4>)
 8006246:	f000 f8f5 	bl	8006434 <__malloc_lock>
 800624a:	6833      	ldr	r3, [r6, #0]
 800624c:	461c      	mov	r4, r3
 800624e:	bb34      	cbnz	r4, 800629e <_malloc_r+0x82>
 8006250:	4629      	mov	r1, r5
 8006252:	4638      	mov	r0, r7
 8006254:	f7ff ffc2 	bl	80061dc <sbrk_aligned>
 8006258:	1c43      	adds	r3, r0, #1
 800625a:	4604      	mov	r4, r0
 800625c:	d14d      	bne.n	80062fa <_malloc_r+0xde>
 800625e:	6834      	ldr	r4, [r6, #0]
 8006260:	4626      	mov	r6, r4
 8006262:	2e00      	cmp	r6, #0
 8006264:	d140      	bne.n	80062e8 <_malloc_r+0xcc>
 8006266:	6823      	ldr	r3, [r4, #0]
 8006268:	4631      	mov	r1, r6
 800626a:	4638      	mov	r0, r7
 800626c:	eb04 0803 	add.w	r8, r4, r3
 8006270:	f000 f848 	bl	8006304 <_sbrk_r>
 8006274:	4580      	cmp	r8, r0
 8006276:	d13a      	bne.n	80062ee <_malloc_r+0xd2>
 8006278:	6821      	ldr	r1, [r4, #0]
 800627a:	3503      	adds	r5, #3
 800627c:	1a6d      	subs	r5, r5, r1
 800627e:	f025 0503 	bic.w	r5, r5, #3
 8006282:	3508      	adds	r5, #8
 8006284:	2d0c      	cmp	r5, #12
 8006286:	bf38      	it	cc
 8006288:	250c      	movcc	r5, #12
 800628a:	4629      	mov	r1, r5
 800628c:	4638      	mov	r0, r7
 800628e:	f7ff ffa5 	bl	80061dc <sbrk_aligned>
 8006292:	3001      	adds	r0, #1
 8006294:	d02b      	beq.n	80062ee <_malloc_r+0xd2>
 8006296:	6823      	ldr	r3, [r4, #0]
 8006298:	442b      	add	r3, r5
 800629a:	6023      	str	r3, [r4, #0]
 800629c:	e00e      	b.n	80062bc <_malloc_r+0xa0>
 800629e:	6822      	ldr	r2, [r4, #0]
 80062a0:	1b52      	subs	r2, r2, r5
 80062a2:	d41e      	bmi.n	80062e2 <_malloc_r+0xc6>
 80062a4:	2a0b      	cmp	r2, #11
 80062a6:	d916      	bls.n	80062d6 <_malloc_r+0xba>
 80062a8:	1961      	adds	r1, r4, r5
 80062aa:	42a3      	cmp	r3, r4
 80062ac:	6025      	str	r5, [r4, #0]
 80062ae:	bf18      	it	ne
 80062b0:	6059      	strne	r1, [r3, #4]
 80062b2:	6863      	ldr	r3, [r4, #4]
 80062b4:	bf08      	it	eq
 80062b6:	6031      	streq	r1, [r6, #0]
 80062b8:	5162      	str	r2, [r4, r5]
 80062ba:	604b      	str	r3, [r1, #4]
 80062bc:	4638      	mov	r0, r7
 80062be:	f104 060b 	add.w	r6, r4, #11
 80062c2:	f000 f8bd 	bl	8006440 <__malloc_unlock>
 80062c6:	f026 0607 	bic.w	r6, r6, #7
 80062ca:	1d23      	adds	r3, r4, #4
 80062cc:	1af2      	subs	r2, r6, r3
 80062ce:	d0b6      	beq.n	800623e <_malloc_r+0x22>
 80062d0:	1b9b      	subs	r3, r3, r6
 80062d2:	50a3      	str	r3, [r4, r2]
 80062d4:	e7b3      	b.n	800623e <_malloc_r+0x22>
 80062d6:	6862      	ldr	r2, [r4, #4]
 80062d8:	42a3      	cmp	r3, r4
 80062da:	bf0c      	ite	eq
 80062dc:	6032      	streq	r2, [r6, #0]
 80062de:	605a      	strne	r2, [r3, #4]
 80062e0:	e7ec      	b.n	80062bc <_malloc_r+0xa0>
 80062e2:	4623      	mov	r3, r4
 80062e4:	6864      	ldr	r4, [r4, #4]
 80062e6:	e7b2      	b.n	800624e <_malloc_r+0x32>
 80062e8:	4634      	mov	r4, r6
 80062ea:	6876      	ldr	r6, [r6, #4]
 80062ec:	e7b9      	b.n	8006262 <_malloc_r+0x46>
 80062ee:	230c      	movs	r3, #12
 80062f0:	603b      	str	r3, [r7, #0]
 80062f2:	4638      	mov	r0, r7
 80062f4:	f000 f8a4 	bl	8006440 <__malloc_unlock>
 80062f8:	e7a1      	b.n	800623e <_malloc_r+0x22>
 80062fa:	6025      	str	r5, [r4, #0]
 80062fc:	e7de      	b.n	80062bc <_malloc_r+0xa0>
 80062fe:	bf00      	nop
 8006300:	2000d50c 	.word	0x2000d50c

08006304 <_sbrk_r>:
 8006304:	b538      	push	{r3, r4, r5, lr}
 8006306:	4d06      	ldr	r5, [pc, #24]	; (8006320 <_sbrk_r+0x1c>)
 8006308:	2300      	movs	r3, #0
 800630a:	4604      	mov	r4, r0
 800630c:	4608      	mov	r0, r1
 800630e:	602b      	str	r3, [r5, #0]
 8006310:	f000 f8ae 	bl	8006470 <_sbrk>
 8006314:	1c43      	adds	r3, r0, #1
 8006316:	d102      	bne.n	800631e <_sbrk_r+0x1a>
 8006318:	682b      	ldr	r3, [r5, #0]
 800631a:	b103      	cbz	r3, 800631e <_sbrk_r+0x1a>
 800631c:	6023      	str	r3, [r4, #0]
 800631e:	bd38      	pop	{r3, r4, r5, pc}
 8006320:	2000d514 	.word	0x2000d514

08006324 <__sread>:
 8006324:	b510      	push	{r4, lr}
 8006326:	460c      	mov	r4, r1
 8006328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800632c:	f000 f88e 	bl	800644c <_read_r>
 8006330:	2800      	cmp	r0, #0
 8006332:	bfab      	itete	ge
 8006334:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006336:	89a3      	ldrhlt	r3, [r4, #12]
 8006338:	181b      	addge	r3, r3, r0
 800633a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800633e:	bfac      	ite	ge
 8006340:	6563      	strge	r3, [r4, #84]	; 0x54
 8006342:	81a3      	strhlt	r3, [r4, #12]
 8006344:	bd10      	pop	{r4, pc}

08006346 <__swrite>:
 8006346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800634a:	461f      	mov	r7, r3
 800634c:	898b      	ldrh	r3, [r1, #12]
 800634e:	05db      	lsls	r3, r3, #23
 8006350:	4605      	mov	r5, r0
 8006352:	460c      	mov	r4, r1
 8006354:	4616      	mov	r6, r2
 8006356:	d505      	bpl.n	8006364 <__swrite+0x1e>
 8006358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800635c:	2302      	movs	r3, #2
 800635e:	2200      	movs	r2, #0
 8006360:	f000 f856 	bl	8006410 <_lseek_r>
 8006364:	89a3      	ldrh	r3, [r4, #12]
 8006366:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800636a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800636e:	81a3      	strh	r3, [r4, #12]
 8006370:	4632      	mov	r2, r6
 8006372:	463b      	mov	r3, r7
 8006374:	4628      	mov	r0, r5
 8006376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800637a:	f7ff bb31 	b.w	80059e0 <_write_r>

0800637e <__sseek>:
 800637e:	b510      	push	{r4, lr}
 8006380:	460c      	mov	r4, r1
 8006382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006386:	f000 f843 	bl	8006410 <_lseek_r>
 800638a:	1c43      	adds	r3, r0, #1
 800638c:	89a3      	ldrh	r3, [r4, #12]
 800638e:	bf15      	itete	ne
 8006390:	6560      	strne	r0, [r4, #84]	; 0x54
 8006392:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006396:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800639a:	81a3      	strheq	r3, [r4, #12]
 800639c:	bf18      	it	ne
 800639e:	81a3      	strhne	r3, [r4, #12]
 80063a0:	bd10      	pop	{r4, pc}

080063a2 <__sclose>:
 80063a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063a6:	f000 b801 	b.w	80063ac <_close_r>
	...

080063ac <_close_r>:
 80063ac:	b538      	push	{r3, r4, r5, lr}
 80063ae:	4d06      	ldr	r5, [pc, #24]	; (80063c8 <_close_r+0x1c>)
 80063b0:	2300      	movs	r3, #0
 80063b2:	4604      	mov	r4, r0
 80063b4:	4608      	mov	r0, r1
 80063b6:	602b      	str	r3, [r5, #0]
 80063b8:	f7fa fac3 	bl	8000942 <_close>
 80063bc:	1c43      	adds	r3, r0, #1
 80063be:	d102      	bne.n	80063c6 <_close_r+0x1a>
 80063c0:	682b      	ldr	r3, [r5, #0]
 80063c2:	b103      	cbz	r3, 80063c6 <_close_r+0x1a>
 80063c4:	6023      	str	r3, [r4, #0]
 80063c6:	bd38      	pop	{r3, r4, r5, pc}
 80063c8:	2000d514 	.word	0x2000d514

080063cc <_fstat_r>:
 80063cc:	b538      	push	{r3, r4, r5, lr}
 80063ce:	4d07      	ldr	r5, [pc, #28]	; (80063ec <_fstat_r+0x20>)
 80063d0:	2300      	movs	r3, #0
 80063d2:	4604      	mov	r4, r0
 80063d4:	4608      	mov	r0, r1
 80063d6:	4611      	mov	r1, r2
 80063d8:	602b      	str	r3, [r5, #0]
 80063da:	f7fa fabe 	bl	800095a <_fstat>
 80063de:	1c43      	adds	r3, r0, #1
 80063e0:	d102      	bne.n	80063e8 <_fstat_r+0x1c>
 80063e2:	682b      	ldr	r3, [r5, #0]
 80063e4:	b103      	cbz	r3, 80063e8 <_fstat_r+0x1c>
 80063e6:	6023      	str	r3, [r4, #0]
 80063e8:	bd38      	pop	{r3, r4, r5, pc}
 80063ea:	bf00      	nop
 80063ec:	2000d514 	.word	0x2000d514

080063f0 <_isatty_r>:
 80063f0:	b538      	push	{r3, r4, r5, lr}
 80063f2:	4d06      	ldr	r5, [pc, #24]	; (800640c <_isatty_r+0x1c>)
 80063f4:	2300      	movs	r3, #0
 80063f6:	4604      	mov	r4, r0
 80063f8:	4608      	mov	r0, r1
 80063fa:	602b      	str	r3, [r5, #0]
 80063fc:	f7fa fabd 	bl	800097a <_isatty>
 8006400:	1c43      	adds	r3, r0, #1
 8006402:	d102      	bne.n	800640a <_isatty_r+0x1a>
 8006404:	682b      	ldr	r3, [r5, #0]
 8006406:	b103      	cbz	r3, 800640a <_isatty_r+0x1a>
 8006408:	6023      	str	r3, [r4, #0]
 800640a:	bd38      	pop	{r3, r4, r5, pc}
 800640c:	2000d514 	.word	0x2000d514

08006410 <_lseek_r>:
 8006410:	b538      	push	{r3, r4, r5, lr}
 8006412:	4d07      	ldr	r5, [pc, #28]	; (8006430 <_lseek_r+0x20>)
 8006414:	4604      	mov	r4, r0
 8006416:	4608      	mov	r0, r1
 8006418:	4611      	mov	r1, r2
 800641a:	2200      	movs	r2, #0
 800641c:	602a      	str	r2, [r5, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	f7fa fab6 	bl	8000990 <_lseek>
 8006424:	1c43      	adds	r3, r0, #1
 8006426:	d102      	bne.n	800642e <_lseek_r+0x1e>
 8006428:	682b      	ldr	r3, [r5, #0]
 800642a:	b103      	cbz	r3, 800642e <_lseek_r+0x1e>
 800642c:	6023      	str	r3, [r4, #0]
 800642e:	bd38      	pop	{r3, r4, r5, pc}
 8006430:	2000d514 	.word	0x2000d514

08006434 <__malloc_lock>:
 8006434:	4801      	ldr	r0, [pc, #4]	; (800643c <__malloc_lock+0x8>)
 8006436:	f7ff be1d 	b.w	8006074 <__retarget_lock_acquire_recursive>
 800643a:	bf00      	nop
 800643c:	2000d507 	.word	0x2000d507

08006440 <__malloc_unlock>:
 8006440:	4801      	ldr	r0, [pc, #4]	; (8006448 <__malloc_unlock+0x8>)
 8006442:	f7ff be18 	b.w	8006076 <__retarget_lock_release_recursive>
 8006446:	bf00      	nop
 8006448:	2000d507 	.word	0x2000d507

0800644c <_read_r>:
 800644c:	b538      	push	{r3, r4, r5, lr}
 800644e:	4d07      	ldr	r5, [pc, #28]	; (800646c <_read_r+0x20>)
 8006450:	4604      	mov	r4, r0
 8006452:	4608      	mov	r0, r1
 8006454:	4611      	mov	r1, r2
 8006456:	2200      	movs	r2, #0
 8006458:	602a      	str	r2, [r5, #0]
 800645a:	461a      	mov	r2, r3
 800645c:	f7fa fa54 	bl	8000908 <_read>
 8006460:	1c43      	adds	r3, r0, #1
 8006462:	d102      	bne.n	800646a <_read_r+0x1e>
 8006464:	682b      	ldr	r3, [r5, #0]
 8006466:	b103      	cbz	r3, 800646a <_read_r+0x1e>
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	bd38      	pop	{r3, r4, r5, pc}
 800646c:	2000d514 	.word	0x2000d514

08006470 <_sbrk>:
 8006470:	4a04      	ldr	r2, [pc, #16]	; (8006484 <_sbrk+0x14>)
 8006472:	6811      	ldr	r1, [r2, #0]
 8006474:	4603      	mov	r3, r0
 8006476:	b909      	cbnz	r1, 800647c <_sbrk+0xc>
 8006478:	4903      	ldr	r1, [pc, #12]	; (8006488 <_sbrk+0x18>)
 800647a:	6011      	str	r1, [r2, #0]
 800647c:	6810      	ldr	r0, [r2, #0]
 800647e:	4403      	add	r3, r0
 8006480:	6013      	str	r3, [r2, #0]
 8006482:	4770      	bx	lr
 8006484:	2000d518 	.word	0x2000d518
 8006488:	2000d520 	.word	0x2000d520

0800648c <_init>:
 800648c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648e:	bf00      	nop
 8006490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006492:	bc08      	pop	{r3}
 8006494:	469e      	mov	lr, r3
 8006496:	4770      	bx	lr

08006498 <_fini>:
 8006498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800649a:	bf00      	nop
 800649c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800649e:	bc08      	pop	{r3}
 80064a0:	469e      	mov	lr, r3
 80064a2:	4770      	bx	lr
