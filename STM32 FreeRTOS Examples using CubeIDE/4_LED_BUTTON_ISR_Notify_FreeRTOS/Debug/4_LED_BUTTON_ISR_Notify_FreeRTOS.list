
4_LED_BUTTON_ISR_Notify_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000783c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  080079dc  080079dc  000179dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b98  08007b98  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007b98  08007b98  00017b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ba0  08007ba0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ba0  08007ba0  00017ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ba4  08007ba4  00017ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007ba8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d524  20000078  08007c20  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000d59c  08007c20  0002d59c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a9a  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000320d  00000000  00000000  00038b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001578  00000000  00000000  0003bd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001420  00000000  00000000  0003d2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019172  00000000  00000000  0003e6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a12  00000000  00000000  0005785a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c8e6  00000000  00000000  0006f26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010bb52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ea4  00000000  00000000  0010bba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080079c4 	.word	0x080079c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080079c4 	.word	0x080079c4

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	2000cbb4 	.word	0x2000cbb4
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f000 fbcb 	bl	8000dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f883 	bl	8000738 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 f915 	bl	8000860 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000636:	f000 f8e9 	bl	800080c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1<<0);
 800063a:	4b33      	ldr	r3, [pc, #204]	; (8000708 <main+0xe4>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a32      	ldr	r2, [pc, #200]	; (8000708 <main+0xe4>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6013      	str	r3, [r2, #0]


  SEGGER_SYSVIEW_Conf();
 8000646:	f004 fec9 	bl	80053dc <SEGGER_SYSVIEW_Conf>
  vSetVarulMaxPRIGROUPValue();
 800064a:	f004 fc67 	bl	8004f1c <vSetVarulMaxPRIGROUPValue>
  SEGGER_SYSVIEW_Start();
 800064e:	f005 ffa7 	bl	80065a0 <SEGGER_SYSVIEW_Start>


/**********************************PREEMPTIVE IS DISABLED SO CO-OPERATIVE SCHEDULING IS WORKING********************/
status = xTaskCreate(Task1_Handler,"Red Led Task",configMINIMAL_STACK_SIZE,NULL,3,&Task1_Handle);
 8000652:	4b2e      	ldr	r3, [pc, #184]	; (800070c <main+0xe8>)
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	2303      	movs	r3, #3
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	2300      	movs	r3, #0
 800065c:	2282      	movs	r2, #130	; 0x82
 800065e:	492c      	ldr	r1, [pc, #176]	; (8000710 <main+0xec>)
 8000660:	482c      	ldr	r0, [pc, #176]	; (8000714 <main+0xf0>)
 8000662:	f002 fd6b 	bl	800313c <xTaskCreate>
 8000666:	4603      	mov	r3, r0
 8000668:	4a2b      	ldr	r2, [pc, #172]	; (8000718 <main+0xf4>)
 800066a:	6013      	str	r3, [r2, #0]

configASSERT(status == pdPASS); // Check if it is succesfully created
 800066c:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <main+0xf4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d00a      	beq.n	800068a <main+0x66>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000678:	f383 8811 	msr	BASEPRI, r3
 800067c:	f3bf 8f6f 	isb	sy
 8000680:	f3bf 8f4f 	dsb	sy
 8000684:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000686:	bf00      	nop
 8000688:	e7fe      	b.n	8000688 <main+0x64>

current_handle = Task1_Handle;
 800068a:	4b20      	ldr	r3, [pc, #128]	; (800070c <main+0xe8>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a23      	ldr	r2, [pc, #140]	; (800071c <main+0xf8>)
 8000690:	6013      	str	r3, [r2, #0]

status = xTaskCreate(Task2_Handler,"Green Led Task",configMINIMAL_STACK_SIZE,NULL,2,&Task2_Handle);
 8000692:	4b23      	ldr	r3, [pc, #140]	; (8000720 <main+0xfc>)
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2302      	movs	r3, #2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2300      	movs	r3, #0
 800069c:	2282      	movs	r2, #130	; 0x82
 800069e:	4921      	ldr	r1, [pc, #132]	; (8000724 <main+0x100>)
 80006a0:	4821      	ldr	r0, [pc, #132]	; (8000728 <main+0x104>)
 80006a2:	f002 fd4b 	bl	800313c <xTaskCreate>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <main+0xf4>)
 80006aa:	6013      	str	r3, [r2, #0]

configASSERT(status == pdPASS);  // Check if it is succesfully created
 80006ac:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <main+0xf4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d00a      	beq.n	80006ca <main+0xa6>
        __asm volatile
 80006b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006b8:	f383 8811 	msr	BASEPRI, r3
 80006bc:	f3bf 8f6f 	isb	sy
 80006c0:	f3bf 8f4f 	dsb	sy
 80006c4:	60bb      	str	r3, [r7, #8]
    }
 80006c6:	bf00      	nop
 80006c8:	e7fe      	b.n	80006c8 <main+0xa4>

status = xTaskCreate(Task3_Handler,"Blue Leds Task",configMINIMAL_STACK_SIZE,NULL,1,&Task3_Handle);
 80006ca:	4b18      	ldr	r3, [pc, #96]	; (800072c <main+0x108>)
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	2301      	movs	r3, #1
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2300      	movs	r3, #0
 80006d4:	2282      	movs	r2, #130	; 0x82
 80006d6:	4916      	ldr	r1, [pc, #88]	; (8000730 <main+0x10c>)
 80006d8:	4816      	ldr	r0, [pc, #88]	; (8000734 <main+0x110>)
 80006da:	f002 fd2f 	bl	800313c <xTaskCreate>
 80006de:	4603      	mov	r3, r0
 80006e0:	4a0d      	ldr	r2, [pc, #52]	; (8000718 <main+0xf4>)
 80006e2:	6013      	str	r3, [r2, #0]

configASSERT(status == pdPASS); // Check if it is succesfully created
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <main+0xf4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d00a      	beq.n	8000702 <main+0xde>
        __asm volatile
 80006ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006f0:	f383 8811 	msr	BASEPRI, r3
 80006f4:	f3bf 8f6f 	isb	sy
 80006f8:	f3bf 8f4f 	dsb	sy
 80006fc:	607b      	str	r3, [r7, #4]
    }
 80006fe:	bf00      	nop
 8000700:	e7fe      	b.n	8000700 <main+0xdc>



vTaskStartScheduler();
 8000702:	f002 ff51 	bl	80035a8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000706:	e7fe      	b.n	8000706 <main+0xe2>
 8000708:	e0001000 	.word	0xe0001000
 800070c:	200000d8 	.word	0x200000d8
 8000710:	080079dc 	.word	0x080079dc
 8000714:	08000911 	.word	0x08000911
 8000718:	200000e8 	.word	0x200000e8
 800071c:	200000e4 	.word	0x200000e4
 8000720:	200000dc 	.word	0x200000dc
 8000724:	080079ec 	.word	0x080079ec
 8000728:	0800098d 	.word	0x0800098d
 800072c:	200000e0 	.word	0x200000e0
 8000730:	080079fc 	.word	0x080079fc
 8000734:	08000a09 	.word	0x08000a09

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	; 0x50
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0320 	add.w	r3, r7, #32
 8000742:	2230      	movs	r2, #48	; 0x30
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f006 fcc6 	bl	80070d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	4b28      	ldr	r3, [pc, #160]	; (8000804 <SystemClock_Config+0xcc>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	4a27      	ldr	r2, [pc, #156]	; (8000804 <SystemClock_Config+0xcc>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	; 0x40
 800076c:	4b25      	ldr	r3, [pc, #148]	; (8000804 <SystemClock_Config+0xcc>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	4b22      	ldr	r3, [pc, #136]	; (8000808 <SystemClock_Config+0xd0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000784:	4a20      	ldr	r2, [pc, #128]	; (8000808 <SystemClock_Config+0xd0>)
 8000786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <SystemClock_Config+0xd0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000798:	2302      	movs	r3, #2
 800079a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079c:	2301      	movs	r3, #1
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a0:	2310      	movs	r3, #16
 80007a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a4:	2302      	movs	r3, #2
 80007a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a8:	2300      	movs	r3, #0
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007ac:	2308      	movs	r3, #8
 80007ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80007b0:	2354      	movs	r3, #84	; 0x54
 80007b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b8:	2304      	movs	r3, #4
 80007ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007bc:	f107 0320 	add.w	r3, r7, #32
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fe0b 	bl	80013dc <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007cc:	f000 f9a5 	bl	8000b1a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d0:	230f      	movs	r3, #15
 80007d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	2302      	movs	r3, #2
 80007d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	2102      	movs	r1, #2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 f86d 	bl	80018cc <HAL_RCC_ClockConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007f8:	f000 f98f 	bl	8000b1a <Error_Handler>
  }
}
 80007fc:	bf00      	nop
 80007fe:	3750      	adds	r7, #80	; 0x50
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <MX_USART2_UART_Init+0x50>)
 8000814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000844:	f001 fcd4 	bl	80021f0 <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800084e:	f000 f964 	bl	8000b1a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000094 	.word	0x20000094
 800085c:	40004400 	.word	0x40004400

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b23      	ldr	r3, [pc, #140]	; (8000908 <MX_GPIO_Init+0xa8>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a22      	ldr	r2, [pc, #136]	; (8000908 <MX_GPIO_Init+0xa8>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b20      	ldr	r3, [pc, #128]	; (8000908 <MX_GPIO_Init+0xa8>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <MX_GPIO_Init+0xa8>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a1b      	ldr	r2, [pc, #108]	; (8000908 <MX_GPIO_Init+0xa8>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <MX_GPIO_Init+0xa8>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	210f      	movs	r1, #15
 80008b2:	4816      	ldr	r0, [pc, #88]	; (800090c <MX_GPIO_Init+0xac>)
 80008b4:	f000 fd46 	bl	8001344 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80008b8:	230f      	movs	r3, #15
 80008ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c4:	2303      	movs	r3, #3
 80008c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	4619      	mov	r1, r3
 80008ce:	480f      	ldr	r0, [pc, #60]	; (800090c <MX_GPIO_Init+0xac>)
 80008d0:	f000 fb9c 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008e0:	2302      	movs	r3, #2
 80008e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	4619      	mov	r1, r3
 80008ea:	4808      	ldr	r0, [pc, #32]	; (800090c <MX_GPIO_Init+0xac>)
 80008ec:	f000 fb8e 	bl	800100c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5,0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2105      	movs	r1, #5
 80008f4:	2028      	movs	r0, #40	; 0x28
 80008f6:	f000 fb5f 	bl	8000fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008fa:	2028      	movs	r0, #40	; 0x28
 80008fc:	f000 fb78 	bl	8000ff0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000900:	bf00      	nop
 8000902:	3720      	adds	r7, #32
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800
 800090c:	40020800 	.word	0x40020800

08000910 <Task1_Handler>:

/* USER CODE BEGIN 4 */
static void Task1_Handler(void *params)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af02      	add	r7, sp, #8
 8000916:	6078      	str	r0, [r7, #4]
    BaseType_t status;

	while(1)
	{
        HAL_UART_Transmit(&huart2,(uint8_t*)tx_buffer,sprintf(tx_buffer,"Toggling Red Button\r\n"),HAL_MAX_DELAY);
 8000918:	4916      	ldr	r1, [pc, #88]	; (8000974 <Task1_Handler+0x64>)
 800091a:	4817      	ldr	r0, [pc, #92]	; (8000978 <Task1_Handler+0x68>)
 800091c:	f006 fbe4 	bl	80070e8 <siprintf>
 8000920:	4603      	mov	r3, r0
 8000922:	b29a      	uxth	r2, r3
 8000924:	f04f 33ff 	mov.w	r3, #4294967295
 8000928:	4913      	ldr	r1, [pc, #76]	; (8000978 <Task1_Handler+0x68>)
 800092a:	4814      	ldr	r0, [pc, #80]	; (800097c <Task1_Handler+0x6c>)
 800092c:	f001 fcad 	bl	800228a <HAL_UART_Transmit>
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8000930:	2102      	movs	r1, #2
 8000932:	4813      	ldr	r0, [pc, #76]	; (8000980 <Task1_Handler+0x70>)
 8000934:	f000 fd1f 	bl	8001376 <HAL_GPIO_TogglePin>
        status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000938:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093c:	9300      	str	r3, [sp, #0]
 800093e:	2300      	movs	r3, #0
 8000940:	2200      	movs	r2, #0
 8000942:	2100      	movs	r1, #0
 8000944:	2000      	movs	r0, #0
 8000946:	f003 fbe1 	bl	800410c <xTaskGenericNotifyWait>
 800094a:	60f8      	str	r0, [r7, #12]
        if(status == pdTRUE)
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d1e2      	bne.n	8000918 <Task1_Handler+0x8>
        {
           portENTER_CRITICAL();
 8000952:	f004 fa01 	bl	8004d58 <vPortEnterCritical>
           current_handle = Task2_Handle;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <Task1_Handler+0x74>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <Task1_Handler+0x78>)
 800095c:	6013      	str	r3, [r2, #0]
           portEXIT_CRITICAL();
 800095e:	f004 fa2b 	bl	8004db8 <vPortExitCritical>
           HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000962:	2201      	movs	r2, #1
 8000964:	2102      	movs	r1, #2
 8000966:	4806      	ldr	r0, [pc, #24]	; (8000980 <Task1_Handler+0x70>)
 8000968:	f000 fcec 	bl	8001344 <HAL_GPIO_WritePin>
           vTaskDelete(NULL); // Delete itself
 800096c:	2000      	movs	r0, #0
 800096e:	f002 fd6d 	bl	800344c <vTaskDelete>
        HAL_UART_Transmit(&huart2,(uint8_t*)tx_buffer,sprintf(tx_buffer,"Toggling Red Button\r\n"),HAL_MAX_DELAY);
 8000972:	e7d1      	b.n	8000918 <Task1_Handler+0x8>
 8000974:	08007a0c 	.word	0x08007a0c
 8000978:	200000ec 	.word	0x200000ec
 800097c:	20000094 	.word	0x20000094
 8000980:	40020800 	.word	0x40020800
 8000984:	200000dc 	.word	0x200000dc
 8000988:	200000e4 	.word	0x200000e4

0800098c <Task2_Handler>:

	}

}
static void Task2_Handler(void *params)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af02      	add	r7, sp, #8
 8000992:	6078      	str	r0, [r7, #4]
    BaseType_t status;

	while(1)
	{
        HAL_UART_Transmit(&huart2,(uint8_t*)tx_buffer,sprintf(tx_buffer,"Toggling Green Button\r\n"),HAL_MAX_DELAY);
 8000994:	4916      	ldr	r1, [pc, #88]	; (80009f0 <Task2_Handler+0x64>)
 8000996:	4817      	ldr	r0, [pc, #92]	; (80009f4 <Task2_Handler+0x68>)
 8000998:	f006 fba6 	bl	80070e8 <siprintf>
 800099c:	4603      	mov	r3, r0
 800099e:	b29a      	uxth	r2, r3
 80009a0:	f04f 33ff 	mov.w	r3, #4294967295
 80009a4:	4913      	ldr	r1, [pc, #76]	; (80009f4 <Task2_Handler+0x68>)
 80009a6:	4814      	ldr	r0, [pc, #80]	; (80009f8 <Task2_Handler+0x6c>)
 80009a8:	f001 fc6f 	bl	800228a <HAL_UART_Transmit>
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 80009ac:	2101      	movs	r1, #1
 80009ae:	4813      	ldr	r0, [pc, #76]	; (80009fc <Task2_Handler+0x70>)
 80009b0:	f000 fce1 	bl	8001376 <HAL_GPIO_TogglePin>
        status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 80009b4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	2300      	movs	r3, #0
 80009bc:	2200      	movs	r2, #0
 80009be:	2100      	movs	r1, #0
 80009c0:	2000      	movs	r0, #0
 80009c2:	f003 fba3 	bl	800410c <xTaskGenericNotifyWait>
 80009c6:	60f8      	str	r0, [r7, #12]
        if(status == pdTRUE)
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d1e2      	bne.n	8000994 <Task2_Handler+0x8>
        {
           portENTER_CRITICAL();
 80009ce:	f004 f9c3 	bl	8004d58 <vPortEnterCritical>
           current_handle = Task3_Handle;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <Task2_Handler+0x74>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <Task2_Handler+0x78>)
 80009d8:	6013      	str	r3, [r2, #0]
           portEXIT_CRITICAL();
 80009da:	f004 f9ed 	bl	8004db8 <vPortExitCritical>
           HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	2101      	movs	r1, #1
 80009e2:	4806      	ldr	r0, [pc, #24]	; (80009fc <Task2_Handler+0x70>)
 80009e4:	f000 fcae 	bl	8001344 <HAL_GPIO_WritePin>
           vTaskDelete(NULL); // Delete itself
 80009e8:	2000      	movs	r0, #0
 80009ea:	f002 fd2f 	bl	800344c <vTaskDelete>
        HAL_UART_Transmit(&huart2,(uint8_t*)tx_buffer,sprintf(tx_buffer,"Toggling Green Button\r\n"),HAL_MAX_DELAY);
 80009ee:	e7d1      	b.n	8000994 <Task2_Handler+0x8>
 80009f0:	08007a24 	.word	0x08007a24
 80009f4:	200000ec 	.word	0x200000ec
 80009f8:	20000094 	.word	0x20000094
 80009fc:	40020800 	.word	0x40020800
 8000a00:	200000e0 	.word	0x200000e0
 8000a04:	200000e4 	.word	0x200000e4

08000a08 <Task3_Handler>:
        }

	}
}
static void Task3_Handler(void *params)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af02      	add	r7, sp, #8
 8000a0e:	6078      	str	r0, [r7, #4]
    BaseType_t status;

	while(1)
	{
        HAL_UART_Transmit(&huart2,(uint8_t*)tx_buffer,sprintf(tx_buffer,"Toggling Blue Buttons\r\n"),HAL_MAX_DELAY);
 8000a10:	4916      	ldr	r1, [pc, #88]	; (8000a6c <Task3_Handler+0x64>)
 8000a12:	4817      	ldr	r0, [pc, #92]	; (8000a70 <Task3_Handler+0x68>)
 8000a14:	f006 fb68 	bl	80070e8 <siprintf>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a20:	4913      	ldr	r1, [pc, #76]	; (8000a70 <Task3_Handler+0x68>)
 8000a22:	4814      	ldr	r0, [pc, #80]	; (8000a74 <Task3_Handler+0x6c>)
 8000a24:	f001 fc31 	bl	800228a <HAL_UART_Transmit>
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3);
 8000a28:	210c      	movs	r1, #12
 8000a2a:	4813      	ldr	r0, [pc, #76]	; (8000a78 <Task3_Handler+0x70>)
 8000a2c:	f000 fca3 	bl	8001376 <HAL_GPIO_TogglePin>
        status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 8000a30:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	2300      	movs	r3, #0
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f003 fb65 	bl	800410c <xTaskGenericNotifyWait>
 8000a42:	60f8      	str	r0, [r7, #12]
        if(status == pdTRUE)
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d1e2      	bne.n	8000a10 <Task3_Handler+0x8>
        {
           portENTER_CRITICAL();
 8000a4a:	f004 f985 	bl	8004d58 <vPortEnterCritical>
           current_handle = NULL;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <Task3_Handler+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
           portEXIT_CRITICAL();
 8000a54:	f004 f9b0 	bl	8004db8 <vPortExitCritical>
           HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2|GPIO_PIN_3,GPIO_PIN_SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	210c      	movs	r1, #12
 8000a5c:	4806      	ldr	r0, [pc, #24]	; (8000a78 <Task3_Handler+0x70>)
 8000a5e:	f000 fc71 	bl	8001344 <HAL_GPIO_WritePin>
           vTaskDelete(NULL); // Delete itself
 8000a62:	2000      	movs	r0, #0
 8000a64:	f002 fcf2 	bl	800344c <vTaskDelete>
        HAL_UART_Transmit(&huart2,(uint8_t*)tx_buffer,sprintf(tx_buffer,"Toggling Blue Buttons\r\n"),HAL_MAX_DELAY);
 8000a68:	e7d2      	b.n	8000a10 <Task3_Handler+0x8>
 8000a6a:	bf00      	nop
 8000a6c:	08007a3c 	.word	0x08007a3c
 8000a70:	200000ec 	.word	0x200000ec
 8000a74:	20000094 	.word	0x20000094
 8000a78:	40020800 	.word	0x40020800
 8000a7c:	200000e4 	.word	0x200000e4

08000a80 <HAL_GPIO_EXTI_Callback>:
        }

	}
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af02      	add	r7, sp, #8
 8000a86:	4603      	mov	r3, r0
 8000a88:	80fb      	strh	r3, [r7, #6]
	traceISR_ENTER(); // Start Segger
 8000a8a:	f006 f851 	bl	8006b30 <SEGGER_SYSVIEW_RecordEnterISR>
   BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
   if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10))
 8000a92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a96:	4816      	ldr	r0, [pc, #88]	; (8000af0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000a98:	f000 fc3c 	bl	8001314 <HAL_GPIO_ReadPin>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d01f      	beq.n	8000ae2 <HAL_GPIO_EXTI_Callback+0x62>
   {
       while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10));
 8000aa2:	bf00      	nop
 8000aa4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aa8:	4811      	ldr	r0, [pc, #68]	; (8000af0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000aaa:	f000 fc33 	bl	8001314 <HAL_GPIO_ReadPin>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d1f7      	bne.n	8000aa4 <HAL_GPIO_EXTI_Callback+0x24>
       xTaskNotifyFromISR(current_handle,0,eNoAction,&pxHigherPriorityTaskWoken);
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <HAL_GPIO_EXTI_Callback+0x74>)
 8000ab6:	6818      	ldr	r0, [r3, #0]
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	9301      	str	r3, [sp, #4]
 8000abe:	2300      	movs	r3, #0
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	f003 fba8 	bl	800421c <xTaskGenericNotifyFromISR>
       portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d007      	beq.n	8000ae2 <HAL_GPIO_EXTI_Callback+0x62>
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <HAL_GPIO_EXTI_Callback+0x78>)
 8000ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	f3bf 8f4f 	dsb	sy
 8000ade:	f3bf 8f6f 	isb	sy

   }
   traceISR_EXIT(); // Stop Segger
 8000ae2:	f006 f867 	bl	8006bb4 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000ae6:	bf00      	nop
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40020800 	.word	0x40020800
 8000af4:	200000e4 	.word	0x200000e4
 8000af8:	e000ed04 	.word	0xe000ed04

08000afc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b0c:	d101      	bne.n	8000b12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b0e:	f000 f97b 	bl	8000e08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1e:	b672      	cpsid	i
}
 8000b20:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <Error_Handler+0x8>

08000b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	4a0f      	ldr	r2, [pc, #60]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b38:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b54:	6413      	str	r3, [r2, #64]	; 0x40
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MspInit 1 */
  //NVIC_SetPriorityGrouping(0);

  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800

08000b74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a19      	ldr	r2, [pc, #100]	; (8000bf8 <HAL_UART_MspInit+0x84>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d12b      	bne.n	8000bee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <HAL_UART_MspInit+0x88>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	4a17      	ldr	r2, [pc, #92]	; (8000bfc <HAL_UART_MspInit+0x88>)
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <HAL_UART_MspInit+0x88>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <HAL_UART_MspInit+0x88>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a10      	ldr	r2, [pc, #64]	; (8000bfc <HAL_UART_MspInit+0x88>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <HAL_UART_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bce:	230c      	movs	r3, #12
 8000bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bde:	2307      	movs	r3, #7
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <HAL_UART_MspInit+0x8c>)
 8000bea:	f000 fa0f 	bl	800100c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40004400 	.word	0x40004400
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020000 	.word	0x40020000

08000c04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08e      	sub	sp, #56	; 0x38
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000c14:	2300      	movs	r3, #0
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	4b34      	ldr	r3, [pc, #208]	; (8000cec <HAL_InitTick+0xe8>)
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1c:	4a33      	ldr	r2, [pc, #204]	; (8000cec <HAL_InitTick+0xe8>)
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	6413      	str	r3, [r2, #64]	; 0x40
 8000c24:	4b31      	ldr	r3, [pc, #196]	; (8000cec <HAL_InitTick+0xe8>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c30:	f107 0210 	add.w	r2, r7, #16
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4611      	mov	r1, r2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 f826 	bl	8001c8c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c40:	6a3b      	ldr	r3, [r7, #32]
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d103      	bne.n	8000c52 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c4a:	f000 fff7 	bl	8001c3c <HAL_RCC_GetPCLK1Freq>
 8000c4e:	6378      	str	r0, [r7, #52]	; 0x34
 8000c50:	e004      	b.n	8000c5c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c52:	f000 fff3 	bl	8001c3c <HAL_RCC_GetPCLK1Freq>
 8000c56:	4603      	mov	r3, r0
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c5e:	4a24      	ldr	r2, [pc, #144]	; (8000cf0 <HAL_InitTick+0xec>)
 8000c60:	fba2 2303 	umull	r2, r3, r2, r3
 8000c64:	0c9b      	lsrs	r3, r3, #18
 8000c66:	3b01      	subs	r3, #1
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000c6a:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <HAL_InitTick+0xf0>)
 8000c6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000c72:	4b20      	ldr	r3, [pc, #128]	; (8000cf4 <HAL_InitTick+0xf0>)
 8000c74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c78:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000c7a:	4a1e      	ldr	r2, [pc, #120]	; (8000cf4 <HAL_InitTick+0xf0>)
 8000c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c7e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000c80:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <HAL_InitTick+0xf0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c86:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <HAL_InitTick+0xf0>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8c:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <HAL_InitTick+0xf0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000c92:	4818      	ldr	r0, [pc, #96]	; (8000cf4 <HAL_InitTick+0xf0>)
 8000c94:	f001 f82c 	bl	8001cf0 <HAL_TIM_Base_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d11b      	bne.n	8000cde <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000ca6:	4813      	ldr	r0, [pc, #76]	; (8000cf4 <HAL_InitTick+0xf0>)
 8000ca8:	f001 f87c 	bl	8001da4 <HAL_TIM_Base_Start_IT>
 8000cac:	4603      	mov	r3, r0
 8000cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000cb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d111      	bne.n	8000cde <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cba:	201c      	movs	r0, #28
 8000cbc:	f000 f998 	bl	8000ff0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b0f      	cmp	r3, #15
 8000cc4:	d808      	bhi.n	8000cd8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	6879      	ldr	r1, [r7, #4]
 8000cca:	201c      	movs	r0, #28
 8000ccc:	f000 f974 	bl	8000fb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cd0:	4a09      	ldr	r2, [pc, #36]	; (8000cf8 <HAL_InitTick+0xf4>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6013      	str	r3, [r2, #0]
 8000cd6:	e002      	b.n	8000cde <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3738      	adds	r7, #56	; 0x38
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	431bde83 	.word	0x431bde83
 8000cf4:	20000120 	.word	0x20000120
 8000cf8:	20000004 	.word	0x20000004

08000cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <NMI_Handler+0x4>

08000d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <HardFault_Handler+0x4>

08000d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <MemManage_Handler+0x4>

08000d0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <BusFault_Handler+0x4>

08000d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <UsageFault_Handler+0x4>

08000d1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <TIM2_IRQHandler+0x10>)
 8000d2e:	f001 f89b 	bl	8001e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000120 	.word	0x20000120

08000d3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000d40:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d44:	f000 fb32 	bl	80013ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <SystemInit+0x20>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d56:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <SystemInit+0x20>)
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d74:	480d      	ldr	r0, [pc, #52]	; (8000dac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d76:	490e      	ldr	r1, [pc, #56]	; (8000db0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d78:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d7c:	e002      	b.n	8000d84 <LoopCopyDataInit>

08000d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d82:	3304      	adds	r3, #4

08000d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d88:	d3f9      	bcc.n	8000d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8a:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d8c:	4c0b      	ldr	r4, [pc, #44]	; (8000dbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d90:	e001      	b.n	8000d96 <LoopFillZerobss>

08000d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d94:	3204      	adds	r2, #4

08000d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d98:	d3fb      	bcc.n	8000d92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d9a:	f7ff ffd7 	bl	8000d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d9e:	f006 f959 	bl	8007054 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000da2:	f7ff fc3f 	bl	8000624 <main>
  bx  lr    
 8000da6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000da8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000db4:	08007ba8 	.word	0x08007ba8
  ldr r2, =_sbss
 8000db8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000dbc:	2000d59c 	.word	0x2000d59c

08000dc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc0:	e7fe      	b.n	8000dc0 <ADC_IRQHandler>
	...

08000dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	; (8000e04 <HAL_Init+0x40>)
 8000dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <HAL_Init+0x40>)
 8000dda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <HAL_Init+0x40>)
 8000de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f000 f8d8 	bl	8000fa2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df2:	200f      	movs	r0, #15
 8000df4:	f7ff ff06 	bl	8000c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df8:	f7ff fe94 	bl	8000b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023c00 	.word	0x40023c00

08000e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x20>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_IncTick+0x24>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <HAL_IncTick+0x24>)
 8000e1a:	6013      	str	r3, [r2, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	20000168 	.word	0x20000168

08000e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return uwTick;
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <HAL_GetTick+0x14>)
 8000e36:	681b      	ldr	r3, [r3, #0]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000168 	.word	0x20000168

08000e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e64:	4013      	ands	r3, r2
 8000e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7a:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	60d3      	str	r3, [r2, #12]
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	f003 0307 	and.w	r3, r3, #7
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	db0b      	blt.n	8000ed6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	f003 021f 	and.w	r2, r3, #31
 8000ec4:	4907      	ldr	r1, [pc, #28]	; (8000ee4 <__NVIC_EnableIRQ+0x38>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	095b      	lsrs	r3, r3, #5
 8000ecc:	2001      	movs	r0, #1
 8000ece:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000e100 	.word	0xe000e100

08000ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db0a      	blt.n	8000f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	490c      	ldr	r1, [pc, #48]	; (8000f34 <__NVIC_SetPriority+0x4c>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	0112      	lsls	r2, r2, #4
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f10:	e00a      	b.n	8000f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4908      	ldr	r1, [pc, #32]	; (8000f38 <__NVIC_SetPriority+0x50>)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	3b04      	subs	r3, #4
 8000f20:	0112      	lsls	r2, r2, #4
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	440b      	add	r3, r1
 8000f26:	761a      	strb	r2, [r3, #24]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000e100 	.word	0xe000e100
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	; 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f1c3 0307 	rsb	r3, r3, #7
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	bf28      	it	cs
 8000f5a:	2304      	movcs	r3, #4
 8000f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3304      	adds	r3, #4
 8000f62:	2b06      	cmp	r3, #6
 8000f64:	d902      	bls.n	8000f6c <NVIC_EncodePriority+0x30>
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3b03      	subs	r3, #3
 8000f6a:	e000      	b.n	8000f6e <NVIC_EncodePriority+0x32>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43d9      	mvns	r1, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	4313      	orrs	r3, r2
         );
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3724      	adds	r7, #36	; 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ff4c 	bl	8000e48 <__NVIC_SetPriorityGrouping>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
 8000fc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fca:	f7ff ff61 	bl	8000e90 <__NVIC_GetPriorityGrouping>
 8000fce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	68b9      	ldr	r1, [r7, #8]
 8000fd4:	6978      	ldr	r0, [r7, #20]
 8000fd6:	f7ff ffb1 	bl	8000f3c <NVIC_EncodePriority>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff80 	bl	8000ee8 <__NVIC_SetPriority>
}
 8000fe8:	bf00      	nop
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ff54 	bl	8000eac <__NVIC_EnableIRQ>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
 8001026:	e159      	b.n	80012dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001028:	2201      	movs	r2, #1
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	429a      	cmp	r2, r3
 8001042:	f040 8148 	bne.w	80012d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	2b01      	cmp	r3, #1
 8001050:	d005      	beq.n	800105e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800105a:	2b02      	cmp	r3, #2
 800105c:	d130      	bne.n	80010c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	2203      	movs	r2, #3
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	68da      	ldr	r2, [r3, #12]
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001094:	2201      	movs	r2, #1
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	091b      	lsrs	r3, r3, #4
 80010aa:	f003 0201 	and.w	r2, r3, #1
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b03      	cmp	r3, #3
 80010ca:	d017      	beq.n	80010fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d123      	bne.n	8001150 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	08da      	lsrs	r2, r3, #3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3208      	adds	r2, #8
 8001110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	f003 0307 	and.w	r3, r3, #7
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	220f      	movs	r2, #15
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	691a      	ldr	r2, [r3, #16]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	08da      	lsrs	r2, r3, #3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3208      	adds	r2, #8
 800114a:	69b9      	ldr	r1, [r7, #24]
 800114c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0203 	and.w	r2, r3, #3
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800118c:	2b00      	cmp	r3, #0
 800118e:	f000 80a2 	beq.w	80012d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b57      	ldr	r3, [pc, #348]	; (80012f4 <HAL_GPIO_Init+0x2e8>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	4a56      	ldr	r2, [pc, #344]	; (80012f4 <HAL_GPIO_Init+0x2e8>)
 800119c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a0:	6453      	str	r3, [r2, #68]	; 0x44
 80011a2:	4b54      	ldr	r3, [pc, #336]	; (80012f4 <HAL_GPIO_Init+0x2e8>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ae:	4a52      	ldr	r2, [pc, #328]	; (80012f8 <HAL_GPIO_Init+0x2ec>)
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	089b      	lsrs	r3, r3, #2
 80011b4:	3302      	adds	r3, #2
 80011b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	220f      	movs	r2, #15
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a49      	ldr	r2, [pc, #292]	; (80012fc <HAL_GPIO_Init+0x2f0>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d019      	beq.n	800120e <HAL_GPIO_Init+0x202>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a48      	ldr	r2, [pc, #288]	; (8001300 <HAL_GPIO_Init+0x2f4>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d013      	beq.n	800120a <HAL_GPIO_Init+0x1fe>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a47      	ldr	r2, [pc, #284]	; (8001304 <HAL_GPIO_Init+0x2f8>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d00d      	beq.n	8001206 <HAL_GPIO_Init+0x1fa>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a46      	ldr	r2, [pc, #280]	; (8001308 <HAL_GPIO_Init+0x2fc>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d007      	beq.n	8001202 <HAL_GPIO_Init+0x1f6>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a45      	ldr	r2, [pc, #276]	; (800130c <HAL_GPIO_Init+0x300>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d101      	bne.n	80011fe <HAL_GPIO_Init+0x1f2>
 80011fa:	2304      	movs	r3, #4
 80011fc:	e008      	b.n	8001210 <HAL_GPIO_Init+0x204>
 80011fe:	2307      	movs	r3, #7
 8001200:	e006      	b.n	8001210 <HAL_GPIO_Init+0x204>
 8001202:	2303      	movs	r3, #3
 8001204:	e004      	b.n	8001210 <HAL_GPIO_Init+0x204>
 8001206:	2302      	movs	r3, #2
 8001208:	e002      	b.n	8001210 <HAL_GPIO_Init+0x204>
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <HAL_GPIO_Init+0x204>
 800120e:	2300      	movs	r3, #0
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	f002 0203 	and.w	r2, r2, #3
 8001216:	0092      	lsls	r2, r2, #2
 8001218:	4093      	lsls	r3, r2
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001220:	4935      	ldr	r1, [pc, #212]	; (80012f8 <HAL_GPIO_Init+0x2ec>)
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	3302      	adds	r3, #2
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800122e:	4b38      	ldr	r3, [pc, #224]	; (8001310 <HAL_GPIO_Init+0x304>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001252:	4a2f      	ldr	r2, [pc, #188]	; (8001310 <HAL_GPIO_Init+0x304>)
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001258:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <HAL_GPIO_Init+0x304>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800127c:	4a24      	ldr	r2, [pc, #144]	; (8001310 <HAL_GPIO_Init+0x304>)
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001282:	4b23      	ldr	r3, [pc, #140]	; (8001310 <HAL_GPIO_Init+0x304>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012a6:	4a1a      	ldr	r2, [pc, #104]	; (8001310 <HAL_GPIO_Init+0x304>)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ac:	4b18      	ldr	r3, [pc, #96]	; (8001310 <HAL_GPIO_Init+0x304>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012d0:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <HAL_GPIO_Init+0x304>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3301      	adds	r3, #1
 80012da:	61fb      	str	r3, [r7, #28]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	2b0f      	cmp	r3, #15
 80012e0:	f67f aea2 	bls.w	8001028 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	3724      	adds	r7, #36	; 0x24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40013800 	.word	0x40013800
 80012fc:	40020000 	.word	0x40020000
 8001300:	40020400 	.word	0x40020400
 8001304:	40020800 	.word	0x40020800
 8001308:	40020c00 	.word	0x40020c00
 800130c:	40021000 	.word	0x40021000
 8001310:	40013c00 	.word	0x40013c00

08001314 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691a      	ldr	r2, [r3, #16]
 8001324:	887b      	ldrh	r3, [r7, #2]
 8001326:	4013      	ands	r3, r2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d002      	beq.n	8001332 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800132c:	2301      	movs	r3, #1
 800132e:	73fb      	strb	r3, [r7, #15]
 8001330:	e001      	b.n	8001336 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001336:	7bfb      	ldrb	r3, [r7, #15]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	807b      	strh	r3, [r7, #2]
 8001350:	4613      	mov	r3, r2
 8001352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001354:	787b      	ldrb	r3, [r7, #1]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800135a:	887a      	ldrh	r2, [r7, #2]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001360:	e003      	b.n	800136a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001362:	887b      	ldrh	r3, [r7, #2]
 8001364:	041a      	lsls	r2, r3, #16
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	619a      	str	r2, [r3, #24]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001376:	b480      	push	{r7}
 8001378:	b085      	sub	sp, #20
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	460b      	mov	r3, r1
 8001380:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001388:	887a      	ldrh	r2, [r7, #2]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4013      	ands	r3, r2
 800138e:	041a      	lsls	r2, r3, #16
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	43d9      	mvns	r1, r3
 8001394:	887b      	ldrh	r3, [r7, #2]
 8001396:	400b      	ands	r3, r1
 8001398:	431a      	orrs	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	619a      	str	r2, [r3, #24]
}
 800139e:	bf00      	nop
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013b8:	695a      	ldr	r2, [r3, #20]
 80013ba:	88fb      	ldrh	r3, [r7, #6]
 80013bc:	4013      	ands	r3, r2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d006      	beq.n	80013d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013c2:	4a05      	ldr	r2, [pc, #20]	; (80013d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fb58 	bl	8000a80 <HAL_GPIO_EXTI_Callback>
  }
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40013c00 	.word	0x40013c00

080013dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e267      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d075      	beq.n	80014e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013fa:	4b88      	ldr	r3, [pc, #544]	; (800161c <HAL_RCC_OscConfig+0x240>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 030c 	and.w	r3, r3, #12
 8001402:	2b04      	cmp	r3, #4
 8001404:	d00c      	beq.n	8001420 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001406:	4b85      	ldr	r3, [pc, #532]	; (800161c <HAL_RCC_OscConfig+0x240>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800140e:	2b08      	cmp	r3, #8
 8001410:	d112      	bne.n	8001438 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001412:	4b82      	ldr	r3, [pc, #520]	; (800161c <HAL_RCC_OscConfig+0x240>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800141a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800141e:	d10b      	bne.n	8001438 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001420:	4b7e      	ldr	r3, [pc, #504]	; (800161c <HAL_RCC_OscConfig+0x240>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d05b      	beq.n	80014e4 <HAL_RCC_OscConfig+0x108>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d157      	bne.n	80014e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e242      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001440:	d106      	bne.n	8001450 <HAL_RCC_OscConfig+0x74>
 8001442:	4b76      	ldr	r3, [pc, #472]	; (800161c <HAL_RCC_OscConfig+0x240>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a75      	ldr	r2, [pc, #468]	; (800161c <HAL_RCC_OscConfig+0x240>)
 8001448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	e01d      	b.n	800148c <HAL_RCC_OscConfig+0xb0>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001458:	d10c      	bne.n	8001474 <HAL_RCC_OscConfig+0x98>
 800145a:	4b70      	ldr	r3, [pc, #448]	; (800161c <HAL_RCC_OscConfig+0x240>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a6f      	ldr	r2, [pc, #444]	; (800161c <HAL_RCC_OscConfig+0x240>)
 8001460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	4b6d      	ldr	r3, [pc, #436]	; (800161c <HAL_RCC_OscConfig+0x240>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a6c      	ldr	r2, [pc, #432]	; (800161c <HAL_RCC_OscConfig+0x240>)
 800146c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	e00b      	b.n	800148c <HAL_RCC_OscConfig+0xb0>
 8001474:	4b69      	ldr	r3, [pc, #420]	; (800161c <HAL_RCC_OscConfig+0x240>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a68      	ldr	r2, [pc, #416]	; (800161c <HAL_RCC_OscConfig+0x240>)
 800147a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	4b66      	ldr	r3, [pc, #408]	; (800161c <HAL_RCC_OscConfig+0x240>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a65      	ldr	r2, [pc, #404]	; (800161c <HAL_RCC_OscConfig+0x240>)
 8001486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800148a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d013      	beq.n	80014bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001494:	f7ff fccc 	bl	8000e30 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800149c:	f7ff fcc8 	bl	8000e30 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b64      	cmp	r3, #100	; 0x64
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e207      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ae:	4b5b      	ldr	r3, [pc, #364]	; (800161c <HAL_RCC_OscConfig+0x240>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0f0      	beq.n	800149c <HAL_RCC_OscConfig+0xc0>
 80014ba:	e014      	b.n	80014e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fcb8 	bl	8000e30 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c4:	f7ff fcb4 	bl	8000e30 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b64      	cmp	r3, #100	; 0x64
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e1f3      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d6:	4b51      	ldr	r3, [pc, #324]	; (800161c <HAL_RCC_OscConfig+0x240>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0xe8>
 80014e2:	e000      	b.n	80014e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d063      	beq.n	80015ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014f2:	4b4a      	ldr	r3, [pc, #296]	; (800161c <HAL_RCC_OscConfig+0x240>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 030c 	and.w	r3, r3, #12
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00b      	beq.n	8001516 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014fe:	4b47      	ldr	r3, [pc, #284]	; (800161c <HAL_RCC_OscConfig+0x240>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001506:	2b08      	cmp	r3, #8
 8001508:	d11c      	bne.n	8001544 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800150a:	4b44      	ldr	r3, [pc, #272]	; (800161c <HAL_RCC_OscConfig+0x240>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d116      	bne.n	8001544 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001516:	4b41      	ldr	r3, [pc, #260]	; (800161c <HAL_RCC_OscConfig+0x240>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d005      	beq.n	800152e <HAL_RCC_OscConfig+0x152>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d001      	beq.n	800152e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e1c7      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152e:	4b3b      	ldr	r3, [pc, #236]	; (800161c <HAL_RCC_OscConfig+0x240>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	4937      	ldr	r1, [pc, #220]	; (800161c <HAL_RCC_OscConfig+0x240>)
 800153e:	4313      	orrs	r3, r2
 8001540:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001542:	e03a      	b.n	80015ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d020      	beq.n	800158e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800154c:	4b34      	ldr	r3, [pc, #208]	; (8001620 <HAL_RCC_OscConfig+0x244>)
 800154e:	2201      	movs	r2, #1
 8001550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001552:	f7ff fc6d 	bl	8000e30 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800155a:	f7ff fc69 	bl	8000e30 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e1a8      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156c:	4b2b      	ldr	r3, [pc, #172]	; (800161c <HAL_RCC_OscConfig+0x240>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001578:	4b28      	ldr	r3, [pc, #160]	; (800161c <HAL_RCC_OscConfig+0x240>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	4925      	ldr	r1, [pc, #148]	; (800161c <HAL_RCC_OscConfig+0x240>)
 8001588:	4313      	orrs	r3, r2
 800158a:	600b      	str	r3, [r1, #0]
 800158c:	e015      	b.n	80015ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800158e:	4b24      	ldr	r3, [pc, #144]	; (8001620 <HAL_RCC_OscConfig+0x244>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001594:	f7ff fc4c 	bl	8000e30 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800159c:	f7ff fc48 	bl	8000e30 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e187      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ae:	4b1b      	ldr	r3, [pc, #108]	; (800161c <HAL_RCC_OscConfig+0x240>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d036      	beq.n	8001634 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d016      	beq.n	80015fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <HAL_RCC_OscConfig+0x248>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d4:	f7ff fc2c 	bl	8000e30 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015dc:	f7ff fc28 	bl	8000e30 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e167      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <HAL_RCC_OscConfig+0x240>)
 80015f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0f0      	beq.n	80015dc <HAL_RCC_OscConfig+0x200>
 80015fa:	e01b      	b.n	8001634 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_RCC_OscConfig+0x248>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001602:	f7ff fc15 	bl	8000e30 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001608:	e00e      	b.n	8001628 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800160a:	f7ff fc11 	bl	8000e30 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d907      	bls.n	8001628 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e150      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
 800161c:	40023800 	.word	0x40023800
 8001620:	42470000 	.word	0x42470000
 8001624:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001628:	4b88      	ldr	r3, [pc, #544]	; (800184c <HAL_RCC_OscConfig+0x470>)
 800162a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1ea      	bne.n	800160a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 8097 	beq.w	8001770 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001642:	2300      	movs	r3, #0
 8001644:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001646:	4b81      	ldr	r3, [pc, #516]	; (800184c <HAL_RCC_OscConfig+0x470>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10f      	bne.n	8001672 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	4b7d      	ldr	r3, [pc, #500]	; (800184c <HAL_RCC_OscConfig+0x470>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	4a7c      	ldr	r2, [pc, #496]	; (800184c <HAL_RCC_OscConfig+0x470>)
 800165c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001660:	6413      	str	r3, [r2, #64]	; 0x40
 8001662:	4b7a      	ldr	r3, [pc, #488]	; (800184c <HAL_RCC_OscConfig+0x470>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800166e:	2301      	movs	r3, #1
 8001670:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001672:	4b77      	ldr	r3, [pc, #476]	; (8001850 <HAL_RCC_OscConfig+0x474>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167a:	2b00      	cmp	r3, #0
 800167c:	d118      	bne.n	80016b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800167e:	4b74      	ldr	r3, [pc, #464]	; (8001850 <HAL_RCC_OscConfig+0x474>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a73      	ldr	r2, [pc, #460]	; (8001850 <HAL_RCC_OscConfig+0x474>)
 8001684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001688:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800168a:	f7ff fbd1 	bl	8000e30 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001692:	f7ff fbcd 	bl	8000e30 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e10c      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a4:	4b6a      	ldr	r3, [pc, #424]	; (8001850 <HAL_RCC_OscConfig+0x474>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d106      	bne.n	80016c6 <HAL_RCC_OscConfig+0x2ea>
 80016b8:	4b64      	ldr	r3, [pc, #400]	; (800184c <HAL_RCC_OscConfig+0x470>)
 80016ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016bc:	4a63      	ldr	r2, [pc, #396]	; (800184c <HAL_RCC_OscConfig+0x470>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6713      	str	r3, [r2, #112]	; 0x70
 80016c4:	e01c      	b.n	8001700 <HAL_RCC_OscConfig+0x324>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2b05      	cmp	r3, #5
 80016cc:	d10c      	bne.n	80016e8 <HAL_RCC_OscConfig+0x30c>
 80016ce:	4b5f      	ldr	r3, [pc, #380]	; (800184c <HAL_RCC_OscConfig+0x470>)
 80016d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d2:	4a5e      	ldr	r2, [pc, #376]	; (800184c <HAL_RCC_OscConfig+0x470>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	6713      	str	r3, [r2, #112]	; 0x70
 80016da:	4b5c      	ldr	r3, [pc, #368]	; (800184c <HAL_RCC_OscConfig+0x470>)
 80016dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016de:	4a5b      	ldr	r2, [pc, #364]	; (800184c <HAL_RCC_OscConfig+0x470>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6713      	str	r3, [r2, #112]	; 0x70
 80016e6:	e00b      	b.n	8001700 <HAL_RCC_OscConfig+0x324>
 80016e8:	4b58      	ldr	r3, [pc, #352]	; (800184c <HAL_RCC_OscConfig+0x470>)
 80016ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ec:	4a57      	ldr	r2, [pc, #348]	; (800184c <HAL_RCC_OscConfig+0x470>)
 80016ee:	f023 0301 	bic.w	r3, r3, #1
 80016f2:	6713      	str	r3, [r2, #112]	; 0x70
 80016f4:	4b55      	ldr	r3, [pc, #340]	; (800184c <HAL_RCC_OscConfig+0x470>)
 80016f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f8:	4a54      	ldr	r2, [pc, #336]	; (800184c <HAL_RCC_OscConfig+0x470>)
 80016fa:	f023 0304 	bic.w	r3, r3, #4
 80016fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d015      	beq.n	8001734 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001708:	f7ff fb92 	bl	8000e30 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800170e:	e00a      	b.n	8001726 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001710:	f7ff fb8e 	bl	8000e30 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	f241 3288 	movw	r2, #5000	; 0x1388
 800171e:	4293      	cmp	r3, r2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e0cb      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001726:	4b49      	ldr	r3, [pc, #292]	; (800184c <HAL_RCC_OscConfig+0x470>)
 8001728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0ee      	beq.n	8001710 <HAL_RCC_OscConfig+0x334>
 8001732:	e014      	b.n	800175e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001734:	f7ff fb7c 	bl	8000e30 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800173a:	e00a      	b.n	8001752 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800173c:	f7ff fb78 	bl	8000e30 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	f241 3288 	movw	r2, #5000	; 0x1388
 800174a:	4293      	cmp	r3, r2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e0b5      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001752:	4b3e      	ldr	r3, [pc, #248]	; (800184c <HAL_RCC_OscConfig+0x470>)
 8001754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1ee      	bne.n	800173c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800175e:	7dfb      	ldrb	r3, [r7, #23]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d105      	bne.n	8001770 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001764:	4b39      	ldr	r3, [pc, #228]	; (800184c <HAL_RCC_OscConfig+0x470>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	4a38      	ldr	r2, [pc, #224]	; (800184c <HAL_RCC_OscConfig+0x470>)
 800176a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800176e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 80a1 	beq.w	80018bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800177a:	4b34      	ldr	r3, [pc, #208]	; (800184c <HAL_RCC_OscConfig+0x470>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 030c 	and.w	r3, r3, #12
 8001782:	2b08      	cmp	r3, #8
 8001784:	d05c      	beq.n	8001840 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	2b02      	cmp	r3, #2
 800178c:	d141      	bne.n	8001812 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178e:	4b31      	ldr	r3, [pc, #196]	; (8001854 <HAL_RCC_OscConfig+0x478>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff fb4c 	bl	8000e30 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800179c:	f7ff fb48 	bl	8000e30 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e087      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ae:	4b27      	ldr	r3, [pc, #156]	; (800184c <HAL_RCC_OscConfig+0x470>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69da      	ldr	r2, [r3, #28]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	431a      	orrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c8:	019b      	lsls	r3, r3, #6
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d0:	085b      	lsrs	r3, r3, #1
 80017d2:	3b01      	subs	r3, #1
 80017d4:	041b      	lsls	r3, r3, #16
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017dc:	061b      	lsls	r3, r3, #24
 80017de:	491b      	ldr	r1, [pc, #108]	; (800184c <HAL_RCC_OscConfig+0x470>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017e4:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <HAL_RCC_OscConfig+0x478>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ea:	f7ff fb21 	bl	8000e30 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f2:	f7ff fb1d 	bl	8000e30 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e05c      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001804:	4b11      	ldr	r3, [pc, #68]	; (800184c <HAL_RCC_OscConfig+0x470>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f0      	beq.n	80017f2 <HAL_RCC_OscConfig+0x416>
 8001810:	e054      	b.n	80018bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <HAL_RCC_OscConfig+0x478>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001818:	f7ff fb0a 	bl	8000e30 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001820:	f7ff fb06 	bl	8000e30 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e045      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_RCC_OscConfig+0x470>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x444>
 800183e:	e03d      	b.n	80018bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d107      	bne.n	8001858 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e038      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
 800184c:	40023800 	.word	0x40023800
 8001850:	40007000 	.word	0x40007000
 8001854:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001858:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <HAL_RCC_OscConfig+0x4ec>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d028      	beq.n	80018b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001870:	429a      	cmp	r2, r3
 8001872:	d121      	bne.n	80018b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187e:	429a      	cmp	r2, r3
 8001880:	d11a      	bne.n	80018b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001888:	4013      	ands	r3, r2
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800188e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001890:	4293      	cmp	r3, r2
 8001892:	d111      	bne.n	80018b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189e:	085b      	lsrs	r3, r3, #1
 80018a0:	3b01      	subs	r3, #1
 80018a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d107      	bne.n	80018b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d001      	beq.n	80018bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e000      	b.n	80018be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40023800 	.word	0x40023800

080018cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0cc      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018e0:	4b68      	ldr	r3, [pc, #416]	; (8001a84 <HAL_RCC_ClockConfig+0x1b8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d90c      	bls.n	8001908 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ee:	4b65      	ldr	r3, [pc, #404]	; (8001a84 <HAL_RCC_ClockConfig+0x1b8>)
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f6:	4b63      	ldr	r3, [pc, #396]	; (8001a84 <HAL_RCC_ClockConfig+0x1b8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d001      	beq.n	8001908 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0b8      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d020      	beq.n	8001956 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001920:	4b59      	ldr	r3, [pc, #356]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	4a58      	ldr	r2, [pc, #352]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800192a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001938:	4b53      	ldr	r3, [pc, #332]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	4a52      	ldr	r2, [pc, #328]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001942:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001944:	4b50      	ldr	r3, [pc, #320]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	494d      	ldr	r1, [pc, #308]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 8001952:	4313      	orrs	r3, r2
 8001954:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d044      	beq.n	80019ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d107      	bne.n	800197a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196a:	4b47      	ldr	r3, [pc, #284]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d119      	bne.n	80019aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e07f      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d003      	beq.n	800198a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001986:	2b03      	cmp	r3, #3
 8001988:	d107      	bne.n	800199a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198a:	4b3f      	ldr	r3, [pc, #252]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d109      	bne.n	80019aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e06f      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199a:	4b3b      	ldr	r3, [pc, #236]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e067      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019aa:	4b37      	ldr	r3, [pc, #220]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f023 0203 	bic.w	r2, r3, #3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4934      	ldr	r1, [pc, #208]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019bc:	f7ff fa38 	bl	8000e30 <HAL_GetTick>
 80019c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c2:	e00a      	b.n	80019da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c4:	f7ff fa34 	bl	8000e30 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e04f      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019da:	4b2b      	ldr	r3, [pc, #172]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 020c 	and.w	r2, r3, #12
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d1eb      	bne.n	80019c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019ec:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <HAL_RCC_ClockConfig+0x1b8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d20c      	bcs.n	8001a14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fa:	4b22      	ldr	r3, [pc, #136]	; (8001a84 <HAL_RCC_ClockConfig+0x1b8>)
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <HAL_RCC_ClockConfig+0x1b8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d001      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e032      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d008      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	4916      	ldr	r1, [pc, #88]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d009      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	490e      	ldr	r1, [pc, #56]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a52:	f000 f821 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 8001a56:	4602      	mov	r2, r0
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	091b      	lsrs	r3, r3, #4
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	490a      	ldr	r1, [pc, #40]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 8001a64:	5ccb      	ldrb	r3, [r1, r3]
 8001a66:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6a:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <HAL_RCC_ClockConfig+0x1c8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff f8c6 	bl	8000c04 <HAL_InitTick>

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023c00 	.word	0x40023c00
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	08007b24 	.word	0x08007b24
 8001a90:	20000000 	.word	0x20000000
 8001a94:	20000004 	.word	0x20000004

08001a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a9c:	b090      	sub	sp, #64	; 0x40
 8001a9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ab0:	4b59      	ldr	r3, [pc, #356]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d00d      	beq.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	f200 80a1 	bhi.w	8001c04 <HAL_RCC_GetSysClockFreq+0x16c>
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d002      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0x34>
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d003      	beq.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001aca:	e09b      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001acc:	4b53      	ldr	r3, [pc, #332]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x184>)
 8001ace:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001ad0:	e09b      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ad2:	4b53      	ldr	r3, [pc, #332]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ad4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ad6:	e098      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ad8:	4b4f      	ldr	r3, [pc, #316]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ae0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ae2:	4b4d      	ldr	r3, [pc, #308]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d028      	beq.n	8001b40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aee:	4b4a      	ldr	r3, [pc, #296]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	099b      	lsrs	r3, r3, #6
 8001af4:	2200      	movs	r2, #0
 8001af6:	623b      	str	r3, [r7, #32]
 8001af8:	627a      	str	r2, [r7, #36]	; 0x24
 8001afa:	6a3b      	ldr	r3, [r7, #32]
 8001afc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b00:	2100      	movs	r1, #0
 8001b02:	4b47      	ldr	r3, [pc, #284]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b04:	fb03 f201 	mul.w	r2, r3, r1
 8001b08:	2300      	movs	r3, #0
 8001b0a:	fb00 f303 	mul.w	r3, r0, r3
 8001b0e:	4413      	add	r3, r2
 8001b10:	4a43      	ldr	r2, [pc, #268]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b12:	fba0 1202 	umull	r1, r2, r0, r2
 8001b16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b18:	460a      	mov	r2, r1
 8001b1a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b1e:	4413      	add	r3, r2
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b24:	2200      	movs	r2, #0
 8001b26:	61bb      	str	r3, [r7, #24]
 8001b28:	61fa      	str	r2, [r7, #28]
 8001b2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b32:	f7fe fbf5 	bl	8000320 <__aeabi_uldivmod>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b3e:	e053      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b40:	4b35      	ldr	r3, [pc, #212]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	099b      	lsrs	r3, r3, #6
 8001b46:	2200      	movs	r2, #0
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	617a      	str	r2, [r7, #20]
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b52:	f04f 0b00 	mov.w	fp, #0
 8001b56:	4652      	mov	r2, sl
 8001b58:	465b      	mov	r3, fp
 8001b5a:	f04f 0000 	mov.w	r0, #0
 8001b5e:	f04f 0100 	mov.w	r1, #0
 8001b62:	0159      	lsls	r1, r3, #5
 8001b64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b68:	0150      	lsls	r0, r2, #5
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	ebb2 080a 	subs.w	r8, r2, sl
 8001b72:	eb63 090b 	sbc.w	r9, r3, fp
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b8a:	ebb2 0408 	subs.w	r4, r2, r8
 8001b8e:	eb63 0509 	sbc.w	r5, r3, r9
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	00eb      	lsls	r3, r5, #3
 8001b9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ba0:	00e2      	lsls	r2, r4, #3
 8001ba2:	4614      	mov	r4, r2
 8001ba4:	461d      	mov	r5, r3
 8001ba6:	eb14 030a 	adds.w	r3, r4, sl
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	eb45 030b 	adc.w	r3, r5, fp
 8001bb0:	607b      	str	r3, [r7, #4]
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	f04f 0300 	mov.w	r3, #0
 8001bba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bbe:	4629      	mov	r1, r5
 8001bc0:	028b      	lsls	r3, r1, #10
 8001bc2:	4621      	mov	r1, r4
 8001bc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bc8:	4621      	mov	r1, r4
 8001bca:	028a      	lsls	r2, r1, #10
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	60fa      	str	r2, [r7, #12]
 8001bd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bdc:	f7fe fba0 	bl	8000320 <__aeabi_uldivmod>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4613      	mov	r3, r2
 8001be6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	0c1b      	lsrs	r3, r3, #16
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001bf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c02:	e002      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x184>)
 8001c06:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3740      	adds	r7, #64	; 0x40
 8001c10:	46bd      	mov	sp, r7
 8001c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	00f42400 	.word	0x00f42400
 8001c20:	017d7840 	.word	0x017d7840

08001c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	20000000 	.word	0x20000000

08001c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c40:	f7ff fff0 	bl	8001c24 <HAL_RCC_GetHCLKFreq>
 8001c44:	4602      	mov	r2, r0
 8001c46:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	0a9b      	lsrs	r3, r3, #10
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	4903      	ldr	r1, [pc, #12]	; (8001c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c52:	5ccb      	ldrb	r3, [r1, r3]
 8001c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	08007b34 	.word	0x08007b34

08001c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c68:	f7ff ffdc 	bl	8001c24 <HAL_RCC_GetHCLKFreq>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	0b5b      	lsrs	r3, r3, #13
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	4903      	ldr	r1, [pc, #12]	; (8001c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c7a:	5ccb      	ldrb	r3, [r1, r3]
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40023800 	.word	0x40023800
 8001c88:	08007b34 	.word	0x08007b34

08001c8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	220f      	movs	r2, #15
 8001c9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 0203 	and.w	r2, r3, #3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <HAL_RCC_GetClockConfig+0x5c>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	08db      	lsrs	r3, r3, #3
 8001cc6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <HAL_RCC_GetClockConfig+0x60>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0207 	and.w	r2, r3, #7
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	601a      	str	r2, [r3, #0]
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40023c00 	.word	0x40023c00

08001cf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e041      	b.n	8001d86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d106      	bne.n	8001d1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f839 	bl	8001d8e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2202      	movs	r2, #2
 8001d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4610      	mov	r0, r2
 8001d30:	f000 f9ca 	bl	80020c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d001      	beq.n	8001dbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e044      	b.n	8001e46 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a1e      	ldr	r2, [pc, #120]	; (8001e54 <HAL_TIM_Base_Start_IT+0xb0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d018      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x6c>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de6:	d013      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x6c>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a1a      	ldr	r2, [pc, #104]	; (8001e58 <HAL_TIM_Base_Start_IT+0xb4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00e      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x6c>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a19      	ldr	r2, [pc, #100]	; (8001e5c <HAL_TIM_Base_Start_IT+0xb8>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d009      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x6c>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a17      	ldr	r2, [pc, #92]	; (8001e60 <HAL_TIM_Base_Start_IT+0xbc>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d004      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x6c>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a16      	ldr	r2, [pc, #88]	; (8001e64 <HAL_TIM_Base_Start_IT+0xc0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d111      	bne.n	8001e34 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d010      	beq.n	8001e44 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f042 0201 	orr.w	r2, r2, #1
 8001e30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e32:	e007      	b.n	8001e44 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40010000 	.word	0x40010000
 8001e58:	40000400 	.word	0x40000400
 8001e5c:	40000800 	.word	0x40000800
 8001e60:	40000c00 	.word	0x40000c00
 8001e64:	40014000 	.word	0x40014000

08001e68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d122      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d11b      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0202 	mvn.w	r2, #2
 8001e94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f8ee 	bl	800208c <HAL_TIM_IC_CaptureCallback>
 8001eb0:	e005      	b.n	8001ebe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f8e0 	bl	8002078 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f8f1 	bl	80020a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d122      	bne.n	8001f18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d11b      	bne.n	8001f18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 0204 	mvn.w	r2, #4
 8001ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2202      	movs	r2, #2
 8001eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f8c4 	bl	800208c <HAL_TIM_IC_CaptureCallback>
 8001f04:	e005      	b.n	8001f12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f8b6 	bl	8002078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f8c7 	bl	80020a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d122      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f003 0308 	and.w	r3, r3, #8
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d11b      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f06f 0208 	mvn.w	r2, #8
 8001f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2204      	movs	r2, #4
 8001f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f89a 	bl	800208c <HAL_TIM_IC_CaptureCallback>
 8001f58:	e005      	b.n	8001f66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f88c 	bl	8002078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f89d 	bl	80020a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	f003 0310 	and.w	r3, r3, #16
 8001f76:	2b10      	cmp	r3, #16
 8001f78:	d122      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f003 0310 	and.w	r3, r3, #16
 8001f84:	2b10      	cmp	r3, #16
 8001f86:	d11b      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f06f 0210 	mvn.w	r2, #16
 8001f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2208      	movs	r2, #8
 8001f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f870 	bl	800208c <HAL_TIM_IC_CaptureCallback>
 8001fac:	e005      	b.n	8001fba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f862 	bl	8002078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f873 	bl	80020a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d10e      	bne.n	8001fec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d107      	bne.n	8001fec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f06f 0201 	mvn.w	r2, #1
 8001fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7fe fd88 	bl	8000afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff6:	2b80      	cmp	r3, #128	; 0x80
 8001ff8:	d10e      	bne.n	8002018 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002004:	2b80      	cmp	r3, #128	; 0x80
 8002006:	d107      	bne.n	8002018 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f8e2 	bl	80021dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002022:	2b40      	cmp	r3, #64	; 0x40
 8002024:	d10e      	bne.n	8002044 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002030:	2b40      	cmp	r3, #64	; 0x40
 8002032:	d107      	bne.n	8002044 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800203c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f838 	bl	80020b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f003 0320 	and.w	r3, r3, #32
 800204e:	2b20      	cmp	r3, #32
 8002050:	d10e      	bne.n	8002070 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0320 	and.w	r3, r3, #32
 800205c:	2b20      	cmp	r3, #32
 800205e:	d107      	bne.n	8002070 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f06f 0220 	mvn.w	r2, #32
 8002068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f8ac 	bl	80021c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a34      	ldr	r2, [pc, #208]	; (80021ac <TIM_Base_SetConfig+0xe4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d00f      	beq.n	8002100 <TIM_Base_SetConfig+0x38>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e6:	d00b      	beq.n	8002100 <TIM_Base_SetConfig+0x38>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a31      	ldr	r2, [pc, #196]	; (80021b0 <TIM_Base_SetConfig+0xe8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d007      	beq.n	8002100 <TIM_Base_SetConfig+0x38>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a30      	ldr	r2, [pc, #192]	; (80021b4 <TIM_Base_SetConfig+0xec>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d003      	beq.n	8002100 <TIM_Base_SetConfig+0x38>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a2f      	ldr	r2, [pc, #188]	; (80021b8 <TIM_Base_SetConfig+0xf0>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d108      	bne.n	8002112 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	4313      	orrs	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a25      	ldr	r2, [pc, #148]	; (80021ac <TIM_Base_SetConfig+0xe4>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d01b      	beq.n	8002152 <TIM_Base_SetConfig+0x8a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002120:	d017      	beq.n	8002152 <TIM_Base_SetConfig+0x8a>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a22      	ldr	r2, [pc, #136]	; (80021b0 <TIM_Base_SetConfig+0xe8>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d013      	beq.n	8002152 <TIM_Base_SetConfig+0x8a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a21      	ldr	r2, [pc, #132]	; (80021b4 <TIM_Base_SetConfig+0xec>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d00f      	beq.n	8002152 <TIM_Base_SetConfig+0x8a>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a20      	ldr	r2, [pc, #128]	; (80021b8 <TIM_Base_SetConfig+0xf0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d00b      	beq.n	8002152 <TIM_Base_SetConfig+0x8a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a1f      	ldr	r2, [pc, #124]	; (80021bc <TIM_Base_SetConfig+0xf4>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d007      	beq.n	8002152 <TIM_Base_SetConfig+0x8a>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a1e      	ldr	r2, [pc, #120]	; (80021c0 <TIM_Base_SetConfig+0xf8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d003      	beq.n	8002152 <TIM_Base_SetConfig+0x8a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a1d      	ldr	r2, [pc, #116]	; (80021c4 <TIM_Base_SetConfig+0xfc>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d108      	bne.n	8002164 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4313      	orrs	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	4313      	orrs	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a08      	ldr	r2, [pc, #32]	; (80021ac <TIM_Base_SetConfig+0xe4>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d103      	bne.n	8002198 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	691a      	ldr	r2, [r3, #16]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	615a      	str	r2, [r3, #20]
}
 800219e:	bf00      	nop
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40010000 	.word	0x40010000
 80021b0:	40000400 	.word	0x40000400
 80021b4:	40000800 	.word	0x40000800
 80021b8:	40000c00 	.word	0x40000c00
 80021bc:	40014000 	.word	0x40014000
 80021c0:	40014400 	.word	0x40014400
 80021c4:	40014800 	.word	0x40014800

080021c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e03f      	b.n	8002282 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d106      	bne.n	800221c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7fe fcac 	bl	8000b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2224      	movs	r2, #36	; 0x24
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002232:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f929 	bl	800248c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002248:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	695a      	ldr	r2, [r3, #20]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002258:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002268:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2220      	movs	r2, #32
 8002274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b08a      	sub	sp, #40	; 0x28
 800228e:	af02      	add	r7, sp, #8
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	603b      	str	r3, [r7, #0]
 8002296:	4613      	mov	r3, r2
 8002298:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b20      	cmp	r3, #32
 80022a8:	d17c      	bne.n	80023a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d002      	beq.n	80022b6 <HAL_UART_Transmit+0x2c>
 80022b0:	88fb      	ldrh	r3, [r7, #6]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e075      	b.n	80023a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <HAL_UART_Transmit+0x3e>
 80022c4:	2302      	movs	r3, #2
 80022c6:	e06e      	b.n	80023a6 <HAL_UART_Transmit+0x11c>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2221      	movs	r2, #33	; 0x21
 80022da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022de:	f7fe fda7 	bl	8000e30 <HAL_GetTick>
 80022e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	88fa      	ldrh	r2, [r7, #6]
 80022e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	88fa      	ldrh	r2, [r7, #6]
 80022ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022f8:	d108      	bne.n	800230c <HAL_UART_Transmit+0x82>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d104      	bne.n	800230c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	61bb      	str	r3, [r7, #24]
 800230a:	e003      	b.n	8002314 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002310:	2300      	movs	r3, #0
 8002312:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800231c:	e02a      	b.n	8002374 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2200      	movs	r2, #0
 8002326:	2180      	movs	r1, #128	; 0x80
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 f840 	bl	80023ae <UART_WaitOnFlagUntilTimeout>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e036      	b.n	80023a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10b      	bne.n	8002356 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800234c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	3302      	adds	r3, #2
 8002352:	61bb      	str	r3, [r7, #24]
 8002354:	e007      	b.n	8002366 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	781a      	ldrb	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	3301      	adds	r3, #1
 8002364:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800236a:	b29b      	uxth	r3, r3
 800236c:	3b01      	subs	r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002378:	b29b      	uxth	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1cf      	bne.n	800231e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2200      	movs	r2, #0
 8002386:	2140      	movs	r1, #64	; 0x40
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 f810 	bl	80023ae <UART_WaitOnFlagUntilTimeout>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e006      	b.n	80023a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2220      	movs	r2, #32
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	e000      	b.n	80023a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80023a4:	2302      	movs	r3, #2
  }
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3720      	adds	r7, #32
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b090      	sub	sp, #64	; 0x40
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	60f8      	str	r0, [r7, #12]
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	603b      	str	r3, [r7, #0]
 80023ba:	4613      	mov	r3, r2
 80023bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023be:	e050      	b.n	8002462 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c6:	d04c      	beq.n	8002462 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d007      	beq.n	80023de <UART_WaitOnFlagUntilTimeout+0x30>
 80023ce:	f7fe fd2f 	bl	8000e30 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023da:	429a      	cmp	r2, r3
 80023dc:	d241      	bcs.n	8002462 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	330c      	adds	r3, #12
 80023e4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e8:	e853 3f00 	ldrex	r3, [r3]
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80023f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	330c      	adds	r3, #12
 80023fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023fe:	637a      	str	r2, [r7, #52]	; 0x34
 8002400:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002402:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002404:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002406:	e841 2300 	strex	r3, r2, [r1]
 800240a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800240c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1e5      	bne.n	80023de <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	3314      	adds	r3, #20
 8002418:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	e853 3f00 	ldrex	r3, [r3]
 8002420:	613b      	str	r3, [r7, #16]
   return(result);
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	f023 0301 	bic.w	r3, r3, #1
 8002428:	63bb      	str	r3, [r7, #56]	; 0x38
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	3314      	adds	r3, #20
 8002430:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002432:	623a      	str	r2, [r7, #32]
 8002434:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002436:	69f9      	ldr	r1, [r7, #28]
 8002438:	6a3a      	ldr	r2, [r7, #32]
 800243a:	e841 2300 	strex	r3, r2, [r1]
 800243e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1e5      	bne.n	8002412 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2220      	movs	r2, #32
 8002452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e00f      	b.n	8002482 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	4013      	ands	r3, r2
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	429a      	cmp	r2, r3
 8002470:	bf0c      	ite	eq
 8002472:	2301      	moveq	r3, #1
 8002474:	2300      	movne	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	429a      	cmp	r2, r3
 800247e:	d09f      	beq.n	80023c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3740      	adds	r7, #64	; 0x40
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800248c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002490:	b0c0      	sub	sp, #256	; 0x100
 8002492:	af00      	add	r7, sp, #0
 8002494:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80024a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a8:	68d9      	ldr	r1, [r3, #12]
 80024aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	ea40 0301 	orr.w	r3, r0, r1
 80024b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	431a      	orrs	r2, r3
 80024cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80024d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80024e4:	f021 010c 	bic.w	r1, r1, #12
 80024e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80024f2:	430b      	orrs	r3, r1
 80024f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002506:	6999      	ldr	r1, [r3, #24]
 8002508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	ea40 0301 	orr.w	r3, r0, r1
 8002512:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	4b8f      	ldr	r3, [pc, #572]	; (8002758 <UART_SetConfig+0x2cc>)
 800251c:	429a      	cmp	r2, r3
 800251e:	d005      	beq.n	800252c <UART_SetConfig+0xa0>
 8002520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	4b8d      	ldr	r3, [pc, #564]	; (800275c <UART_SetConfig+0x2d0>)
 8002528:	429a      	cmp	r2, r3
 800252a:	d104      	bne.n	8002536 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800252c:	f7ff fb9a 	bl	8001c64 <HAL_RCC_GetPCLK2Freq>
 8002530:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002534:	e003      	b.n	800253e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002536:	f7ff fb81 	bl	8001c3c <HAL_RCC_GetPCLK1Freq>
 800253a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800253e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002548:	f040 810c 	bne.w	8002764 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800254c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002550:	2200      	movs	r2, #0
 8002552:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002556:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800255a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800255e:	4622      	mov	r2, r4
 8002560:	462b      	mov	r3, r5
 8002562:	1891      	adds	r1, r2, r2
 8002564:	65b9      	str	r1, [r7, #88]	; 0x58
 8002566:	415b      	adcs	r3, r3
 8002568:	65fb      	str	r3, [r7, #92]	; 0x5c
 800256a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800256e:	4621      	mov	r1, r4
 8002570:	eb12 0801 	adds.w	r8, r2, r1
 8002574:	4629      	mov	r1, r5
 8002576:	eb43 0901 	adc.w	r9, r3, r1
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002586:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800258a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800258e:	4690      	mov	r8, r2
 8002590:	4699      	mov	r9, r3
 8002592:	4623      	mov	r3, r4
 8002594:	eb18 0303 	adds.w	r3, r8, r3
 8002598:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800259c:	462b      	mov	r3, r5
 800259e:	eb49 0303 	adc.w	r3, r9, r3
 80025a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80025a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80025b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80025b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80025ba:	460b      	mov	r3, r1
 80025bc:	18db      	adds	r3, r3, r3
 80025be:	653b      	str	r3, [r7, #80]	; 0x50
 80025c0:	4613      	mov	r3, r2
 80025c2:	eb42 0303 	adc.w	r3, r2, r3
 80025c6:	657b      	str	r3, [r7, #84]	; 0x54
 80025c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80025cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80025d0:	f7fd fea6 	bl	8000320 <__aeabi_uldivmod>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4b61      	ldr	r3, [pc, #388]	; (8002760 <UART_SetConfig+0x2d4>)
 80025da:	fba3 2302 	umull	r2, r3, r3, r2
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	011c      	lsls	r4, r3, #4
 80025e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025e6:	2200      	movs	r2, #0
 80025e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80025f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80025f4:	4642      	mov	r2, r8
 80025f6:	464b      	mov	r3, r9
 80025f8:	1891      	adds	r1, r2, r2
 80025fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80025fc:	415b      	adcs	r3, r3
 80025fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002600:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002604:	4641      	mov	r1, r8
 8002606:	eb12 0a01 	adds.w	sl, r2, r1
 800260a:	4649      	mov	r1, r9
 800260c:	eb43 0b01 	adc.w	fp, r3, r1
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800261c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002620:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002624:	4692      	mov	sl, r2
 8002626:	469b      	mov	fp, r3
 8002628:	4643      	mov	r3, r8
 800262a:	eb1a 0303 	adds.w	r3, sl, r3
 800262e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002632:	464b      	mov	r3, r9
 8002634:	eb4b 0303 	adc.w	r3, fp, r3
 8002638:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800263c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002648:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800264c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002650:	460b      	mov	r3, r1
 8002652:	18db      	adds	r3, r3, r3
 8002654:	643b      	str	r3, [r7, #64]	; 0x40
 8002656:	4613      	mov	r3, r2
 8002658:	eb42 0303 	adc.w	r3, r2, r3
 800265c:	647b      	str	r3, [r7, #68]	; 0x44
 800265e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002662:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002666:	f7fd fe5b 	bl	8000320 <__aeabi_uldivmod>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	4611      	mov	r1, r2
 8002670:	4b3b      	ldr	r3, [pc, #236]	; (8002760 <UART_SetConfig+0x2d4>)
 8002672:	fba3 2301 	umull	r2, r3, r3, r1
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	2264      	movs	r2, #100	; 0x64
 800267a:	fb02 f303 	mul.w	r3, r2, r3
 800267e:	1acb      	subs	r3, r1, r3
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002686:	4b36      	ldr	r3, [pc, #216]	; (8002760 <UART_SetConfig+0x2d4>)
 8002688:	fba3 2302 	umull	r2, r3, r3, r2
 800268c:	095b      	lsrs	r3, r3, #5
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002694:	441c      	add	r4, r3
 8002696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800269a:	2200      	movs	r2, #0
 800269c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80026a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80026a8:	4642      	mov	r2, r8
 80026aa:	464b      	mov	r3, r9
 80026ac:	1891      	adds	r1, r2, r2
 80026ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80026b0:	415b      	adcs	r3, r3
 80026b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80026b8:	4641      	mov	r1, r8
 80026ba:	1851      	adds	r1, r2, r1
 80026bc:	6339      	str	r1, [r7, #48]	; 0x30
 80026be:	4649      	mov	r1, r9
 80026c0:	414b      	adcs	r3, r1
 80026c2:	637b      	str	r3, [r7, #52]	; 0x34
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80026d0:	4659      	mov	r1, fp
 80026d2:	00cb      	lsls	r3, r1, #3
 80026d4:	4651      	mov	r1, sl
 80026d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026da:	4651      	mov	r1, sl
 80026dc:	00ca      	lsls	r2, r1, #3
 80026de:	4610      	mov	r0, r2
 80026e0:	4619      	mov	r1, r3
 80026e2:	4603      	mov	r3, r0
 80026e4:	4642      	mov	r2, r8
 80026e6:	189b      	adds	r3, r3, r2
 80026e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80026ec:	464b      	mov	r3, r9
 80026ee:	460a      	mov	r2, r1
 80026f0:	eb42 0303 	adc.w	r3, r2, r3
 80026f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002704:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002708:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800270c:	460b      	mov	r3, r1
 800270e:	18db      	adds	r3, r3, r3
 8002710:	62bb      	str	r3, [r7, #40]	; 0x28
 8002712:	4613      	mov	r3, r2
 8002714:	eb42 0303 	adc.w	r3, r2, r3
 8002718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800271a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800271e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002722:	f7fd fdfd 	bl	8000320 <__aeabi_uldivmod>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <UART_SetConfig+0x2d4>)
 800272c:	fba3 1302 	umull	r1, r3, r3, r2
 8002730:	095b      	lsrs	r3, r3, #5
 8002732:	2164      	movs	r1, #100	; 0x64
 8002734:	fb01 f303 	mul.w	r3, r1, r3
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	3332      	adds	r3, #50	; 0x32
 800273e:	4a08      	ldr	r2, [pc, #32]	; (8002760 <UART_SetConfig+0x2d4>)
 8002740:	fba2 2303 	umull	r2, r3, r2, r3
 8002744:	095b      	lsrs	r3, r3, #5
 8002746:	f003 0207 	and.w	r2, r3, #7
 800274a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4422      	add	r2, r4
 8002752:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002754:	e105      	b.n	8002962 <UART_SetConfig+0x4d6>
 8002756:	bf00      	nop
 8002758:	40011000 	.word	0x40011000
 800275c:	40011400 	.word	0x40011400
 8002760:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002768:	2200      	movs	r2, #0
 800276a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800276e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002772:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002776:	4642      	mov	r2, r8
 8002778:	464b      	mov	r3, r9
 800277a:	1891      	adds	r1, r2, r2
 800277c:	6239      	str	r1, [r7, #32]
 800277e:	415b      	adcs	r3, r3
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
 8002782:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002786:	4641      	mov	r1, r8
 8002788:	1854      	adds	r4, r2, r1
 800278a:	4649      	mov	r1, r9
 800278c:	eb43 0501 	adc.w	r5, r3, r1
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	00eb      	lsls	r3, r5, #3
 800279a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800279e:	00e2      	lsls	r2, r4, #3
 80027a0:	4614      	mov	r4, r2
 80027a2:	461d      	mov	r5, r3
 80027a4:	4643      	mov	r3, r8
 80027a6:	18e3      	adds	r3, r4, r3
 80027a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80027ac:	464b      	mov	r3, r9
 80027ae:	eb45 0303 	adc.w	r3, r5, r3
 80027b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80027b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80027c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	f04f 0300 	mov.w	r3, #0
 80027ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80027d2:	4629      	mov	r1, r5
 80027d4:	008b      	lsls	r3, r1, #2
 80027d6:	4621      	mov	r1, r4
 80027d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027dc:	4621      	mov	r1, r4
 80027de:	008a      	lsls	r2, r1, #2
 80027e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80027e4:	f7fd fd9c 	bl	8000320 <__aeabi_uldivmod>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4b60      	ldr	r3, [pc, #384]	; (8002970 <UART_SetConfig+0x4e4>)
 80027ee:	fba3 2302 	umull	r2, r3, r3, r2
 80027f2:	095b      	lsrs	r3, r3, #5
 80027f4:	011c      	lsls	r4, r3, #4
 80027f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027fa:	2200      	movs	r2, #0
 80027fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002800:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002804:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002808:	4642      	mov	r2, r8
 800280a:	464b      	mov	r3, r9
 800280c:	1891      	adds	r1, r2, r2
 800280e:	61b9      	str	r1, [r7, #24]
 8002810:	415b      	adcs	r3, r3
 8002812:	61fb      	str	r3, [r7, #28]
 8002814:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002818:	4641      	mov	r1, r8
 800281a:	1851      	adds	r1, r2, r1
 800281c:	6139      	str	r1, [r7, #16]
 800281e:	4649      	mov	r1, r9
 8002820:	414b      	adcs	r3, r1
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002830:	4659      	mov	r1, fp
 8002832:	00cb      	lsls	r3, r1, #3
 8002834:	4651      	mov	r1, sl
 8002836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800283a:	4651      	mov	r1, sl
 800283c:	00ca      	lsls	r2, r1, #3
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	4603      	mov	r3, r0
 8002844:	4642      	mov	r2, r8
 8002846:	189b      	adds	r3, r3, r2
 8002848:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800284c:	464b      	mov	r3, r9
 800284e:	460a      	mov	r2, r1
 8002850:	eb42 0303 	adc.w	r3, r2, r3
 8002854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	67bb      	str	r3, [r7, #120]	; 0x78
 8002862:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002870:	4649      	mov	r1, r9
 8002872:	008b      	lsls	r3, r1, #2
 8002874:	4641      	mov	r1, r8
 8002876:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800287a:	4641      	mov	r1, r8
 800287c:	008a      	lsls	r2, r1, #2
 800287e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002882:	f7fd fd4d 	bl	8000320 <__aeabi_uldivmod>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4b39      	ldr	r3, [pc, #228]	; (8002970 <UART_SetConfig+0x4e4>)
 800288c:	fba3 1302 	umull	r1, r3, r3, r2
 8002890:	095b      	lsrs	r3, r3, #5
 8002892:	2164      	movs	r1, #100	; 0x64
 8002894:	fb01 f303 	mul.w	r3, r1, r3
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	3332      	adds	r3, #50	; 0x32
 800289e:	4a34      	ldr	r2, [pc, #208]	; (8002970 <UART_SetConfig+0x4e4>)
 80028a0:	fba2 2303 	umull	r2, r3, r2, r3
 80028a4:	095b      	lsrs	r3, r3, #5
 80028a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028aa:	441c      	add	r4, r3
 80028ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028b0:	2200      	movs	r2, #0
 80028b2:	673b      	str	r3, [r7, #112]	; 0x70
 80028b4:	677a      	str	r2, [r7, #116]	; 0x74
 80028b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80028ba:	4642      	mov	r2, r8
 80028bc:	464b      	mov	r3, r9
 80028be:	1891      	adds	r1, r2, r2
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	415b      	adcs	r3, r3
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028ca:	4641      	mov	r1, r8
 80028cc:	1851      	adds	r1, r2, r1
 80028ce:	6039      	str	r1, [r7, #0]
 80028d0:	4649      	mov	r1, r9
 80028d2:	414b      	adcs	r3, r1
 80028d4:	607b      	str	r3, [r7, #4]
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80028e2:	4659      	mov	r1, fp
 80028e4:	00cb      	lsls	r3, r1, #3
 80028e6:	4651      	mov	r1, sl
 80028e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028ec:	4651      	mov	r1, sl
 80028ee:	00ca      	lsls	r2, r1, #3
 80028f0:	4610      	mov	r0, r2
 80028f2:	4619      	mov	r1, r3
 80028f4:	4603      	mov	r3, r0
 80028f6:	4642      	mov	r2, r8
 80028f8:	189b      	adds	r3, r3, r2
 80028fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80028fc:	464b      	mov	r3, r9
 80028fe:	460a      	mov	r2, r1
 8002900:	eb42 0303 	adc.w	r3, r2, r3
 8002904:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	663b      	str	r3, [r7, #96]	; 0x60
 8002910:	667a      	str	r2, [r7, #100]	; 0x64
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800291e:	4649      	mov	r1, r9
 8002920:	008b      	lsls	r3, r1, #2
 8002922:	4641      	mov	r1, r8
 8002924:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002928:	4641      	mov	r1, r8
 800292a:	008a      	lsls	r2, r1, #2
 800292c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002930:	f7fd fcf6 	bl	8000320 <__aeabi_uldivmod>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <UART_SetConfig+0x4e4>)
 800293a:	fba3 1302 	umull	r1, r3, r3, r2
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	2164      	movs	r1, #100	; 0x64
 8002942:	fb01 f303 	mul.w	r3, r1, r3
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	3332      	adds	r3, #50	; 0x32
 800294c:	4a08      	ldr	r2, [pc, #32]	; (8002970 <UART_SetConfig+0x4e4>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	f003 020f 	and.w	r2, r3, #15
 8002958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4422      	add	r2, r4
 8002960:	609a      	str	r2, [r3, #8]
}
 8002962:	bf00      	nop
 8002964:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002968:	46bd      	mov	sp, r7
 800296a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800296e:	bf00      	nop
 8002970:	51eb851f 	.word	0x51eb851f

08002974 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f103 0208 	add.w	r2, r3, #8
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f04f 32ff 	mov.w	r2, #4294967295
 800298c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f103 0208 	add.w	r2, r3, #8
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f103 0208 	add.w	r2, r3, #8
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80029ce:	b480      	push	{r7}
 80029d0:	b085      	sub	sp, #20
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	601a      	str	r2, [r3, #0]
}
 8002a0a:	bf00      	nop
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002a16:	b480      	push	{r7}
 8002a18:	b085      	sub	sp, #20
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2c:	d103      	bne.n	8002a36 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	e00c      	b.n	8002a50 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3308      	adds	r3, #8
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	e002      	b.n	8002a44 <vListInsert+0x2e>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d2f6      	bcs.n	8002a3e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	601a      	str	r2, [r3, #0]
}
 8002a7c:	bf00      	nop
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6892      	ldr	r2, [r2, #8]
 8002a9e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6852      	ldr	r2, [r2, #4]
 8002aa8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d103      	bne.n	8002abc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	1e5a      	subs	r2, r3, #1
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10a      	bne.n	8002b0a <xQueueGenericReset+0x2e>
        __asm volatile
 8002af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	60fb      	str	r3, [r7, #12]
    }
 8002b06:	bf00      	nop
 8002b08:	e7fe      	b.n	8002b08 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d05d      	beq.n	8002bcc <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d059      	beq.n	8002bcc <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b20:	2100      	movs	r1, #0
 8002b22:	fba3 2302 	umull	r2, r3, r3, r2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d000      	beq.n	8002b2c <xQueueGenericReset+0x50>
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d14c      	bne.n	8002bcc <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002b32:	f002 f911 	bl	8004d58 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3e:	6939      	ldr	r1, [r7, #16]
 8002b40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b42:	fb01 f303 	mul.w	r3, r1, r3
 8002b46:	441a      	add	r2, r3
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b62:	3b01      	subs	r3, #1
 8002b64:	6939      	ldr	r1, [r7, #16]
 8002b66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	441a      	add	r2, r3
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	22ff      	movs	r2, #255	; 0xff
 8002b76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	22ff      	movs	r2, #255	; 0xff
 8002b7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d114      	bne.n	8002bb2 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d01a      	beq.n	8002bc6 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	3310      	adds	r3, #16
 8002b94:	4618      	mov	r0, r3
 8002b96:	f001 f889 	bl	8003cac <xTaskRemoveFromEventList>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d012      	beq.n	8002bc6 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002ba0:	4b15      	ldr	r3, [pc, #84]	; (8002bf8 <xQueueGenericReset+0x11c>)
 8002ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	f3bf 8f4f 	dsb	sy
 8002bac:	f3bf 8f6f 	isb	sy
 8002bb0:	e009      	b.n	8002bc6 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	3310      	adds	r3, #16
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fedc 	bl	8002974 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	3324      	adds	r3, #36	; 0x24
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fed7 	bl	8002974 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002bc6:	f002 f8f7 	bl	8004db8 <vPortExitCritical>
 8002bca:	e001      	b.n	8002bd0 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10a      	bne.n	8002bec <xQueueGenericReset+0x110>
        __asm volatile
 8002bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bda:	f383 8811 	msr	BASEPRI, r3
 8002bde:	f3bf 8f6f 	isb	sy
 8002be2:	f3bf 8f4f 	dsb	sy
 8002be6:	60bb      	str	r3, [r7, #8]
    }
 8002be8:	bf00      	nop
 8002bea:	e7fe      	b.n	8002bea <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002bec:	697b      	ldr	r3, [r7, #20]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	e000ed04 	.word	0xe000ed04

08002bfc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08a      	sub	sp, #40	; 0x28
 8002c00:	af02      	add	r7, sp, #8
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	4613      	mov	r3, r2
 8002c08:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d02e      	beq.n	8002c72 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002c14:	2100      	movs	r1, #0
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d000      	beq.n	8002c24 <xQueueGenericCreate+0x28>
 8002c22:	2101      	movs	r1, #1
 8002c24:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d123      	bne.n	8002c72 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002c32:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002c36:	d81c      	bhi.n	8002c72 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	fb02 f303 	mul.w	r3, r2, r3
 8002c40:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	3350      	adds	r3, #80	; 0x50
 8002c46:	4618      	mov	r0, r3
 8002c48:	f002 f9ee 	bl	8005028 <pvPortMalloc>
 8002c4c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d01c      	beq.n	8002c8e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	3350      	adds	r3, #80	; 0x50
 8002c5c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c5e:	79fa      	ldrb	r2, [r7, #7]
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	4613      	mov	r3, r2
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f814 	bl	8002c98 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002c70:	e00d      	b.n	8002c8e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10a      	bne.n	8002c8e <xQueueGenericCreate+0x92>
        __asm volatile
 8002c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7c:	f383 8811 	msr	BASEPRI, r3
 8002c80:	f3bf 8f6f 	isb	sy
 8002c84:	f3bf 8f4f 	dsb	sy
 8002c88:	613b      	str	r3, [r7, #16]
    }
 8002c8a:	bf00      	nop
 8002c8c:	e7fe      	b.n	8002c8c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002c8e:	69fb      	ldr	r3, [r7, #28]
    }
 8002c90:	4618      	mov	r0, r3
 8002c92:	3720      	adds	r7, #32
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d103      	bne.n	8002cb4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	e002      	b.n	8002cba <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	69b8      	ldr	r0, [r7, #24]
 8002cca:	f7ff ff07 	bl	8002adc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002cd6:	78fb      	ldrb	r3, [r7, #3]
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	68f9      	ldr	r1, [r7, #12]
 8002cdc:	2073      	movs	r0, #115	; 0x73
 8002cde:	f003 faa9 	bl	8006234 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002ce2:	bf00      	nop
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002cec:	b590      	push	{r4, r7, lr}
 8002cee:	b08f      	sub	sp, #60	; 0x3c
 8002cf0:	af02      	add	r7, sp, #8
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10a      	bne.n	8002d1c <xQueueReceive+0x30>
        __asm volatile
 8002d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0a:	f383 8811 	msr	BASEPRI, r3
 8002d0e:	f3bf 8f6f 	isb	sy
 8002d12:	f3bf 8f4f 	dsb	sy
 8002d16:	623b      	str	r3, [r7, #32]
    }
 8002d18:	bf00      	nop
 8002d1a:	e7fe      	b.n	8002d1a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d103      	bne.n	8002d2a <xQueueReceive+0x3e>
 8002d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <xQueueReceive+0x42>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <xQueueReceive+0x44>
 8002d2e:	2300      	movs	r3, #0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10a      	bne.n	8002d4a <xQueueReceive+0x5e>
        __asm volatile
 8002d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d38:	f383 8811 	msr	BASEPRI, r3
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	61fb      	str	r3, [r7, #28]
    }
 8002d46:	bf00      	nop
 8002d48:	e7fe      	b.n	8002d48 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d4a:	f001 f9c1 	bl	80040d0 <xTaskGetSchedulerState>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d102      	bne.n	8002d5a <xQueueReceive+0x6e>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <xQueueReceive+0x72>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <xQueueReceive+0x74>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10a      	bne.n	8002d7a <xQueueReceive+0x8e>
        __asm volatile
 8002d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d68:	f383 8811 	msr	BASEPRI, r3
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	61bb      	str	r3, [r7, #24]
    }
 8002d76:	bf00      	nop
 8002d78:	e7fe      	b.n	8002d78 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002d7a:	f001 ffed 	bl	8004d58 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d02f      	beq.n	8002dea <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d8a:	68b9      	ldr	r1, [r7, #8]
 8002d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d8e:	f000 f8bd 	bl	8002f0c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d94:	4618      	mov	r0, r3
 8002d96:	f004 f80b 	bl	8006db0 <SEGGER_SYSVIEW_ShrinkId>
 8002d9a:	4604      	mov	r4, r0
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f004 f807 	bl	8006db0 <SEGGER_SYSVIEW_ShrinkId>
 8002da2:	4602      	mov	r2, r0
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2101      	movs	r1, #1
 8002da8:	9100      	str	r1, [sp, #0]
 8002daa:	4621      	mov	r1, r4
 8002dac:	205c      	movs	r0, #92	; 0x5c
 8002dae:	f003 fab7 	bl	8006320 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	1e5a      	subs	r2, r3, #1
 8002db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00f      	beq.n	8002de2 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc4:	3310      	adds	r3, #16
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 ff70 	bl	8003cac <xTaskRemoveFromEventList>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d007      	beq.n	8002de2 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002dd2:	4b4d      	ldr	r3, [pc, #308]	; (8002f08 <xQueueReceive+0x21c>)
 8002dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002de2:	f001 ffe9 	bl	8004db8 <vPortExitCritical>
                return pdPASS;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e08a      	b.n	8002f00 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d113      	bne.n	8002e18 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002df0:	f001 ffe2 	bl	8004db8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df6:	4618      	mov	r0, r3
 8002df8:	f003 ffda 	bl	8006db0 <SEGGER_SYSVIEW_ShrinkId>
 8002dfc:	4604      	mov	r4, r0
 8002dfe:	2000      	movs	r0, #0
 8002e00:	f003 ffd6 	bl	8006db0 <SEGGER_SYSVIEW_ShrinkId>
 8002e04:	4602      	mov	r2, r0
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2101      	movs	r1, #1
 8002e0a:	9100      	str	r1, [sp, #0]
 8002e0c:	4621      	mov	r1, r4
 8002e0e:	205c      	movs	r0, #92	; 0x5c
 8002e10:	f003 fa86 	bl	8006320 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002e14:	2300      	movs	r3, #0
 8002e16:	e073      	b.n	8002f00 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d106      	bne.n	8002e2c <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002e1e:	f107 0310 	add.w	r3, r7, #16
 8002e22:	4618      	mov	r0, r3
 8002e24:	f001 f81a 	bl	8003e5c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002e2c:	f001 ffc4 	bl	8004db8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002e30:	f000 fc1c 	bl	800366c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002e34:	f001 ff90 	bl	8004d58 <vPortEnterCritical>
 8002e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e3e:	b25b      	sxtb	r3, r3
 8002e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e44:	d103      	bne.n	8002e4e <xQueueReceive+0x162>
 8002e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e54:	b25b      	sxtb	r3, r3
 8002e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5a:	d103      	bne.n	8002e64 <xQueueReceive+0x178>
 8002e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e64:	f001 ffa8 	bl	8004db8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e68:	1d3a      	adds	r2, r7, #4
 8002e6a:	f107 0310 	add.w	r3, r7, #16
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f001 f809 	bl	8003e88 <xTaskCheckForTimeOut>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d124      	bne.n	8002ec6 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e7e:	f000 f8bd 	bl	8002ffc <prvIsQueueEmpty>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d018      	beq.n	8002eba <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8a:	3324      	adds	r3, #36	; 0x24
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 fe9f 	bl	8003bd4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002e96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e98:	f000 f85e 	bl	8002f58 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002e9c:	f000 fbf4 	bl	8003688 <xTaskResumeAll>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f47f af69 	bne.w	8002d7a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002ea8:	4b17      	ldr	r3, [pc, #92]	; (8002f08 <xQueueReceive+0x21c>)
 8002eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	f3bf 8f4f 	dsb	sy
 8002eb4:	f3bf 8f6f 	isb	sy
 8002eb8:	e75f      	b.n	8002d7a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ebc:	f000 f84c 	bl	8002f58 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002ec0:	f000 fbe2 	bl	8003688 <xTaskResumeAll>
 8002ec4:	e759      	b.n	8002d7a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002ec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ec8:	f000 f846 	bl	8002f58 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002ecc:	f000 fbdc 	bl	8003688 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ed2:	f000 f893 	bl	8002ffc <prvIsQueueEmpty>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f43f af4e 	beq.w	8002d7a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f003 ff65 	bl	8006db0 <SEGGER_SYSVIEW_ShrinkId>
 8002ee6:	4604      	mov	r4, r0
 8002ee8:	2000      	movs	r0, #0
 8002eea:	f003 ff61 	bl	8006db0 <SEGGER_SYSVIEW_ShrinkId>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	9100      	str	r1, [sp, #0]
 8002ef6:	4621      	mov	r1, r4
 8002ef8:	205c      	movs	r0, #92	; 0x5c
 8002efa:	f003 fa11 	bl	8006320 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002efe:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3734      	adds	r7, #52	; 0x34
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd90      	pop	{r4, r7, pc}
 8002f08:	e000ed04 	.word	0xe000ed04

08002f0c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d018      	beq.n	8002f50 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	441a      	add	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d303      	bcc.n	8002f40 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68d9      	ldr	r1, [r3, #12]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	461a      	mov	r2, r3
 8002f4a:	6838      	ldr	r0, [r7, #0]
 8002f4c:	f004 f8b6 	bl	80070bc <memcpy>
    }
}
 8002f50:	bf00      	nop
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002f60:	f001 fefa 	bl	8004d58 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f6a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f6c:	e011      	b.n	8002f92 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d012      	beq.n	8002f9c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	3324      	adds	r3, #36	; 0x24
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 fe96 	bl	8003cac <xTaskRemoveFromEventList>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002f86:	f000 ffe5 	bl	8003f54 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	dce9      	bgt.n	8002f6e <prvUnlockQueue+0x16>
 8002f9a:	e000      	b.n	8002f9e <prvUnlockQueue+0x46>
                    break;
 8002f9c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	22ff      	movs	r2, #255	; 0xff
 8002fa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002fa6:	f001 ff07 	bl	8004db8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002faa:	f001 fed5 	bl	8004d58 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fb4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fb6:	e011      	b.n	8002fdc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d012      	beq.n	8002fe6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3310      	adds	r3, #16
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 fe71 	bl	8003cac <xTaskRemoveFromEventList>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002fd0:	f000 ffc0 	bl	8003f54 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002fd4:	7bbb      	ldrb	r3, [r7, #14]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	dce9      	bgt.n	8002fb8 <prvUnlockQueue+0x60>
 8002fe4:	e000      	b.n	8002fe8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002fe6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	22ff      	movs	r2, #255	; 0xff
 8002fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002ff0:	f001 fee2 	bl	8004db8 <vPortExitCritical>
}
 8002ff4:	bf00      	nop
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003004:	f001 fea8 	bl	8004d58 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300c:	2b00      	cmp	r3, #0
 800300e:	d102      	bne.n	8003016 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003010:	2301      	movs	r3, #1
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	e001      	b.n	800301a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800301a:	f001 fecd 	bl	8004db8 <vPortExitCritical>

    return xReturn;
 800301e:	68fb      	ldr	r3, [r7, #12]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003032:	2300      	movs	r3, #0
 8003034:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10a      	bne.n	8003052 <vQueueAddToRegistry+0x2a>
        __asm volatile
 800303c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003040:	f383 8811 	msr	BASEPRI, r3
 8003044:	f3bf 8f6f 	isb	sy
 8003048:	f3bf 8f4f 	dsb	sy
 800304c:	60fb      	str	r3, [r7, #12]
    }
 800304e:	bf00      	nop
 8003050:	e7fe      	b.n	8003050 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d024      	beq.n	80030a2 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	e01e      	b.n	800309c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800305e:	4a1c      	ldr	r2, [pc, #112]	; (80030d0 <vQueueAddToRegistry+0xa8>)
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4413      	add	r3, r2
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	429a      	cmp	r2, r3
 800306c:	d105      	bne.n	800307a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4a17      	ldr	r2, [pc, #92]	; (80030d0 <vQueueAddToRegistry+0xa8>)
 8003074:	4413      	add	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
                    break;
 8003078:	e013      	b.n	80030a2 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10a      	bne.n	8003096 <vQueueAddToRegistry+0x6e>
 8003080:	4a13      	ldr	r2, [pc, #76]	; (80030d0 <vQueueAddToRegistry+0xa8>)
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d104      	bne.n	8003096 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	4a0f      	ldr	r2, [pc, #60]	; (80030d0 <vQueueAddToRegistry+0xa8>)
 8003092:	4413      	add	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	3301      	adds	r3, #1
 800309a:	617b      	str	r3, [r7, #20]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	2b07      	cmp	r3, #7
 80030a0:	d9dd      	bls.n	800305e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00f      	beq.n	80030c8 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f003 fe7a 	bl	8006db0 <SEGGER_SYSVIEW_ShrinkId>
 80030bc:	4601      	mov	r1, r0
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	461a      	mov	r2, r3
 80030c2:	2071      	movs	r0, #113	; 0x71
 80030c4:	f003 f85c 	bl	8006180 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80030c8:	bf00      	nop
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	2000016c 	.word	0x2000016c

080030d4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80030e4:	f001 fe38 	bl	8004d58 <vPortEnterCritical>
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030ee:	b25b      	sxtb	r3, r3
 80030f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f4:	d103      	bne.n	80030fe <vQueueWaitForMessageRestricted+0x2a>
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003104:	b25b      	sxtb	r3, r3
 8003106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310a:	d103      	bne.n	8003114 <vQueueWaitForMessageRestricted+0x40>
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003114:	f001 fe50 	bl	8004db8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311c:	2b00      	cmp	r3, #0
 800311e:	d106      	bne.n	800312e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	3324      	adds	r3, #36	; 0x24
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	68b9      	ldr	r1, [r7, #8]
 8003128:	4618      	mov	r0, r3
 800312a:	f000 fd77 	bl	8003c1c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800312e:	6978      	ldr	r0, [r7, #20]
 8003130:	f7ff ff12 	bl	8002f58 <prvUnlockQueue>
    }
 8003134:	bf00      	nop
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800313c:	b580      	push	{r7, lr}
 800313e:	b08c      	sub	sp, #48	; 0x30
 8003140:	af04      	add	r7, sp, #16
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	4613      	mov	r3, r2
 800314a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800314c:	88fb      	ldrh	r3, [r7, #6]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4618      	mov	r0, r3
 8003152:	f001 ff69 	bl	8005028 <pvPortMalloc>
 8003156:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d013      	beq.n	8003186 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800315e:	2058      	movs	r0, #88	; 0x58
 8003160:	f001 ff62 	bl	8005028 <pvPortMalloc>
 8003164:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d008      	beq.n	800317e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800316c:	2258      	movs	r2, #88	; 0x58
 800316e:	2100      	movs	r1, #0
 8003170:	69f8      	ldr	r0, [r7, #28]
 8003172:	f003 ffb1 	bl	80070d8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	631a      	str	r2, [r3, #48]	; 0x30
 800317c:	e005      	b.n	800318a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800317e:	6978      	ldr	r0, [r7, #20]
 8003180:	f002 f80c 	bl	800519c <vPortFree>
 8003184:	e001      	b.n	800318a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003186:	2300      	movs	r3, #0
 8003188:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d013      	beq.n	80031b8 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003190:	88fa      	ldrh	r2, [r7, #6]
 8003192:	2300      	movs	r3, #0
 8003194:	9303      	str	r3, [sp, #12]
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	9302      	str	r3, [sp, #8]
 800319a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 f80e 	bl	80031c8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80031ac:	69f8      	ldr	r0, [r7, #28]
 80031ae:	f000 f899 	bl	80032e4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80031b2:	2301      	movs	r3, #1
 80031b4:	61bb      	str	r3, [r7, #24]
 80031b6:	e002      	b.n	80031be <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80031b8:	f04f 33ff 	mov.w	r3, #4294967295
 80031bc:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80031be:	69bb      	ldr	r3, [r7, #24]
    }
 80031c0:	4618      	mov	r0, r3
 80031c2:	3720      	adds	r7, #32
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b088      	sub	sp, #32
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
 80031d4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80031d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	461a      	mov	r2, r3
 80031e0:	21a5      	movs	r1, #165	; 0xa5
 80031e2:	f003 ff79 	bl	80070d8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80031e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031f0:	3b01      	subs	r3, #1
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	f023 0307 	bic.w	r3, r3, #7
 80031fe:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00a      	beq.n	8003220 <prvInitialiseNewTask+0x58>
        __asm volatile
 800320a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320e:	f383 8811 	msr	BASEPRI, r3
 8003212:	f3bf 8f6f 	isb	sy
 8003216:	f3bf 8f4f 	dsb	sy
 800321a:	617b      	str	r3, [r7, #20]
    }
 800321c:	bf00      	nop
 800321e:	e7fe      	b.n	800321e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d01e      	beq.n	8003264 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003226:	2300      	movs	r3, #0
 8003228:	61fb      	str	r3, [r7, #28]
 800322a:	e012      	b.n	8003252 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	4413      	add	r3, r2
 8003232:	7819      	ldrb	r1, [r3, #0]
 8003234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	4413      	add	r3, r2
 800323a:	3334      	adds	r3, #52	; 0x34
 800323c:	460a      	mov	r2, r1
 800323e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	4413      	add	r3, r2
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d006      	beq.n	800325a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	3301      	adds	r3, #1
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	2b09      	cmp	r3, #9
 8003256:	d9e9      	bls.n	800322c <prvInitialiseNewTask+0x64>
 8003258:	e000      	b.n	800325c <prvInitialiseNewTask+0x94>
            {
                break;
 800325a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800325c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003266:	2b04      	cmp	r3, #4
 8003268:	d90a      	bls.n	8003280 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800326a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	613b      	str	r3, [r7, #16]
    }
 800327c:	bf00      	nop
 800327e:	e7fe      	b.n	800327e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003282:	2b04      	cmp	r3, #4
 8003284:	d901      	bls.n	800328a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003286:	2304      	movs	r3, #4
 8003288:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800328a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800328e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003294:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003298:	3304      	adds	r3, #4
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff fb8a 	bl	80029b4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80032a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a2:	3318      	adds	r3, #24
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff fb85 	bl	80029b4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80032aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ae:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b2:	f1c3 0205 	rsb	r2, r3, #5
 80032b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80032ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032be:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	68f9      	ldr	r1, [r7, #12]
 80032c4:	69b8      	ldr	r0, [r7, #24]
 80032c6:	f001 fc1b 	bl	8004b00 <pxPortInitialiseStack>
 80032ca:	4602      	mov	r2, r0
 80032cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ce:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80032d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032da:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80032dc:	bf00      	nop
 80032de:	3720      	adds	r7, #32
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80032e4:	b5b0      	push	{r4, r5, r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af02      	add	r7, sp, #8
 80032ea:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80032ec:	f001 fd34 	bl	8004d58 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80032f0:	4b4f      	ldr	r3, [pc, #316]	; (8003430 <prvAddNewTaskToReadyList+0x14c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	3301      	adds	r3, #1
 80032f6:	4a4e      	ldr	r2, [pc, #312]	; (8003430 <prvAddNewTaskToReadyList+0x14c>)
 80032f8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80032fa:	4b4e      	ldr	r3, [pc, #312]	; (8003434 <prvAddNewTaskToReadyList+0x150>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d109      	bne.n	8003316 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003302:	4a4c      	ldr	r2, [pc, #304]	; (8003434 <prvAddNewTaskToReadyList+0x150>)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003308:	4b49      	ldr	r3, [pc, #292]	; (8003430 <prvAddNewTaskToReadyList+0x14c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d110      	bne.n	8003332 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003310:	f000 fe44 	bl	8003f9c <prvInitialiseTaskLists>
 8003314:	e00d      	b.n	8003332 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003316:	4b48      	ldr	r3, [pc, #288]	; (8003438 <prvAddNewTaskToReadyList+0x154>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800331e:	4b45      	ldr	r3, [pc, #276]	; (8003434 <prvAddNewTaskToReadyList+0x150>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	429a      	cmp	r2, r3
 800332a:	d802      	bhi.n	8003332 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800332c:	4a41      	ldr	r2, [pc, #260]	; (8003434 <prvAddNewTaskToReadyList+0x150>)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003332:	4b42      	ldr	r3, [pc, #264]	; (800343c <prvAddNewTaskToReadyList+0x158>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	3301      	adds	r3, #1
 8003338:	4a40      	ldr	r2, [pc, #256]	; (800343c <prvAddNewTaskToReadyList+0x158>)
 800333a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800333c:	4b3f      	ldr	r3, [pc, #252]	; (800343c <prvAddNewTaskToReadyList+0x158>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d016      	beq.n	8003378 <prvAddNewTaskToReadyList+0x94>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4618      	mov	r0, r3
 800334e:	f003 fc69 	bl	8006c24 <SEGGER_SYSVIEW_OnTaskCreate>
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	461d      	mov	r5, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	461c      	mov	r4, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	1ae3      	subs	r3, r4, r3
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	462b      	mov	r3, r5
 8003374:	f002 f8d4 	bl	8005520 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4618      	mov	r0, r3
 800337c:	f003 fcd6 	bl	8006d2c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	2201      	movs	r2, #1
 8003386:	409a      	lsls	r2, r3
 8003388:	4b2d      	ldr	r3, [pc, #180]	; (8003440 <prvAddNewTaskToReadyList+0x15c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4313      	orrs	r3, r2
 800338e:	4a2c      	ldr	r2, [pc, #176]	; (8003440 <prvAddNewTaskToReadyList+0x15c>)
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003396:	492b      	ldr	r1, [pc, #172]	; (8003444 <prvAddNewTaskToReadyList+0x160>)
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	3304      	adds	r3, #4
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	609a      	str	r2, [r3, #8]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	60da      	str	r2, [r3, #12]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	3204      	adds	r2, #4
 80033be:	605a      	str	r2, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	1d1a      	adds	r2, r3, #4
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4a1b      	ldr	r2, [pc, #108]	; (8003444 <prvAddNewTaskToReadyList+0x160>)
 80033d6:	441a      	add	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	615a      	str	r2, [r3, #20]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e0:	4918      	ldr	r1, [pc, #96]	; (8003444 <prvAddNewTaskToReadyList+0x160>)
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	1c59      	adds	r1, r3, #1
 80033f0:	4814      	ldr	r0, [pc, #80]	; (8003444 <prvAddNewTaskToReadyList+0x160>)
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4403      	add	r3, r0
 80033fc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80033fe:	f001 fcdb 	bl	8004db8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003402:	4b0d      	ldr	r3, [pc, #52]	; (8003438 <prvAddNewTaskToReadyList+0x154>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00e      	beq.n	8003428 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800340a:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <prvAddNewTaskToReadyList+0x150>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	429a      	cmp	r2, r3
 8003416:	d207      	bcs.n	8003428 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003418:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <prvAddNewTaskToReadyList+0x164>)
 800341a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003428:	bf00      	nop
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bdb0      	pop	{r4, r5, r7, pc}
 8003430:	20000284 	.word	0x20000284
 8003434:	200001ac 	.word	0x200001ac
 8003438:	20000290 	.word	0x20000290
 800343c:	200002a0 	.word	0x200002a0
 8003440:	2000028c 	.word	0x2000028c
 8003444:	200001b0 	.word	0x200001b0
 8003448:	e000ed04 	.word	0xe000ed04

0800344c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8003454:	f001 fc80 	bl	8004d58 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d102      	bne.n	8003464 <vTaskDelete+0x18>
 800345e:	4b48      	ldr	r3, [pc, #288]	; (8003580 <vTaskDelete+0x134>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	e000      	b.n	8003466 <vTaskDelete+0x1a>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	3304      	adds	r3, #4
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff fb0b 	bl	8002a88 <uxListRemove>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d115      	bne.n	80034a4 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347c:	4941      	ldr	r1, [pc, #260]	; (8003584 <vTaskDelete+0x138>)
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10a      	bne.n	80034a4 <vTaskDelete+0x58>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	2201      	movs	r2, #1
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43da      	mvns	r2, r3
 800349a:	4b3b      	ldr	r3, [pc, #236]	; (8003588 <vTaskDelete+0x13c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4013      	ands	r3, r2
 80034a0:	4a39      	ldr	r2, [pc, #228]	; (8003588 <vTaskDelete+0x13c>)
 80034a2:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d004      	beq.n	80034b6 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	3318      	adds	r3, #24
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff fae9 	bl	8002a88 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80034b6:	4b35      	ldr	r3, [pc, #212]	; (800358c <vTaskDelete+0x140>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3301      	adds	r3, #1
 80034bc:	4a33      	ldr	r2, [pc, #204]	; (800358c <vTaskDelete+0x140>)
 80034be:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 80034c0:	4b2f      	ldr	r3, [pc, #188]	; (8003580 <vTaskDelete+0x134>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d118      	bne.n	80034fc <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	3304      	adds	r3, #4
 80034ce:	4619      	mov	r1, r3
 80034d0:	482f      	ldr	r0, [pc, #188]	; (8003590 <vTaskDelete+0x144>)
 80034d2:	f7ff fa7c 	bl	80029ce <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 80034d6:	4b2f      	ldr	r3, [pc, #188]	; (8003594 <vTaskDelete+0x148>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3301      	adds	r3, #1
 80034dc:	4a2d      	ldr	r2, [pc, #180]	; (8003594 <vTaskDelete+0x148>)
 80034de:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f003 fc64 	bl	8006db0 <SEGGER_SYSVIEW_ShrinkId>
 80034e8:	4603      	mov	r3, r0
 80034ea:	4619      	mov	r1, r3
 80034ec:	2022      	movs	r0, #34	; 0x22
 80034ee:	f002 fe0b 	bl	8006108 <SEGGER_SYSVIEW_RecordU32>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f002 f87b 	bl	80055f0 <SYSVIEW_DeleteTask>
 80034fa:	e013      	b.n	8003524 <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80034fc:	4b26      	ldr	r3, [pc, #152]	; (8003598 <vTaskDelete+0x14c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	3b01      	subs	r3, #1
 8003502:	4a25      	ldr	r2, [pc, #148]	; (8003598 <vTaskDelete+0x14c>)
 8003504:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4618      	mov	r0, r3
 800350a:	f003 fc51 	bl	8006db0 <SEGGER_SYSVIEW_ShrinkId>
 800350e:	4603      	mov	r3, r0
 8003510:	4619      	mov	r1, r3
 8003512:	2022      	movs	r0, #34	; 0x22
 8003514:	f002 fdf8 	bl	8006108 <SEGGER_SYSVIEW_RecordU32>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4618      	mov	r0, r3
 800351c:	f002 f868 	bl	80055f0 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8003520:	f000 fdba 	bl	8004098 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8003524:	f001 fc48 	bl	8004db8 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8003528:	4b15      	ldr	r3, [pc, #84]	; (8003580 <vTaskDelete+0x134>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	429a      	cmp	r2, r3
 8003530:	d002      	beq.n	8003538 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 fda0 	bl	8004078 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8003538:	4b18      	ldr	r3, [pc, #96]	; (800359c <vTaskDelete+0x150>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01b      	beq.n	8003578 <vTaskDelete+0x12c>
        {
            if( pxTCB == pxCurrentTCB )
 8003540:	4b0f      	ldr	r3, [pc, #60]	; (8003580 <vTaskDelete+0x134>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	429a      	cmp	r2, r3
 8003548:	d116      	bne.n	8003578 <vTaskDelete+0x12c>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 800354a:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <vTaskDelete+0x154>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <vTaskDelete+0x11c>
        __asm volatile
 8003552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	60bb      	str	r3, [r7, #8]
    }
 8003564:	bf00      	nop
 8003566:	e7fe      	b.n	8003566 <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8003568:	4b0e      	ldr	r3, [pc, #56]	; (80035a4 <vTaskDelete+0x158>)
 800356a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	f3bf 8f4f 	dsb	sy
 8003574:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003578:	bf00      	nop
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	200001ac 	.word	0x200001ac
 8003584:	200001b0 	.word	0x200001b0
 8003588:	2000028c 	.word	0x2000028c
 800358c:	200002a0 	.word	0x200002a0
 8003590:	20000258 	.word	0x20000258
 8003594:	2000026c 	.word	0x2000026c
 8003598:	20000284 	.word	0x20000284
 800359c:	20000290 	.word	0x20000290
 80035a0:	200002ac 	.word	0x200002ac
 80035a4:	e000ed04 	.word	0xe000ed04

080035a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80035ae:	4b27      	ldr	r3, [pc, #156]	; (800364c <vTaskStartScheduler+0xa4>)
 80035b0:	9301      	str	r3, [sp, #4]
 80035b2:	2300      	movs	r3, #0
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	2300      	movs	r3, #0
 80035b8:	2282      	movs	r2, #130	; 0x82
 80035ba:	4925      	ldr	r1, [pc, #148]	; (8003650 <vTaskStartScheduler+0xa8>)
 80035bc:	4825      	ldr	r0, [pc, #148]	; (8003654 <vTaskStartScheduler+0xac>)
 80035be:	f7ff fdbd 	bl	800313c <xTaskCreate>
 80035c2:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d102      	bne.n	80035d0 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80035ca:	f001 f815 	bl	80045f8 <xTimerCreateTimerTask>
 80035ce:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d124      	bne.n	8003620 <vTaskStartScheduler+0x78>
        __asm volatile
 80035d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035da:	f383 8811 	msr	BASEPRI, r3
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	f3bf 8f4f 	dsb	sy
 80035e6:	60bb      	str	r3, [r7, #8]
    }
 80035e8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80035ea:	4b1b      	ldr	r3, [pc, #108]	; (8003658 <vTaskStartScheduler+0xb0>)
 80035ec:	f04f 32ff 	mov.w	r2, #4294967295
 80035f0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80035f2:	4b1a      	ldr	r3, [pc, #104]	; (800365c <vTaskStartScheduler+0xb4>)
 80035f4:	2201      	movs	r2, #1
 80035f6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80035f8:	4b19      	ldr	r3, [pc, #100]	; (8003660 <vTaskStartScheduler+0xb8>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80035fe:	4b19      	ldr	r3, [pc, #100]	; (8003664 <vTaskStartScheduler+0xbc>)
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	4b12      	ldr	r3, [pc, #72]	; (800364c <vTaskStartScheduler+0xa4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d102      	bne.n	8003610 <vTaskStartScheduler+0x68>
 800360a:	f003 faef 	bl	8006bec <SEGGER_SYSVIEW_OnIdle>
 800360e:	e004      	b.n	800361a <vTaskStartScheduler+0x72>
 8003610:	4b14      	ldr	r3, [pc, #80]	; (8003664 <vTaskStartScheduler+0xbc>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f003 fb47 	bl	8006ca8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800361a:	f001 fafb 	bl	8004c14 <xPortStartScheduler>
 800361e:	e00e      	b.n	800363e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003626:	d10a      	bne.n	800363e <vTaskStartScheduler+0x96>
        __asm volatile
 8003628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362c:	f383 8811 	msr	BASEPRI, r3
 8003630:	f3bf 8f6f 	isb	sy
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	607b      	str	r3, [r7, #4]
    }
 800363a:	bf00      	nop
 800363c:	e7fe      	b.n	800363c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800363e:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <vTaskStartScheduler+0xc0>)
 8003640:	681b      	ldr	r3, [r3, #0]
}
 8003642:	bf00      	nop
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	200002a8 	.word	0x200002a8
 8003650:	08007a54 	.word	0x08007a54
 8003654:	08003f6d 	.word	0x08003f6d
 8003658:	200002a4 	.word	0x200002a4
 800365c:	20000290 	.word	0x20000290
 8003660:	20000288 	.word	0x20000288
 8003664:	200001ac 	.word	0x200001ac
 8003668:	2000000c 	.word	0x2000000c

0800366c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003670:	4b04      	ldr	r3, [pc, #16]	; (8003684 <vTaskSuspendAll+0x18>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	3301      	adds	r3, #1
 8003676:	4a03      	ldr	r2, [pc, #12]	; (8003684 <vTaskSuspendAll+0x18>)
 8003678:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800367a:	bf00      	nop
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	200002ac 	.word	0x200002ac

08003688 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b088      	sub	sp, #32
 800368c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800368e:	2300      	movs	r3, #0
 8003690:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003692:	2300      	movs	r3, #0
 8003694:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003696:	4b73      	ldr	r3, [pc, #460]	; (8003864 <xTaskResumeAll+0x1dc>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10a      	bne.n	80036b4 <xTaskResumeAll+0x2c>
        __asm volatile
 800369e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a2:	f383 8811 	msr	BASEPRI, r3
 80036a6:	f3bf 8f6f 	isb	sy
 80036aa:	f3bf 8f4f 	dsb	sy
 80036ae:	607b      	str	r3, [r7, #4]
    }
 80036b0:	bf00      	nop
 80036b2:	e7fe      	b.n	80036b2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80036b4:	f001 fb50 	bl	8004d58 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80036b8:	4b6a      	ldr	r3, [pc, #424]	; (8003864 <xTaskResumeAll+0x1dc>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	3b01      	subs	r3, #1
 80036be:	4a69      	ldr	r2, [pc, #420]	; (8003864 <xTaskResumeAll+0x1dc>)
 80036c0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036c2:	4b68      	ldr	r3, [pc, #416]	; (8003864 <xTaskResumeAll+0x1dc>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f040 80c4 	bne.w	8003854 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80036cc:	4b66      	ldr	r3, [pc, #408]	; (8003868 <xTaskResumeAll+0x1e0>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 80bf 	beq.w	8003854 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036d6:	e08e      	b.n	80037f6 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036d8:	4b64      	ldr	r3, [pc, #400]	; (800386c <xTaskResumeAll+0x1e4>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	613b      	str	r3, [r7, #16]
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	69fa      	ldr	r2, [r7, #28]
 80036ec:	6a12      	ldr	r2, [r2, #32]
 80036ee:	609a      	str	r2, [r3, #8]
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	69fa      	ldr	r2, [r7, #28]
 80036f6:	69d2      	ldr	r2, [r2, #28]
 80036f8:	605a      	str	r2, [r3, #4]
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	3318      	adds	r3, #24
 8003702:	429a      	cmp	r2, r3
 8003704:	d103      	bne.n	800370e <xTaskResumeAll+0x86>
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	6a1a      	ldr	r2, [r3, #32]
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	605a      	str	r2, [r3, #4]
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	2200      	movs	r2, #0
 8003712:	629a      	str	r2, [r3, #40]	; 0x28
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	1e5a      	subs	r2, r3, #1
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	68d2      	ldr	r2, [r2, #12]
 800372c:	609a      	str	r2, [r3, #8]
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	69fa      	ldr	r2, [r7, #28]
 8003734:	6892      	ldr	r2, [r2, #8]
 8003736:	605a      	str	r2, [r3, #4]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	3304      	adds	r3, #4
 8003740:	429a      	cmp	r2, r3
 8003742:	d103      	bne.n	800374c <xTaskResumeAll+0xc4>
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	605a      	str	r2, [r3, #4]
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	2200      	movs	r2, #0
 8003750:	615a      	str	r2, [r3, #20]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	1e5a      	subs	r2, r3, #1
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	4618      	mov	r0, r3
 8003760:	f003 fae4 	bl	8006d2c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	2201      	movs	r2, #1
 800376a:	409a      	lsls	r2, r3
 800376c:	4b40      	ldr	r3, [pc, #256]	; (8003870 <xTaskResumeAll+0x1e8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4313      	orrs	r3, r2
 8003772:	4a3f      	ldr	r2, [pc, #252]	; (8003870 <xTaskResumeAll+0x1e8>)
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377a:	493e      	ldr	r1, [pc, #248]	; (8003874 <xTaskResumeAll+0x1ec>)
 800377c:	4613      	mov	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	3304      	adds	r3, #4
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	60bb      	str	r3, [r7, #8]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	609a      	str	r2, [r3, #8]
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	60da      	str	r2, [r3, #12]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	69fa      	ldr	r2, [r7, #28]
 80037a0:	3204      	adds	r2, #4
 80037a2:	605a      	str	r2, [r3, #4]
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	1d1a      	adds	r2, r3, #4
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	609a      	str	r2, [r3, #8]
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4a2e      	ldr	r2, [pc, #184]	; (8003874 <xTaskResumeAll+0x1ec>)
 80037ba:	441a      	add	r2, r3
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	615a      	str	r2, [r3, #20]
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c4:	492b      	ldr	r1, [pc, #172]	; (8003874 <xTaskResumeAll+0x1ec>)
 80037c6:	4613      	mov	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	440b      	add	r3, r1
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	1c59      	adds	r1, r3, #1
 80037d4:	4827      	ldr	r0, [pc, #156]	; (8003874 <xTaskResumeAll+0x1ec>)
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4403      	add	r3, r0
 80037e0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e6:	4b24      	ldr	r3, [pc, #144]	; (8003878 <xTaskResumeAll+0x1f0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d302      	bcc.n	80037f6 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80037f0:	4b22      	ldr	r3, [pc, #136]	; (800387c <xTaskResumeAll+0x1f4>)
 80037f2:	2201      	movs	r2, #1
 80037f4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037f6:	4b1d      	ldr	r3, [pc, #116]	; (800386c <xTaskResumeAll+0x1e4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f47f af6c 	bne.w	80036d8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003806:	f000 fc47 	bl	8004098 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800380a:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <xTaskResumeAll+0x1f8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d010      	beq.n	8003838 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003816:	f000 f859 	bl	80038cc <xTaskIncrementTick>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8003820:	4b16      	ldr	r3, [pc, #88]	; (800387c <xTaskResumeAll+0x1f4>)
 8003822:	2201      	movs	r2, #1
 8003824:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	3b01      	subs	r3, #1
 800382a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f1      	bne.n	8003816 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8003832:	4b13      	ldr	r3, [pc, #76]	; (8003880 <xTaskResumeAll+0x1f8>)
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003838:	4b10      	ldr	r3, [pc, #64]	; (800387c <xTaskResumeAll+0x1f4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d009      	beq.n	8003854 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003840:	2301      	movs	r3, #1
 8003842:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003844:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <xTaskResumeAll+0x1fc>)
 8003846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003854:	f001 fab0 	bl	8004db8 <vPortExitCritical>

    return xAlreadyYielded;
 8003858:	69bb      	ldr	r3, [r7, #24]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3720      	adds	r7, #32
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	200002ac 	.word	0x200002ac
 8003868:	20000284 	.word	0x20000284
 800386c:	20000244 	.word	0x20000244
 8003870:	2000028c 	.word	0x2000028c
 8003874:	200001b0 	.word	0x200001b0
 8003878:	200001ac 	.word	0x200001ac
 800387c:	20000298 	.word	0x20000298
 8003880:	20000294 	.word	0x20000294
 8003884:	e000ed04 	.word	0xe000ed04

08003888 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800388e:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <xTaskGetTickCount+0x1c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003894:	687b      	ldr	r3, [r7, #4]
}
 8003896:	4618      	mov	r0, r3
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	20000288 	.word	0x20000288

080038a8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038ae:	f001 fb7b 	bl	8004fa8 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80038b2:	2300      	movs	r3, #0
 80038b4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80038b6:	4b04      	ldr	r3, [pc, #16]	; (80038c8 <xTaskGetTickCountFromISR+0x20>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80038bc:	683b      	ldr	r3, [r7, #0]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20000288 	.word	0x20000288

080038cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08a      	sub	sp, #40	; 0x28
 80038d0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80038d2:	2300      	movs	r3, #0
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038d6:	4b7f      	ldr	r3, [pc, #508]	; (8003ad4 <xTaskIncrementTick+0x208>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f040 80f0 	bne.w	8003ac0 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80038e0:	4b7d      	ldr	r3, [pc, #500]	; (8003ad8 <xTaskIncrementTick+0x20c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3301      	adds	r3, #1
 80038e6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80038e8:	4a7b      	ldr	r2, [pc, #492]	; (8003ad8 <xTaskIncrementTick+0x20c>)
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d120      	bne.n	8003936 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80038f4:	4b79      	ldr	r3, [pc, #484]	; (8003adc <xTaskIncrementTick+0x210>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <xTaskIncrementTick+0x48>
        __asm volatile
 80038fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003902:	f383 8811 	msr	BASEPRI, r3
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	607b      	str	r3, [r7, #4]
    }
 8003910:	bf00      	nop
 8003912:	e7fe      	b.n	8003912 <xTaskIncrementTick+0x46>
 8003914:	4b71      	ldr	r3, [pc, #452]	; (8003adc <xTaskIncrementTick+0x210>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	61fb      	str	r3, [r7, #28]
 800391a:	4b71      	ldr	r3, [pc, #452]	; (8003ae0 <xTaskIncrementTick+0x214>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a6f      	ldr	r2, [pc, #444]	; (8003adc <xTaskIncrementTick+0x210>)
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	4a6f      	ldr	r2, [pc, #444]	; (8003ae0 <xTaskIncrementTick+0x214>)
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	6013      	str	r3, [r2, #0]
 8003928:	4b6e      	ldr	r3, [pc, #440]	; (8003ae4 <xTaskIncrementTick+0x218>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3301      	adds	r3, #1
 800392e:	4a6d      	ldr	r2, [pc, #436]	; (8003ae4 <xTaskIncrementTick+0x218>)
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	f000 fbb1 	bl	8004098 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003936:	4b6c      	ldr	r3, [pc, #432]	; (8003ae8 <xTaskIncrementTick+0x21c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6a3a      	ldr	r2, [r7, #32]
 800393c:	429a      	cmp	r2, r3
 800393e:	f0c0 80aa 	bcc.w	8003a96 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003942:	4b66      	ldr	r3, [pc, #408]	; (8003adc <xTaskIncrementTick+0x210>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d104      	bne.n	8003956 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800394c:	4b66      	ldr	r3, [pc, #408]	; (8003ae8 <xTaskIncrementTick+0x21c>)
 800394e:	f04f 32ff 	mov.w	r2, #4294967295
 8003952:	601a      	str	r2, [r3, #0]
                    break;
 8003954:	e09f      	b.n	8003a96 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003956:	4b61      	ldr	r3, [pc, #388]	; (8003adc <xTaskIncrementTick+0x210>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003966:	6a3a      	ldr	r2, [r7, #32]
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	429a      	cmp	r2, r3
 800396c:	d203      	bcs.n	8003976 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800396e:	4a5e      	ldr	r2, [pc, #376]	; (8003ae8 <xTaskIncrementTick+0x21c>)
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003974:	e08f      	b.n	8003a96 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	613b      	str	r3, [r7, #16]
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	68d2      	ldr	r2, [r2, #12]
 8003984:	609a      	str	r2, [r3, #8]
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	6892      	ldr	r2, [r2, #8]
 800398e:	605a      	str	r2, [r3, #4]
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	3304      	adds	r3, #4
 8003998:	429a      	cmp	r2, r3
 800399a:	d103      	bne.n	80039a4 <xTaskIncrementTick+0xd8>
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	605a      	str	r2, [r3, #4]
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	2200      	movs	r2, #0
 80039a8:	615a      	str	r2, [r3, #20]
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	1e5a      	subs	r2, r3, #1
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d01e      	beq.n	80039fa <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	6a12      	ldr	r2, [r2, #32]
 80039ca:	609a      	str	r2, [r3, #8]
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	69d2      	ldr	r2, [r2, #28]
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	3318      	adds	r3, #24
 80039de:	429a      	cmp	r2, r3
 80039e0:	d103      	bne.n	80039ea <xTaskIncrementTick+0x11e>
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	6a1a      	ldr	r2, [r3, #32]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	605a      	str	r2, [r3, #4]
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	2200      	movs	r2, #0
 80039ee:	629a      	str	r2, [r3, #40]	; 0x28
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	1e5a      	subs	r2, r3, #1
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f003 f995 	bl	8006d2c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a06:	2201      	movs	r2, #1
 8003a08:	409a      	lsls	r2, r3
 8003a0a:	4b38      	ldr	r3, [pc, #224]	; (8003aec <xTaskIncrementTick+0x220>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	4a36      	ldr	r2, [pc, #216]	; (8003aec <xTaskIncrementTick+0x220>)
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a18:	4935      	ldr	r1, [pc, #212]	; (8003af0 <xTaskIncrementTick+0x224>)
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	440b      	add	r3, r1
 8003a24:	3304      	adds	r3, #4
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	609a      	str	r2, [r3, #8]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	60da      	str	r2, [r3, #12]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	3204      	adds	r2, #4
 8003a40:	605a      	str	r2, [r3, #4]
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	1d1a      	adds	r2, r3, #4
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	609a      	str	r2, [r3, #8]
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4e:	4613      	mov	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4a26      	ldr	r2, [pc, #152]	; (8003af0 <xTaskIncrementTick+0x224>)
 8003a58:	441a      	add	r2, r3
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	615a      	str	r2, [r3, #20]
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a62:	4923      	ldr	r1, [pc, #140]	; (8003af0 <xTaskIncrementTick+0x224>)
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	1c59      	adds	r1, r3, #1
 8003a72:	481f      	ldr	r0, [pc, #124]	; (8003af0 <xTaskIncrementTick+0x224>)
 8003a74:	4613      	mov	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4403      	add	r3, r0
 8003a7e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a84:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <xTaskIncrementTick+0x228>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	f67f af59 	bls.w	8003942 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8003a90:	2301      	movs	r3, #1
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a94:	e755      	b.n	8003942 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a96:	4b17      	ldr	r3, [pc, #92]	; (8003af4 <xTaskIncrementTick+0x228>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9c:	4914      	ldr	r1, [pc, #80]	; (8003af0 <xTaskIncrementTick+0x224>)
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	440b      	add	r3, r1
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d901      	bls.n	8003ab2 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003ab2:	4b11      	ldr	r3, [pc, #68]	; (8003af8 <xTaskIncrementTick+0x22c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d007      	beq.n	8003aca <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8003aba:	2301      	movs	r3, #1
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
 8003abe:	e004      	b.n	8003aca <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003ac0:	4b0e      	ldr	r3, [pc, #56]	; (8003afc <xTaskIncrementTick+0x230>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	4a0d      	ldr	r2, [pc, #52]	; (8003afc <xTaskIncrementTick+0x230>)
 8003ac8:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3728      	adds	r7, #40	; 0x28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	200002ac 	.word	0x200002ac
 8003ad8:	20000288 	.word	0x20000288
 8003adc:	2000023c 	.word	0x2000023c
 8003ae0:	20000240 	.word	0x20000240
 8003ae4:	2000029c 	.word	0x2000029c
 8003ae8:	200002a4 	.word	0x200002a4
 8003aec:	2000028c 	.word	0x2000028c
 8003af0:	200001b0 	.word	0x200001b0
 8003af4:	200001ac 	.word	0x200001ac
 8003af8:	20000298 	.word	0x20000298
 8003afc:	20000294 	.word	0x20000294

08003b00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b06:	4b2d      	ldr	r3, [pc, #180]	; (8003bbc <vTaskSwitchContext+0xbc>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003b0e:	4b2c      	ldr	r3, [pc, #176]	; (8003bc0 <vTaskSwitchContext+0xc0>)
 8003b10:	2201      	movs	r2, #1
 8003b12:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003b14:	e04d      	b.n	8003bb2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003b16:	4b2a      	ldr	r3, [pc, #168]	; (8003bc0 <vTaskSwitchContext+0xc0>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b1c:	4b29      	ldr	r3, [pc, #164]	; (8003bc4 <vTaskSwitchContext+0xc4>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	fab3 f383 	clz	r3, r3
 8003b28:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003b2a:	7afb      	ldrb	r3, [r7, #11]
 8003b2c:	f1c3 031f 	rsb	r3, r3, #31
 8003b30:	617b      	str	r3, [r7, #20]
 8003b32:	4925      	ldr	r1, [pc, #148]	; (8003bc8 <vTaskSwitchContext+0xc8>)
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	4613      	mov	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10a      	bne.n	8003b5c <vTaskSwitchContext+0x5c>
        __asm volatile
 8003b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4a:	f383 8811 	msr	BASEPRI, r3
 8003b4e:	f3bf 8f6f 	isb	sy
 8003b52:	f3bf 8f4f 	dsb	sy
 8003b56:	607b      	str	r3, [r7, #4]
    }
 8003b58:	bf00      	nop
 8003b5a:	e7fe      	b.n	8003b5a <vTaskSwitchContext+0x5a>
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4a18      	ldr	r2, [pc, #96]	; (8003bc8 <vTaskSwitchContext+0xc8>)
 8003b68:	4413      	add	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	605a      	str	r2, [r3, #4]
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	3308      	adds	r3, #8
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d104      	bne.n	8003b8c <vTaskSwitchContext+0x8c>
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	605a      	str	r2, [r3, #4]
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	4a0e      	ldr	r2, [pc, #56]	; (8003bcc <vTaskSwitchContext+0xcc>)
 8003b94:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003b96:	4b0d      	ldr	r3, [pc, #52]	; (8003bcc <vTaskSwitchContext+0xcc>)
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	4b0d      	ldr	r3, [pc, #52]	; (8003bd0 <vTaskSwitchContext+0xd0>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d102      	bne.n	8003ba8 <vTaskSwitchContext+0xa8>
 8003ba2:	f003 f823 	bl	8006bec <SEGGER_SYSVIEW_OnIdle>
}
 8003ba6:	e004      	b.n	8003bb2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003ba8:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <vTaskSwitchContext+0xcc>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f003 f87b 	bl	8006ca8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003bb2:	bf00      	nop
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	200002ac 	.word	0x200002ac
 8003bc0:	20000298 	.word	0x20000298
 8003bc4:	2000028c 	.word	0x2000028c
 8003bc8:	200001b0 	.word	0x200001b0
 8003bcc:	200001ac 	.word	0x200001ac
 8003bd0:	200002a8 	.word	0x200002a8

08003bd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10a      	bne.n	8003bfa <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	60fb      	str	r3, [r7, #12]
    }
 8003bf6:	bf00      	nop
 8003bf8:	e7fe      	b.n	8003bf8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bfa:	4b07      	ldr	r3, [pc, #28]	; (8003c18 <vTaskPlaceOnEventList+0x44>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	3318      	adds	r3, #24
 8003c00:	4619      	mov	r1, r3
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fe ff07 	bl	8002a16 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c08:	2101      	movs	r1, #1
 8003c0a:	6838      	ldr	r0, [r7, #0]
 8003c0c:	f000 fc74 	bl	80044f8 <prvAddCurrentTaskToDelayedList>
}
 8003c10:	bf00      	nop
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	200001ac 	.word	0x200001ac

08003c1c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10a      	bne.n	8003c44 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c32:	f383 8811 	msr	BASEPRI, r3
 8003c36:	f3bf 8f6f 	isb	sy
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	613b      	str	r3, [r7, #16]
    }
 8003c40:	bf00      	nop
 8003c42:	e7fe      	b.n	8003c42 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	4b17      	ldr	r3, [pc, #92]	; (8003ca8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	61da      	str	r2, [r3, #28]
 8003c52:	4b15      	ldr	r3, [pc, #84]	; (8003ca8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	6892      	ldr	r2, [r2, #8]
 8003c5a:	621a      	str	r2, [r3, #32]
 8003c5c:	4b12      	ldr	r3, [pc, #72]	; (8003ca8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	3218      	adds	r2, #24
 8003c66:	605a      	str	r2, [r3, #4]
 8003c68:	4b0f      	ldr	r3, [pc, #60]	; (8003ca8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f103 0218 	add.w	r2, r3, #24
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	609a      	str	r2, [r3, #8]
 8003c74:	4b0c      	ldr	r3, [pc, #48]	; (8003ca8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c90:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003c92:	2024      	movs	r0, #36	; 0x24
 8003c94:	f002 fa1a 	bl	80060cc <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	68b8      	ldr	r0, [r7, #8]
 8003c9c:	f000 fc2c 	bl	80044f8 <prvAddCurrentTaskToDelayedList>
    }
 8003ca0:	bf00      	nop
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	200001ac 	.word	0x200001ac

08003cac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08a      	sub	sp, #40	; 0x28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10a      	bne.n	8003cd8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	60fb      	str	r3, [r7, #12]
    }
 8003cd4:	bf00      	nop
 8003cd6:	e7fe      	b.n	8003cd6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cdc:	61fb      	str	r3, [r7, #28]
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	6a3a      	ldr	r2, [r7, #32]
 8003ce4:	6a12      	ldr	r2, [r2, #32]
 8003ce6:	609a      	str	r2, [r3, #8]
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	6a3a      	ldr	r2, [r7, #32]
 8003cee:	69d2      	ldr	r2, [r2, #28]
 8003cf0:	605a      	str	r2, [r3, #4]
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	3318      	adds	r3, #24
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d103      	bne.n	8003d06 <xTaskRemoveFromEventList+0x5a>
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	6a1a      	ldr	r2, [r3, #32]
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	605a      	str	r2, [r3, #4]
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	629a      	str	r2, [r3, #40]	; 0x28
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	1e5a      	subs	r2, r3, #1
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d16:	4b4b      	ldr	r3, [pc, #300]	; (8003e44 <xTaskRemoveFromEventList+0x198>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d162      	bne.n	8003de4 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	6a3a      	ldr	r2, [r7, #32]
 8003d2a:	68d2      	ldr	r2, [r2, #12]
 8003d2c:	609a      	str	r2, [r3, #8]
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	6a3a      	ldr	r2, [r7, #32]
 8003d34:	6892      	ldr	r2, [r2, #8]
 8003d36:	605a      	str	r2, [r3, #4]
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d103      	bne.n	8003d4c <xTaskRemoveFromEventList+0xa0>
 8003d44:	6a3b      	ldr	r3, [r7, #32]
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	605a      	str	r2, [r3, #4]
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	615a      	str	r2, [r3, #20]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	1e5a      	subs	r2, r3, #1
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f002 ffe4 	bl	8006d2c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	2201      	movs	r2, #1
 8003d6a:	409a      	lsls	r2, r3
 8003d6c:	4b36      	ldr	r3, [pc, #216]	; (8003e48 <xTaskRemoveFromEventList+0x19c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	4a35      	ldr	r2, [pc, #212]	; (8003e48 <xTaskRemoveFromEventList+0x19c>)
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7a:	4934      	ldr	r1, [pc, #208]	; (8003e4c <xTaskRemoveFromEventList+0x1a0>)
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	3304      	adds	r3, #4
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	613b      	str	r3, [r7, #16]
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	609a      	str	r2, [r3, #8]
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	60da      	str	r2, [r3, #12]
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	6a3a      	ldr	r2, [r7, #32]
 8003da0:	3204      	adds	r2, #4
 8003da2:	605a      	str	r2, [r3, #4]
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	1d1a      	adds	r2, r3, #4
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	609a      	str	r2, [r3, #8]
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db0:	4613      	mov	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4a24      	ldr	r2, [pc, #144]	; (8003e4c <xTaskRemoveFromEventList+0x1a0>)
 8003dba:	441a      	add	r2, r3
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	615a      	str	r2, [r3, #20]
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc4:	4921      	ldr	r1, [pc, #132]	; (8003e4c <xTaskRemoveFromEventList+0x1a0>)
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	440b      	add	r3, r1
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	1c59      	adds	r1, r3, #1
 8003dd4:	481d      	ldr	r0, [pc, #116]	; (8003e4c <xTaskRemoveFromEventList+0x1a0>)
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4403      	add	r3, r0
 8003de0:	6019      	str	r1, [r3, #0]
 8003de2:	e01b      	b.n	8003e1c <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003de4:	4b1a      	ldr	r3, [pc, #104]	; (8003e50 <xTaskRemoveFromEventList+0x1a4>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	61bb      	str	r3, [r7, #24]
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	61da      	str	r2, [r3, #28]
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	621a      	str	r2, [r3, #32]
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	6a3a      	ldr	r2, [r7, #32]
 8003dfe:	3218      	adds	r2, #24
 8003e00:	605a      	str	r2, [r3, #4]
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	f103 0218 	add.w	r2, r3, #24
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	609a      	str	r2, [r3, #8]
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	4a10      	ldr	r2, [pc, #64]	; (8003e50 <xTaskRemoveFromEventList+0x1a4>)
 8003e10:	629a      	str	r2, [r3, #40]	; 0x28
 8003e12:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <xTaskRemoveFromEventList+0x1a4>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3301      	adds	r3, #1
 8003e18:	4a0d      	ldr	r2, [pc, #52]	; (8003e50 <xTaskRemoveFromEventList+0x1a4>)
 8003e1a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e20:	4b0c      	ldr	r3, [pc, #48]	; (8003e54 <xTaskRemoveFromEventList+0x1a8>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d905      	bls.n	8003e36 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003e2e:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <xTaskRemoveFromEventList+0x1ac>)
 8003e30:	2201      	movs	r2, #1
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	e001      	b.n	8003e3a <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8003e36:	2300      	movs	r3, #0
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3728      	adds	r7, #40	; 0x28
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	200002ac 	.word	0x200002ac
 8003e48:	2000028c 	.word	0x2000028c
 8003e4c:	200001b0 	.word	0x200001b0
 8003e50:	20000244 	.word	0x20000244
 8003e54:	200001ac 	.word	0x200001ac
 8003e58:	20000298 	.word	0x20000298

08003e5c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e64:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <vTaskInternalSetTimeOutState+0x24>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003e6c:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <vTaskInternalSetTimeOutState+0x28>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	605a      	str	r2, [r3, #4]
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	2000029c 	.word	0x2000029c
 8003e84:	20000288 	.word	0x20000288

08003e88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10a      	bne.n	8003eae <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	613b      	str	r3, [r7, #16]
    }
 8003eaa:	bf00      	nop
 8003eac:	e7fe      	b.n	8003eac <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10a      	bne.n	8003eca <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	60fb      	str	r3, [r7, #12]
    }
 8003ec6:	bf00      	nop
 8003ec8:	e7fe      	b.n	8003ec8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003eca:	f000 ff45 	bl	8004d58 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003ece:	4b1f      	ldr	r3, [pc, #124]	; (8003f4c <xTaskCheckForTimeOut+0xc4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee6:	d102      	bne.n	8003eee <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	61fb      	str	r3, [r7, #28]
 8003eec:	e026      	b.n	8003f3c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	4b17      	ldr	r3, [pc, #92]	; (8003f50 <xTaskCheckForTimeOut+0xc8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d00a      	beq.n	8003f10 <xTaskCheckForTimeOut+0x88>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d305      	bcc.n	8003f10 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003f04:	2301      	movs	r3, #1
 8003f06:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	e015      	b.n	8003f3c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d20b      	bcs.n	8003f32 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	1ad2      	subs	r2, r2, r3
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7ff ff98 	bl	8003e5c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	61fb      	str	r3, [r7, #28]
 8003f30:	e004      	b.n	8003f3c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003f3c:	f000 ff3c 	bl	8004db8 <vPortExitCritical>

    return xReturn;
 8003f40:	69fb      	ldr	r3, [r7, #28]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3720      	adds	r7, #32
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	20000288 	.word	0x20000288
 8003f50:	2000029c 	.word	0x2000029c

08003f54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003f58:	4b03      	ldr	r3, [pc, #12]	; (8003f68 <vTaskMissedYield+0x14>)
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]
}
 8003f5e:	bf00      	nop
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	20000298 	.word	0x20000298

08003f6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003f74:	f000 f852 	bl	800401c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f78:	4b06      	ldr	r3, [pc, #24]	; (8003f94 <prvIdleTask+0x28>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d9f9      	bls.n	8003f74 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <prvIdleTask+0x2c>)
 8003f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003f90:	e7f0      	b.n	8003f74 <prvIdleTask+0x8>
 8003f92:	bf00      	nop
 8003f94:	200001b0 	.word	0x200001b0
 8003f98:	e000ed04 	.word	0xe000ed04

08003f9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	607b      	str	r3, [r7, #4]
 8003fa6:	e00c      	b.n	8003fc2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	4613      	mov	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4a12      	ldr	r2, [pc, #72]	; (8003ffc <prvInitialiseTaskLists+0x60>)
 8003fb4:	4413      	add	r3, r2
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fe fcdc 	bl	8002974 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	607b      	str	r3, [r7, #4]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d9ef      	bls.n	8003fa8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003fc8:	480d      	ldr	r0, [pc, #52]	; (8004000 <prvInitialiseTaskLists+0x64>)
 8003fca:	f7fe fcd3 	bl	8002974 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003fce:	480d      	ldr	r0, [pc, #52]	; (8004004 <prvInitialiseTaskLists+0x68>)
 8003fd0:	f7fe fcd0 	bl	8002974 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003fd4:	480c      	ldr	r0, [pc, #48]	; (8004008 <prvInitialiseTaskLists+0x6c>)
 8003fd6:	f7fe fccd 	bl	8002974 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003fda:	480c      	ldr	r0, [pc, #48]	; (800400c <prvInitialiseTaskLists+0x70>)
 8003fdc:	f7fe fcca 	bl	8002974 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003fe0:	480b      	ldr	r0, [pc, #44]	; (8004010 <prvInitialiseTaskLists+0x74>)
 8003fe2:	f7fe fcc7 	bl	8002974 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003fe6:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <prvInitialiseTaskLists+0x78>)
 8003fe8:	4a05      	ldr	r2, [pc, #20]	; (8004000 <prvInitialiseTaskLists+0x64>)
 8003fea:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fec:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <prvInitialiseTaskLists+0x7c>)
 8003fee:	4a05      	ldr	r2, [pc, #20]	; (8004004 <prvInitialiseTaskLists+0x68>)
 8003ff0:	601a      	str	r2, [r3, #0]
}
 8003ff2:	bf00      	nop
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	200001b0 	.word	0x200001b0
 8004000:	20000214 	.word	0x20000214
 8004004:	20000228 	.word	0x20000228
 8004008:	20000244 	.word	0x20000244
 800400c:	20000258 	.word	0x20000258
 8004010:	20000270 	.word	0x20000270
 8004014:	2000023c 	.word	0x2000023c
 8004018:	20000240 	.word	0x20000240

0800401c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004022:	e019      	b.n	8004058 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8004024:	f000 fe98 	bl	8004d58 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004028:	4b10      	ldr	r3, [pc, #64]	; (800406c <prvCheckTasksWaitingTermination+0x50>)
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3304      	adds	r3, #4
 8004034:	4618      	mov	r0, r3
 8004036:	f7fe fd27 	bl	8002a88 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800403a:	4b0d      	ldr	r3, [pc, #52]	; (8004070 <prvCheckTasksWaitingTermination+0x54>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3b01      	subs	r3, #1
 8004040:	4a0b      	ldr	r2, [pc, #44]	; (8004070 <prvCheckTasksWaitingTermination+0x54>)
 8004042:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8004044:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <prvCheckTasksWaitingTermination+0x58>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3b01      	subs	r3, #1
 800404a:	4a0a      	ldr	r2, [pc, #40]	; (8004074 <prvCheckTasksWaitingTermination+0x58>)
 800404c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800404e:	f000 feb3 	bl	8004db8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f810 	bl	8004078 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004058:	4b06      	ldr	r3, [pc, #24]	; (8004074 <prvCheckTasksWaitingTermination+0x58>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1e1      	bne.n	8004024 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004060:	bf00      	nop
 8004062:	bf00      	nop
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20000258 	.word	0x20000258
 8004070:	20000284 	.word	0x20000284
 8004074:	2000026c 	.word	0x2000026c

08004078 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004084:	4618      	mov	r0, r3
 8004086:	f001 f889 	bl	800519c <vPortFree>
            vPortFree( pxTCB );
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f001 f886 	bl	800519c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004090:	bf00      	nop
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800409c:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <prvResetNextTaskUnblockTime+0x30>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d104      	bne.n	80040b0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80040a6:	4b09      	ldr	r3, [pc, #36]	; (80040cc <prvResetNextTaskUnblockTime+0x34>)
 80040a8:	f04f 32ff 	mov.w	r2, #4294967295
 80040ac:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80040ae:	e005      	b.n	80040bc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80040b0:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <prvResetNextTaskUnblockTime+0x30>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a04      	ldr	r2, [pc, #16]	; (80040cc <prvResetNextTaskUnblockTime+0x34>)
 80040ba:	6013      	str	r3, [r2, #0]
}
 80040bc:	bf00      	nop
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	2000023c 	.word	0x2000023c
 80040cc:	200002a4 	.word	0x200002a4

080040d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80040d6:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <xTaskGetSchedulerState+0x34>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d102      	bne.n	80040e4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80040de:	2301      	movs	r3, #1
 80040e0:	607b      	str	r3, [r7, #4]
 80040e2:	e008      	b.n	80040f6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040e4:	4b08      	ldr	r3, [pc, #32]	; (8004108 <xTaskGetSchedulerState+0x38>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d102      	bne.n	80040f2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80040ec:	2302      	movs	r3, #2
 80040ee:	607b      	str	r3, [r7, #4]
 80040f0:	e001      	b.n	80040f6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80040f2:	2300      	movs	r3, #0
 80040f4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80040f6:	687b      	ldr	r3, [r7, #4]
    }
 80040f8:	4618      	mov	r0, r3
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	20000290 	.word	0x20000290
 8004108:	200002ac 	.word	0x200002ac

0800410c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af02      	add	r7, sp, #8
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
 8004118:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8004120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	613b      	str	r3, [r7, #16]
    }
 8004132:	bf00      	nop
 8004134:	e7fe      	b.n	8004134 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8004136:	f000 fe0f 	bl	8004d58 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800413a:	4b36      	ldr	r3, [pc, #216]	; (8004214 <xTaskGenericNotifyWait+0x108>)
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4413      	add	r3, r2
 8004142:	3354      	adds	r3, #84	; 0x54
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d022      	beq.n	8004192 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800414c:	4b31      	ldr	r3, [pc, #196]	; (8004214 <xTaskGenericNotifyWait+0x108>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	3214      	adds	r2, #20
 8004154:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	43d2      	mvns	r2, r2
 800415c:	4011      	ands	r1, r2
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	3214      	adds	r2, #20
 8004162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8004166:	4b2b      	ldr	r3, [pc, #172]	; (8004214 <xTaskGenericNotifyWait+0x108>)
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4413      	add	r3, r2
 800416e:	3354      	adds	r3, #84	; 0x54
 8004170:	2201      	movs	r2, #1
 8004172:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00b      	beq.n	8004192 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800417a:	2101      	movs	r1, #1
 800417c:	6a38      	ldr	r0, [r7, #32]
 800417e:	f000 f9bb 	bl	80044f8 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8004182:	4b25      	ldr	r3, [pc, #148]	; (8004218 <xTaskGenericNotifyWait+0x10c>)
 8004184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	f3bf 8f4f 	dsb	sy
 800418e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004192:	f000 fe11 	bl	8004db8 <vPortExitCritical>

        taskENTER_CRITICAL();
 8004196:	f000 fddf 	bl	8004d58 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT();
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	4613      	mov	r3, r2
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	68b9      	ldr	r1, [r7, #8]
 80041a6:	2040      	movs	r0, #64	; 0x40
 80041a8:	f002 f8ba 	bl	8006320 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d007      	beq.n	80041c2 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80041b2:	4b18      	ldr	r3, [pc, #96]	; (8004214 <xTaskGenericNotifyWait+0x108>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	3214      	adds	r2, #20
 80041ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80041c2:	4b14      	ldr	r3, [pc, #80]	; (8004214 <xTaskGenericNotifyWait+0x108>)
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	4413      	add	r3, r2
 80041ca:	3354      	adds	r3, #84	; 0x54
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d002      	beq.n	80041da <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	e00e      	b.n	80041f8 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80041da:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <xTaskGenericNotifyWait+0x108>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	3214      	adds	r2, #20
 80041e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	43d2      	mvns	r2, r2
 80041ea:	4011      	ands	r1, r2
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	3214      	adds	r2, #20
 80041f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80041f4:	2301      	movs	r3, #1
 80041f6:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80041f8:	4b06      	ldr	r3, [pc, #24]	; (8004214 <xTaskGenericNotifyWait+0x108>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4413      	add	r3, r2
 8004200:	3354      	adds	r3, #84	; 0x54
 8004202:	2200      	movs	r2, #0
 8004204:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8004206:	f000 fdd7 	bl	8004db8 <vPortExitCritical>

        return xReturn;
 800420a:	697b      	ldr	r3, [r7, #20]
    }
 800420c:	4618      	mov	r0, r3
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	200001ac 	.word	0x200001ac
 8004218:	e000ed04 	.word	0xe000ed04

0800421c <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 800421c:	b580      	push	{r7, lr}
 800421e:	b094      	sub	sp, #80	; 0x50
 8004220:	af02      	add	r7, sp, #8
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
 8004228:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800422a:	2301      	movs	r3, #1
 800422c:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10a      	bne.n	800424a <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8004234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004246:	bf00      	nop
 8004248:	e7fe      	b.n	8004248 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004262:	bf00      	nop
 8004264:	e7fe      	b.n	8004264 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004266:	f000 fe9f 	bl	8004fa8 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	643b      	str	r3, [r7, #64]	; 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800426e:	f3ef 8211 	mrs	r2, BASEPRI
 8004272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	623a      	str	r2, [r7, #32]
 8004284:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004286:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004288:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 800428a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800428c:	2b00      	cmp	r3, #0
 800428e:	d006      	beq.n	800429e <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	3214      	adds	r2, #20
 8004296:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800429a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800429c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800429e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4413      	add	r3, r2
 80042a4:	3354      	adds	r3, #84	; 0x54
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80042ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	4413      	add	r3, r2
 80042b2:	3354      	adds	r3, #84	; 0x54
 80042b4:	2202      	movs	r2, #2
 80042b6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d83b      	bhi.n	8004336 <xTaskGenericNotifyFromISR+0x11a>
 80042be:	a201      	add	r2, pc, #4	; (adr r2, 80042c4 <xTaskGenericNotifyFromISR+0xa8>)
 80042c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c4:	08004355 	.word	0x08004355
 80042c8:	080042d9 	.word	0x080042d9
 80042cc:	080042f5 	.word	0x080042f5
 80042d0:	0800430d 	.word	0x0800430d
 80042d4:	0800431b 	.word	0x0800431b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80042d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	3214      	adds	r2, #20
 80042de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	ea42 0103 	orr.w	r1, r2, r3
 80042e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	3214      	adds	r2, #20
 80042ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80042f2:	e032      	b.n	800435a <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80042f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	3214      	adds	r2, #20
 80042fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042fe:	1c59      	adds	r1, r3, #1
 8004300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	3214      	adds	r2, #20
 8004306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800430a:	e026      	b.n	800435a <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800430c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	3214      	adds	r2, #20
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004318:	e01f      	b.n	800435a <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800431a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800431e:	2b02      	cmp	r3, #2
 8004320:	d006      	beq.n	8004330 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	3214      	adds	r2, #20
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800432e:	e014      	b.n	800435a <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8004330:	2300      	movs	r3, #0
 8004332:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8004334:	e011      	b.n	800435a <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004336:	4b69      	ldr	r3, [pc, #420]	; (80044dc <xTaskGenericNotifyFromISR+0x2c0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00c      	beq.n	8004358 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 800433e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004342:	f383 8811 	msr	BASEPRI, r3
 8004346:	f3bf 8f6f 	isb	sy
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	61bb      	str	r3, [r7, #24]
    }
 8004350:	bf00      	nop
 8004352:	e7fe      	b.n	8004352 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8004354:	bf00      	nop
 8004356:	e000      	b.n	800435a <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8004358:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR();
 800435a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800435c:	4618      	mov	r0, r3
 800435e:	f002 fd27 	bl	8006db0 <SEGGER_SYSVIEW_ShrinkId>
 8004362:	78f9      	ldrb	r1, [r7, #3]
 8004364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004366:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004368:	9201      	str	r2, [sp, #4]
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	460b      	mov	r3, r1
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	4601      	mov	r1, r0
 8004372:	203f      	movs	r0, #63	; 0x3f
 8004374:	f002 f866 	bl	8006444 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004378:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800437c:	2b01      	cmp	r3, #1
 800437e:	f040 80a2 	bne.w	80044c6 <xTaskGenericNotifyFromISR+0x2aa>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <xTaskGenericNotifyFromISR+0x184>
        __asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	617b      	str	r3, [r7, #20]
    }
 800439c:	bf00      	nop
 800439e:	e7fe      	b.n	800439e <xTaskGenericNotifyFromISR+0x182>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043a0:	4b4f      	ldr	r3, [pc, #316]	; (80044e0 <xTaskGenericNotifyFromISR+0x2c4>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d162      	bne.n	800446e <xTaskGenericNotifyFromISR+0x252>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80043a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	633b      	str	r3, [r7, #48]	; 0x30
 80043ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043b4:	68d2      	ldr	r2, [r2, #12]
 80043b6:	609a      	str	r2, [r3, #8]
 80043b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043be:	6892      	ldr	r2, [r2, #8]
 80043c0:	605a      	str	r2, [r3, #4]
 80043c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043c8:	3304      	adds	r3, #4
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d103      	bne.n	80043d6 <xTaskGenericNotifyFromISR+0x1ba>
 80043ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d4:	605a      	str	r2, [r3, #4]
 80043d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043d8:	2200      	movs	r2, #0
 80043da:	615a      	str	r2, [r3, #20]
 80043dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	1e5a      	subs	r2, r3, #1
 80043e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e4:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80043e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043e8:	4618      	mov	r0, r3
 80043ea:	f002 fc9f 	bl	8006d2c <SEGGER_SYSVIEW_OnTaskStartReady>
 80043ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f2:	2201      	movs	r2, #1
 80043f4:	409a      	lsls	r2, r3
 80043f6:	4b3b      	ldr	r3, [pc, #236]	; (80044e4 <xTaskGenericNotifyFromISR+0x2c8>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	4a39      	ldr	r2, [pc, #228]	; (80044e4 <xTaskGenericNotifyFromISR+0x2c8>)
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004404:	4938      	ldr	r1, [pc, #224]	; (80044e8 <xTaskGenericNotifyFromISR+0x2cc>)
 8004406:	4613      	mov	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	440b      	add	r3, r1
 8004410:	3304      	adds	r3, #4
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800441a:	609a      	str	r2, [r3, #8]
 800441c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004422:	60da      	str	r2, [r3, #12]
 8004424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800442a:	3204      	adds	r2, #4
 800442c:	605a      	str	r2, [r3, #4]
 800442e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004430:	1d1a      	adds	r2, r3, #4
 8004432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004434:	609a      	str	r2, [r3, #8]
 8004436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443a:	4613      	mov	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4413      	add	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4a29      	ldr	r2, [pc, #164]	; (80044e8 <xTaskGenericNotifyFromISR+0x2cc>)
 8004444:	441a      	add	r2, r3
 8004446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004448:	615a      	str	r2, [r3, #20]
 800444a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800444c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444e:	4926      	ldr	r1, [pc, #152]	; (80044e8 <xTaskGenericNotifyFromISR+0x2cc>)
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	1c59      	adds	r1, r3, #1
 800445e:	4822      	ldr	r0, [pc, #136]	; (80044e8 <xTaskGenericNotifyFromISR+0x2cc>)
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4403      	add	r3, r0
 800446a:	6019      	str	r1, [r3, #0]
 800446c:	e01b      	b.n	80044a6 <xTaskGenericNotifyFromISR+0x28a>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800446e:	4b1f      	ldr	r3, [pc, #124]	; (80044ec <xTaskGenericNotifyFromISR+0x2d0>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	637b      	str	r3, [r7, #52]	; 0x34
 8004474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004478:	61da      	str	r2, [r3, #28]
 800447a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800447c:	689a      	ldr	r2, [r3, #8]
 800447e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004480:	621a      	str	r2, [r3, #32]
 8004482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004488:	3218      	adds	r2, #24
 800448a:	605a      	str	r2, [r3, #4]
 800448c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800448e:	f103 0218 	add.w	r2, r3, #24
 8004492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004494:	609a      	str	r2, [r3, #8]
 8004496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004498:	4a14      	ldr	r2, [pc, #80]	; (80044ec <xTaskGenericNotifyFromISR+0x2d0>)
 800449a:	629a      	str	r2, [r3, #40]	; 0x28
 800449c:	4b13      	ldr	r3, [pc, #76]	; (80044ec <xTaskGenericNotifyFromISR+0x2d0>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3301      	adds	r3, #1
 80044a2:	4a12      	ldr	r2, [pc, #72]	; (80044ec <xTaskGenericNotifyFromISR+0x2d0>)
 80044a4:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044aa:	4b11      	ldr	r3, [pc, #68]	; (80044f0 <xTaskGenericNotifyFromISR+0x2d4>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d908      	bls.n	80044c6 <xTaskGenericNotifyFromISR+0x2aa>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80044b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <xTaskGenericNotifyFromISR+0x2a4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80044ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044bc:	2201      	movs	r2, #1
 80044be:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80044c0:	4b0c      	ldr	r3, [pc, #48]	; (80044f4 <xTaskGenericNotifyFromISR+0x2d8>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80044d0:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80044d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 80044d4:	4618      	mov	r0, r3
 80044d6:	3748      	adds	r7, #72	; 0x48
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	20000288 	.word	0x20000288
 80044e0:	200002ac 	.word	0x200002ac
 80044e4:	2000028c 	.word	0x2000028c
 80044e8:	200001b0 	.word	0x200001b0
 80044ec:	20000244 	.word	0x20000244
 80044f0:	200001ac 	.word	0x200001ac
 80044f4:	20000298 	.word	0x20000298

080044f8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004502:	4b36      	ldr	r3, [pc, #216]	; (80045dc <prvAddCurrentTaskToDelayedList+0xe4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004508:	4b35      	ldr	r3, [pc, #212]	; (80045e0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3304      	adds	r3, #4
 800450e:	4618      	mov	r0, r3
 8004510:	f7fe faba 	bl	8002a88 <uxListRemove>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10b      	bne.n	8004532 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800451a:	4b31      	ldr	r3, [pc, #196]	; (80045e0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	2201      	movs	r2, #1
 8004522:	fa02 f303 	lsl.w	r3, r2, r3
 8004526:	43da      	mvns	r2, r3
 8004528:	4b2e      	ldr	r3, [pc, #184]	; (80045e4 <prvAddCurrentTaskToDelayedList+0xec>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4013      	ands	r3, r2
 800452e:	4a2d      	ldr	r2, [pc, #180]	; (80045e4 <prvAddCurrentTaskToDelayedList+0xec>)
 8004530:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004538:	d124      	bne.n	8004584 <prvAddCurrentTaskToDelayedList+0x8c>
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d021      	beq.n	8004584 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004540:	4b29      	ldr	r3, [pc, #164]	; (80045e8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	613b      	str	r3, [r7, #16]
 8004546:	4b26      	ldr	r3, [pc, #152]	; (80045e0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	609a      	str	r2, [r3, #8]
 800454e:	4b24      	ldr	r3, [pc, #144]	; (80045e0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	6892      	ldr	r2, [r2, #8]
 8004556:	60da      	str	r2, [r3, #12]
 8004558:	4b21      	ldr	r3, [pc, #132]	; (80045e0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	3204      	adds	r2, #4
 8004562:	605a      	str	r2, [r3, #4]
 8004564:	4b1e      	ldr	r3, [pc, #120]	; (80045e0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	1d1a      	adds	r2, r3, #4
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	609a      	str	r2, [r3, #8]
 800456e:	4b1c      	ldr	r3, [pc, #112]	; (80045e0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a1d      	ldr	r2, [pc, #116]	; (80045e8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004574:	615a      	str	r2, [r3, #20]
 8004576:	4b1c      	ldr	r3, [pc, #112]	; (80045e8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3301      	adds	r3, #1
 800457c:	4a1a      	ldr	r2, [pc, #104]	; (80045e8 <prvAddCurrentTaskToDelayedList+0xf0>)
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004582:	e026      	b.n	80045d2 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4413      	add	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800458c:	4b14      	ldr	r3, [pc, #80]	; (80045e0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	429a      	cmp	r2, r3
 800459a:	d209      	bcs.n	80045b0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800459c:	4b13      	ldr	r3, [pc, #76]	; (80045ec <prvAddCurrentTaskToDelayedList+0xf4>)
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	4b0f      	ldr	r3, [pc, #60]	; (80045e0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3304      	adds	r3, #4
 80045a6:	4619      	mov	r1, r3
 80045a8:	4610      	mov	r0, r2
 80045aa:	f7fe fa34 	bl	8002a16 <vListInsert>
}
 80045ae:	e010      	b.n	80045d2 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045b0:	4b0f      	ldr	r3, [pc, #60]	; (80045f0 <prvAddCurrentTaskToDelayedList+0xf8>)
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	4b0a      	ldr	r3, [pc, #40]	; (80045e0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3304      	adds	r3, #4
 80045ba:	4619      	mov	r1, r3
 80045bc:	4610      	mov	r0, r2
 80045be:	f7fe fa2a 	bl	8002a16 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80045c2:	4b0c      	ldr	r3, [pc, #48]	; (80045f4 <prvAddCurrentTaskToDelayedList+0xfc>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d202      	bcs.n	80045d2 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80045cc:	4a09      	ldr	r2, [pc, #36]	; (80045f4 <prvAddCurrentTaskToDelayedList+0xfc>)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6013      	str	r3, [r2, #0]
}
 80045d2:	bf00      	nop
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20000288 	.word	0x20000288
 80045e0:	200001ac 	.word	0x200001ac
 80045e4:	2000028c 	.word	0x2000028c
 80045e8:	20000270 	.word	0x20000270
 80045ec:	20000240 	.word	0x20000240
 80045f0:	2000023c 	.word	0x2000023c
 80045f4:	200002a4 	.word	0x200002a4

080045f8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80045fe:	2300      	movs	r3, #0
 8004600:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004602:	f000 fa47 	bl	8004a94 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004606:	4b11      	ldr	r3, [pc, #68]	; (800464c <xTimerCreateTimerTask+0x54>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00b      	beq.n	8004626 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800460e:	4b10      	ldr	r3, [pc, #64]	; (8004650 <xTimerCreateTimerTask+0x58>)
 8004610:	9301      	str	r3, [sp, #4]
 8004612:	2302      	movs	r3, #2
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	2300      	movs	r3, #0
 8004618:	f44f 7282 	mov.w	r2, #260	; 0x104
 800461c:	490d      	ldr	r1, [pc, #52]	; (8004654 <xTimerCreateTimerTask+0x5c>)
 800461e:	480e      	ldr	r0, [pc, #56]	; (8004658 <xTimerCreateTimerTask+0x60>)
 8004620:	f7fe fd8c 	bl	800313c <xTaskCreate>
 8004624:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10a      	bne.n	8004642 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800462c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004630:	f383 8811 	msr	BASEPRI, r3
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	603b      	str	r3, [r7, #0]
    }
 800463e:	bf00      	nop
 8004640:	e7fe      	b.n	8004640 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004642:	687b      	ldr	r3, [r7, #4]
    }
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	200002e0 	.word	0x200002e0
 8004650:	200002e4 	.word	0x200002e4
 8004654:	08007a5c 	.word	0x08007a5c
 8004658:	08004701 	.word	0x08004701

0800465c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004668:	e008      	b.n	800467c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	4413      	add	r3, r2
 8004672:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	699a      	ldr	r2, [r3, #24]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	18d1      	adds	r1, r2, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 f8dd 	bl	8004848 <prvInsertTimerInActiveList>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1ea      	bne.n	800466a <prvReloadTimer+0xe>
        }
    }
 8004694:	bf00      	nop
 8004696:	bf00      	nop
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
	...

080046a0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046aa:	4b14      	ldr	r3, [pc, #80]	; (80046fc <prvProcessExpiredTimer+0x5c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	3304      	adds	r3, #4
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fe f9e5 	bl	8002a88 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d005      	beq.n	80046d8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f7ff ffc3 	bl	800465c <prvReloadTimer>
 80046d6:	e008      	b.n	80046ea <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046de:	f023 0301 	bic.w	r3, r3, #1
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	4798      	blx	r3
    }
 80046f2:	bf00      	nop
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	200002d8 	.word	0x200002d8

08004700 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004708:	f107 0308 	add.w	r3, r7, #8
 800470c:	4618      	mov	r0, r3
 800470e:	f000 f857 	bl	80047c0 <prvGetNextExpireTime>
 8004712:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	4619      	mov	r1, r3
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 f803 	bl	8004724 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800471e:	f000 f8d5 	bl	80048cc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004722:	e7f1      	b.n	8004708 <prvTimerTask+0x8>

08004724 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800472e:	f7fe ff9d 	bl	800366c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004732:	f107 0308 	add.w	r3, r7, #8
 8004736:	4618      	mov	r0, r3
 8004738:	f000 f866 	bl	8004808 <prvSampleTimeNow>
 800473c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d130      	bne.n	80047a6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10a      	bne.n	8004760 <prvProcessTimerOrBlockTask+0x3c>
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	429a      	cmp	r2, r3
 8004750:	d806      	bhi.n	8004760 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004752:	f7fe ff99 	bl	8003688 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004756:	68f9      	ldr	r1, [r7, #12]
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7ff ffa1 	bl	80046a0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800475e:	e024      	b.n	80047aa <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d008      	beq.n	8004778 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004766:	4b13      	ldr	r3, [pc, #76]	; (80047b4 <prvProcessTimerOrBlockTask+0x90>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <prvProcessTimerOrBlockTask+0x50>
 8004770:	2301      	movs	r3, #1
 8004772:	e000      	b.n	8004776 <prvProcessTimerOrBlockTask+0x52>
 8004774:	2300      	movs	r3, #0
 8004776:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004778:	4b0f      	ldr	r3, [pc, #60]	; (80047b8 <prvProcessTimerOrBlockTask+0x94>)
 800477a:	6818      	ldr	r0, [r3, #0]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	4619      	mov	r1, r3
 8004786:	f7fe fca5 	bl	80030d4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800478a:	f7fe ff7d 	bl	8003688 <xTaskResumeAll>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10a      	bne.n	80047aa <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004794:	4b09      	ldr	r3, [pc, #36]	; (80047bc <prvProcessTimerOrBlockTask+0x98>)
 8004796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	f3bf 8f6f 	isb	sy
    }
 80047a4:	e001      	b.n	80047aa <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80047a6:	f7fe ff6f 	bl	8003688 <xTaskResumeAll>
    }
 80047aa:	bf00      	nop
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	200002dc 	.word	0x200002dc
 80047b8:	200002e0 	.word	0x200002e0
 80047bc:	e000ed04 	.word	0xe000ed04

080047c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80047c8:	4b0e      	ldr	r3, [pc, #56]	; (8004804 <prvGetNextExpireTime+0x44>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <prvGetNextExpireTime+0x16>
 80047d2:	2201      	movs	r2, #1
 80047d4:	e000      	b.n	80047d8 <prvGetNextExpireTime+0x18>
 80047d6:	2200      	movs	r2, #0
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d105      	bne.n	80047f0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047e4:	4b07      	ldr	r3, [pc, #28]	; (8004804 <prvGetNextExpireTime+0x44>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	e001      	b.n	80047f4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80047f4:	68fb      	ldr	r3, [r7, #12]
    }
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	200002d8 	.word	0x200002d8

08004808 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004810:	f7ff f83a 	bl	8003888 <xTaskGetTickCount>
 8004814:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004816:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <prvSampleTimeNow+0x3c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	429a      	cmp	r2, r3
 800481e:	d205      	bcs.n	800482c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004820:	f000 f912 	bl	8004a48 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	e002      	b.n	8004832 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004832:	4a04      	ldr	r2, [pc, #16]	; (8004844 <prvSampleTimeNow+0x3c>)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004838:	68fb      	ldr	r3, [r7, #12]
    }
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	200002e8 	.word	0x200002e8

08004848 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004856:	2300      	movs	r3, #0
 8004858:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	429a      	cmp	r2, r3
 800486c:	d812      	bhi.n	8004894 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	1ad2      	subs	r2, r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	429a      	cmp	r2, r3
 800487a:	d302      	bcc.n	8004882 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800487c:	2301      	movs	r3, #1
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	e01b      	b.n	80048ba <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004882:	4b10      	ldr	r3, [pc, #64]	; (80048c4 <prvInsertTimerInActiveList+0x7c>)
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3304      	adds	r3, #4
 800488a:	4619      	mov	r1, r3
 800488c:	4610      	mov	r0, r2
 800488e:	f7fe f8c2 	bl	8002a16 <vListInsert>
 8004892:	e012      	b.n	80048ba <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d206      	bcs.n	80048aa <prvInsertTimerInActiveList+0x62>
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d302      	bcc.n	80048aa <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80048a4:	2301      	movs	r3, #1
 80048a6:	617b      	str	r3, [r7, #20]
 80048a8:	e007      	b.n	80048ba <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048aa:	4b07      	ldr	r3, [pc, #28]	; (80048c8 <prvInsertTimerInActiveList+0x80>)
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3304      	adds	r3, #4
 80048b2:	4619      	mov	r1, r3
 80048b4:	4610      	mov	r0, r2
 80048b6:	f7fe f8ae 	bl	8002a16 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80048ba:	697b      	ldr	r3, [r7, #20]
    }
 80048bc:	4618      	mov	r0, r3
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	200002dc 	.word	0x200002dc
 80048c8:	200002d8 	.word	0x200002d8

080048cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b088      	sub	sp, #32
 80048d0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048d2:	e0a6      	b.n	8004a22 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f2c0 80a2 	blt.w	8004a20 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d004      	beq.n	80048f2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	3304      	adds	r3, #4
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7fe f8cb 	bl	8002a88 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048f2:	1d3b      	adds	r3, r7, #4
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff ff87 	bl	8004808 <prvSampleTimeNow>
 80048fa:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	3b01      	subs	r3, #1
 8004900:	2b08      	cmp	r3, #8
 8004902:	f200 808e 	bhi.w	8004a22 <prvProcessReceivedCommands+0x156>
 8004906:	a201      	add	r2, pc, #4	; (adr r2, 800490c <prvProcessReceivedCommands+0x40>)
 8004908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490c:	08004931 	.word	0x08004931
 8004910:	08004931 	.word	0x08004931
 8004914:	08004999 	.word	0x08004999
 8004918:	080049ad 	.word	0x080049ad
 800491c:	080049f7 	.word	0x080049f7
 8004920:	08004931 	.word	0x08004931
 8004924:	08004931 	.word	0x08004931
 8004928:	08004999 	.word	0x08004999
 800492c:	080049ad 	.word	0x080049ad
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004936:	f043 0301 	orr.w	r3, r3, #1
 800493a:	b2da      	uxtb	r2, r3
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	18d1      	adds	r1, r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	69f8      	ldr	r0, [r7, #28]
 8004950:	f7ff ff7a 	bl	8004848 <prvInsertTimerInActiveList>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d063      	beq.n	8004a22 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d009      	beq.n	800497c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	4413      	add	r3, r2
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	4619      	mov	r1, r3
 8004974:	69f8      	ldr	r0, [r7, #28]
 8004976:	f7ff fe71 	bl	800465c <prvReloadTimer>
 800497a:	e008      	b.n	800498e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004982:	f023 0301 	bic.w	r3, r3, #1
 8004986:	b2da      	uxtb	r2, r3
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	69f8      	ldr	r0, [r7, #28]
 8004994:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004996:	e044      	b.n	8004a22 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800499e:	f023 0301 	bic.w	r3, r3, #1
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80049aa:	e03a      	b.n	8004a22 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049b2:	f043 0301 	orr.w	r3, r3, #1
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10a      	bne.n	80049e2 <prvProcessReceivedCommands+0x116>
        __asm volatile
 80049cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	617b      	str	r3, [r7, #20]
    }
 80049de:	bf00      	nop
 80049e0:	e7fe      	b.n	80049e0 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	699a      	ldr	r2, [r3, #24]
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	18d1      	adds	r1, r2, r3
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	69f8      	ldr	r0, [r7, #28]
 80049f0:	f7ff ff2a 	bl	8004848 <prvInsertTimerInActiveList>
                        break;
 80049f4:	e015      	b.n	8004a22 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d103      	bne.n	8004a0c <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8004a04:	69f8      	ldr	r0, [r7, #28]
 8004a06:	f000 fbc9 	bl	800519c <vPortFree>
 8004a0a:	e00a      	b.n	8004a22 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a12:	f023 0301 	bic.w	r3, r3, #1
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004a1e:	e000      	b.n	8004a22 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004a20:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a22:	4b08      	ldr	r3, [pc, #32]	; (8004a44 <prvProcessReceivedCommands+0x178>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f107 0108 	add.w	r1, r7, #8
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fe f95d 	bl	8002cec <xQueueReceive>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f47f af4d 	bne.w	80048d4 <prvProcessReceivedCommands+0x8>
        }
    }
 8004a3a:	bf00      	nop
 8004a3c:	bf00      	nop
 8004a3e:	3720      	adds	r7, #32
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	200002e0 	.word	0x200002e0

08004a48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a4e:	e009      	b.n	8004a64 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a50:	4b0e      	ldr	r3, [pc, #56]	; (8004a8c <prvSwitchTimerLists+0x44>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004a5a:	f04f 31ff 	mov.w	r1, #4294967295
 8004a5e:	6838      	ldr	r0, [r7, #0]
 8004a60:	f7ff fe1e 	bl	80046a0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a64:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <prvSwitchTimerLists+0x44>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f0      	bne.n	8004a50 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004a6e:	4b07      	ldr	r3, [pc, #28]	; (8004a8c <prvSwitchTimerLists+0x44>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004a74:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <prvSwitchTimerLists+0x48>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a04      	ldr	r2, [pc, #16]	; (8004a8c <prvSwitchTimerLists+0x44>)
 8004a7a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004a7c:	4a04      	ldr	r2, [pc, #16]	; (8004a90 <prvSwitchTimerLists+0x48>)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6013      	str	r3, [r2, #0]
    }
 8004a82:	bf00      	nop
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	200002d8 	.word	0x200002d8
 8004a90:	200002dc 	.word	0x200002dc

08004a94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004a98:	f000 f95e 	bl	8004d58 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004a9c:	4b12      	ldr	r3, [pc, #72]	; (8004ae8 <prvCheckForValidListAndQueue+0x54>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d11d      	bne.n	8004ae0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004aa4:	4811      	ldr	r0, [pc, #68]	; (8004aec <prvCheckForValidListAndQueue+0x58>)
 8004aa6:	f7fd ff65 	bl	8002974 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004aaa:	4811      	ldr	r0, [pc, #68]	; (8004af0 <prvCheckForValidListAndQueue+0x5c>)
 8004aac:	f7fd ff62 	bl	8002974 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004ab0:	4b10      	ldr	r3, [pc, #64]	; (8004af4 <prvCheckForValidListAndQueue+0x60>)
 8004ab2:	4a0e      	ldr	r2, [pc, #56]	; (8004aec <prvCheckForValidListAndQueue+0x58>)
 8004ab4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004ab6:	4b10      	ldr	r3, [pc, #64]	; (8004af8 <prvCheckForValidListAndQueue+0x64>)
 8004ab8:	4a0d      	ldr	r2, [pc, #52]	; (8004af0 <prvCheckForValidListAndQueue+0x5c>)
 8004aba:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004abc:	2200      	movs	r2, #0
 8004abe:	210c      	movs	r1, #12
 8004ac0:	200a      	movs	r0, #10
 8004ac2:	f7fe f89b 	bl	8002bfc <xQueueGenericCreate>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	4a07      	ldr	r2, [pc, #28]	; (8004ae8 <prvCheckForValidListAndQueue+0x54>)
 8004aca:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004acc:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <prvCheckForValidListAndQueue+0x54>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d005      	beq.n	8004ae0 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ad4:	4b04      	ldr	r3, [pc, #16]	; (8004ae8 <prvCheckForValidListAndQueue+0x54>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4908      	ldr	r1, [pc, #32]	; (8004afc <prvCheckForValidListAndQueue+0x68>)
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fe faa4 	bl	8003028 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004ae0:	f000 f96a 	bl	8004db8 <vPortExitCritical>
    }
 8004ae4:	bf00      	nop
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	200002e0 	.word	0x200002e0
 8004aec:	200002b0 	.word	0x200002b0
 8004af0:	200002c4 	.word	0x200002c4
 8004af4:	200002d8 	.word	0x200002d8
 8004af8:	200002dc 	.word	0x200002dc
 8004afc:	08007a64 	.word	0x08007a64

08004b00 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	3b04      	subs	r3, #4
 8004b10:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b18:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	3b04      	subs	r3, #4
 8004b1e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f023 0201 	bic.w	r2, r3, #1
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	3b04      	subs	r3, #4
 8004b2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004b30:	4a0c      	ldr	r2, [pc, #48]	; (8004b64 <pxPortInitialiseStack+0x64>)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3b14      	subs	r3, #20
 8004b3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	3b04      	subs	r3, #4
 8004b46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f06f 0202 	mvn.w	r2, #2
 8004b4e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	3b20      	subs	r3, #32
 8004b54:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004b56:	68fb      	ldr	r3, [r7, #12]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	08004b69 	.word	0x08004b69

08004b68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004b72:	4b12      	ldr	r3, [pc, #72]	; (8004bbc <prvTaskExitError+0x54>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7a:	d00a      	beq.n	8004b92 <prvTaskExitError+0x2a>
        __asm volatile
 8004b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b80:	f383 8811 	msr	BASEPRI, r3
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	60fb      	str	r3, [r7, #12]
    }
 8004b8e:	bf00      	nop
 8004b90:	e7fe      	b.n	8004b90 <prvTaskExitError+0x28>
        __asm volatile
 8004b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	60bb      	str	r3, [r7, #8]
    }
 8004ba4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004ba6:	bf00      	nop
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0fc      	beq.n	8004ba8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004bae:	bf00      	nop
 8004bb0:	bf00      	nop
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	20000010 	.word	0x20000010

08004bc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004bc0:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <pxCurrentTCBConst2>)
 8004bc2:	6819      	ldr	r1, [r3, #0]
 8004bc4:	6808      	ldr	r0, [r1, #0]
 8004bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bca:	f380 8809 	msr	PSP, r0
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f04f 0000 	mov.w	r0, #0
 8004bd6:	f380 8811 	msr	BASEPRI, r0
 8004bda:	4770      	bx	lr
 8004bdc:	f3af 8000 	nop.w

08004be0 <pxCurrentTCBConst2>:
 8004be0:	200001ac 	.word	0x200001ac
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004be4:	bf00      	nop
 8004be6:	bf00      	nop

08004be8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004be8:	4808      	ldr	r0, [pc, #32]	; (8004c0c <prvPortStartFirstTask+0x24>)
 8004bea:	6800      	ldr	r0, [r0, #0]
 8004bec:	6800      	ldr	r0, [r0, #0]
 8004bee:	f380 8808 	msr	MSP, r0
 8004bf2:	f04f 0000 	mov.w	r0, #0
 8004bf6:	f380 8814 	msr	CONTROL, r0
 8004bfa:	b662      	cpsie	i
 8004bfc:	b661      	cpsie	f
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	df00      	svc	0
 8004c08:	bf00      	nop
 8004c0a:	0000      	.short	0x0000
 8004c0c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004c10:	bf00      	nop
 8004c12:	bf00      	nop

08004c14 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c1a:	4b46      	ldr	r3, [pc, #280]	; (8004d34 <xPortStartScheduler+0x120>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a46      	ldr	r2, [pc, #280]	; (8004d38 <xPortStartScheduler+0x124>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d10a      	bne.n	8004c3a <xPortStartScheduler+0x26>
        __asm volatile
 8004c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	613b      	str	r3, [r7, #16]
    }
 8004c36:	bf00      	nop
 8004c38:	e7fe      	b.n	8004c38 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c3a:	4b3e      	ldr	r3, [pc, #248]	; (8004d34 <xPortStartScheduler+0x120>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a3f      	ldr	r2, [pc, #252]	; (8004d3c <xPortStartScheduler+0x128>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d10a      	bne.n	8004c5a <xPortStartScheduler+0x46>
        __asm volatile
 8004c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	60fb      	str	r3, [r7, #12]
    }
 8004c56:	bf00      	nop
 8004c58:	e7fe      	b.n	8004c58 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c5a:	4b39      	ldr	r3, [pc, #228]	; (8004d40 <xPortStartScheduler+0x12c>)
 8004c5c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	22ff      	movs	r2, #255	; 0xff
 8004c6a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c74:	78fb      	ldrb	r3, [r7, #3]
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	4b31      	ldr	r3, [pc, #196]	; (8004d44 <xPortStartScheduler+0x130>)
 8004c80:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c82:	4b31      	ldr	r3, [pc, #196]	; (8004d48 <xPortStartScheduler+0x134>)
 8004c84:	2207      	movs	r2, #7
 8004c86:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c88:	e009      	b.n	8004c9e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8004c8a:	4b2f      	ldr	r3, [pc, #188]	; (8004d48 <xPortStartScheduler+0x134>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	4a2d      	ldr	r2, [pc, #180]	; (8004d48 <xPortStartScheduler+0x134>)
 8004c92:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c94:	78fb      	ldrb	r3, [r7, #3]
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c9e:	78fb      	ldrb	r3, [r7, #3]
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca6:	2b80      	cmp	r3, #128	; 0x80
 8004ca8:	d0ef      	beq.n	8004c8a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004caa:	4b27      	ldr	r3, [pc, #156]	; (8004d48 <xPortStartScheduler+0x134>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f1c3 0307 	rsb	r3, r3, #7
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d00a      	beq.n	8004ccc <xPortStartScheduler+0xb8>
        __asm volatile
 8004cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cba:	f383 8811 	msr	BASEPRI, r3
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	60bb      	str	r3, [r7, #8]
    }
 8004cc8:	bf00      	nop
 8004cca:	e7fe      	b.n	8004cca <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ccc:	4b1e      	ldr	r3, [pc, #120]	; (8004d48 <xPortStartScheduler+0x134>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	021b      	lsls	r3, r3, #8
 8004cd2:	4a1d      	ldr	r2, [pc, #116]	; (8004d48 <xPortStartScheduler+0x134>)
 8004cd4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004cd6:	4b1c      	ldr	r3, [pc, #112]	; (8004d48 <xPortStartScheduler+0x134>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cde:	4a1a      	ldr	r2, [pc, #104]	; (8004d48 <xPortStartScheduler+0x134>)
 8004ce0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004cea:	4b18      	ldr	r3, [pc, #96]	; (8004d4c <xPortStartScheduler+0x138>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a17      	ldr	r2, [pc, #92]	; (8004d4c <xPortStartScheduler+0x138>)
 8004cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cf4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004cf6:	4b15      	ldr	r3, [pc, #84]	; (8004d4c <xPortStartScheduler+0x138>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a14      	ldr	r2, [pc, #80]	; (8004d4c <xPortStartScheduler+0x138>)
 8004cfc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d00:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004d02:	f000 f8db 	bl	8004ebc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004d06:	4b12      	ldr	r3, [pc, #72]	; (8004d50 <xPortStartScheduler+0x13c>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004d0c:	f000 f8fa 	bl	8004f04 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d10:	4b10      	ldr	r3, [pc, #64]	; (8004d54 <xPortStartScheduler+0x140>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a0f      	ldr	r2, [pc, #60]	; (8004d54 <xPortStartScheduler+0x140>)
 8004d16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d1a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004d1c:	f7ff ff64 	bl	8004be8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004d20:	f7fe feee 	bl	8003b00 <vTaskSwitchContext>
    prvTaskExitError();
 8004d24:	f7ff ff20 	bl	8004b68 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	e000ed00 	.word	0xe000ed00
 8004d38:	410fc271 	.word	0x410fc271
 8004d3c:	410fc270 	.word	0x410fc270
 8004d40:	e000e400 	.word	0xe000e400
 8004d44:	200002ec 	.word	0x200002ec
 8004d48:	200002f0 	.word	0x200002f0
 8004d4c:	e000ed20 	.word	0xe000ed20
 8004d50:	20000010 	.word	0x20000010
 8004d54:	e000ef34 	.word	0xe000ef34

08004d58 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
        __asm volatile
 8004d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	607b      	str	r3, [r7, #4]
    }
 8004d70:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004d72:	4b0f      	ldr	r3, [pc, #60]	; (8004db0 <vPortEnterCritical+0x58>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3301      	adds	r3, #1
 8004d78:	4a0d      	ldr	r2, [pc, #52]	; (8004db0 <vPortEnterCritical+0x58>)
 8004d7a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004d7c:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <vPortEnterCritical+0x58>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d10f      	bne.n	8004da4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d84:	4b0b      	ldr	r3, [pc, #44]	; (8004db4 <vPortEnterCritical+0x5c>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <vPortEnterCritical+0x4c>
        __asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	603b      	str	r3, [r7, #0]
    }
 8004da0:	bf00      	nop
 8004da2:	e7fe      	b.n	8004da2 <vPortEnterCritical+0x4a>
    }
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	20000010 	.word	0x20000010
 8004db4:	e000ed04 	.word	0xe000ed04

08004db8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004dbe:	4b12      	ldr	r3, [pc, #72]	; (8004e08 <vPortExitCritical+0x50>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10a      	bne.n	8004ddc <vPortExitCritical+0x24>
        __asm volatile
 8004dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dca:	f383 8811 	msr	BASEPRI, r3
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	f3bf 8f4f 	dsb	sy
 8004dd6:	607b      	str	r3, [r7, #4]
    }
 8004dd8:	bf00      	nop
 8004dda:	e7fe      	b.n	8004dda <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004ddc:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <vPortExitCritical+0x50>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3b01      	subs	r3, #1
 8004de2:	4a09      	ldr	r2, [pc, #36]	; (8004e08 <vPortExitCritical+0x50>)
 8004de4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004de6:	4b08      	ldr	r3, [pc, #32]	; (8004e08 <vPortExitCritical+0x50>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d105      	bne.n	8004dfa <vPortExitCritical+0x42>
 8004dee:	2300      	movs	r3, #0
 8004df0:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	f383 8811 	msr	BASEPRI, r3
    }
 8004df8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	20000010 	.word	0x20000010
 8004e0c:	00000000 	.word	0x00000000

08004e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004e10:	f3ef 8009 	mrs	r0, PSP
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	4b15      	ldr	r3, [pc, #84]	; (8004e70 <pxCurrentTCBConst>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	f01e 0f10 	tst.w	lr, #16
 8004e20:	bf08      	it	eq
 8004e22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e2a:	6010      	str	r0, [r2, #0]
 8004e2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e34:	f380 8811 	msr	BASEPRI, r0
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f7fe fe5e 	bl	8003b00 <vTaskSwitchContext>
 8004e44:	f04f 0000 	mov.w	r0, #0
 8004e48:	f380 8811 	msr	BASEPRI, r0
 8004e4c:	bc09      	pop	{r0, r3}
 8004e4e:	6819      	ldr	r1, [r3, #0]
 8004e50:	6808      	ldr	r0, [r1, #0]
 8004e52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e56:	f01e 0f10 	tst.w	lr, #16
 8004e5a:	bf08      	it	eq
 8004e5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e60:	f380 8809 	msr	PSP, r0
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	f3af 8000 	nop.w

08004e70 <pxCurrentTCBConst>:
 8004e70:	200001ac 	.word	0x200001ac
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004e74:	bf00      	nop
 8004e76:	bf00      	nop

08004e78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
        __asm volatile
 8004e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	607b      	str	r3, [r7, #4]
    }
 8004e90:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004e92:	f7fe fd1b 	bl	80038cc <xTaskIncrementTick>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d003      	beq.n	8004ea4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e9c:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <SysTick_Handler+0x40>)
 8004e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	f383 8811 	msr	BASEPRI, r3
    }
 8004eae:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004eb0:	bf00      	nop
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	e000ed04 	.word	0xe000ed04

08004ebc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ec0:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <vPortSetupTimerInterrupt+0x34>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ec6:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <vPortSetupTimerInterrupt+0x38>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ecc:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <vPortSetupTimerInterrupt+0x3c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a0a      	ldr	r2, [pc, #40]	; (8004efc <vPortSetupTimerInterrupt+0x40>)
 8004ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed6:	099b      	lsrs	r3, r3, #6
 8004ed8:	4a09      	ldr	r2, [pc, #36]	; (8004f00 <vPortSetupTimerInterrupt+0x44>)
 8004eda:	3b01      	subs	r3, #1
 8004edc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ede:	4b04      	ldr	r3, [pc, #16]	; (8004ef0 <vPortSetupTimerInterrupt+0x34>)
 8004ee0:	2207      	movs	r2, #7
 8004ee2:	601a      	str	r2, [r3, #0]
}
 8004ee4:	bf00      	nop
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	e000e010 	.word	0xe000e010
 8004ef4:	e000e018 	.word	0xe000e018
 8004ef8:	20000000 	.word	0x20000000
 8004efc:	10624dd3 	.word	0x10624dd3
 8004f00:	e000e014 	.word	0xe000e014

08004f04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004f04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f14 <vPortEnableVFP+0x10>
 8004f08:	6801      	ldr	r1, [r0, #0]
 8004f0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f0e:	6001      	str	r1, [r0, #0]
 8004f10:	4770      	bx	lr
 8004f12:	0000      	.short	0x0000
 8004f14:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004f18:	bf00      	nop
 8004f1a:	bf00      	nop

08004f1c <vSetVarulMaxPRIGROUPValue>:
/*-----------------------------------------------------------*/
/////////
#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue( void )
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f22:	4b1f      	ldr	r3, [pc, #124]	; (8004fa0 <vSetVarulMaxPRIGROUPValue+0x84>)
 8004f24:	60fb      	str	r3, [r7, #12]
	volatile uint8_t ucMaxPriorityValue;
	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	22ff      	movs	r2, #255	; 0xff
 8004f2a:	701a      	strb	r2, [r3, #0]
	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	71fb      	strb	r3, [r7, #7]
	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f34:	4b1b      	ldr	r3, [pc, #108]	; (8004fa4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004f36:	2207      	movs	r2, #7
 8004f38:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f3a:	e009      	b.n	8004f50 <vSetVarulMaxPRIGROUPValue+0x34>
	{
		ulMaxPRIGROUPValue--;
 8004f3c:	4b19      	ldr	r3, [pc, #100]	; (8004fa4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3b01      	subs	r3, #1
 8004f42:	4a18      	ldr	r2, [pc, #96]	; (8004fa4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004f44:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f46:	79fb      	ldrb	r3, [r7, #7]
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	71fb      	strb	r3, [r7, #7]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f50:	79fb      	ldrb	r3, [r7, #7]
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f58:	2b80      	cmp	r3, #128	; 0x80
 8004f5a:	d0ef      	beq.n	8004f3c <vSetVarulMaxPRIGROUPValue+0x20>
#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f5c:	4b11      	ldr	r3, [pc, #68]	; (8004fa4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f1c3 0307 	rsb	r3, r3, #7
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d00a      	beq.n	8004f7e <vSetVarulMaxPRIGROUPValue+0x62>
        __asm volatile
 8004f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6c:	f383 8811 	msr	BASEPRI, r3
 8004f70:	f3bf 8f6f 	isb	sy
 8004f74:	f3bf 8f4f 	dsb	sy
 8004f78:	60bb      	str	r3, [r7, #8]
    }
 8004f7a:	bf00      	nop
 8004f7c:	e7fe      	b.n	8004f7c <vSetVarulMaxPRIGROUPValue+0x60>
	}
#endif
	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f7e:	4b09      	ldr	r3, [pc, #36]	; (8004fa4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	021b      	lsls	r3, r3, #8
 8004f84:	4a07      	ldr	r2, [pc, #28]	; (8004fa4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004f86:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f88:	4b06      	ldr	r3, [pc, #24]	; (8004fa4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f90:	4a04      	ldr	r2, [pc, #16]	; (8004fa4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004f92:	6013      	str	r3, [r2, #0]
}
 8004f94:	bf00      	nop
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	e000e400 	.word	0xe000e400
 8004fa4:	200002f0 	.word	0x200002f0

08004fa8 <vPortValidateInterruptPriority>:

////////
#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004fae:	f3ef 8305 	mrs	r3, IPSR
 8004fb2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b0f      	cmp	r3, #15
 8004fb8:	d914      	bls.n	8004fe4 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004fba:	4a17      	ldr	r2, [pc, #92]	; (8005018 <vPortValidateInterruptPriority+0x70>)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004fc4:	4b15      	ldr	r3, [pc, #84]	; (800501c <vPortValidateInterruptPriority+0x74>)
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	7afa      	ldrb	r2, [r7, #11]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d20a      	bcs.n	8004fe4 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	607b      	str	r3, [r7, #4]
    }
 8004fe0:	bf00      	nop
 8004fe2:	e7fe      	b.n	8004fe2 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004fe4:	4b0e      	ldr	r3, [pc, #56]	; (8005020 <vPortValidateInterruptPriority+0x78>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004fec:	4b0d      	ldr	r3, [pc, #52]	; (8005024 <vPortValidateInterruptPriority+0x7c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d90a      	bls.n	800500a <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff8:	f383 8811 	msr	BASEPRI, r3
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	603b      	str	r3, [r7, #0]
    }
 8005006:	bf00      	nop
 8005008:	e7fe      	b.n	8005008 <vPortValidateInterruptPriority+0x60>
    }
 800500a:	bf00      	nop
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	e000e3f0 	.word	0xe000e3f0
 800501c:	200002ec 	.word	0x200002ec
 8005020:	e000ed0c 	.word	0xe000ed0c
 8005024:	200002f0 	.word	0x200002f0

08005028 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b08a      	sub	sp, #40	; 0x28
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005030:	2300      	movs	r3, #0
 8005032:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8005034:	f7fe fb1a 	bl	800366c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005038:	4b53      	ldr	r3, [pc, #332]	; (8005188 <pvPortMalloc+0x160>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005040:	f000 f908 	bl	8005254 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d012      	beq.n	8005070 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800504a:	2208      	movs	r2, #8
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f003 0307 	and.w	r3, r3, #7
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	3308      	adds	r3, #8
 8005056:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	43db      	mvns	r3, r3
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	429a      	cmp	r2, r3
 8005060:	d804      	bhi.n	800506c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	4413      	add	r3, r2
 8005068:	607b      	str	r3, [r7, #4]
 800506a:	e001      	b.n	8005070 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800506c:	2300      	movs	r3, #0
 800506e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	db70      	blt.n	8005158 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d06d      	beq.n	8005158 <pvPortMalloc+0x130>
 800507c:	4b43      	ldr	r3, [pc, #268]	; (800518c <pvPortMalloc+0x164>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	429a      	cmp	r2, r3
 8005084:	d868      	bhi.n	8005158 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005086:	4b42      	ldr	r3, [pc, #264]	; (8005190 <pvPortMalloc+0x168>)
 8005088:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800508a:	4b41      	ldr	r3, [pc, #260]	; (8005190 <pvPortMalloc+0x168>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005090:	e004      	b.n	800509c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d903      	bls.n	80050ae <pvPortMalloc+0x86>
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1f1      	bne.n	8005092 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80050ae:	4b36      	ldr	r3, [pc, #216]	; (8005188 <pvPortMalloc+0x160>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d04f      	beq.n	8005158 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2208      	movs	r2, #8
 80050be:	4413      	add	r3, r2
 80050c0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	685a      	ldr	r2, [r3, #4]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	1ad2      	subs	r2, r2, r3
 80050d2:	2308      	movs	r3, #8
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d91f      	bls.n	800511a <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4413      	add	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00a      	beq.n	8005102 <pvPortMalloc+0xda>
        __asm volatile
 80050ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	613b      	str	r3, [r7, #16]
    }
 80050fe:	bf00      	nop
 8005100:	e7fe      	b.n	8005100 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	1ad2      	subs	r2, r2, r3
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005114:	6978      	ldr	r0, [r7, #20]
 8005116:	f000 f8f9 	bl	800530c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800511a:	4b1c      	ldr	r3, [pc, #112]	; (800518c <pvPortMalloc+0x164>)
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	4a19      	ldr	r2, [pc, #100]	; (800518c <pvPortMalloc+0x164>)
 8005126:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005128:	4b18      	ldr	r3, [pc, #96]	; (800518c <pvPortMalloc+0x164>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	4b19      	ldr	r3, [pc, #100]	; (8005194 <pvPortMalloc+0x16c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d203      	bcs.n	800513c <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005134:	4b15      	ldr	r3, [pc, #84]	; (800518c <pvPortMalloc+0x164>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a16      	ldr	r2, [pc, #88]	; (8005194 <pvPortMalloc+0x16c>)
 800513a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800514e:	4b12      	ldr	r3, [pc, #72]	; (8005198 <pvPortMalloc+0x170>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3301      	adds	r3, #1
 8005154:	4a10      	ldr	r2, [pc, #64]	; (8005198 <pvPortMalloc+0x170>)
 8005156:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005158:	f7fe fa96 	bl	8003688 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	f003 0307 	and.w	r3, r3, #7
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <pvPortMalloc+0x154>
        __asm volatile
 8005166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	60fb      	str	r3, [r7, #12]
    }
 8005178:	bf00      	nop
 800517a:	e7fe      	b.n	800517a <pvPortMalloc+0x152>
    return pvReturn;
 800517c:	69fb      	ldr	r3, [r7, #28]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3728      	adds	r7, #40	; 0x28
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	2000cafc 	.word	0x2000cafc
 800518c:	2000cb00 	.word	0x2000cb00
 8005190:	2000caf4 	.word	0x2000caf4
 8005194:	2000cb04 	.word	0x2000cb04
 8005198:	2000cb08 	.word	0x2000cb08

0800519c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d049      	beq.n	8005242 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80051ae:	2308      	movs	r3, #8
 80051b0:	425b      	negs	r3, r3
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4413      	add	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	db0a      	blt.n	80051da <vPortFree+0x3e>
        __asm volatile
 80051c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	60fb      	str	r3, [r7, #12]
    }
 80051d6:	bf00      	nop
 80051d8:	e7fe      	b.n	80051d8 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <vPortFree+0x5c>
        __asm volatile
 80051e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e6:	f383 8811 	msr	BASEPRI, r3
 80051ea:	f3bf 8f6f 	isb	sy
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	60bb      	str	r3, [r7, #8]
    }
 80051f4:	bf00      	nop
 80051f6:	e7fe      	b.n	80051f6 <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	0fdb      	lsrs	r3, r3, #31
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01c      	beq.n	8005242 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d118      	bne.n	8005242 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800521c:	f7fe fa26 	bl	800366c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	4b09      	ldr	r3, [pc, #36]	; (800524c <vPortFree+0xb0>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4413      	add	r3, r2
 800522a:	4a08      	ldr	r2, [pc, #32]	; (800524c <vPortFree+0xb0>)
 800522c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800522e:	6938      	ldr	r0, [r7, #16]
 8005230:	f000 f86c 	bl	800530c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005234:	4b06      	ldr	r3, [pc, #24]	; (8005250 <vPortFree+0xb4>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3301      	adds	r3, #1
 800523a:	4a05      	ldr	r2, [pc, #20]	; (8005250 <vPortFree+0xb4>)
 800523c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800523e:	f7fe fa23 	bl	8003688 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005242:	bf00      	nop
 8005244:	3718      	adds	r7, #24
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	2000cb00 	.word	0x2000cb00
 8005250:	2000cb0c 	.word	0x2000cb0c

08005254 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800525a:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 800525e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005260:	4b25      	ldr	r3, [pc, #148]	; (80052f8 <prvHeapInit+0xa4>)
 8005262:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00c      	beq.n	8005288 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	3307      	adds	r3, #7
 8005272:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0307 	bic.w	r3, r3, #7
 800527a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	4a1d      	ldr	r2, [pc, #116]	; (80052f8 <prvHeapInit+0xa4>)
 8005284:	4413      	add	r3, r2
 8005286:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800528c:	4a1b      	ldr	r2, [pc, #108]	; (80052fc <prvHeapInit+0xa8>)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005292:	4b1a      	ldr	r3, [pc, #104]	; (80052fc <prvHeapInit+0xa8>)
 8005294:	2200      	movs	r2, #0
 8005296:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	4413      	add	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80052a0:	2208      	movs	r2, #8
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	1a9b      	subs	r3, r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 0307 	bic.w	r3, r3, #7
 80052ae:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4a13      	ldr	r2, [pc, #76]	; (8005300 <prvHeapInit+0xac>)
 80052b4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80052b6:	4b12      	ldr	r3, [pc, #72]	; (8005300 <prvHeapInit+0xac>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2200      	movs	r2, #0
 80052bc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80052be:	4b10      	ldr	r3, [pc, #64]	; (8005300 <prvHeapInit+0xac>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	1ad2      	subs	r2, r2, r3
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80052d4:	4b0a      	ldr	r3, [pc, #40]	; (8005300 <prvHeapInit+0xac>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	4a08      	ldr	r2, [pc, #32]	; (8005304 <prvHeapInit+0xb0>)
 80052e2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	4a07      	ldr	r2, [pc, #28]	; (8005308 <prvHeapInit+0xb4>)
 80052ea:	6013      	str	r3, [r2, #0]
}
 80052ec:	bf00      	nop
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	200002f4 	.word	0x200002f4
 80052fc:	2000caf4 	.word	0x2000caf4
 8005300:	2000cafc 	.word	0x2000cafc
 8005304:	2000cb04 	.word	0x2000cb04
 8005308:	2000cb00 	.word	0x2000cb00

0800530c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005314:	4b28      	ldr	r3, [pc, #160]	; (80053b8 <prvInsertBlockIntoFreeList+0xac>)
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	e002      	b.n	8005320 <prvInsertBlockIntoFreeList+0x14>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	429a      	cmp	r2, r3
 8005328:	d8f7      	bhi.n	800531a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	4413      	add	r3, r2
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	429a      	cmp	r2, r3
 800533a:	d108      	bne.n	800534e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	441a      	add	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	441a      	add	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d118      	bne.n	8005394 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	4b15      	ldr	r3, [pc, #84]	; (80053bc <prvInsertBlockIntoFreeList+0xb0>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d00d      	beq.n	800538a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	441a      	add	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	e008      	b.n	800539c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800538a:	4b0c      	ldr	r3, [pc, #48]	; (80053bc <prvInsertBlockIntoFreeList+0xb0>)
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	e003      	b.n	800539c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d002      	beq.n	80053aa <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80053aa:	bf00      	nop
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	2000caf4 	.word	0x2000caf4
 80053bc:	2000cafc 	.word	0x2000cafc

080053c0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80053c4:	4803      	ldr	r0, [pc, #12]	; (80053d4 <_cbSendSystemDesc+0x14>)
 80053c6:	f001 fb5d 	bl	8006a84 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80053ca:	4803      	ldr	r0, [pc, #12]	; (80053d8 <_cbSendSystemDesc+0x18>)
 80053cc:	f001 fb5a 	bl	8006a84 <SEGGER_SYSVIEW_SendSysDesc>
}
 80053d0:	bf00      	nop
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	08007a6c 	.word	0x08007a6c
 80053d8:	08007aa0 	.word	0x08007aa0

080053dc <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80053dc:	b580      	push	{r7, lr}
 80053de:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80053e0:	4b06      	ldr	r3, [pc, #24]	; (80053fc <SEGGER_SYSVIEW_Conf+0x20>)
 80053e2:	6818      	ldr	r0, [r3, #0]
 80053e4:	4b05      	ldr	r3, [pc, #20]	; (80053fc <SEGGER_SYSVIEW_Conf+0x20>)
 80053e6:	6819      	ldr	r1, [r3, #0]
 80053e8:	4b05      	ldr	r3, [pc, #20]	; (8005400 <SEGGER_SYSVIEW_Conf+0x24>)
 80053ea:	4a06      	ldr	r2, [pc, #24]	; (8005404 <SEGGER_SYSVIEW_Conf+0x28>)
 80053ec:	f000 fe1a 	bl	8006024 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80053f0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80053f4:	f000 fe5a 	bl	80060ac <SEGGER_SYSVIEW_SetRAMBase>
}
 80053f8:	bf00      	nop
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	20000000 	.word	0x20000000
 8005400:	080053c1 	.word	0x080053c1
 8005404:	08007b3c 	.word	0x08007b3c

08005408 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800540a:	b085      	sub	sp, #20
 800540c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800540e:	2300      	movs	r3, #0
 8005410:	607b      	str	r3, [r7, #4]
 8005412:	e033      	b.n	800547c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005414:	491e      	ldr	r1, [pc, #120]	; (8005490 <_cbSendTaskList+0x88>)
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	4613      	mov	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4413      	add	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	440b      	add	r3, r1
 8005422:	6818      	ldr	r0, [r3, #0]
 8005424:	491a      	ldr	r1, [pc, #104]	; (8005490 <_cbSendTaskList+0x88>)
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	4613      	mov	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	440b      	add	r3, r1
 8005432:	3304      	adds	r3, #4
 8005434:	6819      	ldr	r1, [r3, #0]
 8005436:	4c16      	ldr	r4, [pc, #88]	; (8005490 <_cbSendTaskList+0x88>)
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	4613      	mov	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4423      	add	r3, r4
 8005444:	3308      	adds	r3, #8
 8005446:	681c      	ldr	r4, [r3, #0]
 8005448:	4d11      	ldr	r5, [pc, #68]	; (8005490 <_cbSendTaskList+0x88>)
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	4613      	mov	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	442b      	add	r3, r5
 8005456:	330c      	adds	r3, #12
 8005458:	681d      	ldr	r5, [r3, #0]
 800545a:	4e0d      	ldr	r6, [pc, #52]	; (8005490 <_cbSendTaskList+0x88>)
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	4613      	mov	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4433      	add	r3, r6
 8005468:	3310      	adds	r3, #16
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	462b      	mov	r3, r5
 8005470:	4622      	mov	r2, r4
 8005472:	f000 f979 	bl	8005768 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	3301      	adds	r3, #1
 800547a:	607b      	str	r3, [r7, #4]
 800547c:	4b05      	ldr	r3, [pc, #20]	; (8005494 <_cbSendTaskList+0x8c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	429a      	cmp	r2, r3
 8005484:	d3c6      	bcc.n	8005414 <_cbSendTaskList+0xc>
  }
}
 8005486:	bf00      	nop
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005490:	2000cb10 	.word	0x2000cb10
 8005494:	2000cbb0 	.word	0x2000cbb0

08005498 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800549c:	b082      	sub	sp, #8
 800549e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80054a0:	f7fe fa02 	bl	80038a8 <xTaskGetTickCountFromISR>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2200      	movs	r2, #0
 80054a8:	469a      	mov	sl, r3
 80054aa:	4693      	mov	fp, r2
 80054ac:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80054b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	f04f 0a00 	mov.w	sl, #0
 80054bc:	f04f 0b00 	mov.w	fp, #0
 80054c0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80054c4:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80054c8:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80054cc:	4652      	mov	r2, sl
 80054ce:	465b      	mov	r3, fp
 80054d0:	1a14      	subs	r4, r2, r0
 80054d2:	eb63 0501 	sbc.w	r5, r3, r1
 80054d6:	f04f 0200 	mov.w	r2, #0
 80054da:	f04f 0300 	mov.w	r3, #0
 80054de:	00ab      	lsls	r3, r5, #2
 80054e0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80054e4:	00a2      	lsls	r2, r4, #2
 80054e6:	4614      	mov	r4, r2
 80054e8:	461d      	mov	r5, r3
 80054ea:	eb14 0800 	adds.w	r8, r4, r0
 80054ee:	eb45 0901 	adc.w	r9, r5, r1
 80054f2:	f04f 0200 	mov.w	r2, #0
 80054f6:	f04f 0300 	mov.w	r3, #0
 80054fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005502:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005506:	4690      	mov	r8, r2
 8005508:	4699      	mov	r9, r3
 800550a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800550e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005512:	4610      	mov	r0, r2
 8005514:	4619      	mov	r1, r3
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005520 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af02      	add	r7, sp, #8
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
 800552c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800552e:	2205      	movs	r2, #5
 8005530:	492b      	ldr	r1, [pc, #172]	; (80055e0 <SYSVIEW_AddTask+0xc0>)
 8005532:	68b8      	ldr	r0, [r7, #8]
 8005534:	f001 fdb2 	bl	800709c <memcmp>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d04b      	beq.n	80055d6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800553e:	4b29      	ldr	r3, [pc, #164]	; (80055e4 <SYSVIEW_AddTask+0xc4>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b07      	cmp	r3, #7
 8005544:	d903      	bls.n	800554e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005546:	4828      	ldr	r0, [pc, #160]	; (80055e8 <SYSVIEW_AddTask+0xc8>)
 8005548:	f001 fd28 	bl	8006f9c <SEGGER_SYSVIEW_Warn>
    return;
 800554c:	e044      	b.n	80055d8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800554e:	4b25      	ldr	r3, [pc, #148]	; (80055e4 <SYSVIEW_AddTask+0xc4>)
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	4926      	ldr	r1, [pc, #152]	; (80055ec <SYSVIEW_AddTask+0xcc>)
 8005554:	4613      	mov	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	440b      	add	r3, r1
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005562:	4b20      	ldr	r3, [pc, #128]	; (80055e4 <SYSVIEW_AddTask+0xc4>)
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	4921      	ldr	r1, [pc, #132]	; (80055ec <SYSVIEW_AddTask+0xcc>)
 8005568:	4613      	mov	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	440b      	add	r3, r1
 8005572:	3304      	adds	r3, #4
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005578:	4b1a      	ldr	r3, [pc, #104]	; (80055e4 <SYSVIEW_AddTask+0xc4>)
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	491b      	ldr	r1, [pc, #108]	; (80055ec <SYSVIEW_AddTask+0xcc>)
 800557e:	4613      	mov	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	440b      	add	r3, r1
 8005588:	3308      	adds	r3, #8
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800558e:	4b15      	ldr	r3, [pc, #84]	; (80055e4 <SYSVIEW_AddTask+0xc4>)
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	4916      	ldr	r1, [pc, #88]	; (80055ec <SYSVIEW_AddTask+0xcc>)
 8005594:	4613      	mov	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	440b      	add	r3, r1
 800559e:	330c      	adds	r3, #12
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80055a4:	4b0f      	ldr	r3, [pc, #60]	; (80055e4 <SYSVIEW_AddTask+0xc4>)
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	4910      	ldr	r1, [pc, #64]	; (80055ec <SYSVIEW_AddTask+0xcc>)
 80055aa:	4613      	mov	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	440b      	add	r3, r1
 80055b4:	3310      	adds	r3, #16
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80055ba:	4b0a      	ldr	r3, [pc, #40]	; (80055e4 <SYSVIEW_AddTask+0xc4>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3301      	adds	r3, #1
 80055c0:	4a08      	ldr	r2, [pc, #32]	; (80055e4 <SYSVIEW_AddTask+0xc4>)
 80055c2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	68b9      	ldr	r1, [r7, #8]
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 f8ca 	bl	8005768 <SYSVIEW_SendTaskInfo>
 80055d4:	e000      	b.n	80055d8 <SYSVIEW_AddTask+0xb8>
    return;
 80055d6:	bf00      	nop

}
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	08007ab0 	.word	0x08007ab0
 80055e4:	2000cbb0 	.word	0x2000cbb0
 80055e8:	08007ab8 	.word	0x08007ab8
 80055ec:	2000cb10 	.word	0x2000cb10

080055f0 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 80055f8:	4b59      	ldr	r3, [pc, #356]	; (8005760 <SYSVIEW_DeleteTask+0x170>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 80ab 	beq.w	8005758 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8005602:	2300      	movs	r3, #0
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	e00d      	b.n	8005624 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8005608:	4956      	ldr	r1, [pc, #344]	; (8005764 <SYSVIEW_DeleteTask+0x174>)
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	4613      	mov	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	440b      	add	r3, r1
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	429a      	cmp	r2, r3
 800561c:	d008      	beq.n	8005630 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	3301      	adds	r3, #1
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	4b4e      	ldr	r3, [pc, #312]	; (8005760 <SYSVIEW_DeleteTask+0x170>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	429a      	cmp	r2, r3
 800562c:	d3ec      	bcc.n	8005608 <SYSVIEW_DeleteTask+0x18>
 800562e:	e000      	b.n	8005632 <SYSVIEW_DeleteTask+0x42>
      break;
 8005630:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8005632:	4b4b      	ldr	r3, [pc, #300]	; (8005760 <SYSVIEW_DeleteTask+0x170>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	3b01      	subs	r3, #1
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	429a      	cmp	r2, r3
 800563c:	d111      	bne.n	8005662 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	4613      	mov	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4a46      	ldr	r2, [pc, #280]	; (8005764 <SYSVIEW_DeleteTask+0x174>)
 800564a:	4413      	add	r3, r2
 800564c:	2214      	movs	r2, #20
 800564e:	2100      	movs	r1, #0
 8005650:	4618      	mov	r0, r3
 8005652:	f001 fd41 	bl	80070d8 <memset>
    _NumTasks--;
 8005656:	4b42      	ldr	r3, [pc, #264]	; (8005760 <SYSVIEW_DeleteTask+0x170>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3b01      	subs	r3, #1
 800565c:	4a40      	ldr	r2, [pc, #256]	; (8005760 <SYSVIEW_DeleteTask+0x170>)
 800565e:	6013      	str	r3, [r2, #0]
 8005660:	e07b      	b.n	800575a <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8005662:	4b3f      	ldr	r3, [pc, #252]	; (8005760 <SYSVIEW_DeleteTask+0x170>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	429a      	cmp	r2, r3
 800566a:	d276      	bcs.n	800575a <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 800566c:	4b3c      	ldr	r3, [pc, #240]	; (8005760 <SYSVIEW_DeleteTask+0x170>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	1e5a      	subs	r2, r3, #1
 8005672:	493c      	ldr	r1, [pc, #240]	; (8005764 <SYSVIEW_DeleteTask+0x174>)
 8005674:	4613      	mov	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	440b      	add	r3, r1
 800567e:	6819      	ldr	r1, [r3, #0]
 8005680:	4838      	ldr	r0, [pc, #224]	; (8005764 <SYSVIEW_DeleteTask+0x174>)
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	4613      	mov	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4403      	add	r3, r0
 800568e:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8005690:	4b33      	ldr	r3, [pc, #204]	; (8005760 <SYSVIEW_DeleteTask+0x170>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	1e5a      	subs	r2, r3, #1
 8005696:	4933      	ldr	r1, [pc, #204]	; (8005764 <SYSVIEW_DeleteTask+0x174>)
 8005698:	4613      	mov	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	440b      	add	r3, r1
 80056a2:	3304      	adds	r3, #4
 80056a4:	6819      	ldr	r1, [r3, #0]
 80056a6:	482f      	ldr	r0, [pc, #188]	; (8005764 <SYSVIEW_DeleteTask+0x174>)
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4613      	mov	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4403      	add	r3, r0
 80056b4:	3304      	adds	r3, #4
 80056b6:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 80056b8:	4b29      	ldr	r3, [pc, #164]	; (8005760 <SYSVIEW_DeleteTask+0x170>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	1e5a      	subs	r2, r3, #1
 80056be:	4929      	ldr	r1, [pc, #164]	; (8005764 <SYSVIEW_DeleteTask+0x174>)
 80056c0:	4613      	mov	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	440b      	add	r3, r1
 80056ca:	3308      	adds	r3, #8
 80056cc:	6819      	ldr	r1, [r3, #0]
 80056ce:	4825      	ldr	r0, [pc, #148]	; (8005764 <SYSVIEW_DeleteTask+0x174>)
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	4613      	mov	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4403      	add	r3, r0
 80056dc:	3308      	adds	r3, #8
 80056de:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80056e0:	4b1f      	ldr	r3, [pc, #124]	; (8005760 <SYSVIEW_DeleteTask+0x170>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	1e5a      	subs	r2, r3, #1
 80056e6:	491f      	ldr	r1, [pc, #124]	; (8005764 <SYSVIEW_DeleteTask+0x174>)
 80056e8:	4613      	mov	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	440b      	add	r3, r1
 80056f2:	330c      	adds	r3, #12
 80056f4:	6819      	ldr	r1, [r3, #0]
 80056f6:	481b      	ldr	r0, [pc, #108]	; (8005764 <SYSVIEW_DeleteTask+0x174>)
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	4613      	mov	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4403      	add	r3, r0
 8005704:	330c      	adds	r3, #12
 8005706:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8005708:	4b15      	ldr	r3, [pc, #84]	; (8005760 <SYSVIEW_DeleteTask+0x170>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	1e5a      	subs	r2, r3, #1
 800570e:	4915      	ldr	r1, [pc, #84]	; (8005764 <SYSVIEW_DeleteTask+0x174>)
 8005710:	4613      	mov	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4413      	add	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	440b      	add	r3, r1
 800571a:	3310      	adds	r3, #16
 800571c:	6819      	ldr	r1, [r3, #0]
 800571e:	4811      	ldr	r0, [pc, #68]	; (8005764 <SYSVIEW_DeleteTask+0x174>)
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	4613      	mov	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4403      	add	r3, r0
 800572c:	3310      	adds	r3, #16
 800572e:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8005730:	4b0b      	ldr	r3, [pc, #44]	; (8005760 <SYSVIEW_DeleteTask+0x170>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	1e5a      	subs	r2, r3, #1
 8005736:	4613      	mov	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4413      	add	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4a09      	ldr	r2, [pc, #36]	; (8005764 <SYSVIEW_DeleteTask+0x174>)
 8005740:	4413      	add	r3, r2
 8005742:	2214      	movs	r2, #20
 8005744:	2100      	movs	r1, #0
 8005746:	4618      	mov	r0, r3
 8005748:	f001 fcc6 	bl	80070d8 <memset>
    _NumTasks--;
 800574c:	4b04      	ldr	r3, [pc, #16]	; (8005760 <SYSVIEW_DeleteTask+0x170>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	3b01      	subs	r3, #1
 8005752:	4a03      	ldr	r2, [pc, #12]	; (8005760 <SYSVIEW_DeleteTask+0x170>)
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	e000      	b.n	800575a <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8005758:	bf00      	nop
  }
}
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	2000cbb0 	.word	0x2000cbb0
 8005764:	2000cb10 	.word	0x2000cb10

08005768 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005768:	b580      	push	{r7, lr}
 800576a:	b08a      	sub	sp, #40	; 0x28
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005776:	f107 0314 	add.w	r3, r7, #20
 800577a:	2214      	movs	r2, #20
 800577c:	2100      	movs	r1, #0
 800577e:	4618      	mov	r0, r3
 8005780:	f001 fcaa 	bl	80070d8 <memset>
  TaskInfo.TaskID     = TaskID;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005796:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005798:	f107 0314 	add.w	r3, r7, #20
 800579c:	4618      	mov	r0, r3
 800579e:	f001 f879 	bl	8006894 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80057a2:	bf00      	nop
 80057a4:	3728      	adds	r7, #40	; 0x28
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
	...

080057ac <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80057b2:	4b26      	ldr	r3, [pc, #152]	; (800584c <_DoInit+0xa0>)
 80057b4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80057b6:	22a8      	movs	r2, #168	; 0xa8
 80057b8:	2100      	movs	r1, #0
 80057ba:	6838      	ldr	r0, [r7, #0]
 80057bc:	f001 fc8c 	bl	80070d8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	2203      	movs	r2, #3
 80057c4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2203      	movs	r2, #3
 80057ca:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	4a20      	ldr	r2, [pc, #128]	; (8005850 <_DoInit+0xa4>)
 80057d0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	4a1f      	ldr	r2, [pc, #124]	; (8005854 <_DoInit+0xa8>)
 80057d6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057de:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	2200      	movs	r2, #0
 80057e4:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2200      	movs	r2, #0
 80057ea:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	2200      	movs	r2, #0
 80057f0:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	4a16      	ldr	r2, [pc, #88]	; (8005850 <_DoInit+0xa4>)
 80057f6:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	4a17      	ldr	r2, [pc, #92]	; (8005858 <_DoInit+0xac>)
 80057fc:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	2210      	movs	r2, #16
 8005802:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	2200      	movs	r2, #0
 8005808:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	2200      	movs	r2, #0
 800580e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	2200      	movs	r2, #0
 8005814:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005816:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800581a:	2300      	movs	r3, #0
 800581c:	607b      	str	r3, [r7, #4]
 800581e:	e00c      	b.n	800583a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f1c3 030f 	rsb	r3, r3, #15
 8005826:	4a0d      	ldr	r2, [pc, #52]	; (800585c <_DoInit+0xb0>)
 8005828:	5cd1      	ldrb	r1, [r2, r3]
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4413      	add	r3, r2
 8005830:	460a      	mov	r2, r1
 8005832:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3301      	adds	r3, #1
 8005838:	607b      	str	r3, [r7, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b0f      	cmp	r3, #15
 800583e:	d9ef      	bls.n	8005820 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005840:	f3bf 8f5f 	dmb	sy
}
 8005844:	bf00      	nop
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	2000cbb4 	.word	0x2000cbb4
 8005850:	08007b08 	.word	0x08007b08
 8005854:	2000cc5c 	.word	0x2000cc5c
 8005858:	2000d05c 	.word	0x2000d05c
 800585c:	08007b44 	.word	0x08007b44

08005860 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005860:	b580      	push	{r7, lr}
 8005862:	b08c      	sub	sp, #48	; 0x30
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800586c:	4b3e      	ldr	r3, [pc, #248]	; (8005968 <SEGGER_RTT_ReadNoLock+0x108>)
 800586e:	623b      	str	r3, [r7, #32]
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <SEGGER_RTT_ReadNoLock+0x1e>
 800587a:	f7ff ff97 	bl	80057ac <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	4613      	mov	r3, r2
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	4413      	add	r3, r2
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	3360      	adds	r3, #96	; 0x60
 800588a:	4a37      	ldr	r2, [pc, #220]	; (8005968 <SEGGER_RTT_ReadNoLock+0x108>)
 800588c:	4413      	add	r3, r2
 800588e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80058a0:	2300      	movs	r3, #0
 80058a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80058a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d92b      	bls.n	8005904 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4293      	cmp	r3, r2
 80058bc:	bf28      	it	cs
 80058be:	4613      	movcs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c8:	4413      	add	r3, r2
 80058ca:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	6939      	ldr	r1, [r7, #16]
 80058d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058d2:	f001 fbf3 	bl	80070bc <memcpy>
    NumBytesRead += NumBytesRem;
 80058d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	4413      	add	r3, r2
 80058dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80058de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	4413      	add	r3, r2
 80058e4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80058ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	4413      	add	r3, r2
 80058f4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d101      	bne.n	8005904 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005900:	2300      	movs	r3, #0
 8005902:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4293      	cmp	r3, r2
 8005912:	bf28      	it	cs
 8005914:	4613      	movcs	r3, r2
 8005916:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d019      	beq.n	8005952 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005924:	4413      	add	r3, r2
 8005926:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	6939      	ldr	r1, [r7, #16]
 800592c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800592e:	f001 fbc5 	bl	80070bc <memcpy>
    NumBytesRead += NumBytesRem;
 8005932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	4413      	add	r3, r2
 8005938:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800593a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	4413      	add	r3, r2
 8005940:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800594a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	4413      	add	r3, r2
 8005950:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005954:	2b00      	cmp	r3, #0
 8005956:	d002      	beq.n	800595e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800595c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800595e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005960:	4618      	mov	r0, r3
 8005962:	3730      	adds	r7, #48	; 0x30
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	2000cbb4 	.word	0x2000cbb4

0800596c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800596c:	b580      	push	{r7, lr}
 800596e:	b088      	sub	sp, #32
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
 8005978:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800597a:	4b3d      	ldr	r3, [pc, #244]	; (8005a70 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800597c:	61bb      	str	r3, [r7, #24]
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <SEGGER_RTT_AllocUpBuffer+0x20>
 8005988:	f7ff ff10 	bl	80057ac <_DoInit>
  SEGGER_RTT_LOCK();
 800598c:	f3ef 8311 	mrs	r3, BASEPRI
 8005990:	f04f 0120 	mov.w	r1, #32
 8005994:	f381 8811 	msr	BASEPRI, r1
 8005998:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800599a:	4b35      	ldr	r3, [pc, #212]	; (8005a70 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800599c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800599e:	2300      	movs	r3, #0
 80059a0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80059a2:	6939      	ldr	r1, [r7, #16]
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	4613      	mov	r3, r2
 80059aa:	005b      	lsls	r3, r3, #1
 80059ac:	4413      	add	r3, r2
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	440b      	add	r3, r1
 80059b2:	3304      	adds	r3, #4
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d008      	beq.n	80059cc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	3301      	adds	r3, #1
 80059be:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	69fa      	ldr	r2, [r7, #28]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	dbeb      	blt.n	80059a2 <SEGGER_RTT_AllocUpBuffer+0x36>
 80059ca:	e000      	b.n	80059ce <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80059cc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	69fa      	ldr	r2, [r7, #28]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	da3f      	bge.n	8005a58 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80059d8:	6939      	ldr	r1, [r7, #16]
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	1c5a      	adds	r2, r3, #1
 80059de:	4613      	mov	r3, r2
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	4413      	add	r3, r2
 80059e4:	00db      	lsls	r3, r3, #3
 80059e6:	440b      	add	r3, r1
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80059ec:	6939      	ldr	r1, [r7, #16]
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	4613      	mov	r3, r2
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	4413      	add	r3, r2
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	440b      	add	r3, r1
 80059fc:	3304      	adds	r3, #4
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005a02:	6939      	ldr	r1, [r7, #16]
 8005a04:	69fa      	ldr	r2, [r7, #28]
 8005a06:	4613      	mov	r3, r2
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	4413      	add	r3, r2
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	440b      	add	r3, r1
 8005a10:	3320      	adds	r3, #32
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005a16:	6939      	ldr	r1, [r7, #16]
 8005a18:	69fa      	ldr	r2, [r7, #28]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	4413      	add	r3, r2
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	440b      	add	r3, r1
 8005a24:	3328      	adds	r3, #40	; 0x28
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005a2a:	6939      	ldr	r1, [r7, #16]
 8005a2c:	69fa      	ldr	r2, [r7, #28]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	4413      	add	r3, r2
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	440b      	add	r3, r1
 8005a38:	3324      	adds	r3, #36	; 0x24
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005a3e:	6939      	ldr	r1, [r7, #16]
 8005a40:	69fa      	ldr	r2, [r7, #28]
 8005a42:	4613      	mov	r3, r2
 8005a44:	005b      	lsls	r3, r3, #1
 8005a46:	4413      	add	r3, r2
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	440b      	add	r3, r1
 8005a4c:	332c      	adds	r3, #44	; 0x2c
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a52:	f3bf 8f5f 	dmb	sy
 8005a56:	e002      	b.n	8005a5e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005a58:	f04f 33ff 	mov.w	r3, #4294967295
 8005a5c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005a64:	69fb      	ldr	r3, [r7, #28]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3720      	adds	r7, #32
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	2000cbb4 	.word	0x2000cbb4

08005a74 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08a      	sub	sp, #40	; 0x28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
 8005a80:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005a82:	4b21      	ldr	r3, [pc, #132]	; (8005b08 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005a84:	623b      	str	r3, [r7, #32]
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005a90:	f7ff fe8c 	bl	80057ac <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005a94:	4b1c      	ldr	r3, [pc, #112]	; (8005b08 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005a96:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d82c      	bhi.n	8005af8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005a9e:	f3ef 8311 	mrs	r3, BASEPRI
 8005aa2:	f04f 0120 	mov.w	r1, #32
 8005aa6:	f381 8811 	msr	BASEPRI, r1
 8005aaa:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	4413      	add	r3, r2
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	3360      	adds	r3, #96	; 0x60
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	4413      	add	r3, r2
 8005abc:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00e      	beq.n	8005ae2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ae6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005ae8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005af2:	2300      	movs	r3, #0
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
 8005af6:	e002      	b.n	8005afe <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005af8:	f04f 33ff 	mov.w	r3, #4294967295
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3728      	adds	r7, #40	; 0x28
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	2000cbb4 	.word	0x2000cbb4

08005b0c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005b0c:	b480      	push	{r7}
 8005b0e:	b087      	sub	sp, #28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	60fa      	str	r2, [r7, #12]
 8005b22:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b80      	cmp	r3, #128	; 0x80
 8005b28:	d90a      	bls.n	8005b40 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005b2a:	2380      	movs	r3, #128	; 0x80
 8005b2c:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005b2e:	e007      	b.n	8005b40 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	1c53      	adds	r3, r2, #1
 8005b34:	60bb      	str	r3, [r7, #8]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	1c59      	adds	r1, r3, #1
 8005b3a:	60f9      	str	r1, [r7, #12]
 8005b3c:	7812      	ldrb	r2, [r2, #0]
 8005b3e:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	1e5a      	subs	r2, r3, #1
 8005b44:	607a      	str	r2, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <_EncodeStr+0x46>
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1ee      	bne.n	8005b30 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	371c      	adds	r7, #28
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3307      	adds	r3, #7
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005b8a:	4b35      	ldr	r3, [pc, #212]	; (8005c60 <_HandleIncomingPacket+0xdc>)
 8005b8c:	7e1b      	ldrb	r3, [r3, #24]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	1cfb      	adds	r3, r7, #3
 8005b92:	2201      	movs	r2, #1
 8005b94:	4619      	mov	r1, r3
 8005b96:	f7ff fe63 	bl	8005860 <SEGGER_RTT_ReadNoLock>
 8005b9a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d052      	beq.n	8005c48 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8005ba2:	78fb      	ldrb	r3, [r7, #3]
 8005ba4:	2b80      	cmp	r3, #128	; 0x80
 8005ba6:	d031      	beq.n	8005c0c <_HandleIncomingPacket+0x88>
 8005ba8:	2b80      	cmp	r3, #128	; 0x80
 8005baa:	dc40      	bgt.n	8005c2e <_HandleIncomingPacket+0xaa>
 8005bac:	2b07      	cmp	r3, #7
 8005bae:	dc15      	bgt.n	8005bdc <_HandleIncomingPacket+0x58>
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	dd3c      	ble.n	8005c2e <_HandleIncomingPacket+0xaa>
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	2b06      	cmp	r3, #6
 8005bb8:	d839      	bhi.n	8005c2e <_HandleIncomingPacket+0xaa>
 8005bba:	a201      	add	r2, pc, #4	; (adr r2, 8005bc0 <_HandleIncomingPacket+0x3c>)
 8005bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc0:	08005be3 	.word	0x08005be3
 8005bc4:	08005be9 	.word	0x08005be9
 8005bc8:	08005bef 	.word	0x08005bef
 8005bcc:	08005bf5 	.word	0x08005bf5
 8005bd0:	08005bfb 	.word	0x08005bfb
 8005bd4:	08005c01 	.word	0x08005c01
 8005bd8:	08005c07 	.word	0x08005c07
 8005bdc:	2b7f      	cmp	r3, #127	; 0x7f
 8005bde:	d035      	beq.n	8005c4c <_HandleIncomingPacket+0xc8>
 8005be0:	e025      	b.n	8005c2e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005be2:	f000 fcdd 	bl	80065a0 <SEGGER_SYSVIEW_Start>
      break;
 8005be6:	e036      	b.n	8005c56 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005be8:	f000 fd94 	bl	8006714 <SEGGER_SYSVIEW_Stop>
      break;
 8005bec:	e033      	b.n	8005c56 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005bee:	f000 ff6d 	bl	8006acc <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005bf2:	e030      	b.n	8005c56 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005bf4:	f000 ff32 	bl	8006a5c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005bf8:	e02d      	b.n	8005c56 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005bfa:	f000 fdb1 	bl	8006760 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005bfe:	e02a      	b.n	8005c56 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005c00:	f001 f98e 	bl	8006f20 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005c04:	e027      	b.n	8005c56 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005c06:	f001 f96d 	bl	8006ee4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005c0a:	e024      	b.n	8005c56 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c0c:	4b14      	ldr	r3, [pc, #80]	; (8005c60 <_HandleIncomingPacket+0xdc>)
 8005c0e:	7e1b      	ldrb	r3, [r3, #24]
 8005c10:	4618      	mov	r0, r3
 8005c12:	1cfb      	adds	r3, r7, #3
 8005c14:	2201      	movs	r2, #1
 8005c16:	4619      	mov	r1, r3
 8005c18:	f7ff fe22 	bl	8005860 <SEGGER_RTT_ReadNoLock>
 8005c1c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d015      	beq.n	8005c50 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005c24:	78fb      	ldrb	r3, [r7, #3]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f001 f8d2 	bl	8006dd0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005c2c:	e010      	b.n	8005c50 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005c2e:	78fb      	ldrb	r3, [r7, #3]
 8005c30:	b25b      	sxtb	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	da0e      	bge.n	8005c54 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c36:	4b0a      	ldr	r3, [pc, #40]	; (8005c60 <_HandleIncomingPacket+0xdc>)
 8005c38:	7e1b      	ldrb	r3, [r3, #24]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	1cfb      	adds	r3, r7, #3
 8005c3e:	2201      	movs	r2, #1
 8005c40:	4619      	mov	r1, r3
 8005c42:	f7ff fe0d 	bl	8005860 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005c46:	e005      	b.n	8005c54 <_HandleIncomingPacket+0xd0>
    }
  }
 8005c48:	bf00      	nop
 8005c4a:	e004      	b.n	8005c56 <_HandleIncomingPacket+0xd2>
      break;
 8005c4c:	bf00      	nop
 8005c4e:	e002      	b.n	8005c56 <_HandleIncomingPacket+0xd2>
      break;
 8005c50:	bf00      	nop
 8005c52:	e000      	b.n	8005c56 <_HandleIncomingPacket+0xd2>
      break;
 8005c54:	bf00      	nop
}
 8005c56:	bf00      	nop
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	2000d474 	.word	0x2000d474

08005c64 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b08c      	sub	sp, #48	; 0x30
 8005c68:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005c6e:	1d3b      	adds	r3, r7, #4
 8005c70:	3301      	adds	r3, #1
 8005c72:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c78:	4b31      	ldr	r3, [pc, #196]	; (8005d40 <_TrySendOverflowPacket+0xdc>)
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c7e:	e00b      	b.n	8005c98 <_TrySendOverflowPacket+0x34>
 8005c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c86:	1c59      	adds	r1, r3, #1
 8005c88:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c8e:	b2d2      	uxtb	r2, r2
 8005c90:	701a      	strb	r2, [r3, #0]
 8005c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c94:	09db      	lsrs	r3, r3, #7
 8005c96:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c9c:	d8f0      	bhi.n	8005c80 <_TrySendOverflowPacket+0x1c>
 8005c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	701a      	strb	r2, [r3, #0]
 8005caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cac:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005cae:	4b25      	ldr	r3, [pc, #148]	; (8005d44 <_TrySendOverflowPacket+0xe0>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005cb4:	4b22      	ldr	r3, [pc, #136]	; (8005d40 <_TrySendOverflowPacket+0xdc>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	623b      	str	r3, [r7, #32]
 8005cc6:	e00b      	b.n	8005ce0 <_TrySendOverflowPacket+0x7c>
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cce:	1c59      	adds	r1, r3, #1
 8005cd0:	6279      	str	r1, [r7, #36]	; 0x24
 8005cd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cd6:	b2d2      	uxtb	r2, r2
 8005cd8:	701a      	strb	r2, [r3, #0]
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	09db      	lsrs	r3, r3, #7
 8005cde:	623b      	str	r3, [r7, #32]
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ce4:	d8f0      	bhi.n	8005cc8 <_TrySendOverflowPacket+0x64>
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	627a      	str	r2, [r7, #36]	; 0x24
 8005cec:	6a3a      	ldr	r2, [r7, #32]
 8005cee:	b2d2      	uxtb	r2, r2
 8005cf0:	701a      	strb	r2, [r3, #0]
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005cf6:	4b12      	ldr	r3, [pc, #72]	; (8005d40 <_TrySendOverflowPacket+0xdc>)
 8005cf8:	785b      	ldrb	r3, [r3, #1]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	1d3b      	adds	r3, r7, #4
 8005cfe:	69fa      	ldr	r2, [r7, #28]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	461a      	mov	r2, r3
 8005d04:	1d3b      	adds	r3, r7, #4
 8005d06:	4619      	mov	r1, r3
 8005d08:	f7fa fa6a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d009      	beq.n	8005d2a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005d16:	4a0a      	ldr	r2, [pc, #40]	; (8005d40 <_TrySendOverflowPacket+0xdc>)
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005d1c:	4b08      	ldr	r3, [pc, #32]	; (8005d40 <_TrySendOverflowPacket+0xdc>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	4b06      	ldr	r3, [pc, #24]	; (8005d40 <_TrySendOverflowPacket+0xdc>)
 8005d26:	701a      	strb	r2, [r3, #0]
 8005d28:	e004      	b.n	8005d34 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005d2a:	4b05      	ldr	r3, [pc, #20]	; (8005d40 <_TrySendOverflowPacket+0xdc>)
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	4a03      	ldr	r2, [pc, #12]	; (8005d40 <_TrySendOverflowPacket+0xdc>)
 8005d32:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005d34:	693b      	ldr	r3, [r7, #16]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3730      	adds	r7, #48	; 0x30
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	2000d474 	.word	0x2000d474
 8005d44:	e0001004 	.word	0xe0001004

08005d48 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08a      	sub	sp, #40	; 0x28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005d54:	4b98      	ldr	r3, [pc, #608]	; (8005fb8 <_SendPacket+0x270>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d010      	beq.n	8005d7e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005d5c:	4b96      	ldr	r3, [pc, #600]	; (8005fb8 <_SendPacket+0x270>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 812d 	beq.w	8005fc0 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005d66:	4b94      	ldr	r3, [pc, #592]	; (8005fb8 <_SendPacket+0x270>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d109      	bne.n	8005d82 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005d6e:	f7ff ff79 	bl	8005c64 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005d72:	4b91      	ldr	r3, [pc, #580]	; (8005fb8 <_SendPacket+0x270>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	f040 8124 	bne.w	8005fc4 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8005d7c:	e001      	b.n	8005d82 <_SendPacket+0x3a>
    goto Send;
 8005d7e:	bf00      	nop
 8005d80:	e000      	b.n	8005d84 <_SendPacket+0x3c>
Send:
 8005d82:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b1f      	cmp	r3, #31
 8005d88:	d809      	bhi.n	8005d9e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005d8a:	4b8b      	ldr	r3, [pc, #556]	; (8005fb8 <_SendPacket+0x270>)
 8005d8c:	69da      	ldr	r2, [r3, #28]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	fa22 f303 	lsr.w	r3, r2, r3
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f040 8115 	bne.w	8005fc8 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b17      	cmp	r3, #23
 8005da2:	d807      	bhi.n	8005db4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	701a      	strb	r2, [r3, #0]
 8005db2:	e0c4      	b.n	8005f3e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	2b7f      	cmp	r3, #127	; 0x7f
 8005dc0:	d912      	bls.n	8005de8 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	09da      	lsrs	r2, r3, #7
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	b2d2      	uxtb	r2, r2
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	3a01      	subs	r2, #1
 8005dda:	60fa      	str	r2, [r7, #12]
 8005ddc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	701a      	strb	r2, [r3, #0]
 8005de6:	e006      	b.n	8005df6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	60fb      	str	r3, [r7, #12]
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2b7e      	cmp	r3, #126	; 0x7e
 8005dfa:	d807      	bhi.n	8005e0c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	60fb      	str	r3, [r7, #12]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	701a      	strb	r2, [r3, #0]
 8005e0a:	e098      	b.n	8005f3e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e12:	d212      	bcs.n	8005e3a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	09da      	lsrs	r2, r3, #7
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	60fb      	str	r3, [r7, #12]
 8005e1e:	b2d2      	uxtb	r2, r2
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	3a01      	subs	r2, #1
 8005e2c:	60fa      	str	r2, [r7, #12]
 8005e2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	701a      	strb	r2, [r3, #0]
 8005e38:	e081      	b.n	8005f3e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e40:	d21d      	bcs.n	8005e7e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	0b9a      	lsrs	r2, r3, #14
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	b2d2      	uxtb	r2, r2
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	09db      	lsrs	r3, r3, #7
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	3a01      	subs	r2, #1
 8005e5c:	60fa      	str	r2, [r7, #12]
 8005e5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e62:	b2da      	uxtb	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	3a01      	subs	r2, #1
 8005e70:	60fa      	str	r2, [r7, #12]
 8005e72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	701a      	strb	r2, [r3, #0]
 8005e7c:	e05f      	b.n	8005f3e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e84:	d228      	bcs.n	8005ed8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	0d5a      	lsrs	r2, r3, #21
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	b2d2      	uxtb	r2, r2
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	0b9b      	lsrs	r3, r3, #14
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	3a01      	subs	r2, #1
 8005ea0:	60fa      	str	r2, [r7, #12]
 8005ea2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ea6:	b2da      	uxtb	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	09db      	lsrs	r3, r3, #7
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	3a01      	subs	r2, #1
 8005eb6:	60fa      	str	r2, [r7, #12]
 8005eb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	3a01      	subs	r2, #1
 8005eca:	60fa      	str	r2, [r7, #12]
 8005ecc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	701a      	strb	r2, [r3, #0]
 8005ed6:	e032      	b.n	8005f3e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	0f1a      	lsrs	r2, r3, #28
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	60fb      	str	r3, [r7, #12]
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	0d5b      	lsrs	r3, r3, #21
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	3a01      	subs	r2, #1
 8005ef2:	60fa      	str	r2, [r7, #12]
 8005ef4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	0b9b      	lsrs	r3, r3, #14
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	3a01      	subs	r2, #1
 8005f08:	60fa      	str	r2, [r7, #12]
 8005f0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	09db      	lsrs	r3, r3, #7
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	3a01      	subs	r2, #1
 8005f1e:	60fa      	str	r2, [r7, #12]
 8005f20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	3a01      	subs	r2, #1
 8005f32:	60fa      	str	r2, [r7, #12]
 8005f34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f3e:	4b1f      	ldr	r3, [pc, #124]	; (8005fbc <_SendPacket+0x274>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005f44:	4b1c      	ldr	r3, [pc, #112]	; (8005fb8 <_SendPacket+0x270>)
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	627b      	str	r3, [r7, #36]	; 0x24
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	623b      	str	r3, [r7, #32]
 8005f56:	e00b      	b.n	8005f70 <_SendPacket+0x228>
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	1c59      	adds	r1, r3, #1
 8005f60:	6279      	str	r1, [r7, #36]	; 0x24
 8005f62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f66:	b2d2      	uxtb	r2, r2
 8005f68:	701a      	strb	r2, [r3, #0]
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	09db      	lsrs	r3, r3, #7
 8005f6e:	623b      	str	r3, [r7, #32]
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	2b7f      	cmp	r3, #127	; 0x7f
 8005f74:	d8f0      	bhi.n	8005f58 <_SendPacket+0x210>
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	1c5a      	adds	r2, r3, #1
 8005f7a:	627a      	str	r2, [r7, #36]	; 0x24
 8005f7c:	6a3a      	ldr	r2, [r7, #32]
 8005f7e:	b2d2      	uxtb	r2, r2
 8005f80:	701a      	strb	r2, [r3, #0]
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005f86:	4b0c      	ldr	r3, [pc, #48]	; (8005fb8 <_SendPacket+0x270>)
 8005f88:	785b      	ldrb	r3, [r3, #1]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	461a      	mov	r2, r3
 8005f94:	68f9      	ldr	r1, [r7, #12]
 8005f96:	f7fa f923 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005f9a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005fa2:	4a05      	ldr	r2, [pc, #20]	; (8005fb8 <_SendPacket+0x270>)
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	60d3      	str	r3, [r2, #12]
 8005fa8:	e00f      	b.n	8005fca <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005faa:	4b03      	ldr	r3, [pc, #12]	; (8005fb8 <_SendPacket+0x270>)
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	4b01      	ldr	r3, [pc, #4]	; (8005fb8 <_SendPacket+0x270>)
 8005fb4:	701a      	strb	r2, [r3, #0]
 8005fb6:	e008      	b.n	8005fca <_SendPacket+0x282>
 8005fb8:	2000d474 	.word	0x2000d474
 8005fbc:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005fc0:	bf00      	nop
 8005fc2:	e002      	b.n	8005fca <_SendPacket+0x282>
      goto SendDone;
 8005fc4:	bf00      	nop
 8005fc6:	e000      	b.n	8005fca <_SendPacket+0x282>
      goto SendDone;
 8005fc8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005fca:	4b14      	ldr	r3, [pc, #80]	; (800601c <_SendPacket+0x2d4>)
 8005fcc:	7e1b      	ldrb	r3, [r3, #24]
 8005fce:	4619      	mov	r1, r3
 8005fd0:	4a13      	ldr	r2, [pc, #76]	; (8006020 <_SendPacket+0x2d8>)
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	440b      	add	r3, r1
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	4413      	add	r3, r2
 8005fdc:	336c      	adds	r3, #108	; 0x6c
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	4b0e      	ldr	r3, [pc, #56]	; (800601c <_SendPacket+0x2d4>)
 8005fe2:	7e1b      	ldrb	r3, [r3, #24]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	490e      	ldr	r1, [pc, #56]	; (8006020 <_SendPacket+0x2d8>)
 8005fe8:	4603      	mov	r3, r0
 8005fea:	005b      	lsls	r3, r3, #1
 8005fec:	4403      	add	r3, r0
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	440b      	add	r3, r1
 8005ff2:	3370      	adds	r3, #112	; 0x70
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d00b      	beq.n	8006012 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005ffa:	4b08      	ldr	r3, [pc, #32]	; (800601c <_SendPacket+0x2d4>)
 8005ffc:	789b      	ldrb	r3, [r3, #2]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d107      	bne.n	8006012 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006002:	4b06      	ldr	r3, [pc, #24]	; (800601c <_SendPacket+0x2d4>)
 8006004:	2201      	movs	r2, #1
 8006006:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006008:	f7ff fdbc 	bl	8005b84 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800600c:	4b03      	ldr	r3, [pc, #12]	; (800601c <_SendPacket+0x2d4>)
 800600e:	2200      	movs	r2, #0
 8006010:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006012:	bf00      	nop
 8006014:	3728      	adds	r7, #40	; 0x28
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	2000d474 	.word	0x2000d474
 8006020:	2000cbb4 	.word	0x2000cbb4

08006024 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af02      	add	r7, sp, #8
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
 8006030:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006032:	2300      	movs	r3, #0
 8006034:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006038:	4917      	ldr	r1, [pc, #92]	; (8006098 <SEGGER_SYSVIEW_Init+0x74>)
 800603a:	4818      	ldr	r0, [pc, #96]	; (800609c <SEGGER_SYSVIEW_Init+0x78>)
 800603c:	f7ff fc96 	bl	800596c <SEGGER_RTT_AllocUpBuffer>
 8006040:	4603      	mov	r3, r0
 8006042:	b2da      	uxtb	r2, r3
 8006044:	4b16      	ldr	r3, [pc, #88]	; (80060a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006046:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006048:	4b15      	ldr	r3, [pc, #84]	; (80060a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800604a:	785a      	ldrb	r2, [r3, #1]
 800604c:	4b14      	ldr	r3, [pc, #80]	; (80060a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800604e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006050:	4b13      	ldr	r3, [pc, #76]	; (80060a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006052:	7e1b      	ldrb	r3, [r3, #24]
 8006054:	4618      	mov	r0, r3
 8006056:	2300      	movs	r3, #0
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	2308      	movs	r3, #8
 800605c:	4a11      	ldr	r2, [pc, #68]	; (80060a4 <SEGGER_SYSVIEW_Init+0x80>)
 800605e:	490f      	ldr	r1, [pc, #60]	; (800609c <SEGGER_SYSVIEW_Init+0x78>)
 8006060:	f7ff fd08 	bl	8005a74 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006064:	4b0e      	ldr	r3, [pc, #56]	; (80060a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006066:	2200      	movs	r2, #0
 8006068:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800606a:	4b0f      	ldr	r3, [pc, #60]	; (80060a8 <SEGGER_SYSVIEW_Init+0x84>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a0c      	ldr	r2, [pc, #48]	; (80060a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006070:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006072:	4a0b      	ldr	r2, [pc, #44]	; (80060a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006078:	4a09      	ldr	r2, [pc, #36]	; (80060a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800607e:	4a08      	ldr	r2, [pc, #32]	; (80060a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006084:	4a06      	ldr	r2, [pc, #24]	; (80060a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800608a:	4b05      	ldr	r3, [pc, #20]	; (80060a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800608c:	2200      	movs	r2, #0
 800608e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006090:	bf00      	nop
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	2000d06c 	.word	0x2000d06c
 800609c:	08007b1c 	.word	0x08007b1c
 80060a0:	2000d474 	.word	0x2000d474
 80060a4:	2000d46c 	.word	0x2000d46c
 80060a8:	e0001004 	.word	0xe0001004

080060ac <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80060b4:	4a04      	ldr	r2, [pc, #16]	; (80060c8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6113      	str	r3, [r2, #16]
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	2000d474 	.word	0x2000d474

080060cc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80060d4:	f3ef 8311 	mrs	r3, BASEPRI
 80060d8:	f04f 0120 	mov.w	r1, #32
 80060dc:	f381 8811 	msr	BASEPRI, r1
 80060e0:	60fb      	str	r3, [r7, #12]
 80060e2:	4808      	ldr	r0, [pc, #32]	; (8006104 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80060e4:	f7ff fd42 	bl	8005b6c <_PreparePacket>
 80060e8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	68b9      	ldr	r1, [r7, #8]
 80060ee:	68b8      	ldr	r0, [r7, #8]
 80060f0:	f7ff fe2a 	bl	8005d48 <_SendPacket>
  RECORD_END();
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f383 8811 	msr	BASEPRI, r3
}
 80060fa:	bf00      	nop
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	2000d4a4 	.word	0x2000d4a4

08006108 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006108:	b580      	push	{r7, lr}
 800610a:	b088      	sub	sp, #32
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006112:	f3ef 8311 	mrs	r3, BASEPRI
 8006116:	f04f 0120 	mov.w	r1, #32
 800611a:	f381 8811 	msr	BASEPRI, r1
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	4816      	ldr	r0, [pc, #88]	; (800617c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006122:	f7ff fd23 	bl	8005b6c <_PreparePacket>
 8006126:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	61fb      	str	r3, [r7, #28]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	61bb      	str	r3, [r7, #24]
 8006134:	e00b      	b.n	800614e <SEGGER_SYSVIEW_RecordU32+0x46>
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	b2da      	uxtb	r2, r3
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	1c59      	adds	r1, r3, #1
 800613e:	61f9      	str	r1, [r7, #28]
 8006140:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006144:	b2d2      	uxtb	r2, r2
 8006146:	701a      	strb	r2, [r3, #0]
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	09db      	lsrs	r3, r3, #7
 800614c:	61bb      	str	r3, [r7, #24]
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	2b7f      	cmp	r3, #127	; 0x7f
 8006152:	d8f0      	bhi.n	8006136 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	61fa      	str	r2, [r7, #28]
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	b2d2      	uxtb	r2, r2
 800615e:	701a      	strb	r2, [r3, #0]
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	68f9      	ldr	r1, [r7, #12]
 8006168:	6938      	ldr	r0, [r7, #16]
 800616a:	f7ff fded 	bl	8005d48 <_SendPacket>
  RECORD_END();
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f383 8811 	msr	BASEPRI, r3
}
 8006174:	bf00      	nop
 8006176:	3720      	adds	r7, #32
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	2000d4a4 	.word	0x2000d4a4

08006180 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006180:	b580      	push	{r7, lr}
 8006182:	b08c      	sub	sp, #48	; 0x30
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800618c:	f3ef 8311 	mrs	r3, BASEPRI
 8006190:	f04f 0120 	mov.w	r1, #32
 8006194:	f381 8811 	msr	BASEPRI, r1
 8006198:	61fb      	str	r3, [r7, #28]
 800619a:	4825      	ldr	r0, [pc, #148]	; (8006230 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800619c:	f7ff fce6 	bl	8005b6c <_PreparePacket>
 80061a0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80061ae:	e00b      	b.n	80061c8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80061b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b6:	1c59      	adds	r1, r3, #1
 80061b8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061be:	b2d2      	uxtb	r2, r2
 80061c0:	701a      	strb	r2, [r3, #0]
 80061c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c4:	09db      	lsrs	r3, r3, #7
 80061c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80061c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ca:	2b7f      	cmp	r3, #127	; 0x7f
 80061cc:	d8f0      	bhi.n	80061b0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80061ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061d6:	b2d2      	uxtb	r2, r2
 80061d8:	701a      	strb	r2, [r3, #0]
 80061da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061dc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	623b      	str	r3, [r7, #32]
 80061e6:	e00b      	b.n	8006200 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80061e8:	6a3b      	ldr	r3, [r7, #32]
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ee:	1c59      	adds	r1, r3, #1
 80061f0:	6279      	str	r1, [r7, #36]	; 0x24
 80061f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061f6:	b2d2      	uxtb	r2, r2
 80061f8:	701a      	strb	r2, [r3, #0]
 80061fa:	6a3b      	ldr	r3, [r7, #32]
 80061fc:	09db      	lsrs	r3, r3, #7
 80061fe:	623b      	str	r3, [r7, #32]
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	2b7f      	cmp	r3, #127	; 0x7f
 8006204:	d8f0      	bhi.n	80061e8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	627a      	str	r2, [r7, #36]	; 0x24
 800620c:	6a3a      	ldr	r2, [r7, #32]
 800620e:	b2d2      	uxtb	r2, r2
 8006210:	701a      	strb	r2, [r3, #0]
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	6979      	ldr	r1, [r7, #20]
 800621a:	69b8      	ldr	r0, [r7, #24]
 800621c:	f7ff fd94 	bl	8005d48 <_SendPacket>
  RECORD_END();
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	f383 8811 	msr	BASEPRI, r3
}
 8006226:	bf00      	nop
 8006228:	3730      	adds	r7, #48	; 0x30
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	2000d4a4 	.word	0x2000d4a4

08006234 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006234:	b580      	push	{r7, lr}
 8006236:	b08e      	sub	sp, #56	; 0x38
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
 8006240:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006242:	f3ef 8311 	mrs	r3, BASEPRI
 8006246:	f04f 0120 	mov.w	r1, #32
 800624a:	f381 8811 	msr	BASEPRI, r1
 800624e:	61fb      	str	r3, [r7, #28]
 8006250:	4832      	ldr	r0, [pc, #200]	; (800631c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006252:	f7ff fc8b 	bl	8005b6c <_PreparePacket>
 8006256:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	637b      	str	r3, [r7, #52]	; 0x34
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	633b      	str	r3, [r7, #48]	; 0x30
 8006264:	e00b      	b.n	800627e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	b2da      	uxtb	r2, r3
 800626a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626c:	1c59      	adds	r1, r3, #1
 800626e:	6379      	str	r1, [r7, #52]	; 0x34
 8006270:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006274:	b2d2      	uxtb	r2, r2
 8006276:	701a      	strb	r2, [r3, #0]
 8006278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627a:	09db      	lsrs	r3, r3, #7
 800627c:	633b      	str	r3, [r7, #48]	; 0x30
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	2b7f      	cmp	r3, #127	; 0x7f
 8006282:	d8f0      	bhi.n	8006266 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	637a      	str	r2, [r7, #52]	; 0x34
 800628a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800628c:	b2d2      	uxtb	r2, r2
 800628e:	701a      	strb	r2, [r3, #0]
 8006290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006292:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	62bb      	str	r3, [r7, #40]	; 0x28
 800629c:	e00b      	b.n	80062b6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800629e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a4:	1c59      	adds	r1, r3, #1
 80062a6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80062a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062ac:	b2d2      	uxtb	r2, r2
 80062ae:	701a      	strb	r2, [r3, #0]
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	09db      	lsrs	r3, r3, #7
 80062b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	2b7f      	cmp	r3, #127	; 0x7f
 80062ba:	d8f0      	bhi.n	800629e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80062bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062be:	1c5a      	adds	r2, r3, #1
 80062c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062c4:	b2d2      	uxtb	r2, r2
 80062c6:	701a      	strb	r2, [r3, #0]
 80062c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	627b      	str	r3, [r7, #36]	; 0x24
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	623b      	str	r3, [r7, #32]
 80062d4:	e00b      	b.n	80062ee <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80062d6:	6a3b      	ldr	r3, [r7, #32]
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	1c59      	adds	r1, r3, #1
 80062de:	6279      	str	r1, [r7, #36]	; 0x24
 80062e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	701a      	strb	r2, [r3, #0]
 80062e8:	6a3b      	ldr	r3, [r7, #32]
 80062ea:	09db      	lsrs	r3, r3, #7
 80062ec:	623b      	str	r3, [r7, #32]
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	2b7f      	cmp	r3, #127	; 0x7f
 80062f2:	d8f0      	bhi.n	80062d6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80062f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f6:	1c5a      	adds	r2, r3, #1
 80062f8:	627a      	str	r2, [r7, #36]	; 0x24
 80062fa:	6a3a      	ldr	r2, [r7, #32]
 80062fc:	b2d2      	uxtb	r2, r2
 80062fe:	701a      	strb	r2, [r3, #0]
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	6979      	ldr	r1, [r7, #20]
 8006308:	69b8      	ldr	r0, [r7, #24]
 800630a:	f7ff fd1d 	bl	8005d48 <_SendPacket>
  RECORD_END();
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	f383 8811 	msr	BASEPRI, r3
}
 8006314:	bf00      	nop
 8006316:	3738      	adds	r7, #56	; 0x38
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	2000d4a4 	.word	0x2000d4a4

08006320 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006320:	b580      	push	{r7, lr}
 8006322:	b090      	sub	sp, #64	; 0x40
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
 800632c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800632e:	f3ef 8311 	mrs	r3, BASEPRI
 8006332:	f04f 0120 	mov.w	r1, #32
 8006336:	f381 8811 	msr	BASEPRI, r1
 800633a:	61fb      	str	r3, [r7, #28]
 800633c:	4840      	ldr	r0, [pc, #256]	; (8006440 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800633e:	f7ff fc15 	bl	8005b6c <_PreparePacket>
 8006342:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006350:	e00b      	b.n	800636a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006354:	b2da      	uxtb	r2, r3
 8006356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006358:	1c59      	adds	r1, r3, #1
 800635a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800635c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006366:	09db      	lsrs	r3, r3, #7
 8006368:	63bb      	str	r3, [r7, #56]	; 0x38
 800636a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636c:	2b7f      	cmp	r3, #127	; 0x7f
 800636e:	d8f0      	bhi.n	8006352 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006376:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006378:	b2d2      	uxtb	r2, r2
 800637a:	701a      	strb	r2, [r3, #0]
 800637c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800637e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	637b      	str	r3, [r7, #52]	; 0x34
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	633b      	str	r3, [r7, #48]	; 0x30
 8006388:	e00b      	b.n	80063a2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800638a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638c:	b2da      	uxtb	r2, r3
 800638e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006390:	1c59      	adds	r1, r3, #1
 8006392:	6379      	str	r1, [r7, #52]	; 0x34
 8006394:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006398:	b2d2      	uxtb	r2, r2
 800639a:	701a      	strb	r2, [r3, #0]
 800639c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639e:	09db      	lsrs	r3, r3, #7
 80063a0:	633b      	str	r3, [r7, #48]	; 0x30
 80063a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a4:	2b7f      	cmp	r3, #127	; 0x7f
 80063a6:	d8f0      	bhi.n	800638a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80063a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063aa:	1c5a      	adds	r2, r3, #1
 80063ac:	637a      	str	r2, [r7, #52]	; 0x34
 80063ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063b0:	b2d2      	uxtb	r2, r2
 80063b2:	701a      	strb	r2, [r3, #0]
 80063b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	62bb      	str	r3, [r7, #40]	; 0x28
 80063c0:	e00b      	b.n	80063da <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80063c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c8:	1c59      	adds	r1, r3, #1
 80063ca:	62f9      	str	r1, [r7, #44]	; 0x2c
 80063cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063d0:	b2d2      	uxtb	r2, r2
 80063d2:	701a      	strb	r2, [r3, #0]
 80063d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d6:	09db      	lsrs	r3, r3, #7
 80063d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80063da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063dc:	2b7f      	cmp	r3, #127	; 0x7f
 80063de:	d8f0      	bhi.n	80063c2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80063e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063e8:	b2d2      	uxtb	r2, r2
 80063ea:	701a      	strb	r2, [r3, #0]
 80063ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	627b      	str	r3, [r7, #36]	; 0x24
 80063f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063f6:	623b      	str	r3, [r7, #32]
 80063f8:	e00b      	b.n	8006412 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	1c59      	adds	r1, r3, #1
 8006402:	6279      	str	r1, [r7, #36]	; 0x24
 8006404:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006408:	b2d2      	uxtb	r2, r2
 800640a:	701a      	strb	r2, [r3, #0]
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	09db      	lsrs	r3, r3, #7
 8006410:	623b      	str	r3, [r7, #32]
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	2b7f      	cmp	r3, #127	; 0x7f
 8006416:	d8f0      	bhi.n	80063fa <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	1c5a      	adds	r2, r3, #1
 800641c:	627a      	str	r2, [r7, #36]	; 0x24
 800641e:	6a3a      	ldr	r2, [r7, #32]
 8006420:	b2d2      	uxtb	r2, r2
 8006422:	701a      	strb	r2, [r3, #0]
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	6979      	ldr	r1, [r7, #20]
 800642c:	69b8      	ldr	r0, [r7, #24]
 800642e:	f7ff fc8b 	bl	8005d48 <_SendPacket>
  RECORD_END();
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	f383 8811 	msr	BASEPRI, r3
}
 8006438:	bf00      	nop
 800643a:	3740      	adds	r7, #64	; 0x40
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	2000d4a4 	.word	0x2000d4a4

08006444 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8006444:	b580      	push	{r7, lr}
 8006446:	b092      	sub	sp, #72	; 0x48
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
 8006450:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8006452:	f3ef 8311 	mrs	r3, BASEPRI
 8006456:	f04f 0120 	mov.w	r1, #32
 800645a:	f381 8811 	msr	BASEPRI, r1
 800645e:	61fb      	str	r3, [r7, #28]
 8006460:	484e      	ldr	r0, [pc, #312]	; (800659c <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8006462:	f7ff fb83 	bl	8005b6c <_PreparePacket>
 8006466:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	647b      	str	r3, [r7, #68]	; 0x44
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	643b      	str	r3, [r7, #64]	; 0x40
 8006474:	e00b      	b.n	800648e <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8006476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006478:	b2da      	uxtb	r2, r3
 800647a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800647c:	1c59      	adds	r1, r3, #1
 800647e:	6479      	str	r1, [r7, #68]	; 0x44
 8006480:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006484:	b2d2      	uxtb	r2, r2
 8006486:	701a      	strb	r2, [r3, #0]
 8006488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800648a:	09db      	lsrs	r3, r3, #7
 800648c:	643b      	str	r3, [r7, #64]	; 0x40
 800648e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006490:	2b7f      	cmp	r3, #127	; 0x7f
 8006492:	d8f0      	bhi.n	8006476 <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8006494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006496:	1c5a      	adds	r2, r3, #1
 8006498:	647a      	str	r2, [r7, #68]	; 0x44
 800649a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800649c:	b2d2      	uxtb	r2, r2
 800649e:	701a      	strb	r2, [r3, #0]
 80064a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80064ac:	e00b      	b.n	80064c6 <SEGGER_SYSVIEW_RecordU32x5+0x82>
 80064ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b4:	1c59      	adds	r1, r3, #1
 80064b6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80064b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064bc:	b2d2      	uxtb	r2, r2
 80064be:	701a      	strb	r2, [r3, #0]
 80064c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c2:	09db      	lsrs	r3, r3, #7
 80064c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80064c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c8:	2b7f      	cmp	r3, #127	; 0x7f
 80064ca:	d8f0      	bhi.n	80064ae <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 80064cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ce:	1c5a      	adds	r2, r3, #1
 80064d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80064d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064d4:	b2d2      	uxtb	r2, r2
 80064d6:	701a      	strb	r2, [r3, #0]
 80064d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	637b      	str	r3, [r7, #52]	; 0x34
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	633b      	str	r3, [r7, #48]	; 0x30
 80064e4:	e00b      	b.n	80064fe <SEGGER_SYSVIEW_RecordU32x5+0xba>
 80064e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ec:	1c59      	adds	r1, r3, #1
 80064ee:	6379      	str	r1, [r7, #52]	; 0x34
 80064f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064f4:	b2d2      	uxtb	r2, r2
 80064f6:	701a      	strb	r2, [r3, #0]
 80064f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fa:	09db      	lsrs	r3, r3, #7
 80064fc:	633b      	str	r3, [r7, #48]	; 0x30
 80064fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006500:	2b7f      	cmp	r3, #127	; 0x7f
 8006502:	d8f0      	bhi.n	80064e6 <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8006504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	637a      	str	r2, [r7, #52]	; 0x34
 800650a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800650c:	b2d2      	uxtb	r2, r2
 800650e:	701a      	strb	r2, [r3, #0]
 8006510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006512:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800651a:	62bb      	str	r3, [r7, #40]	; 0x28
 800651c:	e00b      	b.n	8006536 <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 800651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006520:	b2da      	uxtb	r2, r3
 8006522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006524:	1c59      	adds	r1, r3, #1
 8006526:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006528:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800652c:	b2d2      	uxtb	r2, r2
 800652e:	701a      	strb	r2, [r3, #0]
 8006530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006532:	09db      	lsrs	r3, r3, #7
 8006534:	62bb      	str	r3, [r7, #40]	; 0x28
 8006536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006538:	2b7f      	cmp	r3, #127	; 0x7f
 800653a:	d8f0      	bhi.n	800651e <SEGGER_SYSVIEW_RecordU32x5+0xda>
 800653c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653e:	1c5a      	adds	r2, r3, #1
 8006540:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006544:	b2d2      	uxtb	r2, r2
 8006546:	701a      	strb	r2, [r3, #0]
 8006548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	627b      	str	r3, [r7, #36]	; 0x24
 8006550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006552:	623b      	str	r3, [r7, #32]
 8006554:	e00b      	b.n	800656e <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	b2da      	uxtb	r2, r3
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	1c59      	adds	r1, r3, #1
 800655e:	6279      	str	r1, [r7, #36]	; 0x24
 8006560:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006564:	b2d2      	uxtb	r2, r2
 8006566:	701a      	strb	r2, [r3, #0]
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	09db      	lsrs	r3, r3, #7
 800656c:	623b      	str	r3, [r7, #32]
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	2b7f      	cmp	r3, #127	; 0x7f
 8006572:	d8f0      	bhi.n	8006556 <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	1c5a      	adds	r2, r3, #1
 8006578:	627a      	str	r2, [r7, #36]	; 0x24
 800657a:	6a3a      	ldr	r2, [r7, #32]
 800657c:	b2d2      	uxtb	r2, r2
 800657e:	701a      	strb	r2, [r3, #0]
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	6979      	ldr	r1, [r7, #20]
 8006588:	69b8      	ldr	r0, [r7, #24]
 800658a:	f7ff fbdd 	bl	8005d48 <_SendPacket>
  RECORD_END();
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	f383 8811 	msr	BASEPRI, r3
}
 8006594:	bf00      	nop
 8006596:	3748      	adds	r7, #72	; 0x48
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	2000d4a4 	.word	0x2000d4a4

080065a0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08c      	sub	sp, #48	; 0x30
 80065a4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80065a6:	4b58      	ldr	r3, [pc, #352]	; (8006708 <SEGGER_SYSVIEW_Start+0x168>)
 80065a8:	2201      	movs	r2, #1
 80065aa:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80065ac:	f3ef 8311 	mrs	r3, BASEPRI
 80065b0:	f04f 0120 	mov.w	r1, #32
 80065b4:	f381 8811 	msr	BASEPRI, r1
 80065b8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80065ba:	4b53      	ldr	r3, [pc, #332]	; (8006708 <SEGGER_SYSVIEW_Start+0x168>)
 80065bc:	785b      	ldrb	r3, [r3, #1]
 80065be:	220a      	movs	r2, #10
 80065c0:	4952      	ldr	r1, [pc, #328]	; (800670c <SEGGER_SYSVIEW_Start+0x16c>)
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7f9 fe0c 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80065ce:	200a      	movs	r0, #10
 80065d0:	f7ff fd7c 	bl	80060cc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80065d4:	f3ef 8311 	mrs	r3, BASEPRI
 80065d8:	f04f 0120 	mov.w	r1, #32
 80065dc:	f381 8811 	msr	BASEPRI, r1
 80065e0:	60bb      	str	r3, [r7, #8]
 80065e2:	484b      	ldr	r0, [pc, #300]	; (8006710 <SEGGER_SYSVIEW_Start+0x170>)
 80065e4:	f7ff fac2 	bl	8005b6c <_PreparePacket>
 80065e8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065f2:	4b45      	ldr	r3, [pc, #276]	; (8006708 <SEGGER_SYSVIEW_Start+0x168>)
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80065f8:	e00b      	b.n	8006612 <SEGGER_SYSVIEW_Start+0x72>
 80065fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006600:	1c59      	adds	r1, r3, #1
 8006602:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006604:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006608:	b2d2      	uxtb	r2, r2
 800660a:	701a      	strb	r2, [r3, #0]
 800660c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660e:	09db      	lsrs	r3, r3, #7
 8006610:	62bb      	str	r3, [r7, #40]	; 0x28
 8006612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006614:	2b7f      	cmp	r3, #127	; 0x7f
 8006616:	d8f0      	bhi.n	80065fa <SEGGER_SYSVIEW_Start+0x5a>
 8006618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661a:	1c5a      	adds	r2, r3, #1
 800661c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800661e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006620:	b2d2      	uxtb	r2, r2
 8006622:	701a      	strb	r2, [r3, #0]
 8006624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006626:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	627b      	str	r3, [r7, #36]	; 0x24
 800662c:	4b36      	ldr	r3, [pc, #216]	; (8006708 <SEGGER_SYSVIEW_Start+0x168>)
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	623b      	str	r3, [r7, #32]
 8006632:	e00b      	b.n	800664c <SEGGER_SYSVIEW_Start+0xac>
 8006634:	6a3b      	ldr	r3, [r7, #32]
 8006636:	b2da      	uxtb	r2, r3
 8006638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663a:	1c59      	adds	r1, r3, #1
 800663c:	6279      	str	r1, [r7, #36]	; 0x24
 800663e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006642:	b2d2      	uxtb	r2, r2
 8006644:	701a      	strb	r2, [r3, #0]
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	09db      	lsrs	r3, r3, #7
 800664a:	623b      	str	r3, [r7, #32]
 800664c:	6a3b      	ldr	r3, [r7, #32]
 800664e:	2b7f      	cmp	r3, #127	; 0x7f
 8006650:	d8f0      	bhi.n	8006634 <SEGGER_SYSVIEW_Start+0x94>
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	1c5a      	adds	r2, r3, #1
 8006656:	627a      	str	r2, [r7, #36]	; 0x24
 8006658:	6a3a      	ldr	r2, [r7, #32]
 800665a:	b2d2      	uxtb	r2, r2
 800665c:	701a      	strb	r2, [r3, #0]
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	61fb      	str	r3, [r7, #28]
 8006666:	4b28      	ldr	r3, [pc, #160]	; (8006708 <SEGGER_SYSVIEW_Start+0x168>)
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	61bb      	str	r3, [r7, #24]
 800666c:	e00b      	b.n	8006686 <SEGGER_SYSVIEW_Start+0xe6>
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	b2da      	uxtb	r2, r3
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	1c59      	adds	r1, r3, #1
 8006676:	61f9      	str	r1, [r7, #28]
 8006678:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800667c:	b2d2      	uxtb	r2, r2
 800667e:	701a      	strb	r2, [r3, #0]
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	09db      	lsrs	r3, r3, #7
 8006684:	61bb      	str	r3, [r7, #24]
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	2b7f      	cmp	r3, #127	; 0x7f
 800668a:	d8f0      	bhi.n	800666e <SEGGER_SYSVIEW_Start+0xce>
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	1c5a      	adds	r2, r3, #1
 8006690:	61fa      	str	r2, [r7, #28]
 8006692:	69ba      	ldr	r2, [r7, #24]
 8006694:	b2d2      	uxtb	r2, r2
 8006696:	701a      	strb	r2, [r3, #0]
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	617b      	str	r3, [r7, #20]
 80066a0:	2300      	movs	r3, #0
 80066a2:	613b      	str	r3, [r7, #16]
 80066a4:	e00b      	b.n	80066be <SEGGER_SYSVIEW_Start+0x11e>
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	1c59      	adds	r1, r3, #1
 80066ae:	6179      	str	r1, [r7, #20]
 80066b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066b4:	b2d2      	uxtb	r2, r2
 80066b6:	701a      	strb	r2, [r3, #0]
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	09db      	lsrs	r3, r3, #7
 80066bc:	613b      	str	r3, [r7, #16]
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	2b7f      	cmp	r3, #127	; 0x7f
 80066c2:	d8f0      	bhi.n	80066a6 <SEGGER_SYSVIEW_Start+0x106>
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	617a      	str	r2, [r7, #20]
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	b2d2      	uxtb	r2, r2
 80066ce:	701a      	strb	r2, [r3, #0]
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80066d4:	2218      	movs	r2, #24
 80066d6:	6839      	ldr	r1, [r7, #0]
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7ff fb35 	bl	8005d48 <_SendPacket>
      RECORD_END();
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80066e4:	4b08      	ldr	r3, [pc, #32]	; (8006708 <SEGGER_SYSVIEW_Start+0x168>)
 80066e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d002      	beq.n	80066f2 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80066ec:	4b06      	ldr	r3, [pc, #24]	; (8006708 <SEGGER_SYSVIEW_Start+0x168>)
 80066ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80066f2:	f000 f9eb 	bl	8006acc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80066f6:	f000 f9b1 	bl	8006a5c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80066fa:	f000 fc11 	bl	8006f20 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80066fe:	bf00      	nop
 8006700:	3730      	adds	r7, #48	; 0x30
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	2000d474 	.word	0x2000d474
 800670c:	08007b58 	.word	0x08007b58
 8006710:	2000d4a4 	.word	0x2000d4a4

08006714 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800671a:	f3ef 8311 	mrs	r3, BASEPRI
 800671e:	f04f 0120 	mov.w	r1, #32
 8006722:	f381 8811 	msr	BASEPRI, r1
 8006726:	607b      	str	r3, [r7, #4]
 8006728:	480b      	ldr	r0, [pc, #44]	; (8006758 <SEGGER_SYSVIEW_Stop+0x44>)
 800672a:	f7ff fa1f 	bl	8005b6c <_PreparePacket>
 800672e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006730:	4b0a      	ldr	r3, [pc, #40]	; (800675c <SEGGER_SYSVIEW_Stop+0x48>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d007      	beq.n	8006748 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006738:	220b      	movs	r2, #11
 800673a:	6839      	ldr	r1, [r7, #0]
 800673c:	6838      	ldr	r0, [r7, #0]
 800673e:	f7ff fb03 	bl	8005d48 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006742:	4b06      	ldr	r3, [pc, #24]	; (800675c <SEGGER_SYSVIEW_Stop+0x48>)
 8006744:	2200      	movs	r2, #0
 8006746:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f383 8811 	msr	BASEPRI, r3
}
 800674e:	bf00      	nop
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	2000d4a4 	.word	0x2000d4a4
 800675c:	2000d474 	.word	0x2000d474

08006760 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006760:	b580      	push	{r7, lr}
 8006762:	b08c      	sub	sp, #48	; 0x30
 8006764:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006766:	f3ef 8311 	mrs	r3, BASEPRI
 800676a:	f04f 0120 	mov.w	r1, #32
 800676e:	f381 8811 	msr	BASEPRI, r1
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	4845      	ldr	r0, [pc, #276]	; (800688c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006776:	f7ff f9f9 	bl	8005b6c <_PreparePacket>
 800677a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006784:	4b42      	ldr	r3, [pc, #264]	; (8006890 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	62bb      	str	r3, [r7, #40]	; 0x28
 800678a:	e00b      	b.n	80067a4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800678c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678e:	b2da      	uxtb	r2, r3
 8006790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006792:	1c59      	adds	r1, r3, #1
 8006794:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006796:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800679a:	b2d2      	uxtb	r2, r2
 800679c:	701a      	strb	r2, [r3, #0]
 800679e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a0:	09db      	lsrs	r3, r3, #7
 80067a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80067a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a6:	2b7f      	cmp	r3, #127	; 0x7f
 80067a8:	d8f0      	bhi.n	800678c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80067aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	627b      	str	r3, [r7, #36]	; 0x24
 80067be:	4b34      	ldr	r3, [pc, #208]	; (8006890 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	623b      	str	r3, [r7, #32]
 80067c4:	e00b      	b.n	80067de <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	1c59      	adds	r1, r3, #1
 80067ce:	6279      	str	r1, [r7, #36]	; 0x24
 80067d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	701a      	strb	r2, [r3, #0]
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	09db      	lsrs	r3, r3, #7
 80067dc:	623b      	str	r3, [r7, #32]
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	2b7f      	cmp	r3, #127	; 0x7f
 80067e2:	d8f0      	bhi.n	80067c6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	627a      	str	r2, [r7, #36]	; 0x24
 80067ea:	6a3a      	ldr	r2, [r7, #32]
 80067ec:	b2d2      	uxtb	r2, r2
 80067ee:	701a      	strb	r2, [r3, #0]
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	61fb      	str	r3, [r7, #28]
 80067f8:	4b25      	ldr	r3, [pc, #148]	; (8006890 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	61bb      	str	r3, [r7, #24]
 80067fe:	e00b      	b.n	8006818 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	b2da      	uxtb	r2, r3
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	1c59      	adds	r1, r3, #1
 8006808:	61f9      	str	r1, [r7, #28]
 800680a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800680e:	b2d2      	uxtb	r2, r2
 8006810:	701a      	strb	r2, [r3, #0]
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	09db      	lsrs	r3, r3, #7
 8006816:	61bb      	str	r3, [r7, #24]
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	2b7f      	cmp	r3, #127	; 0x7f
 800681c:	d8f0      	bhi.n	8006800 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	61fa      	str	r2, [r7, #28]
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	b2d2      	uxtb	r2, r2
 8006828:	701a      	strb	r2, [r3, #0]
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	617b      	str	r3, [r7, #20]
 8006832:	2300      	movs	r3, #0
 8006834:	613b      	str	r3, [r7, #16]
 8006836:	e00b      	b.n	8006850 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	b2da      	uxtb	r2, r3
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	1c59      	adds	r1, r3, #1
 8006840:	6179      	str	r1, [r7, #20]
 8006842:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	701a      	strb	r2, [r3, #0]
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	09db      	lsrs	r3, r3, #7
 800684e:	613b      	str	r3, [r7, #16]
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	2b7f      	cmp	r3, #127	; 0x7f
 8006854:	d8f0      	bhi.n	8006838 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	1c5a      	adds	r2, r3, #1
 800685a:	617a      	str	r2, [r7, #20]
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	b2d2      	uxtb	r2, r2
 8006860:	701a      	strb	r2, [r3, #0]
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006866:	2218      	movs	r2, #24
 8006868:	6879      	ldr	r1, [r7, #4]
 800686a:	68b8      	ldr	r0, [r7, #8]
 800686c:	f7ff fa6c 	bl	8005d48 <_SendPacket>
  RECORD_END();
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006876:	4b06      	ldr	r3, [pc, #24]	; (8006890 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800687e:	4b04      	ldr	r3, [pc, #16]	; (8006890 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006882:	4798      	blx	r3
  }
}
 8006884:	bf00      	nop
 8006886:	3730      	adds	r7, #48	; 0x30
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	2000d4a4 	.word	0x2000d4a4
 8006890:	2000d474 	.word	0x2000d474

08006894 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006894:	b580      	push	{r7, lr}
 8006896:	b092      	sub	sp, #72	; 0x48
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800689c:	f3ef 8311 	mrs	r3, BASEPRI
 80068a0:	f04f 0120 	mov.w	r1, #32
 80068a4:	f381 8811 	msr	BASEPRI, r1
 80068a8:	617b      	str	r3, [r7, #20]
 80068aa:	486a      	ldr	r0, [pc, #424]	; (8006a54 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80068ac:	f7ff f95e 	bl	8005b6c <_PreparePacket>
 80068b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	647b      	str	r3, [r7, #68]	; 0x44
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	4b66      	ldr	r3, [pc, #408]	; (8006a58 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	643b      	str	r3, [r7, #64]	; 0x40
 80068c6:	e00b      	b.n	80068e0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80068c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068ce:	1c59      	adds	r1, r3, #1
 80068d0:	6479      	str	r1, [r7, #68]	; 0x44
 80068d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068d6:	b2d2      	uxtb	r2, r2
 80068d8:	701a      	strb	r2, [r3, #0]
 80068da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068dc:	09db      	lsrs	r3, r3, #7
 80068de:	643b      	str	r3, [r7, #64]	; 0x40
 80068e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068e2:	2b7f      	cmp	r3, #127	; 0x7f
 80068e4:	d8f0      	bhi.n	80068c8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80068e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068e8:	1c5a      	adds	r2, r3, #1
 80068ea:	647a      	str	r2, [r7, #68]	; 0x44
 80068ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068ee:	b2d2      	uxtb	r2, r2
 80068f0:	701a      	strb	r2, [r3, #0]
 80068f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8006900:	e00b      	b.n	800691a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006904:	b2da      	uxtb	r2, r3
 8006906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006908:	1c59      	adds	r1, r3, #1
 800690a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800690c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006910:	b2d2      	uxtb	r2, r2
 8006912:	701a      	strb	r2, [r3, #0]
 8006914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006916:	09db      	lsrs	r3, r3, #7
 8006918:	63bb      	str	r3, [r7, #56]	; 0x38
 800691a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691c:	2b7f      	cmp	r3, #127	; 0x7f
 800691e:	d8f0      	bhi.n	8006902 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006922:	1c5a      	adds	r2, r3, #1
 8006924:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006926:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006928:	b2d2      	uxtb	r2, r2
 800692a:	701a      	strb	r2, [r3, #0]
 800692c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800692e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	2220      	movs	r2, #32
 8006936:	4619      	mov	r1, r3
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f7ff f8e7 	bl	8005b0c <_EncodeStr>
 800693e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006940:	2209      	movs	r2, #9
 8006942:	68f9      	ldr	r1, [r7, #12]
 8006944:	6938      	ldr	r0, [r7, #16]
 8006946:	f7ff f9ff 	bl	8005d48 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	637b      	str	r3, [r7, #52]	; 0x34
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	4b40      	ldr	r3, [pc, #256]	; (8006a58 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	633b      	str	r3, [r7, #48]	; 0x30
 800695e:	e00b      	b.n	8006978 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006962:	b2da      	uxtb	r2, r3
 8006964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006966:	1c59      	adds	r1, r3, #1
 8006968:	6379      	str	r1, [r7, #52]	; 0x34
 800696a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800696e:	b2d2      	uxtb	r2, r2
 8006970:	701a      	strb	r2, [r3, #0]
 8006972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006974:	09db      	lsrs	r3, r3, #7
 8006976:	633b      	str	r3, [r7, #48]	; 0x30
 8006978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697a:	2b7f      	cmp	r3, #127	; 0x7f
 800697c:	d8f0      	bhi.n	8006960 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800697e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	637a      	str	r2, [r7, #52]	; 0x34
 8006984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006986:	b2d2      	uxtb	r2, r2
 8006988:	701a      	strb	r2, [r3, #0]
 800698a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	62bb      	str	r3, [r7, #40]	; 0x28
 8006998:	e00b      	b.n	80069b2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800699a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699c:	b2da      	uxtb	r2, r3
 800699e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a0:	1c59      	adds	r1, r3, #1
 80069a2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80069a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	701a      	strb	r2, [r3, #0]
 80069ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ae:	09db      	lsrs	r3, r3, #7
 80069b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80069b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b4:	2b7f      	cmp	r3, #127	; 0x7f
 80069b6:	d8f0      	bhi.n	800699a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80069b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ba:	1c5a      	adds	r2, r3, #1
 80069bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069c0:	b2d2      	uxtb	r2, r2
 80069c2:	701a      	strb	r2, [r3, #0]
 80069c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	627b      	str	r3, [r7, #36]	; 0x24
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	623b      	str	r3, [r7, #32]
 80069d2:	e00b      	b.n	80069ec <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	b2da      	uxtb	r2, r3
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	1c59      	adds	r1, r3, #1
 80069dc:	6279      	str	r1, [r7, #36]	; 0x24
 80069de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069e2:	b2d2      	uxtb	r2, r2
 80069e4:	701a      	strb	r2, [r3, #0]
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	09db      	lsrs	r3, r3, #7
 80069ea:	623b      	str	r3, [r7, #32]
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	2b7f      	cmp	r3, #127	; 0x7f
 80069f0:	d8f0      	bhi.n	80069d4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f4:	1c5a      	adds	r2, r3, #1
 80069f6:	627a      	str	r2, [r7, #36]	; 0x24
 80069f8:	6a3a      	ldr	r2, [r7, #32]
 80069fa:	b2d2      	uxtb	r2, r2
 80069fc:	701a      	strb	r2, [r3, #0]
 80069fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	61fb      	str	r3, [r7, #28]
 8006a06:	2300      	movs	r3, #0
 8006a08:	61bb      	str	r3, [r7, #24]
 8006a0a:	e00b      	b.n	8006a24 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	1c59      	adds	r1, r3, #1
 8006a14:	61f9      	str	r1, [r7, #28]
 8006a16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a1a:	b2d2      	uxtb	r2, r2
 8006a1c:	701a      	strb	r2, [r3, #0]
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	09db      	lsrs	r3, r3, #7
 8006a22:	61bb      	str	r3, [r7, #24]
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	2b7f      	cmp	r3, #127	; 0x7f
 8006a28:	d8f0      	bhi.n	8006a0c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	1c5a      	adds	r2, r3, #1
 8006a2e:	61fa      	str	r2, [r7, #28]
 8006a30:	69ba      	ldr	r2, [r7, #24]
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	701a      	strb	r2, [r3, #0]
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006a3a:	2215      	movs	r2, #21
 8006a3c:	68f9      	ldr	r1, [r7, #12]
 8006a3e:	6938      	ldr	r0, [r7, #16]
 8006a40:	f7ff f982 	bl	8005d48 <_SendPacket>
  RECORD_END();
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f383 8811 	msr	BASEPRI, r3
}
 8006a4a:	bf00      	nop
 8006a4c:	3748      	adds	r7, #72	; 0x48
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	2000d4a4 	.word	0x2000d4a4
 8006a58:	2000d474 	.word	0x2000d474

08006a5c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006a60:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d008      	beq.n	8006a7a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006a68:	4b05      	ldr	r3, [pc, #20]	; (8006a80 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006a72:	4b03      	ldr	r3, [pc, #12]	; (8006a80 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	4798      	blx	r3
  }
}
 8006a7a:	bf00      	nop
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	2000d474 	.word	0x2000d474

08006a84 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a8c:	f3ef 8311 	mrs	r3, BASEPRI
 8006a90:	f04f 0120 	mov.w	r1, #32
 8006a94:	f381 8811 	msr	BASEPRI, r1
 8006a98:	617b      	str	r3, [r7, #20]
 8006a9a:	480b      	ldr	r0, [pc, #44]	; (8006ac8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006a9c:	f7ff f866 	bl	8005b6c <_PreparePacket>
 8006aa0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006aa2:	2280      	movs	r2, #128	; 0x80
 8006aa4:	6879      	ldr	r1, [r7, #4]
 8006aa6:	6938      	ldr	r0, [r7, #16]
 8006aa8:	f7ff f830 	bl	8005b0c <_EncodeStr>
 8006aac:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006aae:	220e      	movs	r2, #14
 8006ab0:	68f9      	ldr	r1, [r7, #12]
 8006ab2:	6938      	ldr	r0, [r7, #16]
 8006ab4:	f7ff f948 	bl	8005d48 <_SendPacket>
  RECORD_END();
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f383 8811 	msr	BASEPRI, r3
}
 8006abe:	bf00      	nop
 8006ac0:	3718      	adds	r7, #24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	2000d4a4 	.word	0x2000d4a4

08006acc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006acc:	b590      	push	{r4, r7, lr}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006ad2:	4b15      	ldr	r3, [pc, #84]	; (8006b28 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d01a      	beq.n	8006b10 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006ada:	4b13      	ldr	r3, [pc, #76]	; (8006b28 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d015      	beq.n	8006b10 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006ae4:	4b10      	ldr	r3, [pc, #64]	; (8006b28 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4798      	blx	r3
 8006aec:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006af0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006af2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006af6:	f04f 0200 	mov.w	r2, #0
 8006afa:	f04f 0300 	mov.w	r3, #0
 8006afe:	000a      	movs	r2, r1
 8006b00:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006b02:	4613      	mov	r3, r2
 8006b04:	461a      	mov	r2, r3
 8006b06:	4621      	mov	r1, r4
 8006b08:	200d      	movs	r0, #13
 8006b0a:	f7ff fb39 	bl	8006180 <SEGGER_SYSVIEW_RecordU32x2>
 8006b0e:	e006      	b.n	8006b1e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006b10:	4b06      	ldr	r3, [pc, #24]	; (8006b2c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4619      	mov	r1, r3
 8006b16:	200c      	movs	r0, #12
 8006b18:	f7ff faf6 	bl	8006108 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006b1c:	bf00      	nop
 8006b1e:	bf00      	nop
 8006b20:	370c      	adds	r7, #12
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd90      	pop	{r4, r7, pc}
 8006b26:	bf00      	nop
 8006b28:	2000d474 	.word	0x2000d474
 8006b2c:	e0001004 	.word	0xe0001004

08006b30 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b36:	f3ef 8311 	mrs	r3, BASEPRI
 8006b3a:	f04f 0120 	mov.w	r1, #32
 8006b3e:	f381 8811 	msr	BASEPRI, r1
 8006b42:	60fb      	str	r3, [r7, #12]
 8006b44:	4819      	ldr	r0, [pc, #100]	; (8006bac <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006b46:	f7ff f811 	bl	8005b6c <_PreparePacket>
 8006b4a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006b50:	4b17      	ldr	r3, [pc, #92]	; (8006bb0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b58:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	617b      	str	r3, [r7, #20]
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	613b      	str	r3, [r7, #16]
 8006b62:	e00b      	b.n	8006b7c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	1c59      	adds	r1, r3, #1
 8006b6c:	6179      	str	r1, [r7, #20]
 8006b6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b72:	b2d2      	uxtb	r2, r2
 8006b74:	701a      	strb	r2, [r3, #0]
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	09db      	lsrs	r3, r3, #7
 8006b7a:	613b      	str	r3, [r7, #16]
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	2b7f      	cmp	r3, #127	; 0x7f
 8006b80:	d8f0      	bhi.n	8006b64 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	1c5a      	adds	r2, r3, #1
 8006b86:	617a      	str	r2, [r7, #20]
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	b2d2      	uxtb	r2, r2
 8006b8c:	701a      	strb	r2, [r3, #0]
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006b92:	2202      	movs	r2, #2
 8006b94:	6879      	ldr	r1, [r7, #4]
 8006b96:	68b8      	ldr	r0, [r7, #8]
 8006b98:	f7ff f8d6 	bl	8005d48 <_SendPacket>
  RECORD_END();
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f383 8811 	msr	BASEPRI, r3
}
 8006ba2:	bf00      	nop
 8006ba4:	3718      	adds	r7, #24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	2000d4a4 	.word	0x2000d4a4
 8006bb0:	e000ed04 	.word	0xe000ed04

08006bb4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006bba:	f3ef 8311 	mrs	r3, BASEPRI
 8006bbe:	f04f 0120 	mov.w	r1, #32
 8006bc2:	f381 8811 	msr	BASEPRI, r1
 8006bc6:	607b      	str	r3, [r7, #4]
 8006bc8:	4807      	ldr	r0, [pc, #28]	; (8006be8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006bca:	f7fe ffcf 	bl	8005b6c <_PreparePacket>
 8006bce:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006bd0:	2203      	movs	r2, #3
 8006bd2:	6839      	ldr	r1, [r7, #0]
 8006bd4:	6838      	ldr	r0, [r7, #0]
 8006bd6:	f7ff f8b7 	bl	8005d48 <_SendPacket>
  RECORD_END();
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f383 8811 	msr	BASEPRI, r3
}
 8006be0:	bf00      	nop
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	2000d4a4 	.word	0x2000d4a4

08006bec <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006bf2:	f3ef 8311 	mrs	r3, BASEPRI
 8006bf6:	f04f 0120 	mov.w	r1, #32
 8006bfa:	f381 8811 	msr	BASEPRI, r1
 8006bfe:	607b      	str	r3, [r7, #4]
 8006c00:	4807      	ldr	r0, [pc, #28]	; (8006c20 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006c02:	f7fe ffb3 	bl	8005b6c <_PreparePacket>
 8006c06:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006c08:	2211      	movs	r2, #17
 8006c0a:	6839      	ldr	r1, [r7, #0]
 8006c0c:	6838      	ldr	r0, [r7, #0]
 8006c0e:	f7ff f89b 	bl	8005d48 <_SendPacket>
  RECORD_END();
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f383 8811 	msr	BASEPRI, r3
}
 8006c18:	bf00      	nop
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	2000d4a4 	.word	0x2000d4a4

08006c24 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b088      	sub	sp, #32
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c2c:	f3ef 8311 	mrs	r3, BASEPRI
 8006c30:	f04f 0120 	mov.w	r1, #32
 8006c34:	f381 8811 	msr	BASEPRI, r1
 8006c38:	617b      	str	r3, [r7, #20]
 8006c3a:	4819      	ldr	r0, [pc, #100]	; (8006ca0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006c3c:	f7fe ff96 	bl	8005b6c <_PreparePacket>
 8006c40:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c46:	4b17      	ldr	r3, [pc, #92]	; (8006ca4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	61fb      	str	r3, [r7, #28]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	61bb      	str	r3, [r7, #24]
 8006c58:	e00b      	b.n	8006c72 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	1c59      	adds	r1, r3, #1
 8006c62:	61f9      	str	r1, [r7, #28]
 8006c64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c68:	b2d2      	uxtb	r2, r2
 8006c6a:	701a      	strb	r2, [r3, #0]
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	09db      	lsrs	r3, r3, #7
 8006c70:	61bb      	str	r3, [r7, #24]
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	2b7f      	cmp	r3, #127	; 0x7f
 8006c76:	d8f0      	bhi.n	8006c5a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	61fa      	str	r2, [r7, #28]
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	b2d2      	uxtb	r2, r2
 8006c82:	701a      	strb	r2, [r3, #0]
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006c88:	2208      	movs	r2, #8
 8006c8a:	68f9      	ldr	r1, [r7, #12]
 8006c8c:	6938      	ldr	r0, [r7, #16]
 8006c8e:	f7ff f85b 	bl	8005d48 <_SendPacket>
  RECORD_END();
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f383 8811 	msr	BASEPRI, r3
}
 8006c98:	bf00      	nop
 8006c9a:	3720      	adds	r7, #32
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	2000d4a4 	.word	0x2000d4a4
 8006ca4:	2000d474 	.word	0x2000d474

08006ca8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b088      	sub	sp, #32
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006cb0:	f3ef 8311 	mrs	r3, BASEPRI
 8006cb4:	f04f 0120 	mov.w	r1, #32
 8006cb8:	f381 8811 	msr	BASEPRI, r1
 8006cbc:	617b      	str	r3, [r7, #20]
 8006cbe:	4819      	ldr	r0, [pc, #100]	; (8006d24 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006cc0:	f7fe ff54 	bl	8005b6c <_PreparePacket>
 8006cc4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006cca:	4b17      	ldr	r3, [pc, #92]	; (8006d28 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	61fb      	str	r3, [r7, #28]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	61bb      	str	r3, [r7, #24]
 8006cdc:	e00b      	b.n	8006cf6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	1c59      	adds	r1, r3, #1
 8006ce6:	61f9      	str	r1, [r7, #28]
 8006ce8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cec:	b2d2      	uxtb	r2, r2
 8006cee:	701a      	strb	r2, [r3, #0]
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	09db      	lsrs	r3, r3, #7
 8006cf4:	61bb      	str	r3, [r7, #24]
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	2b7f      	cmp	r3, #127	; 0x7f
 8006cfa:	d8f0      	bhi.n	8006cde <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	61fa      	str	r2, [r7, #28]
 8006d02:	69ba      	ldr	r2, [r7, #24]
 8006d04:	b2d2      	uxtb	r2, r2
 8006d06:	701a      	strb	r2, [r3, #0]
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006d0c:	2204      	movs	r2, #4
 8006d0e:	68f9      	ldr	r1, [r7, #12]
 8006d10:	6938      	ldr	r0, [r7, #16]
 8006d12:	f7ff f819 	bl	8005d48 <_SendPacket>
  RECORD_END();
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f383 8811 	msr	BASEPRI, r3
}
 8006d1c:	bf00      	nop
 8006d1e:	3720      	adds	r7, #32
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	2000d4a4 	.word	0x2000d4a4
 8006d28:	2000d474 	.word	0x2000d474

08006d2c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b088      	sub	sp, #32
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d34:	f3ef 8311 	mrs	r3, BASEPRI
 8006d38:	f04f 0120 	mov.w	r1, #32
 8006d3c:	f381 8811 	msr	BASEPRI, r1
 8006d40:	617b      	str	r3, [r7, #20]
 8006d42:	4819      	ldr	r0, [pc, #100]	; (8006da8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006d44:	f7fe ff12 	bl	8005b6c <_PreparePacket>
 8006d48:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006d4e:	4b17      	ldr	r3, [pc, #92]	; (8006dac <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	61fb      	str	r3, [r7, #28]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	61bb      	str	r3, [r7, #24]
 8006d60:	e00b      	b.n	8006d7a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	1c59      	adds	r1, r3, #1
 8006d6a:	61f9      	str	r1, [r7, #28]
 8006d6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d70:	b2d2      	uxtb	r2, r2
 8006d72:	701a      	strb	r2, [r3, #0]
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	09db      	lsrs	r3, r3, #7
 8006d78:	61bb      	str	r3, [r7, #24]
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	2b7f      	cmp	r3, #127	; 0x7f
 8006d7e:	d8f0      	bhi.n	8006d62 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	61fa      	str	r2, [r7, #28]
 8006d86:	69ba      	ldr	r2, [r7, #24]
 8006d88:	b2d2      	uxtb	r2, r2
 8006d8a:	701a      	strb	r2, [r3, #0]
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006d90:	2206      	movs	r2, #6
 8006d92:	68f9      	ldr	r1, [r7, #12]
 8006d94:	6938      	ldr	r0, [r7, #16]
 8006d96:	f7fe ffd7 	bl	8005d48 <_SendPacket>
  RECORD_END();
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f383 8811 	msr	BASEPRI, r3
}
 8006da0:	bf00      	nop
 8006da2:	3720      	adds	r7, #32
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	2000d4a4 	.word	0x2000d4a4
 8006dac:	2000d474 	.word	0x2000d474

08006db0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006db8:	4b04      	ldr	r3, [pc, #16]	; (8006dcc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	1ad3      	subs	r3, r2, r3
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr
 8006dcc:	2000d474 	.word	0x2000d474

08006dd0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08c      	sub	sp, #48	; 0x30
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006dda:	4b40      	ldr	r3, [pc, #256]	; (8006edc <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d077      	beq.n	8006ed2 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006de2:	4b3e      	ldr	r3, [pc, #248]	; (8006edc <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006de8:	2300      	movs	r3, #0
 8006dea:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dec:	e008      	b.n	8006e00 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d007      	beq.n	8006e0a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e00:	79fb      	ldrb	r3, [r7, #7]
 8006e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d3f2      	bcc.n	8006dee <SEGGER_SYSVIEW_SendModule+0x1e>
 8006e08:	e000      	b.n	8006e0c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006e0a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d055      	beq.n	8006ebe <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e12:	f3ef 8311 	mrs	r3, BASEPRI
 8006e16:	f04f 0120 	mov.w	r1, #32
 8006e1a:	f381 8811 	msr	BASEPRI, r1
 8006e1e:	617b      	str	r3, [r7, #20]
 8006e20:	482f      	ldr	r0, [pc, #188]	; (8006ee0 <SEGGER_SYSVIEW_SendModule+0x110>)
 8006e22:	f7fe fea3 	bl	8005b6c <_PreparePacket>
 8006e26:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e30:	79fb      	ldrb	r3, [r7, #7]
 8006e32:	623b      	str	r3, [r7, #32]
 8006e34:	e00b      	b.n	8006e4e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3c:	1c59      	adds	r1, r3, #1
 8006e3e:	6279      	str	r1, [r7, #36]	; 0x24
 8006e40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e44:	b2d2      	uxtb	r2, r2
 8006e46:	701a      	strb	r2, [r3, #0]
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	09db      	lsrs	r3, r3, #7
 8006e4c:	623b      	str	r3, [r7, #32]
 8006e4e:	6a3b      	ldr	r3, [r7, #32]
 8006e50:	2b7f      	cmp	r3, #127	; 0x7f
 8006e52:	d8f0      	bhi.n	8006e36 <SEGGER_SYSVIEW_SendModule+0x66>
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	627a      	str	r2, [r7, #36]	; 0x24
 8006e5a:	6a3a      	ldr	r2, [r7, #32]
 8006e5c:	b2d2      	uxtb	r2, r2
 8006e5e:	701a      	strb	r2, [r3, #0]
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	61fb      	str	r3, [r7, #28]
 8006e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	61bb      	str	r3, [r7, #24]
 8006e6e:	e00b      	b.n	8006e88 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	1c59      	adds	r1, r3, #1
 8006e78:	61f9      	str	r1, [r7, #28]
 8006e7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e7e:	b2d2      	uxtb	r2, r2
 8006e80:	701a      	strb	r2, [r3, #0]
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	09db      	lsrs	r3, r3, #7
 8006e86:	61bb      	str	r3, [r7, #24]
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	2b7f      	cmp	r3, #127	; 0x7f
 8006e8c:	d8f0      	bhi.n	8006e70 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	1c5a      	adds	r2, r3, #1
 8006e92:	61fa      	str	r2, [r7, #28]
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	b2d2      	uxtb	r2, r2
 8006e98:	701a      	strb	r2, [r3, #0]
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2280      	movs	r2, #128	; 0x80
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f7fe fe30 	bl	8005b0c <_EncodeStr>
 8006eac:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006eae:	2216      	movs	r2, #22
 8006eb0:	68f9      	ldr	r1, [r7, #12]
 8006eb2:	6938      	ldr	r0, [r7, #16]
 8006eb4:	f7fe ff48 	bl	8005d48 <_SendPacket>
      RECORD_END();
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d006      	beq.n	8006ed2 <SEGGER_SYSVIEW_SendModule+0x102>
 8006ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d002      	beq.n	8006ed2 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	4798      	blx	r3
    }
  }
}
 8006ed2:	bf00      	nop
 8006ed4:	3730      	adds	r7, #48	; 0x30
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	2000d49c 	.word	0x2000d49c
 8006ee0:	2000d4a4 	.word	0x2000d4a4

08006ee4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006eea:	4b0c      	ldr	r3, [pc, #48]	; (8006f1c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00f      	beq.n	8006f12 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006ef2:	4b0a      	ldr	r3, [pc, #40]	; (8006f1c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d002      	beq.n	8006f06 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1f2      	bne.n	8006ef8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006f12:	bf00      	nop
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	2000d49c 	.word	0x2000d49c

08006f20 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006f26:	f3ef 8311 	mrs	r3, BASEPRI
 8006f2a:	f04f 0120 	mov.w	r1, #32
 8006f2e:	f381 8811 	msr	BASEPRI, r1
 8006f32:	60fb      	str	r3, [r7, #12]
 8006f34:	4817      	ldr	r0, [pc, #92]	; (8006f94 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006f36:	f7fe fe19 	bl	8005b6c <_PreparePacket>
 8006f3a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	617b      	str	r3, [r7, #20]
 8006f44:	4b14      	ldr	r3, [pc, #80]	; (8006f98 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	613b      	str	r3, [r7, #16]
 8006f4a:	e00b      	b.n	8006f64 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	1c59      	adds	r1, r3, #1
 8006f54:	6179      	str	r1, [r7, #20]
 8006f56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f5a:	b2d2      	uxtb	r2, r2
 8006f5c:	701a      	strb	r2, [r3, #0]
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	09db      	lsrs	r3, r3, #7
 8006f62:	613b      	str	r3, [r7, #16]
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	2b7f      	cmp	r3, #127	; 0x7f
 8006f68:	d8f0      	bhi.n	8006f4c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	1c5a      	adds	r2, r3, #1
 8006f6e:	617a      	str	r2, [r7, #20]
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	b2d2      	uxtb	r2, r2
 8006f74:	701a      	strb	r2, [r3, #0]
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006f7a:	221b      	movs	r2, #27
 8006f7c:	6879      	ldr	r1, [r7, #4]
 8006f7e:	68b8      	ldr	r0, [r7, #8]
 8006f80:	f7fe fee2 	bl	8005d48 <_SendPacket>
  RECORD_END();
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f383 8811 	msr	BASEPRI, r3
}
 8006f8a:	bf00      	nop
 8006f8c:	3718      	adds	r7, #24
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	2000d4a4 	.word	0x2000d4a4
 8006f98:	2000d4a0 	.word	0x2000d4a0

08006f9c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b08a      	sub	sp, #40	; 0x28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006fa4:	f3ef 8311 	mrs	r3, BASEPRI
 8006fa8:	f04f 0120 	mov.w	r1, #32
 8006fac:	f381 8811 	msr	BASEPRI, r1
 8006fb0:	617b      	str	r3, [r7, #20]
 8006fb2:	4827      	ldr	r0, [pc, #156]	; (8007050 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006fb4:	f7fe fdda 	bl	8005b6c <_PreparePacket>
 8006fb8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006fba:	2280      	movs	r2, #128	; 0x80
 8006fbc:	6879      	ldr	r1, [r7, #4]
 8006fbe:	6938      	ldr	r0, [r7, #16]
 8006fc0:	f7fe fda4 	bl	8005b0c <_EncodeStr>
 8006fc4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8006fca:	2301      	movs	r3, #1
 8006fcc:	623b      	str	r3, [r7, #32]
 8006fce:	e00b      	b.n	8006fe8 <SEGGER_SYSVIEW_Warn+0x4c>
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd6:	1c59      	adds	r1, r3, #1
 8006fd8:	6279      	str	r1, [r7, #36]	; 0x24
 8006fda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fde:	b2d2      	uxtb	r2, r2
 8006fe0:	701a      	strb	r2, [r3, #0]
 8006fe2:	6a3b      	ldr	r3, [r7, #32]
 8006fe4:	09db      	lsrs	r3, r3, #7
 8006fe6:	623b      	str	r3, [r7, #32]
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	2b7f      	cmp	r3, #127	; 0x7f
 8006fec:	d8f0      	bhi.n	8006fd0 <SEGGER_SYSVIEW_Warn+0x34>
 8006fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff0:	1c5a      	adds	r2, r3, #1
 8006ff2:	627a      	str	r2, [r7, #36]	; 0x24
 8006ff4:	6a3a      	ldr	r2, [r7, #32]
 8006ff6:	b2d2      	uxtb	r2, r2
 8006ff8:	701a      	strb	r2, [r3, #0]
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	61fb      	str	r3, [r7, #28]
 8007002:	2300      	movs	r3, #0
 8007004:	61bb      	str	r3, [r7, #24]
 8007006:	e00b      	b.n	8007020 <SEGGER_SYSVIEW_Warn+0x84>
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	b2da      	uxtb	r2, r3
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	1c59      	adds	r1, r3, #1
 8007010:	61f9      	str	r1, [r7, #28]
 8007012:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007016:	b2d2      	uxtb	r2, r2
 8007018:	701a      	strb	r2, [r3, #0]
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	09db      	lsrs	r3, r3, #7
 800701e:	61bb      	str	r3, [r7, #24]
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	2b7f      	cmp	r3, #127	; 0x7f
 8007024:	d8f0      	bhi.n	8007008 <SEGGER_SYSVIEW_Warn+0x6c>
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	1c5a      	adds	r2, r3, #1
 800702a:	61fa      	str	r2, [r7, #28]
 800702c:	69ba      	ldr	r2, [r7, #24]
 800702e:	b2d2      	uxtb	r2, r2
 8007030:	701a      	strb	r2, [r3, #0]
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007036:	221a      	movs	r2, #26
 8007038:	68f9      	ldr	r1, [r7, #12]
 800703a:	6938      	ldr	r0, [r7, #16]
 800703c:	f7fe fe84 	bl	8005d48 <_SendPacket>
  RECORD_END();
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	f383 8811 	msr	BASEPRI, r3
}
 8007046:	bf00      	nop
 8007048:	3728      	adds	r7, #40	; 0x28
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	2000d4a4 	.word	0x2000d4a4

08007054 <__libc_init_array>:
 8007054:	b570      	push	{r4, r5, r6, lr}
 8007056:	4d0d      	ldr	r5, [pc, #52]	; (800708c <__libc_init_array+0x38>)
 8007058:	4c0d      	ldr	r4, [pc, #52]	; (8007090 <__libc_init_array+0x3c>)
 800705a:	1b64      	subs	r4, r4, r5
 800705c:	10a4      	asrs	r4, r4, #2
 800705e:	2600      	movs	r6, #0
 8007060:	42a6      	cmp	r6, r4
 8007062:	d109      	bne.n	8007078 <__libc_init_array+0x24>
 8007064:	4d0b      	ldr	r5, [pc, #44]	; (8007094 <__libc_init_array+0x40>)
 8007066:	4c0c      	ldr	r4, [pc, #48]	; (8007098 <__libc_init_array+0x44>)
 8007068:	f000 fcac 	bl	80079c4 <_init>
 800706c:	1b64      	subs	r4, r4, r5
 800706e:	10a4      	asrs	r4, r4, #2
 8007070:	2600      	movs	r6, #0
 8007072:	42a6      	cmp	r6, r4
 8007074:	d105      	bne.n	8007082 <__libc_init_array+0x2e>
 8007076:	bd70      	pop	{r4, r5, r6, pc}
 8007078:	f855 3b04 	ldr.w	r3, [r5], #4
 800707c:	4798      	blx	r3
 800707e:	3601      	adds	r6, #1
 8007080:	e7ee      	b.n	8007060 <__libc_init_array+0xc>
 8007082:	f855 3b04 	ldr.w	r3, [r5], #4
 8007086:	4798      	blx	r3
 8007088:	3601      	adds	r6, #1
 800708a:	e7f2      	b.n	8007072 <__libc_init_array+0x1e>
 800708c:	08007ba0 	.word	0x08007ba0
 8007090:	08007ba0 	.word	0x08007ba0
 8007094:	08007ba0 	.word	0x08007ba0
 8007098:	08007ba4 	.word	0x08007ba4

0800709c <memcmp>:
 800709c:	b510      	push	{r4, lr}
 800709e:	3901      	subs	r1, #1
 80070a0:	4402      	add	r2, r0
 80070a2:	4290      	cmp	r0, r2
 80070a4:	d101      	bne.n	80070aa <memcmp+0xe>
 80070a6:	2000      	movs	r0, #0
 80070a8:	e005      	b.n	80070b6 <memcmp+0x1a>
 80070aa:	7803      	ldrb	r3, [r0, #0]
 80070ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80070b0:	42a3      	cmp	r3, r4
 80070b2:	d001      	beq.n	80070b8 <memcmp+0x1c>
 80070b4:	1b18      	subs	r0, r3, r4
 80070b6:	bd10      	pop	{r4, pc}
 80070b8:	3001      	adds	r0, #1
 80070ba:	e7f2      	b.n	80070a2 <memcmp+0x6>

080070bc <memcpy>:
 80070bc:	440a      	add	r2, r1
 80070be:	4291      	cmp	r1, r2
 80070c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80070c4:	d100      	bne.n	80070c8 <memcpy+0xc>
 80070c6:	4770      	bx	lr
 80070c8:	b510      	push	{r4, lr}
 80070ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070d2:	4291      	cmp	r1, r2
 80070d4:	d1f9      	bne.n	80070ca <memcpy+0xe>
 80070d6:	bd10      	pop	{r4, pc}

080070d8 <memset>:
 80070d8:	4402      	add	r2, r0
 80070da:	4603      	mov	r3, r0
 80070dc:	4293      	cmp	r3, r2
 80070de:	d100      	bne.n	80070e2 <memset+0xa>
 80070e0:	4770      	bx	lr
 80070e2:	f803 1b01 	strb.w	r1, [r3], #1
 80070e6:	e7f9      	b.n	80070dc <memset+0x4>

080070e8 <siprintf>:
 80070e8:	b40e      	push	{r1, r2, r3}
 80070ea:	b500      	push	{lr}
 80070ec:	b09c      	sub	sp, #112	; 0x70
 80070ee:	ab1d      	add	r3, sp, #116	; 0x74
 80070f0:	9002      	str	r0, [sp, #8]
 80070f2:	9006      	str	r0, [sp, #24]
 80070f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070f8:	4809      	ldr	r0, [pc, #36]	; (8007120 <siprintf+0x38>)
 80070fa:	9107      	str	r1, [sp, #28]
 80070fc:	9104      	str	r1, [sp, #16]
 80070fe:	4909      	ldr	r1, [pc, #36]	; (8007124 <siprintf+0x3c>)
 8007100:	f853 2b04 	ldr.w	r2, [r3], #4
 8007104:	9105      	str	r1, [sp, #20]
 8007106:	6800      	ldr	r0, [r0, #0]
 8007108:	9301      	str	r3, [sp, #4]
 800710a:	a902      	add	r1, sp, #8
 800710c:	f000 f868 	bl	80071e0 <_svfiprintf_r>
 8007110:	9b02      	ldr	r3, [sp, #8]
 8007112:	2200      	movs	r2, #0
 8007114:	701a      	strb	r2, [r3, #0]
 8007116:	b01c      	add	sp, #112	; 0x70
 8007118:	f85d eb04 	ldr.w	lr, [sp], #4
 800711c:	b003      	add	sp, #12
 800711e:	4770      	bx	lr
 8007120:	20000014 	.word	0x20000014
 8007124:	ffff0208 	.word	0xffff0208

08007128 <__ssputs_r>:
 8007128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800712c:	688e      	ldr	r6, [r1, #8]
 800712e:	429e      	cmp	r6, r3
 8007130:	4682      	mov	sl, r0
 8007132:	460c      	mov	r4, r1
 8007134:	4690      	mov	r8, r2
 8007136:	461f      	mov	r7, r3
 8007138:	d838      	bhi.n	80071ac <__ssputs_r+0x84>
 800713a:	898a      	ldrh	r2, [r1, #12]
 800713c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007140:	d032      	beq.n	80071a8 <__ssputs_r+0x80>
 8007142:	6825      	ldr	r5, [r4, #0]
 8007144:	6909      	ldr	r1, [r1, #16]
 8007146:	eba5 0901 	sub.w	r9, r5, r1
 800714a:	6965      	ldr	r5, [r4, #20]
 800714c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007150:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007154:	3301      	adds	r3, #1
 8007156:	444b      	add	r3, r9
 8007158:	106d      	asrs	r5, r5, #1
 800715a:	429d      	cmp	r5, r3
 800715c:	bf38      	it	cc
 800715e:	461d      	movcc	r5, r3
 8007160:	0553      	lsls	r3, r2, #21
 8007162:	d531      	bpl.n	80071c8 <__ssputs_r+0xa0>
 8007164:	4629      	mov	r1, r5
 8007166:	f000 fb55 	bl	8007814 <_malloc_r>
 800716a:	4606      	mov	r6, r0
 800716c:	b950      	cbnz	r0, 8007184 <__ssputs_r+0x5c>
 800716e:	230c      	movs	r3, #12
 8007170:	f8ca 3000 	str.w	r3, [sl]
 8007174:	89a3      	ldrh	r3, [r4, #12]
 8007176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800717a:	81a3      	strh	r3, [r4, #12]
 800717c:	f04f 30ff 	mov.w	r0, #4294967295
 8007180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007184:	6921      	ldr	r1, [r4, #16]
 8007186:	464a      	mov	r2, r9
 8007188:	f7ff ff98 	bl	80070bc <memcpy>
 800718c:	89a3      	ldrh	r3, [r4, #12]
 800718e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007196:	81a3      	strh	r3, [r4, #12]
 8007198:	6126      	str	r6, [r4, #16]
 800719a:	6165      	str	r5, [r4, #20]
 800719c:	444e      	add	r6, r9
 800719e:	eba5 0509 	sub.w	r5, r5, r9
 80071a2:	6026      	str	r6, [r4, #0]
 80071a4:	60a5      	str	r5, [r4, #8]
 80071a6:	463e      	mov	r6, r7
 80071a8:	42be      	cmp	r6, r7
 80071aa:	d900      	bls.n	80071ae <__ssputs_r+0x86>
 80071ac:	463e      	mov	r6, r7
 80071ae:	6820      	ldr	r0, [r4, #0]
 80071b0:	4632      	mov	r2, r6
 80071b2:	4641      	mov	r1, r8
 80071b4:	f000 faa8 	bl	8007708 <memmove>
 80071b8:	68a3      	ldr	r3, [r4, #8]
 80071ba:	1b9b      	subs	r3, r3, r6
 80071bc:	60a3      	str	r3, [r4, #8]
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	4433      	add	r3, r6
 80071c2:	6023      	str	r3, [r4, #0]
 80071c4:	2000      	movs	r0, #0
 80071c6:	e7db      	b.n	8007180 <__ssputs_r+0x58>
 80071c8:	462a      	mov	r2, r5
 80071ca:	f000 fb97 	bl	80078fc <_realloc_r>
 80071ce:	4606      	mov	r6, r0
 80071d0:	2800      	cmp	r0, #0
 80071d2:	d1e1      	bne.n	8007198 <__ssputs_r+0x70>
 80071d4:	6921      	ldr	r1, [r4, #16]
 80071d6:	4650      	mov	r0, sl
 80071d8:	f000 fab0 	bl	800773c <_free_r>
 80071dc:	e7c7      	b.n	800716e <__ssputs_r+0x46>
	...

080071e0 <_svfiprintf_r>:
 80071e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e4:	4698      	mov	r8, r3
 80071e6:	898b      	ldrh	r3, [r1, #12]
 80071e8:	061b      	lsls	r3, r3, #24
 80071ea:	b09d      	sub	sp, #116	; 0x74
 80071ec:	4607      	mov	r7, r0
 80071ee:	460d      	mov	r5, r1
 80071f0:	4614      	mov	r4, r2
 80071f2:	d50e      	bpl.n	8007212 <_svfiprintf_r+0x32>
 80071f4:	690b      	ldr	r3, [r1, #16]
 80071f6:	b963      	cbnz	r3, 8007212 <_svfiprintf_r+0x32>
 80071f8:	2140      	movs	r1, #64	; 0x40
 80071fa:	f000 fb0b 	bl	8007814 <_malloc_r>
 80071fe:	6028      	str	r0, [r5, #0]
 8007200:	6128      	str	r0, [r5, #16]
 8007202:	b920      	cbnz	r0, 800720e <_svfiprintf_r+0x2e>
 8007204:	230c      	movs	r3, #12
 8007206:	603b      	str	r3, [r7, #0]
 8007208:	f04f 30ff 	mov.w	r0, #4294967295
 800720c:	e0d1      	b.n	80073b2 <_svfiprintf_r+0x1d2>
 800720e:	2340      	movs	r3, #64	; 0x40
 8007210:	616b      	str	r3, [r5, #20]
 8007212:	2300      	movs	r3, #0
 8007214:	9309      	str	r3, [sp, #36]	; 0x24
 8007216:	2320      	movs	r3, #32
 8007218:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800721c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007220:	2330      	movs	r3, #48	; 0x30
 8007222:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80073cc <_svfiprintf_r+0x1ec>
 8007226:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800722a:	f04f 0901 	mov.w	r9, #1
 800722e:	4623      	mov	r3, r4
 8007230:	469a      	mov	sl, r3
 8007232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007236:	b10a      	cbz	r2, 800723c <_svfiprintf_r+0x5c>
 8007238:	2a25      	cmp	r2, #37	; 0x25
 800723a:	d1f9      	bne.n	8007230 <_svfiprintf_r+0x50>
 800723c:	ebba 0b04 	subs.w	fp, sl, r4
 8007240:	d00b      	beq.n	800725a <_svfiprintf_r+0x7a>
 8007242:	465b      	mov	r3, fp
 8007244:	4622      	mov	r2, r4
 8007246:	4629      	mov	r1, r5
 8007248:	4638      	mov	r0, r7
 800724a:	f7ff ff6d 	bl	8007128 <__ssputs_r>
 800724e:	3001      	adds	r0, #1
 8007250:	f000 80aa 	beq.w	80073a8 <_svfiprintf_r+0x1c8>
 8007254:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007256:	445a      	add	r2, fp
 8007258:	9209      	str	r2, [sp, #36]	; 0x24
 800725a:	f89a 3000 	ldrb.w	r3, [sl]
 800725e:	2b00      	cmp	r3, #0
 8007260:	f000 80a2 	beq.w	80073a8 <_svfiprintf_r+0x1c8>
 8007264:	2300      	movs	r3, #0
 8007266:	f04f 32ff 	mov.w	r2, #4294967295
 800726a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800726e:	f10a 0a01 	add.w	sl, sl, #1
 8007272:	9304      	str	r3, [sp, #16]
 8007274:	9307      	str	r3, [sp, #28]
 8007276:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800727a:	931a      	str	r3, [sp, #104]	; 0x68
 800727c:	4654      	mov	r4, sl
 800727e:	2205      	movs	r2, #5
 8007280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007284:	4851      	ldr	r0, [pc, #324]	; (80073cc <_svfiprintf_r+0x1ec>)
 8007286:	f7f8 fffb 	bl	8000280 <memchr>
 800728a:	9a04      	ldr	r2, [sp, #16]
 800728c:	b9d8      	cbnz	r0, 80072c6 <_svfiprintf_r+0xe6>
 800728e:	06d0      	lsls	r0, r2, #27
 8007290:	bf44      	itt	mi
 8007292:	2320      	movmi	r3, #32
 8007294:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007298:	0711      	lsls	r1, r2, #28
 800729a:	bf44      	itt	mi
 800729c:	232b      	movmi	r3, #43	; 0x2b
 800729e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072a2:	f89a 3000 	ldrb.w	r3, [sl]
 80072a6:	2b2a      	cmp	r3, #42	; 0x2a
 80072a8:	d015      	beq.n	80072d6 <_svfiprintf_r+0xf6>
 80072aa:	9a07      	ldr	r2, [sp, #28]
 80072ac:	4654      	mov	r4, sl
 80072ae:	2000      	movs	r0, #0
 80072b0:	f04f 0c0a 	mov.w	ip, #10
 80072b4:	4621      	mov	r1, r4
 80072b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072ba:	3b30      	subs	r3, #48	; 0x30
 80072bc:	2b09      	cmp	r3, #9
 80072be:	d94e      	bls.n	800735e <_svfiprintf_r+0x17e>
 80072c0:	b1b0      	cbz	r0, 80072f0 <_svfiprintf_r+0x110>
 80072c2:	9207      	str	r2, [sp, #28]
 80072c4:	e014      	b.n	80072f0 <_svfiprintf_r+0x110>
 80072c6:	eba0 0308 	sub.w	r3, r0, r8
 80072ca:	fa09 f303 	lsl.w	r3, r9, r3
 80072ce:	4313      	orrs	r3, r2
 80072d0:	9304      	str	r3, [sp, #16]
 80072d2:	46a2      	mov	sl, r4
 80072d4:	e7d2      	b.n	800727c <_svfiprintf_r+0x9c>
 80072d6:	9b03      	ldr	r3, [sp, #12]
 80072d8:	1d19      	adds	r1, r3, #4
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	9103      	str	r1, [sp, #12]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	bfbb      	ittet	lt
 80072e2:	425b      	neglt	r3, r3
 80072e4:	f042 0202 	orrlt.w	r2, r2, #2
 80072e8:	9307      	strge	r3, [sp, #28]
 80072ea:	9307      	strlt	r3, [sp, #28]
 80072ec:	bfb8      	it	lt
 80072ee:	9204      	strlt	r2, [sp, #16]
 80072f0:	7823      	ldrb	r3, [r4, #0]
 80072f2:	2b2e      	cmp	r3, #46	; 0x2e
 80072f4:	d10c      	bne.n	8007310 <_svfiprintf_r+0x130>
 80072f6:	7863      	ldrb	r3, [r4, #1]
 80072f8:	2b2a      	cmp	r3, #42	; 0x2a
 80072fa:	d135      	bne.n	8007368 <_svfiprintf_r+0x188>
 80072fc:	9b03      	ldr	r3, [sp, #12]
 80072fe:	1d1a      	adds	r2, r3, #4
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	9203      	str	r2, [sp, #12]
 8007304:	2b00      	cmp	r3, #0
 8007306:	bfb8      	it	lt
 8007308:	f04f 33ff 	movlt.w	r3, #4294967295
 800730c:	3402      	adds	r4, #2
 800730e:	9305      	str	r3, [sp, #20]
 8007310:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80073dc <_svfiprintf_r+0x1fc>
 8007314:	7821      	ldrb	r1, [r4, #0]
 8007316:	2203      	movs	r2, #3
 8007318:	4650      	mov	r0, sl
 800731a:	f7f8 ffb1 	bl	8000280 <memchr>
 800731e:	b140      	cbz	r0, 8007332 <_svfiprintf_r+0x152>
 8007320:	2340      	movs	r3, #64	; 0x40
 8007322:	eba0 000a 	sub.w	r0, r0, sl
 8007326:	fa03 f000 	lsl.w	r0, r3, r0
 800732a:	9b04      	ldr	r3, [sp, #16]
 800732c:	4303      	orrs	r3, r0
 800732e:	3401      	adds	r4, #1
 8007330:	9304      	str	r3, [sp, #16]
 8007332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007336:	4826      	ldr	r0, [pc, #152]	; (80073d0 <_svfiprintf_r+0x1f0>)
 8007338:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800733c:	2206      	movs	r2, #6
 800733e:	f7f8 ff9f 	bl	8000280 <memchr>
 8007342:	2800      	cmp	r0, #0
 8007344:	d038      	beq.n	80073b8 <_svfiprintf_r+0x1d8>
 8007346:	4b23      	ldr	r3, [pc, #140]	; (80073d4 <_svfiprintf_r+0x1f4>)
 8007348:	bb1b      	cbnz	r3, 8007392 <_svfiprintf_r+0x1b2>
 800734a:	9b03      	ldr	r3, [sp, #12]
 800734c:	3307      	adds	r3, #7
 800734e:	f023 0307 	bic.w	r3, r3, #7
 8007352:	3308      	adds	r3, #8
 8007354:	9303      	str	r3, [sp, #12]
 8007356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007358:	4433      	add	r3, r6
 800735a:	9309      	str	r3, [sp, #36]	; 0x24
 800735c:	e767      	b.n	800722e <_svfiprintf_r+0x4e>
 800735e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007362:	460c      	mov	r4, r1
 8007364:	2001      	movs	r0, #1
 8007366:	e7a5      	b.n	80072b4 <_svfiprintf_r+0xd4>
 8007368:	2300      	movs	r3, #0
 800736a:	3401      	adds	r4, #1
 800736c:	9305      	str	r3, [sp, #20]
 800736e:	4619      	mov	r1, r3
 8007370:	f04f 0c0a 	mov.w	ip, #10
 8007374:	4620      	mov	r0, r4
 8007376:	f810 2b01 	ldrb.w	r2, [r0], #1
 800737a:	3a30      	subs	r2, #48	; 0x30
 800737c:	2a09      	cmp	r2, #9
 800737e:	d903      	bls.n	8007388 <_svfiprintf_r+0x1a8>
 8007380:	2b00      	cmp	r3, #0
 8007382:	d0c5      	beq.n	8007310 <_svfiprintf_r+0x130>
 8007384:	9105      	str	r1, [sp, #20]
 8007386:	e7c3      	b.n	8007310 <_svfiprintf_r+0x130>
 8007388:	fb0c 2101 	mla	r1, ip, r1, r2
 800738c:	4604      	mov	r4, r0
 800738e:	2301      	movs	r3, #1
 8007390:	e7f0      	b.n	8007374 <_svfiprintf_r+0x194>
 8007392:	ab03      	add	r3, sp, #12
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	462a      	mov	r2, r5
 8007398:	4b0f      	ldr	r3, [pc, #60]	; (80073d8 <_svfiprintf_r+0x1f8>)
 800739a:	a904      	add	r1, sp, #16
 800739c:	4638      	mov	r0, r7
 800739e:	f3af 8000 	nop.w
 80073a2:	1c42      	adds	r2, r0, #1
 80073a4:	4606      	mov	r6, r0
 80073a6:	d1d6      	bne.n	8007356 <_svfiprintf_r+0x176>
 80073a8:	89ab      	ldrh	r3, [r5, #12]
 80073aa:	065b      	lsls	r3, r3, #25
 80073ac:	f53f af2c 	bmi.w	8007208 <_svfiprintf_r+0x28>
 80073b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073b2:	b01d      	add	sp, #116	; 0x74
 80073b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b8:	ab03      	add	r3, sp, #12
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	462a      	mov	r2, r5
 80073be:	4b06      	ldr	r3, [pc, #24]	; (80073d8 <_svfiprintf_r+0x1f8>)
 80073c0:	a904      	add	r1, sp, #16
 80073c2:	4638      	mov	r0, r7
 80073c4:	f000 f87a 	bl	80074bc <_printf_i>
 80073c8:	e7eb      	b.n	80073a2 <_svfiprintf_r+0x1c2>
 80073ca:	bf00      	nop
 80073cc:	08007b62 	.word	0x08007b62
 80073d0:	08007b6c 	.word	0x08007b6c
 80073d4:	00000000 	.word	0x00000000
 80073d8:	08007129 	.word	0x08007129
 80073dc:	08007b68 	.word	0x08007b68

080073e0 <_printf_common>:
 80073e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073e4:	4616      	mov	r6, r2
 80073e6:	4699      	mov	r9, r3
 80073e8:	688a      	ldr	r2, [r1, #8]
 80073ea:	690b      	ldr	r3, [r1, #16]
 80073ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073f0:	4293      	cmp	r3, r2
 80073f2:	bfb8      	it	lt
 80073f4:	4613      	movlt	r3, r2
 80073f6:	6033      	str	r3, [r6, #0]
 80073f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073fc:	4607      	mov	r7, r0
 80073fe:	460c      	mov	r4, r1
 8007400:	b10a      	cbz	r2, 8007406 <_printf_common+0x26>
 8007402:	3301      	adds	r3, #1
 8007404:	6033      	str	r3, [r6, #0]
 8007406:	6823      	ldr	r3, [r4, #0]
 8007408:	0699      	lsls	r1, r3, #26
 800740a:	bf42      	ittt	mi
 800740c:	6833      	ldrmi	r3, [r6, #0]
 800740e:	3302      	addmi	r3, #2
 8007410:	6033      	strmi	r3, [r6, #0]
 8007412:	6825      	ldr	r5, [r4, #0]
 8007414:	f015 0506 	ands.w	r5, r5, #6
 8007418:	d106      	bne.n	8007428 <_printf_common+0x48>
 800741a:	f104 0a19 	add.w	sl, r4, #25
 800741e:	68e3      	ldr	r3, [r4, #12]
 8007420:	6832      	ldr	r2, [r6, #0]
 8007422:	1a9b      	subs	r3, r3, r2
 8007424:	42ab      	cmp	r3, r5
 8007426:	dc26      	bgt.n	8007476 <_printf_common+0x96>
 8007428:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800742c:	1e13      	subs	r3, r2, #0
 800742e:	6822      	ldr	r2, [r4, #0]
 8007430:	bf18      	it	ne
 8007432:	2301      	movne	r3, #1
 8007434:	0692      	lsls	r2, r2, #26
 8007436:	d42b      	bmi.n	8007490 <_printf_common+0xb0>
 8007438:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800743c:	4649      	mov	r1, r9
 800743e:	4638      	mov	r0, r7
 8007440:	47c0      	blx	r8
 8007442:	3001      	adds	r0, #1
 8007444:	d01e      	beq.n	8007484 <_printf_common+0xa4>
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	68e5      	ldr	r5, [r4, #12]
 800744a:	6832      	ldr	r2, [r6, #0]
 800744c:	f003 0306 	and.w	r3, r3, #6
 8007450:	2b04      	cmp	r3, #4
 8007452:	bf08      	it	eq
 8007454:	1aad      	subeq	r5, r5, r2
 8007456:	68a3      	ldr	r3, [r4, #8]
 8007458:	6922      	ldr	r2, [r4, #16]
 800745a:	bf0c      	ite	eq
 800745c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007460:	2500      	movne	r5, #0
 8007462:	4293      	cmp	r3, r2
 8007464:	bfc4      	itt	gt
 8007466:	1a9b      	subgt	r3, r3, r2
 8007468:	18ed      	addgt	r5, r5, r3
 800746a:	2600      	movs	r6, #0
 800746c:	341a      	adds	r4, #26
 800746e:	42b5      	cmp	r5, r6
 8007470:	d11a      	bne.n	80074a8 <_printf_common+0xc8>
 8007472:	2000      	movs	r0, #0
 8007474:	e008      	b.n	8007488 <_printf_common+0xa8>
 8007476:	2301      	movs	r3, #1
 8007478:	4652      	mov	r2, sl
 800747a:	4649      	mov	r1, r9
 800747c:	4638      	mov	r0, r7
 800747e:	47c0      	blx	r8
 8007480:	3001      	adds	r0, #1
 8007482:	d103      	bne.n	800748c <_printf_common+0xac>
 8007484:	f04f 30ff 	mov.w	r0, #4294967295
 8007488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800748c:	3501      	adds	r5, #1
 800748e:	e7c6      	b.n	800741e <_printf_common+0x3e>
 8007490:	18e1      	adds	r1, r4, r3
 8007492:	1c5a      	adds	r2, r3, #1
 8007494:	2030      	movs	r0, #48	; 0x30
 8007496:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800749a:	4422      	add	r2, r4
 800749c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074a4:	3302      	adds	r3, #2
 80074a6:	e7c7      	b.n	8007438 <_printf_common+0x58>
 80074a8:	2301      	movs	r3, #1
 80074aa:	4622      	mov	r2, r4
 80074ac:	4649      	mov	r1, r9
 80074ae:	4638      	mov	r0, r7
 80074b0:	47c0      	blx	r8
 80074b2:	3001      	adds	r0, #1
 80074b4:	d0e6      	beq.n	8007484 <_printf_common+0xa4>
 80074b6:	3601      	adds	r6, #1
 80074b8:	e7d9      	b.n	800746e <_printf_common+0x8e>
	...

080074bc <_printf_i>:
 80074bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074c0:	7e0f      	ldrb	r7, [r1, #24]
 80074c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074c4:	2f78      	cmp	r7, #120	; 0x78
 80074c6:	4691      	mov	r9, r2
 80074c8:	4680      	mov	r8, r0
 80074ca:	460c      	mov	r4, r1
 80074cc:	469a      	mov	sl, r3
 80074ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074d2:	d807      	bhi.n	80074e4 <_printf_i+0x28>
 80074d4:	2f62      	cmp	r7, #98	; 0x62
 80074d6:	d80a      	bhi.n	80074ee <_printf_i+0x32>
 80074d8:	2f00      	cmp	r7, #0
 80074da:	f000 80d8 	beq.w	800768e <_printf_i+0x1d2>
 80074de:	2f58      	cmp	r7, #88	; 0x58
 80074e0:	f000 80a3 	beq.w	800762a <_printf_i+0x16e>
 80074e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074ec:	e03a      	b.n	8007564 <_printf_i+0xa8>
 80074ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074f2:	2b15      	cmp	r3, #21
 80074f4:	d8f6      	bhi.n	80074e4 <_printf_i+0x28>
 80074f6:	a101      	add	r1, pc, #4	; (adr r1, 80074fc <_printf_i+0x40>)
 80074f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074fc:	08007555 	.word	0x08007555
 8007500:	08007569 	.word	0x08007569
 8007504:	080074e5 	.word	0x080074e5
 8007508:	080074e5 	.word	0x080074e5
 800750c:	080074e5 	.word	0x080074e5
 8007510:	080074e5 	.word	0x080074e5
 8007514:	08007569 	.word	0x08007569
 8007518:	080074e5 	.word	0x080074e5
 800751c:	080074e5 	.word	0x080074e5
 8007520:	080074e5 	.word	0x080074e5
 8007524:	080074e5 	.word	0x080074e5
 8007528:	08007675 	.word	0x08007675
 800752c:	08007599 	.word	0x08007599
 8007530:	08007657 	.word	0x08007657
 8007534:	080074e5 	.word	0x080074e5
 8007538:	080074e5 	.word	0x080074e5
 800753c:	08007697 	.word	0x08007697
 8007540:	080074e5 	.word	0x080074e5
 8007544:	08007599 	.word	0x08007599
 8007548:	080074e5 	.word	0x080074e5
 800754c:	080074e5 	.word	0x080074e5
 8007550:	0800765f 	.word	0x0800765f
 8007554:	682b      	ldr	r3, [r5, #0]
 8007556:	1d1a      	adds	r2, r3, #4
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	602a      	str	r2, [r5, #0]
 800755c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007560:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007564:	2301      	movs	r3, #1
 8007566:	e0a3      	b.n	80076b0 <_printf_i+0x1f4>
 8007568:	6820      	ldr	r0, [r4, #0]
 800756a:	6829      	ldr	r1, [r5, #0]
 800756c:	0606      	lsls	r6, r0, #24
 800756e:	f101 0304 	add.w	r3, r1, #4
 8007572:	d50a      	bpl.n	800758a <_printf_i+0xce>
 8007574:	680e      	ldr	r6, [r1, #0]
 8007576:	602b      	str	r3, [r5, #0]
 8007578:	2e00      	cmp	r6, #0
 800757a:	da03      	bge.n	8007584 <_printf_i+0xc8>
 800757c:	232d      	movs	r3, #45	; 0x2d
 800757e:	4276      	negs	r6, r6
 8007580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007584:	485e      	ldr	r0, [pc, #376]	; (8007700 <_printf_i+0x244>)
 8007586:	230a      	movs	r3, #10
 8007588:	e019      	b.n	80075be <_printf_i+0x102>
 800758a:	680e      	ldr	r6, [r1, #0]
 800758c:	602b      	str	r3, [r5, #0]
 800758e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007592:	bf18      	it	ne
 8007594:	b236      	sxthne	r6, r6
 8007596:	e7ef      	b.n	8007578 <_printf_i+0xbc>
 8007598:	682b      	ldr	r3, [r5, #0]
 800759a:	6820      	ldr	r0, [r4, #0]
 800759c:	1d19      	adds	r1, r3, #4
 800759e:	6029      	str	r1, [r5, #0]
 80075a0:	0601      	lsls	r1, r0, #24
 80075a2:	d501      	bpl.n	80075a8 <_printf_i+0xec>
 80075a4:	681e      	ldr	r6, [r3, #0]
 80075a6:	e002      	b.n	80075ae <_printf_i+0xf2>
 80075a8:	0646      	lsls	r6, r0, #25
 80075aa:	d5fb      	bpl.n	80075a4 <_printf_i+0xe8>
 80075ac:	881e      	ldrh	r6, [r3, #0]
 80075ae:	4854      	ldr	r0, [pc, #336]	; (8007700 <_printf_i+0x244>)
 80075b0:	2f6f      	cmp	r7, #111	; 0x6f
 80075b2:	bf0c      	ite	eq
 80075b4:	2308      	moveq	r3, #8
 80075b6:	230a      	movne	r3, #10
 80075b8:	2100      	movs	r1, #0
 80075ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075be:	6865      	ldr	r5, [r4, #4]
 80075c0:	60a5      	str	r5, [r4, #8]
 80075c2:	2d00      	cmp	r5, #0
 80075c4:	bfa2      	ittt	ge
 80075c6:	6821      	ldrge	r1, [r4, #0]
 80075c8:	f021 0104 	bicge.w	r1, r1, #4
 80075cc:	6021      	strge	r1, [r4, #0]
 80075ce:	b90e      	cbnz	r6, 80075d4 <_printf_i+0x118>
 80075d0:	2d00      	cmp	r5, #0
 80075d2:	d04d      	beq.n	8007670 <_printf_i+0x1b4>
 80075d4:	4615      	mov	r5, r2
 80075d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80075da:	fb03 6711 	mls	r7, r3, r1, r6
 80075de:	5dc7      	ldrb	r7, [r0, r7]
 80075e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80075e4:	4637      	mov	r7, r6
 80075e6:	42bb      	cmp	r3, r7
 80075e8:	460e      	mov	r6, r1
 80075ea:	d9f4      	bls.n	80075d6 <_printf_i+0x11a>
 80075ec:	2b08      	cmp	r3, #8
 80075ee:	d10b      	bne.n	8007608 <_printf_i+0x14c>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	07de      	lsls	r6, r3, #31
 80075f4:	d508      	bpl.n	8007608 <_printf_i+0x14c>
 80075f6:	6923      	ldr	r3, [r4, #16]
 80075f8:	6861      	ldr	r1, [r4, #4]
 80075fa:	4299      	cmp	r1, r3
 80075fc:	bfde      	ittt	le
 80075fe:	2330      	movle	r3, #48	; 0x30
 8007600:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007604:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007608:	1b52      	subs	r2, r2, r5
 800760a:	6122      	str	r2, [r4, #16]
 800760c:	f8cd a000 	str.w	sl, [sp]
 8007610:	464b      	mov	r3, r9
 8007612:	aa03      	add	r2, sp, #12
 8007614:	4621      	mov	r1, r4
 8007616:	4640      	mov	r0, r8
 8007618:	f7ff fee2 	bl	80073e0 <_printf_common>
 800761c:	3001      	adds	r0, #1
 800761e:	d14c      	bne.n	80076ba <_printf_i+0x1fe>
 8007620:	f04f 30ff 	mov.w	r0, #4294967295
 8007624:	b004      	add	sp, #16
 8007626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800762a:	4835      	ldr	r0, [pc, #212]	; (8007700 <_printf_i+0x244>)
 800762c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007630:	6829      	ldr	r1, [r5, #0]
 8007632:	6823      	ldr	r3, [r4, #0]
 8007634:	f851 6b04 	ldr.w	r6, [r1], #4
 8007638:	6029      	str	r1, [r5, #0]
 800763a:	061d      	lsls	r5, r3, #24
 800763c:	d514      	bpl.n	8007668 <_printf_i+0x1ac>
 800763e:	07df      	lsls	r7, r3, #31
 8007640:	bf44      	itt	mi
 8007642:	f043 0320 	orrmi.w	r3, r3, #32
 8007646:	6023      	strmi	r3, [r4, #0]
 8007648:	b91e      	cbnz	r6, 8007652 <_printf_i+0x196>
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	f023 0320 	bic.w	r3, r3, #32
 8007650:	6023      	str	r3, [r4, #0]
 8007652:	2310      	movs	r3, #16
 8007654:	e7b0      	b.n	80075b8 <_printf_i+0xfc>
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	f043 0320 	orr.w	r3, r3, #32
 800765c:	6023      	str	r3, [r4, #0]
 800765e:	2378      	movs	r3, #120	; 0x78
 8007660:	4828      	ldr	r0, [pc, #160]	; (8007704 <_printf_i+0x248>)
 8007662:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007666:	e7e3      	b.n	8007630 <_printf_i+0x174>
 8007668:	0659      	lsls	r1, r3, #25
 800766a:	bf48      	it	mi
 800766c:	b2b6      	uxthmi	r6, r6
 800766e:	e7e6      	b.n	800763e <_printf_i+0x182>
 8007670:	4615      	mov	r5, r2
 8007672:	e7bb      	b.n	80075ec <_printf_i+0x130>
 8007674:	682b      	ldr	r3, [r5, #0]
 8007676:	6826      	ldr	r6, [r4, #0]
 8007678:	6961      	ldr	r1, [r4, #20]
 800767a:	1d18      	adds	r0, r3, #4
 800767c:	6028      	str	r0, [r5, #0]
 800767e:	0635      	lsls	r5, r6, #24
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	d501      	bpl.n	8007688 <_printf_i+0x1cc>
 8007684:	6019      	str	r1, [r3, #0]
 8007686:	e002      	b.n	800768e <_printf_i+0x1d2>
 8007688:	0670      	lsls	r0, r6, #25
 800768a:	d5fb      	bpl.n	8007684 <_printf_i+0x1c8>
 800768c:	8019      	strh	r1, [r3, #0]
 800768e:	2300      	movs	r3, #0
 8007690:	6123      	str	r3, [r4, #16]
 8007692:	4615      	mov	r5, r2
 8007694:	e7ba      	b.n	800760c <_printf_i+0x150>
 8007696:	682b      	ldr	r3, [r5, #0]
 8007698:	1d1a      	adds	r2, r3, #4
 800769a:	602a      	str	r2, [r5, #0]
 800769c:	681d      	ldr	r5, [r3, #0]
 800769e:	6862      	ldr	r2, [r4, #4]
 80076a0:	2100      	movs	r1, #0
 80076a2:	4628      	mov	r0, r5
 80076a4:	f7f8 fdec 	bl	8000280 <memchr>
 80076a8:	b108      	cbz	r0, 80076ae <_printf_i+0x1f2>
 80076aa:	1b40      	subs	r0, r0, r5
 80076ac:	6060      	str	r0, [r4, #4]
 80076ae:	6863      	ldr	r3, [r4, #4]
 80076b0:	6123      	str	r3, [r4, #16]
 80076b2:	2300      	movs	r3, #0
 80076b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076b8:	e7a8      	b.n	800760c <_printf_i+0x150>
 80076ba:	6923      	ldr	r3, [r4, #16]
 80076bc:	462a      	mov	r2, r5
 80076be:	4649      	mov	r1, r9
 80076c0:	4640      	mov	r0, r8
 80076c2:	47d0      	blx	sl
 80076c4:	3001      	adds	r0, #1
 80076c6:	d0ab      	beq.n	8007620 <_printf_i+0x164>
 80076c8:	6823      	ldr	r3, [r4, #0]
 80076ca:	079b      	lsls	r3, r3, #30
 80076cc:	d413      	bmi.n	80076f6 <_printf_i+0x23a>
 80076ce:	68e0      	ldr	r0, [r4, #12]
 80076d0:	9b03      	ldr	r3, [sp, #12]
 80076d2:	4298      	cmp	r0, r3
 80076d4:	bfb8      	it	lt
 80076d6:	4618      	movlt	r0, r3
 80076d8:	e7a4      	b.n	8007624 <_printf_i+0x168>
 80076da:	2301      	movs	r3, #1
 80076dc:	4632      	mov	r2, r6
 80076de:	4649      	mov	r1, r9
 80076e0:	4640      	mov	r0, r8
 80076e2:	47d0      	blx	sl
 80076e4:	3001      	adds	r0, #1
 80076e6:	d09b      	beq.n	8007620 <_printf_i+0x164>
 80076e8:	3501      	adds	r5, #1
 80076ea:	68e3      	ldr	r3, [r4, #12]
 80076ec:	9903      	ldr	r1, [sp, #12]
 80076ee:	1a5b      	subs	r3, r3, r1
 80076f0:	42ab      	cmp	r3, r5
 80076f2:	dcf2      	bgt.n	80076da <_printf_i+0x21e>
 80076f4:	e7eb      	b.n	80076ce <_printf_i+0x212>
 80076f6:	2500      	movs	r5, #0
 80076f8:	f104 0619 	add.w	r6, r4, #25
 80076fc:	e7f5      	b.n	80076ea <_printf_i+0x22e>
 80076fe:	bf00      	nop
 8007700:	08007b73 	.word	0x08007b73
 8007704:	08007b84 	.word	0x08007b84

08007708 <memmove>:
 8007708:	4288      	cmp	r0, r1
 800770a:	b510      	push	{r4, lr}
 800770c:	eb01 0402 	add.w	r4, r1, r2
 8007710:	d902      	bls.n	8007718 <memmove+0x10>
 8007712:	4284      	cmp	r4, r0
 8007714:	4623      	mov	r3, r4
 8007716:	d807      	bhi.n	8007728 <memmove+0x20>
 8007718:	1e43      	subs	r3, r0, #1
 800771a:	42a1      	cmp	r1, r4
 800771c:	d008      	beq.n	8007730 <memmove+0x28>
 800771e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007722:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007726:	e7f8      	b.n	800771a <memmove+0x12>
 8007728:	4402      	add	r2, r0
 800772a:	4601      	mov	r1, r0
 800772c:	428a      	cmp	r2, r1
 800772e:	d100      	bne.n	8007732 <memmove+0x2a>
 8007730:	bd10      	pop	{r4, pc}
 8007732:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007736:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800773a:	e7f7      	b.n	800772c <memmove+0x24>

0800773c <_free_r>:
 800773c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800773e:	2900      	cmp	r1, #0
 8007740:	d044      	beq.n	80077cc <_free_r+0x90>
 8007742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007746:	9001      	str	r0, [sp, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	f1a1 0404 	sub.w	r4, r1, #4
 800774e:	bfb8      	it	lt
 8007750:	18e4      	addlt	r4, r4, r3
 8007752:	f000 f913 	bl	800797c <__malloc_lock>
 8007756:	4a1e      	ldr	r2, [pc, #120]	; (80077d0 <_free_r+0x94>)
 8007758:	9801      	ldr	r0, [sp, #4]
 800775a:	6813      	ldr	r3, [r2, #0]
 800775c:	b933      	cbnz	r3, 800776c <_free_r+0x30>
 800775e:	6063      	str	r3, [r4, #4]
 8007760:	6014      	str	r4, [r2, #0]
 8007762:	b003      	add	sp, #12
 8007764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007768:	f000 b90e 	b.w	8007988 <__malloc_unlock>
 800776c:	42a3      	cmp	r3, r4
 800776e:	d908      	bls.n	8007782 <_free_r+0x46>
 8007770:	6825      	ldr	r5, [r4, #0]
 8007772:	1961      	adds	r1, r4, r5
 8007774:	428b      	cmp	r3, r1
 8007776:	bf01      	itttt	eq
 8007778:	6819      	ldreq	r1, [r3, #0]
 800777a:	685b      	ldreq	r3, [r3, #4]
 800777c:	1949      	addeq	r1, r1, r5
 800777e:	6021      	streq	r1, [r4, #0]
 8007780:	e7ed      	b.n	800775e <_free_r+0x22>
 8007782:	461a      	mov	r2, r3
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	b10b      	cbz	r3, 800778c <_free_r+0x50>
 8007788:	42a3      	cmp	r3, r4
 800778a:	d9fa      	bls.n	8007782 <_free_r+0x46>
 800778c:	6811      	ldr	r1, [r2, #0]
 800778e:	1855      	adds	r5, r2, r1
 8007790:	42a5      	cmp	r5, r4
 8007792:	d10b      	bne.n	80077ac <_free_r+0x70>
 8007794:	6824      	ldr	r4, [r4, #0]
 8007796:	4421      	add	r1, r4
 8007798:	1854      	adds	r4, r2, r1
 800779a:	42a3      	cmp	r3, r4
 800779c:	6011      	str	r1, [r2, #0]
 800779e:	d1e0      	bne.n	8007762 <_free_r+0x26>
 80077a0:	681c      	ldr	r4, [r3, #0]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	6053      	str	r3, [r2, #4]
 80077a6:	4421      	add	r1, r4
 80077a8:	6011      	str	r1, [r2, #0]
 80077aa:	e7da      	b.n	8007762 <_free_r+0x26>
 80077ac:	d902      	bls.n	80077b4 <_free_r+0x78>
 80077ae:	230c      	movs	r3, #12
 80077b0:	6003      	str	r3, [r0, #0]
 80077b2:	e7d6      	b.n	8007762 <_free_r+0x26>
 80077b4:	6825      	ldr	r5, [r4, #0]
 80077b6:	1961      	adds	r1, r4, r5
 80077b8:	428b      	cmp	r3, r1
 80077ba:	bf04      	itt	eq
 80077bc:	6819      	ldreq	r1, [r3, #0]
 80077be:	685b      	ldreq	r3, [r3, #4]
 80077c0:	6063      	str	r3, [r4, #4]
 80077c2:	bf04      	itt	eq
 80077c4:	1949      	addeq	r1, r1, r5
 80077c6:	6021      	streq	r1, [r4, #0]
 80077c8:	6054      	str	r4, [r2, #4]
 80077ca:	e7ca      	b.n	8007762 <_free_r+0x26>
 80077cc:	b003      	add	sp, #12
 80077ce:	bd30      	pop	{r4, r5, pc}
 80077d0:	2000d588 	.word	0x2000d588

080077d4 <sbrk_aligned>:
 80077d4:	b570      	push	{r4, r5, r6, lr}
 80077d6:	4e0e      	ldr	r6, [pc, #56]	; (8007810 <sbrk_aligned+0x3c>)
 80077d8:	460c      	mov	r4, r1
 80077da:	6831      	ldr	r1, [r6, #0]
 80077dc:	4605      	mov	r5, r0
 80077de:	b911      	cbnz	r1, 80077e6 <sbrk_aligned+0x12>
 80077e0:	f000 f8bc 	bl	800795c <_sbrk_r>
 80077e4:	6030      	str	r0, [r6, #0]
 80077e6:	4621      	mov	r1, r4
 80077e8:	4628      	mov	r0, r5
 80077ea:	f000 f8b7 	bl	800795c <_sbrk_r>
 80077ee:	1c43      	adds	r3, r0, #1
 80077f0:	d00a      	beq.n	8007808 <sbrk_aligned+0x34>
 80077f2:	1cc4      	adds	r4, r0, #3
 80077f4:	f024 0403 	bic.w	r4, r4, #3
 80077f8:	42a0      	cmp	r0, r4
 80077fa:	d007      	beq.n	800780c <sbrk_aligned+0x38>
 80077fc:	1a21      	subs	r1, r4, r0
 80077fe:	4628      	mov	r0, r5
 8007800:	f000 f8ac 	bl	800795c <_sbrk_r>
 8007804:	3001      	adds	r0, #1
 8007806:	d101      	bne.n	800780c <sbrk_aligned+0x38>
 8007808:	f04f 34ff 	mov.w	r4, #4294967295
 800780c:	4620      	mov	r0, r4
 800780e:	bd70      	pop	{r4, r5, r6, pc}
 8007810:	2000d58c 	.word	0x2000d58c

08007814 <_malloc_r>:
 8007814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007818:	1ccd      	adds	r5, r1, #3
 800781a:	f025 0503 	bic.w	r5, r5, #3
 800781e:	3508      	adds	r5, #8
 8007820:	2d0c      	cmp	r5, #12
 8007822:	bf38      	it	cc
 8007824:	250c      	movcc	r5, #12
 8007826:	2d00      	cmp	r5, #0
 8007828:	4607      	mov	r7, r0
 800782a:	db01      	blt.n	8007830 <_malloc_r+0x1c>
 800782c:	42a9      	cmp	r1, r5
 800782e:	d905      	bls.n	800783c <_malloc_r+0x28>
 8007830:	230c      	movs	r3, #12
 8007832:	603b      	str	r3, [r7, #0]
 8007834:	2600      	movs	r6, #0
 8007836:	4630      	mov	r0, r6
 8007838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800783c:	4e2e      	ldr	r6, [pc, #184]	; (80078f8 <_malloc_r+0xe4>)
 800783e:	f000 f89d 	bl	800797c <__malloc_lock>
 8007842:	6833      	ldr	r3, [r6, #0]
 8007844:	461c      	mov	r4, r3
 8007846:	bb34      	cbnz	r4, 8007896 <_malloc_r+0x82>
 8007848:	4629      	mov	r1, r5
 800784a:	4638      	mov	r0, r7
 800784c:	f7ff ffc2 	bl	80077d4 <sbrk_aligned>
 8007850:	1c43      	adds	r3, r0, #1
 8007852:	4604      	mov	r4, r0
 8007854:	d14d      	bne.n	80078f2 <_malloc_r+0xde>
 8007856:	6834      	ldr	r4, [r6, #0]
 8007858:	4626      	mov	r6, r4
 800785a:	2e00      	cmp	r6, #0
 800785c:	d140      	bne.n	80078e0 <_malloc_r+0xcc>
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	4631      	mov	r1, r6
 8007862:	4638      	mov	r0, r7
 8007864:	eb04 0803 	add.w	r8, r4, r3
 8007868:	f000 f878 	bl	800795c <_sbrk_r>
 800786c:	4580      	cmp	r8, r0
 800786e:	d13a      	bne.n	80078e6 <_malloc_r+0xd2>
 8007870:	6821      	ldr	r1, [r4, #0]
 8007872:	3503      	adds	r5, #3
 8007874:	1a6d      	subs	r5, r5, r1
 8007876:	f025 0503 	bic.w	r5, r5, #3
 800787a:	3508      	adds	r5, #8
 800787c:	2d0c      	cmp	r5, #12
 800787e:	bf38      	it	cc
 8007880:	250c      	movcc	r5, #12
 8007882:	4629      	mov	r1, r5
 8007884:	4638      	mov	r0, r7
 8007886:	f7ff ffa5 	bl	80077d4 <sbrk_aligned>
 800788a:	3001      	adds	r0, #1
 800788c:	d02b      	beq.n	80078e6 <_malloc_r+0xd2>
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	442b      	add	r3, r5
 8007892:	6023      	str	r3, [r4, #0]
 8007894:	e00e      	b.n	80078b4 <_malloc_r+0xa0>
 8007896:	6822      	ldr	r2, [r4, #0]
 8007898:	1b52      	subs	r2, r2, r5
 800789a:	d41e      	bmi.n	80078da <_malloc_r+0xc6>
 800789c:	2a0b      	cmp	r2, #11
 800789e:	d916      	bls.n	80078ce <_malloc_r+0xba>
 80078a0:	1961      	adds	r1, r4, r5
 80078a2:	42a3      	cmp	r3, r4
 80078a4:	6025      	str	r5, [r4, #0]
 80078a6:	bf18      	it	ne
 80078a8:	6059      	strne	r1, [r3, #4]
 80078aa:	6863      	ldr	r3, [r4, #4]
 80078ac:	bf08      	it	eq
 80078ae:	6031      	streq	r1, [r6, #0]
 80078b0:	5162      	str	r2, [r4, r5]
 80078b2:	604b      	str	r3, [r1, #4]
 80078b4:	4638      	mov	r0, r7
 80078b6:	f104 060b 	add.w	r6, r4, #11
 80078ba:	f000 f865 	bl	8007988 <__malloc_unlock>
 80078be:	f026 0607 	bic.w	r6, r6, #7
 80078c2:	1d23      	adds	r3, r4, #4
 80078c4:	1af2      	subs	r2, r6, r3
 80078c6:	d0b6      	beq.n	8007836 <_malloc_r+0x22>
 80078c8:	1b9b      	subs	r3, r3, r6
 80078ca:	50a3      	str	r3, [r4, r2]
 80078cc:	e7b3      	b.n	8007836 <_malloc_r+0x22>
 80078ce:	6862      	ldr	r2, [r4, #4]
 80078d0:	42a3      	cmp	r3, r4
 80078d2:	bf0c      	ite	eq
 80078d4:	6032      	streq	r2, [r6, #0]
 80078d6:	605a      	strne	r2, [r3, #4]
 80078d8:	e7ec      	b.n	80078b4 <_malloc_r+0xa0>
 80078da:	4623      	mov	r3, r4
 80078dc:	6864      	ldr	r4, [r4, #4]
 80078de:	e7b2      	b.n	8007846 <_malloc_r+0x32>
 80078e0:	4634      	mov	r4, r6
 80078e2:	6876      	ldr	r6, [r6, #4]
 80078e4:	e7b9      	b.n	800785a <_malloc_r+0x46>
 80078e6:	230c      	movs	r3, #12
 80078e8:	603b      	str	r3, [r7, #0]
 80078ea:	4638      	mov	r0, r7
 80078ec:	f000 f84c 	bl	8007988 <__malloc_unlock>
 80078f0:	e7a1      	b.n	8007836 <_malloc_r+0x22>
 80078f2:	6025      	str	r5, [r4, #0]
 80078f4:	e7de      	b.n	80078b4 <_malloc_r+0xa0>
 80078f6:	bf00      	nop
 80078f8:	2000d588 	.word	0x2000d588

080078fc <_realloc_r>:
 80078fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007900:	4680      	mov	r8, r0
 8007902:	4614      	mov	r4, r2
 8007904:	460e      	mov	r6, r1
 8007906:	b921      	cbnz	r1, 8007912 <_realloc_r+0x16>
 8007908:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800790c:	4611      	mov	r1, r2
 800790e:	f7ff bf81 	b.w	8007814 <_malloc_r>
 8007912:	b92a      	cbnz	r2, 8007920 <_realloc_r+0x24>
 8007914:	f7ff ff12 	bl	800773c <_free_r>
 8007918:	4625      	mov	r5, r4
 800791a:	4628      	mov	r0, r5
 800791c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007920:	f000 f838 	bl	8007994 <_malloc_usable_size_r>
 8007924:	4284      	cmp	r4, r0
 8007926:	4607      	mov	r7, r0
 8007928:	d802      	bhi.n	8007930 <_realloc_r+0x34>
 800792a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800792e:	d812      	bhi.n	8007956 <_realloc_r+0x5a>
 8007930:	4621      	mov	r1, r4
 8007932:	4640      	mov	r0, r8
 8007934:	f7ff ff6e 	bl	8007814 <_malloc_r>
 8007938:	4605      	mov	r5, r0
 800793a:	2800      	cmp	r0, #0
 800793c:	d0ed      	beq.n	800791a <_realloc_r+0x1e>
 800793e:	42bc      	cmp	r4, r7
 8007940:	4622      	mov	r2, r4
 8007942:	4631      	mov	r1, r6
 8007944:	bf28      	it	cs
 8007946:	463a      	movcs	r2, r7
 8007948:	f7ff fbb8 	bl	80070bc <memcpy>
 800794c:	4631      	mov	r1, r6
 800794e:	4640      	mov	r0, r8
 8007950:	f7ff fef4 	bl	800773c <_free_r>
 8007954:	e7e1      	b.n	800791a <_realloc_r+0x1e>
 8007956:	4635      	mov	r5, r6
 8007958:	e7df      	b.n	800791a <_realloc_r+0x1e>
	...

0800795c <_sbrk_r>:
 800795c:	b538      	push	{r3, r4, r5, lr}
 800795e:	4d06      	ldr	r5, [pc, #24]	; (8007978 <_sbrk_r+0x1c>)
 8007960:	2300      	movs	r3, #0
 8007962:	4604      	mov	r4, r0
 8007964:	4608      	mov	r0, r1
 8007966:	602b      	str	r3, [r5, #0]
 8007968:	f000 f81e 	bl	80079a8 <_sbrk>
 800796c:	1c43      	adds	r3, r0, #1
 800796e:	d102      	bne.n	8007976 <_sbrk_r+0x1a>
 8007970:	682b      	ldr	r3, [r5, #0]
 8007972:	b103      	cbz	r3, 8007976 <_sbrk_r+0x1a>
 8007974:	6023      	str	r3, [r4, #0]
 8007976:	bd38      	pop	{r3, r4, r5, pc}
 8007978:	2000d590 	.word	0x2000d590

0800797c <__malloc_lock>:
 800797c:	4801      	ldr	r0, [pc, #4]	; (8007984 <__malloc_lock+0x8>)
 800797e:	f000 b811 	b.w	80079a4 <__retarget_lock_acquire_recursive>
 8007982:	bf00      	nop
 8007984:	2000d594 	.word	0x2000d594

08007988 <__malloc_unlock>:
 8007988:	4801      	ldr	r0, [pc, #4]	; (8007990 <__malloc_unlock+0x8>)
 800798a:	f000 b80c 	b.w	80079a6 <__retarget_lock_release_recursive>
 800798e:	bf00      	nop
 8007990:	2000d594 	.word	0x2000d594

08007994 <_malloc_usable_size_r>:
 8007994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007998:	1f18      	subs	r0, r3, #4
 800799a:	2b00      	cmp	r3, #0
 800799c:	bfbc      	itt	lt
 800799e:	580b      	ldrlt	r3, [r1, r0]
 80079a0:	18c0      	addlt	r0, r0, r3
 80079a2:	4770      	bx	lr

080079a4 <__retarget_lock_acquire_recursive>:
 80079a4:	4770      	bx	lr

080079a6 <__retarget_lock_release_recursive>:
 80079a6:	4770      	bx	lr

080079a8 <_sbrk>:
 80079a8:	4a04      	ldr	r2, [pc, #16]	; (80079bc <_sbrk+0x14>)
 80079aa:	6811      	ldr	r1, [r2, #0]
 80079ac:	4603      	mov	r3, r0
 80079ae:	b909      	cbnz	r1, 80079b4 <_sbrk+0xc>
 80079b0:	4903      	ldr	r1, [pc, #12]	; (80079c0 <_sbrk+0x18>)
 80079b2:	6011      	str	r1, [r2, #0]
 80079b4:	6810      	ldr	r0, [r2, #0]
 80079b6:	4403      	add	r3, r0
 80079b8:	6013      	str	r3, [r2, #0]
 80079ba:	4770      	bx	lr
 80079bc:	2000d598 	.word	0x2000d598
 80079c0:	2000d5a0 	.word	0x2000d5a0

080079c4 <_init>:
 80079c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c6:	bf00      	nop
 80079c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ca:	bc08      	pop	{r3}
 80079cc:	469e      	mov	lr, r3
 80079ce:	4770      	bx	lr

080079d0 <_fini>:
 80079d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d2:	bf00      	nop
 80079d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079d6:	bc08      	pop	{r3}
 80079d8:	469e      	mov	lr, r3
 80079da:	4770      	bx	lr
