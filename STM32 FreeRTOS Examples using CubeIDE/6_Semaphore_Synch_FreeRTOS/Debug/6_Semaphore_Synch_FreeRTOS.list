
6_Semaphore_Synch_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009080  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  08009220  08009220  00019220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094ac  080094ac  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080094ac  080094ac  000194ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094b4  080094b4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094b4  080094b4  000194b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094b8  080094b8  000194b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080094bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d4f0  20000078  08009534  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d568  08009534  0002d568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a544  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037a8  00000000  00000000  0003a5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  0003dd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001548  00000000  00000000  0003f468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ff9  00000000  00000000  000409b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019562  00000000  00000000  0005a9a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009eb1d  00000000  00000000  00073f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00112a28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b18  00000000  00000000  00112a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009208 	.word	0x08009208

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08009208 	.word	0x08009208

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	2000cb80 	.word	0x2000cb80

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b974 	b.w	8000630 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9d08      	ldr	r5, [sp, #32]
 8000366:	4604      	mov	r4, r0
 8000368:	468e      	mov	lr, r1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d14d      	bne.n	800040a <__udivmoddi4+0xaa>
 800036e:	428a      	cmp	r2, r1
 8000370:	4694      	mov	ip, r2
 8000372:	d969      	bls.n	8000448 <__udivmoddi4+0xe8>
 8000374:	fab2 f282 	clz	r2, r2
 8000378:	b152      	cbz	r2, 8000390 <__udivmoddi4+0x30>
 800037a:	fa01 f302 	lsl.w	r3, r1, r2
 800037e:	f1c2 0120 	rsb	r1, r2, #32
 8000382:	fa20 f101 	lsr.w	r1, r0, r1
 8000386:	fa0c fc02 	lsl.w	ip, ip, r2
 800038a:	ea41 0e03 	orr.w	lr, r1, r3
 800038e:	4094      	lsls	r4, r2
 8000390:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000394:	0c21      	lsrs	r1, r4, #16
 8000396:	fbbe f6f8 	udiv	r6, lr, r8
 800039a:	fa1f f78c 	uxth.w	r7, ip
 800039e:	fb08 e316 	mls	r3, r8, r6, lr
 80003a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003a6:	fb06 f107 	mul.w	r1, r6, r7
 80003aa:	4299      	cmp	r1, r3
 80003ac:	d90a      	bls.n	80003c4 <__udivmoddi4+0x64>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003b6:	f080 811f 	bcs.w	80005f8 <__udivmoddi4+0x298>
 80003ba:	4299      	cmp	r1, r3
 80003bc:	f240 811c 	bls.w	80005f8 <__udivmoddi4+0x298>
 80003c0:	3e02      	subs	r6, #2
 80003c2:	4463      	add	r3, ip
 80003c4:	1a5b      	subs	r3, r3, r1
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003cc:	fb08 3310 	mls	r3, r8, r0, r3
 80003d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d4:	fb00 f707 	mul.w	r7, r0, r7
 80003d8:	42a7      	cmp	r7, r4
 80003da:	d90a      	bls.n	80003f2 <__udivmoddi4+0x92>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e4:	f080 810a 	bcs.w	80005fc <__udivmoddi4+0x29c>
 80003e8:	42a7      	cmp	r7, r4
 80003ea:	f240 8107 	bls.w	80005fc <__udivmoddi4+0x29c>
 80003ee:	4464      	add	r4, ip
 80003f0:	3802      	subs	r0, #2
 80003f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f6:	1be4      	subs	r4, r4, r7
 80003f8:	2600      	movs	r6, #0
 80003fa:	b11d      	cbz	r5, 8000404 <__udivmoddi4+0xa4>
 80003fc:	40d4      	lsrs	r4, r2
 80003fe:	2300      	movs	r3, #0
 8000400:	e9c5 4300 	strd	r4, r3, [r5]
 8000404:	4631      	mov	r1, r6
 8000406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040a:	428b      	cmp	r3, r1
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0xc2>
 800040e:	2d00      	cmp	r5, #0
 8000410:	f000 80ef 	beq.w	80005f2 <__udivmoddi4+0x292>
 8000414:	2600      	movs	r6, #0
 8000416:	e9c5 0100 	strd	r0, r1, [r5]
 800041a:	4630      	mov	r0, r6
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	fab3 f683 	clz	r6, r3
 8000426:	2e00      	cmp	r6, #0
 8000428:	d14a      	bne.n	80004c0 <__udivmoddi4+0x160>
 800042a:	428b      	cmp	r3, r1
 800042c:	d302      	bcc.n	8000434 <__udivmoddi4+0xd4>
 800042e:	4282      	cmp	r2, r0
 8000430:	f200 80f9 	bhi.w	8000626 <__udivmoddi4+0x2c6>
 8000434:	1a84      	subs	r4, r0, r2
 8000436:	eb61 0303 	sbc.w	r3, r1, r3
 800043a:	2001      	movs	r0, #1
 800043c:	469e      	mov	lr, r3
 800043e:	2d00      	cmp	r5, #0
 8000440:	d0e0      	beq.n	8000404 <__udivmoddi4+0xa4>
 8000442:	e9c5 4e00 	strd	r4, lr, [r5]
 8000446:	e7dd      	b.n	8000404 <__udivmoddi4+0xa4>
 8000448:	b902      	cbnz	r2, 800044c <__udivmoddi4+0xec>
 800044a:	deff      	udf	#255	; 0xff
 800044c:	fab2 f282 	clz	r2, r2
 8000450:	2a00      	cmp	r2, #0
 8000452:	f040 8092 	bne.w	800057a <__udivmoddi4+0x21a>
 8000456:	eba1 010c 	sub.w	r1, r1, ip
 800045a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045e:	fa1f fe8c 	uxth.w	lr, ip
 8000462:	2601      	movs	r6, #1
 8000464:	0c20      	lsrs	r0, r4, #16
 8000466:	fbb1 f3f7 	udiv	r3, r1, r7
 800046a:	fb07 1113 	mls	r1, r7, r3, r1
 800046e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000472:	fb0e f003 	mul.w	r0, lr, r3
 8000476:	4288      	cmp	r0, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x12c>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x12a>
 8000484:	4288      	cmp	r0, r1
 8000486:	f200 80cb 	bhi.w	8000620 <__udivmoddi4+0x2c0>
 800048a:	4643      	mov	r3, r8
 800048c:	1a09      	subs	r1, r1, r0
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb1 f0f7 	udiv	r0, r1, r7
 8000494:	fb07 1110 	mls	r1, r7, r0, r1
 8000498:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800049c:	fb0e fe00 	mul.w	lr, lr, r0
 80004a0:	45a6      	cmp	lr, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x156>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004ac:	d202      	bcs.n	80004b4 <__udivmoddi4+0x154>
 80004ae:	45a6      	cmp	lr, r4
 80004b0:	f200 80bb 	bhi.w	800062a <__udivmoddi4+0x2ca>
 80004b4:	4608      	mov	r0, r1
 80004b6:	eba4 040e 	sub.w	r4, r4, lr
 80004ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004be:	e79c      	b.n	80003fa <__udivmoddi4+0x9a>
 80004c0:	f1c6 0720 	rsb	r7, r6, #32
 80004c4:	40b3      	lsls	r3, r6
 80004c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ce:	fa20 f407 	lsr.w	r4, r0, r7
 80004d2:	fa01 f306 	lsl.w	r3, r1, r6
 80004d6:	431c      	orrs	r4, r3
 80004d8:	40f9      	lsrs	r1, r7
 80004da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004de:	fa00 f306 	lsl.w	r3, r0, r6
 80004e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004e6:	0c20      	lsrs	r0, r4, #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fb09 1118 	mls	r1, r9, r8, r1
 80004f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f4:	fb08 f00e 	mul.w	r0, r8, lr
 80004f8:	4288      	cmp	r0, r1
 80004fa:	fa02 f206 	lsl.w	r2, r2, r6
 80004fe:	d90b      	bls.n	8000518 <__udivmoddi4+0x1b8>
 8000500:	eb1c 0101 	adds.w	r1, ip, r1
 8000504:	f108 3aff 	add.w	sl, r8, #4294967295
 8000508:	f080 8088 	bcs.w	800061c <__udivmoddi4+0x2bc>
 800050c:	4288      	cmp	r0, r1
 800050e:	f240 8085 	bls.w	800061c <__udivmoddi4+0x2bc>
 8000512:	f1a8 0802 	sub.w	r8, r8, #2
 8000516:	4461      	add	r1, ip
 8000518:	1a09      	subs	r1, r1, r0
 800051a:	b2a4      	uxth	r4, r4
 800051c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000520:	fb09 1110 	mls	r1, r9, r0, r1
 8000524:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000528:	fb00 fe0e 	mul.w	lr, r0, lr
 800052c:	458e      	cmp	lr, r1
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x1e2>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f100 34ff 	add.w	r4, r0, #4294967295
 8000538:	d26c      	bcs.n	8000614 <__udivmoddi4+0x2b4>
 800053a:	458e      	cmp	lr, r1
 800053c:	d96a      	bls.n	8000614 <__udivmoddi4+0x2b4>
 800053e:	3802      	subs	r0, #2
 8000540:	4461      	add	r1, ip
 8000542:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000546:	fba0 9402 	umull	r9, r4, r0, r2
 800054a:	eba1 010e 	sub.w	r1, r1, lr
 800054e:	42a1      	cmp	r1, r4
 8000550:	46c8      	mov	r8, r9
 8000552:	46a6      	mov	lr, r4
 8000554:	d356      	bcc.n	8000604 <__udivmoddi4+0x2a4>
 8000556:	d053      	beq.n	8000600 <__udivmoddi4+0x2a0>
 8000558:	b15d      	cbz	r5, 8000572 <__udivmoddi4+0x212>
 800055a:	ebb3 0208 	subs.w	r2, r3, r8
 800055e:	eb61 010e 	sbc.w	r1, r1, lr
 8000562:	fa01 f707 	lsl.w	r7, r1, r7
 8000566:	fa22 f306 	lsr.w	r3, r2, r6
 800056a:	40f1      	lsrs	r1, r6
 800056c:	431f      	orrs	r7, r3
 800056e:	e9c5 7100 	strd	r7, r1, [r5]
 8000572:	2600      	movs	r6, #0
 8000574:	4631      	mov	r1, r6
 8000576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	40d8      	lsrs	r0, r3
 8000580:	fa0c fc02 	lsl.w	ip, ip, r2
 8000584:	fa21 f303 	lsr.w	r3, r1, r3
 8000588:	4091      	lsls	r1, r2
 800058a:	4301      	orrs	r1, r0
 800058c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000590:	fa1f fe8c 	uxth.w	lr, ip
 8000594:	fbb3 f0f7 	udiv	r0, r3, r7
 8000598:	fb07 3610 	mls	r6, r7, r0, r3
 800059c:	0c0b      	lsrs	r3, r1, #16
 800059e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005a2:	fb00 f60e 	mul.w	r6, r0, lr
 80005a6:	429e      	cmp	r6, r3
 80005a8:	fa04 f402 	lsl.w	r4, r4, r2
 80005ac:	d908      	bls.n	80005c0 <__udivmoddi4+0x260>
 80005ae:	eb1c 0303 	adds.w	r3, ip, r3
 80005b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005b6:	d22f      	bcs.n	8000618 <__udivmoddi4+0x2b8>
 80005b8:	429e      	cmp	r6, r3
 80005ba:	d92d      	bls.n	8000618 <__udivmoddi4+0x2b8>
 80005bc:	3802      	subs	r0, #2
 80005be:	4463      	add	r3, ip
 80005c0:	1b9b      	subs	r3, r3, r6
 80005c2:	b289      	uxth	r1, r1
 80005c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005c8:	fb07 3316 	mls	r3, r7, r6, r3
 80005cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005d0:	fb06 f30e 	mul.w	r3, r6, lr
 80005d4:	428b      	cmp	r3, r1
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x28a>
 80005d8:	eb1c 0101 	adds.w	r1, ip, r1
 80005dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005e0:	d216      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005e2:	428b      	cmp	r3, r1
 80005e4:	d914      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005e6:	3e02      	subs	r6, #2
 80005e8:	4461      	add	r1, ip
 80005ea:	1ac9      	subs	r1, r1, r3
 80005ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005f0:	e738      	b.n	8000464 <__udivmoddi4+0x104>
 80005f2:	462e      	mov	r6, r5
 80005f4:	4628      	mov	r0, r5
 80005f6:	e705      	b.n	8000404 <__udivmoddi4+0xa4>
 80005f8:	4606      	mov	r6, r0
 80005fa:	e6e3      	b.n	80003c4 <__udivmoddi4+0x64>
 80005fc:	4618      	mov	r0, r3
 80005fe:	e6f8      	b.n	80003f2 <__udivmoddi4+0x92>
 8000600:	454b      	cmp	r3, r9
 8000602:	d2a9      	bcs.n	8000558 <__udivmoddi4+0x1f8>
 8000604:	ebb9 0802 	subs.w	r8, r9, r2
 8000608:	eb64 0e0c 	sbc.w	lr, r4, ip
 800060c:	3801      	subs	r0, #1
 800060e:	e7a3      	b.n	8000558 <__udivmoddi4+0x1f8>
 8000610:	4646      	mov	r6, r8
 8000612:	e7ea      	b.n	80005ea <__udivmoddi4+0x28a>
 8000614:	4620      	mov	r0, r4
 8000616:	e794      	b.n	8000542 <__udivmoddi4+0x1e2>
 8000618:	4640      	mov	r0, r8
 800061a:	e7d1      	b.n	80005c0 <__udivmoddi4+0x260>
 800061c:	46d0      	mov	r8, sl
 800061e:	e77b      	b.n	8000518 <__udivmoddi4+0x1b8>
 8000620:	3b02      	subs	r3, #2
 8000622:	4461      	add	r1, ip
 8000624:	e732      	b.n	800048c <__udivmoddi4+0x12c>
 8000626:	4630      	mov	r0, r6
 8000628:	e709      	b.n	800043e <__udivmoddi4+0xde>
 800062a:	4464      	add	r4, ip
 800062c:	3802      	subs	r0, #2
 800062e:	e742      	b.n	80004b6 <__udivmoddi4+0x156>

08000630 <__aeabi_idiv0>:
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063a:	f000 fb9f 	bl	8000d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063e:	f000 f87b 	bl	8000738 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000642:	f000 f90d 	bl	8000860 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000646:	f000 f8e1 	bl	800080c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1<<0);
 800064a:	4b31      	ldr	r3, [pc, #196]	; (8000710 <main+0xdc>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a30      	ldr	r2, [pc, #192]	; (8000710 <main+0xdc>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000656:	f005 fdc1 	bl	80061dc <SEGGER_SYSVIEW_Conf>
  vSetVarulMaxPRIGROUPValue();
 800065a:	f005 fb5f 	bl	8005d1c <vSetVarulMaxPRIGROUPValue>
  SEGGER_SYSVIEW_Start();
 800065e:	f006 fe73 	bl	8007348 <SEGGER_SYSVIEW_Start>


/******************************************************/
status = xTaskCreate(Employee_Handler,"Employee Task",configMINIMAL_STACK_SIZE,NULL,2,&Employee_Handle);
 8000662:	4b2c      	ldr	r3, [pc, #176]	; (8000714 <main+0xe0>)
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	2302      	movs	r3, #2
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2300      	movs	r3, #0
 800066c:	2282      	movs	r2, #130	; 0x82
 800066e:	492a      	ldr	r1, [pc, #168]	; (8000718 <main+0xe4>)
 8000670:	482a      	ldr	r0, [pc, #168]	; (800071c <main+0xe8>)
 8000672:	f003 fca3 	bl	8003fbc <xTaskCreate>
 8000676:	4603      	mov	r3, r0
 8000678:	4a29      	ldr	r2, [pc, #164]	; (8000720 <main+0xec>)
 800067a:	6013      	str	r3, [r2, #0]

configASSERT(status == pdPASS); // Check if it is succesfully created
 800067c:	4b28      	ldr	r3, [pc, #160]	; (8000720 <main+0xec>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d00a      	beq.n	800069a <main+0x66>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000688:	f383 8811 	msr	BASEPRI, r3
 800068c:	f3bf 8f6f 	isb	sy
 8000690:	f3bf 8f4f 	dsb	sy
 8000694:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000696:	bf00      	nop
 8000698:	e7fe      	b.n	8000698 <main+0x64>

status = xTaskCreate(Manager_Handler,"Manager",configMINIMAL_STACK_SIZE,NULL,3,&Manager_Handle);
 800069a:	4b22      	ldr	r3, [pc, #136]	; (8000724 <main+0xf0>)
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	2303      	movs	r3, #3
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2300      	movs	r3, #0
 80006a4:	2282      	movs	r2, #130	; 0x82
 80006a6:	4920      	ldr	r1, [pc, #128]	; (8000728 <main+0xf4>)
 80006a8:	4820      	ldr	r0, [pc, #128]	; (800072c <main+0xf8>)
 80006aa:	f003 fc87 	bl	8003fbc <xTaskCreate>
 80006ae:	4603      	mov	r3, r0
 80006b0:	4a1b      	ldr	r2, [pc, #108]	; (8000720 <main+0xec>)
 80006b2:	6013      	str	r3, [r2, #0]

configASSERT(status == pdPASS);  // Check if it is succesfully created
 80006b4:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <main+0xec>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d00a      	beq.n	80006d2 <main+0x9e>
        __asm volatile
 80006bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006c0:	f383 8811 	msr	BASEPRI, r3
 80006c4:	f3bf 8f6f 	isb	sy
 80006c8:	f3bf 8f4f 	dsb	sy
 80006cc:	603b      	str	r3, [r7, #0]
    }
 80006ce:	bf00      	nop
 80006d0:	e7fe      	b.n	80006d0 <main+0x9c>

vSemaphoreCreateBinary(Binary_Semaphore_Handle);
 80006d2:	2203      	movs	r2, #3
 80006d4:	2100      	movs	r1, #0
 80006d6:	2001      	movs	r0, #1
 80006d8:	f002 fee2 	bl	80034a0 <xQueueGenericCreate>
 80006dc:	4603      	mov	r3, r0
 80006de:	4a14      	ldr	r2, [pc, #80]	; (8000730 <main+0xfc>)
 80006e0:	6013      	str	r3, [r2, #0]
 80006e2:	4b13      	ldr	r3, [pc, #76]	; (8000730 <main+0xfc>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d006      	beq.n	80006f8 <main+0xc4>
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <main+0xfc>)
 80006ec:	6818      	ldr	r0, [r3, #0]
 80006ee:	2300      	movs	r3, #0
 80006f0:	2200      	movs	r2, #0
 80006f2:	2100      	movs	r1, #0
 80006f4:	f002 ff4c 	bl	8003590 <xQueueGenericSend>

WorkQueue = xQueueCreate(1,sizeof(unsigned int));
 80006f8:	2200      	movs	r2, #0
 80006fa:	2104      	movs	r1, #4
 80006fc:	2001      	movs	r0, #1
 80006fe:	f002 fecf 	bl	80034a0 <xQueueGenericCreate>
 8000702:	4603      	mov	r3, r0
 8000704:	4a0b      	ldr	r2, [pc, #44]	; (8000734 <main+0x100>)
 8000706:	6013      	str	r3, [r2, #0]


vTaskStartScheduler();
 8000708:	f003 fe18 	bl	800433c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800070c:	e7fe      	b.n	800070c <main+0xd8>
 800070e:	bf00      	nop
 8000710:	e0001000 	.word	0xe0001000
 8000714:	200000dc 	.word	0x200000dc
 8000718:	08009220 	.word	0x08009220
 800071c:	08000945 	.word	0x08000945
 8000720:	200000e8 	.word	0x200000e8
 8000724:	200000d8 	.word	0x200000d8
 8000728:	08009230 	.word	0x08009230
 800072c:	080008e5 	.word	0x080008e5
 8000730:	200000e0 	.word	0x200000e0
 8000734:	200000e4 	.word	0x200000e4

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	; 0x50
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0320 	add.w	r3, r7, #32
 8000742:	2230      	movs	r2, #48	; 0x30
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f007 fb54 	bl	8007df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	4b28      	ldr	r3, [pc, #160]	; (8000804 <SystemClock_Config+0xcc>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	4a27      	ldr	r2, [pc, #156]	; (8000804 <SystemClock_Config+0xcc>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	; 0x40
 800076c:	4b25      	ldr	r3, [pc, #148]	; (8000804 <SystemClock_Config+0xcc>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	4b22      	ldr	r3, [pc, #136]	; (8000808 <SystemClock_Config+0xd0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000784:	4a20      	ldr	r2, [pc, #128]	; (8000808 <SystemClock_Config+0xd0>)
 8000786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <SystemClock_Config+0xd0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000798:	2302      	movs	r3, #2
 800079a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079c:	2301      	movs	r3, #1
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a0:	2310      	movs	r3, #16
 80007a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a4:	2302      	movs	r3, #2
 80007a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a8:	2300      	movs	r3, #0
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007ac:	2308      	movs	r3, #8
 80007ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80007b0:	2354      	movs	r3, #84	; 0x54
 80007b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b8:	2304      	movs	r3, #4
 80007ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007bc:	f107 0320 	add.w	r3, r7, #32
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fe2f 	bl	8001424 <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007cc:	f000 f903 	bl	80009d6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d0:	230f      	movs	r3, #15
 80007d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	2302      	movs	r3, #2
 80007d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	2102      	movs	r1, #2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 f891 	bl	8001914 <HAL_RCC_ClockConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007f8:	f000 f8ed 	bl	80009d6 <Error_Handler>
  }
}
 80007fc:	bf00      	nop
 80007fe:	3750      	adds	r7, #80	; 0x50
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <MX_USART2_UART_Init+0x50>)
 8000814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000844:	f001 fcf8 	bl	8002238 <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800084e:	f000 f8c2 	bl	80009d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000094 	.word	0x20000094
 800085c:	40004400 	.word	0x40004400

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_GPIO_Init+0x7c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a17      	ldr	r2, [pc, #92]	; (80008dc <MX_GPIO_Init+0x7c>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_GPIO_Init+0x7c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_GPIO_Init+0x7c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a10      	ldr	r2, [pc, #64]	; (80008dc <MX_GPIO_Init+0x7c>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_GPIO_Init+0x7c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	210f      	movs	r1, #15
 80008b2:	480b      	ldr	r0, [pc, #44]	; (80008e0 <MX_GPIO_Init+0x80>)
 80008b4:	f000 fd9c 	bl	80013f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80008b8:	230f      	movs	r3, #15
 80008ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	4619      	mov	r1, r3
 80008ce:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_GPIO_Init+0x80>)
 80008d0:	f000 fc0a 	bl	80010e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d4:	bf00      	nop
 80008d6:	3720      	adds	r7, #32
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020800 	.word	0x40020800

080008e4 <Manager_Handler>:

/* USER CODE BEGIN 4 */
static void Manager_Handler(void *params)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
   unsigned int tickedid=0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		tickedid = rand()%100;
 80008f0:	f007 fa88 	bl	8007e04 <rand>
 80008f4:	4603      	mov	r3, r0
 80008f6:	4a10      	ldr	r2, [pc, #64]	; (8000938 <Manager_Handler+0x54>)
 80008f8:	fb82 1203 	smull	r1, r2, r2, r3
 80008fc:	1151      	asrs	r1, r2, #5
 80008fe:	17da      	asrs	r2, r3, #31
 8000900:	1a8a      	subs	r2, r1, r2
 8000902:	2164      	movs	r1, #100	; 0x64
 8000904:	fb01 f202 	mul.w	r2, r1, r2
 8000908:	1a9a      	subs	r2, r3, r2
 800090a:	4613      	mov	r3, r2
 800090c:	60fb      	str	r3, [r7, #12]
		xQueueSend(WorkQueue,&tickedid,portMAX_DELAY);
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <Manager_Handler+0x58>)
 8000910:	6818      	ldr	r0, [r3, #0]
 8000912:	f107 010c 	add.w	r1, r7, #12
 8000916:	2300      	movs	r3, #0
 8000918:	f04f 32ff 	mov.w	r2, #4294967295
 800091c:	f002 fe38 	bl	8003590 <xQueueGenericSend>
		xSemaphoreGive(Binary_Semaphore_Handle);
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <Manager_Handler+0x5c>)
 8000922:	6818      	ldr	r0, [r3, #0]
 8000924:	2300      	movs	r3, #0
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	f002 fe31 	bl	8003590 <xQueueGenericSend>
		vTaskDelay(pdMS_TO_TICKS(1000));
 800092e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000932:	f003 fccb 	bl	80042cc <vTaskDelay>
		tickedid = rand()%100;
 8000936:	e7db      	b.n	80008f0 <Manager_Handler+0xc>
 8000938:	51eb851f 	.word	0x51eb851f
 800093c:	200000e4 	.word	0x200000e4
 8000940:	200000e0 	.word	0x200000e0

08000944 <Employee_Handler>:

	}

}
static void Employee_Handler(void *params)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b090      	sub	sp, #64	; 0x40
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	unsigned int tickedidreceive;
	char msg[50];

	while(xSemaphoreTake(Binary_Semaphore_Handle,portMAX_DELAY))
 800094c:	e01d      	b.n	800098a <Employee_Handler+0x46>
	{
       xQueueReceive(WorkQueue,(void*)&tickedidreceive,portMAX_DELAY);
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <Employee_Handler+0x64>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000956:	f04f 32ff 	mov.w	r2, #4294967295
 800095a:	4618      	mov	r0, r3
 800095c:	f002 ff3e 	bl	80037dc <xQueueReceive>
       sprintf(msg,"Generated Number is:%d\r\n",tickedidreceive);
 8000960:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	4911      	ldr	r1, [pc, #68]	; (80009ac <Employee_Handler+0x68>)
 8000968:	4618      	mov	r0, r3
 800096a:	f007 fa89 	bl	8007e80 <siprintf>
       HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fc7e 	bl	8000274 <strlen>
 8000978:	4603      	mov	r3, r0
 800097a:	b29a      	uxth	r2, r3
 800097c:	f107 0108 	add.w	r1, r7, #8
 8000980:	f04f 33ff 	mov.w	r3, #4294967295
 8000984:	480a      	ldr	r0, [pc, #40]	; (80009b0 <Employee_Handler+0x6c>)
 8000986:	f001 fca4 	bl	80022d2 <HAL_UART_Transmit>
	while(xSemaphoreTake(Binary_Semaphore_Handle,portMAX_DELAY))
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <Employee_Handler+0x70>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f04f 31ff 	mov.w	r1, #4294967295
 8000992:	4618      	mov	r0, r3
 8000994:	f003 f832 	bl	80039fc <xQueueSemaphoreTake>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d1d7      	bne.n	800094e <Employee_Handler+0xa>

	}
}
 800099e:	bf00      	nop
 80009a0:	bf00      	nop
 80009a2:	3740      	adds	r7, #64	; 0x40
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200000e4 	.word	0x200000e4
 80009ac:	08009238 	.word	0x08009238
 80009b0:	20000094 	.word	0x20000094
 80009b4:	200000e0 	.word	0x200000e0

080009b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009c8:	d101      	bne.n	80009ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ca:	f000 f9f9 	bl	8000dc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009da:	b672      	cpsid	i
}
 80009dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009de:	e7fe      	b.n	80009de <Error_Handler+0x8>

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <HAL_MspInit+0x4c>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	4a0f      	ldr	r2, [pc, #60]	; (8000a2c <HAL_MspInit+0x4c>)
 80009f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f4:	6453      	str	r3, [r2, #68]	; 0x44
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <HAL_MspInit+0x4c>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	6413      	str	r3, [r2, #64]	; 0x40
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MspInit 1 */
  //NVIC_SetPriorityGrouping(0);

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800

08000a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a1d      	ldr	r2, [pc, #116]	; (8000ac4 <HAL_UART_MspInit+0x94>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d133      	bne.n	8000aba <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <HAL_UART_MspInit+0x98>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	4a1b      	ldr	r2, [pc, #108]	; (8000ac8 <HAL_UART_MspInit+0x98>)
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a60:	6413      	str	r3, [r2, #64]	; 0x40
 8000a62:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <HAL_UART_MspInit+0x98>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <HAL_UART_MspInit+0x98>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a14      	ldr	r2, [pc, #80]	; (8000ac8 <HAL_UART_MspInit+0x98>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_UART_MspInit+0x98>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a8a:	230c      	movs	r3, #12
 8000a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a96:	2303      	movs	r3, #3
 8000a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a9a:	2307      	movs	r3, #7
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4809      	ldr	r0, [pc, #36]	; (8000acc <HAL_UART_MspInit+0x9c>)
 8000aa6:	f000 fb1f 	bl	80010e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2100      	movs	r1, #0
 8000aae:	2026      	movs	r0, #38	; 0x26
 8000ab0:	f000 fa5e 	bl	8000f70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ab4:	2026      	movs	r0, #38	; 0x26
 8000ab6:	f000 fa77 	bl	8000fa8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aba:	bf00      	nop
 8000abc:	3728      	adds	r7, #40	; 0x28
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40004400 	.word	0x40004400
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020000 	.word	0x40020000

08000ad0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08e      	sub	sp, #56	; 0x38
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	4b34      	ldr	r3, [pc, #208]	; (8000bb8 <HAL_InitTick+0xe8>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	4a33      	ldr	r2, [pc, #204]	; (8000bb8 <HAL_InitTick+0xe8>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6413      	str	r3, [r2, #64]	; 0x40
 8000af0:	4b31      	ldr	r3, [pc, #196]	; (8000bb8 <HAL_InitTick+0xe8>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000afc:	f107 0210 	add.w	r2, r7, #16
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4611      	mov	r1, r2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f001 f8e4 	bl	8001cd4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b0c:	6a3b      	ldr	r3, [r7, #32]
 8000b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d103      	bne.n	8000b1e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b16:	f001 f8b5 	bl	8001c84 <HAL_RCC_GetPCLK1Freq>
 8000b1a:	6378      	str	r0, [r7, #52]	; 0x34
 8000b1c:	e004      	b.n	8000b28 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b1e:	f001 f8b1 	bl	8001c84 <HAL_RCC_GetPCLK1Freq>
 8000b22:	4603      	mov	r3, r0
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b2a:	4a24      	ldr	r2, [pc, #144]	; (8000bbc <HAL_InitTick+0xec>)
 8000b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b30:	0c9b      	lsrs	r3, r3, #18
 8000b32:	3b01      	subs	r3, #1
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000b36:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <HAL_InitTick+0xf0>)
 8000b38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000b3e:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <HAL_InitTick+0xf0>)
 8000b40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b44:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000b46:	4a1e      	ldr	r2, [pc, #120]	; (8000bc0 <HAL_InitTick+0xf0>)
 8000b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b4a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <HAL_InitTick+0xf0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b52:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <HAL_InitTick+0xf0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b58:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <HAL_InitTick+0xf0>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000b5e:	4818      	ldr	r0, [pc, #96]	; (8000bc0 <HAL_InitTick+0xf0>)
 8000b60:	f001 f8ea 	bl	8001d38 <HAL_TIM_Base_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d11b      	bne.n	8000baa <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000b72:	4813      	ldr	r0, [pc, #76]	; (8000bc0 <HAL_InitTick+0xf0>)
 8000b74:	f001 f93a 	bl	8001dec <HAL_TIM_Base_Start_IT>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d111      	bne.n	8000baa <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b86:	201c      	movs	r0, #28
 8000b88:	f000 fa0e 	bl	8000fa8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b0f      	cmp	r3, #15
 8000b90:	d808      	bhi.n	8000ba4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000b92:	2200      	movs	r2, #0
 8000b94:	6879      	ldr	r1, [r7, #4]
 8000b96:	201c      	movs	r0, #28
 8000b98:	f000 f9ea 	bl	8000f70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b9c:	4a09      	ldr	r2, [pc, #36]	; (8000bc4 <HAL_InitTick+0xf4>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	e002      	b.n	8000baa <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000baa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3738      	adds	r7, #56	; 0x38
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	431bde83 	.word	0x431bde83
 8000bc0:	200000ec 	.word	0x200000ec
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <NMI_Handler+0x4>

08000bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <TIM2_IRQHandler+0x10>)
 8000bfa:	f001 f959 	bl	8001eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200000ec 	.word	0x200000ec

08000c08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <USART2_IRQHandler+0x10>)
 8000c0e:	f001 fbf3 	bl	80023f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000094 	.word	0x20000094

08000c1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return 1;
 8000c20:	2301      	movs	r3, #1
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <_kill>:

int _kill(int pid, int sig)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c36:	f007 f895 	bl	8007d64 <__errno>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2216      	movs	r2, #22
 8000c3e:	601a      	str	r2, [r3, #0]
  return -1;
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <_exit>:

void _exit (int status)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c54:	f04f 31ff 	mov.w	r1, #4294967295
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff ffe7 	bl	8000c2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c5e:	e7fe      	b.n	8000c5e <_exit+0x12>

08000c60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	e00a      	b.n	8000c88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c72:	f3af 8000 	nop.w
 8000c76:	4601      	mov	r1, r0
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	1c5a      	adds	r2, r3, #1
 8000c7c:	60ba      	str	r2, [r7, #8]
 8000c7e:	b2ca      	uxtb	r2, r1
 8000c80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	3301      	adds	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	dbf0      	blt.n	8000c72 <_read+0x12>
  }

  return len;
 8000c90:	687b      	ldr	r3, [r7, #4]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b083      	sub	sp, #12
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cc2:	605a      	str	r2, [r3, #4]
  return 0;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <_isatty>:

int _isatty(int file)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cda:	2301      	movs	r3, #1
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
	...

08000d04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <SystemInit+0x20>)
 8000d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0e:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <SystemInit+0x20>)
 8000d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d2e:	490e      	ldr	r1, [pc, #56]	; (8000d68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d30:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d34:	e002      	b.n	8000d3c <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3a:	3304      	adds	r3, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d40:	d3f9      	bcc.n	8000d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d42:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d44:	4c0b      	ldr	r4, [pc, #44]	; (8000d74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d48:	e001      	b.n	8000d4e <LoopFillZerobss>

08000d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d4c:	3204      	adds	r2, #4

08000d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d50:	d3fb      	bcc.n	8000d4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d52:	f7ff ffd7 	bl	8000d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d56:	f007 f80b 	bl	8007d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5a:	f7ff fc6b 	bl	8000634 <main>
  bx  lr    
 8000d5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d60:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d68:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d6c:	080094bc 	.word	0x080094bc
  ldr r2, =_sbss
 8000d70:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d74:	2000d568 	.word	0x2000d568

08000d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC_IRQHandler>
	...

08000d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <HAL_Init+0x40>)
 8000d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <HAL_Init+0x40>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <HAL_Init+0x40>)
 8000d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <HAL_Init+0x40>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <HAL_Init+0x40>)
 8000d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da4:	2003      	movs	r0, #3
 8000da6:	f000 f8d8 	bl	8000f5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000daa:	200f      	movs	r0, #15
 8000dac:	f7ff fe90 	bl	8000ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db0:	f7ff fe16 	bl	80009e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40023c00 	.word	0x40023c00

08000dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x20>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_IncTick+0x24>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <HAL_IncTick+0x24>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000134 	.word	0x20000134

08000de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <HAL_GetTick+0x14>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000134 	.word	0x20000134

08000e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e32:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <__NVIC_GetPriorityGrouping+0x18>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	f003 0307 	and.w	r3, r3, #7
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	db0b      	blt.n	8000e8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	f003 021f 	and.w	r2, r3, #31
 8000e7c:	4907      	ldr	r1, [pc, #28]	; (8000e9c <__NVIC_EnableIRQ+0x38>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	095b      	lsrs	r3, r3, #5
 8000e84:	2001      	movs	r0, #1
 8000e86:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000e100 	.word	0xe000e100

08000ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	db0a      	blt.n	8000eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	490c      	ldr	r1, [pc, #48]	; (8000eec <__NVIC_SetPriority+0x4c>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	0112      	lsls	r2, r2, #4
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec8:	e00a      	b.n	8000ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4908      	ldr	r1, [pc, #32]	; (8000ef0 <__NVIC_SetPriority+0x50>)
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	f003 030f 	and.w	r3, r3, #15
 8000ed6:	3b04      	subs	r3, #4
 8000ed8:	0112      	lsls	r2, r2, #4
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	440b      	add	r3, r1
 8000ede:	761a      	strb	r2, [r3, #24]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000e100 	.word	0xe000e100
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b089      	sub	sp, #36	; 0x24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f1c3 0307 	rsb	r3, r3, #7
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	bf28      	it	cs
 8000f12:	2304      	movcs	r3, #4
 8000f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	2b06      	cmp	r3, #6
 8000f1c:	d902      	bls.n	8000f24 <NVIC_EncodePriority+0x30>
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3b03      	subs	r3, #3
 8000f22:	e000      	b.n	8000f26 <NVIC_EncodePriority+0x32>
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	f04f 32ff 	mov.w	r2, #4294967295
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43da      	mvns	r2, r3
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	401a      	ands	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	fa01 f303 	lsl.w	r3, r1, r3
 8000f46:	43d9      	mvns	r1, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	4313      	orrs	r3, r2
         );
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3724      	adds	r7, #36	; 0x24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ff4c 	bl	8000e00 <__NVIC_SetPriorityGrouping>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
 8000f7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f82:	f7ff ff61 	bl	8000e48 <__NVIC_GetPriorityGrouping>
 8000f86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	68b9      	ldr	r1, [r7, #8]
 8000f8c:	6978      	ldr	r0, [r7, #20]
 8000f8e:	f7ff ffb1 	bl	8000ef4 <NVIC_EncodePriority>
 8000f92:	4602      	mov	r2, r0
 8000f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f98:	4611      	mov	r1, r2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff ff80 	bl	8000ea0 <__NVIC_SetPriority>
}
 8000fa0:	bf00      	nop
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff54 	bl	8000e64 <__NVIC_EnableIRQ>
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fd2:	f7ff ff09 	bl	8000de8 <HAL_GetTick>
 8000fd6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d008      	beq.n	8000ff6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2280      	movs	r2, #128	; 0x80
 8000fe8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e052      	b.n	800109c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 0216 	bic.w	r2, r2, #22
 8001004:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	695a      	ldr	r2, [r3, #20]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001014:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	2b00      	cmp	r3, #0
 800101c:	d103      	bne.n	8001026 <HAL_DMA_Abort+0x62>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001022:	2b00      	cmp	r3, #0
 8001024:	d007      	beq.n	8001036 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0208 	bic.w	r2, r2, #8
 8001034:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0201 	bic.w	r2, r2, #1
 8001044:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001046:	e013      	b.n	8001070 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001048:	f7ff fece 	bl	8000de8 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b05      	cmp	r3, #5
 8001054:	d90c      	bls.n	8001070 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2220      	movs	r2, #32
 800105a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2203      	movs	r2, #3
 8001060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e015      	b.n	800109c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1e4      	bne.n	8001048 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001082:	223f      	movs	r2, #63	; 0x3f
 8001084:	409a      	lsls	r2, r3
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2201      	movs	r2, #1
 800108e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d004      	beq.n	80010c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2280      	movs	r2, #128	; 0x80
 80010bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00c      	b.n	80010dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2205      	movs	r2, #5
 80010c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 0201 	bic.w	r2, r2, #1
 80010d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
 8001102:	e159      	b.n	80013b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001104:	2201      	movs	r2, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	429a      	cmp	r2, r3
 800111e:	f040 8148 	bne.w	80013b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	2b01      	cmp	r3, #1
 800112c:	d005      	beq.n	800113a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001136:	2b02      	cmp	r3, #2
 8001138:	d130      	bne.n	800119c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	2203      	movs	r2, #3
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001170:	2201      	movs	r2, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	091b      	lsrs	r3, r3, #4
 8001186:	f003 0201 	and.w	r2, r3, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b03      	cmp	r3, #3
 80011a6:	d017      	beq.n	80011d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d123      	bne.n	800122c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	08da      	lsrs	r2, r3, #3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3208      	adds	r2, #8
 80011ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	220f      	movs	r2, #15
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	691a      	ldr	r2, [r3, #16]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	08da      	lsrs	r2, r3, #3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3208      	adds	r2, #8
 8001226:	69b9      	ldr	r1, [r7, #24]
 8001228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0203 	and.w	r2, r3, #3
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 80a2 	beq.w	80013b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b57      	ldr	r3, [pc, #348]	; (80013d0 <HAL_GPIO_Init+0x2e8>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	4a56      	ldr	r2, [pc, #344]	; (80013d0 <HAL_GPIO_Init+0x2e8>)
 8001278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127c:	6453      	str	r3, [r2, #68]	; 0x44
 800127e:	4b54      	ldr	r3, [pc, #336]	; (80013d0 <HAL_GPIO_Init+0x2e8>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800128a:	4a52      	ldr	r2, [pc, #328]	; (80013d4 <HAL_GPIO_Init+0x2ec>)
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	089b      	lsrs	r3, r3, #2
 8001290:	3302      	adds	r3, #2
 8001292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	220f      	movs	r2, #15
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a49      	ldr	r2, [pc, #292]	; (80013d8 <HAL_GPIO_Init+0x2f0>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d019      	beq.n	80012ea <HAL_GPIO_Init+0x202>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a48      	ldr	r2, [pc, #288]	; (80013dc <HAL_GPIO_Init+0x2f4>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d013      	beq.n	80012e6 <HAL_GPIO_Init+0x1fe>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a47      	ldr	r2, [pc, #284]	; (80013e0 <HAL_GPIO_Init+0x2f8>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d00d      	beq.n	80012e2 <HAL_GPIO_Init+0x1fa>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a46      	ldr	r2, [pc, #280]	; (80013e4 <HAL_GPIO_Init+0x2fc>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d007      	beq.n	80012de <HAL_GPIO_Init+0x1f6>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a45      	ldr	r2, [pc, #276]	; (80013e8 <HAL_GPIO_Init+0x300>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d101      	bne.n	80012da <HAL_GPIO_Init+0x1f2>
 80012d6:	2304      	movs	r3, #4
 80012d8:	e008      	b.n	80012ec <HAL_GPIO_Init+0x204>
 80012da:	2307      	movs	r3, #7
 80012dc:	e006      	b.n	80012ec <HAL_GPIO_Init+0x204>
 80012de:	2303      	movs	r3, #3
 80012e0:	e004      	b.n	80012ec <HAL_GPIO_Init+0x204>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e002      	b.n	80012ec <HAL_GPIO_Init+0x204>
 80012e6:	2301      	movs	r3, #1
 80012e8:	e000      	b.n	80012ec <HAL_GPIO_Init+0x204>
 80012ea:	2300      	movs	r3, #0
 80012ec:	69fa      	ldr	r2, [r7, #28]
 80012ee:	f002 0203 	and.w	r2, r2, #3
 80012f2:	0092      	lsls	r2, r2, #2
 80012f4:	4093      	lsls	r3, r2
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012fc:	4935      	ldr	r1, [pc, #212]	; (80013d4 <HAL_GPIO_Init+0x2ec>)
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	089b      	lsrs	r3, r3, #2
 8001302:	3302      	adds	r3, #2
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800130a:	4b38      	ldr	r3, [pc, #224]	; (80013ec <HAL_GPIO_Init+0x304>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800132e:	4a2f      	ldr	r2, [pc, #188]	; (80013ec <HAL_GPIO_Init+0x304>)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001334:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <HAL_GPIO_Init+0x304>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001358:	4a24      	ldr	r2, [pc, #144]	; (80013ec <HAL_GPIO_Init+0x304>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800135e:	4b23      	ldr	r3, [pc, #140]	; (80013ec <HAL_GPIO_Init+0x304>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001382:	4a1a      	ldr	r2, [pc, #104]	; (80013ec <HAL_GPIO_Init+0x304>)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001388:	4b18      	ldr	r3, [pc, #96]	; (80013ec <HAL_GPIO_Init+0x304>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ac:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <HAL_GPIO_Init+0x304>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3301      	adds	r3, #1
 80013b6:	61fb      	str	r3, [r7, #28]
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	2b0f      	cmp	r3, #15
 80013bc:	f67f aea2 	bls.w	8001104 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	3724      	adds	r7, #36	; 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40013800 	.word	0x40013800
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40020400 	.word	0x40020400
 80013e0:	40020800 	.word	0x40020800
 80013e4:	40020c00 	.word	0x40020c00
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40013c00 	.word	0x40013c00

080013f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	807b      	strh	r3, [r7, #2]
 80013fc:	4613      	mov	r3, r2
 80013fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001400:	787b      	ldrb	r3, [r7, #1]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001406:	887a      	ldrh	r2, [r7, #2]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800140c:	e003      	b.n	8001416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800140e:	887b      	ldrh	r3, [r7, #2]
 8001410:	041a      	lsls	r2, r3, #16
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	619a      	str	r2, [r3, #24]
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e267      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d075      	beq.n	800152e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001442:	4b88      	ldr	r3, [pc, #544]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b04      	cmp	r3, #4
 800144c:	d00c      	beq.n	8001468 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800144e:	4b85      	ldr	r3, [pc, #532]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001456:	2b08      	cmp	r3, #8
 8001458:	d112      	bne.n	8001480 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800145a:	4b82      	ldr	r3, [pc, #520]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001466:	d10b      	bne.n	8001480 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001468:	4b7e      	ldr	r3, [pc, #504]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d05b      	beq.n	800152c <HAL_RCC_OscConfig+0x108>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d157      	bne.n	800152c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e242      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001488:	d106      	bne.n	8001498 <HAL_RCC_OscConfig+0x74>
 800148a:	4b76      	ldr	r3, [pc, #472]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a75      	ldr	r2, [pc, #468]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 8001490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	e01d      	b.n	80014d4 <HAL_RCC_OscConfig+0xb0>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014a0:	d10c      	bne.n	80014bc <HAL_RCC_OscConfig+0x98>
 80014a2:	4b70      	ldr	r3, [pc, #448]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a6f      	ldr	r2, [pc, #444]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 80014a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	4b6d      	ldr	r3, [pc, #436]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a6c      	ldr	r2, [pc, #432]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 80014b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	e00b      	b.n	80014d4 <HAL_RCC_OscConfig+0xb0>
 80014bc:	4b69      	ldr	r3, [pc, #420]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a68      	ldr	r2, [pc, #416]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 80014c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4b66      	ldr	r3, [pc, #408]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a65      	ldr	r2, [pc, #404]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 80014ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d013      	beq.n	8001504 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff fc84 	bl	8000de8 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e4:	f7ff fc80 	bl	8000de8 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b64      	cmp	r3, #100	; 0x64
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e207      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f6:	4b5b      	ldr	r3, [pc, #364]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f0      	beq.n	80014e4 <HAL_RCC_OscConfig+0xc0>
 8001502:	e014      	b.n	800152e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff fc70 	bl	8000de8 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800150c:	f7ff fc6c 	bl	8000de8 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b64      	cmp	r3, #100	; 0x64
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e1f3      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151e:	4b51      	ldr	r3, [pc, #324]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0xe8>
 800152a:	e000      	b.n	800152e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d063      	beq.n	8001602 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800153a:	4b4a      	ldr	r3, [pc, #296]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00b      	beq.n	800155e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001546:	4b47      	ldr	r3, [pc, #284]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800154e:	2b08      	cmp	r3, #8
 8001550:	d11c      	bne.n	800158c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001552:	4b44      	ldr	r3, [pc, #272]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d116      	bne.n	800158c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155e:	4b41      	ldr	r3, [pc, #260]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d005      	beq.n	8001576 <HAL_RCC_OscConfig+0x152>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d001      	beq.n	8001576 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e1c7      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001576:	4b3b      	ldr	r3, [pc, #236]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	4937      	ldr	r1, [pc, #220]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 8001586:	4313      	orrs	r3, r2
 8001588:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158a:	e03a      	b.n	8001602 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d020      	beq.n	80015d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001594:	4b34      	ldr	r3, [pc, #208]	; (8001668 <HAL_RCC_OscConfig+0x244>)
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159a:	f7ff fc25 	bl	8000de8 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a2:	f7ff fc21 	bl	8000de8 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e1a8      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b4:	4b2b      	ldr	r3, [pc, #172]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c0:	4b28      	ldr	r3, [pc, #160]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	4925      	ldr	r1, [pc, #148]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	600b      	str	r3, [r1, #0]
 80015d4:	e015      	b.n	8001602 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d6:	4b24      	ldr	r3, [pc, #144]	; (8001668 <HAL_RCC_OscConfig+0x244>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015dc:	f7ff fc04 	bl	8000de8 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e4:	f7ff fc00 	bl	8000de8 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e187      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f6:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	2b00      	cmp	r3, #0
 800160c:	d036      	beq.n	800167c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d016      	beq.n	8001644 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <HAL_RCC_OscConfig+0x248>)
 8001618:	2201      	movs	r2, #1
 800161a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161c:	f7ff fbe4 	bl	8000de8 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001624:	f7ff fbe0 	bl	8000de8 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e167      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 8001638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCC_OscConfig+0x200>
 8001642:	e01b      	b.n	800167c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_RCC_OscConfig+0x248>)
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164a:	f7ff fbcd 	bl	8000de8 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001650:	e00e      	b.n	8001670 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001652:	f7ff fbc9 	bl	8000de8 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d907      	bls.n	8001670 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e150      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
 8001664:	40023800 	.word	0x40023800
 8001668:	42470000 	.word	0x42470000
 800166c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001670:	4b88      	ldr	r3, [pc, #544]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 8001672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1ea      	bne.n	8001652 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 8097 	beq.w	80017b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800168a:	2300      	movs	r3, #0
 800168c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800168e:	4b81      	ldr	r3, [pc, #516]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10f      	bne.n	80016ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	4b7d      	ldr	r3, [pc, #500]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	4a7c      	ldr	r2, [pc, #496]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a8:	6413      	str	r3, [r2, #64]	; 0x40
 80016aa:	4b7a      	ldr	r3, [pc, #488]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016b6:	2301      	movs	r3, #1
 80016b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ba:	4b77      	ldr	r3, [pc, #476]	; (8001898 <HAL_RCC_OscConfig+0x474>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d118      	bne.n	80016f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c6:	4b74      	ldr	r3, [pc, #464]	; (8001898 <HAL_RCC_OscConfig+0x474>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a73      	ldr	r2, [pc, #460]	; (8001898 <HAL_RCC_OscConfig+0x474>)
 80016cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d2:	f7ff fb89 	bl	8000de8 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016da:	f7ff fb85 	bl	8000de8 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e10c      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ec:	4b6a      	ldr	r3, [pc, #424]	; (8001898 <HAL_RCC_OscConfig+0x474>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d106      	bne.n	800170e <HAL_RCC_OscConfig+0x2ea>
 8001700:	4b64      	ldr	r3, [pc, #400]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 8001702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001704:	4a63      	ldr	r2, [pc, #396]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6713      	str	r3, [r2, #112]	; 0x70
 800170c:	e01c      	b.n	8001748 <HAL_RCC_OscConfig+0x324>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2b05      	cmp	r3, #5
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0x30c>
 8001716:	4b5f      	ldr	r3, [pc, #380]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 8001718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171a:	4a5e      	ldr	r2, [pc, #376]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	6713      	str	r3, [r2, #112]	; 0x70
 8001722:	4b5c      	ldr	r3, [pc, #368]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 8001724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001726:	4a5b      	ldr	r2, [pc, #364]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6713      	str	r3, [r2, #112]	; 0x70
 800172e:	e00b      	b.n	8001748 <HAL_RCC_OscConfig+0x324>
 8001730:	4b58      	ldr	r3, [pc, #352]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 8001732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001734:	4a57      	ldr	r2, [pc, #348]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 8001736:	f023 0301 	bic.w	r3, r3, #1
 800173a:	6713      	str	r3, [r2, #112]	; 0x70
 800173c:	4b55      	ldr	r3, [pc, #340]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 800173e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001740:	4a54      	ldr	r2, [pc, #336]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 8001742:	f023 0304 	bic.w	r3, r3, #4
 8001746:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d015      	beq.n	800177c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001750:	f7ff fb4a 	bl	8000de8 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001756:	e00a      	b.n	800176e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001758:	f7ff fb46 	bl	8000de8 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f241 3288 	movw	r2, #5000	; 0x1388
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e0cb      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800176e:	4b49      	ldr	r3, [pc, #292]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 8001770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0ee      	beq.n	8001758 <HAL_RCC_OscConfig+0x334>
 800177a:	e014      	b.n	80017a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177c:	f7ff fb34 	bl	8000de8 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001782:	e00a      	b.n	800179a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001784:	f7ff fb30 	bl	8000de8 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001792:	4293      	cmp	r3, r2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e0b5      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179a:	4b3e      	ldr	r3, [pc, #248]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 800179c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1ee      	bne.n	8001784 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017a6:	7dfb      	ldrb	r3, [r7, #23]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d105      	bne.n	80017b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ac:	4b39      	ldr	r3, [pc, #228]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	4a38      	ldr	r2, [pc, #224]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 80017b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 80a1 	beq.w	8001904 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017c2:	4b34      	ldr	r3, [pc, #208]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d05c      	beq.n	8001888 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d141      	bne.n	800185a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d6:	4b31      	ldr	r3, [pc, #196]	; (800189c <HAL_RCC_OscConfig+0x478>)
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff fb04 	bl	8000de8 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e4:	f7ff fb00 	bl	8000de8 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e087      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f6:	4b27      	ldr	r3, [pc, #156]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69da      	ldr	r2, [r3, #28]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001810:	019b      	lsls	r3, r3, #6
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001818:	085b      	lsrs	r3, r3, #1
 800181a:	3b01      	subs	r3, #1
 800181c:	041b      	lsls	r3, r3, #16
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001824:	061b      	lsls	r3, r3, #24
 8001826:	491b      	ldr	r1, [pc, #108]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 8001828:	4313      	orrs	r3, r2
 800182a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <HAL_RCC_OscConfig+0x478>)
 800182e:	2201      	movs	r2, #1
 8001830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001832:	f7ff fad9 	bl	8000de8 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800183a:	f7ff fad5 	bl	8000de8 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e05c      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184c:	4b11      	ldr	r3, [pc, #68]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x416>
 8001858:	e054      	b.n	8001904 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <HAL_RCC_OscConfig+0x478>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff fac2 	bl	8000de8 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001868:	f7ff fabe 	bl	8000de8 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e045      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x444>
 8001886:	e03d      	b.n	8001904 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d107      	bne.n	80018a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e038      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
 8001894:	40023800 	.word	0x40023800
 8001898:	40007000 	.word	0x40007000
 800189c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018a0:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <HAL_RCC_OscConfig+0x4ec>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d028      	beq.n	8001900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d121      	bne.n	8001900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d11a      	bne.n	8001900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018d0:	4013      	ands	r3, r2
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018d8:	4293      	cmp	r3, r2
 80018da:	d111      	bne.n	8001900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e6:	085b      	lsrs	r3, r3, #1
 80018e8:	3b01      	subs	r3, #1
 80018ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d107      	bne.n	8001900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e000      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800

08001914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e0cc      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001928:	4b68      	ldr	r3, [pc, #416]	; (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d90c      	bls.n	8001950 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001936:	4b65      	ldr	r3, [pc, #404]	; (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800193e:	4b63      	ldr	r3, [pc, #396]	; (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d001      	beq.n	8001950 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e0b8      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d020      	beq.n	800199e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001968:	4b59      	ldr	r3, [pc, #356]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	4a58      	ldr	r2, [pc, #352]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001972:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d005      	beq.n	800198c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001980:	4b53      	ldr	r3, [pc, #332]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	4a52      	ldr	r2, [pc, #328]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800198a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800198c:	4b50      	ldr	r3, [pc, #320]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	494d      	ldr	r1, [pc, #308]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	4313      	orrs	r3, r2
 800199c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d044      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b2:	4b47      	ldr	r3, [pc, #284]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d119      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e07f      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d003      	beq.n	80019d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d107      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d2:	4b3f      	ldr	r3, [pc, #252]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d109      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e06f      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e2:	4b3b      	ldr	r3, [pc, #236]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e067      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019f2:	4b37      	ldr	r3, [pc, #220]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f023 0203 	bic.w	r2, r3, #3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	4934      	ldr	r1, [pc, #208]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a04:	f7ff f9f0 	bl	8000de8 <HAL_GetTick>
 8001a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0a:	e00a      	b.n	8001a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a0c:	f7ff f9ec 	bl	8000de8 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e04f      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a22:	4b2b      	ldr	r3, [pc, #172]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 020c 	and.w	r2, r3, #12
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d1eb      	bne.n	8001a0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a34:	4b25      	ldr	r3, [pc, #148]	; (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d20c      	bcs.n	8001a5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a42:	4b22      	ldr	r3, [pc, #136]	; (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4a:	4b20      	ldr	r3, [pc, #128]	; (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e032      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d008      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a68:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	4916      	ldr	r1, [pc, #88]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d009      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a86:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	490e      	ldr	r1, [pc, #56]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a9a:	f000 f821 	bl	8001ae0 <HAL_RCC_GetSysClockFreq>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	091b      	lsrs	r3, r3, #4
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	490a      	ldr	r1, [pc, #40]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8001aac:	5ccb      	ldrb	r3, [r1, r3]
 8001aae:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab2:	4a09      	ldr	r2, [pc, #36]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <HAL_RCC_ClockConfig+0x1c8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff f808 	bl	8000ad0 <HAL_InitTick>

  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40023c00 	.word	0x40023c00
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	08009324 	.word	0x08009324
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	20000004 	.word	0x20000004

08001ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ae4:	b090      	sub	sp, #64	; 0x40
 8001ae6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	637b      	str	r3, [r7, #52]	; 0x34
 8001aec:	2300      	movs	r3, #0
 8001aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001af0:	2300      	movs	r3, #0
 8001af2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001af8:	4b59      	ldr	r3, [pc, #356]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 030c 	and.w	r3, r3, #12
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d00d      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0x40>
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	f200 80a1 	bhi.w	8001c4c <HAL_RCC_GetSysClockFreq+0x16c>
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <HAL_RCC_GetSysClockFreq+0x34>
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d003      	beq.n	8001b1a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b12:	e09b      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b14:	4b53      	ldr	r3, [pc, #332]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b16:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001b18:	e09b      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b1a:	4b53      	ldr	r3, [pc, #332]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b1e:	e098      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b20:	4b4f      	ldr	r3, [pc, #316]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b28:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b2a:	4b4d      	ldr	r3, [pc, #308]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d028      	beq.n	8001b88 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b36:	4b4a      	ldr	r3, [pc, #296]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	099b      	lsrs	r3, r3, #6
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	623b      	str	r3, [r7, #32]
 8001b40:	627a      	str	r2, [r7, #36]	; 0x24
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4b47      	ldr	r3, [pc, #284]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b4c:	fb03 f201 	mul.w	r2, r3, r1
 8001b50:	2300      	movs	r3, #0
 8001b52:	fb00 f303 	mul.w	r3, r0, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	4a43      	ldr	r2, [pc, #268]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b5a:	fba0 1202 	umull	r1, r2, r0, r2
 8001b5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b60:	460a      	mov	r2, r1
 8001b62:	62ba      	str	r2, [r7, #40]	; 0x28
 8001b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b66:	4413      	add	r3, r2
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	61bb      	str	r3, [r7, #24]
 8001b70:	61fa      	str	r2, [r7, #28]
 8001b72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b7a:	f7fe fbd9 	bl	8000330 <__aeabi_uldivmod>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4613      	mov	r3, r2
 8001b84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b86:	e053      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b88:	4b35      	ldr	r3, [pc, #212]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	099b      	lsrs	r3, r3, #6
 8001b8e:	2200      	movs	r2, #0
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	617a      	str	r2, [r7, #20]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b9a:	f04f 0b00 	mov.w	fp, #0
 8001b9e:	4652      	mov	r2, sl
 8001ba0:	465b      	mov	r3, fp
 8001ba2:	f04f 0000 	mov.w	r0, #0
 8001ba6:	f04f 0100 	mov.w	r1, #0
 8001baa:	0159      	lsls	r1, r3, #5
 8001bac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bb0:	0150      	lsls	r0, r2, #5
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	ebb2 080a 	subs.w	r8, r2, sl
 8001bba:	eb63 090b 	sbc.w	r9, r3, fp
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001bca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001bce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001bd2:	ebb2 0408 	subs.w	r4, r2, r8
 8001bd6:	eb63 0509 	sbc.w	r5, r3, r9
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	00eb      	lsls	r3, r5, #3
 8001be4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001be8:	00e2      	lsls	r2, r4, #3
 8001bea:	4614      	mov	r4, r2
 8001bec:	461d      	mov	r5, r3
 8001bee:	eb14 030a 	adds.w	r3, r4, sl
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	eb45 030b 	adc.w	r3, r5, fp
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c06:	4629      	mov	r1, r5
 8001c08:	028b      	lsls	r3, r1, #10
 8001c0a:	4621      	mov	r1, r4
 8001c0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c10:	4621      	mov	r1, r4
 8001c12:	028a      	lsls	r2, r1, #10
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	60fa      	str	r2, [r7, #12]
 8001c20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c24:	f7fe fb84 	bl	8000330 <__aeabi_uldivmod>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	0c1b      	lsrs	r3, r3, #16
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001c40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c4a:	e002      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c4e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3740      	adds	r7, #64	; 0x40
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023800 	.word	0x40023800
 8001c64:	00f42400 	.word	0x00f42400
 8001c68:	017d7840 	.word	0x017d7840

08001c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000000 	.word	0x20000000

08001c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c88:	f7ff fff0 	bl	8001c6c <HAL_RCC_GetHCLKFreq>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	0a9b      	lsrs	r3, r3, #10
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	4903      	ldr	r1, [pc, #12]	; (8001ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c9a:	5ccb      	ldrb	r3, [r1, r3]
 8001c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	08009334 	.word	0x08009334

08001cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cb0:	f7ff ffdc 	bl	8001c6c <HAL_RCC_GetHCLKFreq>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	0b5b      	lsrs	r3, r3, #13
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	4903      	ldr	r1, [pc, #12]	; (8001cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cc2:	5ccb      	ldrb	r3, [r1, r3]
 8001cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	08009334 	.word	0x08009334

08001cd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	220f      	movs	r2, #15
 8001ce2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0203 	and.w	r2, r3, #3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d08:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	08db      	lsrs	r3, r3, #3
 8001d0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <HAL_RCC_GetClockConfig+0x60>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0207 	and.w	r2, r3, #7
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	601a      	str	r2, [r3, #0]
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40023c00 	.word	0x40023c00

08001d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e041      	b.n	8001dce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d106      	bne.n	8001d64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f839 	bl	8001dd6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3304      	adds	r3, #4
 8001d74:	4619      	mov	r1, r3
 8001d76:	4610      	mov	r0, r2
 8001d78:	f000 f9ca 	bl	8002110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d001      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e044      	b.n	8001e8e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1e      	ldr	r2, [pc, #120]	; (8001e9c <HAL_TIM_Base_Start_IT+0xb0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d018      	beq.n	8001e58 <HAL_TIM_Base_Start_IT+0x6c>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2e:	d013      	beq.n	8001e58 <HAL_TIM_Base_Start_IT+0x6c>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1a      	ldr	r2, [pc, #104]	; (8001ea0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d00e      	beq.n	8001e58 <HAL_TIM_Base_Start_IT+0x6c>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a19      	ldr	r2, [pc, #100]	; (8001ea4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d009      	beq.n	8001e58 <HAL_TIM_Base_Start_IT+0x6c>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a17      	ldr	r2, [pc, #92]	; (8001ea8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d004      	beq.n	8001e58 <HAL_TIM_Base_Start_IT+0x6c>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a16      	ldr	r2, [pc, #88]	; (8001eac <HAL_TIM_Base_Start_IT+0xc0>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d111      	bne.n	8001e7c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d010      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f042 0201 	orr.w	r2, r2, #1
 8001e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e7a:	e007      	b.n	8001e8c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40010000 	.word	0x40010000
 8001ea0:	40000400 	.word	0x40000400
 8001ea4:	40000800 	.word	0x40000800
 8001ea8:	40000c00 	.word	0x40000c00
 8001eac:	40014000 	.word	0x40014000

08001eb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d122      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d11b      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0202 	mvn.w	r2, #2
 8001edc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f8ee 	bl	80020d4 <HAL_TIM_IC_CaptureCallback>
 8001ef8:	e005      	b.n	8001f06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f8e0 	bl	80020c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f8f1 	bl	80020e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	d122      	bne.n	8001f60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	d11b      	bne.n	8001f60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0204 	mvn.w	r2, #4
 8001f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2202      	movs	r2, #2
 8001f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f8c4 	bl	80020d4 <HAL_TIM_IC_CaptureCallback>
 8001f4c:	e005      	b.n	8001f5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f8b6 	bl	80020c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f8c7 	bl	80020e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d122      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d11b      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0208 	mvn.w	r2, #8
 8001f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2204      	movs	r2, #4
 8001f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f89a 	bl	80020d4 <HAL_TIM_IC_CaptureCallback>
 8001fa0:	e005      	b.n	8001fae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f88c 	bl	80020c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f89d 	bl	80020e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	2b10      	cmp	r3, #16
 8001fc0:	d122      	bne.n	8002008 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	2b10      	cmp	r3, #16
 8001fce:	d11b      	bne.n	8002008 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f06f 0210 	mvn.w	r2, #16
 8001fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2208      	movs	r2, #8
 8001fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f870 	bl	80020d4 <HAL_TIM_IC_CaptureCallback>
 8001ff4:	e005      	b.n	8002002 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f862 	bl	80020c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f873 	bl	80020e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b01      	cmp	r3, #1
 8002014:	d10e      	bne.n	8002034 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b01      	cmp	r3, #1
 8002022:	d107      	bne.n	8002034 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0201 	mvn.w	r2, #1
 800202c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7fe fcc2 	bl	80009b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203e:	2b80      	cmp	r3, #128	; 0x80
 8002040:	d10e      	bne.n	8002060 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204c:	2b80      	cmp	r3, #128	; 0x80
 800204e:	d107      	bne.n	8002060 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f8e2 	bl	8002224 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206a:	2b40      	cmp	r3, #64	; 0x40
 800206c:	d10e      	bne.n	800208c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002078:	2b40      	cmp	r3, #64	; 0x40
 800207a:	d107      	bne.n	800208c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f838 	bl	80020fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f003 0320 	and.w	r3, r3, #32
 8002096:	2b20      	cmp	r3, #32
 8002098:	d10e      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0320 	and.w	r3, r3, #32
 80020a4:	2b20      	cmp	r3, #32
 80020a6:	d107      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0220 	mvn.w	r2, #32
 80020b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f8ac 	bl	8002210 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a34      	ldr	r2, [pc, #208]	; (80021f4 <TIM_Base_SetConfig+0xe4>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d00f      	beq.n	8002148 <TIM_Base_SetConfig+0x38>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800212e:	d00b      	beq.n	8002148 <TIM_Base_SetConfig+0x38>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a31      	ldr	r2, [pc, #196]	; (80021f8 <TIM_Base_SetConfig+0xe8>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d007      	beq.n	8002148 <TIM_Base_SetConfig+0x38>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a30      	ldr	r2, [pc, #192]	; (80021fc <TIM_Base_SetConfig+0xec>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d003      	beq.n	8002148 <TIM_Base_SetConfig+0x38>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a2f      	ldr	r2, [pc, #188]	; (8002200 <TIM_Base_SetConfig+0xf0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d108      	bne.n	800215a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800214e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4313      	orrs	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a25      	ldr	r2, [pc, #148]	; (80021f4 <TIM_Base_SetConfig+0xe4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d01b      	beq.n	800219a <TIM_Base_SetConfig+0x8a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002168:	d017      	beq.n	800219a <TIM_Base_SetConfig+0x8a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a22      	ldr	r2, [pc, #136]	; (80021f8 <TIM_Base_SetConfig+0xe8>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d013      	beq.n	800219a <TIM_Base_SetConfig+0x8a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a21      	ldr	r2, [pc, #132]	; (80021fc <TIM_Base_SetConfig+0xec>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d00f      	beq.n	800219a <TIM_Base_SetConfig+0x8a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a20      	ldr	r2, [pc, #128]	; (8002200 <TIM_Base_SetConfig+0xf0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d00b      	beq.n	800219a <TIM_Base_SetConfig+0x8a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a1f      	ldr	r2, [pc, #124]	; (8002204 <TIM_Base_SetConfig+0xf4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d007      	beq.n	800219a <TIM_Base_SetConfig+0x8a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a1e      	ldr	r2, [pc, #120]	; (8002208 <TIM_Base_SetConfig+0xf8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d003      	beq.n	800219a <TIM_Base_SetConfig+0x8a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a1d      	ldr	r2, [pc, #116]	; (800220c <TIM_Base_SetConfig+0xfc>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d108      	bne.n	80021ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a08      	ldr	r2, [pc, #32]	; (80021f4 <TIM_Base_SetConfig+0xe4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d103      	bne.n	80021e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	615a      	str	r2, [r3, #20]
}
 80021e6:	bf00      	nop
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40010000 	.word	0x40010000
 80021f8:	40000400 	.word	0x40000400
 80021fc:	40000800 	.word	0x40000800
 8002200:	40000c00 	.word	0x40000c00
 8002204:	40014000 	.word	0x40014000
 8002208:	40014400 	.word	0x40014400
 800220c:	40014800 	.word	0x40014800

08002210 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e03f      	b.n	80022ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d106      	bne.n	8002264 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7fe fbe6 	bl	8000a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2224      	movs	r2, #36	; 0x24
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800227a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 fd7b 	bl	8002d78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002290:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695a      	ldr	r2, [r3, #20]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b08a      	sub	sp, #40	; 0x28
 80022d6:	af02      	add	r7, sp, #8
 80022d8:	60f8      	str	r0, [r7, #12]
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	603b      	str	r3, [r7, #0]
 80022de:	4613      	mov	r3, r2
 80022e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b20      	cmp	r3, #32
 80022f0:	d17c      	bne.n	80023ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d002      	beq.n	80022fe <HAL_UART_Transmit+0x2c>
 80022f8:	88fb      	ldrh	r3, [r7, #6]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e075      	b.n	80023ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <HAL_UART_Transmit+0x3e>
 800230c:	2302      	movs	r3, #2
 800230e:	e06e      	b.n	80023ee <HAL_UART_Transmit+0x11c>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2221      	movs	r2, #33	; 0x21
 8002322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002326:	f7fe fd5f 	bl	8000de8 <HAL_GetTick>
 800232a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	88fa      	ldrh	r2, [r7, #6]
 8002330:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	88fa      	ldrh	r2, [r7, #6]
 8002336:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002340:	d108      	bne.n	8002354 <HAL_UART_Transmit+0x82>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d104      	bne.n	8002354 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	61bb      	str	r3, [r7, #24]
 8002352:	e003      	b.n	800235c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002358:	2300      	movs	r3, #0
 800235a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002364:	e02a      	b.n	80023bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2200      	movs	r2, #0
 800236e:	2180      	movs	r1, #128	; 0x80
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 faf9 	bl	8002968 <UART_WaitOnFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e036      	b.n	80023ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10b      	bne.n	800239e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002394:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	3302      	adds	r3, #2
 800239a:	61bb      	str	r3, [r7, #24]
 800239c:	e007      	b.n	80023ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	781a      	ldrb	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	3301      	adds	r3, #1
 80023ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1cf      	bne.n	8002366 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2200      	movs	r2, #0
 80023ce:	2140      	movs	r1, #64	; 0x40
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 fac9 	bl	8002968 <UART_WaitOnFlagUntilTimeout>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e006      	b.n	80023ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	e000      	b.n	80023ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80023ec:	2302      	movs	r3, #2
  }
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3720      	adds	r7, #32
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b0ba      	sub	sp, #232	; 0xe8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800241e:	2300      	movs	r3, #0
 8002420:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002424:	2300      	movs	r3, #0
 8002426:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800242a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002436:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10f      	bne.n	800245e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800243e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	2b00      	cmp	r3, #0
 8002448:	d009      	beq.n	800245e <HAL_UART_IRQHandler+0x66>
 800244a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800244e:	f003 0320 	and.w	r3, r3, #32
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 fbd3 	bl	8002c02 <UART_Receive_IT>
      return;
 800245c:	e256      	b.n	800290c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800245e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 80de 	beq.w	8002624 <HAL_UART_IRQHandler+0x22c>
 8002468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d106      	bne.n	8002482 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002478:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 80d1 	beq.w	8002624 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00b      	beq.n	80024a6 <HAL_UART_IRQHandler+0xae>
 800248e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002496:	2b00      	cmp	r3, #0
 8002498:	d005      	beq.n	80024a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f043 0201 	orr.w	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00b      	beq.n	80024ca <HAL_UART_IRQHandler+0xd2>
 80024b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	f043 0202 	orr.w	r2, r3, #2
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00b      	beq.n	80024ee <HAL_UART_IRQHandler+0xf6>
 80024d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f043 0204 	orr.w	r2, r3, #4
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80024ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d011      	beq.n	800251e <HAL_UART_IRQHandler+0x126>
 80024fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b00      	cmp	r3, #0
 8002504:	d105      	bne.n	8002512 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d005      	beq.n	800251e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f043 0208 	orr.w	r2, r3, #8
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 81ed 	beq.w	8002902 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800252c:	f003 0320 	and.w	r3, r3, #32
 8002530:	2b00      	cmp	r3, #0
 8002532:	d008      	beq.n	8002546 <HAL_UART_IRQHandler+0x14e>
 8002534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002538:	f003 0320 	and.w	r3, r3, #32
 800253c:	2b00      	cmp	r3, #0
 800253e:	d002      	beq.n	8002546 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 fb5e 	bl	8002c02 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002550:	2b40      	cmp	r3, #64	; 0x40
 8002552:	bf0c      	ite	eq
 8002554:	2301      	moveq	r3, #1
 8002556:	2300      	movne	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d103      	bne.n	8002572 <HAL_UART_IRQHandler+0x17a>
 800256a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800256e:	2b00      	cmp	r3, #0
 8002570:	d04f      	beq.n	8002612 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 fa66 	bl	8002a44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002582:	2b40      	cmp	r3, #64	; 0x40
 8002584:	d141      	bne.n	800260a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	3314      	adds	r3, #20
 800258c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002590:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002594:	e853 3f00 	ldrex	r3, [r3]
 8002598:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800259c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	3314      	adds	r3, #20
 80025ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80025b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80025b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80025be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80025c2:	e841 2300 	strex	r3, r2, [r1]
 80025c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80025ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1d9      	bne.n	8002586 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d013      	beq.n	8002602 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025de:	4a7d      	ldr	r2, [pc, #500]	; (80027d4 <HAL_UART_IRQHandler+0x3dc>)
 80025e0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe fd5c 	bl	80010a4 <HAL_DMA_Abort_IT>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d016      	beq.n	8002620 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025fc:	4610      	mov	r0, r2
 80025fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002600:	e00e      	b.n	8002620 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f99a 	bl	800293c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002608:	e00a      	b.n	8002620 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f996 	bl	800293c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002610:	e006      	b.n	8002620 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f992 	bl	800293c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800261e:	e170      	b.n	8002902 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002620:	bf00      	nop
    return;
 8002622:	e16e      	b.n	8002902 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002628:	2b01      	cmp	r3, #1
 800262a:	f040 814a 	bne.w	80028c2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800262e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 8143 	beq.w	80028c2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800263c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 813c 	beq.w	80028c2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800264a:	2300      	movs	r3, #0
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266a:	2b40      	cmp	r3, #64	; 0x40
 800266c:	f040 80b4 	bne.w	80027d8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800267c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 8140 	beq.w	8002906 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800268a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800268e:	429a      	cmp	r2, r3
 8002690:	f080 8139 	bcs.w	8002906 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800269a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026a6:	f000 8088 	beq.w	80027ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	330c      	adds	r3, #12
 80026b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026b8:	e853 3f00 	ldrex	r3, [r3]
 80026bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80026c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	330c      	adds	r3, #12
 80026d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80026d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80026da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80026e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80026e6:	e841 2300 	strex	r3, r2, [r1]
 80026ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80026ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1d9      	bne.n	80026aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	3314      	adds	r3, #20
 80026fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002700:	e853 3f00 	ldrex	r3, [r3]
 8002704:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002706:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002708:	f023 0301 	bic.w	r3, r3, #1
 800270c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	3314      	adds	r3, #20
 8002716:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800271a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800271e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002720:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002722:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002726:	e841 2300 	strex	r3, r2, [r1]
 800272a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800272c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1e1      	bne.n	80026f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	3314      	adds	r3, #20
 8002738:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800273c:	e853 3f00 	ldrex	r3, [r3]
 8002740:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002748:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	3314      	adds	r3, #20
 8002752:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002756:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002758:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800275a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800275c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800275e:	e841 2300 	strex	r3, r2, [r1]
 8002762:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002764:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1e3      	bne.n	8002732 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	330c      	adds	r3, #12
 800277e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002782:	e853 3f00 	ldrex	r3, [r3]
 8002786:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800278a:	f023 0310 	bic.w	r3, r3, #16
 800278e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	330c      	adds	r3, #12
 8002798:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800279c:	65ba      	str	r2, [r7, #88]	; 0x58
 800279e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027a4:	e841 2300 	strex	r3, r2, [r1]
 80027a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80027aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1e3      	bne.n	8002778 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fe fc05 	bl	8000fc4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	4619      	mov	r1, r3
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f8c0 	bl	8002950 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027d0:	e099      	b.n	8002906 <HAL_UART_IRQHandler+0x50e>
 80027d2:	bf00      	nop
 80027d4:	08002b0b 	.word	0x08002b0b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 808b 	beq.w	800290a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80027f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 8086 	beq.w	800290a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	330c      	adds	r3, #12
 8002804:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002808:	e853 3f00 	ldrex	r3, [r3]
 800280c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800280e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002810:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002814:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	330c      	adds	r3, #12
 800281e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002822:	647a      	str	r2, [r7, #68]	; 0x44
 8002824:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002826:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002828:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800282a:	e841 2300 	strex	r3, r2, [r1]
 800282e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1e3      	bne.n	80027fe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	3314      	adds	r3, #20
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	e853 3f00 	ldrex	r3, [r3]
 8002844:	623b      	str	r3, [r7, #32]
   return(result);
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	f023 0301 	bic.w	r3, r3, #1
 800284c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3314      	adds	r3, #20
 8002856:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800285a:	633a      	str	r2, [r7, #48]	; 0x30
 800285c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800285e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002862:	e841 2300 	strex	r3, r2, [r1]
 8002866:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1e3      	bne.n	8002836 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2220      	movs	r2, #32
 8002872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	330c      	adds	r3, #12
 8002882:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	e853 3f00 	ldrex	r3, [r3]
 800288a:	60fb      	str	r3, [r7, #12]
   return(result);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f023 0310 	bic.w	r3, r3, #16
 8002892:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	330c      	adds	r3, #12
 800289c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80028a0:	61fa      	str	r2, [r7, #28]
 80028a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a4:	69b9      	ldr	r1, [r7, #24]
 80028a6:	69fa      	ldr	r2, [r7, #28]
 80028a8:	e841 2300 	strex	r3, r2, [r1]
 80028ac:	617b      	str	r3, [r7, #20]
   return(result);
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1e3      	bne.n	800287c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028b8:	4619      	mov	r1, r3
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f848 	bl	8002950 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028c0:	e023      	b.n	800290a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d009      	beq.n	80028e2 <HAL_UART_IRQHandler+0x4ea>
 80028ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f929 	bl	8002b32 <UART_Transmit_IT>
    return;
 80028e0:	e014      	b.n	800290c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00e      	beq.n	800290c <HAL_UART_IRQHandler+0x514>
 80028ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d008      	beq.n	800290c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f969 	bl	8002bd2 <UART_EndTransmit_IT>
    return;
 8002900:	e004      	b.n	800290c <HAL_UART_IRQHandler+0x514>
    return;
 8002902:	bf00      	nop
 8002904:	e002      	b.n	800290c <HAL_UART_IRQHandler+0x514>
      return;
 8002906:	bf00      	nop
 8002908:	e000      	b.n	800290c <HAL_UART_IRQHandler+0x514>
      return;
 800290a:	bf00      	nop
  }
}
 800290c:	37e8      	adds	r7, #232	; 0xe8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop

08002914 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b090      	sub	sp, #64	; 0x40
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	4613      	mov	r3, r2
 8002976:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002978:	e050      	b.n	8002a1c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800297a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800297c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002980:	d04c      	beq.n	8002a1c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002984:	2b00      	cmp	r3, #0
 8002986:	d007      	beq.n	8002998 <UART_WaitOnFlagUntilTimeout+0x30>
 8002988:	f7fe fa2e 	bl	8000de8 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002994:	429a      	cmp	r2, r3
 8002996:	d241      	bcs.n	8002a1c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	330c      	adds	r3, #12
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a2:	e853 3f00 	ldrex	r3, [r3]
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80029ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	330c      	adds	r3, #12
 80029b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029b8:	637a      	str	r2, [r7, #52]	; 0x34
 80029ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029c0:	e841 2300 	strex	r3, r2, [r1]
 80029c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80029c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1e5      	bne.n	8002998 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	3314      	adds	r3, #20
 80029d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	e853 3f00 	ldrex	r3, [r3]
 80029da:	613b      	str	r3, [r7, #16]
   return(result);
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	f023 0301 	bic.w	r3, r3, #1
 80029e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	3314      	adds	r3, #20
 80029ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029ec:	623a      	str	r2, [r7, #32]
 80029ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f0:	69f9      	ldr	r1, [r7, #28]
 80029f2:	6a3a      	ldr	r2, [r7, #32]
 80029f4:	e841 2300 	strex	r3, r2, [r1]
 80029f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1e5      	bne.n	80029cc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e00f      	b.n	8002a3c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	4013      	ands	r3, r2
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	bf0c      	ite	eq
 8002a2c:	2301      	moveq	r3, #1
 8002a2e:	2300      	movne	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	461a      	mov	r2, r3
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d09f      	beq.n	800297a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3740      	adds	r7, #64	; 0x40
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b095      	sub	sp, #84	; 0x54
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	330c      	adds	r3, #12
 8002a52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a56:	e853 3f00 	ldrex	r3, [r3]
 8002a5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	330c      	adds	r3, #12
 8002a6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a6c:	643a      	str	r2, [r7, #64]	; 0x40
 8002a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a74:	e841 2300 	strex	r3, r2, [r1]
 8002a78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1e5      	bne.n	8002a4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	3314      	adds	r3, #20
 8002a86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	e853 3f00 	ldrex	r3, [r3]
 8002a8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f023 0301 	bic.w	r3, r3, #1
 8002a96:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	3314      	adds	r3, #20
 8002a9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002aa0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aa8:	e841 2300 	strex	r3, r2, [r1]
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1e5      	bne.n	8002a80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d119      	bne.n	8002af0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	330c      	adds	r3, #12
 8002ac2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	e853 3f00 	ldrex	r3, [r3]
 8002aca:	60bb      	str	r3, [r7, #8]
   return(result);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f023 0310 	bic.w	r3, r3, #16
 8002ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	330c      	adds	r3, #12
 8002ada:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002adc:	61ba      	str	r2, [r7, #24]
 8002ade:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae0:	6979      	ldr	r1, [r7, #20]
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	e841 2300 	strex	r3, r2, [r1]
 8002ae8:	613b      	str	r3, [r7, #16]
   return(result);
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1e5      	bne.n	8002abc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002afe:	bf00      	nop
 8002b00:	3754      	adds	r7, #84	; 0x54
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f7ff ff09 	bl	800293c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b2a:	bf00      	nop
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b085      	sub	sp, #20
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b21      	cmp	r3, #33	; 0x21
 8002b44:	d13e      	bne.n	8002bc4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b4e:	d114      	bne.n	8002b7a <UART_Transmit_IT+0x48>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d110      	bne.n	8002b7a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	1c9a      	adds	r2, r3, #2
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	621a      	str	r2, [r3, #32]
 8002b78:	e008      	b.n	8002b8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	1c59      	adds	r1, r3, #1
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6211      	str	r1, [r2, #32]
 8002b84:	781a      	ldrb	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10f      	bne.n	8002bc0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bbe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e000      	b.n	8002bc6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002bc4:	2302      	movs	r3, #2
  }
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68da      	ldr	r2, [r3, #12]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002be8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff fe8e 	bl	8002914 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b08c      	sub	sp, #48	; 0x30
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b22      	cmp	r3, #34	; 0x22
 8002c14:	f040 80ab 	bne.w	8002d6e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c20:	d117      	bne.n	8002c52 <UART_Receive_IT+0x50>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d113      	bne.n	8002c52 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c32:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c44:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4a:	1c9a      	adds	r2, r3, #2
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28
 8002c50:	e026      	b.n	8002ca0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c56:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c64:	d007      	beq.n	8002c76 <UART_Receive_IT+0x74>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10a      	bne.n	8002c84 <UART_Receive_IT+0x82>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d106      	bne.n	8002c84 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c80:	701a      	strb	r2, [r3, #0]
 8002c82:	e008      	b.n	8002c96 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c94:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	4619      	mov	r1, r3
 8002cae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d15a      	bne.n	8002d6a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0220 	bic.w	r2, r2, #32
 8002cc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695a      	ldr	r2, [r3, #20]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0201 	bic.w	r2, r2, #1
 8002ce2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d135      	bne.n	8002d60 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	330c      	adds	r3, #12
 8002d00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	e853 3f00 	ldrex	r3, [r3]
 8002d08:	613b      	str	r3, [r7, #16]
   return(result);
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	f023 0310 	bic.w	r3, r3, #16
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	330c      	adds	r3, #12
 8002d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d1a:	623a      	str	r2, [r7, #32]
 8002d1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1e:	69f9      	ldr	r1, [r7, #28]
 8002d20:	6a3a      	ldr	r2, [r7, #32]
 8002d22:	e841 2300 	strex	r3, r2, [r1]
 8002d26:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1e5      	bne.n	8002cfa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0310 	and.w	r3, r3, #16
 8002d38:	2b10      	cmp	r3, #16
 8002d3a:	d10a      	bne.n	8002d52 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d56:	4619      	mov	r1, r3
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff fdf9 	bl	8002950 <HAL_UARTEx_RxEventCallback>
 8002d5e:	e002      	b.n	8002d66 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff fde1 	bl	8002928 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d66:	2300      	movs	r3, #0
 8002d68:	e002      	b.n	8002d70 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	e000      	b.n	8002d70 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002d6e:	2302      	movs	r3, #2
  }
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3730      	adds	r7, #48	; 0x30
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d7c:	b0c0      	sub	sp, #256	; 0x100
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d94:	68d9      	ldr	r1, [r3, #12]
 8002d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	ea40 0301 	orr.w	r3, r0, r1
 8002da0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002dd0:	f021 010c 	bic.w	r1, r1, #12
 8002dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002dde:	430b      	orrs	r3, r1
 8002de0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df2:	6999      	ldr	r1, [r3, #24]
 8002df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	ea40 0301 	orr.w	r3, r0, r1
 8002dfe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	4b8f      	ldr	r3, [pc, #572]	; (8003044 <UART_SetConfig+0x2cc>)
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d005      	beq.n	8002e18 <UART_SetConfig+0xa0>
 8002e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	4b8d      	ldr	r3, [pc, #564]	; (8003048 <UART_SetConfig+0x2d0>)
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d104      	bne.n	8002e22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e18:	f7fe ff48 	bl	8001cac <HAL_RCC_GetPCLK2Freq>
 8002e1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e20:	e003      	b.n	8002e2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e22:	f7fe ff2f 	bl	8001c84 <HAL_RCC_GetPCLK1Freq>
 8002e26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e34:	f040 810c 	bne.w	8003050 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e4a:	4622      	mov	r2, r4
 8002e4c:	462b      	mov	r3, r5
 8002e4e:	1891      	adds	r1, r2, r2
 8002e50:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e52:	415b      	adcs	r3, r3
 8002e54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e5a:	4621      	mov	r1, r4
 8002e5c:	eb12 0801 	adds.w	r8, r2, r1
 8002e60:	4629      	mov	r1, r5
 8002e62:	eb43 0901 	adc.w	r9, r3, r1
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e7a:	4690      	mov	r8, r2
 8002e7c:	4699      	mov	r9, r3
 8002e7e:	4623      	mov	r3, r4
 8002e80:	eb18 0303 	adds.w	r3, r8, r3
 8002e84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e88:	462b      	mov	r3, r5
 8002e8a:	eb49 0303 	adc.w	r3, r9, r3
 8002e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ea2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	18db      	adds	r3, r3, r3
 8002eaa:	653b      	str	r3, [r7, #80]	; 0x50
 8002eac:	4613      	mov	r3, r2
 8002eae:	eb42 0303 	adc.w	r3, r2, r3
 8002eb2:	657b      	str	r3, [r7, #84]	; 0x54
 8002eb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002eb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ebc:	f7fd fa38 	bl	8000330 <__aeabi_uldivmod>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4b61      	ldr	r3, [pc, #388]	; (800304c <UART_SetConfig+0x2d4>)
 8002ec6:	fba3 2302 	umull	r2, r3, r3, r2
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	011c      	lsls	r4, r3, #4
 8002ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ed8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002edc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ee0:	4642      	mov	r2, r8
 8002ee2:	464b      	mov	r3, r9
 8002ee4:	1891      	adds	r1, r2, r2
 8002ee6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ee8:	415b      	adcs	r3, r3
 8002eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ef0:	4641      	mov	r1, r8
 8002ef2:	eb12 0a01 	adds.w	sl, r2, r1
 8002ef6:	4649      	mov	r1, r9
 8002ef8:	eb43 0b01 	adc.w	fp, r3, r1
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f10:	4692      	mov	sl, r2
 8002f12:	469b      	mov	fp, r3
 8002f14:	4643      	mov	r3, r8
 8002f16:	eb1a 0303 	adds.w	r3, sl, r3
 8002f1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f1e:	464b      	mov	r3, r9
 8002f20:	eb4b 0303 	adc.w	r3, fp, r3
 8002f24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	18db      	adds	r3, r3, r3
 8002f40:	643b      	str	r3, [r7, #64]	; 0x40
 8002f42:	4613      	mov	r3, r2
 8002f44:	eb42 0303 	adc.w	r3, r2, r3
 8002f48:	647b      	str	r3, [r7, #68]	; 0x44
 8002f4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f52:	f7fd f9ed 	bl	8000330 <__aeabi_uldivmod>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	4b3b      	ldr	r3, [pc, #236]	; (800304c <UART_SetConfig+0x2d4>)
 8002f5e:	fba3 2301 	umull	r2, r3, r3, r1
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	2264      	movs	r2, #100	; 0x64
 8002f66:	fb02 f303 	mul.w	r3, r2, r3
 8002f6a:	1acb      	subs	r3, r1, r3
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f72:	4b36      	ldr	r3, [pc, #216]	; (800304c <UART_SetConfig+0x2d4>)
 8002f74:	fba3 2302 	umull	r2, r3, r3, r2
 8002f78:	095b      	lsrs	r3, r3, #5
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f80:	441c      	add	r4, r3
 8002f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f86:	2200      	movs	r2, #0
 8002f88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f94:	4642      	mov	r2, r8
 8002f96:	464b      	mov	r3, r9
 8002f98:	1891      	adds	r1, r2, r2
 8002f9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f9c:	415b      	adcs	r3, r3
 8002f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fa0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fa4:	4641      	mov	r1, r8
 8002fa6:	1851      	adds	r1, r2, r1
 8002fa8:	6339      	str	r1, [r7, #48]	; 0x30
 8002faa:	4649      	mov	r1, r9
 8002fac:	414b      	adcs	r3, r1
 8002fae:	637b      	str	r3, [r7, #52]	; 0x34
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002fbc:	4659      	mov	r1, fp
 8002fbe:	00cb      	lsls	r3, r1, #3
 8002fc0:	4651      	mov	r1, sl
 8002fc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fc6:	4651      	mov	r1, sl
 8002fc8:	00ca      	lsls	r2, r1, #3
 8002fca:	4610      	mov	r0, r2
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4603      	mov	r3, r0
 8002fd0:	4642      	mov	r2, r8
 8002fd2:	189b      	adds	r3, r3, r2
 8002fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fd8:	464b      	mov	r3, r9
 8002fda:	460a      	mov	r2, r1
 8002fdc:	eb42 0303 	adc.w	r3, r2, r3
 8002fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ff0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ff4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	18db      	adds	r3, r3, r3
 8002ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ffe:	4613      	mov	r3, r2
 8003000:	eb42 0303 	adc.w	r3, r2, r3
 8003004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003006:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800300a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800300e:	f7fd f98f 	bl	8000330 <__aeabi_uldivmod>
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	4b0d      	ldr	r3, [pc, #52]	; (800304c <UART_SetConfig+0x2d4>)
 8003018:	fba3 1302 	umull	r1, r3, r3, r2
 800301c:	095b      	lsrs	r3, r3, #5
 800301e:	2164      	movs	r1, #100	; 0x64
 8003020:	fb01 f303 	mul.w	r3, r1, r3
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	3332      	adds	r3, #50	; 0x32
 800302a:	4a08      	ldr	r2, [pc, #32]	; (800304c <UART_SetConfig+0x2d4>)
 800302c:	fba2 2303 	umull	r2, r3, r2, r3
 8003030:	095b      	lsrs	r3, r3, #5
 8003032:	f003 0207 	and.w	r2, r3, #7
 8003036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4422      	add	r2, r4
 800303e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003040:	e105      	b.n	800324e <UART_SetConfig+0x4d6>
 8003042:	bf00      	nop
 8003044:	40011000 	.word	0x40011000
 8003048:	40011400 	.word	0x40011400
 800304c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003054:	2200      	movs	r2, #0
 8003056:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800305a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800305e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003062:	4642      	mov	r2, r8
 8003064:	464b      	mov	r3, r9
 8003066:	1891      	adds	r1, r2, r2
 8003068:	6239      	str	r1, [r7, #32]
 800306a:	415b      	adcs	r3, r3
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
 800306e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003072:	4641      	mov	r1, r8
 8003074:	1854      	adds	r4, r2, r1
 8003076:	4649      	mov	r1, r9
 8003078:	eb43 0501 	adc.w	r5, r3, r1
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	00eb      	lsls	r3, r5, #3
 8003086:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800308a:	00e2      	lsls	r2, r4, #3
 800308c:	4614      	mov	r4, r2
 800308e:	461d      	mov	r5, r3
 8003090:	4643      	mov	r3, r8
 8003092:	18e3      	adds	r3, r4, r3
 8003094:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003098:	464b      	mov	r3, r9
 800309a:	eb45 0303 	adc.w	r3, r5, r3
 800309e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80030be:	4629      	mov	r1, r5
 80030c0:	008b      	lsls	r3, r1, #2
 80030c2:	4621      	mov	r1, r4
 80030c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030c8:	4621      	mov	r1, r4
 80030ca:	008a      	lsls	r2, r1, #2
 80030cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80030d0:	f7fd f92e 	bl	8000330 <__aeabi_uldivmod>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	4b60      	ldr	r3, [pc, #384]	; (800325c <UART_SetConfig+0x4e4>)
 80030da:	fba3 2302 	umull	r2, r3, r3, r2
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	011c      	lsls	r4, r3, #4
 80030e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030e6:	2200      	movs	r2, #0
 80030e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80030ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80030f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80030f4:	4642      	mov	r2, r8
 80030f6:	464b      	mov	r3, r9
 80030f8:	1891      	adds	r1, r2, r2
 80030fa:	61b9      	str	r1, [r7, #24]
 80030fc:	415b      	adcs	r3, r3
 80030fe:	61fb      	str	r3, [r7, #28]
 8003100:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003104:	4641      	mov	r1, r8
 8003106:	1851      	adds	r1, r2, r1
 8003108:	6139      	str	r1, [r7, #16]
 800310a:	4649      	mov	r1, r9
 800310c:	414b      	adcs	r3, r1
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800311c:	4659      	mov	r1, fp
 800311e:	00cb      	lsls	r3, r1, #3
 8003120:	4651      	mov	r1, sl
 8003122:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003126:	4651      	mov	r1, sl
 8003128:	00ca      	lsls	r2, r1, #3
 800312a:	4610      	mov	r0, r2
 800312c:	4619      	mov	r1, r3
 800312e:	4603      	mov	r3, r0
 8003130:	4642      	mov	r2, r8
 8003132:	189b      	adds	r3, r3, r2
 8003134:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003138:	464b      	mov	r3, r9
 800313a:	460a      	mov	r2, r1
 800313c:	eb42 0303 	adc.w	r3, r2, r3
 8003140:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	67bb      	str	r3, [r7, #120]	; 0x78
 800314e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800315c:	4649      	mov	r1, r9
 800315e:	008b      	lsls	r3, r1, #2
 8003160:	4641      	mov	r1, r8
 8003162:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003166:	4641      	mov	r1, r8
 8003168:	008a      	lsls	r2, r1, #2
 800316a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800316e:	f7fd f8df 	bl	8000330 <__aeabi_uldivmod>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	4b39      	ldr	r3, [pc, #228]	; (800325c <UART_SetConfig+0x4e4>)
 8003178:	fba3 1302 	umull	r1, r3, r3, r2
 800317c:	095b      	lsrs	r3, r3, #5
 800317e:	2164      	movs	r1, #100	; 0x64
 8003180:	fb01 f303 	mul.w	r3, r1, r3
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	3332      	adds	r3, #50	; 0x32
 800318a:	4a34      	ldr	r2, [pc, #208]	; (800325c <UART_SetConfig+0x4e4>)
 800318c:	fba2 2303 	umull	r2, r3, r2, r3
 8003190:	095b      	lsrs	r3, r3, #5
 8003192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003196:	441c      	add	r4, r3
 8003198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800319c:	2200      	movs	r2, #0
 800319e:	673b      	str	r3, [r7, #112]	; 0x70
 80031a0:	677a      	str	r2, [r7, #116]	; 0x74
 80031a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80031a6:	4642      	mov	r2, r8
 80031a8:	464b      	mov	r3, r9
 80031aa:	1891      	adds	r1, r2, r2
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	415b      	adcs	r3, r3
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031b6:	4641      	mov	r1, r8
 80031b8:	1851      	adds	r1, r2, r1
 80031ba:	6039      	str	r1, [r7, #0]
 80031bc:	4649      	mov	r1, r9
 80031be:	414b      	adcs	r3, r1
 80031c0:	607b      	str	r3, [r7, #4]
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031ce:	4659      	mov	r1, fp
 80031d0:	00cb      	lsls	r3, r1, #3
 80031d2:	4651      	mov	r1, sl
 80031d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031d8:	4651      	mov	r1, sl
 80031da:	00ca      	lsls	r2, r1, #3
 80031dc:	4610      	mov	r0, r2
 80031de:	4619      	mov	r1, r3
 80031e0:	4603      	mov	r3, r0
 80031e2:	4642      	mov	r2, r8
 80031e4:	189b      	adds	r3, r3, r2
 80031e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80031e8:	464b      	mov	r3, r9
 80031ea:	460a      	mov	r2, r1
 80031ec:	eb42 0303 	adc.w	r3, r2, r3
 80031f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	663b      	str	r3, [r7, #96]	; 0x60
 80031fc:	667a      	str	r2, [r7, #100]	; 0x64
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800320a:	4649      	mov	r1, r9
 800320c:	008b      	lsls	r3, r1, #2
 800320e:	4641      	mov	r1, r8
 8003210:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003214:	4641      	mov	r1, r8
 8003216:	008a      	lsls	r2, r1, #2
 8003218:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800321c:	f7fd f888 	bl	8000330 <__aeabi_uldivmod>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4b0d      	ldr	r3, [pc, #52]	; (800325c <UART_SetConfig+0x4e4>)
 8003226:	fba3 1302 	umull	r1, r3, r3, r2
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	2164      	movs	r1, #100	; 0x64
 800322e:	fb01 f303 	mul.w	r3, r1, r3
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	3332      	adds	r3, #50	; 0x32
 8003238:	4a08      	ldr	r2, [pc, #32]	; (800325c <UART_SetConfig+0x4e4>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	f003 020f 	and.w	r2, r3, #15
 8003244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4422      	add	r2, r4
 800324c:	609a      	str	r2, [r3, #8]
}
 800324e:	bf00      	nop
 8003250:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003254:	46bd      	mov	sp, r7
 8003256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800325a:	bf00      	nop
 800325c:	51eb851f 	.word	0x51eb851f

08003260 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f103 0208 	add.w	r2, r3, #8
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f04f 32ff 	mov.w	r2, #4294967295
 8003278:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f103 0208 	add.w	r2, r3, #8
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f103 0208 	add.w	r2, r3, #8
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80032ba:	b480      	push	{r7}
 80032bc:	b085      	sub	sp, #20
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
 80032c2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d0:	d103      	bne.n	80032da <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	e00c      	b.n	80032f4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3308      	adds	r3, #8
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	e002      	b.n	80032e8 <vListInsert+0x2e>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d2f6      	bcs.n	80032e2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	601a      	str	r2, [r3, #0]
}
 8003320:	bf00      	nop
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6892      	ldr	r2, [r2, #8]
 8003342:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6852      	ldr	r2, [r2, #4]
 800334c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	429a      	cmp	r2, r3
 8003356:	d103      	bne.n	8003360 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	1e5a      	subs	r2, r3, #1
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800338a:	2301      	movs	r3, #1
 800338c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10a      	bne.n	80033ae <xQueueGenericReset+0x2e>
        __asm volatile
 8003398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339c:	f383 8811 	msr	BASEPRI, r3
 80033a0:	f3bf 8f6f 	isb	sy
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	60fb      	str	r3, [r7, #12]
    }
 80033aa:	bf00      	nop
 80033ac:	e7fe      	b.n	80033ac <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d05d      	beq.n	8003470 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d059      	beq.n	8003470 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c4:	2100      	movs	r1, #0
 80033c6:	fba3 2302 	umull	r2, r3, r3, r2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d000      	beq.n	80033d0 <xQueueGenericReset+0x50>
 80033ce:	2101      	movs	r1, #1
 80033d0:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d14c      	bne.n	8003470 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80033d6:	f002 fbbf 	bl	8005b58 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e2:	6939      	ldr	r1, [r7, #16]
 80033e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033e6:	fb01 f303 	mul.w	r3, r1, r3
 80033ea:	441a      	add	r2, r3
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	2200      	movs	r2, #0
 80033f4:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003406:	3b01      	subs	r3, #1
 8003408:	6939      	ldr	r1, [r7, #16]
 800340a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800340c:	fb01 f303 	mul.w	r3, r1, r3
 8003410:	441a      	add	r2, r3
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	22ff      	movs	r2, #255	; 0xff
 800341a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	22ff      	movs	r2, #255	; 0xff
 8003422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d114      	bne.n	8003456 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d01a      	beq.n	800346a <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	3310      	adds	r3, #16
 8003438:	4618      	mov	r0, r3
 800343a:	f001 fb01 	bl	8004a40 <xTaskRemoveFromEventList>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d012      	beq.n	800346a <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003444:	4b15      	ldr	r3, [pc, #84]	; (800349c <xQueueGenericReset+0x11c>)
 8003446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	f3bf 8f6f 	isb	sy
 8003454:	e009      	b.n	800346a <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	3310      	adds	r3, #16
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff ff00 	bl	8003260 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	3324      	adds	r3, #36	; 0x24
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fefb 	bl	8003260 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800346a:	f002 fba5 	bl	8005bb8 <vPortExitCritical>
 800346e:	e001      	b.n	8003474 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10a      	bne.n	8003490 <xQueueGenericReset+0x110>
        __asm volatile
 800347a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347e:	f383 8811 	msr	BASEPRI, r3
 8003482:	f3bf 8f6f 	isb	sy
 8003486:	f3bf 8f4f 	dsb	sy
 800348a:	60bb      	str	r3, [r7, #8]
    }
 800348c:	bf00      	nop
 800348e:	e7fe      	b.n	800348e <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8003490:	697b      	ldr	r3, [r7, #20]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	e000ed04 	.word	0xe000ed04

080034a0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08a      	sub	sp, #40	; 0x28
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	4613      	mov	r3, r2
 80034ac:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d02e      	beq.n	8003516 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80034b8:	2100      	movs	r1, #0
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	fba3 2302 	umull	r2, r3, r3, r2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d000      	beq.n	80034c8 <xQueueGenericCreate+0x28>
 80034c6:	2101      	movs	r1, #1
 80034c8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d123      	bne.n	8003516 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80034d6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80034da:	d81c      	bhi.n	8003516 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	fb02 f303 	mul.w	r3, r2, r3
 80034e4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	3350      	adds	r3, #80	; 0x50
 80034ea:	4618      	mov	r0, r3
 80034ec:	f002 fc9c 	bl	8005e28 <pvPortMalloc>
 80034f0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d01c      	beq.n	8003532 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	3350      	adds	r3, #80	; 0x50
 8003500:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003502:	79fa      	ldrb	r2, [r7, #7]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	4613      	mov	r3, r2
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	68b9      	ldr	r1, [r7, #8]
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f814 	bl	800353c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003514:	e00d      	b.n	8003532 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10a      	bne.n	8003532 <xQueueGenericCreate+0x92>
        __asm volatile
 800351c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003520:	f383 8811 	msr	BASEPRI, r3
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	613b      	str	r3, [r7, #16]
    }
 800352e:	bf00      	nop
 8003530:	e7fe      	b.n	8003530 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003532:	69fb      	ldr	r3, [r7, #28]
    }
 8003534:	4618      	mov	r0, r3
 8003536:	3720      	adds	r7, #32
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d103      	bne.n	8003558 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	e002      	b.n	800355e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800356a:	2101      	movs	r1, #1
 800356c:	69b8      	ldr	r0, [r7, #24]
 800356e:	f7ff ff07 	bl	8003380 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	78fa      	ldrb	r2, [r7, #3]
 8003576:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800357a:	78fb      	ldrb	r3, [r7, #3]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	68f9      	ldr	r1, [r7, #12]
 8003580:	2073      	movs	r0, #115	; 0x73
 8003582:	f003 fdd9 	bl	8007138 <SEGGER_SYSVIEW_RecordU32x3>
}
 8003586:	bf00      	nop
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b090      	sub	sp, #64	; 0x40
 8003594:	af02      	add	r7, sp, #8
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800359e:	2300      	movs	r3, #0
 80035a0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10a      	bne.n	80035c2 <xQueueGenericSend+0x32>
        __asm volatile
 80035ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80035be:	bf00      	nop
 80035c0:	e7fe      	b.n	80035c0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d103      	bne.n	80035d0 <xQueueGenericSend+0x40>
 80035c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <xQueueGenericSend+0x44>
 80035d0:	2301      	movs	r3, #1
 80035d2:	e000      	b.n	80035d6 <xQueueGenericSend+0x46>
 80035d4:	2300      	movs	r3, #0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10a      	bne.n	80035f0 <xQueueGenericSend+0x60>
        __asm volatile
 80035da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035de:	f383 8811 	msr	BASEPRI, r3
 80035e2:	f3bf 8f6f 	isb	sy
 80035e6:	f3bf 8f4f 	dsb	sy
 80035ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80035ec:	bf00      	nop
 80035ee:	e7fe      	b.n	80035ee <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d103      	bne.n	80035fe <xQueueGenericSend+0x6e>
 80035f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <xQueueGenericSend+0x72>
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <xQueueGenericSend+0x74>
 8003602:	2300      	movs	r3, #0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <xQueueGenericSend+0x8e>
        __asm volatile
 8003608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	623b      	str	r3, [r7, #32]
    }
 800361a:	bf00      	nop
 800361c:	e7fe      	b.n	800361c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800361e:	f001 fc21 	bl	8004e64 <xTaskGetSchedulerState>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d102      	bne.n	800362e <xQueueGenericSend+0x9e>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <xQueueGenericSend+0xa2>
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <xQueueGenericSend+0xa4>
 8003632:	2300      	movs	r3, #0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <xQueueGenericSend+0xbe>
        __asm volatile
 8003638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363c:	f383 8811 	msr	BASEPRI, r3
 8003640:	f3bf 8f6f 	isb	sy
 8003644:	f3bf 8f4f 	dsb	sy
 8003648:	61fb      	str	r3, [r7, #28]
    }
 800364a:	bf00      	nop
 800364c:	e7fe      	b.n	800364c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800364e:	f002 fa83 	bl	8005b58 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	429a      	cmp	r2, r3
 800365c:	d302      	bcc.n	8003664 <xQueueGenericSend+0xd4>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b02      	cmp	r3, #2
 8003662:	d136      	bne.n	80036d2 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8003664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003666:	4618      	mov	r0, r3
 8003668:	f004 fa18 	bl	8007a9c <SEGGER_SYSVIEW_ShrinkId>
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	460b      	mov	r3, r1
 8003676:	4601      	mov	r1, r0
 8003678:	205a      	movs	r0, #90	; 0x5a
 800367a:	f003 fdd3 	bl	8007224 <SEGGER_SYSVIEW_RecordU32x4>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	68b9      	ldr	r1, [r7, #8]
 8003682:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003684:	f000 fb00 	bl	8003c88 <prvCopyDataToQueue>
 8003688:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	2b00      	cmp	r3, #0
 8003690:	d010      	beq.n	80036b4 <xQueueGenericSend+0x124>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003694:	3324      	adds	r3, #36	; 0x24
 8003696:	4618      	mov	r0, r3
 8003698:	f001 f9d2 	bl	8004a40 <xTaskRemoveFromEventList>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d013      	beq.n	80036ca <xQueueGenericSend+0x13a>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80036a2:	4b4d      	ldr	r3, [pc, #308]	; (80037d8 <xQueueGenericSend+0x248>)
 80036a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	f3bf 8f4f 	dsb	sy
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	e00a      	b.n	80036ca <xQueueGenericSend+0x13a>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80036b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d007      	beq.n	80036ca <xQueueGenericSend+0x13a>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80036ba:	4b47      	ldr	r3, [pc, #284]	; (80037d8 <xQueueGenericSend+0x248>)
 80036bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80036ca:	f002 fa75 	bl	8005bb8 <vPortExitCritical>
                return pdPASS;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e07d      	b.n	80037ce <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d110      	bne.n	80036fa <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80036d8:	f002 fa6e 	bl	8005bb8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80036dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036de:	4618      	mov	r0, r3
 80036e0:	f004 f9dc 	bl	8007a9c <SEGGER_SYSVIEW_ShrinkId>
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	460b      	mov	r3, r1
 80036ee:	4601      	mov	r1, r0
 80036f0:	205a      	movs	r0, #90	; 0x5a
 80036f2:	f003 fd97 	bl	8007224 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80036f6:	2300      	movs	r3, #0
 80036f8:	e069      	b.n	80037ce <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80036fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d106      	bne.n	800370e <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003700:	f107 0314 	add.w	r3, r7, #20
 8003704:	4618      	mov	r0, r3
 8003706:	f001 fa73 	bl	8004bf0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800370a:	2301      	movs	r3, #1
 800370c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800370e:	f002 fa53 	bl	8005bb8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003712:	f000 fe75 	bl	8004400 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003716:	f002 fa1f 	bl	8005b58 <vPortEnterCritical>
 800371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003720:	b25b      	sxtb	r3, r3
 8003722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003726:	d103      	bne.n	8003730 <xQueueGenericSend+0x1a0>
 8003728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003732:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003736:	b25b      	sxtb	r3, r3
 8003738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373c:	d103      	bne.n	8003746 <xQueueGenericSend+0x1b6>
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003746:	f002 fa37 	bl	8005bb8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800374a:	1d3a      	adds	r2, r7, #4
 800374c:	f107 0314 	add.w	r3, r7, #20
 8003750:	4611      	mov	r1, r2
 8003752:	4618      	mov	r0, r3
 8003754:	f001 fa62 	bl	8004c1c <xTaskCheckForTimeOut>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d124      	bne.n	80037a8 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800375e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003760:	f000 fb8a 	bl	8003e78 <prvIsQueueFull>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d018      	beq.n	800379c <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376c:	3310      	adds	r3, #16
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	4611      	mov	r1, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f001 f8f8 	bl	8004968 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003778:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800377a:	f000 fb15 	bl	8003da8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800377e:	f000 fe4d 	bl	800441c <xTaskResumeAll>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	f47f af62 	bne.w	800364e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800378a:	4b13      	ldr	r3, [pc, #76]	; (80037d8 <xQueueGenericSend+0x248>)
 800378c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	f3bf 8f4f 	dsb	sy
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	e758      	b.n	800364e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800379c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800379e:	f000 fb03 	bl	8003da8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80037a2:	f000 fe3b 	bl	800441c <xTaskResumeAll>
 80037a6:	e752      	b.n	800364e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80037a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037aa:	f000 fafd 	bl	8003da8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80037ae:	f000 fe35 	bl	800441c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80037b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b4:	4618      	mov	r0, r3
 80037b6:	f004 f971 	bl	8007a9c <SEGGER_SYSVIEW_ShrinkId>
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	460b      	mov	r3, r1
 80037c4:	4601      	mov	r1, r0
 80037c6:	205a      	movs	r0, #90	; 0x5a
 80037c8:	f003 fd2c 	bl	8007224 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80037cc:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3738      	adds	r7, #56	; 0x38
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	e000ed04 	.word	0xe000ed04

080037dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80037dc:	b590      	push	{r4, r7, lr}
 80037de:	b08f      	sub	sp, #60	; 0x3c
 80037e0:	af02      	add	r7, sp, #8
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80037e8:	2300      	movs	r3, #0
 80037ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80037f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10a      	bne.n	800380c <xQueueReceive+0x30>
        __asm volatile
 80037f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	623b      	str	r3, [r7, #32]
    }
 8003808:	bf00      	nop
 800380a:	e7fe      	b.n	800380a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d103      	bne.n	800381a <xQueueReceive+0x3e>
 8003812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <xQueueReceive+0x42>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <xQueueReceive+0x44>
 800381e:	2300      	movs	r3, #0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10a      	bne.n	800383a <xQueueReceive+0x5e>
        __asm volatile
 8003824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003828:	f383 8811 	msr	BASEPRI, r3
 800382c:	f3bf 8f6f 	isb	sy
 8003830:	f3bf 8f4f 	dsb	sy
 8003834:	61fb      	str	r3, [r7, #28]
    }
 8003836:	bf00      	nop
 8003838:	e7fe      	b.n	8003838 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800383a:	f001 fb13 	bl	8004e64 <xTaskGetSchedulerState>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d102      	bne.n	800384a <xQueueReceive+0x6e>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <xQueueReceive+0x72>
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <xQueueReceive+0x74>
 800384e:	2300      	movs	r3, #0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10a      	bne.n	800386a <xQueueReceive+0x8e>
        __asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	61bb      	str	r3, [r7, #24]
    }
 8003866:	bf00      	nop
 8003868:	e7fe      	b.n	8003868 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800386a:	f002 f975 	bl	8005b58 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800386e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	2b00      	cmp	r3, #0
 8003878:	d02f      	beq.n	80038da <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800387a:	68b9      	ldr	r1, [r7, #8]
 800387c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800387e:	f000 fa6d 	bl	8003d5c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8003882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003884:	4618      	mov	r0, r3
 8003886:	f004 f909 	bl	8007a9c <SEGGER_SYSVIEW_ShrinkId>
 800388a:	4604      	mov	r4, r0
 800388c:	2000      	movs	r0, #0
 800388e:	f004 f905 	bl	8007a9c <SEGGER_SYSVIEW_ShrinkId>
 8003892:	4602      	mov	r2, r0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2101      	movs	r1, #1
 8003898:	9100      	str	r1, [sp, #0]
 800389a:	4621      	mov	r1, r4
 800389c:	205c      	movs	r0, #92	; 0x5c
 800389e:	f003 fcc1 	bl	8007224 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	1e5a      	subs	r2, r3, #1
 80038a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00f      	beq.n	80038d2 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b4:	3310      	adds	r3, #16
 80038b6:	4618      	mov	r0, r3
 80038b8:	f001 f8c2 	bl	8004a40 <xTaskRemoveFromEventList>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d007      	beq.n	80038d2 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80038c2:	4b4d      	ldr	r3, [pc, #308]	; (80039f8 <xQueueReceive+0x21c>)
 80038c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80038d2:	f002 f971 	bl	8005bb8 <vPortExitCritical>
                return pdPASS;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e08a      	b.n	80039f0 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d113      	bne.n	8003908 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80038e0:	f002 f96a 	bl	8005bb8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80038e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e6:	4618      	mov	r0, r3
 80038e8:	f004 f8d8 	bl	8007a9c <SEGGER_SYSVIEW_ShrinkId>
 80038ec:	4604      	mov	r4, r0
 80038ee:	2000      	movs	r0, #0
 80038f0:	f004 f8d4 	bl	8007a9c <SEGGER_SYSVIEW_ShrinkId>
 80038f4:	4602      	mov	r2, r0
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2101      	movs	r1, #1
 80038fa:	9100      	str	r1, [sp, #0]
 80038fc:	4621      	mov	r1, r4
 80038fe:	205c      	movs	r0, #92	; 0x5c
 8003900:	f003 fc90 	bl	8007224 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8003904:	2300      	movs	r3, #0
 8003906:	e073      	b.n	80039f0 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390a:	2b00      	cmp	r3, #0
 800390c:	d106      	bne.n	800391c <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800390e:	f107 0310 	add.w	r3, r7, #16
 8003912:	4618      	mov	r0, r3
 8003914:	f001 f96c 	bl	8004bf0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003918:	2301      	movs	r3, #1
 800391a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800391c:	f002 f94c 	bl	8005bb8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003920:	f000 fd6e 	bl	8004400 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003924:	f002 f918 	bl	8005b58 <vPortEnterCritical>
 8003928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800392e:	b25b      	sxtb	r3, r3
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003934:	d103      	bne.n	800393e <xQueueReceive+0x162>
 8003936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003940:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003944:	b25b      	sxtb	r3, r3
 8003946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394a:	d103      	bne.n	8003954 <xQueueReceive+0x178>
 800394c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003954:	f002 f930 	bl	8005bb8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003958:	1d3a      	adds	r2, r7, #4
 800395a:	f107 0310 	add.w	r3, r7, #16
 800395e:	4611      	mov	r1, r2
 8003960:	4618      	mov	r0, r3
 8003962:	f001 f95b 	bl	8004c1c <xTaskCheckForTimeOut>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d124      	bne.n	80039b6 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800396c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800396e:	f000 fa6d 	bl	8003e4c <prvIsQueueEmpty>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d018      	beq.n	80039aa <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397a:	3324      	adds	r3, #36	; 0x24
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	4611      	mov	r1, r2
 8003980:	4618      	mov	r0, r3
 8003982:	f000 fff1 	bl	8004968 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003986:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003988:	f000 fa0e 	bl	8003da8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800398c:	f000 fd46 	bl	800441c <xTaskResumeAll>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	f47f af69 	bne.w	800386a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003998:	4b17      	ldr	r3, [pc, #92]	; (80039f8 <xQueueReceive+0x21c>)
 800399a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	f3bf 8f6f 	isb	sy
 80039a8:	e75f      	b.n	800386a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80039aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039ac:	f000 f9fc 	bl	8003da8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80039b0:	f000 fd34 	bl	800441c <xTaskResumeAll>
 80039b4:	e759      	b.n	800386a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80039b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039b8:	f000 f9f6 	bl	8003da8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80039bc:	f000 fd2e 	bl	800441c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039c2:	f000 fa43 	bl	8003e4c <prvIsQueueEmpty>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f43f af4e 	beq.w	800386a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80039ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d0:	4618      	mov	r0, r3
 80039d2:	f004 f863 	bl	8007a9c <SEGGER_SYSVIEW_ShrinkId>
 80039d6:	4604      	mov	r4, r0
 80039d8:	2000      	movs	r0, #0
 80039da:	f004 f85f 	bl	8007a9c <SEGGER_SYSVIEW_ShrinkId>
 80039de:	4602      	mov	r2, r0
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2101      	movs	r1, #1
 80039e4:	9100      	str	r1, [sp, #0]
 80039e6:	4621      	mov	r1, r4
 80039e8:	205c      	movs	r0, #92	; 0x5c
 80039ea:	f003 fc1b 	bl	8007224 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80039ee:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3734      	adds	r7, #52	; 0x34
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd90      	pop	{r4, r7, pc}
 80039f8:	e000ed04 	.word	0xe000ed04

080039fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80039fc:	b590      	push	{r4, r7, lr}
 80039fe:	b08f      	sub	sp, #60	; 0x3c
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003a06:	2300      	movs	r3, #0
 8003a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10a      	bne.n	8003a2e <xQueueSemaphoreTake+0x32>
        __asm volatile
 8003a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	61bb      	str	r3, [r7, #24]
    }
 8003a2a:	bf00      	nop
 8003a2c:	e7fe      	b.n	8003a2c <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <xQueueSemaphoreTake+0x50>
        __asm volatile
 8003a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3a:	f383 8811 	msr	BASEPRI, r3
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	617b      	str	r3, [r7, #20]
    }
 8003a48:	bf00      	nop
 8003a4a:	e7fe      	b.n	8003a4a <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a4c:	f001 fa0a 	bl	8004e64 <xTaskGetSchedulerState>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d102      	bne.n	8003a5c <xQueueSemaphoreTake+0x60>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <xQueueSemaphoreTake+0x64>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <xQueueSemaphoreTake+0x66>
 8003a60:	2300      	movs	r3, #0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10a      	bne.n	8003a7c <xQueueSemaphoreTake+0x80>
        __asm volatile
 8003a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6a:	f383 8811 	msr	BASEPRI, r3
 8003a6e:	f3bf 8f6f 	isb	sy
 8003a72:	f3bf 8f4f 	dsb	sy
 8003a76:	613b      	str	r3, [r7, #16]
    }
 8003a78:	bf00      	nop
 8003a7a:	e7fe      	b.n	8003a7a <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003a7c:	f002 f86c 	bl	8005b58 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a84:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d034      	beq.n	8003af6 <xQueueSemaphoreTake+0xfa>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f004 f804 	bl	8007a9c <SEGGER_SYSVIEW_ShrinkId>
 8003a94:	4604      	mov	r4, r0
 8003a96:	2000      	movs	r0, #0
 8003a98:	f004 f800 	bl	8007a9c <SEGGER_SYSVIEW_ShrinkId>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	9100      	str	r1, [sp, #0]
 8003aa4:	4621      	mov	r1, r4
 8003aa6:	205c      	movs	r0, #92	; 0x5c
 8003aa8:	f003 fbbc 	bl	8007224 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	1e5a      	subs	r2, r3, #1
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d104      	bne.n	8003ac6 <xQueueSemaphoreTake+0xca>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003abc:	f001 fc06 	bl	80052cc <pvTaskIncrementMutexHeldCount>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00f      	beq.n	8003aee <xQueueSemaphoreTake+0xf2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	3310      	adds	r3, #16
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 ffb4 	bl	8004a40 <xTaskRemoveFromEventList>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d007      	beq.n	8003aee <xQueueSemaphoreTake+0xf2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003ade:	4b5d      	ldr	r3, [pc, #372]	; (8003c54 <xQueueSemaphoreTake+0x258>)
 8003ae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	f3bf 8f4f 	dsb	sy
 8003aea:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003aee:	f002 f863 	bl	8005bb8 <vPortExitCritical>
                return pdPASS;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e0a9      	b.n	8003c4a <xQueueSemaphoreTake+0x24e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d113      	bne.n	8003b24 <xQueueSemaphoreTake+0x128>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003afc:	f002 f85c 	bl	8005bb8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	4618      	mov	r0, r3
 8003b04:	f003 ffca 	bl	8007a9c <SEGGER_SYSVIEW_ShrinkId>
 8003b08:	4604      	mov	r4, r0
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	f003 ffc6 	bl	8007a9c <SEGGER_SYSVIEW_ShrinkId>
 8003b10:	4602      	mov	r2, r0
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2101      	movs	r1, #1
 8003b16:	9100      	str	r1, [sp, #0]
 8003b18:	4621      	mov	r1, r4
 8003b1a:	205c      	movs	r0, #92	; 0x5c
 8003b1c:	f003 fb82 	bl	8007224 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8003b20:	2300      	movs	r3, #0
 8003b22:	e092      	b.n	8003c4a <xQueueSemaphoreTake+0x24e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d106      	bne.n	8003b38 <xQueueSemaphoreTake+0x13c>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003b2a:	f107 0308 	add.w	r3, r7, #8
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f001 f85e 	bl	8004bf0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003b34:	2301      	movs	r3, #1
 8003b36:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003b38:	f002 f83e 	bl	8005bb8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003b3c:	f000 fc60 	bl	8004400 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003b40:	f002 f80a 	bl	8005b58 <vPortEnterCritical>
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b4a:	b25b      	sxtb	r3, r3
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d103      	bne.n	8003b5a <xQueueSemaphoreTake+0x15e>
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b60:	b25b      	sxtb	r3, r3
 8003b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b66:	d103      	bne.n	8003b70 <xQueueSemaphoreTake+0x174>
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b70:	f002 f822 	bl	8005bb8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b74:	463a      	mov	r2, r7
 8003b76:	f107 0308 	add.w	r3, r7, #8
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f001 f84d 	bl	8004c1c <xTaskCheckForTimeOut>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d132      	bne.n	8003bee <xQueueSemaphoreTake+0x1f2>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b8a:	f000 f95f 	bl	8003e4c <prvIsQueueEmpty>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d026      	beq.n	8003be2 <xQueueSemaphoreTake+0x1e6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d109      	bne.n	8003bb0 <xQueueSemaphoreTake+0x1b4>
                    {
                        taskENTER_CRITICAL();
 8003b9c:	f001 ffdc 	bl	8005b58 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f001 f97b 	bl	8004ea0 <xTaskPriorityInherit>
 8003baa:	62b8      	str	r0, [r7, #40]	; 0x28
                        }
                        taskEXIT_CRITICAL();
 8003bac:	f002 f804 	bl	8005bb8 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	3324      	adds	r3, #36	; 0x24
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 fed5 	bl	8004968 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003bbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bc0:	f000 f8f2 	bl	8003da8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003bc4:	f000 fc2a 	bl	800441c <xTaskResumeAll>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f47f af56 	bne.w	8003a7c <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8003bd0:	4b20      	ldr	r3, [pc, #128]	; (8003c54 <xQueueSemaphoreTake+0x258>)
 8003bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	f3bf 8f6f 	isb	sy
 8003be0:	e74c      	b.n	8003a7c <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8003be2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003be4:	f000 f8e0 	bl	8003da8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003be8:	f000 fc18 	bl	800441c <xTaskResumeAll>
 8003bec:	e746      	b.n	8003a7c <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003bee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bf0:	f000 f8da 	bl	8003da8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003bf4:	f000 fc12 	bl	800441c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bfa:	f000 f927 	bl	8003e4c <prvIsQueueEmpty>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f43f af3b 	beq.w	8003a7c <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8003c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00d      	beq.n	8003c28 <xQueueSemaphoreTake+0x22c>
                    {
                        taskENTER_CRITICAL();
 8003c0c:	f001 ffa4 	bl	8005b58 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003c10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c12:	f000 f821 	bl	8003c58 <prvGetDisinheritPriorityAfterTimeout>
 8003c16:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	69f9      	ldr	r1, [r7, #28]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f001 fa92 	bl	8005148 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8003c24:	f001 ffc8 	bl	8005bb8 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f003 ff36 	bl	8007a9c <SEGGER_SYSVIEW_ShrinkId>
 8003c30:	4604      	mov	r4, r0
 8003c32:	2000      	movs	r0, #0
 8003c34:	f003 ff32 	bl	8007a9c <SEGGER_SYSVIEW_ShrinkId>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	9100      	str	r1, [sp, #0]
 8003c40:	4621      	mov	r1, r4
 8003c42:	205c      	movs	r0, #92	; 0x5c
 8003c44:	f003 faee 	bl	8007224 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8003c48:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3734      	adds	r7, #52	; 0x34
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd90      	pop	{r4, r7, pc}
 8003c52:	bf00      	nop
 8003c54:	e000ed04 	.word	0xe000ed04

08003c58 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d006      	beq.n	8003c76 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f1c3 0305 	rsb	r3, r3, #5
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	e001      	b.n	8003c7a <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
    }
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003c94:	2300      	movs	r3, #0
 8003c96:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10d      	bne.n	8003cc2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d14d      	bne.n	8003d4a <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f001 f99c 	bl	8004ff0 <xTaskPriorityDisinherit>
 8003cb8:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	609a      	str	r2, [r3, #8]
 8003cc0:	e043      	b.n	8003d4a <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d119      	bne.n	8003cfc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6858      	ldr	r0, [r3, #4]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	68b9      	ldr	r1, [r7, #8]
 8003cd4:	f004 f880 	bl	8007dd8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	441a      	add	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d32b      	bcc.n	8003d4a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	605a      	str	r2, [r3, #4]
 8003cfa:	e026      	b.n	8003d4a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	68d8      	ldr	r0, [r3, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d04:	461a      	mov	r2, r3
 8003d06:	68b9      	ldr	r1, [r7, #8]
 8003d08:	f004 f866 	bl	8007dd8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	425b      	negs	r3, r3
 8003d16:	441a      	add	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d207      	bcs.n	8003d38 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	425b      	negs	r3, r3
 8003d32:	441a      	add	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d105      	bne.n	8003d4a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003d52:	697b      	ldr	r3, [r7, #20]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d018      	beq.n	8003da0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	441a      	add	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d303      	bcc.n	8003d90 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68d9      	ldr	r1, [r3, #12]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	461a      	mov	r2, r3
 8003d9a:	6838      	ldr	r0, [r7, #0]
 8003d9c:	f004 f81c 	bl	8007dd8 <memcpy>
    }
}
 8003da0:	bf00      	nop
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003db0:	f001 fed2 	bl	8005b58 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dba:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003dbc:	e011      	b.n	8003de2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d012      	beq.n	8003dec <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3324      	adds	r3, #36	; 0x24
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 fe38 	bl	8004a40 <xTaskRemoveFromEventList>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003dd6:	f000 ff87 	bl	8004ce8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	dce9      	bgt.n	8003dbe <prvUnlockQueue+0x16>
 8003dea:	e000      	b.n	8003dee <prvUnlockQueue+0x46>
                    break;
 8003dec:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	22ff      	movs	r2, #255	; 0xff
 8003df2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003df6:	f001 fedf 	bl	8005bb8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003dfa:	f001 fead 	bl	8005b58 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e04:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e06:	e011      	b.n	8003e2c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d012      	beq.n	8003e36 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3310      	adds	r3, #16
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 fe13 	bl	8004a40 <xTaskRemoveFromEventList>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003e20:	f000 ff62 	bl	8004ce8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003e24:	7bbb      	ldrb	r3, [r7, #14]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	dce9      	bgt.n	8003e08 <prvUnlockQueue+0x60>
 8003e34:	e000      	b.n	8003e38 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003e36:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	22ff      	movs	r2, #255	; 0xff
 8003e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003e40:	f001 feba 	bl	8005bb8 <vPortExitCritical>
}
 8003e44:	bf00      	nop
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003e54:	f001 fe80 	bl	8005b58 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d102      	bne.n	8003e66 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003e60:	2301      	movs	r3, #1
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	e001      	b.n	8003e6a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003e66:	2300      	movs	r3, #0
 8003e68:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003e6a:	f001 fea5 	bl	8005bb8 <vPortExitCritical>

    return xReturn;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003e80:	f001 fe6a 	bl	8005b58 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d102      	bne.n	8003e96 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003e90:	2301      	movs	r3, #1
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	e001      	b.n	8003e9a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003e9a:	f001 fe8d 	bl	8005bb8 <vPortExitCritical>

    return xReturn;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10a      	bne.n	8003ed2 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8003ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec0:	f383 8811 	msr	BASEPRI, r3
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	60fb      	str	r3, [r7, #12]
    }
 8003ece:	bf00      	nop
 8003ed0:	e7fe      	b.n	8003ed0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d024      	beq.n	8003f22 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ed8:	2300      	movs	r3, #0
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	e01e      	b.n	8003f1c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003ede:	4a1c      	ldr	r2, [pc, #112]	; (8003f50 <vQueueAddToRegistry+0xa8>)
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d105      	bne.n	8003efa <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	4a17      	ldr	r2, [pc, #92]	; (8003f50 <vQueueAddToRegistry+0xa8>)
 8003ef4:	4413      	add	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
                    break;
 8003ef8:	e013      	b.n	8003f22 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10a      	bne.n	8003f16 <vQueueAddToRegistry+0x6e>
 8003f00:	4a13      	ldr	r2, [pc, #76]	; (8003f50 <vQueueAddToRegistry+0xa8>)
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d104      	bne.n	8003f16 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	4a0f      	ldr	r2, [pc, #60]	; (8003f50 <vQueueAddToRegistry+0xa8>)
 8003f12:	4413      	add	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2b07      	cmp	r3, #7
 8003f20:	d9dd      	bls.n	8003ede <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00f      	beq.n	8003f48 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f003 fdb0 	bl	8007a9c <SEGGER_SYSVIEW_ShrinkId>
 8003f3c:	4601      	mov	r1, r0
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	461a      	mov	r2, r3
 8003f42:	2071      	movs	r0, #113	; 0x71
 8003f44:	f003 f89e 	bl	8007084 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8003f48:	bf00      	nop
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	20000138 	.word	0x20000138

08003f54 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003f64:	f001 fdf8 	bl	8005b58 <vPortEnterCritical>
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f6e:	b25b      	sxtb	r3, r3
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f74:	d103      	bne.n	8003f7e <vQueueWaitForMessageRestricted+0x2a>
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f84:	b25b      	sxtb	r3, r3
 8003f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8a:	d103      	bne.n	8003f94 <vQueueWaitForMessageRestricted+0x40>
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f94:	f001 fe10 	bl	8005bb8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d106      	bne.n	8003fae <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	3324      	adds	r3, #36	; 0x24
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	68b9      	ldr	r1, [r7, #8]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 fd01 	bl	80049b0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003fae:	6978      	ldr	r0, [r7, #20]
 8003fb0:	f7ff fefa 	bl	8003da8 <prvUnlockQueue>
    }
 8003fb4:	bf00      	nop
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08c      	sub	sp, #48	; 0x30
 8003fc0:	af04      	add	r7, sp, #16
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003fcc:	88fb      	ldrh	r3, [r7, #6]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f001 ff29 	bl	8005e28 <pvPortMalloc>
 8003fd6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d013      	beq.n	8004006 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003fde:	2058      	movs	r0, #88	; 0x58
 8003fe0:	f001 ff22 	bl	8005e28 <pvPortMalloc>
 8003fe4:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003fec:	2258      	movs	r2, #88	; 0x58
 8003fee:	2100      	movs	r1, #0
 8003ff0:	69f8      	ldr	r0, [r7, #28]
 8003ff2:	f003 feff 	bl	8007df4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30
 8003ffc:	e005      	b.n	800400a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003ffe:	6978      	ldr	r0, [r7, #20]
 8004000:	f001 ffcc 	bl	8005f9c <vPortFree>
 8004004:	e001      	b.n	800400a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8004006:	2300      	movs	r3, #0
 8004008:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d013      	beq.n	8004038 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004010:	88fa      	ldrh	r2, [r7, #6]
 8004012:	2300      	movs	r3, #0
 8004014:	9303      	str	r3, [sp, #12]
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	9302      	str	r3, [sp, #8]
 800401a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401c:	9301      	str	r3, [sp, #4]
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68b9      	ldr	r1, [r7, #8]
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 f80e 	bl	8004048 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800402c:	69f8      	ldr	r0, [r7, #28]
 800402e:	f000 f899 	bl	8004164 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004032:	2301      	movs	r3, #1
 8004034:	61bb      	str	r3, [r7, #24]
 8004036:	e002      	b.n	800403e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004038:	f04f 33ff 	mov.w	r3, #4294967295
 800403c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800403e:	69bb      	ldr	r3, [r7, #24]
    }
 8004040:	4618      	mov	r0, r3
 8004042:	3720      	adds	r7, #32
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004058:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	461a      	mov	r2, r3
 8004060:	21a5      	movs	r1, #165	; 0xa5
 8004062:	f003 fec7 	bl	8007df4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004070:	3b01      	subs	r3, #1
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4413      	add	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	f023 0307 	bic.w	r3, r3, #7
 800407e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <prvInitialiseNewTask+0x58>
        __asm volatile
 800408a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408e:	f383 8811 	msr	BASEPRI, r3
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	617b      	str	r3, [r7, #20]
    }
 800409c:	bf00      	nop
 800409e:	e7fe      	b.n	800409e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d01e      	beq.n	80040e4 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040a6:	2300      	movs	r3, #0
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	e012      	b.n	80040d2 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	4413      	add	r3, r2
 80040b2:	7819      	ldrb	r1, [r3, #0]
 80040b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	4413      	add	r3, r2
 80040ba:	3334      	adds	r3, #52	; 0x34
 80040bc:	460a      	mov	r2, r1
 80040be:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	4413      	add	r3, r2
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d006      	beq.n	80040da <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	3301      	adds	r3, #1
 80040d0:	61fb      	str	r3, [r7, #28]
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	2b09      	cmp	r3, #9
 80040d6:	d9e9      	bls.n	80040ac <prvInitialiseNewTask+0x64>
 80040d8:	e000      	b.n	80040dc <prvInitialiseNewTask+0x94>
            {
                break;
 80040da:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80040e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d90a      	bls.n	8004100 <prvInitialiseNewTask+0xb8>
        __asm volatile
 80040ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	613b      	str	r3, [r7, #16]
    }
 80040fc:	bf00      	nop
 80040fe:	e7fe      	b.n	80040fe <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004102:	2b04      	cmp	r3, #4
 8004104:	d901      	bls.n	800410a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004106:	2304      	movs	r3, #4
 8004108:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800410a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800410e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004112:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004114:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	3304      	adds	r3, #4
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff f8c0 	bl	80032a0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004122:	3318      	adds	r3, #24
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff f8bb 	bl	80032a0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800412a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800412e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004132:	f1c3 0205 	rsb	r2, r3, #5
 8004136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004138:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800413a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800413e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	68f9      	ldr	r1, [r7, #12]
 8004144:	69b8      	ldr	r0, [r7, #24]
 8004146:	f001 fbd9 	bl	80058fc <pxPortInitialiseStack>
 800414a:	4602      	mov	r2, r0
 800414c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800415a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800415c:	bf00      	nop
 800415e:	3720      	adds	r7, #32
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004164:	b5b0      	push	{r4, r5, r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af02      	add	r7, sp, #8
 800416a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800416c:	f001 fcf4 	bl	8005b58 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004170:	4b4f      	ldr	r3, [pc, #316]	; (80042b0 <prvAddNewTaskToReadyList+0x14c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3301      	adds	r3, #1
 8004176:	4a4e      	ldr	r2, [pc, #312]	; (80042b0 <prvAddNewTaskToReadyList+0x14c>)
 8004178:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800417a:	4b4e      	ldr	r3, [pc, #312]	; (80042b4 <prvAddNewTaskToReadyList+0x150>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004182:	4a4c      	ldr	r2, [pc, #304]	; (80042b4 <prvAddNewTaskToReadyList+0x150>)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004188:	4b49      	ldr	r3, [pc, #292]	; (80042b0 <prvAddNewTaskToReadyList+0x14c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d110      	bne.n	80041b2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004190:	f000 fdce 	bl	8004d30 <prvInitialiseTaskLists>
 8004194:	e00d      	b.n	80041b2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004196:	4b48      	ldr	r3, [pc, #288]	; (80042b8 <prvAddNewTaskToReadyList+0x154>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d109      	bne.n	80041b2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800419e:	4b45      	ldr	r3, [pc, #276]	; (80042b4 <prvAddNewTaskToReadyList+0x150>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d802      	bhi.n	80041b2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80041ac:	4a41      	ldr	r2, [pc, #260]	; (80042b4 <prvAddNewTaskToReadyList+0x150>)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80041b2:	4b42      	ldr	r3, [pc, #264]	; (80042bc <prvAddNewTaskToReadyList+0x158>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3301      	adds	r3, #1
 80041b8:	4a40      	ldr	r2, [pc, #256]	; (80042bc <prvAddNewTaskToReadyList+0x158>)
 80041ba:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80041bc:	4b3f      	ldr	r3, [pc, #252]	; (80042bc <prvAddNewTaskToReadyList+0x158>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d016      	beq.n	80041f8 <prvAddNewTaskToReadyList+0x94>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f003 fb9f 	bl	8007910 <SEGGER_SYSVIEW_OnTaskCreate>
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e2:	461d      	mov	r5, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	461c      	mov	r4, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ee:	1ae3      	subs	r3, r4, r3
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	462b      	mov	r3, r5
 80041f4:	f002 f894 	bl	8006320 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f003 fc0c 	bl	8007a18 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	2201      	movs	r2, #1
 8004206:	409a      	lsls	r2, r3
 8004208:	4b2d      	ldr	r3, [pc, #180]	; (80042c0 <prvAddNewTaskToReadyList+0x15c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4313      	orrs	r3, r2
 800420e:	4a2c      	ldr	r2, [pc, #176]	; (80042c0 <prvAddNewTaskToReadyList+0x15c>)
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004216:	492b      	ldr	r1, [pc, #172]	; (80042c4 <prvAddNewTaskToReadyList+0x160>)
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	3304      	adds	r3, #4
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	609a      	str	r2, [r3, #8]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	60da      	str	r2, [r3, #12]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	3204      	adds	r2, #4
 800423e:	605a      	str	r2, [r3, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	1d1a      	adds	r2, r3, #4
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	609a      	str	r2, [r3, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424c:	4613      	mov	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4a1b      	ldr	r2, [pc, #108]	; (80042c4 <prvAddNewTaskToReadyList+0x160>)
 8004256:	441a      	add	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	615a      	str	r2, [r3, #20]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004260:	4918      	ldr	r1, [pc, #96]	; (80042c4 <prvAddNewTaskToReadyList+0x160>)
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	440b      	add	r3, r1
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	1c59      	adds	r1, r3, #1
 8004270:	4814      	ldr	r0, [pc, #80]	; (80042c4 <prvAddNewTaskToReadyList+0x160>)
 8004272:	4613      	mov	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4413      	add	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4403      	add	r3, r0
 800427c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800427e:	f001 fc9b 	bl	8005bb8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004282:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <prvAddNewTaskToReadyList+0x154>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00e      	beq.n	80042a8 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800428a:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <prvAddNewTaskToReadyList+0x150>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004294:	429a      	cmp	r2, r3
 8004296:	d207      	bcs.n	80042a8 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004298:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <prvAddNewTaskToReadyList+0x164>)
 800429a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80042a8:	bf00      	nop
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bdb0      	pop	{r4, r5, r7, pc}
 80042b0:	20000250 	.word	0x20000250
 80042b4:	20000178 	.word	0x20000178
 80042b8:	2000025c 	.word	0x2000025c
 80042bc:	2000026c 	.word	0x2000026c
 80042c0:	20000258 	.word	0x20000258
 80042c4:	2000017c 	.word	0x2000017c
 80042c8:	e000ed04 	.word	0xe000ed04

080042cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80042d4:	2300      	movs	r3, #0
 80042d6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d01b      	beq.n	8004316 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80042de:	4b15      	ldr	r3, [pc, #84]	; (8004334 <vTaskDelay+0x68>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <vTaskDelay+0x30>
        __asm volatile
 80042e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ea:	f383 8811 	msr	BASEPRI, r3
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	f3bf 8f4f 	dsb	sy
 80042f6:	60bb      	str	r3, [r7, #8]
    }
 80042f8:	bf00      	nop
 80042fa:	e7fe      	b.n	80042fa <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80042fc:	f000 f880 	bl	8004400 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	2023      	movs	r0, #35	; 0x23
 8004304:	f002 fe82 	bl	800700c <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004308:	2100      	movs	r1, #0
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 fff2 	bl	80052f4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004310:	f000 f884 	bl	800441c <xTaskResumeAll>
 8004314:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d107      	bne.n	800432c <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 800431c:	4b06      	ldr	r3, [pc, #24]	; (8004338 <vTaskDelay+0x6c>)
 800431e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	f3bf 8f4f 	dsb	sy
 8004328:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800432c:	bf00      	nop
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	20000278 	.word	0x20000278
 8004338:	e000ed04 	.word	0xe000ed04

0800433c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8004342:	4b27      	ldr	r3, [pc, #156]	; (80043e0 <vTaskStartScheduler+0xa4>)
 8004344:	9301      	str	r3, [sp, #4]
 8004346:	2300      	movs	r3, #0
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	2300      	movs	r3, #0
 800434c:	2282      	movs	r2, #130	; 0x82
 800434e:	4925      	ldr	r1, [pc, #148]	; (80043e4 <vTaskStartScheduler+0xa8>)
 8004350:	4825      	ldr	r0, [pc, #148]	; (80043e8 <vTaskStartScheduler+0xac>)
 8004352:	f7ff fe33 	bl	8003fbc <xTaskCreate>
 8004356:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d102      	bne.n	8004364 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800435e:	f001 f849 	bl	80053f4 <xTimerCreateTimerTask>
 8004362:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d124      	bne.n	80043b4 <vTaskStartScheduler+0x78>
        __asm volatile
 800436a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436e:	f383 8811 	msr	BASEPRI, r3
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	60bb      	str	r3, [r7, #8]
    }
 800437c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800437e:	4b1b      	ldr	r3, [pc, #108]	; (80043ec <vTaskStartScheduler+0xb0>)
 8004380:	f04f 32ff 	mov.w	r2, #4294967295
 8004384:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004386:	4b1a      	ldr	r3, [pc, #104]	; (80043f0 <vTaskStartScheduler+0xb4>)
 8004388:	2201      	movs	r2, #1
 800438a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800438c:	4b19      	ldr	r3, [pc, #100]	; (80043f4 <vTaskStartScheduler+0xb8>)
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8004392:	4b19      	ldr	r3, [pc, #100]	; (80043f8 <vTaskStartScheduler+0xbc>)
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	4b12      	ldr	r3, [pc, #72]	; (80043e0 <vTaskStartScheduler+0xa4>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	429a      	cmp	r2, r3
 800439c:	d102      	bne.n	80043a4 <vTaskStartScheduler+0x68>
 800439e:	f003 fa9b 	bl	80078d8 <SEGGER_SYSVIEW_OnIdle>
 80043a2:	e004      	b.n	80043ae <vTaskStartScheduler+0x72>
 80043a4:	4b14      	ldr	r3, [pc, #80]	; (80043f8 <vTaskStartScheduler+0xbc>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f003 faf3 	bl	8007994 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80043ae:	f001 fb31 	bl	8005a14 <xPortStartScheduler>
 80043b2:	e00e      	b.n	80043d2 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ba:	d10a      	bne.n	80043d2 <vTaskStartScheduler+0x96>
        __asm volatile
 80043bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	607b      	str	r3, [r7, #4]
    }
 80043ce:	bf00      	nop
 80043d0:	e7fe      	b.n	80043d0 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80043d2:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <vTaskStartScheduler+0xc0>)
 80043d4:	681b      	ldr	r3, [r3, #0]
}
 80043d6:	bf00      	nop
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	20000274 	.word	0x20000274
 80043e4:	08009254 	.word	0x08009254
 80043e8:	08004d01 	.word	0x08004d01
 80043ec:	20000270 	.word	0x20000270
 80043f0:	2000025c 	.word	0x2000025c
 80043f4:	20000254 	.word	0x20000254
 80043f8:	20000178 	.word	0x20000178
 80043fc:	2000000c 	.word	0x2000000c

08004400 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004404:	4b04      	ldr	r3, [pc, #16]	; (8004418 <vTaskSuspendAll+0x18>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3301      	adds	r3, #1
 800440a:	4a03      	ldr	r2, [pc, #12]	; (8004418 <vTaskSuspendAll+0x18>)
 800440c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800440e:	bf00      	nop
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	20000278 	.word	0x20000278

0800441c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b088      	sub	sp, #32
 8004420:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004422:	2300      	movs	r3, #0
 8004424:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004426:	2300      	movs	r3, #0
 8004428:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800442a:	4b73      	ldr	r3, [pc, #460]	; (80045f8 <xTaskResumeAll+0x1dc>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10a      	bne.n	8004448 <xTaskResumeAll+0x2c>
        __asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	607b      	str	r3, [r7, #4]
    }
 8004444:	bf00      	nop
 8004446:	e7fe      	b.n	8004446 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004448:	f001 fb86 	bl	8005b58 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800444c:	4b6a      	ldr	r3, [pc, #424]	; (80045f8 <xTaskResumeAll+0x1dc>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3b01      	subs	r3, #1
 8004452:	4a69      	ldr	r2, [pc, #420]	; (80045f8 <xTaskResumeAll+0x1dc>)
 8004454:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004456:	4b68      	ldr	r3, [pc, #416]	; (80045f8 <xTaskResumeAll+0x1dc>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	f040 80c4 	bne.w	80045e8 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004460:	4b66      	ldr	r3, [pc, #408]	; (80045fc <xTaskResumeAll+0x1e0>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80bf 	beq.w	80045e8 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800446a:	e08e      	b.n	800458a <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800446c:	4b64      	ldr	r3, [pc, #400]	; (8004600 <xTaskResumeAll+0x1e4>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	69fa      	ldr	r2, [r7, #28]
 8004480:	6a12      	ldr	r2, [r2, #32]
 8004482:	609a      	str	r2, [r3, #8]
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	69fa      	ldr	r2, [r7, #28]
 800448a:	69d2      	ldr	r2, [r2, #28]
 800448c:	605a      	str	r2, [r3, #4]
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	3318      	adds	r3, #24
 8004496:	429a      	cmp	r2, r3
 8004498:	d103      	bne.n	80044a2 <xTaskResumeAll+0x86>
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	6a1a      	ldr	r2, [r3, #32]
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	605a      	str	r2, [r3, #4]
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	2200      	movs	r2, #0
 80044a6:	629a      	str	r2, [r3, #40]	; 0x28
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	1e5a      	subs	r2, r3, #1
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	69fa      	ldr	r2, [r7, #28]
 80044be:	68d2      	ldr	r2, [r2, #12]
 80044c0:	609a      	str	r2, [r3, #8]
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	69fa      	ldr	r2, [r7, #28]
 80044c8:	6892      	ldr	r2, [r2, #8]
 80044ca:	605a      	str	r2, [r3, #4]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	3304      	adds	r3, #4
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d103      	bne.n	80044e0 <xTaskResumeAll+0xc4>
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	605a      	str	r2, [r3, #4]
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	2200      	movs	r2, #0
 80044e4:	615a      	str	r2, [r3, #20]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	1e5a      	subs	r2, r3, #1
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f003 fa90 	bl	8007a18 <SEGGER_SYSVIEW_OnTaskStartReady>
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	2201      	movs	r2, #1
 80044fe:	409a      	lsls	r2, r3
 8004500:	4b40      	ldr	r3, [pc, #256]	; (8004604 <xTaskResumeAll+0x1e8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4313      	orrs	r3, r2
 8004506:	4a3f      	ldr	r2, [pc, #252]	; (8004604 <xTaskResumeAll+0x1e8>)
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450e:	493e      	ldr	r1, [pc, #248]	; (8004608 <xTaskResumeAll+0x1ec>)
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	3304      	adds	r3, #4
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	609a      	str	r2, [r3, #8]
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	60da      	str	r2, [r3, #12]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	69fa      	ldr	r2, [r7, #28]
 8004534:	3204      	adds	r2, #4
 8004536:	605a      	str	r2, [r3, #4]
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	1d1a      	adds	r2, r3, #4
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	609a      	str	r2, [r3, #8]
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004544:	4613      	mov	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4a2e      	ldr	r2, [pc, #184]	; (8004608 <xTaskResumeAll+0x1ec>)
 800454e:	441a      	add	r2, r3
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	615a      	str	r2, [r3, #20]
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004558:	492b      	ldr	r1, [pc, #172]	; (8004608 <xTaskResumeAll+0x1ec>)
 800455a:	4613      	mov	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	440b      	add	r3, r1
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	1c59      	adds	r1, r3, #1
 8004568:	4827      	ldr	r0, [pc, #156]	; (8004608 <xTaskResumeAll+0x1ec>)
 800456a:	4613      	mov	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4403      	add	r3, r0
 8004574:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457a:	4b24      	ldr	r3, [pc, #144]	; (800460c <xTaskResumeAll+0x1f0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	429a      	cmp	r2, r3
 8004582:	d302      	bcc.n	800458a <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8004584:	4b22      	ldr	r3, [pc, #136]	; (8004610 <xTaskResumeAll+0x1f4>)
 8004586:	2201      	movs	r2, #1
 8004588:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800458a:	4b1d      	ldr	r3, [pc, #116]	; (8004600 <xTaskResumeAll+0x1e4>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	f47f af6c 	bne.w	800446c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800459a:	f000 fc47 	bl	8004e2c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800459e:	4b1d      	ldr	r3, [pc, #116]	; (8004614 <xTaskResumeAll+0x1f8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d010      	beq.n	80045cc <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80045aa:	f000 f859 	bl	8004660 <xTaskIncrementTick>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d002      	beq.n	80045ba <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80045b4:	4b16      	ldr	r3, [pc, #88]	; (8004610 <xTaskResumeAll+0x1f4>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	3b01      	subs	r3, #1
 80045be:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f1      	bne.n	80045aa <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80045c6:	4b13      	ldr	r3, [pc, #76]	; (8004614 <xTaskResumeAll+0x1f8>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80045cc:	4b10      	ldr	r3, [pc, #64]	; (8004610 <xTaskResumeAll+0x1f4>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d009      	beq.n	80045e8 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80045d4:	2301      	movs	r3, #1
 80045d6:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80045d8:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <xTaskResumeAll+0x1fc>)
 80045da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80045e8:	f001 fae6 	bl	8005bb8 <vPortExitCritical>

    return xAlreadyYielded;
 80045ec:	69bb      	ldr	r3, [r7, #24]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3720      	adds	r7, #32
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	20000278 	.word	0x20000278
 80045fc:	20000250 	.word	0x20000250
 8004600:	20000210 	.word	0x20000210
 8004604:	20000258 	.word	0x20000258
 8004608:	2000017c 	.word	0x2000017c
 800460c:	20000178 	.word	0x20000178
 8004610:	20000264 	.word	0x20000264
 8004614:	20000260 	.word	0x20000260
 8004618:	e000ed04 	.word	0xe000ed04

0800461c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004622:	4b05      	ldr	r3, [pc, #20]	; (8004638 <xTaskGetTickCount+0x1c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004628:	687b      	ldr	r3, [r7, #4]
}
 800462a:	4618      	mov	r0, r3
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	20000254 	.word	0x20000254

0800463c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004642:	f001 fbb1 	bl	8005da8 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004646:	2300      	movs	r3, #0
 8004648:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800464a:	4b04      	ldr	r3, [pc, #16]	; (800465c <xTaskGetTickCountFromISR+0x20>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004650:	683b      	ldr	r3, [r7, #0]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20000254 	.word	0x20000254

08004660 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b08a      	sub	sp, #40	; 0x28
 8004664:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004666:	2300      	movs	r3, #0
 8004668:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800466a:	4b7f      	ldr	r3, [pc, #508]	; (8004868 <xTaskIncrementTick+0x208>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	f040 80f0 	bne.w	8004854 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004674:	4b7d      	ldr	r3, [pc, #500]	; (800486c <xTaskIncrementTick+0x20c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	3301      	adds	r3, #1
 800467a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800467c:	4a7b      	ldr	r2, [pc, #492]	; (800486c <xTaskIncrementTick+0x20c>)
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d120      	bne.n	80046ca <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004688:	4b79      	ldr	r3, [pc, #484]	; (8004870 <xTaskIncrementTick+0x210>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <xTaskIncrementTick+0x48>
        __asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	607b      	str	r3, [r7, #4]
    }
 80046a4:	bf00      	nop
 80046a6:	e7fe      	b.n	80046a6 <xTaskIncrementTick+0x46>
 80046a8:	4b71      	ldr	r3, [pc, #452]	; (8004870 <xTaskIncrementTick+0x210>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	61fb      	str	r3, [r7, #28]
 80046ae:	4b71      	ldr	r3, [pc, #452]	; (8004874 <xTaskIncrementTick+0x214>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a6f      	ldr	r2, [pc, #444]	; (8004870 <xTaskIncrementTick+0x210>)
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	4a6f      	ldr	r2, [pc, #444]	; (8004874 <xTaskIncrementTick+0x214>)
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	4b6e      	ldr	r3, [pc, #440]	; (8004878 <xTaskIncrementTick+0x218>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3301      	adds	r3, #1
 80046c2:	4a6d      	ldr	r2, [pc, #436]	; (8004878 <xTaskIncrementTick+0x218>)
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	f000 fbb1 	bl	8004e2c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80046ca:	4b6c      	ldr	r3, [pc, #432]	; (800487c <xTaskIncrementTick+0x21c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6a3a      	ldr	r2, [r7, #32]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	f0c0 80aa 	bcc.w	800482a <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046d6:	4b66      	ldr	r3, [pc, #408]	; (8004870 <xTaskIncrementTick+0x210>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d104      	bne.n	80046ea <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046e0:	4b66      	ldr	r3, [pc, #408]	; (800487c <xTaskIncrementTick+0x21c>)
 80046e2:	f04f 32ff 	mov.w	r2, #4294967295
 80046e6:	601a      	str	r2, [r3, #0]
                    break;
 80046e8:	e09f      	b.n	800482a <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046ea:	4b61      	ldr	r3, [pc, #388]	; (8004870 <xTaskIncrementTick+0x210>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80046fa:	6a3a      	ldr	r2, [r7, #32]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d203      	bcs.n	800470a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004702:	4a5e      	ldr	r2, [pc, #376]	; (800487c <xTaskIncrementTick+0x21c>)
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004708:	e08f      	b.n	800482a <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	68d2      	ldr	r2, [r2, #12]
 8004718:	609a      	str	r2, [r3, #8]
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	6892      	ldr	r2, [r2, #8]
 8004722:	605a      	str	r2, [r3, #4]
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	3304      	adds	r3, #4
 800472c:	429a      	cmp	r2, r3
 800472e:	d103      	bne.n	8004738 <xTaskIncrementTick+0xd8>
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	605a      	str	r2, [r3, #4]
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	2200      	movs	r2, #0
 800473c:	615a      	str	r2, [r3, #20]
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	1e5a      	subs	r2, r3, #1
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474c:	2b00      	cmp	r3, #0
 800474e:	d01e      	beq.n	800478e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	6a12      	ldr	r2, [r2, #32]
 800475e:	609a      	str	r2, [r3, #8]
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	69d2      	ldr	r2, [r2, #28]
 8004768:	605a      	str	r2, [r3, #4]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	3318      	adds	r3, #24
 8004772:	429a      	cmp	r2, r3
 8004774:	d103      	bne.n	800477e <xTaskIncrementTick+0x11e>
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	6a1a      	ldr	r2, [r3, #32]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	605a      	str	r2, [r3, #4]
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	2200      	movs	r2, #0
 8004782:	629a      	str	r2, [r3, #40]	; 0x28
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	1e5a      	subs	r2, r3, #1
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	4618      	mov	r0, r3
 8004792:	f003 f941 	bl	8007a18 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	2201      	movs	r2, #1
 800479c:	409a      	lsls	r2, r3
 800479e:	4b38      	ldr	r3, [pc, #224]	; (8004880 <xTaskIncrementTick+0x220>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	4a36      	ldr	r2, [pc, #216]	; (8004880 <xTaskIncrementTick+0x220>)
 80047a6:	6013      	str	r3, [r2, #0]
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ac:	4935      	ldr	r1, [pc, #212]	; (8004884 <xTaskIncrementTick+0x224>)
 80047ae:	4613      	mov	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	440b      	add	r3, r1
 80047b8:	3304      	adds	r3, #4
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	60bb      	str	r3, [r7, #8]
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	609a      	str	r2, [r3, #8]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	60da      	str	r2, [r3, #12]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	3204      	adds	r2, #4
 80047d4:	605a      	str	r2, [r3, #4]
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	1d1a      	adds	r2, r3, #4
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	609a      	str	r2, [r3, #8]
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e2:	4613      	mov	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4a26      	ldr	r2, [pc, #152]	; (8004884 <xTaskIncrementTick+0x224>)
 80047ec:	441a      	add	r2, r3
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	615a      	str	r2, [r3, #20]
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f6:	4923      	ldr	r1, [pc, #140]	; (8004884 <xTaskIncrementTick+0x224>)
 80047f8:	4613      	mov	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	440b      	add	r3, r1
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	1c59      	adds	r1, r3, #1
 8004806:	481f      	ldr	r0, [pc, #124]	; (8004884 <xTaskIncrementTick+0x224>)
 8004808:	4613      	mov	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4403      	add	r3, r0
 8004812:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004818:	4b1b      	ldr	r3, [pc, #108]	; (8004888 <xTaskIncrementTick+0x228>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481e:	429a      	cmp	r2, r3
 8004820:	f67f af59 	bls.w	80046d6 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8004824:	2301      	movs	r3, #1
 8004826:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004828:	e755      	b.n	80046d6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800482a:	4b17      	ldr	r3, [pc, #92]	; (8004888 <xTaskIncrementTick+0x228>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004830:	4914      	ldr	r1, [pc, #80]	; (8004884 <xTaskIncrementTick+0x224>)
 8004832:	4613      	mov	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	440b      	add	r3, r1
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d901      	bls.n	8004846 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8004842:	2301      	movs	r3, #1
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8004846:	4b11      	ldr	r3, [pc, #68]	; (800488c <xTaskIncrementTick+0x22c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d007      	beq.n	800485e <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 800484e:	2301      	movs	r3, #1
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
 8004852:	e004      	b.n	800485e <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004854:	4b0e      	ldr	r3, [pc, #56]	; (8004890 <xTaskIncrementTick+0x230>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3301      	adds	r3, #1
 800485a:	4a0d      	ldr	r2, [pc, #52]	; (8004890 <xTaskIncrementTick+0x230>)
 800485c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004860:	4618      	mov	r0, r3
 8004862:	3728      	adds	r7, #40	; 0x28
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	20000278 	.word	0x20000278
 800486c:	20000254 	.word	0x20000254
 8004870:	20000208 	.word	0x20000208
 8004874:	2000020c 	.word	0x2000020c
 8004878:	20000268 	.word	0x20000268
 800487c:	20000270 	.word	0x20000270
 8004880:	20000258 	.word	0x20000258
 8004884:	2000017c 	.word	0x2000017c
 8004888:	20000178 	.word	0x20000178
 800488c:	20000264 	.word	0x20000264
 8004890:	20000260 	.word	0x20000260

08004894 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800489a:	4b2d      	ldr	r3, [pc, #180]	; (8004950 <vTaskSwitchContext+0xbc>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80048a2:	4b2c      	ldr	r3, [pc, #176]	; (8004954 <vTaskSwitchContext+0xc0>)
 80048a4:	2201      	movs	r2, #1
 80048a6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80048a8:	e04d      	b.n	8004946 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80048aa:	4b2a      	ldr	r3, [pc, #168]	; (8004954 <vTaskSwitchContext+0xc0>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048b0:	4b29      	ldr	r3, [pc, #164]	; (8004958 <vTaskSwitchContext+0xc4>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	fab3 f383 	clz	r3, r3
 80048bc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80048be:	7afb      	ldrb	r3, [r7, #11]
 80048c0:	f1c3 031f 	rsb	r3, r3, #31
 80048c4:	617b      	str	r3, [r7, #20]
 80048c6:	4925      	ldr	r1, [pc, #148]	; (800495c <vTaskSwitchContext+0xc8>)
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	4613      	mov	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10a      	bne.n	80048f0 <vTaskSwitchContext+0x5c>
        __asm volatile
 80048da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	607b      	str	r3, [r7, #4]
    }
 80048ec:	bf00      	nop
 80048ee:	e7fe      	b.n	80048ee <vTaskSwitchContext+0x5a>
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	4613      	mov	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4a18      	ldr	r2, [pc, #96]	; (800495c <vTaskSwitchContext+0xc8>)
 80048fc:	4413      	add	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	605a      	str	r2, [r3, #4]
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	3308      	adds	r3, #8
 8004912:	429a      	cmp	r2, r3
 8004914:	d104      	bne.n	8004920 <vTaskSwitchContext+0x8c>
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	605a      	str	r2, [r3, #4]
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	4a0e      	ldr	r2, [pc, #56]	; (8004960 <vTaskSwitchContext+0xcc>)
 8004928:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800492a:	4b0d      	ldr	r3, [pc, #52]	; (8004960 <vTaskSwitchContext+0xcc>)
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	4b0d      	ldr	r3, [pc, #52]	; (8004964 <vTaskSwitchContext+0xd0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d102      	bne.n	800493c <vTaskSwitchContext+0xa8>
 8004936:	f002 ffcf 	bl	80078d8 <SEGGER_SYSVIEW_OnIdle>
}
 800493a:	e004      	b.n	8004946 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800493c:	4b08      	ldr	r3, [pc, #32]	; (8004960 <vTaskSwitchContext+0xcc>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4618      	mov	r0, r3
 8004942:	f003 f827 	bl	8007994 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8004946:	bf00      	nop
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	20000278 	.word	0x20000278
 8004954:	20000264 	.word	0x20000264
 8004958:	20000258 	.word	0x20000258
 800495c:	2000017c 	.word	0x2000017c
 8004960:	20000178 	.word	0x20000178
 8004964:	20000274 	.word	0x20000274

08004968 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10a      	bne.n	800498e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497c:	f383 8811 	msr	BASEPRI, r3
 8004980:	f3bf 8f6f 	isb	sy
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	60fb      	str	r3, [r7, #12]
    }
 800498a:	bf00      	nop
 800498c:	e7fe      	b.n	800498c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800498e:	4b07      	ldr	r3, [pc, #28]	; (80049ac <vTaskPlaceOnEventList+0x44>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3318      	adds	r3, #24
 8004994:	4619      	mov	r1, r3
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7fe fc8f 	bl	80032ba <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800499c:	2101      	movs	r1, #1
 800499e:	6838      	ldr	r0, [r7, #0]
 80049a0:	f000 fca8 	bl	80052f4 <prvAddCurrentTaskToDelayedList>
}
 80049a4:	bf00      	nop
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	20000178 	.word	0x20000178

080049b0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10a      	bne.n	80049d8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	613b      	str	r3, [r7, #16]
    }
 80049d4:	bf00      	nop
 80049d6:	e7fe      	b.n	80049d6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	4b17      	ldr	r3, [pc, #92]	; (8004a3c <vTaskPlaceOnEventListRestricted+0x8c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	61da      	str	r2, [r3, #28]
 80049e6:	4b15      	ldr	r3, [pc, #84]	; (8004a3c <vTaskPlaceOnEventListRestricted+0x8c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	6892      	ldr	r2, [r2, #8]
 80049ee:	621a      	str	r2, [r3, #32]
 80049f0:	4b12      	ldr	r3, [pc, #72]	; (8004a3c <vTaskPlaceOnEventListRestricted+0x8c>)
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	3218      	adds	r2, #24
 80049fa:	605a      	str	r2, [r3, #4]
 80049fc:	4b0f      	ldr	r3, [pc, #60]	; (8004a3c <vTaskPlaceOnEventListRestricted+0x8c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f103 0218 	add.w	r2, r3, #24
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	609a      	str	r2, [r3, #8]
 8004a08:	4b0c      	ldr	r3, [pc, #48]	; (8004a3c <vTaskPlaceOnEventListRestricted+0x8c>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	629a      	str	r2, [r3, #40]	; 0x28
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8004a20:	f04f 33ff 	mov.w	r3, #4294967295
 8004a24:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8004a26:	2024      	movs	r0, #36	; 0x24
 8004a28:	f002 fad2 	bl	8006fd0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	68b8      	ldr	r0, [r7, #8]
 8004a30:	f000 fc60 	bl	80052f4 <prvAddCurrentTaskToDelayedList>
    }
 8004a34:	bf00      	nop
 8004a36:	3718      	adds	r7, #24
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	20000178 	.word	0x20000178

08004a40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08a      	sub	sp, #40	; 0x28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10a      	bne.n	8004a6c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5a:	f383 8811 	msr	BASEPRI, r3
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	60fb      	str	r3, [r7, #12]
    }
 8004a68:	bf00      	nop
 8004a6a:	e7fe      	b.n	8004a6a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a70:	61fb      	str	r3, [r7, #28]
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	6a3a      	ldr	r2, [r7, #32]
 8004a78:	6a12      	ldr	r2, [r2, #32]
 8004a7a:	609a      	str	r2, [r3, #8]
 8004a7c:	6a3b      	ldr	r3, [r7, #32]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	6a3a      	ldr	r2, [r7, #32]
 8004a82:	69d2      	ldr	r2, [r2, #28]
 8004a84:	605a      	str	r2, [r3, #4]
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	3318      	adds	r3, #24
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d103      	bne.n	8004a9a <xTaskRemoveFromEventList+0x5a>
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	6a1a      	ldr	r2, [r3, #32]
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	605a      	str	r2, [r3, #4]
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	629a      	str	r2, [r3, #40]	; 0x28
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	1e5a      	subs	r2, r3, #1
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aaa:	4b4b      	ldr	r3, [pc, #300]	; (8004bd8 <xTaskRemoveFromEventList+0x198>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d162      	bne.n	8004b78 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	6a3a      	ldr	r2, [r7, #32]
 8004abe:	68d2      	ldr	r2, [r2, #12]
 8004ac0:	609a      	str	r2, [r3, #8]
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	6a3a      	ldr	r2, [r7, #32]
 8004ac8:	6892      	ldr	r2, [r2, #8]
 8004aca:	605a      	str	r2, [r3, #4]
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d103      	bne.n	8004ae0 <xTaskRemoveFromEventList+0xa0>
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	68da      	ldr	r2, [r3, #12]
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	605a      	str	r2, [r3, #4]
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	615a      	str	r2, [r3, #20]
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	1e5a      	subs	r2, r3, #1
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f002 ff90 	bl	8007a18 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	2201      	movs	r2, #1
 8004afe:	409a      	lsls	r2, r3
 8004b00:	4b36      	ldr	r3, [pc, #216]	; (8004bdc <xTaskRemoveFromEventList+0x19c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	4a35      	ldr	r2, [pc, #212]	; (8004bdc <xTaskRemoveFromEventList+0x19c>)
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b0e:	4934      	ldr	r1, [pc, #208]	; (8004be0 <xTaskRemoveFromEventList+0x1a0>)
 8004b10:	4613      	mov	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	440b      	add	r3, r1
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	613b      	str	r3, [r7, #16]
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	609a      	str	r2, [r3, #8]
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	689a      	ldr	r2, [r3, #8]
 8004b2a:	6a3b      	ldr	r3, [r7, #32]
 8004b2c:	60da      	str	r2, [r3, #12]
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	6a3a      	ldr	r2, [r7, #32]
 8004b34:	3204      	adds	r2, #4
 8004b36:	605a      	str	r2, [r3, #4]
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	1d1a      	adds	r2, r3, #4
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	609a      	str	r2, [r3, #8]
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b44:	4613      	mov	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4a24      	ldr	r2, [pc, #144]	; (8004be0 <xTaskRemoveFromEventList+0x1a0>)
 8004b4e:	441a      	add	r2, r3
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	615a      	str	r2, [r3, #20]
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b58:	4921      	ldr	r1, [pc, #132]	; (8004be0 <xTaskRemoveFromEventList+0x1a0>)
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	440b      	add	r3, r1
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	1c59      	adds	r1, r3, #1
 8004b68:	481d      	ldr	r0, [pc, #116]	; (8004be0 <xTaskRemoveFromEventList+0x1a0>)
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4403      	add	r3, r0
 8004b74:	6019      	str	r1, [r3, #0]
 8004b76:	e01b      	b.n	8004bb0 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b78:	4b1a      	ldr	r3, [pc, #104]	; (8004be4 <xTaskRemoveFromEventList+0x1a4>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	61bb      	str	r3, [r7, #24]
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	61da      	str	r2, [r3, #28]
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	621a      	str	r2, [r3, #32]
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	6a3a      	ldr	r2, [r7, #32]
 8004b92:	3218      	adds	r2, #24
 8004b94:	605a      	str	r2, [r3, #4]
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	f103 0218 	add.w	r2, r3, #24
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	609a      	str	r2, [r3, #8]
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
 8004ba2:	4a10      	ldr	r2, [pc, #64]	; (8004be4 <xTaskRemoveFromEventList+0x1a4>)
 8004ba4:	629a      	str	r2, [r3, #40]	; 0x28
 8004ba6:	4b0f      	ldr	r3, [pc, #60]	; (8004be4 <xTaskRemoveFromEventList+0x1a4>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	3301      	adds	r3, #1
 8004bac:	4a0d      	ldr	r2, [pc, #52]	; (8004be4 <xTaskRemoveFromEventList+0x1a4>)
 8004bae:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb4:	4b0c      	ldr	r3, [pc, #48]	; (8004be8 <xTaskRemoveFromEventList+0x1a8>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d905      	bls.n	8004bca <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <xTaskRemoveFromEventList+0x1ac>)
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	e001      	b.n	8004bce <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3728      	adds	r7, #40	; 0x28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	20000278 	.word	0x20000278
 8004bdc:	20000258 	.word	0x20000258
 8004be0:	2000017c 	.word	0x2000017c
 8004be4:	20000210 	.word	0x20000210
 8004be8:	20000178 	.word	0x20000178
 8004bec:	20000264 	.word	0x20000264

08004bf0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004bf8:	4b06      	ldr	r3, [pc, #24]	; (8004c14 <vTaskInternalSetTimeOutState+0x24>)
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004c00:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <vTaskInternalSetTimeOutState+0x28>)
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	605a      	str	r2, [r3, #4]
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	20000268 	.word	0x20000268
 8004c18:	20000254 	.word	0x20000254

08004c1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b088      	sub	sp, #32
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10a      	bne.n	8004c42 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	613b      	str	r3, [r7, #16]
    }
 8004c3e:	bf00      	nop
 8004c40:	e7fe      	b.n	8004c40 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10a      	bne.n	8004c5e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	60fb      	str	r3, [r7, #12]
    }
 8004c5a:	bf00      	nop
 8004c5c:	e7fe      	b.n	8004c5c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004c5e:	f000 ff7b 	bl	8005b58 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004c62:	4b1f      	ldr	r3, [pc, #124]	; (8004ce0 <xTaskCheckForTimeOut+0xc4>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7a:	d102      	bne.n	8004c82 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	61fb      	str	r3, [r7, #28]
 8004c80:	e026      	b.n	8004cd0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	4b17      	ldr	r3, [pc, #92]	; (8004ce4 <xTaskCheckForTimeOut+0xc8>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d00a      	beq.n	8004ca4 <xTaskCheckForTimeOut+0x88>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d305      	bcc.n	8004ca4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	e015      	b.n	8004cd0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d20b      	bcs.n	8004cc6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	1ad2      	subs	r2, r2, r3
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7ff ff98 	bl	8004bf0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	61fb      	str	r3, [r7, #28]
 8004cc4:	e004      	b.n	8004cd0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004cd0:	f000 ff72 	bl	8005bb8 <vPortExitCritical>

    return xReturn;
 8004cd4:	69fb      	ldr	r3, [r7, #28]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3720      	adds	r7, #32
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	20000254 	.word	0x20000254
 8004ce4:	20000268 	.word	0x20000268

08004ce8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004cec:	4b03      	ldr	r3, [pc, #12]	; (8004cfc <vTaskMissedYield+0x14>)
 8004cee:	2201      	movs	r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]
}
 8004cf2:	bf00      	nop
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	20000264 	.word	0x20000264

08004d00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004d08:	f000 f852 	bl	8004db0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d0c:	4b06      	ldr	r3, [pc, #24]	; (8004d28 <prvIdleTask+0x28>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d9f9      	bls.n	8004d08 <prvIdleTask+0x8>
            {
                taskYIELD();
 8004d14:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <prvIdleTask+0x2c>)
 8004d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004d24:	e7f0      	b.n	8004d08 <prvIdleTask+0x8>
 8004d26:	bf00      	nop
 8004d28:	2000017c 	.word	0x2000017c
 8004d2c:	e000ed04 	.word	0xe000ed04

08004d30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d36:	2300      	movs	r3, #0
 8004d38:	607b      	str	r3, [r7, #4]
 8004d3a:	e00c      	b.n	8004d56 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4a12      	ldr	r2, [pc, #72]	; (8004d90 <prvInitialiseTaskLists+0x60>)
 8004d48:	4413      	add	r3, r2
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fe fa88 	bl	8003260 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3301      	adds	r3, #1
 8004d54:	607b      	str	r3, [r7, #4]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	d9ef      	bls.n	8004d3c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004d5c:	480d      	ldr	r0, [pc, #52]	; (8004d94 <prvInitialiseTaskLists+0x64>)
 8004d5e:	f7fe fa7f 	bl	8003260 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004d62:	480d      	ldr	r0, [pc, #52]	; (8004d98 <prvInitialiseTaskLists+0x68>)
 8004d64:	f7fe fa7c 	bl	8003260 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004d68:	480c      	ldr	r0, [pc, #48]	; (8004d9c <prvInitialiseTaskLists+0x6c>)
 8004d6a:	f7fe fa79 	bl	8003260 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004d6e:	480c      	ldr	r0, [pc, #48]	; (8004da0 <prvInitialiseTaskLists+0x70>)
 8004d70:	f7fe fa76 	bl	8003260 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004d74:	480b      	ldr	r0, [pc, #44]	; (8004da4 <prvInitialiseTaskLists+0x74>)
 8004d76:	f7fe fa73 	bl	8003260 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004d7a:	4b0b      	ldr	r3, [pc, #44]	; (8004da8 <prvInitialiseTaskLists+0x78>)
 8004d7c:	4a05      	ldr	r2, [pc, #20]	; (8004d94 <prvInitialiseTaskLists+0x64>)
 8004d7e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d80:	4b0a      	ldr	r3, [pc, #40]	; (8004dac <prvInitialiseTaskLists+0x7c>)
 8004d82:	4a05      	ldr	r2, [pc, #20]	; (8004d98 <prvInitialiseTaskLists+0x68>)
 8004d84:	601a      	str	r2, [r3, #0]
}
 8004d86:	bf00      	nop
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	2000017c 	.word	0x2000017c
 8004d94:	200001e0 	.word	0x200001e0
 8004d98:	200001f4 	.word	0x200001f4
 8004d9c:	20000210 	.word	0x20000210
 8004da0:	20000224 	.word	0x20000224
 8004da4:	2000023c 	.word	0x2000023c
 8004da8:	20000208 	.word	0x20000208
 8004dac:	2000020c 	.word	0x2000020c

08004db0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004db6:	e019      	b.n	8004dec <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8004db8:	f000 fece 	bl	8005b58 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dbc:	4b10      	ldr	r3, [pc, #64]	; (8004e00 <prvCheckTasksWaitingTermination+0x50>)
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3304      	adds	r3, #4
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7fe faaf 	bl	800332c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8004dce:	4b0d      	ldr	r3, [pc, #52]	; (8004e04 <prvCheckTasksWaitingTermination+0x54>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	4a0b      	ldr	r2, [pc, #44]	; (8004e04 <prvCheckTasksWaitingTermination+0x54>)
 8004dd6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8004dd8:	4b0b      	ldr	r3, [pc, #44]	; (8004e08 <prvCheckTasksWaitingTermination+0x58>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	4a0a      	ldr	r2, [pc, #40]	; (8004e08 <prvCheckTasksWaitingTermination+0x58>)
 8004de0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8004de2:	f000 fee9 	bl	8005bb8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f810 	bl	8004e0c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dec:	4b06      	ldr	r3, [pc, #24]	; (8004e08 <prvCheckTasksWaitingTermination+0x58>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1e1      	bne.n	8004db8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004df4:	bf00      	nop
 8004df6:	bf00      	nop
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	20000224 	.word	0x20000224
 8004e04:	20000250 	.word	0x20000250
 8004e08:	20000238 	.word	0x20000238

08004e0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f001 f8bf 	bl	8005f9c <vPortFree>
            vPortFree( pxTCB );
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f001 f8bc 	bl	8005f9c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004e24:	bf00      	nop
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e30:	4b0a      	ldr	r3, [pc, #40]	; (8004e5c <prvResetNextTaskUnblockTime+0x30>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d104      	bne.n	8004e44 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004e3a:	4b09      	ldr	r3, [pc, #36]	; (8004e60 <prvResetNextTaskUnblockTime+0x34>)
 8004e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e40:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004e42:	e005      	b.n	8004e50 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004e44:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <prvResetNextTaskUnblockTime+0x30>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a04      	ldr	r2, [pc, #16]	; (8004e60 <prvResetNextTaskUnblockTime+0x34>)
 8004e4e:	6013      	str	r3, [r2, #0]
}
 8004e50:	bf00      	nop
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	20000208 	.word	0x20000208
 8004e60:	20000270 	.word	0x20000270

08004e64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004e6a:	4b0b      	ldr	r3, [pc, #44]	; (8004e98 <xTaskGetSchedulerState+0x34>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d102      	bne.n	8004e78 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004e72:	2301      	movs	r3, #1
 8004e74:	607b      	str	r3, [r7, #4]
 8004e76:	e008      	b.n	8004e8a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e78:	4b08      	ldr	r3, [pc, #32]	; (8004e9c <xTaskGetSchedulerState+0x38>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d102      	bne.n	8004e86 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004e80:	2302      	movs	r3, #2
 8004e82:	607b      	str	r3, [r7, #4]
 8004e84:	e001      	b.n	8004e8a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004e86:	2300      	movs	r3, #0
 8004e88:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004e8a:	687b      	ldr	r3, [r7, #4]
    }
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	2000025c 	.word	0x2000025c
 8004e9c:	20000278 	.word	0x20000278

08004ea0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004eac:	2300      	movs	r3, #0
 8004eae:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 8090 	beq.w	8004fd8 <xTaskPriorityInherit+0x138>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ebc:	4b49      	ldr	r3, [pc, #292]	; (8004fe4 <xTaskPriorityInherit+0x144>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d27f      	bcs.n	8004fc6 <xTaskPriorityInherit+0x126>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	db06      	blt.n	8004edc <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ece:	4b45      	ldr	r3, [pc, #276]	; (8004fe4 <xTaskPriorityInherit+0x144>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed4:	f1c3 0205 	rsb	r2, r3, #5
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	6959      	ldr	r1, [r3, #20]
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4a3e      	ldr	r2, [pc, #248]	; (8004fe8 <xTaskPriorityInherit+0x148>)
 8004eee:	4413      	add	r3, r2
 8004ef0:	4299      	cmp	r1, r3
 8004ef2:	d15b      	bne.n	8004fac <xTaskPriorityInherit+0x10c>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fe fa17 	bl	800332c <uxListRemove>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10a      	bne.n	8004f1a <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	2201      	movs	r2, #1
 8004f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0e:	43da      	mvns	r2, r3
 8004f10:	4b36      	ldr	r3, [pc, #216]	; (8004fec <xTaskPriorityInherit+0x14c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4013      	ands	r3, r2
 8004f16:	4a35      	ldr	r2, [pc, #212]	; (8004fec <xTaskPriorityInherit+0x14c>)
 8004f18:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004f1a:	4b32      	ldr	r3, [pc, #200]	; (8004fe4 <xTaskPriorityInherit+0x144>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f002 fd76 	bl	8007a18 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f30:	2201      	movs	r2, #1
 8004f32:	409a      	lsls	r2, r3
 8004f34:	4b2d      	ldr	r3, [pc, #180]	; (8004fec <xTaskPriorityInherit+0x14c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	4a2c      	ldr	r2, [pc, #176]	; (8004fec <xTaskPriorityInherit+0x14c>)
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f42:	4929      	ldr	r1, [pc, #164]	; (8004fe8 <xTaskPriorityInherit+0x148>)
 8004f44:	4613      	mov	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	440b      	add	r3, r1
 8004f4e:	3304      	adds	r3, #4
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	609a      	str	r2, [r3, #8]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	689a      	ldr	r2, [r3, #8]
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	60da      	str	r2, [r3, #12]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	3204      	adds	r2, #4
 8004f6a:	605a      	str	r2, [r3, #4]
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	1d1a      	adds	r2, r3, #4
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	609a      	str	r2, [r3, #8]
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f78:	4613      	mov	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4a19      	ldr	r2, [pc, #100]	; (8004fe8 <xTaskPriorityInherit+0x148>)
 8004f82:	441a      	add	r2, r3
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	615a      	str	r2, [r3, #20]
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f8c:	4916      	ldr	r1, [pc, #88]	; (8004fe8 <xTaskPriorityInherit+0x148>)
 8004f8e:	4613      	mov	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	440b      	add	r3, r1
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	1c59      	adds	r1, r3, #1
 8004f9c:	4812      	ldr	r0, [pc, #72]	; (8004fe8 <xTaskPriorityInherit+0x148>)
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4403      	add	r3, r0
 8004fa8:	6019      	str	r1, [r3, #0]
 8004faa:	e004      	b.n	8004fb6 <xTaskPriorityInherit+0x116>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004fac:	4b0d      	ldr	r3, [pc, #52]	; (8004fe4 <xTaskPriorityInherit+0x144>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4619      	mov	r1, r3
 8004fba:	2049      	movs	r0, #73	; 0x49
 8004fbc:	f002 f826 	bl	800700c <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	e008      	b.n	8004fd8 <xTaskPriorityInherit+0x138>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fca:	4b06      	ldr	r3, [pc, #24]	; (8004fe4 <xTaskPriorityInherit+0x144>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d201      	bcs.n	8004fd8 <xTaskPriorityInherit+0x138>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004fd8:	697b      	ldr	r3, [r7, #20]
    }
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000178 	.word	0x20000178
 8004fe8:	2000017c 	.word	0x2000017c
 8004fec:	20000258 	.word	0x20000258

08004ff0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b088      	sub	sp, #32
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 8095 	beq.w	8005132 <xTaskPriorityDisinherit+0x142>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005008:	4b4c      	ldr	r3, [pc, #304]	; (800513c <xTaskPriorityDisinherit+0x14c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	429a      	cmp	r2, r3
 8005010:	d00a      	beq.n	8005028 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8005012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005016:	f383 8811 	msr	BASEPRI, r3
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	613b      	str	r3, [r7, #16]
    }
 8005024:	bf00      	nop
 8005026:	e7fe      	b.n	8005026 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10a      	bne.n	8005046 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	60fb      	str	r3, [r7, #12]
    }
 8005042:	bf00      	nop
 8005044:	e7fe      	b.n	8005044 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504a:	1e5a      	subs	r2, r3, #1
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005058:	429a      	cmp	r2, r3
 800505a:	d06a      	beq.n	8005132 <xTaskPriorityDisinherit+0x142>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005060:	2b00      	cmp	r3, #0
 8005062:	d166      	bne.n	8005132 <xTaskPriorityDisinherit+0x142>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	3304      	adds	r3, #4
 8005068:	4618      	mov	r0, r3
 800506a:	f7fe f95f 	bl	800332c <uxListRemove>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10a      	bne.n	800508a <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005078:	2201      	movs	r2, #1
 800507a:	fa02 f303 	lsl.w	r3, r2, r3
 800507e:	43da      	mvns	r2, r3
 8005080:	4b2f      	ldr	r3, [pc, #188]	; (8005140 <xTaskPriorityDisinherit+0x150>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4013      	ands	r3, r2
 8005086:	4a2e      	ldr	r2, [pc, #184]	; (8005140 <xTaskPriorityDisinherit+0x150>)
 8005088:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4619      	mov	r1, r3
 800508e:	204a      	movs	r0, #74	; 0x4a
 8005090:	f001 ffbc 	bl	800700c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a0:	f1c3 0205 	rsb	r2, r3, #5
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f002 fcb4 	bl	8007a18 <SEGGER_SYSVIEW_OnTaskStartReady>
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b4:	2201      	movs	r2, #1
 80050b6:	409a      	lsls	r2, r3
 80050b8:	4b21      	ldr	r3, [pc, #132]	; (8005140 <xTaskPriorityDisinherit+0x150>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4313      	orrs	r3, r2
 80050be:	4a20      	ldr	r2, [pc, #128]	; (8005140 <xTaskPriorityDisinherit+0x150>)
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c6:	491f      	ldr	r1, [pc, #124]	; (8005144 <xTaskPriorityDisinherit+0x154>)
 80050c8:	4613      	mov	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	440b      	add	r3, r1
 80050d2:	3304      	adds	r3, #4
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	609a      	str	r2, [r3, #8]
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	689a      	ldr	r2, [r3, #8]
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	60da      	str	r2, [r3, #12]
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	3204      	adds	r2, #4
 80050ee:	605a      	str	r2, [r3, #4]
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	1d1a      	adds	r2, r3, #4
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	609a      	str	r2, [r3, #8]
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fc:	4613      	mov	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4a0f      	ldr	r2, [pc, #60]	; (8005144 <xTaskPriorityDisinherit+0x154>)
 8005106:	441a      	add	r2, r3
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	615a      	str	r2, [r3, #20]
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005110:	490c      	ldr	r1, [pc, #48]	; (8005144 <xTaskPriorityDisinherit+0x154>)
 8005112:	4613      	mov	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	440b      	add	r3, r1
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	1c59      	adds	r1, r3, #1
 8005120:	4808      	ldr	r0, [pc, #32]	; (8005144 <xTaskPriorityDisinherit+0x154>)
 8005122:	4613      	mov	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4403      	add	r3, r0
 800512c:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800512e:	2301      	movs	r3, #1
 8005130:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005132:	69fb      	ldr	r3, [r7, #28]
    }
 8005134:	4618      	mov	r0, r3
 8005136:	3720      	adds	r7, #32
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	20000178 	.word	0x20000178
 8005140:	20000258 	.word	0x20000258
 8005144:	2000017c 	.word	0x2000017c

08005148 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8005148:	b580      	push	{r7, lr}
 800514a:	b08a      	sub	sp, #40	; 0x28
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005156:	2301      	movs	r3, #1
 8005158:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 80ab 	beq.w	80052b8 <vTaskPriorityDisinheritAfterTimeout+0x170>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10a      	bne.n	8005180 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 800516a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516e:	f383 8811 	msr	BASEPRI, r3
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	613b      	str	r3, [r7, #16]
    }
 800517c:	bf00      	nop
 800517e:	e7fe      	b.n	800517e <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d902      	bls.n	8005190 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
 800518e:	e002      	b.n	8005196 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8005190:	6a3b      	ldr	r3, [r7, #32]
 8005192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005194:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519c:	429a      	cmp	r2, r3
 800519e:	f000 808b 	beq.w	80052b8 <vTaskPriorityDisinheritAfterTimeout+0x170>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a6:	69fa      	ldr	r2, [r7, #28]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	f040 8085 	bne.w	80052b8 <vTaskPriorityDisinheritAfterTimeout+0x170>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80051ae:	4b44      	ldr	r3, [pc, #272]	; (80052c0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6a3a      	ldr	r2, [r7, #32]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d10a      	bne.n	80051ce <vTaskPriorityDisinheritAfterTimeout+0x86>
        __asm volatile
 80051b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	60fb      	str	r3, [r7, #12]
    }
 80051ca:	bf00      	nop
 80051cc:	e7fe      	b.n	80051cc <vTaskPriorityDisinheritAfterTimeout+0x84>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4619      	mov	r1, r3
 80051d2:	204a      	movs	r0, #74	; 0x4a
 80051d4:	f001 ff1a 	bl	800700c <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051dc:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e2:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	db04      	blt.n	80051f6 <vTaskPriorityDisinheritAfterTimeout+0xae>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	f1c3 0205 	rsb	r2, r3, #5
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	6959      	ldr	r1, [r3, #20]
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4613      	mov	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4a2f      	ldr	r2, [pc, #188]	; (80052c4 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8005206:	4413      	add	r3, r2
 8005208:	4299      	cmp	r1, r3
 800520a:	d155      	bne.n	80052b8 <vTaskPriorityDisinheritAfterTimeout+0x170>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	3304      	adds	r3, #4
 8005210:	4618      	mov	r0, r3
 8005212:	f7fe f88b 	bl	800332c <uxListRemove>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10a      	bne.n	8005232 <vTaskPriorityDisinheritAfterTimeout+0xea>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005220:	2201      	movs	r2, #1
 8005222:	fa02 f303 	lsl.w	r3, r2, r3
 8005226:	43da      	mvns	r2, r3
 8005228:	4b27      	ldr	r3, [pc, #156]	; (80052c8 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4013      	ands	r3, r2
 800522e:	4a26      	ldr	r2, [pc, #152]	; (80052c8 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8005230:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	4618      	mov	r0, r3
 8005236:	f002 fbef 	bl	8007a18 <SEGGER_SYSVIEW_OnTaskStartReady>
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	2201      	movs	r2, #1
 8005240:	409a      	lsls	r2, r3
 8005242:	4b21      	ldr	r3, [pc, #132]	; (80052c8 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4313      	orrs	r3, r2
 8005248:	4a1f      	ldr	r2, [pc, #124]	; (80052c8 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005250:	491c      	ldr	r1, [pc, #112]	; (80052c4 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8005252:	4613      	mov	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	440b      	add	r3, r1
 800525c:	3304      	adds	r3, #4
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	617b      	str	r3, [r7, #20]
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	609a      	str	r2, [r3, #8]
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	60da      	str	r2, [r3, #12]
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	6a3a      	ldr	r2, [r7, #32]
 8005276:	3204      	adds	r2, #4
 8005278:	605a      	str	r2, [r3, #4]
 800527a:	6a3b      	ldr	r3, [r7, #32]
 800527c:	1d1a      	adds	r2, r3, #4
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	609a      	str	r2, [r3, #8]
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005286:	4613      	mov	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4a0d      	ldr	r2, [pc, #52]	; (80052c4 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8005290:	441a      	add	r2, r3
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	615a      	str	r2, [r3, #20]
 8005296:	6a3b      	ldr	r3, [r7, #32]
 8005298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800529a:	490a      	ldr	r1, [pc, #40]	; (80052c4 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 800529c:	4613      	mov	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	440b      	add	r3, r1
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	1c59      	adds	r1, r3, #1
 80052aa:	4806      	ldr	r0, [pc, #24]	; (80052c4 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 80052ac:	4613      	mov	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4403      	add	r3, r0
 80052b6:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80052b8:	bf00      	nop
 80052ba:	3728      	adds	r7, #40	; 0x28
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	20000178 	.word	0x20000178
 80052c4:	2000017c 	.word	0x2000017c
 80052c8:	20000258 	.word	0x20000258

080052cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80052d0:	4b07      	ldr	r3, [pc, #28]	; (80052f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d004      	beq.n	80052e2 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80052d8:	4b05      	ldr	r3, [pc, #20]	; (80052f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052de:	3201      	adds	r2, #1
 80052e0:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 80052e2:	4b03      	ldr	r3, [pc, #12]	; (80052f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80052e4:	681b      	ldr	r3, [r3, #0]
    }
 80052e6:	4618      	mov	r0, r3
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	20000178 	.word	0x20000178

080052f4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80052fe:	4b36      	ldr	r3, [pc, #216]	; (80053d8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005304:	4b35      	ldr	r3, [pc, #212]	; (80053dc <prvAddCurrentTaskToDelayedList+0xe8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3304      	adds	r3, #4
 800530a:	4618      	mov	r0, r3
 800530c:	f7fe f80e 	bl	800332c <uxListRemove>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10b      	bne.n	800532e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005316:	4b31      	ldr	r3, [pc, #196]	; (80053dc <prvAddCurrentTaskToDelayedList+0xe8>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531c:	2201      	movs	r2, #1
 800531e:	fa02 f303 	lsl.w	r3, r2, r3
 8005322:	43da      	mvns	r2, r3
 8005324:	4b2e      	ldr	r3, [pc, #184]	; (80053e0 <prvAddCurrentTaskToDelayedList+0xec>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4013      	ands	r3, r2
 800532a:	4a2d      	ldr	r2, [pc, #180]	; (80053e0 <prvAddCurrentTaskToDelayedList+0xec>)
 800532c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005334:	d124      	bne.n	8005380 <prvAddCurrentTaskToDelayedList+0x8c>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d021      	beq.n	8005380 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800533c:	4b29      	ldr	r3, [pc, #164]	; (80053e4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	4b26      	ldr	r3, [pc, #152]	; (80053dc <prvAddCurrentTaskToDelayedList+0xe8>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	609a      	str	r2, [r3, #8]
 800534a:	4b24      	ldr	r3, [pc, #144]	; (80053dc <prvAddCurrentTaskToDelayedList+0xe8>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	6892      	ldr	r2, [r2, #8]
 8005352:	60da      	str	r2, [r3, #12]
 8005354:	4b21      	ldr	r3, [pc, #132]	; (80053dc <prvAddCurrentTaskToDelayedList+0xe8>)
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	3204      	adds	r2, #4
 800535e:	605a      	str	r2, [r3, #4]
 8005360:	4b1e      	ldr	r3, [pc, #120]	; (80053dc <prvAddCurrentTaskToDelayedList+0xe8>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	1d1a      	adds	r2, r3, #4
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	609a      	str	r2, [r3, #8]
 800536a:	4b1c      	ldr	r3, [pc, #112]	; (80053dc <prvAddCurrentTaskToDelayedList+0xe8>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a1d      	ldr	r2, [pc, #116]	; (80053e4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005370:	615a      	str	r2, [r3, #20]
 8005372:	4b1c      	ldr	r3, [pc, #112]	; (80053e4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3301      	adds	r3, #1
 8005378:	4a1a      	ldr	r2, [pc, #104]	; (80053e4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800537e:	e026      	b.n	80053ce <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4413      	add	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005388:	4b14      	ldr	r3, [pc, #80]	; (80053dc <prvAddCurrentTaskToDelayedList+0xe8>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	429a      	cmp	r2, r3
 8005396:	d209      	bcs.n	80053ac <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005398:	4b13      	ldr	r3, [pc, #76]	; (80053e8 <prvAddCurrentTaskToDelayedList+0xf4>)
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	4b0f      	ldr	r3, [pc, #60]	; (80053dc <prvAddCurrentTaskToDelayedList+0xe8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3304      	adds	r3, #4
 80053a2:	4619      	mov	r1, r3
 80053a4:	4610      	mov	r0, r2
 80053a6:	f7fd ff88 	bl	80032ba <vListInsert>
}
 80053aa:	e010      	b.n	80053ce <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053ac:	4b0f      	ldr	r3, [pc, #60]	; (80053ec <prvAddCurrentTaskToDelayedList+0xf8>)
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	4b0a      	ldr	r3, [pc, #40]	; (80053dc <prvAddCurrentTaskToDelayedList+0xe8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	3304      	adds	r3, #4
 80053b6:	4619      	mov	r1, r3
 80053b8:	4610      	mov	r0, r2
 80053ba:	f7fd ff7e 	bl	80032ba <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80053be:	4b0c      	ldr	r3, [pc, #48]	; (80053f0 <prvAddCurrentTaskToDelayedList+0xfc>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d202      	bcs.n	80053ce <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80053c8:	4a09      	ldr	r2, [pc, #36]	; (80053f0 <prvAddCurrentTaskToDelayedList+0xfc>)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6013      	str	r3, [r2, #0]
}
 80053ce:	bf00      	nop
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	20000254 	.word	0x20000254
 80053dc:	20000178 	.word	0x20000178
 80053e0:	20000258 	.word	0x20000258
 80053e4:	2000023c 	.word	0x2000023c
 80053e8:	2000020c 	.word	0x2000020c
 80053ec:	20000208 	.word	0x20000208
 80053f0:	20000270 	.word	0x20000270

080053f4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80053fa:	2300      	movs	r3, #0
 80053fc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80053fe:	f000 fa47 	bl	8005890 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005402:	4b11      	ldr	r3, [pc, #68]	; (8005448 <xTimerCreateTimerTask+0x54>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00b      	beq.n	8005422 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800540a:	4b10      	ldr	r3, [pc, #64]	; (800544c <xTimerCreateTimerTask+0x58>)
 800540c:	9301      	str	r3, [sp, #4]
 800540e:	2302      	movs	r3, #2
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	2300      	movs	r3, #0
 8005414:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005418:	490d      	ldr	r1, [pc, #52]	; (8005450 <xTimerCreateTimerTask+0x5c>)
 800541a:	480e      	ldr	r0, [pc, #56]	; (8005454 <xTimerCreateTimerTask+0x60>)
 800541c:	f7fe fdce 	bl	8003fbc <xTaskCreate>
 8005420:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10a      	bne.n	800543e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	603b      	str	r3, [r7, #0]
    }
 800543a:	bf00      	nop
 800543c:	e7fe      	b.n	800543c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800543e:	687b      	ldr	r3, [r7, #4]
    }
 8005440:	4618      	mov	r0, r3
 8005442:	3708      	adds	r7, #8
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	200002ac 	.word	0x200002ac
 800544c:	200002b0 	.word	0x200002b0
 8005450:	0800925c 	.word	0x0800925c
 8005454:	080054fd 	.word	0x080054fd

08005458 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005464:	e008      	b.n	8005478 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	4413      	add	r3, r2
 800546e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	699a      	ldr	r2, [r3, #24]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	18d1      	adds	r1, r2, r3
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 f8dd 	bl	8005644 <prvInsertTimerInActiveList>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1ea      	bne.n	8005466 <prvReloadTimer+0xe>
        }
    }
 8005490:	bf00      	nop
 8005492:	bf00      	nop
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054a6:	4b14      	ldr	r3, [pc, #80]	; (80054f8 <prvProcessExpiredTimer+0x5c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	3304      	adds	r3, #4
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7fd ff39 	bl	800332c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d005      	beq.n	80054d4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f7ff ffc3 	bl	8005458 <prvReloadTimer>
 80054d2:	e008      	b.n	80054e6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054da:	f023 0301 	bic.w	r3, r3, #1
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	4798      	blx	r3
    }
 80054ee:	bf00      	nop
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	200002a4 	.word	0x200002a4

080054fc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005504:	f107 0308 	add.w	r3, r7, #8
 8005508:	4618      	mov	r0, r3
 800550a:	f000 f857 	bl	80055bc <prvGetNextExpireTime>
 800550e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	4619      	mov	r1, r3
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 f803 	bl	8005520 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800551a:	f000 f8d5 	bl	80056c8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800551e:	e7f1      	b.n	8005504 <prvTimerTask+0x8>

08005520 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800552a:	f7fe ff69 	bl	8004400 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800552e:	f107 0308 	add.w	r3, r7, #8
 8005532:	4618      	mov	r0, r3
 8005534:	f000 f866 	bl	8005604 <prvSampleTimeNow>
 8005538:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d130      	bne.n	80055a2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10a      	bne.n	800555c <prvProcessTimerOrBlockTask+0x3c>
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	429a      	cmp	r2, r3
 800554c:	d806      	bhi.n	800555c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800554e:	f7fe ff65 	bl	800441c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005552:	68f9      	ldr	r1, [r7, #12]
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f7ff ffa1 	bl	800549c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800555a:	e024      	b.n	80055a6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d008      	beq.n	8005574 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005562:	4b13      	ldr	r3, [pc, #76]	; (80055b0 <prvProcessTimerOrBlockTask+0x90>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <prvProcessTimerOrBlockTask+0x50>
 800556c:	2301      	movs	r3, #1
 800556e:	e000      	b.n	8005572 <prvProcessTimerOrBlockTask+0x52>
 8005570:	2300      	movs	r3, #0
 8005572:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005574:	4b0f      	ldr	r3, [pc, #60]	; (80055b4 <prvProcessTimerOrBlockTask+0x94>)
 8005576:	6818      	ldr	r0, [r3, #0]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	4619      	mov	r1, r3
 8005582:	f7fe fce7 	bl	8003f54 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005586:	f7fe ff49 	bl	800441c <xTaskResumeAll>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10a      	bne.n	80055a6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005590:	4b09      	ldr	r3, [pc, #36]	; (80055b8 <prvProcessTimerOrBlockTask+0x98>)
 8005592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	f3bf 8f6f 	isb	sy
    }
 80055a0:	e001      	b.n	80055a6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80055a2:	f7fe ff3b 	bl	800441c <xTaskResumeAll>
    }
 80055a6:	bf00      	nop
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	200002a8 	.word	0x200002a8
 80055b4:	200002ac 	.word	0x200002ac
 80055b8:	e000ed04 	.word	0xe000ed04

080055bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80055c4:	4b0e      	ldr	r3, [pc, #56]	; (8005600 <prvGetNextExpireTime+0x44>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <prvGetNextExpireTime+0x16>
 80055ce:	2201      	movs	r2, #1
 80055d0:	e000      	b.n	80055d4 <prvGetNextExpireTime+0x18>
 80055d2:	2200      	movs	r2, #0
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d105      	bne.n	80055ec <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055e0:	4b07      	ldr	r3, [pc, #28]	; (8005600 <prvGetNextExpireTime+0x44>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	e001      	b.n	80055f0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80055f0:	68fb      	ldr	r3, [r7, #12]
    }
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	200002a4 	.word	0x200002a4

08005604 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800560c:	f7ff f806 	bl	800461c <xTaskGetTickCount>
 8005610:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005612:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <prvSampleTimeNow+0x3c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	429a      	cmp	r2, r3
 800561a:	d205      	bcs.n	8005628 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800561c:	f000 f912 	bl	8005844 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	e002      	b.n	800562e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800562e:	4a04      	ldr	r2, [pc, #16]	; (8005640 <prvSampleTimeNow+0x3c>)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005634:	68fb      	ldr	r3, [r7, #12]
    }
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	200002b4 	.word	0x200002b4

08005644 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	429a      	cmp	r2, r3
 8005668:	d812      	bhi.n	8005690 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	1ad2      	subs	r2, r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	429a      	cmp	r2, r3
 8005676:	d302      	bcc.n	800567e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005678:	2301      	movs	r3, #1
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	e01b      	b.n	80056b6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800567e:	4b10      	ldr	r3, [pc, #64]	; (80056c0 <prvInsertTimerInActiveList+0x7c>)
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	3304      	adds	r3, #4
 8005686:	4619      	mov	r1, r3
 8005688:	4610      	mov	r0, r2
 800568a:	f7fd fe16 	bl	80032ba <vListInsert>
 800568e:	e012      	b.n	80056b6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	429a      	cmp	r2, r3
 8005696:	d206      	bcs.n	80056a6 <prvInsertTimerInActiveList+0x62>
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	429a      	cmp	r2, r3
 800569e:	d302      	bcc.n	80056a6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80056a0:	2301      	movs	r3, #1
 80056a2:	617b      	str	r3, [r7, #20]
 80056a4:	e007      	b.n	80056b6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056a6:	4b07      	ldr	r3, [pc, #28]	; (80056c4 <prvInsertTimerInActiveList+0x80>)
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	3304      	adds	r3, #4
 80056ae:	4619      	mov	r1, r3
 80056b0:	4610      	mov	r0, r2
 80056b2:	f7fd fe02 	bl	80032ba <vListInsert>
            }
        }

        return xProcessTimerNow;
 80056b6:	697b      	ldr	r3, [r7, #20]
    }
 80056b8:	4618      	mov	r0, r3
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	200002a8 	.word	0x200002a8
 80056c4:	200002a4 	.word	0x200002a4

080056c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b088      	sub	sp, #32
 80056cc:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056ce:	e0a6      	b.n	800581e <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f2c0 80a2 	blt.w	800581c <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d004      	beq.n	80056ee <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	3304      	adds	r3, #4
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7fd fe1f 	bl	800332c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056ee:	1d3b      	adds	r3, r7, #4
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7ff ff87 	bl	8005604 <prvSampleTimeNow>
 80056f6:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	3b01      	subs	r3, #1
 80056fc:	2b08      	cmp	r3, #8
 80056fe:	f200 808e 	bhi.w	800581e <prvProcessReceivedCommands+0x156>
 8005702:	a201      	add	r2, pc, #4	; (adr r2, 8005708 <prvProcessReceivedCommands+0x40>)
 8005704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005708:	0800572d 	.word	0x0800572d
 800570c:	0800572d 	.word	0x0800572d
 8005710:	08005795 	.word	0x08005795
 8005714:	080057a9 	.word	0x080057a9
 8005718:	080057f3 	.word	0x080057f3
 800571c:	0800572d 	.word	0x0800572d
 8005720:	0800572d 	.word	0x0800572d
 8005724:	08005795 	.word	0x08005795
 8005728:	080057a9 	.word	0x080057a9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005732:	f043 0301 	orr.w	r3, r3, #1
 8005736:	b2da      	uxtb	r2, r3
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	18d1      	adds	r1, r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	69f8      	ldr	r0, [r7, #28]
 800574c:	f7ff ff7a 	bl	8005644 <prvInsertTimerInActiveList>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d063      	beq.n	800581e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	2b00      	cmp	r3, #0
 8005762:	d009      	beq.n	8005778 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	4413      	add	r3, r2
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	4619      	mov	r1, r3
 8005770:	69f8      	ldr	r0, [r7, #28]
 8005772:	f7ff fe71 	bl	8005458 <prvReloadTimer>
 8005776:	e008      	b.n	800578a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800577e:	f023 0301 	bic.w	r3, r3, #1
 8005782:	b2da      	uxtb	r2, r3
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	69f8      	ldr	r0, [r7, #28]
 8005790:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8005792:	e044      	b.n	800581e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800579a:	f023 0301 	bic.w	r3, r3, #1
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80057a6:	e03a      	b.n	800581e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057ae:	f043 0301 	orr.w	r3, r3, #1
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10a      	bne.n	80057de <prvProcessReceivedCommands+0x116>
        __asm volatile
 80057c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057cc:	f383 8811 	msr	BASEPRI, r3
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	617b      	str	r3, [r7, #20]
    }
 80057da:	bf00      	nop
 80057dc:	e7fe      	b.n	80057dc <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	699a      	ldr	r2, [r3, #24]
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	18d1      	adds	r1, r2, r3
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	69f8      	ldr	r0, [r7, #28]
 80057ec:	f7ff ff2a 	bl	8005644 <prvInsertTimerInActiveList>
                        break;
 80057f0:	e015      	b.n	800581e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d103      	bne.n	8005808 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8005800:	69f8      	ldr	r0, [r7, #28]
 8005802:	f000 fbcb 	bl	8005f9c <vPortFree>
 8005806:	e00a      	b.n	800581e <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800580e:	f023 0301 	bic.w	r3, r3, #1
 8005812:	b2da      	uxtb	r2, r3
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800581a:	e000      	b.n	800581e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800581c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800581e:	4b08      	ldr	r3, [pc, #32]	; (8005840 <prvProcessReceivedCommands+0x178>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f107 0108 	add.w	r1, r7, #8
 8005826:	2200      	movs	r2, #0
 8005828:	4618      	mov	r0, r3
 800582a:	f7fd ffd7 	bl	80037dc <xQueueReceive>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	f47f af4d 	bne.w	80056d0 <prvProcessReceivedCommands+0x8>
        }
    }
 8005836:	bf00      	nop
 8005838:	bf00      	nop
 800583a:	3720      	adds	r7, #32
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	200002ac 	.word	0x200002ac

08005844 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800584a:	e009      	b.n	8005860 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800584c:	4b0e      	ldr	r3, [pc, #56]	; (8005888 <prvSwitchTimerLists+0x44>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8005856:	f04f 31ff 	mov.w	r1, #4294967295
 800585a:	6838      	ldr	r0, [r7, #0]
 800585c:	f7ff fe1e 	bl	800549c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005860:	4b09      	ldr	r3, [pc, #36]	; (8005888 <prvSwitchTimerLists+0x44>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f0      	bne.n	800584c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800586a:	4b07      	ldr	r3, [pc, #28]	; (8005888 <prvSwitchTimerLists+0x44>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8005870:	4b06      	ldr	r3, [pc, #24]	; (800588c <prvSwitchTimerLists+0x48>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a04      	ldr	r2, [pc, #16]	; (8005888 <prvSwitchTimerLists+0x44>)
 8005876:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005878:	4a04      	ldr	r2, [pc, #16]	; (800588c <prvSwitchTimerLists+0x48>)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6013      	str	r3, [r2, #0]
    }
 800587e:	bf00      	nop
 8005880:	3708      	adds	r7, #8
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	200002a4 	.word	0x200002a4
 800588c:	200002a8 	.word	0x200002a8

08005890 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005890:	b580      	push	{r7, lr}
 8005892:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005894:	f000 f960 	bl	8005b58 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005898:	4b12      	ldr	r3, [pc, #72]	; (80058e4 <prvCheckForValidListAndQueue+0x54>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d11d      	bne.n	80058dc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80058a0:	4811      	ldr	r0, [pc, #68]	; (80058e8 <prvCheckForValidListAndQueue+0x58>)
 80058a2:	f7fd fcdd 	bl	8003260 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80058a6:	4811      	ldr	r0, [pc, #68]	; (80058ec <prvCheckForValidListAndQueue+0x5c>)
 80058a8:	f7fd fcda 	bl	8003260 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80058ac:	4b10      	ldr	r3, [pc, #64]	; (80058f0 <prvCheckForValidListAndQueue+0x60>)
 80058ae:	4a0e      	ldr	r2, [pc, #56]	; (80058e8 <prvCheckForValidListAndQueue+0x58>)
 80058b0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80058b2:	4b10      	ldr	r3, [pc, #64]	; (80058f4 <prvCheckForValidListAndQueue+0x64>)
 80058b4:	4a0d      	ldr	r2, [pc, #52]	; (80058ec <prvCheckForValidListAndQueue+0x5c>)
 80058b6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80058b8:	2200      	movs	r2, #0
 80058ba:	210c      	movs	r1, #12
 80058bc:	200a      	movs	r0, #10
 80058be:	f7fd fdef 	bl	80034a0 <xQueueGenericCreate>
 80058c2:	4603      	mov	r3, r0
 80058c4:	4a07      	ldr	r2, [pc, #28]	; (80058e4 <prvCheckForValidListAndQueue+0x54>)
 80058c6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80058c8:	4b06      	ldr	r3, [pc, #24]	; (80058e4 <prvCheckForValidListAndQueue+0x54>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d005      	beq.n	80058dc <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80058d0:	4b04      	ldr	r3, [pc, #16]	; (80058e4 <prvCheckForValidListAndQueue+0x54>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4908      	ldr	r1, [pc, #32]	; (80058f8 <prvCheckForValidListAndQueue+0x68>)
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fe fae6 	bl	8003ea8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80058dc:	f000 f96c 	bl	8005bb8 <vPortExitCritical>
    }
 80058e0:	bf00      	nop
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	200002ac 	.word	0x200002ac
 80058e8:	2000027c 	.word	0x2000027c
 80058ec:	20000290 	.word	0x20000290
 80058f0:	200002a4 	.word	0x200002a4
 80058f4:	200002a8 	.word	0x200002a8
 80058f8:	08009264 	.word	0x08009264

080058fc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	3b04      	subs	r3, #4
 800590c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005914:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	3b04      	subs	r3, #4
 800591a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f023 0201 	bic.w	r2, r3, #1
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	3b04      	subs	r3, #4
 800592a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800592c:	4a0c      	ldr	r2, [pc, #48]	; (8005960 <pxPortInitialiseStack+0x64>)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3b14      	subs	r3, #20
 8005936:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	3b04      	subs	r3, #4
 8005942:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f06f 0202 	mvn.w	r2, #2
 800594a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	3b20      	subs	r3, #32
 8005950:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005952:	68fb      	ldr	r3, [r7, #12]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	08005965 	.word	0x08005965

08005964 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800596a:	2300      	movs	r3, #0
 800596c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800596e:	4b12      	ldr	r3, [pc, #72]	; (80059b8 <prvTaskExitError+0x54>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005976:	d00a      	beq.n	800598e <prvTaskExitError+0x2a>
        __asm volatile
 8005978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597c:	f383 8811 	msr	BASEPRI, r3
 8005980:	f3bf 8f6f 	isb	sy
 8005984:	f3bf 8f4f 	dsb	sy
 8005988:	60fb      	str	r3, [r7, #12]
    }
 800598a:	bf00      	nop
 800598c:	e7fe      	b.n	800598c <prvTaskExitError+0x28>
        __asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	60bb      	str	r3, [r7, #8]
    }
 80059a0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80059a2:	bf00      	nop
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d0fc      	beq.n	80059a4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80059aa:	bf00      	nop
 80059ac:	bf00      	nop
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	20000010 	.word	0x20000010
 80059bc:	00000000 	.word	0x00000000

080059c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80059c0:	4b07      	ldr	r3, [pc, #28]	; (80059e0 <pxCurrentTCBConst2>)
 80059c2:	6819      	ldr	r1, [r3, #0]
 80059c4:	6808      	ldr	r0, [r1, #0]
 80059c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ca:	f380 8809 	msr	PSP, r0
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f04f 0000 	mov.w	r0, #0
 80059d6:	f380 8811 	msr	BASEPRI, r0
 80059da:	4770      	bx	lr
 80059dc:	f3af 8000 	nop.w

080059e0 <pxCurrentTCBConst2>:
 80059e0:	20000178 	.word	0x20000178
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80059e4:	bf00      	nop
 80059e6:	bf00      	nop

080059e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80059e8:	4808      	ldr	r0, [pc, #32]	; (8005a0c <prvPortStartFirstTask+0x24>)
 80059ea:	6800      	ldr	r0, [r0, #0]
 80059ec:	6800      	ldr	r0, [r0, #0]
 80059ee:	f380 8808 	msr	MSP, r0
 80059f2:	f04f 0000 	mov.w	r0, #0
 80059f6:	f380 8814 	msr	CONTROL, r0
 80059fa:	b662      	cpsie	i
 80059fc:	b661      	cpsie	f
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	df00      	svc	0
 8005a08:	bf00      	nop
 8005a0a:	0000      	.short	0x0000
 8005a0c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005a10:	bf00      	nop
 8005a12:	bf00      	nop

08005a14 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a1a:	4b46      	ldr	r3, [pc, #280]	; (8005b34 <xPortStartScheduler+0x120>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a46      	ldr	r2, [pc, #280]	; (8005b38 <xPortStartScheduler+0x124>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d10a      	bne.n	8005a3a <xPortStartScheduler+0x26>
        __asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	613b      	str	r3, [r7, #16]
    }
 8005a36:	bf00      	nop
 8005a38:	e7fe      	b.n	8005a38 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a3a:	4b3e      	ldr	r3, [pc, #248]	; (8005b34 <xPortStartScheduler+0x120>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a3f      	ldr	r2, [pc, #252]	; (8005b3c <xPortStartScheduler+0x128>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d10a      	bne.n	8005a5a <xPortStartScheduler+0x46>
        __asm volatile
 8005a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	60fb      	str	r3, [r7, #12]
    }
 8005a56:	bf00      	nop
 8005a58:	e7fe      	b.n	8005a58 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a5a:	4b39      	ldr	r3, [pc, #228]	; (8005b40 <xPortStartScheduler+0x12c>)
 8005a5c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	22ff      	movs	r2, #255	; 0xff
 8005a6a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a74:	78fb      	ldrb	r3, [r7, #3]
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	4b31      	ldr	r3, [pc, #196]	; (8005b44 <xPortStartScheduler+0x130>)
 8005a80:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a82:	4b31      	ldr	r3, [pc, #196]	; (8005b48 <xPortStartScheduler+0x134>)
 8005a84:	2207      	movs	r2, #7
 8005a86:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a88:	e009      	b.n	8005a9e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8005a8a:	4b2f      	ldr	r3, [pc, #188]	; (8005b48 <xPortStartScheduler+0x134>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	4a2d      	ldr	r2, [pc, #180]	; (8005b48 <xPortStartScheduler+0x134>)
 8005a92:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a9e:	78fb      	ldrb	r3, [r7, #3]
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa6:	2b80      	cmp	r3, #128	; 0x80
 8005aa8:	d0ef      	beq.n	8005a8a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005aaa:	4b27      	ldr	r3, [pc, #156]	; (8005b48 <xPortStartScheduler+0x134>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f1c3 0307 	rsb	r3, r3, #7
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d00a      	beq.n	8005acc <xPortStartScheduler+0xb8>
        __asm volatile
 8005ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	60bb      	str	r3, [r7, #8]
    }
 8005ac8:	bf00      	nop
 8005aca:	e7fe      	b.n	8005aca <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005acc:	4b1e      	ldr	r3, [pc, #120]	; (8005b48 <xPortStartScheduler+0x134>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	021b      	lsls	r3, r3, #8
 8005ad2:	4a1d      	ldr	r2, [pc, #116]	; (8005b48 <xPortStartScheduler+0x134>)
 8005ad4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ad6:	4b1c      	ldr	r3, [pc, #112]	; (8005b48 <xPortStartScheduler+0x134>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ade:	4a1a      	ldr	r2, [pc, #104]	; (8005b48 <xPortStartScheduler+0x134>)
 8005ae0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005aea:	4b18      	ldr	r3, [pc, #96]	; (8005b4c <xPortStartScheduler+0x138>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a17      	ldr	r2, [pc, #92]	; (8005b4c <xPortStartScheduler+0x138>)
 8005af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005af4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005af6:	4b15      	ldr	r3, [pc, #84]	; (8005b4c <xPortStartScheduler+0x138>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a14      	ldr	r2, [pc, #80]	; (8005b4c <xPortStartScheduler+0x138>)
 8005afc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b00:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005b02:	f000 f8db 	bl	8005cbc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005b06:	4b12      	ldr	r3, [pc, #72]	; (8005b50 <xPortStartScheduler+0x13c>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005b0c:	f000 f8fa 	bl	8005d04 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b10:	4b10      	ldr	r3, [pc, #64]	; (8005b54 <xPortStartScheduler+0x140>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a0f      	ldr	r2, [pc, #60]	; (8005b54 <xPortStartScheduler+0x140>)
 8005b16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005b1a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005b1c:	f7ff ff64 	bl	80059e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005b20:	f7fe feb8 	bl	8004894 <vTaskSwitchContext>
    prvTaskExitError();
 8005b24:	f7ff ff1e 	bl	8005964 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	e000ed00 	.word	0xe000ed00
 8005b38:	410fc271 	.word	0x410fc271
 8005b3c:	410fc270 	.word	0x410fc270
 8005b40:	e000e400 	.word	0xe000e400
 8005b44:	200002b8 	.word	0x200002b8
 8005b48:	200002bc 	.word	0x200002bc
 8005b4c:	e000ed20 	.word	0xe000ed20
 8005b50:	20000010 	.word	0x20000010
 8005b54:	e000ef34 	.word	0xe000ef34

08005b58 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
        __asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	607b      	str	r3, [r7, #4]
    }
 8005b70:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005b72:	4b0f      	ldr	r3, [pc, #60]	; (8005bb0 <vPortEnterCritical+0x58>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3301      	adds	r3, #1
 8005b78:	4a0d      	ldr	r2, [pc, #52]	; (8005bb0 <vPortEnterCritical+0x58>)
 8005b7a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005b7c:	4b0c      	ldr	r3, [pc, #48]	; (8005bb0 <vPortEnterCritical+0x58>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d10f      	bne.n	8005ba4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b84:	4b0b      	ldr	r3, [pc, #44]	; (8005bb4 <vPortEnterCritical+0x5c>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <vPortEnterCritical+0x4c>
        __asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	603b      	str	r3, [r7, #0]
    }
 8005ba0:	bf00      	nop
 8005ba2:	e7fe      	b.n	8005ba2 <vPortEnterCritical+0x4a>
    }
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	20000010 	.word	0x20000010
 8005bb4:	e000ed04 	.word	0xe000ed04

08005bb8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005bbe:	4b12      	ldr	r3, [pc, #72]	; (8005c08 <vPortExitCritical+0x50>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10a      	bne.n	8005bdc <vPortExitCritical+0x24>
        __asm volatile
 8005bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	607b      	str	r3, [r7, #4]
    }
 8005bd8:	bf00      	nop
 8005bda:	e7fe      	b.n	8005bda <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005bdc:	4b0a      	ldr	r3, [pc, #40]	; (8005c08 <vPortExitCritical+0x50>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3b01      	subs	r3, #1
 8005be2:	4a09      	ldr	r2, [pc, #36]	; (8005c08 <vPortExitCritical+0x50>)
 8005be4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005be6:	4b08      	ldr	r3, [pc, #32]	; (8005c08 <vPortExitCritical+0x50>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d105      	bne.n	8005bfa <vPortExitCritical+0x42>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005bf8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	20000010 	.word	0x20000010
 8005c0c:	00000000 	.word	0x00000000

08005c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005c10:	f3ef 8009 	mrs	r0, PSP
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	4b15      	ldr	r3, [pc, #84]	; (8005c70 <pxCurrentTCBConst>)
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	f01e 0f10 	tst.w	lr, #16
 8005c20:	bf08      	it	eq
 8005c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c2a:	6010      	str	r0, [r2, #0]
 8005c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c34:	f380 8811 	msr	BASEPRI, r0
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f7fe fe28 	bl	8004894 <vTaskSwitchContext>
 8005c44:	f04f 0000 	mov.w	r0, #0
 8005c48:	f380 8811 	msr	BASEPRI, r0
 8005c4c:	bc09      	pop	{r0, r3}
 8005c4e:	6819      	ldr	r1, [r3, #0]
 8005c50:	6808      	ldr	r0, [r1, #0]
 8005c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c56:	f01e 0f10 	tst.w	lr, #16
 8005c5a:	bf08      	it	eq
 8005c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c60:	f380 8809 	msr	PSP, r0
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	f3af 8000 	nop.w

08005c70 <pxCurrentTCBConst>:
 8005c70:	20000178 	.word	0x20000178
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005c74:	bf00      	nop
 8005c76:	bf00      	nop

08005c78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
        __asm volatile
 8005c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	607b      	str	r3, [r7, #4]
    }
 8005c90:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005c92:	f7fe fce5 	bl	8004660 <xTaskIncrementTick>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d003      	beq.n	8005ca4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c9c:	4b06      	ldr	r3, [pc, #24]	; (8005cb8 <SysTick_Handler+0x40>)
 8005c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	f383 8811 	msr	BASEPRI, r3
    }
 8005cae:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8005cb0:	bf00      	nop
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	e000ed04 	.word	0xe000ed04

08005cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005cc0:	4b0b      	ldr	r3, [pc, #44]	; (8005cf0 <vPortSetupTimerInterrupt+0x34>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005cc6:	4b0b      	ldr	r3, [pc, #44]	; (8005cf4 <vPortSetupTimerInterrupt+0x38>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ccc:	4b0a      	ldr	r3, [pc, #40]	; (8005cf8 <vPortSetupTimerInterrupt+0x3c>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a0a      	ldr	r2, [pc, #40]	; (8005cfc <vPortSetupTimerInterrupt+0x40>)
 8005cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd6:	099b      	lsrs	r3, r3, #6
 8005cd8:	4a09      	ldr	r2, [pc, #36]	; (8005d00 <vPortSetupTimerInterrupt+0x44>)
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005cde:	4b04      	ldr	r3, [pc, #16]	; (8005cf0 <vPortSetupTimerInterrupt+0x34>)
 8005ce0:	2207      	movs	r2, #7
 8005ce2:	601a      	str	r2, [r3, #0]
}
 8005ce4:	bf00      	nop
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	e000e010 	.word	0xe000e010
 8005cf4:	e000e018 	.word	0xe000e018
 8005cf8:	20000000 	.word	0x20000000
 8005cfc:	10624dd3 	.word	0x10624dd3
 8005d00:	e000e014 	.word	0xe000e014

08005d04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005d04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005d14 <vPortEnableVFP+0x10>
 8005d08:	6801      	ldr	r1, [r0, #0]
 8005d0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005d0e:	6001      	str	r1, [r0, #0]
 8005d10:	4770      	bx	lr
 8005d12:	0000      	.short	0x0000
 8005d14:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005d18:	bf00      	nop
 8005d1a:	bf00      	nop

08005d1c <vSetVarulMaxPRIGROUPValue>:
/*-----------------------------------------------------------*/
/////////
#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue( void )
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d22:	4b1f      	ldr	r3, [pc, #124]	; (8005da0 <vSetVarulMaxPRIGROUPValue+0x84>)
 8005d24:	60fb      	str	r3, [r7, #12]
	volatile uint8_t ucMaxPriorityValue;
	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	22ff      	movs	r2, #255	; 0xff
 8005d2a:	701a      	strb	r2, [r3, #0]
	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	71fb      	strb	r3, [r7, #7]
	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d34:	4b1b      	ldr	r3, [pc, #108]	; (8005da4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8005d36:	2207      	movs	r2, #7
 8005d38:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d3a:	e009      	b.n	8005d50 <vSetVarulMaxPRIGROUPValue+0x34>
	{
		ulMaxPRIGROUPValue--;
 8005d3c:	4b19      	ldr	r3, [pc, #100]	; (8005da4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3b01      	subs	r3, #1
 8005d42:	4a18      	ldr	r2, [pc, #96]	; (8005da4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8005d44:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d46:	79fb      	ldrb	r3, [r7, #7]
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	71fb      	strb	r3, [r7, #7]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d50:	79fb      	ldrb	r3, [r7, #7]
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d58:	2b80      	cmp	r3, #128	; 0x80
 8005d5a:	d0ef      	beq.n	8005d3c <vSetVarulMaxPRIGROUPValue+0x20>
#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d5c:	4b11      	ldr	r3, [pc, #68]	; (8005da4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f1c3 0307 	rsb	r3, r3, #7
 8005d64:	2b04      	cmp	r3, #4
 8005d66:	d00a      	beq.n	8005d7e <vSetVarulMaxPRIGROUPValue+0x62>
        __asm volatile
 8005d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6c:	f383 8811 	msr	BASEPRI, r3
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	60bb      	str	r3, [r7, #8]
    }
 8005d7a:	bf00      	nop
 8005d7c:	e7fe      	b.n	8005d7c <vSetVarulMaxPRIGROUPValue+0x60>
	}
#endif
	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d7e:	4b09      	ldr	r3, [pc, #36]	; (8005da4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	021b      	lsls	r3, r3, #8
 8005d84:	4a07      	ldr	r2, [pc, #28]	; (8005da4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8005d86:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d88:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d90:	4a04      	ldr	r2, [pc, #16]	; (8005da4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8005d92:	6013      	str	r3, [r2, #0]
}
 8005d94:	bf00      	nop
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	e000e400 	.word	0xe000e400
 8005da4:	200002bc 	.word	0x200002bc

08005da8 <vPortValidateInterruptPriority>:

////////
#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005dae:	f3ef 8305 	mrs	r3, IPSR
 8005db2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b0f      	cmp	r3, #15
 8005db8:	d914      	bls.n	8005de4 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005dba:	4a17      	ldr	r2, [pc, #92]	; (8005e18 <vPortValidateInterruptPriority+0x70>)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005dc4:	4b15      	ldr	r3, [pc, #84]	; (8005e1c <vPortValidateInterruptPriority+0x74>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	7afa      	ldrb	r2, [r7, #11]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d20a      	bcs.n	8005de4 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd2:	f383 8811 	msr	BASEPRI, r3
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	607b      	str	r3, [r7, #4]
    }
 8005de0:	bf00      	nop
 8005de2:	e7fe      	b.n	8005de2 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005de4:	4b0e      	ldr	r3, [pc, #56]	; (8005e20 <vPortValidateInterruptPriority+0x78>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005dec:	4b0d      	ldr	r3, [pc, #52]	; (8005e24 <vPortValidateInterruptPriority+0x7c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d90a      	bls.n	8005e0a <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	603b      	str	r3, [r7, #0]
    }
 8005e06:	bf00      	nop
 8005e08:	e7fe      	b.n	8005e08 <vPortValidateInterruptPriority+0x60>
    }
 8005e0a:	bf00      	nop
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	e000e3f0 	.word	0xe000e3f0
 8005e1c:	200002b8 	.word	0x200002b8
 8005e20:	e000ed0c 	.word	0xe000ed0c
 8005e24:	200002bc 	.word	0x200002bc

08005e28 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08a      	sub	sp, #40	; 0x28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005e30:	2300      	movs	r3, #0
 8005e32:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8005e34:	f7fe fae4 	bl	8004400 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005e38:	4b53      	ldr	r3, [pc, #332]	; (8005f88 <pvPortMalloc+0x160>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d101      	bne.n	8005e44 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005e40:	f000 f908 	bl	8006054 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d012      	beq.n	8005e70 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8005e4a:	2208      	movs	r2, #8
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f003 0307 	and.w	r3, r3, #7
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	3308      	adds	r3, #8
 8005e56:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	43db      	mvns	r3, r3
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d804      	bhi.n	8005e6c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	4413      	add	r3, r2
 8005e68:	607b      	str	r3, [r7, #4]
 8005e6a:	e001      	b.n	8005e70 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	db70      	blt.n	8005f58 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d06d      	beq.n	8005f58 <pvPortMalloc+0x130>
 8005e7c:	4b43      	ldr	r3, [pc, #268]	; (8005f8c <pvPortMalloc+0x164>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d868      	bhi.n	8005f58 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005e86:	4b42      	ldr	r3, [pc, #264]	; (8005f90 <pvPortMalloc+0x168>)
 8005e88:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005e8a:	4b41      	ldr	r3, [pc, #260]	; (8005f90 <pvPortMalloc+0x168>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e90:	e004      	b.n	8005e9c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8005e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e94:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d903      	bls.n	8005eae <pvPortMalloc+0x86>
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1f1      	bne.n	8005e92 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005eae:	4b36      	ldr	r3, [pc, #216]	; (8005f88 <pvPortMalloc+0x160>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d04f      	beq.n	8005f58 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2208      	movs	r2, #8
 8005ebe:	4413      	add	r3, r2
 8005ec0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	6a3b      	ldr	r3, [r7, #32]
 8005ec8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	1ad2      	subs	r2, r2, r3
 8005ed2:	2308      	movs	r3, #8
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d91f      	bls.n	8005f1a <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4413      	add	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f003 0307 	and.w	r3, r3, #7
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00a      	beq.n	8005f02 <pvPortMalloc+0xda>
        __asm volatile
 8005eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef0:	f383 8811 	msr	BASEPRI, r3
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	613b      	str	r3, [r7, #16]
    }
 8005efe:	bf00      	nop
 8005f00:	e7fe      	b.n	8005f00 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	1ad2      	subs	r2, r2, r3
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f14:	6978      	ldr	r0, [r7, #20]
 8005f16:	f000 f8f9 	bl	800610c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f1a:	4b1c      	ldr	r3, [pc, #112]	; (8005f8c <pvPortMalloc+0x164>)
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	4a19      	ldr	r2, [pc, #100]	; (8005f8c <pvPortMalloc+0x164>)
 8005f26:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f28:	4b18      	ldr	r3, [pc, #96]	; (8005f8c <pvPortMalloc+0x164>)
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	4b19      	ldr	r3, [pc, #100]	; (8005f94 <pvPortMalloc+0x16c>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d203      	bcs.n	8005f3c <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f34:	4b15      	ldr	r3, [pc, #84]	; (8005f8c <pvPortMalloc+0x164>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a16      	ldr	r2, [pc, #88]	; (8005f94 <pvPortMalloc+0x16c>)
 8005f3a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005f4e:	4b12      	ldr	r3, [pc, #72]	; (8005f98 <pvPortMalloc+0x170>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3301      	adds	r3, #1
 8005f54:	4a10      	ldr	r2, [pc, #64]	; (8005f98 <pvPortMalloc+0x170>)
 8005f56:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005f58:	f7fe fa60 	bl	800441c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	f003 0307 	and.w	r3, r3, #7
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00a      	beq.n	8005f7c <pvPortMalloc+0x154>
        __asm volatile
 8005f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6a:	f383 8811 	msr	BASEPRI, r3
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	60fb      	str	r3, [r7, #12]
    }
 8005f78:	bf00      	nop
 8005f7a:	e7fe      	b.n	8005f7a <pvPortMalloc+0x152>
    return pvReturn;
 8005f7c:	69fb      	ldr	r3, [r7, #28]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3728      	adds	r7, #40	; 0x28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	2000cac8 	.word	0x2000cac8
 8005f8c:	2000cacc 	.word	0x2000cacc
 8005f90:	2000cac0 	.word	0x2000cac0
 8005f94:	2000cad0 	.word	0x2000cad0
 8005f98:	2000cad4 	.word	0x2000cad4

08005f9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d049      	beq.n	8006042 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005fae:	2308      	movs	r3, #8
 8005fb0:	425b      	negs	r3, r3
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	db0a      	blt.n	8005fda <vPortFree+0x3e>
        __asm volatile
 8005fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	60fb      	str	r3, [r7, #12]
    }
 8005fd6:	bf00      	nop
 8005fd8:	e7fe      	b.n	8005fd8 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00a      	beq.n	8005ff8 <vPortFree+0x5c>
        __asm volatile
 8005fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	60bb      	str	r3, [r7, #8]
    }
 8005ff4:	bf00      	nop
 8005ff6:	e7fe      	b.n	8005ff6 <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	0fdb      	lsrs	r3, r3, #31
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b00      	cmp	r3, #0
 8006006:	d01c      	beq.n	8006042 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d118      	bne.n	8006042 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800601c:	f7fe f9f0 	bl	8004400 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	4b09      	ldr	r3, [pc, #36]	; (800604c <vPortFree+0xb0>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4413      	add	r3, r2
 800602a:	4a08      	ldr	r2, [pc, #32]	; (800604c <vPortFree+0xb0>)
 800602c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800602e:	6938      	ldr	r0, [r7, #16]
 8006030:	f000 f86c 	bl	800610c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006034:	4b06      	ldr	r3, [pc, #24]	; (8006050 <vPortFree+0xb4>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	3301      	adds	r3, #1
 800603a:	4a05      	ldr	r2, [pc, #20]	; (8006050 <vPortFree+0xb4>)
 800603c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800603e:	f7fe f9ed 	bl	800441c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006042:	bf00      	nop
 8006044:	3718      	adds	r7, #24
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	2000cacc 	.word	0x2000cacc
 8006050:	2000cad8 	.word	0x2000cad8

08006054 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800605a:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 800605e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006060:	4b25      	ldr	r3, [pc, #148]	; (80060f8 <prvHeapInit+0xa4>)
 8006062:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00c      	beq.n	8006088 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	3307      	adds	r3, #7
 8006072:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f023 0307 	bic.w	r3, r3, #7
 800607a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	4a1d      	ldr	r2, [pc, #116]	; (80060f8 <prvHeapInit+0xa4>)
 8006084:	4413      	add	r3, r2
 8006086:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800608c:	4a1b      	ldr	r2, [pc, #108]	; (80060fc <prvHeapInit+0xa8>)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006092:	4b1a      	ldr	r3, [pc, #104]	; (80060fc <prvHeapInit+0xa8>)
 8006094:	2200      	movs	r2, #0
 8006096:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	4413      	add	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80060a0:	2208      	movs	r2, #8
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	1a9b      	subs	r3, r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f023 0307 	bic.w	r3, r3, #7
 80060ae:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4a13      	ldr	r2, [pc, #76]	; (8006100 <prvHeapInit+0xac>)
 80060b4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80060b6:	4b12      	ldr	r3, [pc, #72]	; (8006100 <prvHeapInit+0xac>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2200      	movs	r2, #0
 80060bc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80060be:	4b10      	ldr	r3, [pc, #64]	; (8006100 <prvHeapInit+0xac>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2200      	movs	r2, #0
 80060c4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	1ad2      	subs	r2, r2, r3
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80060d4:	4b0a      	ldr	r3, [pc, #40]	; (8006100 <prvHeapInit+0xac>)
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	4a08      	ldr	r2, [pc, #32]	; (8006104 <prvHeapInit+0xb0>)
 80060e2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	4a07      	ldr	r2, [pc, #28]	; (8006108 <prvHeapInit+0xb4>)
 80060ea:	6013      	str	r3, [r2, #0]
}
 80060ec:	bf00      	nop
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	200002c0 	.word	0x200002c0
 80060fc:	2000cac0 	.word	0x2000cac0
 8006100:	2000cac8 	.word	0x2000cac8
 8006104:	2000cad0 	.word	0x2000cad0
 8006108:	2000cacc 	.word	0x2000cacc

0800610c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006114:	4b28      	ldr	r3, [pc, #160]	; (80061b8 <prvInsertBlockIntoFreeList+0xac>)
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	e002      	b.n	8006120 <prvInsertBlockIntoFreeList+0x14>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	60fb      	str	r3, [r7, #12]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	429a      	cmp	r2, r3
 8006128:	d8f7      	bhi.n	800611a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	4413      	add	r3, r2
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	429a      	cmp	r2, r3
 800613a:	d108      	bne.n	800614e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	685a      	ldr	r2, [r3, #4]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	441a      	add	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	441a      	add	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	429a      	cmp	r2, r3
 8006160:	d118      	bne.n	8006194 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	4b15      	ldr	r3, [pc, #84]	; (80061bc <prvInsertBlockIntoFreeList+0xb0>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	429a      	cmp	r2, r3
 800616c:	d00d      	beq.n	800618a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	441a      	add	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	e008      	b.n	800619c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800618a:	4b0c      	ldr	r3, [pc, #48]	; (80061bc <prvInsertBlockIntoFreeList+0xb0>)
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	601a      	str	r2, [r3, #0]
 8006192:	e003      	b.n	800619c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d002      	beq.n	80061aa <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80061aa:	bf00      	nop
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	2000cac0 	.word	0x2000cac0
 80061bc:	2000cac8 	.word	0x2000cac8

080061c0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80061c0:	b580      	push	{r7, lr}
 80061c2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80061c4:	4803      	ldr	r0, [pc, #12]	; (80061d4 <_cbSendSystemDesc+0x14>)
 80061c6:	f001 fb31 	bl	800782c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80061ca:	4803      	ldr	r0, [pc, #12]	; (80061d8 <_cbSendSystemDesc+0x18>)
 80061cc:	f001 fb2e 	bl	800782c <SEGGER_SYSVIEW_SendSysDesc>
}
 80061d0:	bf00      	nop
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	0800926c 	.word	0x0800926c
 80061d8:	080092a0 	.word	0x080092a0

080061dc <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80061e0:	4b06      	ldr	r3, [pc, #24]	; (80061fc <SEGGER_SYSVIEW_Conf+0x20>)
 80061e2:	6818      	ldr	r0, [r3, #0]
 80061e4:	4b05      	ldr	r3, [pc, #20]	; (80061fc <SEGGER_SYSVIEW_Conf+0x20>)
 80061e6:	6819      	ldr	r1, [r3, #0]
 80061e8:	4b05      	ldr	r3, [pc, #20]	; (8006200 <SEGGER_SYSVIEW_Conf+0x24>)
 80061ea:	4a06      	ldr	r2, [pc, #24]	; (8006204 <SEGGER_SYSVIEW_Conf+0x28>)
 80061ec:	f000 fe9c 	bl	8006f28 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80061f0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80061f4:	f000 fedc 	bl	8006fb0 <SEGGER_SYSVIEW_SetRAMBase>
}
 80061f8:	bf00      	nop
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	20000000 	.word	0x20000000
 8006200:	080061c1 	.word	0x080061c1
 8006204:	0800933c 	.word	0x0800933c

08006208 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8006208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800620a:	b085      	sub	sp, #20
 800620c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800620e:	2300      	movs	r3, #0
 8006210:	607b      	str	r3, [r7, #4]
 8006212:	e033      	b.n	800627c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8006214:	491e      	ldr	r1, [pc, #120]	; (8006290 <_cbSendTaskList+0x88>)
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	4613      	mov	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	440b      	add	r3, r1
 8006222:	6818      	ldr	r0, [r3, #0]
 8006224:	491a      	ldr	r1, [pc, #104]	; (8006290 <_cbSendTaskList+0x88>)
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	4613      	mov	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	440b      	add	r3, r1
 8006232:	3304      	adds	r3, #4
 8006234:	6819      	ldr	r1, [r3, #0]
 8006236:	4c16      	ldr	r4, [pc, #88]	; (8006290 <_cbSendTaskList+0x88>)
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	4613      	mov	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4413      	add	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4423      	add	r3, r4
 8006244:	3308      	adds	r3, #8
 8006246:	681c      	ldr	r4, [r3, #0]
 8006248:	4d11      	ldr	r5, [pc, #68]	; (8006290 <_cbSendTaskList+0x88>)
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	4613      	mov	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	442b      	add	r3, r5
 8006256:	330c      	adds	r3, #12
 8006258:	681d      	ldr	r5, [r3, #0]
 800625a:	4e0d      	ldr	r6, [pc, #52]	; (8006290 <_cbSendTaskList+0x88>)
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	4613      	mov	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4433      	add	r3, r6
 8006268:	3310      	adds	r3, #16
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	462b      	mov	r3, r5
 8006270:	4622      	mov	r2, r4
 8006272:	f000 f8bd 	bl	80063f0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	3301      	adds	r3, #1
 800627a:	607b      	str	r3, [r7, #4]
 800627c:	4b05      	ldr	r3, [pc, #20]	; (8006294 <_cbSendTaskList+0x8c>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	429a      	cmp	r2, r3
 8006284:	d3c6      	bcc.n	8006214 <_cbSendTaskList+0xc>
  }
}
 8006286:	bf00      	nop
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006290:	2000cadc 	.word	0x2000cadc
 8006294:	2000cb7c 	.word	0x2000cb7c

08006298 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8006298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800629c:	b082      	sub	sp, #8
 800629e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80062a0:	f7fe f9cc 	bl	800463c <xTaskGetTickCountFromISR>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2200      	movs	r2, #0
 80062a8:	469a      	mov	sl, r3
 80062aa:	4693      	mov	fp, r2
 80062ac:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80062b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	f04f 0a00 	mov.w	sl, #0
 80062bc:	f04f 0b00 	mov.w	fp, #0
 80062c0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80062c4:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80062c8:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80062cc:	4652      	mov	r2, sl
 80062ce:	465b      	mov	r3, fp
 80062d0:	1a14      	subs	r4, r2, r0
 80062d2:	eb63 0501 	sbc.w	r5, r3, r1
 80062d6:	f04f 0200 	mov.w	r2, #0
 80062da:	f04f 0300 	mov.w	r3, #0
 80062de:	00ab      	lsls	r3, r5, #2
 80062e0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80062e4:	00a2      	lsls	r2, r4, #2
 80062e6:	4614      	mov	r4, r2
 80062e8:	461d      	mov	r5, r3
 80062ea:	eb14 0800 	adds.w	r8, r4, r0
 80062ee:	eb45 0901 	adc.w	r9, r5, r1
 80062f2:	f04f 0200 	mov.w	r2, #0
 80062f6:	f04f 0300 	mov.w	r3, #0
 80062fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006302:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006306:	4690      	mov	r8, r2
 8006308:	4699      	mov	r9, r3
 800630a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800630e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8006312:	4610      	mov	r0, r2
 8006314:	4619      	mov	r1, r3
 8006316:	3708      	adds	r7, #8
 8006318:	46bd      	mov	sp, r7
 800631a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08006320 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af02      	add	r7, sp, #8
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
 800632c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800632e:	2205      	movs	r2, #5
 8006330:	492b      	ldr	r1, [pc, #172]	; (80063e0 <SYSVIEW_AddTask+0xc0>)
 8006332:	68b8      	ldr	r0, [r7, #8]
 8006334:	f001 fd40 	bl	8007db8 <memcmp>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d04b      	beq.n	80063d6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800633e:	4b29      	ldr	r3, [pc, #164]	; (80063e4 <SYSVIEW_AddTask+0xc4>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2b07      	cmp	r3, #7
 8006344:	d903      	bls.n	800634e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8006346:	4828      	ldr	r0, [pc, #160]	; (80063e8 <SYSVIEW_AddTask+0xc8>)
 8006348:	f001 fc9e 	bl	8007c88 <SEGGER_SYSVIEW_Warn>
    return;
 800634c:	e044      	b.n	80063d8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800634e:	4b25      	ldr	r3, [pc, #148]	; (80063e4 <SYSVIEW_AddTask+0xc4>)
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	4926      	ldr	r1, [pc, #152]	; (80063ec <SYSVIEW_AddTask+0xcc>)
 8006354:	4613      	mov	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	440b      	add	r3, r1
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006362:	4b20      	ldr	r3, [pc, #128]	; (80063e4 <SYSVIEW_AddTask+0xc4>)
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	4921      	ldr	r1, [pc, #132]	; (80063ec <SYSVIEW_AddTask+0xcc>)
 8006368:	4613      	mov	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4413      	add	r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	440b      	add	r3, r1
 8006372:	3304      	adds	r3, #4
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006378:	4b1a      	ldr	r3, [pc, #104]	; (80063e4 <SYSVIEW_AddTask+0xc4>)
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	491b      	ldr	r1, [pc, #108]	; (80063ec <SYSVIEW_AddTask+0xcc>)
 800637e:	4613      	mov	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	440b      	add	r3, r1
 8006388:	3308      	adds	r3, #8
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800638e:	4b15      	ldr	r3, [pc, #84]	; (80063e4 <SYSVIEW_AddTask+0xc4>)
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	4916      	ldr	r1, [pc, #88]	; (80063ec <SYSVIEW_AddTask+0xcc>)
 8006394:	4613      	mov	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	440b      	add	r3, r1
 800639e:	330c      	adds	r3, #12
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80063a4:	4b0f      	ldr	r3, [pc, #60]	; (80063e4 <SYSVIEW_AddTask+0xc4>)
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	4910      	ldr	r1, [pc, #64]	; (80063ec <SYSVIEW_AddTask+0xcc>)
 80063aa:	4613      	mov	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	440b      	add	r3, r1
 80063b4:	3310      	adds	r3, #16
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80063ba:	4b0a      	ldr	r3, [pc, #40]	; (80063e4 <SYSVIEW_AddTask+0xc4>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3301      	adds	r3, #1
 80063c0:	4a08      	ldr	r2, [pc, #32]	; (80063e4 <SYSVIEW_AddTask+0xc4>)
 80063c2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	68b9      	ldr	r1, [r7, #8]
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f000 f80e 	bl	80063f0 <SYSVIEW_SendTaskInfo>
 80063d4:	e000      	b.n	80063d8 <SYSVIEW_AddTask+0xb8>
    return;
 80063d6:	bf00      	nop

}
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	080092b0 	.word	0x080092b0
 80063e4:	2000cb7c 	.word	0x2000cb7c
 80063e8:	080092b8 	.word	0x080092b8
 80063ec:	2000cadc 	.word	0x2000cadc

080063f0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b08a      	sub	sp, #40	; 0x28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
 80063fc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80063fe:	f107 0314 	add.w	r3, r7, #20
 8006402:	2214      	movs	r2, #20
 8006404:	2100      	movs	r1, #0
 8006406:	4618      	mov	r0, r3
 8006408:	f001 fcf4 	bl	8007df4 <memset>
  TaskInfo.TaskID     = TaskID;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800641c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006420:	f107 0314 	add.w	r3, r7, #20
 8006424:	4618      	mov	r0, r3
 8006426:	f001 f909 	bl	800763c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800642a:	bf00      	nop
 800642c:	3728      	adds	r7, #40	; 0x28
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
	...

08006434 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800643a:	4b26      	ldr	r3, [pc, #152]	; (80064d4 <_DoInit+0xa0>)
 800643c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800643e:	22a8      	movs	r2, #168	; 0xa8
 8006440:	2100      	movs	r1, #0
 8006442:	6838      	ldr	r0, [r7, #0]
 8006444:	f001 fcd6 	bl	8007df4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2203      	movs	r2, #3
 800644c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2203      	movs	r2, #3
 8006452:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	4a20      	ldr	r2, [pc, #128]	; (80064d8 <_DoInit+0xa4>)
 8006458:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	4a1f      	ldr	r2, [pc, #124]	; (80064dc <_DoInit+0xa8>)
 800645e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006466:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	2200      	movs	r2, #0
 800646c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2200      	movs	r2, #0
 8006472:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2200      	movs	r2, #0
 8006478:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	4a16      	ldr	r2, [pc, #88]	; (80064d8 <_DoInit+0xa4>)
 800647e:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	4a17      	ldr	r2, [pc, #92]	; (80064e0 <_DoInit+0xac>)
 8006484:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2210      	movs	r2, #16
 800648a:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	2200      	movs	r2, #0
 8006490:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2200      	movs	r2, #0
 8006496:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	2200      	movs	r2, #0
 800649c:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800649e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80064a2:	2300      	movs	r3, #0
 80064a4:	607b      	str	r3, [r7, #4]
 80064a6:	e00c      	b.n	80064c2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f1c3 030f 	rsb	r3, r3, #15
 80064ae:	4a0d      	ldr	r2, [pc, #52]	; (80064e4 <_DoInit+0xb0>)
 80064b0:	5cd1      	ldrb	r1, [r2, r3]
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4413      	add	r3, r2
 80064b8:	460a      	mov	r2, r1
 80064ba:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3301      	adds	r3, #1
 80064c0:	607b      	str	r3, [r7, #4]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b0f      	cmp	r3, #15
 80064c6:	d9ef      	bls.n	80064a8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80064c8:	f3bf 8f5f 	dmb	sy
}
 80064cc:	bf00      	nop
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	2000cb80 	.word	0x2000cb80
 80064d8:	08009308 	.word	0x08009308
 80064dc:	2000cc28 	.word	0x2000cc28
 80064e0:	2000d028 	.word	0x2000d028
 80064e4:	08009344 	.word	0x08009344

080064e8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b08a      	sub	sp, #40	; 0x28
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80064f4:	2300      	movs	r3, #0
 80064f6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	429a      	cmp	r2, r3
 800650a:	d905      	bls.n	8006518 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	3b01      	subs	r3, #1
 8006514:	627b      	str	r3, [r7, #36]	; 0x24
 8006516:	e007      	b.n	8006528 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	689a      	ldr	r2, [r3, #8]
 800651c:	69b9      	ldr	r1, [r7, #24]
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	1acb      	subs	r3, r1, r3
 8006522:	4413      	add	r3, r2
 8006524:	3b01      	subs	r3, #1
 8006526:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	689a      	ldr	r2, [r3, #8]
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006532:	4293      	cmp	r3, r2
 8006534:	bf28      	it	cs
 8006536:	4613      	movcs	r3, r2
 8006538:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800653a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4293      	cmp	r3, r2
 8006540:	bf28      	it	cs
 8006542:	4613      	movcs	r3, r2
 8006544:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	4413      	add	r3, r2
 800654e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8006550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006552:	68b9      	ldr	r1, [r7, #8]
 8006554:	6978      	ldr	r0, [r7, #20]
 8006556:	f001 fc3f 	bl	8007dd8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800655a:	6a3a      	ldr	r2, [r7, #32]
 800655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655e:	4413      	add	r3, r2
 8006560:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	4413      	add	r3, r2
 8006568:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8006572:	69fa      	ldr	r2, [r7, #28]
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	4413      	add	r3, r2
 8006578:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	69fa      	ldr	r2, [r7, #28]
 8006580:	429a      	cmp	r2, r3
 8006582:	d101      	bne.n	8006588 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8006584:	2300      	movs	r3, #0
 8006586:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006588:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	69fa      	ldr	r2, [r7, #28]
 8006590:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1b2      	bne.n	80064fe <_WriteBlocking+0x16>
  return NumBytesWritten;
 8006598:	6a3b      	ldr	r3, [r7, #32]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3728      	adds	r7, #40	; 0x28
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b088      	sub	sp, #32
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	60f8      	str	r0, [r7, #12]
 80065aa:	60b9      	str	r1, [r7, #8]
 80065ac:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	689a      	ldr	r2, [r3, #8]
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d911      	bls.n	80065ea <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	4413      	add	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	68b9      	ldr	r1, [r7, #8]
 80065d4:	6938      	ldr	r0, [r7, #16]
 80065d6:	f001 fbff 	bl	8007dd8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80065da:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80065de:	69fa      	ldr	r2, [r7, #28]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	441a      	add	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80065e8:	e01f      	b.n	800662a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	4413      	add	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	68b9      	ldr	r1, [r7, #8]
 80065fc:	6938      	ldr	r0, [r7, #16]
 80065fe:	f001 fbeb 	bl	8007dd8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	4413      	add	r3, r2
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	4619      	mov	r1, r3
 800661a:	6938      	ldr	r0, [r7, #16]
 800661c:	f001 fbdc 	bl	8007dd8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006620:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	60da      	str	r2, [r3, #12]
}
 800662a:	bf00      	nop
 800662c:	3720      	adds	r7, #32
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8006632:	b480      	push	{r7}
 8006634:	b087      	sub	sp, #28
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	429a      	cmp	r2, r3
 800664c:	d808      	bhi.n	8006660 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	689a      	ldr	r2, [r3, #8]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	1ad2      	subs	r2, r2, r3
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	4413      	add	r3, r2
 800665a:	3b01      	subs	r3, #1
 800665c:	617b      	str	r3, [r7, #20]
 800665e:	e004      	b.n	800666a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	3b01      	subs	r3, #1
 8006668:	617b      	str	r3, [r7, #20]
  }
  return r;
 800666a:	697b      	ldr	r3, [r7, #20]
}
 800666c:	4618      	mov	r0, r3
 800666e:	371c      	adds	r7, #28
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8006678:	b580      	push	{r7, lr}
 800667a:	b08c      	sub	sp, #48	; 0x30
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8006684:	4b3e      	ldr	r3, [pc, #248]	; (8006780 <SEGGER_RTT_ReadNoLock+0x108>)
 8006686:	623b      	str	r3, [r7, #32]
 8006688:	6a3b      	ldr	r3, [r7, #32]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <SEGGER_RTT_ReadNoLock+0x1e>
 8006692:	f7ff fecf 	bl	8006434 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	4613      	mov	r3, r2
 800669a:	005b      	lsls	r3, r3, #1
 800669c:	4413      	add	r3, r2
 800669e:	00db      	lsls	r3, r3, #3
 80066a0:	3360      	adds	r3, #96	; 0x60
 80066a2:	4a37      	ldr	r2, [pc, #220]	; (8006780 <SEGGER_RTT_ReadNoLock+0x108>)
 80066a4:	4413      	add	r3, r2
 80066a6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80066b8:	2300      	movs	r3, #0
 80066ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80066bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d92b      	bls.n	800671c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	689a      	ldr	r2, [r3, #8]
 80066c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4293      	cmp	r3, r2
 80066d4:	bf28      	it	cs
 80066d6:	4613      	movcs	r3, r2
 80066d8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e0:	4413      	add	r3, r2
 80066e2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	6939      	ldr	r1, [r7, #16]
 80066e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066ea:	f001 fb75 	bl	8007dd8 <memcpy>
    NumBytesRead += NumBytesRem;
 80066ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	4413      	add	r3, r2
 80066f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80066f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	4413      	add	r3, r2
 80066fc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	4413      	add	r3, r2
 800670c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006714:	429a      	cmp	r2, r3
 8006716:	d101      	bne.n	800671c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8006718:	2300      	movs	r3, #0
 800671a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800671c:	69ba      	ldr	r2, [r7, #24]
 800671e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4293      	cmp	r3, r2
 800672a:	bf28      	it	cs
 800672c:	4613      	movcs	r3, r2
 800672e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d019      	beq.n	800676a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673c:	4413      	add	r3, r2
 800673e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	6939      	ldr	r1, [r7, #16]
 8006744:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006746:	f001 fb47 	bl	8007dd8 <memcpy>
    NumBytesRead += NumBytesRem;
 800674a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	4413      	add	r3, r2
 8006750:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8006752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	4413      	add	r3, r2
 8006758:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	4413      	add	r3, r2
 8006768:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800676a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006774:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8006776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006778:	4618      	mov	r0, r3
 800677a:	3730      	adds	r7, #48	; 0x30
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	2000cb80 	.word	0x2000cb80

08006784 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006784:	b580      	push	{r7, lr}
 8006786:	b088      	sub	sp, #32
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	4613      	mov	r3, r2
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	4413      	add	r3, r2
 800679e:	00db      	lsls	r3, r3, #3
 80067a0:	4a1f      	ldr	r2, [pc, #124]	; (8006820 <SEGGER_RTT_WriteNoLock+0x9c>)
 80067a2:	4413      	add	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d029      	beq.n	8006802 <SEGGER_RTT_WriteNoLock+0x7e>
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d82e      	bhi.n	8006810 <SEGGER_RTT_WriteNoLock+0x8c>
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d002      	beq.n	80067bc <SEGGER_RTT_WriteNoLock+0x38>
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d013      	beq.n	80067e2 <SEGGER_RTT_WriteNoLock+0x5e>
 80067ba:	e029      	b.n	8006810 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80067bc:	6978      	ldr	r0, [r7, #20]
 80067be:	f7ff ff38 	bl	8006632 <_GetAvailWriteSpace>
 80067c2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d202      	bcs.n	80067d2 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80067cc:	2300      	movs	r3, #0
 80067ce:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80067d0:	e021      	b.n	8006816 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	69b9      	ldr	r1, [r7, #24]
 80067da:	6978      	ldr	r0, [r7, #20]
 80067dc:	f7ff fee1 	bl	80065a2 <_WriteNoCheck>
    break;
 80067e0:	e019      	b.n	8006816 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80067e2:	6978      	ldr	r0, [r7, #20]
 80067e4:	f7ff ff25 	bl	8006632 <_GetAvailWriteSpace>
 80067e8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	4293      	cmp	r3, r2
 80067f0:	bf28      	it	cs
 80067f2:	4613      	movcs	r3, r2
 80067f4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80067f6:	69fa      	ldr	r2, [r7, #28]
 80067f8:	69b9      	ldr	r1, [r7, #24]
 80067fa:	6978      	ldr	r0, [r7, #20]
 80067fc:	f7ff fed1 	bl	80065a2 <_WriteNoCheck>
    break;
 8006800:	e009      	b.n	8006816 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	69b9      	ldr	r1, [r7, #24]
 8006806:	6978      	ldr	r0, [r7, #20]
 8006808:	f7ff fe6e 	bl	80064e8 <_WriteBlocking>
 800680c:	61f8      	str	r0, [r7, #28]
    break;
 800680e:	e002      	b.n	8006816 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8006810:	2300      	movs	r3, #0
 8006812:	61fb      	str	r3, [r7, #28]
    break;
 8006814:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8006816:	69fb      	ldr	r3, [r7, #28]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3720      	adds	r7, #32
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	2000cb80 	.word	0x2000cb80

08006824 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006824:	b580      	push	{r7, lr}
 8006826:	b088      	sub	sp, #32
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8006830:	4b0e      	ldr	r3, [pc, #56]	; (800686c <SEGGER_RTT_Write+0x48>)
 8006832:	61fb      	str	r3, [r7, #28]
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <SEGGER_RTT_Write+0x1e>
 800683e:	f7ff fdf9 	bl	8006434 <_DoInit>
  SEGGER_RTT_LOCK();
 8006842:	f3ef 8311 	mrs	r3, BASEPRI
 8006846:	f04f 0120 	mov.w	r1, #32
 800684a:	f381 8811 	msr	BASEPRI, r1
 800684e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	68b9      	ldr	r1, [r7, #8]
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f7ff ff95 	bl	8006784 <SEGGER_RTT_WriteNoLock>
 800685a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8006862:	697b      	ldr	r3, [r7, #20]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3720      	adds	r7, #32
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	2000cb80 	.word	0x2000cb80

08006870 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006870:	b580      	push	{r7, lr}
 8006872:	b088      	sub	sp, #32
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
 800687c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800687e:	4b3d      	ldr	r3, [pc, #244]	; (8006974 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8006880:	61bb      	str	r3, [r7, #24]
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	d101      	bne.n	8006890 <SEGGER_RTT_AllocUpBuffer+0x20>
 800688c:	f7ff fdd2 	bl	8006434 <_DoInit>
  SEGGER_RTT_LOCK();
 8006890:	f3ef 8311 	mrs	r3, BASEPRI
 8006894:	f04f 0120 	mov.w	r1, #32
 8006898:	f381 8811 	msr	BASEPRI, r1
 800689c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800689e:	4b35      	ldr	r3, [pc, #212]	; (8006974 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80068a0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80068a2:	2300      	movs	r3, #0
 80068a4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80068a6:	6939      	ldr	r1, [r7, #16]
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	1c5a      	adds	r2, r3, #1
 80068ac:	4613      	mov	r3, r2
 80068ae:	005b      	lsls	r3, r3, #1
 80068b0:	4413      	add	r3, r2
 80068b2:	00db      	lsls	r3, r3, #3
 80068b4:	440b      	add	r3, r1
 80068b6:	3304      	adds	r3, #4
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d008      	beq.n	80068d0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	3301      	adds	r3, #1
 80068c2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	69fa      	ldr	r2, [r7, #28]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	dbeb      	blt.n	80068a6 <SEGGER_RTT_AllocUpBuffer+0x36>
 80068ce:	e000      	b.n	80068d2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80068d0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	69fa      	ldr	r2, [r7, #28]
 80068d8:	429a      	cmp	r2, r3
 80068da:	da3f      	bge.n	800695c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80068dc:	6939      	ldr	r1, [r7, #16]
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	1c5a      	adds	r2, r3, #1
 80068e2:	4613      	mov	r3, r2
 80068e4:	005b      	lsls	r3, r3, #1
 80068e6:	4413      	add	r3, r2
 80068e8:	00db      	lsls	r3, r3, #3
 80068ea:	440b      	add	r3, r1
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80068f0:	6939      	ldr	r1, [r7, #16]
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	1c5a      	adds	r2, r3, #1
 80068f6:	4613      	mov	r3, r2
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	4413      	add	r3, r2
 80068fc:	00db      	lsls	r3, r3, #3
 80068fe:	440b      	add	r3, r1
 8006900:	3304      	adds	r3, #4
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8006906:	6939      	ldr	r1, [r7, #16]
 8006908:	69fa      	ldr	r2, [r7, #28]
 800690a:	4613      	mov	r3, r2
 800690c:	005b      	lsls	r3, r3, #1
 800690e:	4413      	add	r3, r2
 8006910:	00db      	lsls	r3, r3, #3
 8006912:	440b      	add	r3, r1
 8006914:	3320      	adds	r3, #32
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800691a:	6939      	ldr	r1, [r7, #16]
 800691c:	69fa      	ldr	r2, [r7, #28]
 800691e:	4613      	mov	r3, r2
 8006920:	005b      	lsls	r3, r3, #1
 8006922:	4413      	add	r3, r2
 8006924:	00db      	lsls	r3, r3, #3
 8006926:	440b      	add	r3, r1
 8006928:	3328      	adds	r3, #40	; 0x28
 800692a:	2200      	movs	r2, #0
 800692c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800692e:	6939      	ldr	r1, [r7, #16]
 8006930:	69fa      	ldr	r2, [r7, #28]
 8006932:	4613      	mov	r3, r2
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	4413      	add	r3, r2
 8006938:	00db      	lsls	r3, r3, #3
 800693a:	440b      	add	r3, r1
 800693c:	3324      	adds	r3, #36	; 0x24
 800693e:	2200      	movs	r2, #0
 8006940:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8006942:	6939      	ldr	r1, [r7, #16]
 8006944:	69fa      	ldr	r2, [r7, #28]
 8006946:	4613      	mov	r3, r2
 8006948:	005b      	lsls	r3, r3, #1
 800694a:	4413      	add	r3, r2
 800694c:	00db      	lsls	r3, r3, #3
 800694e:	440b      	add	r3, r1
 8006950:	332c      	adds	r3, #44	; 0x2c
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006956:	f3bf 8f5f 	dmb	sy
 800695a:	e002      	b.n	8006962 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800695c:	f04f 33ff 	mov.w	r3, #4294967295
 8006960:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8006968:	69fb      	ldr	r3, [r7, #28]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3720      	adds	r7, #32
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	2000cb80 	.word	0x2000cb80

08006978 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006978:	b580      	push	{r7, lr}
 800697a:	b08a      	sub	sp, #40	; 0x28
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
 8006984:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8006986:	4b21      	ldr	r3, [pc, #132]	; (8006a0c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8006988:	623b      	str	r3, [r7, #32]
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b00      	cmp	r3, #0
 8006992:	d101      	bne.n	8006998 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8006994:	f7ff fd4e 	bl	8006434 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006998:	4b1c      	ldr	r3, [pc, #112]	; (8006a0c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800699a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d82c      	bhi.n	80069fc <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80069a2:	f3ef 8311 	mrs	r3, BASEPRI
 80069a6:	f04f 0120 	mov.w	r1, #32
 80069aa:	f381 8811 	msr	BASEPRI, r1
 80069ae:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	4613      	mov	r3, r2
 80069b4:	005b      	lsls	r3, r3, #1
 80069b6:	4413      	add	r3, r2
 80069b8:	00db      	lsls	r3, r3, #3
 80069ba:	3360      	adds	r3, #96	; 0x60
 80069bc:	69fa      	ldr	r2, [r7, #28]
 80069be:	4413      	add	r3, r2
 80069c0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00e      	beq.n	80069e6 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2200      	movs	r2, #0
 80069de:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	2200      	movs	r2, #0
 80069e4:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ea:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80069ec:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80069f6:	2300      	movs	r3, #0
 80069f8:	627b      	str	r3, [r7, #36]	; 0x24
 80069fa:	e002      	b.n	8006a02 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80069fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006a00:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3728      	adds	r7, #40	; 0x28
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	2000cb80 	.word	0x2000cb80

08006a10 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8006a10:	b480      	push	{r7}
 8006a12:	b087      	sub	sp, #28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	1c5a      	adds	r2, r3, #1
 8006a24:	60fa      	str	r2, [r7, #12]
 8006a26:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2b80      	cmp	r3, #128	; 0x80
 8006a2c:	d90a      	bls.n	8006a44 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8006a2e:	2380      	movs	r3, #128	; 0x80
 8006a30:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8006a32:	e007      	b.n	8006a44 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	1c53      	adds	r3, r2, #1
 8006a38:	60bb      	str	r3, [r7, #8]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	1c59      	adds	r1, r3, #1
 8006a3e:	60f9      	str	r1, [r7, #12]
 8006a40:	7812      	ldrb	r2, [r2, #0]
 8006a42:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	1e5a      	subs	r2, r3, #1
 8006a48:	607a      	str	r2, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <_EncodeStr+0x46>
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1ee      	bne.n	8006a34 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8006a62:	68fb      	ldr	r3, [r7, #12]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	371c      	adds	r7, #28
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	3307      	adds	r3, #7
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006a8e:	4b35      	ldr	r3, [pc, #212]	; (8006b64 <_HandleIncomingPacket+0xdc>)
 8006a90:	7e1b      	ldrb	r3, [r3, #24]
 8006a92:	4618      	mov	r0, r3
 8006a94:	1cfb      	adds	r3, r7, #3
 8006a96:	2201      	movs	r2, #1
 8006a98:	4619      	mov	r1, r3
 8006a9a:	f7ff fded 	bl	8006678 <SEGGER_RTT_ReadNoLock>
 8006a9e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d052      	beq.n	8006b4c <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8006aa6:	78fb      	ldrb	r3, [r7, #3]
 8006aa8:	2b80      	cmp	r3, #128	; 0x80
 8006aaa:	d031      	beq.n	8006b10 <_HandleIncomingPacket+0x88>
 8006aac:	2b80      	cmp	r3, #128	; 0x80
 8006aae:	dc40      	bgt.n	8006b32 <_HandleIncomingPacket+0xaa>
 8006ab0:	2b07      	cmp	r3, #7
 8006ab2:	dc15      	bgt.n	8006ae0 <_HandleIncomingPacket+0x58>
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	dd3c      	ble.n	8006b32 <_HandleIncomingPacket+0xaa>
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	2b06      	cmp	r3, #6
 8006abc:	d839      	bhi.n	8006b32 <_HandleIncomingPacket+0xaa>
 8006abe:	a201      	add	r2, pc, #4	; (adr r2, 8006ac4 <_HandleIncomingPacket+0x3c>)
 8006ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac4:	08006ae7 	.word	0x08006ae7
 8006ac8:	08006aed 	.word	0x08006aed
 8006acc:	08006af3 	.word	0x08006af3
 8006ad0:	08006af9 	.word	0x08006af9
 8006ad4:	08006aff 	.word	0x08006aff
 8006ad8:	08006b05 	.word	0x08006b05
 8006adc:	08006b0b 	.word	0x08006b0b
 8006ae0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ae2:	d035      	beq.n	8006b50 <_HandleIncomingPacket+0xc8>
 8006ae4:	e025      	b.n	8006b32 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8006ae6:	f000 fc2f 	bl	8007348 <SEGGER_SYSVIEW_Start>
      break;
 8006aea:	e036      	b.n	8006b5a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006aec:	f000 fce6 	bl	80074bc <SEGGER_SYSVIEW_Stop>
      break;
 8006af0:	e033      	b.n	8006b5a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8006af2:	f000 febf 	bl	8007874 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8006af6:	e030      	b.n	8006b5a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006af8:	f000 fe84 	bl	8007804 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006afc:	e02d      	b.n	8006b5a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8006afe:	f000 fd03 	bl	8007508 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8006b02:	e02a      	b.n	8006b5a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006b04:	f001 f882 	bl	8007c0c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006b08:	e027      	b.n	8006b5a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006b0a:	f001 f861 	bl	8007bd0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006b0e:	e024      	b.n	8006b5a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006b10:	4b14      	ldr	r3, [pc, #80]	; (8006b64 <_HandleIncomingPacket+0xdc>)
 8006b12:	7e1b      	ldrb	r3, [r3, #24]
 8006b14:	4618      	mov	r0, r3
 8006b16:	1cfb      	adds	r3, r7, #3
 8006b18:	2201      	movs	r2, #1
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	f7ff fdac 	bl	8006678 <SEGGER_RTT_ReadNoLock>
 8006b20:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d015      	beq.n	8006b54 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006b28:	78fb      	ldrb	r3, [r7, #3]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 ffc6 	bl	8007abc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8006b30:	e010      	b.n	8006b54 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8006b32:	78fb      	ldrb	r3, [r7, #3]
 8006b34:	b25b      	sxtb	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	da0e      	bge.n	8006b58 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006b3a:	4b0a      	ldr	r3, [pc, #40]	; (8006b64 <_HandleIncomingPacket+0xdc>)
 8006b3c:	7e1b      	ldrb	r3, [r3, #24]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	1cfb      	adds	r3, r7, #3
 8006b42:	2201      	movs	r2, #1
 8006b44:	4619      	mov	r1, r3
 8006b46:	f7ff fd97 	bl	8006678 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006b4a:	e005      	b.n	8006b58 <_HandleIncomingPacket+0xd0>
    }
  }
 8006b4c:	bf00      	nop
 8006b4e:	e004      	b.n	8006b5a <_HandleIncomingPacket+0xd2>
      break;
 8006b50:	bf00      	nop
 8006b52:	e002      	b.n	8006b5a <_HandleIncomingPacket+0xd2>
      break;
 8006b54:	bf00      	nop
 8006b56:	e000      	b.n	8006b5a <_HandleIncomingPacket+0xd2>
      break;
 8006b58:	bf00      	nop
}
 8006b5a:	bf00      	nop
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	2000d440 	.word	0x2000d440

08006b68 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b08c      	sub	sp, #48	; 0x30
 8006b6c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8006b6e:	2301      	movs	r3, #1
 8006b70:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8006b72:	1d3b      	adds	r3, r7, #4
 8006b74:	3301      	adds	r3, #1
 8006b76:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b7c:	4b31      	ldr	r3, [pc, #196]	; (8006c44 <_TrySendOverflowPacket+0xdc>)
 8006b7e:	695b      	ldr	r3, [r3, #20]
 8006b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b82:	e00b      	b.n	8006b9c <_TrySendOverflowPacket+0x34>
 8006b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8a:	1c59      	adds	r1, r3, #1
 8006b8c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006b8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b92:	b2d2      	uxtb	r2, r2
 8006b94:	701a      	strb	r2, [r3, #0]
 8006b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b98:	09db      	lsrs	r3, r3, #7
 8006b9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9e:	2b7f      	cmp	r3, #127	; 0x7f
 8006ba0:	d8f0      	bhi.n	8006b84 <_TrySendOverflowPacket+0x1c>
 8006ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba4:	1c5a      	adds	r2, r3, #1
 8006ba6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006baa:	b2d2      	uxtb	r2, r2
 8006bac:	701a      	strb	r2, [r3, #0]
 8006bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006bb2:	4b25      	ldr	r3, [pc, #148]	; (8006c48 <_TrySendOverflowPacket+0xe0>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006bb8:	4b22      	ldr	r3, [pc, #136]	; (8006c44 <_TrySendOverflowPacket+0xdc>)
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	69ba      	ldr	r2, [r7, #24]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	623b      	str	r3, [r7, #32]
 8006bca:	e00b      	b.n	8006be4 <_TrySendOverflowPacket+0x7c>
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	1c59      	adds	r1, r3, #1
 8006bd4:	6279      	str	r1, [r7, #36]	; 0x24
 8006bd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bda:	b2d2      	uxtb	r2, r2
 8006bdc:	701a      	strb	r2, [r3, #0]
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	09db      	lsrs	r3, r3, #7
 8006be2:	623b      	str	r3, [r7, #32]
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	2b7f      	cmp	r3, #127	; 0x7f
 8006be8:	d8f0      	bhi.n	8006bcc <_TrySendOverflowPacket+0x64>
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	1c5a      	adds	r2, r3, #1
 8006bee:	627a      	str	r2, [r7, #36]	; 0x24
 8006bf0:	6a3a      	ldr	r2, [r7, #32]
 8006bf2:	b2d2      	uxtb	r2, r2
 8006bf4:	701a      	strb	r2, [r3, #0]
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8006bfa:	4b12      	ldr	r3, [pc, #72]	; (8006c44 <_TrySendOverflowPacket+0xdc>)
 8006bfc:	785b      	ldrb	r3, [r3, #1]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	1d3b      	adds	r3, r7, #4
 8006c02:	69fa      	ldr	r2, [r7, #28]
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	461a      	mov	r2, r3
 8006c08:	1d3b      	adds	r3, r7, #4
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	f7f9 fae8 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006c10:	4603      	mov	r3, r0
 8006c12:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d009      	beq.n	8006c2e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006c1a:	4a0a      	ldr	r2, [pc, #40]	; (8006c44 <_TrySendOverflowPacket+0xdc>)
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006c20:	4b08      	ldr	r3, [pc, #32]	; (8006c44 <_TrySendOverflowPacket+0xdc>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	3b01      	subs	r3, #1
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	4b06      	ldr	r3, [pc, #24]	; (8006c44 <_TrySendOverflowPacket+0xdc>)
 8006c2a:	701a      	strb	r2, [r3, #0]
 8006c2c:	e004      	b.n	8006c38 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8006c2e:	4b05      	ldr	r3, [pc, #20]	; (8006c44 <_TrySendOverflowPacket+0xdc>)
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	3301      	adds	r3, #1
 8006c34:	4a03      	ldr	r2, [pc, #12]	; (8006c44 <_TrySendOverflowPacket+0xdc>)
 8006c36:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006c38:	693b      	ldr	r3, [r7, #16]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3730      	adds	r7, #48	; 0x30
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	2000d440 	.word	0x2000d440
 8006c48:	e0001004 	.word	0xe0001004

08006c4c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b08a      	sub	sp, #40	; 0x28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006c58:	4b98      	ldr	r3, [pc, #608]	; (8006ebc <_SendPacket+0x270>)
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d010      	beq.n	8006c82 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006c60:	4b96      	ldr	r3, [pc, #600]	; (8006ebc <_SendPacket+0x270>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 812d 	beq.w	8006ec4 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8006c6a:	4b94      	ldr	r3, [pc, #592]	; (8006ebc <_SendPacket+0x270>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d109      	bne.n	8006c86 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8006c72:	f7ff ff79 	bl	8006b68 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006c76:	4b91      	ldr	r3, [pc, #580]	; (8006ebc <_SendPacket+0x270>)
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	f040 8124 	bne.w	8006ec8 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8006c80:	e001      	b.n	8006c86 <_SendPacket+0x3a>
    goto Send;
 8006c82:	bf00      	nop
 8006c84:	e000      	b.n	8006c88 <_SendPacket+0x3c>
Send:
 8006c86:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b1f      	cmp	r3, #31
 8006c8c:	d809      	bhi.n	8006ca2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8006c8e:	4b8b      	ldr	r3, [pc, #556]	; (8006ebc <_SendPacket+0x270>)
 8006c90:	69da      	ldr	r2, [r3, #28]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	fa22 f303 	lsr.w	r3, r2, r3
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f040 8115 	bne.w	8006ecc <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b17      	cmp	r3, #23
 8006ca6:	d807      	bhi.n	8006cb8 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	3b01      	subs	r3, #1
 8006cac:	60fb      	str	r3, [r7, #12]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	701a      	strb	r2, [r3, #0]
 8006cb6:	e0c4      	b.n	8006e42 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	2b7f      	cmp	r3, #127	; 0x7f
 8006cc4:	d912      	bls.n	8006cec <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	09da      	lsrs	r2, r3, #7
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	b2d2      	uxtb	r2, r2
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	3a01      	subs	r2, #1
 8006cde:	60fa      	str	r2, [r7, #12]
 8006ce0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ce4:	b2da      	uxtb	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	701a      	strb	r2, [r3, #0]
 8006cea:	e006      	b.n	8006cfa <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	60fb      	str	r3, [r7, #12]
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2b7e      	cmp	r3, #126	; 0x7e
 8006cfe:	d807      	bhi.n	8006d10 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	3b01      	subs	r3, #1
 8006d04:	60fb      	str	r3, [r7, #12]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	701a      	strb	r2, [r3, #0]
 8006d0e:	e098      	b.n	8006e42 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d16:	d212      	bcs.n	8006d3e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	09da      	lsrs	r2, r3, #7
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	60fb      	str	r3, [r7, #12]
 8006d22:	b2d2      	uxtb	r2, r2
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	3a01      	subs	r2, #1
 8006d30:	60fa      	str	r2, [r7, #12]
 8006d32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	701a      	strb	r2, [r3, #0]
 8006d3c:	e081      	b.n	8006e42 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d44:	d21d      	bcs.n	8006d82 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	0b9a      	lsrs	r2, r3, #14
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	60fb      	str	r3, [r7, #12]
 8006d50:	b2d2      	uxtb	r2, r2
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	09db      	lsrs	r3, r3, #7
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	3a01      	subs	r2, #1
 8006d60:	60fa      	str	r2, [r7, #12]
 8006d62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006d66:	b2da      	uxtb	r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	3a01      	subs	r2, #1
 8006d74:	60fa      	str	r2, [r7, #12]
 8006d76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006d7a:	b2da      	uxtb	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	701a      	strb	r2, [r3, #0]
 8006d80:	e05f      	b.n	8006e42 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d88:	d228      	bcs.n	8006ddc <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	0d5a      	lsrs	r2, r3, #21
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	3b01      	subs	r3, #1
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	b2d2      	uxtb	r2, r2
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	0b9b      	lsrs	r3, r3, #14
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	3a01      	subs	r2, #1
 8006da4:	60fa      	str	r2, [r7, #12]
 8006da6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	09db      	lsrs	r3, r3, #7
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	3a01      	subs	r2, #1
 8006dba:	60fa      	str	r2, [r7, #12]
 8006dbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	3a01      	subs	r2, #1
 8006dce:	60fa      	str	r2, [r7, #12]
 8006dd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006dd4:	b2da      	uxtb	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	701a      	strb	r2, [r3, #0]
 8006dda:	e032      	b.n	8006e42 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	0f1a      	lsrs	r2, r3, #28
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	3b01      	subs	r3, #1
 8006de4:	60fb      	str	r3, [r7, #12]
 8006de6:	b2d2      	uxtb	r2, r2
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	0d5b      	lsrs	r3, r3, #21
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	3a01      	subs	r2, #1
 8006df6:	60fa      	str	r2, [r7, #12]
 8006df8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	0b9b      	lsrs	r3, r3, #14
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	3a01      	subs	r2, #1
 8006e0c:	60fa      	str	r2, [r7, #12]
 8006e0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	09db      	lsrs	r3, r3, #7
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	3a01      	subs	r2, #1
 8006e22:	60fa      	str	r2, [r7, #12]
 8006e24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	3a01      	subs	r2, #1
 8006e36:	60fa      	str	r2, [r7, #12]
 8006e38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e3c:	b2da      	uxtb	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006e42:	4b1f      	ldr	r3, [pc, #124]	; (8006ec0 <_SendPacket+0x274>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006e48:	4b1c      	ldr	r3, [pc, #112]	; (8006ebc <_SendPacket+0x270>)
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	627b      	str	r3, [r7, #36]	; 0x24
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	623b      	str	r3, [r7, #32]
 8006e5a:	e00b      	b.n	8006e74 <_SendPacket+0x228>
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	1c59      	adds	r1, r3, #1
 8006e64:	6279      	str	r1, [r7, #36]	; 0x24
 8006e66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e6a:	b2d2      	uxtb	r2, r2
 8006e6c:	701a      	strb	r2, [r3, #0]
 8006e6e:	6a3b      	ldr	r3, [r7, #32]
 8006e70:	09db      	lsrs	r3, r3, #7
 8006e72:	623b      	str	r3, [r7, #32]
 8006e74:	6a3b      	ldr	r3, [r7, #32]
 8006e76:	2b7f      	cmp	r3, #127	; 0x7f
 8006e78:	d8f0      	bhi.n	8006e5c <_SendPacket+0x210>
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	1c5a      	adds	r2, r3, #1
 8006e7e:	627a      	str	r2, [r7, #36]	; 0x24
 8006e80:	6a3a      	ldr	r2, [r7, #32]
 8006e82:	b2d2      	uxtb	r2, r2
 8006e84:	701a      	strb	r2, [r3, #0]
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e88:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8006e8a:	4b0c      	ldr	r3, [pc, #48]	; (8006ebc <_SendPacket+0x270>)
 8006e8c:	785b      	ldrb	r3, [r3, #1]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	461a      	mov	r2, r3
 8006e98:	68f9      	ldr	r1, [r7, #12]
 8006e9a:	f7f9 f9a1 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006e9e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d003      	beq.n	8006eae <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006ea6:	4a05      	ldr	r2, [pc, #20]	; (8006ebc <_SendPacket+0x270>)
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	60d3      	str	r3, [r2, #12]
 8006eac:	e00f      	b.n	8006ece <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006eae:	4b03      	ldr	r3, [pc, #12]	; (8006ebc <_SendPacket+0x270>)
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	b2da      	uxtb	r2, r3
 8006eb6:	4b01      	ldr	r3, [pc, #4]	; (8006ebc <_SendPacket+0x270>)
 8006eb8:	701a      	strb	r2, [r3, #0]
 8006eba:	e008      	b.n	8006ece <_SendPacket+0x282>
 8006ebc:	2000d440 	.word	0x2000d440
 8006ec0:	e0001004 	.word	0xe0001004
    goto SendDone;
 8006ec4:	bf00      	nop
 8006ec6:	e002      	b.n	8006ece <_SendPacket+0x282>
      goto SendDone;
 8006ec8:	bf00      	nop
 8006eca:	e000      	b.n	8006ece <_SendPacket+0x282>
      goto SendDone;
 8006ecc:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006ece:	4b14      	ldr	r3, [pc, #80]	; (8006f20 <_SendPacket+0x2d4>)
 8006ed0:	7e1b      	ldrb	r3, [r3, #24]
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	4a13      	ldr	r2, [pc, #76]	; (8006f24 <_SendPacket+0x2d8>)
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	005b      	lsls	r3, r3, #1
 8006eda:	440b      	add	r3, r1
 8006edc:	00db      	lsls	r3, r3, #3
 8006ede:	4413      	add	r3, r2
 8006ee0:	336c      	adds	r3, #108	; 0x6c
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	4b0e      	ldr	r3, [pc, #56]	; (8006f20 <_SendPacket+0x2d4>)
 8006ee6:	7e1b      	ldrb	r3, [r3, #24]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	490e      	ldr	r1, [pc, #56]	; (8006f24 <_SendPacket+0x2d8>)
 8006eec:	4603      	mov	r3, r0
 8006eee:	005b      	lsls	r3, r3, #1
 8006ef0:	4403      	add	r3, r0
 8006ef2:	00db      	lsls	r3, r3, #3
 8006ef4:	440b      	add	r3, r1
 8006ef6:	3370      	adds	r3, #112	; 0x70
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d00b      	beq.n	8006f16 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006efe:	4b08      	ldr	r3, [pc, #32]	; (8006f20 <_SendPacket+0x2d4>)
 8006f00:	789b      	ldrb	r3, [r3, #2]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d107      	bne.n	8006f16 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006f06:	4b06      	ldr	r3, [pc, #24]	; (8006f20 <_SendPacket+0x2d4>)
 8006f08:	2201      	movs	r2, #1
 8006f0a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006f0c:	f7ff fdbc 	bl	8006a88 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006f10:	4b03      	ldr	r3, [pc, #12]	; (8006f20 <_SendPacket+0x2d4>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006f16:	bf00      	nop
 8006f18:	3728      	adds	r7, #40	; 0x28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	2000d440 	.word	0x2000d440
 8006f24:	2000cb80 	.word	0x2000cb80

08006f28 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af02      	add	r7, sp, #8
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
 8006f34:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006f36:	2300      	movs	r3, #0
 8006f38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f3c:	4917      	ldr	r1, [pc, #92]	; (8006f9c <SEGGER_SYSVIEW_Init+0x74>)
 8006f3e:	4818      	ldr	r0, [pc, #96]	; (8006fa0 <SEGGER_SYSVIEW_Init+0x78>)
 8006f40:	f7ff fc96 	bl	8006870 <SEGGER_RTT_AllocUpBuffer>
 8006f44:	4603      	mov	r3, r0
 8006f46:	b2da      	uxtb	r2, r3
 8006f48:	4b16      	ldr	r3, [pc, #88]	; (8006fa4 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f4a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006f4c:	4b15      	ldr	r3, [pc, #84]	; (8006fa4 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f4e:	785a      	ldrb	r2, [r3, #1]
 8006f50:	4b14      	ldr	r3, [pc, #80]	; (8006fa4 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f52:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006f54:	4b13      	ldr	r3, [pc, #76]	; (8006fa4 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f56:	7e1b      	ldrb	r3, [r3, #24]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	2308      	movs	r3, #8
 8006f60:	4a11      	ldr	r2, [pc, #68]	; (8006fa8 <SEGGER_SYSVIEW_Init+0x80>)
 8006f62:	490f      	ldr	r1, [pc, #60]	; (8006fa0 <SEGGER_SYSVIEW_Init+0x78>)
 8006f64:	f7ff fd08 	bl	8006978 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006f68:	4b0e      	ldr	r3, [pc, #56]	; (8006fa4 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006f6e:	4b0f      	ldr	r3, [pc, #60]	; (8006fac <SEGGER_SYSVIEW_Init+0x84>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a0c      	ldr	r2, [pc, #48]	; (8006fa4 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f74:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006f76:	4a0b      	ldr	r2, [pc, #44]	; (8006fa4 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006f7c:	4a09      	ldr	r2, [pc, #36]	; (8006fa4 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006f82:	4a08      	ldr	r2, [pc, #32]	; (8006fa4 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006f88:	4a06      	ldr	r2, [pc, #24]	; (8006fa4 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006f8e:	4b05      	ldr	r3, [pc, #20]	; (8006fa4 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f90:	2200      	movs	r2, #0
 8006f92:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006f94:	bf00      	nop
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	2000d038 	.word	0x2000d038
 8006fa0:	0800931c 	.word	0x0800931c
 8006fa4:	2000d440 	.word	0x2000d440
 8006fa8:	2000d438 	.word	0x2000d438
 8006fac:	e0001004 	.word	0xe0001004

08006fb0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006fb8:	4a04      	ldr	r2, [pc, #16]	; (8006fcc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6113      	str	r3, [r2, #16]
}
 8006fbe:	bf00      	nop
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	2000d440 	.word	0x2000d440

08006fd0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006fd8:	f3ef 8311 	mrs	r3, BASEPRI
 8006fdc:	f04f 0120 	mov.w	r1, #32
 8006fe0:	f381 8811 	msr	BASEPRI, r1
 8006fe4:	60fb      	str	r3, [r7, #12]
 8006fe6:	4808      	ldr	r0, [pc, #32]	; (8007008 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006fe8:	f7ff fd42 	bl	8006a70 <_PreparePacket>
 8006fec:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	68b9      	ldr	r1, [r7, #8]
 8006ff2:	68b8      	ldr	r0, [r7, #8]
 8006ff4:	f7ff fe2a 	bl	8006c4c <_SendPacket>
  RECORD_END();
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f383 8811 	msr	BASEPRI, r3
}
 8006ffe:	bf00      	nop
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	2000d470 	.word	0x2000d470

0800700c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800700c:	b580      	push	{r7, lr}
 800700e:	b088      	sub	sp, #32
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007016:	f3ef 8311 	mrs	r3, BASEPRI
 800701a:	f04f 0120 	mov.w	r1, #32
 800701e:	f381 8811 	msr	BASEPRI, r1
 8007022:	617b      	str	r3, [r7, #20]
 8007024:	4816      	ldr	r0, [pc, #88]	; (8007080 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8007026:	f7ff fd23 	bl	8006a70 <_PreparePacket>
 800702a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	61fb      	str	r3, [r7, #28]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	61bb      	str	r3, [r7, #24]
 8007038:	e00b      	b.n	8007052 <SEGGER_SYSVIEW_RecordU32+0x46>
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	b2da      	uxtb	r2, r3
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	1c59      	adds	r1, r3, #1
 8007042:	61f9      	str	r1, [r7, #28]
 8007044:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007048:	b2d2      	uxtb	r2, r2
 800704a:	701a      	strb	r2, [r3, #0]
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	09db      	lsrs	r3, r3, #7
 8007050:	61bb      	str	r3, [r7, #24]
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	2b7f      	cmp	r3, #127	; 0x7f
 8007056:	d8f0      	bhi.n	800703a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	61fa      	str	r2, [r7, #28]
 800705e:	69ba      	ldr	r2, [r7, #24]
 8007060:	b2d2      	uxtb	r2, r2
 8007062:	701a      	strb	r2, [r3, #0]
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	68f9      	ldr	r1, [r7, #12]
 800706c:	6938      	ldr	r0, [r7, #16]
 800706e:	f7ff fded 	bl	8006c4c <_SendPacket>
  RECORD_END();
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f383 8811 	msr	BASEPRI, r3
}
 8007078:	bf00      	nop
 800707a:	3720      	adds	r7, #32
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	2000d470 	.word	0x2000d470

08007084 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8007084:	b580      	push	{r7, lr}
 8007086:	b08c      	sub	sp, #48	; 0x30
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007090:	f3ef 8311 	mrs	r3, BASEPRI
 8007094:	f04f 0120 	mov.w	r1, #32
 8007098:	f381 8811 	msr	BASEPRI, r1
 800709c:	61fb      	str	r3, [r7, #28]
 800709e:	4825      	ldr	r0, [pc, #148]	; (8007134 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80070a0:	f7ff fce6 	bl	8006a70 <_PreparePacket>
 80070a4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80070b2:	e00b      	b.n	80070cc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80070b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b6:	b2da      	uxtb	r2, r3
 80070b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ba:	1c59      	adds	r1, r3, #1
 80070bc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80070be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070c2:	b2d2      	uxtb	r2, r2
 80070c4:	701a      	strb	r2, [r3, #0]
 80070c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c8:	09db      	lsrs	r3, r3, #7
 80070ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80070cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ce:	2b7f      	cmp	r3, #127	; 0x7f
 80070d0:	d8f0      	bhi.n	80070b4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80070d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d4:	1c5a      	adds	r2, r3, #1
 80070d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070da:	b2d2      	uxtb	r2, r2
 80070dc:	701a      	strb	r2, [r3, #0]
 80070de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	627b      	str	r3, [r7, #36]	; 0x24
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	623b      	str	r3, [r7, #32]
 80070ea:	e00b      	b.n	8007104 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80070ec:	6a3b      	ldr	r3, [r7, #32]
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f2:	1c59      	adds	r1, r3, #1
 80070f4:	6279      	str	r1, [r7, #36]	; 0x24
 80070f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070fa:	b2d2      	uxtb	r2, r2
 80070fc:	701a      	strb	r2, [r3, #0]
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	09db      	lsrs	r3, r3, #7
 8007102:	623b      	str	r3, [r7, #32]
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	2b7f      	cmp	r3, #127	; 0x7f
 8007108:	d8f0      	bhi.n	80070ec <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	1c5a      	adds	r2, r3, #1
 800710e:	627a      	str	r2, [r7, #36]	; 0x24
 8007110:	6a3a      	ldr	r2, [r7, #32]
 8007112:	b2d2      	uxtb	r2, r2
 8007114:	701a      	strb	r2, [r3, #0]
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	6979      	ldr	r1, [r7, #20]
 800711e:	69b8      	ldr	r0, [r7, #24]
 8007120:	f7ff fd94 	bl	8006c4c <_SendPacket>
  RECORD_END();
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	f383 8811 	msr	BASEPRI, r3
}
 800712a:	bf00      	nop
 800712c:	3730      	adds	r7, #48	; 0x30
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	2000d470 	.word	0x2000d470

08007138 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8007138:	b580      	push	{r7, lr}
 800713a:	b08e      	sub	sp, #56	; 0x38
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
 8007144:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8007146:	f3ef 8311 	mrs	r3, BASEPRI
 800714a:	f04f 0120 	mov.w	r1, #32
 800714e:	f381 8811 	msr	BASEPRI, r1
 8007152:	61fb      	str	r3, [r7, #28]
 8007154:	4832      	ldr	r0, [pc, #200]	; (8007220 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8007156:	f7ff fc8b 	bl	8006a70 <_PreparePacket>
 800715a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	637b      	str	r3, [r7, #52]	; 0x34
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	633b      	str	r3, [r7, #48]	; 0x30
 8007168:	e00b      	b.n	8007182 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800716a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716c:	b2da      	uxtb	r2, r3
 800716e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007170:	1c59      	adds	r1, r3, #1
 8007172:	6379      	str	r1, [r7, #52]	; 0x34
 8007174:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007178:	b2d2      	uxtb	r2, r2
 800717a:	701a      	strb	r2, [r3, #0]
 800717c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717e:	09db      	lsrs	r3, r3, #7
 8007180:	633b      	str	r3, [r7, #48]	; 0x30
 8007182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007184:	2b7f      	cmp	r3, #127	; 0x7f
 8007186:	d8f0      	bhi.n	800716a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8007188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800718a:	1c5a      	adds	r2, r3, #1
 800718c:	637a      	str	r2, [r7, #52]	; 0x34
 800718e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007190:	b2d2      	uxtb	r2, r2
 8007192:	701a      	strb	r2, [r3, #0]
 8007194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007196:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	62bb      	str	r3, [r7, #40]	; 0x28
 80071a0:	e00b      	b.n	80071ba <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80071a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a4:	b2da      	uxtb	r2, r3
 80071a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a8:	1c59      	adds	r1, r3, #1
 80071aa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80071ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071b0:	b2d2      	uxtb	r2, r2
 80071b2:	701a      	strb	r2, [r3, #0]
 80071b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b6:	09db      	lsrs	r3, r3, #7
 80071b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80071ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071bc:	2b7f      	cmp	r3, #127	; 0x7f
 80071be:	d8f0      	bhi.n	80071a2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80071c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c2:	1c5a      	adds	r2, r3, #1
 80071c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071c8:	b2d2      	uxtb	r2, r2
 80071ca:	701a      	strb	r2, [r3, #0]
 80071cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	627b      	str	r3, [r7, #36]	; 0x24
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	623b      	str	r3, [r7, #32]
 80071d8:	e00b      	b.n	80071f2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	b2da      	uxtb	r2, r3
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	1c59      	adds	r1, r3, #1
 80071e2:	6279      	str	r1, [r7, #36]	; 0x24
 80071e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071e8:	b2d2      	uxtb	r2, r2
 80071ea:	701a      	strb	r2, [r3, #0]
 80071ec:	6a3b      	ldr	r3, [r7, #32]
 80071ee:	09db      	lsrs	r3, r3, #7
 80071f0:	623b      	str	r3, [r7, #32]
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	2b7f      	cmp	r3, #127	; 0x7f
 80071f6:	d8f0      	bhi.n	80071da <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	1c5a      	adds	r2, r3, #1
 80071fc:	627a      	str	r2, [r7, #36]	; 0x24
 80071fe:	6a3a      	ldr	r2, [r7, #32]
 8007200:	b2d2      	uxtb	r2, r2
 8007202:	701a      	strb	r2, [r3, #0]
 8007204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007206:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	6979      	ldr	r1, [r7, #20]
 800720c:	69b8      	ldr	r0, [r7, #24]
 800720e:	f7ff fd1d 	bl	8006c4c <_SendPacket>
  RECORD_END();
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	f383 8811 	msr	BASEPRI, r3
}
 8007218:	bf00      	nop
 800721a:	3738      	adds	r7, #56	; 0x38
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	2000d470 	.word	0x2000d470

08007224 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8007224:	b580      	push	{r7, lr}
 8007226:	b090      	sub	sp, #64	; 0x40
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
 8007230:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007232:	f3ef 8311 	mrs	r3, BASEPRI
 8007236:	f04f 0120 	mov.w	r1, #32
 800723a:	f381 8811 	msr	BASEPRI, r1
 800723e:	61fb      	str	r3, [r7, #28]
 8007240:	4840      	ldr	r0, [pc, #256]	; (8007344 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8007242:	f7ff fc15 	bl	8006a70 <_PreparePacket>
 8007246:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	63bb      	str	r3, [r7, #56]	; 0x38
 8007254:	e00b      	b.n	800726e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8007256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007258:	b2da      	uxtb	r2, r3
 800725a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800725c:	1c59      	adds	r1, r3, #1
 800725e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007260:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007264:	b2d2      	uxtb	r2, r2
 8007266:	701a      	strb	r2, [r3, #0]
 8007268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726a:	09db      	lsrs	r3, r3, #7
 800726c:	63bb      	str	r3, [r7, #56]	; 0x38
 800726e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007270:	2b7f      	cmp	r3, #127	; 0x7f
 8007272:	d8f0      	bhi.n	8007256 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8007274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007276:	1c5a      	adds	r2, r3, #1
 8007278:	63fa      	str	r2, [r7, #60]	; 0x3c
 800727a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800727c:	b2d2      	uxtb	r2, r2
 800727e:	701a      	strb	r2, [r3, #0]
 8007280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007282:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	637b      	str	r3, [r7, #52]	; 0x34
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	633b      	str	r3, [r7, #48]	; 0x30
 800728c:	e00b      	b.n	80072a6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800728e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007290:	b2da      	uxtb	r2, r3
 8007292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007294:	1c59      	adds	r1, r3, #1
 8007296:	6379      	str	r1, [r7, #52]	; 0x34
 8007298:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800729c:	b2d2      	uxtb	r2, r2
 800729e:	701a      	strb	r2, [r3, #0]
 80072a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a2:	09db      	lsrs	r3, r3, #7
 80072a4:	633b      	str	r3, [r7, #48]	; 0x30
 80072a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a8:	2b7f      	cmp	r3, #127	; 0x7f
 80072aa:	d8f0      	bhi.n	800728e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80072ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ae:	1c5a      	adds	r2, r3, #1
 80072b0:	637a      	str	r2, [r7, #52]	; 0x34
 80072b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072b4:	b2d2      	uxtb	r2, r2
 80072b6:	701a      	strb	r2, [r3, #0]
 80072b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80072c4:	e00b      	b.n	80072de <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80072c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072cc:	1c59      	adds	r1, r3, #1
 80072ce:	62f9      	str	r1, [r7, #44]	; 0x2c
 80072d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072d4:	b2d2      	uxtb	r2, r2
 80072d6:	701a      	strb	r2, [r3, #0]
 80072d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072da:	09db      	lsrs	r3, r3, #7
 80072dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80072de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e0:	2b7f      	cmp	r3, #127	; 0x7f
 80072e2:	d8f0      	bhi.n	80072c6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80072e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e6:	1c5a      	adds	r2, r3, #1
 80072e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072ec:	b2d2      	uxtb	r2, r2
 80072ee:	701a      	strb	r2, [r3, #0]
 80072f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	627b      	str	r3, [r7, #36]	; 0x24
 80072f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072fa:	623b      	str	r3, [r7, #32]
 80072fc:	e00b      	b.n	8007316 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	b2da      	uxtb	r2, r3
 8007302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007304:	1c59      	adds	r1, r3, #1
 8007306:	6279      	str	r1, [r7, #36]	; 0x24
 8007308:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800730c:	b2d2      	uxtb	r2, r2
 800730e:	701a      	strb	r2, [r3, #0]
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	09db      	lsrs	r3, r3, #7
 8007314:	623b      	str	r3, [r7, #32]
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	2b7f      	cmp	r3, #127	; 0x7f
 800731a:	d8f0      	bhi.n	80072fe <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731e:	1c5a      	adds	r2, r3, #1
 8007320:	627a      	str	r2, [r7, #36]	; 0x24
 8007322:	6a3a      	ldr	r2, [r7, #32]
 8007324:	b2d2      	uxtb	r2, r2
 8007326:	701a      	strb	r2, [r3, #0]
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	6979      	ldr	r1, [r7, #20]
 8007330:	69b8      	ldr	r0, [r7, #24]
 8007332:	f7ff fc8b 	bl	8006c4c <_SendPacket>
  RECORD_END();
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	f383 8811 	msr	BASEPRI, r3
}
 800733c:	bf00      	nop
 800733e:	3740      	adds	r7, #64	; 0x40
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	2000d470 	.word	0x2000d470

08007348 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8007348:	b580      	push	{r7, lr}
 800734a:	b08c      	sub	sp, #48	; 0x30
 800734c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800734e:	4b58      	ldr	r3, [pc, #352]	; (80074b0 <SEGGER_SYSVIEW_Start+0x168>)
 8007350:	2201      	movs	r2, #1
 8007352:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007354:	f3ef 8311 	mrs	r3, BASEPRI
 8007358:	f04f 0120 	mov.w	r1, #32
 800735c:	f381 8811 	msr	BASEPRI, r1
 8007360:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007362:	4b53      	ldr	r3, [pc, #332]	; (80074b0 <SEGGER_SYSVIEW_Start+0x168>)
 8007364:	785b      	ldrb	r3, [r3, #1]
 8007366:	220a      	movs	r2, #10
 8007368:	4952      	ldr	r1, [pc, #328]	; (80074b4 <SEGGER_SYSVIEW_Start+0x16c>)
 800736a:	4618      	mov	r0, r3
 800736c:	f7f8 ff38 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8007376:	200a      	movs	r0, #10
 8007378:	f7ff fe2a 	bl	8006fd0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800737c:	f3ef 8311 	mrs	r3, BASEPRI
 8007380:	f04f 0120 	mov.w	r1, #32
 8007384:	f381 8811 	msr	BASEPRI, r1
 8007388:	60bb      	str	r3, [r7, #8]
 800738a:	484b      	ldr	r0, [pc, #300]	; (80074b8 <SEGGER_SYSVIEW_Start+0x170>)
 800738c:	f7ff fb70 	bl	8006a70 <_PreparePacket>
 8007390:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800739a:	4b45      	ldr	r3, [pc, #276]	; (80074b0 <SEGGER_SYSVIEW_Start+0x168>)
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	62bb      	str	r3, [r7, #40]	; 0x28
 80073a0:	e00b      	b.n	80073ba <SEGGER_SYSVIEW_Start+0x72>
 80073a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a4:	b2da      	uxtb	r2, r3
 80073a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a8:	1c59      	adds	r1, r3, #1
 80073aa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80073ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073b0:	b2d2      	uxtb	r2, r2
 80073b2:	701a      	strb	r2, [r3, #0]
 80073b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b6:	09db      	lsrs	r3, r3, #7
 80073b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80073ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073bc:	2b7f      	cmp	r3, #127	; 0x7f
 80073be:	d8f0      	bhi.n	80073a2 <SEGGER_SYSVIEW_Start+0x5a>
 80073c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c2:	1c5a      	adds	r2, r3, #1
 80073c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073c8:	b2d2      	uxtb	r2, r2
 80073ca:	701a      	strb	r2, [r3, #0]
 80073cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ce:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	627b      	str	r3, [r7, #36]	; 0x24
 80073d4:	4b36      	ldr	r3, [pc, #216]	; (80074b0 <SEGGER_SYSVIEW_Start+0x168>)
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	623b      	str	r3, [r7, #32]
 80073da:	e00b      	b.n	80073f4 <SEGGER_SYSVIEW_Start+0xac>
 80073dc:	6a3b      	ldr	r3, [r7, #32]
 80073de:	b2da      	uxtb	r2, r3
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	1c59      	adds	r1, r3, #1
 80073e4:	6279      	str	r1, [r7, #36]	; 0x24
 80073e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073ea:	b2d2      	uxtb	r2, r2
 80073ec:	701a      	strb	r2, [r3, #0]
 80073ee:	6a3b      	ldr	r3, [r7, #32]
 80073f0:	09db      	lsrs	r3, r3, #7
 80073f2:	623b      	str	r3, [r7, #32]
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	2b7f      	cmp	r3, #127	; 0x7f
 80073f8:	d8f0      	bhi.n	80073dc <SEGGER_SYSVIEW_Start+0x94>
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	1c5a      	adds	r2, r3, #1
 80073fe:	627a      	str	r2, [r7, #36]	; 0x24
 8007400:	6a3a      	ldr	r2, [r7, #32]
 8007402:	b2d2      	uxtb	r2, r2
 8007404:	701a      	strb	r2, [r3, #0]
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	61fb      	str	r3, [r7, #28]
 800740e:	4b28      	ldr	r3, [pc, #160]	; (80074b0 <SEGGER_SYSVIEW_Start+0x168>)
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	61bb      	str	r3, [r7, #24]
 8007414:	e00b      	b.n	800742e <SEGGER_SYSVIEW_Start+0xe6>
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	b2da      	uxtb	r2, r3
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	1c59      	adds	r1, r3, #1
 800741e:	61f9      	str	r1, [r7, #28]
 8007420:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007424:	b2d2      	uxtb	r2, r2
 8007426:	701a      	strb	r2, [r3, #0]
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	09db      	lsrs	r3, r3, #7
 800742c:	61bb      	str	r3, [r7, #24]
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	2b7f      	cmp	r3, #127	; 0x7f
 8007432:	d8f0      	bhi.n	8007416 <SEGGER_SYSVIEW_Start+0xce>
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	1c5a      	adds	r2, r3, #1
 8007438:	61fa      	str	r2, [r7, #28]
 800743a:	69ba      	ldr	r2, [r7, #24]
 800743c:	b2d2      	uxtb	r2, r2
 800743e:	701a      	strb	r2, [r3, #0]
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	617b      	str	r3, [r7, #20]
 8007448:	2300      	movs	r3, #0
 800744a:	613b      	str	r3, [r7, #16]
 800744c:	e00b      	b.n	8007466 <SEGGER_SYSVIEW_Start+0x11e>
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	b2da      	uxtb	r2, r3
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	1c59      	adds	r1, r3, #1
 8007456:	6179      	str	r1, [r7, #20]
 8007458:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800745c:	b2d2      	uxtb	r2, r2
 800745e:	701a      	strb	r2, [r3, #0]
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	09db      	lsrs	r3, r3, #7
 8007464:	613b      	str	r3, [r7, #16]
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	2b7f      	cmp	r3, #127	; 0x7f
 800746a:	d8f0      	bhi.n	800744e <SEGGER_SYSVIEW_Start+0x106>
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	1c5a      	adds	r2, r3, #1
 8007470:	617a      	str	r2, [r7, #20]
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	b2d2      	uxtb	r2, r2
 8007476:	701a      	strb	r2, [r3, #0]
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800747c:	2218      	movs	r2, #24
 800747e:	6839      	ldr	r1, [r7, #0]
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7ff fbe3 	bl	8006c4c <_SendPacket>
      RECORD_END();
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800748c:	4b08      	ldr	r3, [pc, #32]	; (80074b0 <SEGGER_SYSVIEW_Start+0x168>)
 800748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007490:	2b00      	cmp	r3, #0
 8007492:	d002      	beq.n	800749a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007494:	4b06      	ldr	r3, [pc, #24]	; (80074b0 <SEGGER_SYSVIEW_Start+0x168>)
 8007496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007498:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800749a:	f000 f9eb 	bl	8007874 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800749e:	f000 f9b1 	bl	8007804 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80074a2:	f000 fbb3 	bl	8007c0c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80074a6:	bf00      	nop
 80074a8:	3730      	adds	r7, #48	; 0x30
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	2000d440 	.word	0x2000d440
 80074b4:	08009358 	.word	0x08009358
 80074b8:	2000d470 	.word	0x2000d470

080074bc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80074c2:	f3ef 8311 	mrs	r3, BASEPRI
 80074c6:	f04f 0120 	mov.w	r1, #32
 80074ca:	f381 8811 	msr	BASEPRI, r1
 80074ce:	607b      	str	r3, [r7, #4]
 80074d0:	480b      	ldr	r0, [pc, #44]	; (8007500 <SEGGER_SYSVIEW_Stop+0x44>)
 80074d2:	f7ff facd 	bl	8006a70 <_PreparePacket>
 80074d6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80074d8:	4b0a      	ldr	r3, [pc, #40]	; (8007504 <SEGGER_SYSVIEW_Stop+0x48>)
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d007      	beq.n	80074f0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80074e0:	220b      	movs	r2, #11
 80074e2:	6839      	ldr	r1, [r7, #0]
 80074e4:	6838      	ldr	r0, [r7, #0]
 80074e6:	f7ff fbb1 	bl	8006c4c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80074ea:	4b06      	ldr	r3, [pc, #24]	; (8007504 <SEGGER_SYSVIEW_Stop+0x48>)
 80074ec:	2200      	movs	r2, #0
 80074ee:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f383 8811 	msr	BASEPRI, r3
}
 80074f6:	bf00      	nop
 80074f8:	3708      	adds	r7, #8
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	2000d470 	.word	0x2000d470
 8007504:	2000d440 	.word	0x2000d440

08007508 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8007508:	b580      	push	{r7, lr}
 800750a:	b08c      	sub	sp, #48	; 0x30
 800750c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800750e:	f3ef 8311 	mrs	r3, BASEPRI
 8007512:	f04f 0120 	mov.w	r1, #32
 8007516:	f381 8811 	msr	BASEPRI, r1
 800751a:	60fb      	str	r3, [r7, #12]
 800751c:	4845      	ldr	r0, [pc, #276]	; (8007634 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800751e:	f7ff faa7 	bl	8006a70 <_PreparePacket>
 8007522:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800752c:	4b42      	ldr	r3, [pc, #264]	; (8007638 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	62bb      	str	r3, [r7, #40]	; 0x28
 8007532:	e00b      	b.n	800754c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007536:	b2da      	uxtb	r2, r3
 8007538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753a:	1c59      	adds	r1, r3, #1
 800753c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800753e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007542:	b2d2      	uxtb	r2, r2
 8007544:	701a      	strb	r2, [r3, #0]
 8007546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007548:	09db      	lsrs	r3, r3, #7
 800754a:	62bb      	str	r3, [r7, #40]	; 0x28
 800754c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754e:	2b7f      	cmp	r3, #127	; 0x7f
 8007550:	d8f0      	bhi.n	8007534 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8007552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007554:	1c5a      	adds	r2, r3, #1
 8007556:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800755a:	b2d2      	uxtb	r2, r2
 800755c:	701a      	strb	r2, [r3, #0]
 800755e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007560:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	627b      	str	r3, [r7, #36]	; 0x24
 8007566:	4b34      	ldr	r3, [pc, #208]	; (8007638 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	623b      	str	r3, [r7, #32]
 800756c:	e00b      	b.n	8007586 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800756e:	6a3b      	ldr	r3, [r7, #32]
 8007570:	b2da      	uxtb	r2, r3
 8007572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007574:	1c59      	adds	r1, r3, #1
 8007576:	6279      	str	r1, [r7, #36]	; 0x24
 8007578:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800757c:	b2d2      	uxtb	r2, r2
 800757e:	701a      	strb	r2, [r3, #0]
 8007580:	6a3b      	ldr	r3, [r7, #32]
 8007582:	09db      	lsrs	r3, r3, #7
 8007584:	623b      	str	r3, [r7, #32]
 8007586:	6a3b      	ldr	r3, [r7, #32]
 8007588:	2b7f      	cmp	r3, #127	; 0x7f
 800758a:	d8f0      	bhi.n	800756e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800758c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758e:	1c5a      	adds	r2, r3, #1
 8007590:	627a      	str	r2, [r7, #36]	; 0x24
 8007592:	6a3a      	ldr	r2, [r7, #32]
 8007594:	b2d2      	uxtb	r2, r2
 8007596:	701a      	strb	r2, [r3, #0]
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	61fb      	str	r3, [r7, #28]
 80075a0:	4b25      	ldr	r3, [pc, #148]	; (8007638 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	61bb      	str	r3, [r7, #24]
 80075a6:	e00b      	b.n	80075c0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	b2da      	uxtb	r2, r3
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	1c59      	adds	r1, r3, #1
 80075b0:	61f9      	str	r1, [r7, #28]
 80075b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075b6:	b2d2      	uxtb	r2, r2
 80075b8:	701a      	strb	r2, [r3, #0]
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	09db      	lsrs	r3, r3, #7
 80075be:	61bb      	str	r3, [r7, #24]
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	2b7f      	cmp	r3, #127	; 0x7f
 80075c4:	d8f0      	bhi.n	80075a8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	1c5a      	adds	r2, r3, #1
 80075ca:	61fa      	str	r2, [r7, #28]
 80075cc:	69ba      	ldr	r2, [r7, #24]
 80075ce:	b2d2      	uxtb	r2, r2
 80075d0:	701a      	strb	r2, [r3, #0]
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	617b      	str	r3, [r7, #20]
 80075da:	2300      	movs	r3, #0
 80075dc:	613b      	str	r3, [r7, #16]
 80075de:	e00b      	b.n	80075f8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	1c59      	adds	r1, r3, #1
 80075e8:	6179      	str	r1, [r7, #20]
 80075ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075ee:	b2d2      	uxtb	r2, r2
 80075f0:	701a      	strb	r2, [r3, #0]
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	09db      	lsrs	r3, r3, #7
 80075f6:	613b      	str	r3, [r7, #16]
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	2b7f      	cmp	r3, #127	; 0x7f
 80075fc:	d8f0      	bhi.n	80075e0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	1c5a      	adds	r2, r3, #1
 8007602:	617a      	str	r2, [r7, #20]
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	b2d2      	uxtb	r2, r2
 8007608:	701a      	strb	r2, [r3, #0]
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800760e:	2218      	movs	r2, #24
 8007610:	6879      	ldr	r1, [r7, #4]
 8007612:	68b8      	ldr	r0, [r7, #8]
 8007614:	f7ff fb1a 	bl	8006c4c <_SendPacket>
  RECORD_END();
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800761e:	4b06      	ldr	r3, [pc, #24]	; (8007638 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007622:	2b00      	cmp	r3, #0
 8007624:	d002      	beq.n	800762c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8007626:	4b04      	ldr	r3, [pc, #16]	; (8007638 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762a:	4798      	blx	r3
  }
}
 800762c:	bf00      	nop
 800762e:	3730      	adds	r7, #48	; 0x30
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	2000d470 	.word	0x2000d470
 8007638:	2000d440 	.word	0x2000d440

0800763c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800763c:	b580      	push	{r7, lr}
 800763e:	b092      	sub	sp, #72	; 0x48
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007644:	f3ef 8311 	mrs	r3, BASEPRI
 8007648:	f04f 0120 	mov.w	r1, #32
 800764c:	f381 8811 	msr	BASEPRI, r1
 8007650:	617b      	str	r3, [r7, #20]
 8007652:	486a      	ldr	r0, [pc, #424]	; (80077fc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007654:	f7ff fa0c 	bl	8006a70 <_PreparePacket>
 8007658:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	647b      	str	r3, [r7, #68]	; 0x44
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	4b66      	ldr	r3, [pc, #408]	; (8007800 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	643b      	str	r3, [r7, #64]	; 0x40
 800766e:	e00b      	b.n	8007688 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007672:	b2da      	uxtb	r2, r3
 8007674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007676:	1c59      	adds	r1, r3, #1
 8007678:	6479      	str	r1, [r7, #68]	; 0x44
 800767a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800767e:	b2d2      	uxtb	r2, r2
 8007680:	701a      	strb	r2, [r3, #0]
 8007682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007684:	09db      	lsrs	r3, r3, #7
 8007686:	643b      	str	r3, [r7, #64]	; 0x40
 8007688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800768a:	2b7f      	cmp	r3, #127	; 0x7f
 800768c:	d8f0      	bhi.n	8007670 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800768e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007690:	1c5a      	adds	r2, r3, #1
 8007692:	647a      	str	r2, [r7, #68]	; 0x44
 8007694:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007696:	b2d2      	uxtb	r2, r2
 8007698:	701a      	strb	r2, [r3, #0]
 800769a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800769c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80076a8:	e00b      	b.n	80076c2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80076aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b0:	1c59      	adds	r1, r3, #1
 80076b2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80076b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076b8:	b2d2      	uxtb	r2, r2
 80076ba:	701a      	strb	r2, [r3, #0]
 80076bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076be:	09db      	lsrs	r3, r3, #7
 80076c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80076c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c4:	2b7f      	cmp	r3, #127	; 0x7f
 80076c6:	d8f0      	bhi.n	80076aa <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80076c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ca:	1c5a      	adds	r2, r3, #1
 80076cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80076ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076d0:	b2d2      	uxtb	r2, r2
 80076d2:	701a      	strb	r2, [r3, #0]
 80076d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	2220      	movs	r2, #32
 80076de:	4619      	mov	r1, r3
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f7ff f995 	bl	8006a10 <_EncodeStr>
 80076e6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80076e8:	2209      	movs	r2, #9
 80076ea:	68f9      	ldr	r1, [r7, #12]
 80076ec:	6938      	ldr	r0, [r7, #16]
 80076ee:	f7ff faad 	bl	8006c4c <_SendPacket>
  //
  pPayload = pPayloadStart;
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	637b      	str	r3, [r7, #52]	; 0x34
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	4b40      	ldr	r3, [pc, #256]	; (8007800 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	633b      	str	r3, [r7, #48]	; 0x30
 8007706:	e00b      	b.n	8007720 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8007708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770a:	b2da      	uxtb	r2, r3
 800770c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800770e:	1c59      	adds	r1, r3, #1
 8007710:	6379      	str	r1, [r7, #52]	; 0x34
 8007712:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007716:	b2d2      	uxtb	r2, r2
 8007718:	701a      	strb	r2, [r3, #0]
 800771a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771c:	09db      	lsrs	r3, r3, #7
 800771e:	633b      	str	r3, [r7, #48]	; 0x30
 8007720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007722:	2b7f      	cmp	r3, #127	; 0x7f
 8007724:	d8f0      	bhi.n	8007708 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8007726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007728:	1c5a      	adds	r2, r3, #1
 800772a:	637a      	str	r2, [r7, #52]	; 0x34
 800772c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800772e:	b2d2      	uxtb	r2, r2
 8007730:	701a      	strb	r2, [r3, #0]
 8007732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007734:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007740:	e00b      	b.n	800775a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007744:	b2da      	uxtb	r2, r3
 8007746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007748:	1c59      	adds	r1, r3, #1
 800774a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800774c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007750:	b2d2      	uxtb	r2, r2
 8007752:	701a      	strb	r2, [r3, #0]
 8007754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007756:	09db      	lsrs	r3, r3, #7
 8007758:	62bb      	str	r3, [r7, #40]	; 0x28
 800775a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775c:	2b7f      	cmp	r3, #127	; 0x7f
 800775e:	d8f0      	bhi.n	8007742 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007762:	1c5a      	adds	r2, r3, #1
 8007764:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007768:	b2d2      	uxtb	r2, r2
 800776a:	701a      	strb	r2, [r3, #0]
 800776c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	627b      	str	r3, [r7, #36]	; 0x24
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	623b      	str	r3, [r7, #32]
 800777a:	e00b      	b.n	8007794 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800777c:	6a3b      	ldr	r3, [r7, #32]
 800777e:	b2da      	uxtb	r2, r3
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	1c59      	adds	r1, r3, #1
 8007784:	6279      	str	r1, [r7, #36]	; 0x24
 8007786:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800778a:	b2d2      	uxtb	r2, r2
 800778c:	701a      	strb	r2, [r3, #0]
 800778e:	6a3b      	ldr	r3, [r7, #32]
 8007790:	09db      	lsrs	r3, r3, #7
 8007792:	623b      	str	r3, [r7, #32]
 8007794:	6a3b      	ldr	r3, [r7, #32]
 8007796:	2b7f      	cmp	r3, #127	; 0x7f
 8007798:	d8f0      	bhi.n	800777c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	1c5a      	adds	r2, r3, #1
 800779e:	627a      	str	r2, [r7, #36]	; 0x24
 80077a0:	6a3a      	ldr	r2, [r7, #32]
 80077a2:	b2d2      	uxtb	r2, r2
 80077a4:	701a      	strb	r2, [r3, #0]
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	61fb      	str	r3, [r7, #28]
 80077ae:	2300      	movs	r3, #0
 80077b0:	61bb      	str	r3, [r7, #24]
 80077b2:	e00b      	b.n	80077cc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	1c59      	adds	r1, r3, #1
 80077bc:	61f9      	str	r1, [r7, #28]
 80077be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077c2:	b2d2      	uxtb	r2, r2
 80077c4:	701a      	strb	r2, [r3, #0]
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	09db      	lsrs	r3, r3, #7
 80077ca:	61bb      	str	r3, [r7, #24]
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	2b7f      	cmp	r3, #127	; 0x7f
 80077d0:	d8f0      	bhi.n	80077b4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	1c5a      	adds	r2, r3, #1
 80077d6:	61fa      	str	r2, [r7, #28]
 80077d8:	69ba      	ldr	r2, [r7, #24]
 80077da:	b2d2      	uxtb	r2, r2
 80077dc:	701a      	strb	r2, [r3, #0]
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80077e2:	2215      	movs	r2, #21
 80077e4:	68f9      	ldr	r1, [r7, #12]
 80077e6:	6938      	ldr	r0, [r7, #16]
 80077e8:	f7ff fa30 	bl	8006c4c <_SendPacket>
  RECORD_END();
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f383 8811 	msr	BASEPRI, r3
}
 80077f2:	bf00      	nop
 80077f4:	3748      	adds	r7, #72	; 0x48
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	2000d470 	.word	0x2000d470
 8007800:	2000d440 	.word	0x2000d440

08007804 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007804:	b580      	push	{r7, lr}
 8007806:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007808:	4b07      	ldr	r3, [pc, #28]	; (8007828 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800780a:	6a1b      	ldr	r3, [r3, #32]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d008      	beq.n	8007822 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007810:	4b05      	ldr	r3, [pc, #20]	; (8007828 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007812:	6a1b      	ldr	r3, [r3, #32]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d003      	beq.n	8007822 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800781a:	4b03      	ldr	r3, [pc, #12]	; (8007828 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	4798      	blx	r3
  }
}
 8007822:	bf00      	nop
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	2000d440 	.word	0x2000d440

0800782c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007834:	f3ef 8311 	mrs	r3, BASEPRI
 8007838:	f04f 0120 	mov.w	r1, #32
 800783c:	f381 8811 	msr	BASEPRI, r1
 8007840:	617b      	str	r3, [r7, #20]
 8007842:	480b      	ldr	r0, [pc, #44]	; (8007870 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007844:	f7ff f914 	bl	8006a70 <_PreparePacket>
 8007848:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800784a:	2280      	movs	r2, #128	; 0x80
 800784c:	6879      	ldr	r1, [r7, #4]
 800784e:	6938      	ldr	r0, [r7, #16]
 8007850:	f7ff f8de 	bl	8006a10 <_EncodeStr>
 8007854:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8007856:	220e      	movs	r2, #14
 8007858:	68f9      	ldr	r1, [r7, #12]
 800785a:	6938      	ldr	r0, [r7, #16]
 800785c:	f7ff f9f6 	bl	8006c4c <_SendPacket>
  RECORD_END();
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	f383 8811 	msr	BASEPRI, r3
}
 8007866:	bf00      	nop
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	2000d470 	.word	0x2000d470

08007874 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007874:	b590      	push	{r4, r7, lr}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800787a:	4b15      	ldr	r3, [pc, #84]	; (80078d0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d01a      	beq.n	80078b8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007882:	4b13      	ldr	r3, [pc, #76]	; (80078d0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d015      	beq.n	80078b8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800788c:	4b10      	ldr	r3, [pc, #64]	; (80078d0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800788e:	6a1b      	ldr	r3, [r3, #32]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4798      	blx	r3
 8007894:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007898:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800789a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800789e:	f04f 0200 	mov.w	r2, #0
 80078a2:	f04f 0300 	mov.w	r3, #0
 80078a6:	000a      	movs	r2, r1
 80078a8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80078aa:	4613      	mov	r3, r2
 80078ac:	461a      	mov	r2, r3
 80078ae:	4621      	mov	r1, r4
 80078b0:	200d      	movs	r0, #13
 80078b2:	f7ff fbe7 	bl	8007084 <SEGGER_SYSVIEW_RecordU32x2>
 80078b6:	e006      	b.n	80078c6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80078b8:	4b06      	ldr	r3, [pc, #24]	; (80078d4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4619      	mov	r1, r3
 80078be:	200c      	movs	r0, #12
 80078c0:	f7ff fba4 	bl	800700c <SEGGER_SYSVIEW_RecordU32>
  }
}
 80078c4:	bf00      	nop
 80078c6:	bf00      	nop
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd90      	pop	{r4, r7, pc}
 80078ce:	bf00      	nop
 80078d0:	2000d440 	.word	0x2000d440
 80078d4:	e0001004 	.word	0xe0001004

080078d8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80078de:	f3ef 8311 	mrs	r3, BASEPRI
 80078e2:	f04f 0120 	mov.w	r1, #32
 80078e6:	f381 8811 	msr	BASEPRI, r1
 80078ea:	607b      	str	r3, [r7, #4]
 80078ec:	4807      	ldr	r0, [pc, #28]	; (800790c <SEGGER_SYSVIEW_OnIdle+0x34>)
 80078ee:	f7ff f8bf 	bl	8006a70 <_PreparePacket>
 80078f2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80078f4:	2211      	movs	r2, #17
 80078f6:	6839      	ldr	r1, [r7, #0]
 80078f8:	6838      	ldr	r0, [r7, #0]
 80078fa:	f7ff f9a7 	bl	8006c4c <_SendPacket>
  RECORD_END();
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f383 8811 	msr	BASEPRI, r3
}
 8007904:	bf00      	nop
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	2000d470 	.word	0x2000d470

08007910 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007910:	b580      	push	{r7, lr}
 8007912:	b088      	sub	sp, #32
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007918:	f3ef 8311 	mrs	r3, BASEPRI
 800791c:	f04f 0120 	mov.w	r1, #32
 8007920:	f381 8811 	msr	BASEPRI, r1
 8007924:	617b      	str	r3, [r7, #20]
 8007926:	4819      	ldr	r0, [pc, #100]	; (800798c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007928:	f7ff f8a2 	bl	8006a70 <_PreparePacket>
 800792c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007932:	4b17      	ldr	r3, [pc, #92]	; (8007990 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	61fb      	str	r3, [r7, #28]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	61bb      	str	r3, [r7, #24]
 8007944:	e00b      	b.n	800795e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	b2da      	uxtb	r2, r3
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	1c59      	adds	r1, r3, #1
 800794e:	61f9      	str	r1, [r7, #28]
 8007950:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007954:	b2d2      	uxtb	r2, r2
 8007956:	701a      	strb	r2, [r3, #0]
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	09db      	lsrs	r3, r3, #7
 800795c:	61bb      	str	r3, [r7, #24]
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	2b7f      	cmp	r3, #127	; 0x7f
 8007962:	d8f0      	bhi.n	8007946 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	1c5a      	adds	r2, r3, #1
 8007968:	61fa      	str	r2, [r7, #28]
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	b2d2      	uxtb	r2, r2
 800796e:	701a      	strb	r2, [r3, #0]
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007974:	2208      	movs	r2, #8
 8007976:	68f9      	ldr	r1, [r7, #12]
 8007978:	6938      	ldr	r0, [r7, #16]
 800797a:	f7ff f967 	bl	8006c4c <_SendPacket>
  RECORD_END();
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f383 8811 	msr	BASEPRI, r3
}
 8007984:	bf00      	nop
 8007986:	3720      	adds	r7, #32
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	2000d470 	.word	0x2000d470
 8007990:	2000d440 	.word	0x2000d440

08007994 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007994:	b580      	push	{r7, lr}
 8007996:	b088      	sub	sp, #32
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800799c:	f3ef 8311 	mrs	r3, BASEPRI
 80079a0:	f04f 0120 	mov.w	r1, #32
 80079a4:	f381 8811 	msr	BASEPRI, r1
 80079a8:	617b      	str	r3, [r7, #20]
 80079aa:	4819      	ldr	r0, [pc, #100]	; (8007a10 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80079ac:	f7ff f860 	bl	8006a70 <_PreparePacket>
 80079b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80079b6:	4b17      	ldr	r3, [pc, #92]	; (8007a14 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	61fb      	str	r3, [r7, #28]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	61bb      	str	r3, [r7, #24]
 80079c8:	e00b      	b.n	80079e2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	b2da      	uxtb	r2, r3
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	1c59      	adds	r1, r3, #1
 80079d2:	61f9      	str	r1, [r7, #28]
 80079d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079d8:	b2d2      	uxtb	r2, r2
 80079da:	701a      	strb	r2, [r3, #0]
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	09db      	lsrs	r3, r3, #7
 80079e0:	61bb      	str	r3, [r7, #24]
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	2b7f      	cmp	r3, #127	; 0x7f
 80079e6:	d8f0      	bhi.n	80079ca <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	1c5a      	adds	r2, r3, #1
 80079ec:	61fa      	str	r2, [r7, #28]
 80079ee:	69ba      	ldr	r2, [r7, #24]
 80079f0:	b2d2      	uxtb	r2, r2
 80079f2:	701a      	strb	r2, [r3, #0]
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80079f8:	2204      	movs	r2, #4
 80079fa:	68f9      	ldr	r1, [r7, #12]
 80079fc:	6938      	ldr	r0, [r7, #16]
 80079fe:	f7ff f925 	bl	8006c4c <_SendPacket>
  RECORD_END();
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	f383 8811 	msr	BASEPRI, r3
}
 8007a08:	bf00      	nop
 8007a0a:	3720      	adds	r7, #32
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	2000d470 	.word	0x2000d470
 8007a14:	2000d440 	.word	0x2000d440

08007a18 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b088      	sub	sp, #32
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007a20:	f3ef 8311 	mrs	r3, BASEPRI
 8007a24:	f04f 0120 	mov.w	r1, #32
 8007a28:	f381 8811 	msr	BASEPRI, r1
 8007a2c:	617b      	str	r3, [r7, #20]
 8007a2e:	4819      	ldr	r0, [pc, #100]	; (8007a94 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007a30:	f7ff f81e 	bl	8006a70 <_PreparePacket>
 8007a34:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007a3a:	4b17      	ldr	r3, [pc, #92]	; (8007a98 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	61fb      	str	r3, [r7, #28]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	61bb      	str	r3, [r7, #24]
 8007a4c:	e00b      	b.n	8007a66 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	1c59      	adds	r1, r3, #1
 8007a56:	61f9      	str	r1, [r7, #28]
 8007a58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a5c:	b2d2      	uxtb	r2, r2
 8007a5e:	701a      	strb	r2, [r3, #0]
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	09db      	lsrs	r3, r3, #7
 8007a64:	61bb      	str	r3, [r7, #24]
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	2b7f      	cmp	r3, #127	; 0x7f
 8007a6a:	d8f0      	bhi.n	8007a4e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	1c5a      	adds	r2, r3, #1
 8007a70:	61fa      	str	r2, [r7, #28]
 8007a72:	69ba      	ldr	r2, [r7, #24]
 8007a74:	b2d2      	uxtb	r2, r2
 8007a76:	701a      	strb	r2, [r3, #0]
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007a7c:	2206      	movs	r2, #6
 8007a7e:	68f9      	ldr	r1, [r7, #12]
 8007a80:	6938      	ldr	r0, [r7, #16]
 8007a82:	f7ff f8e3 	bl	8006c4c <_SendPacket>
  RECORD_END();
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	f383 8811 	msr	BASEPRI, r3
}
 8007a8c:	bf00      	nop
 8007a8e:	3720      	adds	r7, #32
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	2000d470 	.word	0x2000d470
 8007a98:	2000d440 	.word	0x2000d440

08007a9c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007aa4:	4b04      	ldr	r3, [pc, #16]	; (8007ab8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	1ad3      	subs	r3, r2, r3
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr
 8007ab8:	2000d440 	.word	0x2000d440

08007abc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b08c      	sub	sp, #48	; 0x30
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007ac6:	4b40      	ldr	r3, [pc, #256]	; (8007bc8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d077      	beq.n	8007bbe <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8007ace:	4b3e      	ldr	r3, [pc, #248]	; (8007bc8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ad8:	e008      	b.n	8007aec <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d007      	beq.n	8007af6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae8:	3301      	adds	r3, #1
 8007aea:	62bb      	str	r3, [r7, #40]	; 0x28
 8007aec:	79fb      	ldrb	r3, [r7, #7]
 8007aee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d3f2      	bcc.n	8007ada <SEGGER_SYSVIEW_SendModule+0x1e>
 8007af4:	e000      	b.n	8007af8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007af6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d055      	beq.n	8007baa <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007afe:	f3ef 8311 	mrs	r3, BASEPRI
 8007b02:	f04f 0120 	mov.w	r1, #32
 8007b06:	f381 8811 	msr	BASEPRI, r1
 8007b0a:	617b      	str	r3, [r7, #20]
 8007b0c:	482f      	ldr	r0, [pc, #188]	; (8007bcc <SEGGER_SYSVIEW_SendModule+0x110>)
 8007b0e:	f7fe ffaf 	bl	8006a70 <_PreparePacket>
 8007b12:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b1c:	79fb      	ldrb	r3, [r7, #7]
 8007b1e:	623b      	str	r3, [r7, #32]
 8007b20:	e00b      	b.n	8007b3a <SEGGER_SYSVIEW_SendModule+0x7e>
 8007b22:	6a3b      	ldr	r3, [r7, #32]
 8007b24:	b2da      	uxtb	r2, r3
 8007b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b28:	1c59      	adds	r1, r3, #1
 8007b2a:	6279      	str	r1, [r7, #36]	; 0x24
 8007b2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b30:	b2d2      	uxtb	r2, r2
 8007b32:	701a      	strb	r2, [r3, #0]
 8007b34:	6a3b      	ldr	r3, [r7, #32]
 8007b36:	09db      	lsrs	r3, r3, #7
 8007b38:	623b      	str	r3, [r7, #32]
 8007b3a:	6a3b      	ldr	r3, [r7, #32]
 8007b3c:	2b7f      	cmp	r3, #127	; 0x7f
 8007b3e:	d8f0      	bhi.n	8007b22 <SEGGER_SYSVIEW_SendModule+0x66>
 8007b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b42:	1c5a      	adds	r2, r3, #1
 8007b44:	627a      	str	r2, [r7, #36]	; 0x24
 8007b46:	6a3a      	ldr	r2, [r7, #32]
 8007b48:	b2d2      	uxtb	r2, r2
 8007b4a:	701a      	strb	r2, [r3, #0]
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	61fb      	str	r3, [r7, #28]
 8007b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	61bb      	str	r3, [r7, #24]
 8007b5a:	e00b      	b.n	8007b74 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	b2da      	uxtb	r2, r3
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	1c59      	adds	r1, r3, #1
 8007b64:	61f9      	str	r1, [r7, #28]
 8007b66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b6a:	b2d2      	uxtb	r2, r2
 8007b6c:	701a      	strb	r2, [r3, #0]
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	09db      	lsrs	r3, r3, #7
 8007b72:	61bb      	str	r3, [r7, #24]
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	2b7f      	cmp	r3, #127	; 0x7f
 8007b78:	d8f0      	bhi.n	8007b5c <SEGGER_SYSVIEW_SendModule+0xa0>
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	1c5a      	adds	r2, r3, #1
 8007b7e:	61fa      	str	r2, [r7, #28]
 8007b80:	69ba      	ldr	r2, [r7, #24]
 8007b82:	b2d2      	uxtb	r2, r2
 8007b84:	701a      	strb	r2, [r3, #0]
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2280      	movs	r2, #128	; 0x80
 8007b90:	4619      	mov	r1, r3
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f7fe ff3c 	bl	8006a10 <_EncodeStr>
 8007b98:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007b9a:	2216      	movs	r2, #22
 8007b9c:	68f9      	ldr	r1, [r7, #12]
 8007b9e:	6938      	ldr	r0, [r7, #16]
 8007ba0:	f7ff f854 	bl	8006c4c <_SendPacket>
      RECORD_END();
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8007baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d006      	beq.n	8007bbe <SEGGER_SYSVIEW_SendModule+0x102>
 8007bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d002      	beq.n	8007bbe <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8007bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	4798      	blx	r3
    }
  }
}
 8007bbe:	bf00      	nop
 8007bc0:	3730      	adds	r7, #48	; 0x30
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	2000d468 	.word	0x2000d468
 8007bcc:	2000d470 	.word	0x2000d470

08007bd0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007bd6:	4b0c      	ldr	r3, [pc, #48]	; (8007c08 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00f      	beq.n	8007bfe <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007bde:	4b0a      	ldr	r3, [pc, #40]	; (8007c08 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1f2      	bne.n	8007be4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007bfe:	bf00      	nop
 8007c00:	3708      	adds	r7, #8
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	2000d468 	.word	0x2000d468

08007c0c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007c12:	f3ef 8311 	mrs	r3, BASEPRI
 8007c16:	f04f 0120 	mov.w	r1, #32
 8007c1a:	f381 8811 	msr	BASEPRI, r1
 8007c1e:	60fb      	str	r3, [r7, #12]
 8007c20:	4817      	ldr	r0, [pc, #92]	; (8007c80 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007c22:	f7fe ff25 	bl	8006a70 <_PreparePacket>
 8007c26:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	617b      	str	r3, [r7, #20]
 8007c30:	4b14      	ldr	r3, [pc, #80]	; (8007c84 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	613b      	str	r3, [r7, #16]
 8007c36:	e00b      	b.n	8007c50 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	1c59      	adds	r1, r3, #1
 8007c40:	6179      	str	r1, [r7, #20]
 8007c42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c46:	b2d2      	uxtb	r2, r2
 8007c48:	701a      	strb	r2, [r3, #0]
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	09db      	lsrs	r3, r3, #7
 8007c4e:	613b      	str	r3, [r7, #16]
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	2b7f      	cmp	r3, #127	; 0x7f
 8007c54:	d8f0      	bhi.n	8007c38 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	1c5a      	adds	r2, r3, #1
 8007c5a:	617a      	str	r2, [r7, #20]
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	b2d2      	uxtb	r2, r2
 8007c60:	701a      	strb	r2, [r3, #0]
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007c66:	221b      	movs	r2, #27
 8007c68:	6879      	ldr	r1, [r7, #4]
 8007c6a:	68b8      	ldr	r0, [r7, #8]
 8007c6c:	f7fe ffee 	bl	8006c4c <_SendPacket>
  RECORD_END();
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f383 8811 	msr	BASEPRI, r3
}
 8007c76:	bf00      	nop
 8007c78:	3718      	adds	r7, #24
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	2000d470 	.word	0x2000d470
 8007c84:	2000d46c 	.word	0x2000d46c

08007c88 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b08a      	sub	sp, #40	; 0x28
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007c90:	f3ef 8311 	mrs	r3, BASEPRI
 8007c94:	f04f 0120 	mov.w	r1, #32
 8007c98:	f381 8811 	msr	BASEPRI, r1
 8007c9c:	617b      	str	r3, [r7, #20]
 8007c9e:	4827      	ldr	r0, [pc, #156]	; (8007d3c <SEGGER_SYSVIEW_Warn+0xb4>)
 8007ca0:	f7fe fee6 	bl	8006a70 <_PreparePacket>
 8007ca4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007ca6:	2280      	movs	r2, #128	; 0x80
 8007ca8:	6879      	ldr	r1, [r7, #4]
 8007caa:	6938      	ldr	r0, [r7, #16]
 8007cac:	f7fe feb0 	bl	8006a10 <_EncodeStr>
 8007cb0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	623b      	str	r3, [r7, #32]
 8007cba:	e00b      	b.n	8007cd4 <SEGGER_SYSVIEW_Warn+0x4c>
 8007cbc:	6a3b      	ldr	r3, [r7, #32]
 8007cbe:	b2da      	uxtb	r2, r3
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	1c59      	adds	r1, r3, #1
 8007cc4:	6279      	str	r1, [r7, #36]	; 0x24
 8007cc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007cca:	b2d2      	uxtb	r2, r2
 8007ccc:	701a      	strb	r2, [r3, #0]
 8007cce:	6a3b      	ldr	r3, [r7, #32]
 8007cd0:	09db      	lsrs	r3, r3, #7
 8007cd2:	623b      	str	r3, [r7, #32]
 8007cd4:	6a3b      	ldr	r3, [r7, #32]
 8007cd6:	2b7f      	cmp	r3, #127	; 0x7f
 8007cd8:	d8f0      	bhi.n	8007cbc <SEGGER_SYSVIEW_Warn+0x34>
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cdc:	1c5a      	adds	r2, r3, #1
 8007cde:	627a      	str	r2, [r7, #36]	; 0x24
 8007ce0:	6a3a      	ldr	r2, [r7, #32]
 8007ce2:	b2d2      	uxtb	r2, r2
 8007ce4:	701a      	strb	r2, [r3, #0]
 8007ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	61fb      	str	r3, [r7, #28]
 8007cee:	2300      	movs	r3, #0
 8007cf0:	61bb      	str	r3, [r7, #24]
 8007cf2:	e00b      	b.n	8007d0c <SEGGER_SYSVIEW_Warn+0x84>
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	b2da      	uxtb	r2, r3
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	1c59      	adds	r1, r3, #1
 8007cfc:	61f9      	str	r1, [r7, #28]
 8007cfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d02:	b2d2      	uxtb	r2, r2
 8007d04:	701a      	strb	r2, [r3, #0]
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	09db      	lsrs	r3, r3, #7
 8007d0a:	61bb      	str	r3, [r7, #24]
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	2b7f      	cmp	r3, #127	; 0x7f
 8007d10:	d8f0      	bhi.n	8007cf4 <SEGGER_SYSVIEW_Warn+0x6c>
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	1c5a      	adds	r2, r3, #1
 8007d16:	61fa      	str	r2, [r7, #28]
 8007d18:	69ba      	ldr	r2, [r7, #24]
 8007d1a:	b2d2      	uxtb	r2, r2
 8007d1c:	701a      	strb	r2, [r3, #0]
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007d22:	221a      	movs	r2, #26
 8007d24:	68f9      	ldr	r1, [r7, #12]
 8007d26:	6938      	ldr	r0, [r7, #16]
 8007d28:	f7fe ff90 	bl	8006c4c <_SendPacket>
  RECORD_END();
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	f383 8811 	msr	BASEPRI, r3
}
 8007d32:	bf00      	nop
 8007d34:	3728      	adds	r7, #40	; 0x28
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	2000d470 	.word	0x2000d470

08007d40 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
 8007d4c:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8007d4e:	683a      	ldr	r2, [r7, #0]
 8007d50:	6879      	ldr	r1, [r7, #4]
 8007d52:	2000      	movs	r0, #0
 8007d54:	f7fe fd66 	bl	8006824 <SEGGER_RTT_Write>
  return len;
 8007d58:	683b      	ldr	r3, [r7, #0]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
	...

08007d64 <__errno>:
 8007d64:	4b01      	ldr	r3, [pc, #4]	; (8007d6c <__errno+0x8>)
 8007d66:	6818      	ldr	r0, [r3, #0]
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	20000014 	.word	0x20000014

08007d70 <__libc_init_array>:
 8007d70:	b570      	push	{r4, r5, r6, lr}
 8007d72:	4d0d      	ldr	r5, [pc, #52]	; (8007da8 <__libc_init_array+0x38>)
 8007d74:	4c0d      	ldr	r4, [pc, #52]	; (8007dac <__libc_init_array+0x3c>)
 8007d76:	1b64      	subs	r4, r4, r5
 8007d78:	10a4      	asrs	r4, r4, #2
 8007d7a:	2600      	movs	r6, #0
 8007d7c:	42a6      	cmp	r6, r4
 8007d7e:	d109      	bne.n	8007d94 <__libc_init_array+0x24>
 8007d80:	4d0b      	ldr	r5, [pc, #44]	; (8007db0 <__libc_init_array+0x40>)
 8007d82:	4c0c      	ldr	r4, [pc, #48]	; (8007db4 <__libc_init_array+0x44>)
 8007d84:	f001 fa40 	bl	8009208 <_init>
 8007d88:	1b64      	subs	r4, r4, r5
 8007d8a:	10a4      	asrs	r4, r4, #2
 8007d8c:	2600      	movs	r6, #0
 8007d8e:	42a6      	cmp	r6, r4
 8007d90:	d105      	bne.n	8007d9e <__libc_init_array+0x2e>
 8007d92:	bd70      	pop	{r4, r5, r6, pc}
 8007d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d98:	4798      	blx	r3
 8007d9a:	3601      	adds	r6, #1
 8007d9c:	e7ee      	b.n	8007d7c <__libc_init_array+0xc>
 8007d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007da2:	4798      	blx	r3
 8007da4:	3601      	adds	r6, #1
 8007da6:	e7f2      	b.n	8007d8e <__libc_init_array+0x1e>
 8007da8:	080094b4 	.word	0x080094b4
 8007dac:	080094b4 	.word	0x080094b4
 8007db0:	080094b4 	.word	0x080094b4
 8007db4:	080094b8 	.word	0x080094b8

08007db8 <memcmp>:
 8007db8:	b510      	push	{r4, lr}
 8007dba:	3901      	subs	r1, #1
 8007dbc:	4402      	add	r2, r0
 8007dbe:	4290      	cmp	r0, r2
 8007dc0:	d101      	bne.n	8007dc6 <memcmp+0xe>
 8007dc2:	2000      	movs	r0, #0
 8007dc4:	e005      	b.n	8007dd2 <memcmp+0x1a>
 8007dc6:	7803      	ldrb	r3, [r0, #0]
 8007dc8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007dcc:	42a3      	cmp	r3, r4
 8007dce:	d001      	beq.n	8007dd4 <memcmp+0x1c>
 8007dd0:	1b18      	subs	r0, r3, r4
 8007dd2:	bd10      	pop	{r4, pc}
 8007dd4:	3001      	adds	r0, #1
 8007dd6:	e7f2      	b.n	8007dbe <memcmp+0x6>

08007dd8 <memcpy>:
 8007dd8:	440a      	add	r2, r1
 8007dda:	4291      	cmp	r1, r2
 8007ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007de0:	d100      	bne.n	8007de4 <memcpy+0xc>
 8007de2:	4770      	bx	lr
 8007de4:	b510      	push	{r4, lr}
 8007de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dee:	4291      	cmp	r1, r2
 8007df0:	d1f9      	bne.n	8007de6 <memcpy+0xe>
 8007df2:	bd10      	pop	{r4, pc}

08007df4 <memset>:
 8007df4:	4402      	add	r2, r0
 8007df6:	4603      	mov	r3, r0
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d100      	bne.n	8007dfe <memset+0xa>
 8007dfc:	4770      	bx	lr
 8007dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8007e02:	e7f9      	b.n	8007df8 <memset+0x4>

08007e04 <rand>:
 8007e04:	4b16      	ldr	r3, [pc, #88]	; (8007e60 <rand+0x5c>)
 8007e06:	b510      	push	{r4, lr}
 8007e08:	681c      	ldr	r4, [r3, #0]
 8007e0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007e0c:	b9b3      	cbnz	r3, 8007e3c <rand+0x38>
 8007e0e:	2018      	movs	r0, #24
 8007e10:	f000 f886 	bl	8007f20 <malloc>
 8007e14:	63a0      	str	r0, [r4, #56]	; 0x38
 8007e16:	b928      	cbnz	r0, 8007e24 <rand+0x20>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	4b12      	ldr	r3, [pc, #72]	; (8007e64 <rand+0x60>)
 8007e1c:	4812      	ldr	r0, [pc, #72]	; (8007e68 <rand+0x64>)
 8007e1e:	214e      	movs	r1, #78	; 0x4e
 8007e20:	f000 f84e 	bl	8007ec0 <__assert_func>
 8007e24:	4a11      	ldr	r2, [pc, #68]	; (8007e6c <rand+0x68>)
 8007e26:	4b12      	ldr	r3, [pc, #72]	; (8007e70 <rand+0x6c>)
 8007e28:	e9c0 2300 	strd	r2, r3, [r0]
 8007e2c:	4b11      	ldr	r3, [pc, #68]	; (8007e74 <rand+0x70>)
 8007e2e:	6083      	str	r3, [r0, #8]
 8007e30:	230b      	movs	r3, #11
 8007e32:	8183      	strh	r3, [r0, #12]
 8007e34:	2201      	movs	r2, #1
 8007e36:	2300      	movs	r3, #0
 8007e38:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007e3c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8007e3e:	4a0e      	ldr	r2, [pc, #56]	; (8007e78 <rand+0x74>)
 8007e40:	6920      	ldr	r0, [r4, #16]
 8007e42:	6963      	ldr	r3, [r4, #20]
 8007e44:	490d      	ldr	r1, [pc, #52]	; (8007e7c <rand+0x78>)
 8007e46:	4342      	muls	r2, r0
 8007e48:	fb01 2203 	mla	r2, r1, r3, r2
 8007e4c:	fba0 0101 	umull	r0, r1, r0, r1
 8007e50:	1c43      	adds	r3, r0, #1
 8007e52:	eb42 0001 	adc.w	r0, r2, r1
 8007e56:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8007e5a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007e5e:	bd10      	pop	{r4, pc}
 8007e60:	20000014 	.word	0x20000014
 8007e64:	08009368 	.word	0x08009368
 8007e68:	0800937f 	.word	0x0800937f
 8007e6c:	abcd330e 	.word	0xabcd330e
 8007e70:	e66d1234 	.word	0xe66d1234
 8007e74:	0005deec 	.word	0x0005deec
 8007e78:	5851f42d 	.word	0x5851f42d
 8007e7c:	4c957f2d 	.word	0x4c957f2d

08007e80 <siprintf>:
 8007e80:	b40e      	push	{r1, r2, r3}
 8007e82:	b500      	push	{lr}
 8007e84:	b09c      	sub	sp, #112	; 0x70
 8007e86:	ab1d      	add	r3, sp, #116	; 0x74
 8007e88:	9002      	str	r0, [sp, #8]
 8007e8a:	9006      	str	r0, [sp, #24]
 8007e8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e90:	4809      	ldr	r0, [pc, #36]	; (8007eb8 <siprintf+0x38>)
 8007e92:	9107      	str	r1, [sp, #28]
 8007e94:	9104      	str	r1, [sp, #16]
 8007e96:	4909      	ldr	r1, [pc, #36]	; (8007ebc <siprintf+0x3c>)
 8007e98:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e9c:	9105      	str	r1, [sp, #20]
 8007e9e:	6800      	ldr	r0, [r0, #0]
 8007ea0:	9301      	str	r3, [sp, #4]
 8007ea2:	a902      	add	r1, sp, #8
 8007ea4:	f000 f980 	bl	80081a8 <_svfiprintf_r>
 8007ea8:	9b02      	ldr	r3, [sp, #8]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	701a      	strb	r2, [r3, #0]
 8007eae:	b01c      	add	sp, #112	; 0x70
 8007eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007eb4:	b003      	add	sp, #12
 8007eb6:	4770      	bx	lr
 8007eb8:	20000014 	.word	0x20000014
 8007ebc:	ffff0208 	.word	0xffff0208

08007ec0 <__assert_func>:
 8007ec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ec2:	4614      	mov	r4, r2
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	4b09      	ldr	r3, [pc, #36]	; (8007eec <__assert_func+0x2c>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4605      	mov	r5, r0
 8007ecc:	68d8      	ldr	r0, [r3, #12]
 8007ece:	b14c      	cbz	r4, 8007ee4 <__assert_func+0x24>
 8007ed0:	4b07      	ldr	r3, [pc, #28]	; (8007ef0 <__assert_func+0x30>)
 8007ed2:	9100      	str	r1, [sp, #0]
 8007ed4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ed8:	4906      	ldr	r1, [pc, #24]	; (8007ef4 <__assert_func+0x34>)
 8007eda:	462b      	mov	r3, r5
 8007edc:	f000 f80e 	bl	8007efc <fiprintf>
 8007ee0:	f000 fe20 	bl	8008b24 <abort>
 8007ee4:	4b04      	ldr	r3, [pc, #16]	; (8007ef8 <__assert_func+0x38>)
 8007ee6:	461c      	mov	r4, r3
 8007ee8:	e7f3      	b.n	8007ed2 <__assert_func+0x12>
 8007eea:	bf00      	nop
 8007eec:	20000014 	.word	0x20000014
 8007ef0:	080093da 	.word	0x080093da
 8007ef4:	080093e7 	.word	0x080093e7
 8007ef8:	08009415 	.word	0x08009415

08007efc <fiprintf>:
 8007efc:	b40e      	push	{r1, r2, r3}
 8007efe:	b503      	push	{r0, r1, lr}
 8007f00:	4601      	mov	r1, r0
 8007f02:	ab03      	add	r3, sp, #12
 8007f04:	4805      	ldr	r0, [pc, #20]	; (8007f1c <fiprintf+0x20>)
 8007f06:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f0a:	6800      	ldr	r0, [r0, #0]
 8007f0c:	9301      	str	r3, [sp, #4]
 8007f0e:	f000 fa75 	bl	80083fc <_vfiprintf_r>
 8007f12:	b002      	add	sp, #8
 8007f14:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f18:	b003      	add	sp, #12
 8007f1a:	4770      	bx	lr
 8007f1c:	20000014 	.word	0x20000014

08007f20 <malloc>:
 8007f20:	4b02      	ldr	r3, [pc, #8]	; (8007f2c <malloc+0xc>)
 8007f22:	4601      	mov	r1, r0
 8007f24:	6818      	ldr	r0, [r3, #0]
 8007f26:	f000 b86f 	b.w	8008008 <_malloc_r>
 8007f2a:	bf00      	nop
 8007f2c:	20000014 	.word	0x20000014

08007f30 <_free_r>:
 8007f30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f32:	2900      	cmp	r1, #0
 8007f34:	d044      	beq.n	8007fc0 <_free_r+0x90>
 8007f36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f3a:	9001      	str	r0, [sp, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f1a1 0404 	sub.w	r4, r1, #4
 8007f42:	bfb8      	it	lt
 8007f44:	18e4      	addlt	r4, r4, r3
 8007f46:	f001 f82f 	bl	8008fa8 <__malloc_lock>
 8007f4a:	4a1e      	ldr	r2, [pc, #120]	; (8007fc4 <_free_r+0x94>)
 8007f4c:	9801      	ldr	r0, [sp, #4]
 8007f4e:	6813      	ldr	r3, [r2, #0]
 8007f50:	b933      	cbnz	r3, 8007f60 <_free_r+0x30>
 8007f52:	6063      	str	r3, [r4, #4]
 8007f54:	6014      	str	r4, [r2, #0]
 8007f56:	b003      	add	sp, #12
 8007f58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f5c:	f001 b82a 	b.w	8008fb4 <__malloc_unlock>
 8007f60:	42a3      	cmp	r3, r4
 8007f62:	d908      	bls.n	8007f76 <_free_r+0x46>
 8007f64:	6825      	ldr	r5, [r4, #0]
 8007f66:	1961      	adds	r1, r4, r5
 8007f68:	428b      	cmp	r3, r1
 8007f6a:	bf01      	itttt	eq
 8007f6c:	6819      	ldreq	r1, [r3, #0]
 8007f6e:	685b      	ldreq	r3, [r3, #4]
 8007f70:	1949      	addeq	r1, r1, r5
 8007f72:	6021      	streq	r1, [r4, #0]
 8007f74:	e7ed      	b.n	8007f52 <_free_r+0x22>
 8007f76:	461a      	mov	r2, r3
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	b10b      	cbz	r3, 8007f80 <_free_r+0x50>
 8007f7c:	42a3      	cmp	r3, r4
 8007f7e:	d9fa      	bls.n	8007f76 <_free_r+0x46>
 8007f80:	6811      	ldr	r1, [r2, #0]
 8007f82:	1855      	adds	r5, r2, r1
 8007f84:	42a5      	cmp	r5, r4
 8007f86:	d10b      	bne.n	8007fa0 <_free_r+0x70>
 8007f88:	6824      	ldr	r4, [r4, #0]
 8007f8a:	4421      	add	r1, r4
 8007f8c:	1854      	adds	r4, r2, r1
 8007f8e:	42a3      	cmp	r3, r4
 8007f90:	6011      	str	r1, [r2, #0]
 8007f92:	d1e0      	bne.n	8007f56 <_free_r+0x26>
 8007f94:	681c      	ldr	r4, [r3, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	6053      	str	r3, [r2, #4]
 8007f9a:	4421      	add	r1, r4
 8007f9c:	6011      	str	r1, [r2, #0]
 8007f9e:	e7da      	b.n	8007f56 <_free_r+0x26>
 8007fa0:	d902      	bls.n	8007fa8 <_free_r+0x78>
 8007fa2:	230c      	movs	r3, #12
 8007fa4:	6003      	str	r3, [r0, #0]
 8007fa6:	e7d6      	b.n	8007f56 <_free_r+0x26>
 8007fa8:	6825      	ldr	r5, [r4, #0]
 8007faa:	1961      	adds	r1, r4, r5
 8007fac:	428b      	cmp	r3, r1
 8007fae:	bf04      	itt	eq
 8007fb0:	6819      	ldreq	r1, [r3, #0]
 8007fb2:	685b      	ldreq	r3, [r3, #4]
 8007fb4:	6063      	str	r3, [r4, #4]
 8007fb6:	bf04      	itt	eq
 8007fb8:	1949      	addeq	r1, r1, r5
 8007fba:	6021      	streq	r1, [r4, #0]
 8007fbc:	6054      	str	r4, [r2, #4]
 8007fbe:	e7ca      	b.n	8007f56 <_free_r+0x26>
 8007fc0:	b003      	add	sp, #12
 8007fc2:	bd30      	pop	{r4, r5, pc}
 8007fc4:	2000d554 	.word	0x2000d554

08007fc8 <sbrk_aligned>:
 8007fc8:	b570      	push	{r4, r5, r6, lr}
 8007fca:	4e0e      	ldr	r6, [pc, #56]	; (8008004 <sbrk_aligned+0x3c>)
 8007fcc:	460c      	mov	r4, r1
 8007fce:	6831      	ldr	r1, [r6, #0]
 8007fd0:	4605      	mov	r5, r0
 8007fd2:	b911      	cbnz	r1, 8007fda <sbrk_aligned+0x12>
 8007fd4:	f000 fcd6 	bl	8008984 <_sbrk_r>
 8007fd8:	6030      	str	r0, [r6, #0]
 8007fda:	4621      	mov	r1, r4
 8007fdc:	4628      	mov	r0, r5
 8007fde:	f000 fcd1 	bl	8008984 <_sbrk_r>
 8007fe2:	1c43      	adds	r3, r0, #1
 8007fe4:	d00a      	beq.n	8007ffc <sbrk_aligned+0x34>
 8007fe6:	1cc4      	adds	r4, r0, #3
 8007fe8:	f024 0403 	bic.w	r4, r4, #3
 8007fec:	42a0      	cmp	r0, r4
 8007fee:	d007      	beq.n	8008000 <sbrk_aligned+0x38>
 8007ff0:	1a21      	subs	r1, r4, r0
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	f000 fcc6 	bl	8008984 <_sbrk_r>
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	d101      	bne.n	8008000 <sbrk_aligned+0x38>
 8007ffc:	f04f 34ff 	mov.w	r4, #4294967295
 8008000:	4620      	mov	r0, r4
 8008002:	bd70      	pop	{r4, r5, r6, pc}
 8008004:	2000d558 	.word	0x2000d558

08008008 <_malloc_r>:
 8008008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800800c:	1ccd      	adds	r5, r1, #3
 800800e:	f025 0503 	bic.w	r5, r5, #3
 8008012:	3508      	adds	r5, #8
 8008014:	2d0c      	cmp	r5, #12
 8008016:	bf38      	it	cc
 8008018:	250c      	movcc	r5, #12
 800801a:	2d00      	cmp	r5, #0
 800801c:	4607      	mov	r7, r0
 800801e:	db01      	blt.n	8008024 <_malloc_r+0x1c>
 8008020:	42a9      	cmp	r1, r5
 8008022:	d905      	bls.n	8008030 <_malloc_r+0x28>
 8008024:	230c      	movs	r3, #12
 8008026:	603b      	str	r3, [r7, #0]
 8008028:	2600      	movs	r6, #0
 800802a:	4630      	mov	r0, r6
 800802c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008030:	4e2e      	ldr	r6, [pc, #184]	; (80080ec <_malloc_r+0xe4>)
 8008032:	f000 ffb9 	bl	8008fa8 <__malloc_lock>
 8008036:	6833      	ldr	r3, [r6, #0]
 8008038:	461c      	mov	r4, r3
 800803a:	bb34      	cbnz	r4, 800808a <_malloc_r+0x82>
 800803c:	4629      	mov	r1, r5
 800803e:	4638      	mov	r0, r7
 8008040:	f7ff ffc2 	bl	8007fc8 <sbrk_aligned>
 8008044:	1c43      	adds	r3, r0, #1
 8008046:	4604      	mov	r4, r0
 8008048:	d14d      	bne.n	80080e6 <_malloc_r+0xde>
 800804a:	6834      	ldr	r4, [r6, #0]
 800804c:	4626      	mov	r6, r4
 800804e:	2e00      	cmp	r6, #0
 8008050:	d140      	bne.n	80080d4 <_malloc_r+0xcc>
 8008052:	6823      	ldr	r3, [r4, #0]
 8008054:	4631      	mov	r1, r6
 8008056:	4638      	mov	r0, r7
 8008058:	eb04 0803 	add.w	r8, r4, r3
 800805c:	f000 fc92 	bl	8008984 <_sbrk_r>
 8008060:	4580      	cmp	r8, r0
 8008062:	d13a      	bne.n	80080da <_malloc_r+0xd2>
 8008064:	6821      	ldr	r1, [r4, #0]
 8008066:	3503      	adds	r5, #3
 8008068:	1a6d      	subs	r5, r5, r1
 800806a:	f025 0503 	bic.w	r5, r5, #3
 800806e:	3508      	adds	r5, #8
 8008070:	2d0c      	cmp	r5, #12
 8008072:	bf38      	it	cc
 8008074:	250c      	movcc	r5, #12
 8008076:	4629      	mov	r1, r5
 8008078:	4638      	mov	r0, r7
 800807a:	f7ff ffa5 	bl	8007fc8 <sbrk_aligned>
 800807e:	3001      	adds	r0, #1
 8008080:	d02b      	beq.n	80080da <_malloc_r+0xd2>
 8008082:	6823      	ldr	r3, [r4, #0]
 8008084:	442b      	add	r3, r5
 8008086:	6023      	str	r3, [r4, #0]
 8008088:	e00e      	b.n	80080a8 <_malloc_r+0xa0>
 800808a:	6822      	ldr	r2, [r4, #0]
 800808c:	1b52      	subs	r2, r2, r5
 800808e:	d41e      	bmi.n	80080ce <_malloc_r+0xc6>
 8008090:	2a0b      	cmp	r2, #11
 8008092:	d916      	bls.n	80080c2 <_malloc_r+0xba>
 8008094:	1961      	adds	r1, r4, r5
 8008096:	42a3      	cmp	r3, r4
 8008098:	6025      	str	r5, [r4, #0]
 800809a:	bf18      	it	ne
 800809c:	6059      	strne	r1, [r3, #4]
 800809e:	6863      	ldr	r3, [r4, #4]
 80080a0:	bf08      	it	eq
 80080a2:	6031      	streq	r1, [r6, #0]
 80080a4:	5162      	str	r2, [r4, r5]
 80080a6:	604b      	str	r3, [r1, #4]
 80080a8:	4638      	mov	r0, r7
 80080aa:	f104 060b 	add.w	r6, r4, #11
 80080ae:	f000 ff81 	bl	8008fb4 <__malloc_unlock>
 80080b2:	f026 0607 	bic.w	r6, r6, #7
 80080b6:	1d23      	adds	r3, r4, #4
 80080b8:	1af2      	subs	r2, r6, r3
 80080ba:	d0b6      	beq.n	800802a <_malloc_r+0x22>
 80080bc:	1b9b      	subs	r3, r3, r6
 80080be:	50a3      	str	r3, [r4, r2]
 80080c0:	e7b3      	b.n	800802a <_malloc_r+0x22>
 80080c2:	6862      	ldr	r2, [r4, #4]
 80080c4:	42a3      	cmp	r3, r4
 80080c6:	bf0c      	ite	eq
 80080c8:	6032      	streq	r2, [r6, #0]
 80080ca:	605a      	strne	r2, [r3, #4]
 80080cc:	e7ec      	b.n	80080a8 <_malloc_r+0xa0>
 80080ce:	4623      	mov	r3, r4
 80080d0:	6864      	ldr	r4, [r4, #4]
 80080d2:	e7b2      	b.n	800803a <_malloc_r+0x32>
 80080d4:	4634      	mov	r4, r6
 80080d6:	6876      	ldr	r6, [r6, #4]
 80080d8:	e7b9      	b.n	800804e <_malloc_r+0x46>
 80080da:	230c      	movs	r3, #12
 80080dc:	603b      	str	r3, [r7, #0]
 80080de:	4638      	mov	r0, r7
 80080e0:	f000 ff68 	bl	8008fb4 <__malloc_unlock>
 80080e4:	e7a1      	b.n	800802a <_malloc_r+0x22>
 80080e6:	6025      	str	r5, [r4, #0]
 80080e8:	e7de      	b.n	80080a8 <_malloc_r+0xa0>
 80080ea:	bf00      	nop
 80080ec:	2000d554 	.word	0x2000d554

080080f0 <__ssputs_r>:
 80080f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080f4:	688e      	ldr	r6, [r1, #8]
 80080f6:	429e      	cmp	r6, r3
 80080f8:	4682      	mov	sl, r0
 80080fa:	460c      	mov	r4, r1
 80080fc:	4690      	mov	r8, r2
 80080fe:	461f      	mov	r7, r3
 8008100:	d838      	bhi.n	8008174 <__ssputs_r+0x84>
 8008102:	898a      	ldrh	r2, [r1, #12]
 8008104:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008108:	d032      	beq.n	8008170 <__ssputs_r+0x80>
 800810a:	6825      	ldr	r5, [r4, #0]
 800810c:	6909      	ldr	r1, [r1, #16]
 800810e:	eba5 0901 	sub.w	r9, r5, r1
 8008112:	6965      	ldr	r5, [r4, #20]
 8008114:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008118:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800811c:	3301      	adds	r3, #1
 800811e:	444b      	add	r3, r9
 8008120:	106d      	asrs	r5, r5, #1
 8008122:	429d      	cmp	r5, r3
 8008124:	bf38      	it	cc
 8008126:	461d      	movcc	r5, r3
 8008128:	0553      	lsls	r3, r2, #21
 800812a:	d531      	bpl.n	8008190 <__ssputs_r+0xa0>
 800812c:	4629      	mov	r1, r5
 800812e:	f7ff ff6b 	bl	8008008 <_malloc_r>
 8008132:	4606      	mov	r6, r0
 8008134:	b950      	cbnz	r0, 800814c <__ssputs_r+0x5c>
 8008136:	230c      	movs	r3, #12
 8008138:	f8ca 3000 	str.w	r3, [sl]
 800813c:	89a3      	ldrh	r3, [r4, #12]
 800813e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008142:	81a3      	strh	r3, [r4, #12]
 8008144:	f04f 30ff 	mov.w	r0, #4294967295
 8008148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800814c:	6921      	ldr	r1, [r4, #16]
 800814e:	464a      	mov	r2, r9
 8008150:	f7ff fe42 	bl	8007dd8 <memcpy>
 8008154:	89a3      	ldrh	r3, [r4, #12]
 8008156:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800815a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800815e:	81a3      	strh	r3, [r4, #12]
 8008160:	6126      	str	r6, [r4, #16]
 8008162:	6165      	str	r5, [r4, #20]
 8008164:	444e      	add	r6, r9
 8008166:	eba5 0509 	sub.w	r5, r5, r9
 800816a:	6026      	str	r6, [r4, #0]
 800816c:	60a5      	str	r5, [r4, #8]
 800816e:	463e      	mov	r6, r7
 8008170:	42be      	cmp	r6, r7
 8008172:	d900      	bls.n	8008176 <__ssputs_r+0x86>
 8008174:	463e      	mov	r6, r7
 8008176:	6820      	ldr	r0, [r4, #0]
 8008178:	4632      	mov	r2, r6
 800817a:	4641      	mov	r1, r8
 800817c:	f000 fefa 	bl	8008f74 <memmove>
 8008180:	68a3      	ldr	r3, [r4, #8]
 8008182:	1b9b      	subs	r3, r3, r6
 8008184:	60a3      	str	r3, [r4, #8]
 8008186:	6823      	ldr	r3, [r4, #0]
 8008188:	4433      	add	r3, r6
 800818a:	6023      	str	r3, [r4, #0]
 800818c:	2000      	movs	r0, #0
 800818e:	e7db      	b.n	8008148 <__ssputs_r+0x58>
 8008190:	462a      	mov	r2, r5
 8008192:	f000 ff15 	bl	8008fc0 <_realloc_r>
 8008196:	4606      	mov	r6, r0
 8008198:	2800      	cmp	r0, #0
 800819a:	d1e1      	bne.n	8008160 <__ssputs_r+0x70>
 800819c:	6921      	ldr	r1, [r4, #16]
 800819e:	4650      	mov	r0, sl
 80081a0:	f7ff fec6 	bl	8007f30 <_free_r>
 80081a4:	e7c7      	b.n	8008136 <__ssputs_r+0x46>
	...

080081a8 <_svfiprintf_r>:
 80081a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ac:	4698      	mov	r8, r3
 80081ae:	898b      	ldrh	r3, [r1, #12]
 80081b0:	061b      	lsls	r3, r3, #24
 80081b2:	b09d      	sub	sp, #116	; 0x74
 80081b4:	4607      	mov	r7, r0
 80081b6:	460d      	mov	r5, r1
 80081b8:	4614      	mov	r4, r2
 80081ba:	d50e      	bpl.n	80081da <_svfiprintf_r+0x32>
 80081bc:	690b      	ldr	r3, [r1, #16]
 80081be:	b963      	cbnz	r3, 80081da <_svfiprintf_r+0x32>
 80081c0:	2140      	movs	r1, #64	; 0x40
 80081c2:	f7ff ff21 	bl	8008008 <_malloc_r>
 80081c6:	6028      	str	r0, [r5, #0]
 80081c8:	6128      	str	r0, [r5, #16]
 80081ca:	b920      	cbnz	r0, 80081d6 <_svfiprintf_r+0x2e>
 80081cc:	230c      	movs	r3, #12
 80081ce:	603b      	str	r3, [r7, #0]
 80081d0:	f04f 30ff 	mov.w	r0, #4294967295
 80081d4:	e0d1      	b.n	800837a <_svfiprintf_r+0x1d2>
 80081d6:	2340      	movs	r3, #64	; 0x40
 80081d8:	616b      	str	r3, [r5, #20]
 80081da:	2300      	movs	r3, #0
 80081dc:	9309      	str	r3, [sp, #36]	; 0x24
 80081de:	2320      	movs	r3, #32
 80081e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80081e8:	2330      	movs	r3, #48	; 0x30
 80081ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008394 <_svfiprintf_r+0x1ec>
 80081ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081f2:	f04f 0901 	mov.w	r9, #1
 80081f6:	4623      	mov	r3, r4
 80081f8:	469a      	mov	sl, r3
 80081fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081fe:	b10a      	cbz	r2, 8008204 <_svfiprintf_r+0x5c>
 8008200:	2a25      	cmp	r2, #37	; 0x25
 8008202:	d1f9      	bne.n	80081f8 <_svfiprintf_r+0x50>
 8008204:	ebba 0b04 	subs.w	fp, sl, r4
 8008208:	d00b      	beq.n	8008222 <_svfiprintf_r+0x7a>
 800820a:	465b      	mov	r3, fp
 800820c:	4622      	mov	r2, r4
 800820e:	4629      	mov	r1, r5
 8008210:	4638      	mov	r0, r7
 8008212:	f7ff ff6d 	bl	80080f0 <__ssputs_r>
 8008216:	3001      	adds	r0, #1
 8008218:	f000 80aa 	beq.w	8008370 <_svfiprintf_r+0x1c8>
 800821c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800821e:	445a      	add	r2, fp
 8008220:	9209      	str	r2, [sp, #36]	; 0x24
 8008222:	f89a 3000 	ldrb.w	r3, [sl]
 8008226:	2b00      	cmp	r3, #0
 8008228:	f000 80a2 	beq.w	8008370 <_svfiprintf_r+0x1c8>
 800822c:	2300      	movs	r3, #0
 800822e:	f04f 32ff 	mov.w	r2, #4294967295
 8008232:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008236:	f10a 0a01 	add.w	sl, sl, #1
 800823a:	9304      	str	r3, [sp, #16]
 800823c:	9307      	str	r3, [sp, #28]
 800823e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008242:	931a      	str	r3, [sp, #104]	; 0x68
 8008244:	4654      	mov	r4, sl
 8008246:	2205      	movs	r2, #5
 8008248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800824c:	4851      	ldr	r0, [pc, #324]	; (8008394 <_svfiprintf_r+0x1ec>)
 800824e:	f7f8 f81f 	bl	8000290 <memchr>
 8008252:	9a04      	ldr	r2, [sp, #16]
 8008254:	b9d8      	cbnz	r0, 800828e <_svfiprintf_r+0xe6>
 8008256:	06d0      	lsls	r0, r2, #27
 8008258:	bf44      	itt	mi
 800825a:	2320      	movmi	r3, #32
 800825c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008260:	0711      	lsls	r1, r2, #28
 8008262:	bf44      	itt	mi
 8008264:	232b      	movmi	r3, #43	; 0x2b
 8008266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800826a:	f89a 3000 	ldrb.w	r3, [sl]
 800826e:	2b2a      	cmp	r3, #42	; 0x2a
 8008270:	d015      	beq.n	800829e <_svfiprintf_r+0xf6>
 8008272:	9a07      	ldr	r2, [sp, #28]
 8008274:	4654      	mov	r4, sl
 8008276:	2000      	movs	r0, #0
 8008278:	f04f 0c0a 	mov.w	ip, #10
 800827c:	4621      	mov	r1, r4
 800827e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008282:	3b30      	subs	r3, #48	; 0x30
 8008284:	2b09      	cmp	r3, #9
 8008286:	d94e      	bls.n	8008326 <_svfiprintf_r+0x17e>
 8008288:	b1b0      	cbz	r0, 80082b8 <_svfiprintf_r+0x110>
 800828a:	9207      	str	r2, [sp, #28]
 800828c:	e014      	b.n	80082b8 <_svfiprintf_r+0x110>
 800828e:	eba0 0308 	sub.w	r3, r0, r8
 8008292:	fa09 f303 	lsl.w	r3, r9, r3
 8008296:	4313      	orrs	r3, r2
 8008298:	9304      	str	r3, [sp, #16]
 800829a:	46a2      	mov	sl, r4
 800829c:	e7d2      	b.n	8008244 <_svfiprintf_r+0x9c>
 800829e:	9b03      	ldr	r3, [sp, #12]
 80082a0:	1d19      	adds	r1, r3, #4
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	9103      	str	r1, [sp, #12]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	bfbb      	ittet	lt
 80082aa:	425b      	neglt	r3, r3
 80082ac:	f042 0202 	orrlt.w	r2, r2, #2
 80082b0:	9307      	strge	r3, [sp, #28]
 80082b2:	9307      	strlt	r3, [sp, #28]
 80082b4:	bfb8      	it	lt
 80082b6:	9204      	strlt	r2, [sp, #16]
 80082b8:	7823      	ldrb	r3, [r4, #0]
 80082ba:	2b2e      	cmp	r3, #46	; 0x2e
 80082bc:	d10c      	bne.n	80082d8 <_svfiprintf_r+0x130>
 80082be:	7863      	ldrb	r3, [r4, #1]
 80082c0:	2b2a      	cmp	r3, #42	; 0x2a
 80082c2:	d135      	bne.n	8008330 <_svfiprintf_r+0x188>
 80082c4:	9b03      	ldr	r3, [sp, #12]
 80082c6:	1d1a      	adds	r2, r3, #4
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	9203      	str	r2, [sp, #12]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	bfb8      	it	lt
 80082d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80082d4:	3402      	adds	r4, #2
 80082d6:	9305      	str	r3, [sp, #20]
 80082d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80083a4 <_svfiprintf_r+0x1fc>
 80082dc:	7821      	ldrb	r1, [r4, #0]
 80082de:	2203      	movs	r2, #3
 80082e0:	4650      	mov	r0, sl
 80082e2:	f7f7 ffd5 	bl	8000290 <memchr>
 80082e6:	b140      	cbz	r0, 80082fa <_svfiprintf_r+0x152>
 80082e8:	2340      	movs	r3, #64	; 0x40
 80082ea:	eba0 000a 	sub.w	r0, r0, sl
 80082ee:	fa03 f000 	lsl.w	r0, r3, r0
 80082f2:	9b04      	ldr	r3, [sp, #16]
 80082f4:	4303      	orrs	r3, r0
 80082f6:	3401      	adds	r4, #1
 80082f8:	9304      	str	r3, [sp, #16]
 80082fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082fe:	4826      	ldr	r0, [pc, #152]	; (8008398 <_svfiprintf_r+0x1f0>)
 8008300:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008304:	2206      	movs	r2, #6
 8008306:	f7f7 ffc3 	bl	8000290 <memchr>
 800830a:	2800      	cmp	r0, #0
 800830c:	d038      	beq.n	8008380 <_svfiprintf_r+0x1d8>
 800830e:	4b23      	ldr	r3, [pc, #140]	; (800839c <_svfiprintf_r+0x1f4>)
 8008310:	bb1b      	cbnz	r3, 800835a <_svfiprintf_r+0x1b2>
 8008312:	9b03      	ldr	r3, [sp, #12]
 8008314:	3307      	adds	r3, #7
 8008316:	f023 0307 	bic.w	r3, r3, #7
 800831a:	3308      	adds	r3, #8
 800831c:	9303      	str	r3, [sp, #12]
 800831e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008320:	4433      	add	r3, r6
 8008322:	9309      	str	r3, [sp, #36]	; 0x24
 8008324:	e767      	b.n	80081f6 <_svfiprintf_r+0x4e>
 8008326:	fb0c 3202 	mla	r2, ip, r2, r3
 800832a:	460c      	mov	r4, r1
 800832c:	2001      	movs	r0, #1
 800832e:	e7a5      	b.n	800827c <_svfiprintf_r+0xd4>
 8008330:	2300      	movs	r3, #0
 8008332:	3401      	adds	r4, #1
 8008334:	9305      	str	r3, [sp, #20]
 8008336:	4619      	mov	r1, r3
 8008338:	f04f 0c0a 	mov.w	ip, #10
 800833c:	4620      	mov	r0, r4
 800833e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008342:	3a30      	subs	r2, #48	; 0x30
 8008344:	2a09      	cmp	r2, #9
 8008346:	d903      	bls.n	8008350 <_svfiprintf_r+0x1a8>
 8008348:	2b00      	cmp	r3, #0
 800834a:	d0c5      	beq.n	80082d8 <_svfiprintf_r+0x130>
 800834c:	9105      	str	r1, [sp, #20]
 800834e:	e7c3      	b.n	80082d8 <_svfiprintf_r+0x130>
 8008350:	fb0c 2101 	mla	r1, ip, r1, r2
 8008354:	4604      	mov	r4, r0
 8008356:	2301      	movs	r3, #1
 8008358:	e7f0      	b.n	800833c <_svfiprintf_r+0x194>
 800835a:	ab03      	add	r3, sp, #12
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	462a      	mov	r2, r5
 8008360:	4b0f      	ldr	r3, [pc, #60]	; (80083a0 <_svfiprintf_r+0x1f8>)
 8008362:	a904      	add	r1, sp, #16
 8008364:	4638      	mov	r0, r7
 8008366:	f3af 8000 	nop.w
 800836a:	1c42      	adds	r2, r0, #1
 800836c:	4606      	mov	r6, r0
 800836e:	d1d6      	bne.n	800831e <_svfiprintf_r+0x176>
 8008370:	89ab      	ldrh	r3, [r5, #12]
 8008372:	065b      	lsls	r3, r3, #25
 8008374:	f53f af2c 	bmi.w	80081d0 <_svfiprintf_r+0x28>
 8008378:	9809      	ldr	r0, [sp, #36]	; 0x24
 800837a:	b01d      	add	sp, #116	; 0x74
 800837c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008380:	ab03      	add	r3, sp, #12
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	462a      	mov	r2, r5
 8008386:	4b06      	ldr	r3, [pc, #24]	; (80083a0 <_svfiprintf_r+0x1f8>)
 8008388:	a904      	add	r1, sp, #16
 800838a:	4638      	mov	r0, r7
 800838c:	f000 f9d4 	bl	8008738 <_printf_i>
 8008390:	e7eb      	b.n	800836a <_svfiprintf_r+0x1c2>
 8008392:	bf00      	nop
 8008394:	08009416 	.word	0x08009416
 8008398:	08009420 	.word	0x08009420
 800839c:	00000000 	.word	0x00000000
 80083a0:	080080f1 	.word	0x080080f1
 80083a4:	0800941c 	.word	0x0800941c

080083a8 <__sfputc_r>:
 80083a8:	6893      	ldr	r3, [r2, #8]
 80083aa:	3b01      	subs	r3, #1
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	b410      	push	{r4}
 80083b0:	6093      	str	r3, [r2, #8]
 80083b2:	da08      	bge.n	80083c6 <__sfputc_r+0x1e>
 80083b4:	6994      	ldr	r4, [r2, #24]
 80083b6:	42a3      	cmp	r3, r4
 80083b8:	db01      	blt.n	80083be <__sfputc_r+0x16>
 80083ba:	290a      	cmp	r1, #10
 80083bc:	d103      	bne.n	80083c6 <__sfputc_r+0x1e>
 80083be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083c2:	f000 baef 	b.w	80089a4 <__swbuf_r>
 80083c6:	6813      	ldr	r3, [r2, #0]
 80083c8:	1c58      	adds	r0, r3, #1
 80083ca:	6010      	str	r0, [r2, #0]
 80083cc:	7019      	strb	r1, [r3, #0]
 80083ce:	4608      	mov	r0, r1
 80083d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <__sfputs_r>:
 80083d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d8:	4606      	mov	r6, r0
 80083da:	460f      	mov	r7, r1
 80083dc:	4614      	mov	r4, r2
 80083de:	18d5      	adds	r5, r2, r3
 80083e0:	42ac      	cmp	r4, r5
 80083e2:	d101      	bne.n	80083e8 <__sfputs_r+0x12>
 80083e4:	2000      	movs	r0, #0
 80083e6:	e007      	b.n	80083f8 <__sfputs_r+0x22>
 80083e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ec:	463a      	mov	r2, r7
 80083ee:	4630      	mov	r0, r6
 80083f0:	f7ff ffda 	bl	80083a8 <__sfputc_r>
 80083f4:	1c43      	adds	r3, r0, #1
 80083f6:	d1f3      	bne.n	80083e0 <__sfputs_r+0xa>
 80083f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080083fc <_vfiprintf_r>:
 80083fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008400:	460d      	mov	r5, r1
 8008402:	b09d      	sub	sp, #116	; 0x74
 8008404:	4614      	mov	r4, r2
 8008406:	4698      	mov	r8, r3
 8008408:	4606      	mov	r6, r0
 800840a:	b118      	cbz	r0, 8008414 <_vfiprintf_r+0x18>
 800840c:	6983      	ldr	r3, [r0, #24]
 800840e:	b90b      	cbnz	r3, 8008414 <_vfiprintf_r+0x18>
 8008410:	f000 fcaa 	bl	8008d68 <__sinit>
 8008414:	4b89      	ldr	r3, [pc, #548]	; (800863c <_vfiprintf_r+0x240>)
 8008416:	429d      	cmp	r5, r3
 8008418:	d11b      	bne.n	8008452 <_vfiprintf_r+0x56>
 800841a:	6875      	ldr	r5, [r6, #4]
 800841c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800841e:	07d9      	lsls	r1, r3, #31
 8008420:	d405      	bmi.n	800842e <_vfiprintf_r+0x32>
 8008422:	89ab      	ldrh	r3, [r5, #12]
 8008424:	059a      	lsls	r2, r3, #22
 8008426:	d402      	bmi.n	800842e <_vfiprintf_r+0x32>
 8008428:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800842a:	f000 fd3b 	bl	8008ea4 <__retarget_lock_acquire_recursive>
 800842e:	89ab      	ldrh	r3, [r5, #12]
 8008430:	071b      	lsls	r3, r3, #28
 8008432:	d501      	bpl.n	8008438 <_vfiprintf_r+0x3c>
 8008434:	692b      	ldr	r3, [r5, #16]
 8008436:	b9eb      	cbnz	r3, 8008474 <_vfiprintf_r+0x78>
 8008438:	4629      	mov	r1, r5
 800843a:	4630      	mov	r0, r6
 800843c:	f000 fb04 	bl	8008a48 <__swsetup_r>
 8008440:	b1c0      	cbz	r0, 8008474 <_vfiprintf_r+0x78>
 8008442:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008444:	07dc      	lsls	r4, r3, #31
 8008446:	d50e      	bpl.n	8008466 <_vfiprintf_r+0x6a>
 8008448:	f04f 30ff 	mov.w	r0, #4294967295
 800844c:	b01d      	add	sp, #116	; 0x74
 800844e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008452:	4b7b      	ldr	r3, [pc, #492]	; (8008640 <_vfiprintf_r+0x244>)
 8008454:	429d      	cmp	r5, r3
 8008456:	d101      	bne.n	800845c <_vfiprintf_r+0x60>
 8008458:	68b5      	ldr	r5, [r6, #8]
 800845a:	e7df      	b.n	800841c <_vfiprintf_r+0x20>
 800845c:	4b79      	ldr	r3, [pc, #484]	; (8008644 <_vfiprintf_r+0x248>)
 800845e:	429d      	cmp	r5, r3
 8008460:	bf08      	it	eq
 8008462:	68f5      	ldreq	r5, [r6, #12]
 8008464:	e7da      	b.n	800841c <_vfiprintf_r+0x20>
 8008466:	89ab      	ldrh	r3, [r5, #12]
 8008468:	0598      	lsls	r0, r3, #22
 800846a:	d4ed      	bmi.n	8008448 <_vfiprintf_r+0x4c>
 800846c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800846e:	f000 fd1a 	bl	8008ea6 <__retarget_lock_release_recursive>
 8008472:	e7e9      	b.n	8008448 <_vfiprintf_r+0x4c>
 8008474:	2300      	movs	r3, #0
 8008476:	9309      	str	r3, [sp, #36]	; 0x24
 8008478:	2320      	movs	r3, #32
 800847a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800847e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008482:	2330      	movs	r3, #48	; 0x30
 8008484:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008648 <_vfiprintf_r+0x24c>
 8008488:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800848c:	f04f 0901 	mov.w	r9, #1
 8008490:	4623      	mov	r3, r4
 8008492:	469a      	mov	sl, r3
 8008494:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008498:	b10a      	cbz	r2, 800849e <_vfiprintf_r+0xa2>
 800849a:	2a25      	cmp	r2, #37	; 0x25
 800849c:	d1f9      	bne.n	8008492 <_vfiprintf_r+0x96>
 800849e:	ebba 0b04 	subs.w	fp, sl, r4
 80084a2:	d00b      	beq.n	80084bc <_vfiprintf_r+0xc0>
 80084a4:	465b      	mov	r3, fp
 80084a6:	4622      	mov	r2, r4
 80084a8:	4629      	mov	r1, r5
 80084aa:	4630      	mov	r0, r6
 80084ac:	f7ff ff93 	bl	80083d6 <__sfputs_r>
 80084b0:	3001      	adds	r0, #1
 80084b2:	f000 80aa 	beq.w	800860a <_vfiprintf_r+0x20e>
 80084b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084b8:	445a      	add	r2, fp
 80084ba:	9209      	str	r2, [sp, #36]	; 0x24
 80084bc:	f89a 3000 	ldrb.w	r3, [sl]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f000 80a2 	beq.w	800860a <_vfiprintf_r+0x20e>
 80084c6:	2300      	movs	r3, #0
 80084c8:	f04f 32ff 	mov.w	r2, #4294967295
 80084cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084d0:	f10a 0a01 	add.w	sl, sl, #1
 80084d4:	9304      	str	r3, [sp, #16]
 80084d6:	9307      	str	r3, [sp, #28]
 80084d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084dc:	931a      	str	r3, [sp, #104]	; 0x68
 80084de:	4654      	mov	r4, sl
 80084e0:	2205      	movs	r2, #5
 80084e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084e6:	4858      	ldr	r0, [pc, #352]	; (8008648 <_vfiprintf_r+0x24c>)
 80084e8:	f7f7 fed2 	bl	8000290 <memchr>
 80084ec:	9a04      	ldr	r2, [sp, #16]
 80084ee:	b9d8      	cbnz	r0, 8008528 <_vfiprintf_r+0x12c>
 80084f0:	06d1      	lsls	r1, r2, #27
 80084f2:	bf44      	itt	mi
 80084f4:	2320      	movmi	r3, #32
 80084f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084fa:	0713      	lsls	r3, r2, #28
 80084fc:	bf44      	itt	mi
 80084fe:	232b      	movmi	r3, #43	; 0x2b
 8008500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008504:	f89a 3000 	ldrb.w	r3, [sl]
 8008508:	2b2a      	cmp	r3, #42	; 0x2a
 800850a:	d015      	beq.n	8008538 <_vfiprintf_r+0x13c>
 800850c:	9a07      	ldr	r2, [sp, #28]
 800850e:	4654      	mov	r4, sl
 8008510:	2000      	movs	r0, #0
 8008512:	f04f 0c0a 	mov.w	ip, #10
 8008516:	4621      	mov	r1, r4
 8008518:	f811 3b01 	ldrb.w	r3, [r1], #1
 800851c:	3b30      	subs	r3, #48	; 0x30
 800851e:	2b09      	cmp	r3, #9
 8008520:	d94e      	bls.n	80085c0 <_vfiprintf_r+0x1c4>
 8008522:	b1b0      	cbz	r0, 8008552 <_vfiprintf_r+0x156>
 8008524:	9207      	str	r2, [sp, #28]
 8008526:	e014      	b.n	8008552 <_vfiprintf_r+0x156>
 8008528:	eba0 0308 	sub.w	r3, r0, r8
 800852c:	fa09 f303 	lsl.w	r3, r9, r3
 8008530:	4313      	orrs	r3, r2
 8008532:	9304      	str	r3, [sp, #16]
 8008534:	46a2      	mov	sl, r4
 8008536:	e7d2      	b.n	80084de <_vfiprintf_r+0xe2>
 8008538:	9b03      	ldr	r3, [sp, #12]
 800853a:	1d19      	adds	r1, r3, #4
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	9103      	str	r1, [sp, #12]
 8008540:	2b00      	cmp	r3, #0
 8008542:	bfbb      	ittet	lt
 8008544:	425b      	neglt	r3, r3
 8008546:	f042 0202 	orrlt.w	r2, r2, #2
 800854a:	9307      	strge	r3, [sp, #28]
 800854c:	9307      	strlt	r3, [sp, #28]
 800854e:	bfb8      	it	lt
 8008550:	9204      	strlt	r2, [sp, #16]
 8008552:	7823      	ldrb	r3, [r4, #0]
 8008554:	2b2e      	cmp	r3, #46	; 0x2e
 8008556:	d10c      	bne.n	8008572 <_vfiprintf_r+0x176>
 8008558:	7863      	ldrb	r3, [r4, #1]
 800855a:	2b2a      	cmp	r3, #42	; 0x2a
 800855c:	d135      	bne.n	80085ca <_vfiprintf_r+0x1ce>
 800855e:	9b03      	ldr	r3, [sp, #12]
 8008560:	1d1a      	adds	r2, r3, #4
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	9203      	str	r2, [sp, #12]
 8008566:	2b00      	cmp	r3, #0
 8008568:	bfb8      	it	lt
 800856a:	f04f 33ff 	movlt.w	r3, #4294967295
 800856e:	3402      	adds	r4, #2
 8008570:	9305      	str	r3, [sp, #20]
 8008572:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008658 <_vfiprintf_r+0x25c>
 8008576:	7821      	ldrb	r1, [r4, #0]
 8008578:	2203      	movs	r2, #3
 800857a:	4650      	mov	r0, sl
 800857c:	f7f7 fe88 	bl	8000290 <memchr>
 8008580:	b140      	cbz	r0, 8008594 <_vfiprintf_r+0x198>
 8008582:	2340      	movs	r3, #64	; 0x40
 8008584:	eba0 000a 	sub.w	r0, r0, sl
 8008588:	fa03 f000 	lsl.w	r0, r3, r0
 800858c:	9b04      	ldr	r3, [sp, #16]
 800858e:	4303      	orrs	r3, r0
 8008590:	3401      	adds	r4, #1
 8008592:	9304      	str	r3, [sp, #16]
 8008594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008598:	482c      	ldr	r0, [pc, #176]	; (800864c <_vfiprintf_r+0x250>)
 800859a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800859e:	2206      	movs	r2, #6
 80085a0:	f7f7 fe76 	bl	8000290 <memchr>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	d03f      	beq.n	8008628 <_vfiprintf_r+0x22c>
 80085a8:	4b29      	ldr	r3, [pc, #164]	; (8008650 <_vfiprintf_r+0x254>)
 80085aa:	bb1b      	cbnz	r3, 80085f4 <_vfiprintf_r+0x1f8>
 80085ac:	9b03      	ldr	r3, [sp, #12]
 80085ae:	3307      	adds	r3, #7
 80085b0:	f023 0307 	bic.w	r3, r3, #7
 80085b4:	3308      	adds	r3, #8
 80085b6:	9303      	str	r3, [sp, #12]
 80085b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ba:	443b      	add	r3, r7
 80085bc:	9309      	str	r3, [sp, #36]	; 0x24
 80085be:	e767      	b.n	8008490 <_vfiprintf_r+0x94>
 80085c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80085c4:	460c      	mov	r4, r1
 80085c6:	2001      	movs	r0, #1
 80085c8:	e7a5      	b.n	8008516 <_vfiprintf_r+0x11a>
 80085ca:	2300      	movs	r3, #0
 80085cc:	3401      	adds	r4, #1
 80085ce:	9305      	str	r3, [sp, #20]
 80085d0:	4619      	mov	r1, r3
 80085d2:	f04f 0c0a 	mov.w	ip, #10
 80085d6:	4620      	mov	r0, r4
 80085d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085dc:	3a30      	subs	r2, #48	; 0x30
 80085de:	2a09      	cmp	r2, #9
 80085e0:	d903      	bls.n	80085ea <_vfiprintf_r+0x1ee>
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d0c5      	beq.n	8008572 <_vfiprintf_r+0x176>
 80085e6:	9105      	str	r1, [sp, #20]
 80085e8:	e7c3      	b.n	8008572 <_vfiprintf_r+0x176>
 80085ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80085ee:	4604      	mov	r4, r0
 80085f0:	2301      	movs	r3, #1
 80085f2:	e7f0      	b.n	80085d6 <_vfiprintf_r+0x1da>
 80085f4:	ab03      	add	r3, sp, #12
 80085f6:	9300      	str	r3, [sp, #0]
 80085f8:	462a      	mov	r2, r5
 80085fa:	4b16      	ldr	r3, [pc, #88]	; (8008654 <_vfiprintf_r+0x258>)
 80085fc:	a904      	add	r1, sp, #16
 80085fe:	4630      	mov	r0, r6
 8008600:	f3af 8000 	nop.w
 8008604:	4607      	mov	r7, r0
 8008606:	1c78      	adds	r0, r7, #1
 8008608:	d1d6      	bne.n	80085b8 <_vfiprintf_r+0x1bc>
 800860a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800860c:	07d9      	lsls	r1, r3, #31
 800860e:	d405      	bmi.n	800861c <_vfiprintf_r+0x220>
 8008610:	89ab      	ldrh	r3, [r5, #12]
 8008612:	059a      	lsls	r2, r3, #22
 8008614:	d402      	bmi.n	800861c <_vfiprintf_r+0x220>
 8008616:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008618:	f000 fc45 	bl	8008ea6 <__retarget_lock_release_recursive>
 800861c:	89ab      	ldrh	r3, [r5, #12]
 800861e:	065b      	lsls	r3, r3, #25
 8008620:	f53f af12 	bmi.w	8008448 <_vfiprintf_r+0x4c>
 8008624:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008626:	e711      	b.n	800844c <_vfiprintf_r+0x50>
 8008628:	ab03      	add	r3, sp, #12
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	462a      	mov	r2, r5
 800862e:	4b09      	ldr	r3, [pc, #36]	; (8008654 <_vfiprintf_r+0x258>)
 8008630:	a904      	add	r1, sp, #16
 8008632:	4630      	mov	r0, r6
 8008634:	f000 f880 	bl	8008738 <_printf_i>
 8008638:	e7e4      	b.n	8008604 <_vfiprintf_r+0x208>
 800863a:	bf00      	nop
 800863c:	0800946c 	.word	0x0800946c
 8008640:	0800948c 	.word	0x0800948c
 8008644:	0800944c 	.word	0x0800944c
 8008648:	08009416 	.word	0x08009416
 800864c:	08009420 	.word	0x08009420
 8008650:	00000000 	.word	0x00000000
 8008654:	080083d7 	.word	0x080083d7
 8008658:	0800941c 	.word	0x0800941c

0800865c <_printf_common>:
 800865c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008660:	4616      	mov	r6, r2
 8008662:	4699      	mov	r9, r3
 8008664:	688a      	ldr	r2, [r1, #8]
 8008666:	690b      	ldr	r3, [r1, #16]
 8008668:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800866c:	4293      	cmp	r3, r2
 800866e:	bfb8      	it	lt
 8008670:	4613      	movlt	r3, r2
 8008672:	6033      	str	r3, [r6, #0]
 8008674:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008678:	4607      	mov	r7, r0
 800867a:	460c      	mov	r4, r1
 800867c:	b10a      	cbz	r2, 8008682 <_printf_common+0x26>
 800867e:	3301      	adds	r3, #1
 8008680:	6033      	str	r3, [r6, #0]
 8008682:	6823      	ldr	r3, [r4, #0]
 8008684:	0699      	lsls	r1, r3, #26
 8008686:	bf42      	ittt	mi
 8008688:	6833      	ldrmi	r3, [r6, #0]
 800868a:	3302      	addmi	r3, #2
 800868c:	6033      	strmi	r3, [r6, #0]
 800868e:	6825      	ldr	r5, [r4, #0]
 8008690:	f015 0506 	ands.w	r5, r5, #6
 8008694:	d106      	bne.n	80086a4 <_printf_common+0x48>
 8008696:	f104 0a19 	add.w	sl, r4, #25
 800869a:	68e3      	ldr	r3, [r4, #12]
 800869c:	6832      	ldr	r2, [r6, #0]
 800869e:	1a9b      	subs	r3, r3, r2
 80086a0:	42ab      	cmp	r3, r5
 80086a2:	dc26      	bgt.n	80086f2 <_printf_common+0x96>
 80086a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086a8:	1e13      	subs	r3, r2, #0
 80086aa:	6822      	ldr	r2, [r4, #0]
 80086ac:	bf18      	it	ne
 80086ae:	2301      	movne	r3, #1
 80086b0:	0692      	lsls	r2, r2, #26
 80086b2:	d42b      	bmi.n	800870c <_printf_common+0xb0>
 80086b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086b8:	4649      	mov	r1, r9
 80086ba:	4638      	mov	r0, r7
 80086bc:	47c0      	blx	r8
 80086be:	3001      	adds	r0, #1
 80086c0:	d01e      	beq.n	8008700 <_printf_common+0xa4>
 80086c2:	6823      	ldr	r3, [r4, #0]
 80086c4:	68e5      	ldr	r5, [r4, #12]
 80086c6:	6832      	ldr	r2, [r6, #0]
 80086c8:	f003 0306 	and.w	r3, r3, #6
 80086cc:	2b04      	cmp	r3, #4
 80086ce:	bf08      	it	eq
 80086d0:	1aad      	subeq	r5, r5, r2
 80086d2:	68a3      	ldr	r3, [r4, #8]
 80086d4:	6922      	ldr	r2, [r4, #16]
 80086d6:	bf0c      	ite	eq
 80086d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086dc:	2500      	movne	r5, #0
 80086de:	4293      	cmp	r3, r2
 80086e0:	bfc4      	itt	gt
 80086e2:	1a9b      	subgt	r3, r3, r2
 80086e4:	18ed      	addgt	r5, r5, r3
 80086e6:	2600      	movs	r6, #0
 80086e8:	341a      	adds	r4, #26
 80086ea:	42b5      	cmp	r5, r6
 80086ec:	d11a      	bne.n	8008724 <_printf_common+0xc8>
 80086ee:	2000      	movs	r0, #0
 80086f0:	e008      	b.n	8008704 <_printf_common+0xa8>
 80086f2:	2301      	movs	r3, #1
 80086f4:	4652      	mov	r2, sl
 80086f6:	4649      	mov	r1, r9
 80086f8:	4638      	mov	r0, r7
 80086fa:	47c0      	blx	r8
 80086fc:	3001      	adds	r0, #1
 80086fe:	d103      	bne.n	8008708 <_printf_common+0xac>
 8008700:	f04f 30ff 	mov.w	r0, #4294967295
 8008704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008708:	3501      	adds	r5, #1
 800870a:	e7c6      	b.n	800869a <_printf_common+0x3e>
 800870c:	18e1      	adds	r1, r4, r3
 800870e:	1c5a      	adds	r2, r3, #1
 8008710:	2030      	movs	r0, #48	; 0x30
 8008712:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008716:	4422      	add	r2, r4
 8008718:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800871c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008720:	3302      	adds	r3, #2
 8008722:	e7c7      	b.n	80086b4 <_printf_common+0x58>
 8008724:	2301      	movs	r3, #1
 8008726:	4622      	mov	r2, r4
 8008728:	4649      	mov	r1, r9
 800872a:	4638      	mov	r0, r7
 800872c:	47c0      	blx	r8
 800872e:	3001      	adds	r0, #1
 8008730:	d0e6      	beq.n	8008700 <_printf_common+0xa4>
 8008732:	3601      	adds	r6, #1
 8008734:	e7d9      	b.n	80086ea <_printf_common+0x8e>
	...

08008738 <_printf_i>:
 8008738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800873c:	7e0f      	ldrb	r7, [r1, #24]
 800873e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008740:	2f78      	cmp	r7, #120	; 0x78
 8008742:	4691      	mov	r9, r2
 8008744:	4680      	mov	r8, r0
 8008746:	460c      	mov	r4, r1
 8008748:	469a      	mov	sl, r3
 800874a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800874e:	d807      	bhi.n	8008760 <_printf_i+0x28>
 8008750:	2f62      	cmp	r7, #98	; 0x62
 8008752:	d80a      	bhi.n	800876a <_printf_i+0x32>
 8008754:	2f00      	cmp	r7, #0
 8008756:	f000 80d8 	beq.w	800890a <_printf_i+0x1d2>
 800875a:	2f58      	cmp	r7, #88	; 0x58
 800875c:	f000 80a3 	beq.w	80088a6 <_printf_i+0x16e>
 8008760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008764:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008768:	e03a      	b.n	80087e0 <_printf_i+0xa8>
 800876a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800876e:	2b15      	cmp	r3, #21
 8008770:	d8f6      	bhi.n	8008760 <_printf_i+0x28>
 8008772:	a101      	add	r1, pc, #4	; (adr r1, 8008778 <_printf_i+0x40>)
 8008774:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008778:	080087d1 	.word	0x080087d1
 800877c:	080087e5 	.word	0x080087e5
 8008780:	08008761 	.word	0x08008761
 8008784:	08008761 	.word	0x08008761
 8008788:	08008761 	.word	0x08008761
 800878c:	08008761 	.word	0x08008761
 8008790:	080087e5 	.word	0x080087e5
 8008794:	08008761 	.word	0x08008761
 8008798:	08008761 	.word	0x08008761
 800879c:	08008761 	.word	0x08008761
 80087a0:	08008761 	.word	0x08008761
 80087a4:	080088f1 	.word	0x080088f1
 80087a8:	08008815 	.word	0x08008815
 80087ac:	080088d3 	.word	0x080088d3
 80087b0:	08008761 	.word	0x08008761
 80087b4:	08008761 	.word	0x08008761
 80087b8:	08008913 	.word	0x08008913
 80087bc:	08008761 	.word	0x08008761
 80087c0:	08008815 	.word	0x08008815
 80087c4:	08008761 	.word	0x08008761
 80087c8:	08008761 	.word	0x08008761
 80087cc:	080088db 	.word	0x080088db
 80087d0:	682b      	ldr	r3, [r5, #0]
 80087d2:	1d1a      	adds	r2, r3, #4
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	602a      	str	r2, [r5, #0]
 80087d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087e0:	2301      	movs	r3, #1
 80087e2:	e0a3      	b.n	800892c <_printf_i+0x1f4>
 80087e4:	6820      	ldr	r0, [r4, #0]
 80087e6:	6829      	ldr	r1, [r5, #0]
 80087e8:	0606      	lsls	r6, r0, #24
 80087ea:	f101 0304 	add.w	r3, r1, #4
 80087ee:	d50a      	bpl.n	8008806 <_printf_i+0xce>
 80087f0:	680e      	ldr	r6, [r1, #0]
 80087f2:	602b      	str	r3, [r5, #0]
 80087f4:	2e00      	cmp	r6, #0
 80087f6:	da03      	bge.n	8008800 <_printf_i+0xc8>
 80087f8:	232d      	movs	r3, #45	; 0x2d
 80087fa:	4276      	negs	r6, r6
 80087fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008800:	485e      	ldr	r0, [pc, #376]	; (800897c <_printf_i+0x244>)
 8008802:	230a      	movs	r3, #10
 8008804:	e019      	b.n	800883a <_printf_i+0x102>
 8008806:	680e      	ldr	r6, [r1, #0]
 8008808:	602b      	str	r3, [r5, #0]
 800880a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800880e:	bf18      	it	ne
 8008810:	b236      	sxthne	r6, r6
 8008812:	e7ef      	b.n	80087f4 <_printf_i+0xbc>
 8008814:	682b      	ldr	r3, [r5, #0]
 8008816:	6820      	ldr	r0, [r4, #0]
 8008818:	1d19      	adds	r1, r3, #4
 800881a:	6029      	str	r1, [r5, #0]
 800881c:	0601      	lsls	r1, r0, #24
 800881e:	d501      	bpl.n	8008824 <_printf_i+0xec>
 8008820:	681e      	ldr	r6, [r3, #0]
 8008822:	e002      	b.n	800882a <_printf_i+0xf2>
 8008824:	0646      	lsls	r6, r0, #25
 8008826:	d5fb      	bpl.n	8008820 <_printf_i+0xe8>
 8008828:	881e      	ldrh	r6, [r3, #0]
 800882a:	4854      	ldr	r0, [pc, #336]	; (800897c <_printf_i+0x244>)
 800882c:	2f6f      	cmp	r7, #111	; 0x6f
 800882e:	bf0c      	ite	eq
 8008830:	2308      	moveq	r3, #8
 8008832:	230a      	movne	r3, #10
 8008834:	2100      	movs	r1, #0
 8008836:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800883a:	6865      	ldr	r5, [r4, #4]
 800883c:	60a5      	str	r5, [r4, #8]
 800883e:	2d00      	cmp	r5, #0
 8008840:	bfa2      	ittt	ge
 8008842:	6821      	ldrge	r1, [r4, #0]
 8008844:	f021 0104 	bicge.w	r1, r1, #4
 8008848:	6021      	strge	r1, [r4, #0]
 800884a:	b90e      	cbnz	r6, 8008850 <_printf_i+0x118>
 800884c:	2d00      	cmp	r5, #0
 800884e:	d04d      	beq.n	80088ec <_printf_i+0x1b4>
 8008850:	4615      	mov	r5, r2
 8008852:	fbb6 f1f3 	udiv	r1, r6, r3
 8008856:	fb03 6711 	mls	r7, r3, r1, r6
 800885a:	5dc7      	ldrb	r7, [r0, r7]
 800885c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008860:	4637      	mov	r7, r6
 8008862:	42bb      	cmp	r3, r7
 8008864:	460e      	mov	r6, r1
 8008866:	d9f4      	bls.n	8008852 <_printf_i+0x11a>
 8008868:	2b08      	cmp	r3, #8
 800886a:	d10b      	bne.n	8008884 <_printf_i+0x14c>
 800886c:	6823      	ldr	r3, [r4, #0]
 800886e:	07de      	lsls	r6, r3, #31
 8008870:	d508      	bpl.n	8008884 <_printf_i+0x14c>
 8008872:	6923      	ldr	r3, [r4, #16]
 8008874:	6861      	ldr	r1, [r4, #4]
 8008876:	4299      	cmp	r1, r3
 8008878:	bfde      	ittt	le
 800887a:	2330      	movle	r3, #48	; 0x30
 800887c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008880:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008884:	1b52      	subs	r2, r2, r5
 8008886:	6122      	str	r2, [r4, #16]
 8008888:	f8cd a000 	str.w	sl, [sp]
 800888c:	464b      	mov	r3, r9
 800888e:	aa03      	add	r2, sp, #12
 8008890:	4621      	mov	r1, r4
 8008892:	4640      	mov	r0, r8
 8008894:	f7ff fee2 	bl	800865c <_printf_common>
 8008898:	3001      	adds	r0, #1
 800889a:	d14c      	bne.n	8008936 <_printf_i+0x1fe>
 800889c:	f04f 30ff 	mov.w	r0, #4294967295
 80088a0:	b004      	add	sp, #16
 80088a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088a6:	4835      	ldr	r0, [pc, #212]	; (800897c <_printf_i+0x244>)
 80088a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80088ac:	6829      	ldr	r1, [r5, #0]
 80088ae:	6823      	ldr	r3, [r4, #0]
 80088b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80088b4:	6029      	str	r1, [r5, #0]
 80088b6:	061d      	lsls	r5, r3, #24
 80088b8:	d514      	bpl.n	80088e4 <_printf_i+0x1ac>
 80088ba:	07df      	lsls	r7, r3, #31
 80088bc:	bf44      	itt	mi
 80088be:	f043 0320 	orrmi.w	r3, r3, #32
 80088c2:	6023      	strmi	r3, [r4, #0]
 80088c4:	b91e      	cbnz	r6, 80088ce <_printf_i+0x196>
 80088c6:	6823      	ldr	r3, [r4, #0]
 80088c8:	f023 0320 	bic.w	r3, r3, #32
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	2310      	movs	r3, #16
 80088d0:	e7b0      	b.n	8008834 <_printf_i+0xfc>
 80088d2:	6823      	ldr	r3, [r4, #0]
 80088d4:	f043 0320 	orr.w	r3, r3, #32
 80088d8:	6023      	str	r3, [r4, #0]
 80088da:	2378      	movs	r3, #120	; 0x78
 80088dc:	4828      	ldr	r0, [pc, #160]	; (8008980 <_printf_i+0x248>)
 80088de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088e2:	e7e3      	b.n	80088ac <_printf_i+0x174>
 80088e4:	0659      	lsls	r1, r3, #25
 80088e6:	bf48      	it	mi
 80088e8:	b2b6      	uxthmi	r6, r6
 80088ea:	e7e6      	b.n	80088ba <_printf_i+0x182>
 80088ec:	4615      	mov	r5, r2
 80088ee:	e7bb      	b.n	8008868 <_printf_i+0x130>
 80088f0:	682b      	ldr	r3, [r5, #0]
 80088f2:	6826      	ldr	r6, [r4, #0]
 80088f4:	6961      	ldr	r1, [r4, #20]
 80088f6:	1d18      	adds	r0, r3, #4
 80088f8:	6028      	str	r0, [r5, #0]
 80088fa:	0635      	lsls	r5, r6, #24
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	d501      	bpl.n	8008904 <_printf_i+0x1cc>
 8008900:	6019      	str	r1, [r3, #0]
 8008902:	e002      	b.n	800890a <_printf_i+0x1d2>
 8008904:	0670      	lsls	r0, r6, #25
 8008906:	d5fb      	bpl.n	8008900 <_printf_i+0x1c8>
 8008908:	8019      	strh	r1, [r3, #0]
 800890a:	2300      	movs	r3, #0
 800890c:	6123      	str	r3, [r4, #16]
 800890e:	4615      	mov	r5, r2
 8008910:	e7ba      	b.n	8008888 <_printf_i+0x150>
 8008912:	682b      	ldr	r3, [r5, #0]
 8008914:	1d1a      	adds	r2, r3, #4
 8008916:	602a      	str	r2, [r5, #0]
 8008918:	681d      	ldr	r5, [r3, #0]
 800891a:	6862      	ldr	r2, [r4, #4]
 800891c:	2100      	movs	r1, #0
 800891e:	4628      	mov	r0, r5
 8008920:	f7f7 fcb6 	bl	8000290 <memchr>
 8008924:	b108      	cbz	r0, 800892a <_printf_i+0x1f2>
 8008926:	1b40      	subs	r0, r0, r5
 8008928:	6060      	str	r0, [r4, #4]
 800892a:	6863      	ldr	r3, [r4, #4]
 800892c:	6123      	str	r3, [r4, #16]
 800892e:	2300      	movs	r3, #0
 8008930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008934:	e7a8      	b.n	8008888 <_printf_i+0x150>
 8008936:	6923      	ldr	r3, [r4, #16]
 8008938:	462a      	mov	r2, r5
 800893a:	4649      	mov	r1, r9
 800893c:	4640      	mov	r0, r8
 800893e:	47d0      	blx	sl
 8008940:	3001      	adds	r0, #1
 8008942:	d0ab      	beq.n	800889c <_printf_i+0x164>
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	079b      	lsls	r3, r3, #30
 8008948:	d413      	bmi.n	8008972 <_printf_i+0x23a>
 800894a:	68e0      	ldr	r0, [r4, #12]
 800894c:	9b03      	ldr	r3, [sp, #12]
 800894e:	4298      	cmp	r0, r3
 8008950:	bfb8      	it	lt
 8008952:	4618      	movlt	r0, r3
 8008954:	e7a4      	b.n	80088a0 <_printf_i+0x168>
 8008956:	2301      	movs	r3, #1
 8008958:	4632      	mov	r2, r6
 800895a:	4649      	mov	r1, r9
 800895c:	4640      	mov	r0, r8
 800895e:	47d0      	blx	sl
 8008960:	3001      	adds	r0, #1
 8008962:	d09b      	beq.n	800889c <_printf_i+0x164>
 8008964:	3501      	adds	r5, #1
 8008966:	68e3      	ldr	r3, [r4, #12]
 8008968:	9903      	ldr	r1, [sp, #12]
 800896a:	1a5b      	subs	r3, r3, r1
 800896c:	42ab      	cmp	r3, r5
 800896e:	dcf2      	bgt.n	8008956 <_printf_i+0x21e>
 8008970:	e7eb      	b.n	800894a <_printf_i+0x212>
 8008972:	2500      	movs	r5, #0
 8008974:	f104 0619 	add.w	r6, r4, #25
 8008978:	e7f5      	b.n	8008966 <_printf_i+0x22e>
 800897a:	bf00      	nop
 800897c:	08009427 	.word	0x08009427
 8008980:	08009438 	.word	0x08009438

08008984 <_sbrk_r>:
 8008984:	b538      	push	{r3, r4, r5, lr}
 8008986:	4d06      	ldr	r5, [pc, #24]	; (80089a0 <_sbrk_r+0x1c>)
 8008988:	2300      	movs	r3, #0
 800898a:	4604      	mov	r4, r0
 800898c:	4608      	mov	r0, r1
 800898e:	602b      	str	r3, [r5, #0]
 8008990:	f000 fc2c 	bl	80091ec <_sbrk>
 8008994:	1c43      	adds	r3, r0, #1
 8008996:	d102      	bne.n	800899e <_sbrk_r+0x1a>
 8008998:	682b      	ldr	r3, [r5, #0]
 800899a:	b103      	cbz	r3, 800899e <_sbrk_r+0x1a>
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	bd38      	pop	{r3, r4, r5, pc}
 80089a0:	2000d560 	.word	0x2000d560

080089a4 <__swbuf_r>:
 80089a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a6:	460e      	mov	r6, r1
 80089a8:	4614      	mov	r4, r2
 80089aa:	4605      	mov	r5, r0
 80089ac:	b118      	cbz	r0, 80089b6 <__swbuf_r+0x12>
 80089ae:	6983      	ldr	r3, [r0, #24]
 80089b0:	b90b      	cbnz	r3, 80089b6 <__swbuf_r+0x12>
 80089b2:	f000 f9d9 	bl	8008d68 <__sinit>
 80089b6:	4b21      	ldr	r3, [pc, #132]	; (8008a3c <__swbuf_r+0x98>)
 80089b8:	429c      	cmp	r4, r3
 80089ba:	d12b      	bne.n	8008a14 <__swbuf_r+0x70>
 80089bc:	686c      	ldr	r4, [r5, #4]
 80089be:	69a3      	ldr	r3, [r4, #24]
 80089c0:	60a3      	str	r3, [r4, #8]
 80089c2:	89a3      	ldrh	r3, [r4, #12]
 80089c4:	071a      	lsls	r2, r3, #28
 80089c6:	d52f      	bpl.n	8008a28 <__swbuf_r+0x84>
 80089c8:	6923      	ldr	r3, [r4, #16]
 80089ca:	b36b      	cbz	r3, 8008a28 <__swbuf_r+0x84>
 80089cc:	6923      	ldr	r3, [r4, #16]
 80089ce:	6820      	ldr	r0, [r4, #0]
 80089d0:	1ac0      	subs	r0, r0, r3
 80089d2:	6963      	ldr	r3, [r4, #20]
 80089d4:	b2f6      	uxtb	r6, r6
 80089d6:	4283      	cmp	r3, r0
 80089d8:	4637      	mov	r7, r6
 80089da:	dc04      	bgt.n	80089e6 <__swbuf_r+0x42>
 80089dc:	4621      	mov	r1, r4
 80089de:	4628      	mov	r0, r5
 80089e0:	f000 f92e 	bl	8008c40 <_fflush_r>
 80089e4:	bb30      	cbnz	r0, 8008a34 <__swbuf_r+0x90>
 80089e6:	68a3      	ldr	r3, [r4, #8]
 80089e8:	3b01      	subs	r3, #1
 80089ea:	60a3      	str	r3, [r4, #8]
 80089ec:	6823      	ldr	r3, [r4, #0]
 80089ee:	1c5a      	adds	r2, r3, #1
 80089f0:	6022      	str	r2, [r4, #0]
 80089f2:	701e      	strb	r6, [r3, #0]
 80089f4:	6963      	ldr	r3, [r4, #20]
 80089f6:	3001      	adds	r0, #1
 80089f8:	4283      	cmp	r3, r0
 80089fa:	d004      	beq.n	8008a06 <__swbuf_r+0x62>
 80089fc:	89a3      	ldrh	r3, [r4, #12]
 80089fe:	07db      	lsls	r3, r3, #31
 8008a00:	d506      	bpl.n	8008a10 <__swbuf_r+0x6c>
 8008a02:	2e0a      	cmp	r6, #10
 8008a04:	d104      	bne.n	8008a10 <__swbuf_r+0x6c>
 8008a06:	4621      	mov	r1, r4
 8008a08:	4628      	mov	r0, r5
 8008a0a:	f000 f919 	bl	8008c40 <_fflush_r>
 8008a0e:	b988      	cbnz	r0, 8008a34 <__swbuf_r+0x90>
 8008a10:	4638      	mov	r0, r7
 8008a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a14:	4b0a      	ldr	r3, [pc, #40]	; (8008a40 <__swbuf_r+0x9c>)
 8008a16:	429c      	cmp	r4, r3
 8008a18:	d101      	bne.n	8008a1e <__swbuf_r+0x7a>
 8008a1a:	68ac      	ldr	r4, [r5, #8]
 8008a1c:	e7cf      	b.n	80089be <__swbuf_r+0x1a>
 8008a1e:	4b09      	ldr	r3, [pc, #36]	; (8008a44 <__swbuf_r+0xa0>)
 8008a20:	429c      	cmp	r4, r3
 8008a22:	bf08      	it	eq
 8008a24:	68ec      	ldreq	r4, [r5, #12]
 8008a26:	e7ca      	b.n	80089be <__swbuf_r+0x1a>
 8008a28:	4621      	mov	r1, r4
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	f000 f80c 	bl	8008a48 <__swsetup_r>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d0cb      	beq.n	80089cc <__swbuf_r+0x28>
 8008a34:	f04f 37ff 	mov.w	r7, #4294967295
 8008a38:	e7ea      	b.n	8008a10 <__swbuf_r+0x6c>
 8008a3a:	bf00      	nop
 8008a3c:	0800946c 	.word	0x0800946c
 8008a40:	0800948c 	.word	0x0800948c
 8008a44:	0800944c 	.word	0x0800944c

08008a48 <__swsetup_r>:
 8008a48:	4b32      	ldr	r3, [pc, #200]	; (8008b14 <__swsetup_r+0xcc>)
 8008a4a:	b570      	push	{r4, r5, r6, lr}
 8008a4c:	681d      	ldr	r5, [r3, #0]
 8008a4e:	4606      	mov	r6, r0
 8008a50:	460c      	mov	r4, r1
 8008a52:	b125      	cbz	r5, 8008a5e <__swsetup_r+0x16>
 8008a54:	69ab      	ldr	r3, [r5, #24]
 8008a56:	b913      	cbnz	r3, 8008a5e <__swsetup_r+0x16>
 8008a58:	4628      	mov	r0, r5
 8008a5a:	f000 f985 	bl	8008d68 <__sinit>
 8008a5e:	4b2e      	ldr	r3, [pc, #184]	; (8008b18 <__swsetup_r+0xd0>)
 8008a60:	429c      	cmp	r4, r3
 8008a62:	d10f      	bne.n	8008a84 <__swsetup_r+0x3c>
 8008a64:	686c      	ldr	r4, [r5, #4]
 8008a66:	89a3      	ldrh	r3, [r4, #12]
 8008a68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a6c:	0719      	lsls	r1, r3, #28
 8008a6e:	d42c      	bmi.n	8008aca <__swsetup_r+0x82>
 8008a70:	06dd      	lsls	r5, r3, #27
 8008a72:	d411      	bmi.n	8008a98 <__swsetup_r+0x50>
 8008a74:	2309      	movs	r3, #9
 8008a76:	6033      	str	r3, [r6, #0]
 8008a78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a7c:	81a3      	strh	r3, [r4, #12]
 8008a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a82:	e03e      	b.n	8008b02 <__swsetup_r+0xba>
 8008a84:	4b25      	ldr	r3, [pc, #148]	; (8008b1c <__swsetup_r+0xd4>)
 8008a86:	429c      	cmp	r4, r3
 8008a88:	d101      	bne.n	8008a8e <__swsetup_r+0x46>
 8008a8a:	68ac      	ldr	r4, [r5, #8]
 8008a8c:	e7eb      	b.n	8008a66 <__swsetup_r+0x1e>
 8008a8e:	4b24      	ldr	r3, [pc, #144]	; (8008b20 <__swsetup_r+0xd8>)
 8008a90:	429c      	cmp	r4, r3
 8008a92:	bf08      	it	eq
 8008a94:	68ec      	ldreq	r4, [r5, #12]
 8008a96:	e7e6      	b.n	8008a66 <__swsetup_r+0x1e>
 8008a98:	0758      	lsls	r0, r3, #29
 8008a9a:	d512      	bpl.n	8008ac2 <__swsetup_r+0x7a>
 8008a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a9e:	b141      	cbz	r1, 8008ab2 <__swsetup_r+0x6a>
 8008aa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008aa4:	4299      	cmp	r1, r3
 8008aa6:	d002      	beq.n	8008aae <__swsetup_r+0x66>
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f7ff fa41 	bl	8007f30 <_free_r>
 8008aae:	2300      	movs	r3, #0
 8008ab0:	6363      	str	r3, [r4, #52]	; 0x34
 8008ab2:	89a3      	ldrh	r3, [r4, #12]
 8008ab4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ab8:	81a3      	strh	r3, [r4, #12]
 8008aba:	2300      	movs	r3, #0
 8008abc:	6063      	str	r3, [r4, #4]
 8008abe:	6923      	ldr	r3, [r4, #16]
 8008ac0:	6023      	str	r3, [r4, #0]
 8008ac2:	89a3      	ldrh	r3, [r4, #12]
 8008ac4:	f043 0308 	orr.w	r3, r3, #8
 8008ac8:	81a3      	strh	r3, [r4, #12]
 8008aca:	6923      	ldr	r3, [r4, #16]
 8008acc:	b94b      	cbnz	r3, 8008ae2 <__swsetup_r+0x9a>
 8008ace:	89a3      	ldrh	r3, [r4, #12]
 8008ad0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ad8:	d003      	beq.n	8008ae2 <__swsetup_r+0x9a>
 8008ada:	4621      	mov	r1, r4
 8008adc:	4630      	mov	r0, r6
 8008ade:	f000 fa09 	bl	8008ef4 <__smakebuf_r>
 8008ae2:	89a0      	ldrh	r0, [r4, #12]
 8008ae4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ae8:	f010 0301 	ands.w	r3, r0, #1
 8008aec:	d00a      	beq.n	8008b04 <__swsetup_r+0xbc>
 8008aee:	2300      	movs	r3, #0
 8008af0:	60a3      	str	r3, [r4, #8]
 8008af2:	6963      	ldr	r3, [r4, #20]
 8008af4:	425b      	negs	r3, r3
 8008af6:	61a3      	str	r3, [r4, #24]
 8008af8:	6923      	ldr	r3, [r4, #16]
 8008afa:	b943      	cbnz	r3, 8008b0e <__swsetup_r+0xc6>
 8008afc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b00:	d1ba      	bne.n	8008a78 <__swsetup_r+0x30>
 8008b02:	bd70      	pop	{r4, r5, r6, pc}
 8008b04:	0781      	lsls	r1, r0, #30
 8008b06:	bf58      	it	pl
 8008b08:	6963      	ldrpl	r3, [r4, #20]
 8008b0a:	60a3      	str	r3, [r4, #8]
 8008b0c:	e7f4      	b.n	8008af8 <__swsetup_r+0xb0>
 8008b0e:	2000      	movs	r0, #0
 8008b10:	e7f7      	b.n	8008b02 <__swsetup_r+0xba>
 8008b12:	bf00      	nop
 8008b14:	20000014 	.word	0x20000014
 8008b18:	0800946c 	.word	0x0800946c
 8008b1c:	0800948c 	.word	0x0800948c
 8008b20:	0800944c 	.word	0x0800944c

08008b24 <abort>:
 8008b24:	b508      	push	{r3, lr}
 8008b26:	2006      	movs	r0, #6
 8008b28:	f000 faa2 	bl	8009070 <raise>
 8008b2c:	2001      	movs	r0, #1
 8008b2e:	f7f8 f88d 	bl	8000c4c <_exit>
	...

08008b34 <__sflush_r>:
 8008b34:	898a      	ldrh	r2, [r1, #12]
 8008b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b3a:	4605      	mov	r5, r0
 8008b3c:	0710      	lsls	r0, r2, #28
 8008b3e:	460c      	mov	r4, r1
 8008b40:	d458      	bmi.n	8008bf4 <__sflush_r+0xc0>
 8008b42:	684b      	ldr	r3, [r1, #4]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	dc05      	bgt.n	8008b54 <__sflush_r+0x20>
 8008b48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	dc02      	bgt.n	8008b54 <__sflush_r+0x20>
 8008b4e:	2000      	movs	r0, #0
 8008b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b56:	2e00      	cmp	r6, #0
 8008b58:	d0f9      	beq.n	8008b4e <__sflush_r+0x1a>
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b60:	682f      	ldr	r7, [r5, #0]
 8008b62:	602b      	str	r3, [r5, #0]
 8008b64:	d032      	beq.n	8008bcc <__sflush_r+0x98>
 8008b66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b68:	89a3      	ldrh	r3, [r4, #12]
 8008b6a:	075a      	lsls	r2, r3, #29
 8008b6c:	d505      	bpl.n	8008b7a <__sflush_r+0x46>
 8008b6e:	6863      	ldr	r3, [r4, #4]
 8008b70:	1ac0      	subs	r0, r0, r3
 8008b72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b74:	b10b      	cbz	r3, 8008b7a <__sflush_r+0x46>
 8008b76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b78:	1ac0      	subs	r0, r0, r3
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b80:	6a21      	ldr	r1, [r4, #32]
 8008b82:	4628      	mov	r0, r5
 8008b84:	47b0      	blx	r6
 8008b86:	1c43      	adds	r3, r0, #1
 8008b88:	89a3      	ldrh	r3, [r4, #12]
 8008b8a:	d106      	bne.n	8008b9a <__sflush_r+0x66>
 8008b8c:	6829      	ldr	r1, [r5, #0]
 8008b8e:	291d      	cmp	r1, #29
 8008b90:	d82c      	bhi.n	8008bec <__sflush_r+0xb8>
 8008b92:	4a2a      	ldr	r2, [pc, #168]	; (8008c3c <__sflush_r+0x108>)
 8008b94:	40ca      	lsrs	r2, r1
 8008b96:	07d6      	lsls	r6, r2, #31
 8008b98:	d528      	bpl.n	8008bec <__sflush_r+0xb8>
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	6062      	str	r2, [r4, #4]
 8008b9e:	04d9      	lsls	r1, r3, #19
 8008ba0:	6922      	ldr	r2, [r4, #16]
 8008ba2:	6022      	str	r2, [r4, #0]
 8008ba4:	d504      	bpl.n	8008bb0 <__sflush_r+0x7c>
 8008ba6:	1c42      	adds	r2, r0, #1
 8008ba8:	d101      	bne.n	8008bae <__sflush_r+0x7a>
 8008baa:	682b      	ldr	r3, [r5, #0]
 8008bac:	b903      	cbnz	r3, 8008bb0 <__sflush_r+0x7c>
 8008bae:	6560      	str	r0, [r4, #84]	; 0x54
 8008bb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bb2:	602f      	str	r7, [r5, #0]
 8008bb4:	2900      	cmp	r1, #0
 8008bb6:	d0ca      	beq.n	8008b4e <__sflush_r+0x1a>
 8008bb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bbc:	4299      	cmp	r1, r3
 8008bbe:	d002      	beq.n	8008bc6 <__sflush_r+0x92>
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	f7ff f9b5 	bl	8007f30 <_free_r>
 8008bc6:	2000      	movs	r0, #0
 8008bc8:	6360      	str	r0, [r4, #52]	; 0x34
 8008bca:	e7c1      	b.n	8008b50 <__sflush_r+0x1c>
 8008bcc:	6a21      	ldr	r1, [r4, #32]
 8008bce:	2301      	movs	r3, #1
 8008bd0:	4628      	mov	r0, r5
 8008bd2:	47b0      	blx	r6
 8008bd4:	1c41      	adds	r1, r0, #1
 8008bd6:	d1c7      	bne.n	8008b68 <__sflush_r+0x34>
 8008bd8:	682b      	ldr	r3, [r5, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d0c4      	beq.n	8008b68 <__sflush_r+0x34>
 8008bde:	2b1d      	cmp	r3, #29
 8008be0:	d001      	beq.n	8008be6 <__sflush_r+0xb2>
 8008be2:	2b16      	cmp	r3, #22
 8008be4:	d101      	bne.n	8008bea <__sflush_r+0xb6>
 8008be6:	602f      	str	r7, [r5, #0]
 8008be8:	e7b1      	b.n	8008b4e <__sflush_r+0x1a>
 8008bea:	89a3      	ldrh	r3, [r4, #12]
 8008bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bf0:	81a3      	strh	r3, [r4, #12]
 8008bf2:	e7ad      	b.n	8008b50 <__sflush_r+0x1c>
 8008bf4:	690f      	ldr	r7, [r1, #16]
 8008bf6:	2f00      	cmp	r7, #0
 8008bf8:	d0a9      	beq.n	8008b4e <__sflush_r+0x1a>
 8008bfa:	0793      	lsls	r3, r2, #30
 8008bfc:	680e      	ldr	r6, [r1, #0]
 8008bfe:	bf08      	it	eq
 8008c00:	694b      	ldreq	r3, [r1, #20]
 8008c02:	600f      	str	r7, [r1, #0]
 8008c04:	bf18      	it	ne
 8008c06:	2300      	movne	r3, #0
 8008c08:	eba6 0807 	sub.w	r8, r6, r7
 8008c0c:	608b      	str	r3, [r1, #8]
 8008c0e:	f1b8 0f00 	cmp.w	r8, #0
 8008c12:	dd9c      	ble.n	8008b4e <__sflush_r+0x1a>
 8008c14:	6a21      	ldr	r1, [r4, #32]
 8008c16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c18:	4643      	mov	r3, r8
 8008c1a:	463a      	mov	r2, r7
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	47b0      	blx	r6
 8008c20:	2800      	cmp	r0, #0
 8008c22:	dc06      	bgt.n	8008c32 <__sflush_r+0xfe>
 8008c24:	89a3      	ldrh	r3, [r4, #12]
 8008c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c2a:	81a3      	strh	r3, [r4, #12]
 8008c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c30:	e78e      	b.n	8008b50 <__sflush_r+0x1c>
 8008c32:	4407      	add	r7, r0
 8008c34:	eba8 0800 	sub.w	r8, r8, r0
 8008c38:	e7e9      	b.n	8008c0e <__sflush_r+0xda>
 8008c3a:	bf00      	nop
 8008c3c:	20400001 	.word	0x20400001

08008c40 <_fflush_r>:
 8008c40:	b538      	push	{r3, r4, r5, lr}
 8008c42:	690b      	ldr	r3, [r1, #16]
 8008c44:	4605      	mov	r5, r0
 8008c46:	460c      	mov	r4, r1
 8008c48:	b913      	cbnz	r3, 8008c50 <_fflush_r+0x10>
 8008c4a:	2500      	movs	r5, #0
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	bd38      	pop	{r3, r4, r5, pc}
 8008c50:	b118      	cbz	r0, 8008c5a <_fflush_r+0x1a>
 8008c52:	6983      	ldr	r3, [r0, #24]
 8008c54:	b90b      	cbnz	r3, 8008c5a <_fflush_r+0x1a>
 8008c56:	f000 f887 	bl	8008d68 <__sinit>
 8008c5a:	4b14      	ldr	r3, [pc, #80]	; (8008cac <_fflush_r+0x6c>)
 8008c5c:	429c      	cmp	r4, r3
 8008c5e:	d11b      	bne.n	8008c98 <_fflush_r+0x58>
 8008c60:	686c      	ldr	r4, [r5, #4]
 8008c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d0ef      	beq.n	8008c4a <_fflush_r+0xa>
 8008c6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c6c:	07d0      	lsls	r0, r2, #31
 8008c6e:	d404      	bmi.n	8008c7a <_fflush_r+0x3a>
 8008c70:	0599      	lsls	r1, r3, #22
 8008c72:	d402      	bmi.n	8008c7a <_fflush_r+0x3a>
 8008c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c76:	f000 f915 	bl	8008ea4 <__retarget_lock_acquire_recursive>
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	4621      	mov	r1, r4
 8008c7e:	f7ff ff59 	bl	8008b34 <__sflush_r>
 8008c82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c84:	07da      	lsls	r2, r3, #31
 8008c86:	4605      	mov	r5, r0
 8008c88:	d4e0      	bmi.n	8008c4c <_fflush_r+0xc>
 8008c8a:	89a3      	ldrh	r3, [r4, #12]
 8008c8c:	059b      	lsls	r3, r3, #22
 8008c8e:	d4dd      	bmi.n	8008c4c <_fflush_r+0xc>
 8008c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c92:	f000 f908 	bl	8008ea6 <__retarget_lock_release_recursive>
 8008c96:	e7d9      	b.n	8008c4c <_fflush_r+0xc>
 8008c98:	4b05      	ldr	r3, [pc, #20]	; (8008cb0 <_fflush_r+0x70>)
 8008c9a:	429c      	cmp	r4, r3
 8008c9c:	d101      	bne.n	8008ca2 <_fflush_r+0x62>
 8008c9e:	68ac      	ldr	r4, [r5, #8]
 8008ca0:	e7df      	b.n	8008c62 <_fflush_r+0x22>
 8008ca2:	4b04      	ldr	r3, [pc, #16]	; (8008cb4 <_fflush_r+0x74>)
 8008ca4:	429c      	cmp	r4, r3
 8008ca6:	bf08      	it	eq
 8008ca8:	68ec      	ldreq	r4, [r5, #12]
 8008caa:	e7da      	b.n	8008c62 <_fflush_r+0x22>
 8008cac:	0800946c 	.word	0x0800946c
 8008cb0:	0800948c 	.word	0x0800948c
 8008cb4:	0800944c 	.word	0x0800944c

08008cb8 <std>:
 8008cb8:	2300      	movs	r3, #0
 8008cba:	b510      	push	{r4, lr}
 8008cbc:	4604      	mov	r4, r0
 8008cbe:	e9c0 3300 	strd	r3, r3, [r0]
 8008cc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cc6:	6083      	str	r3, [r0, #8]
 8008cc8:	8181      	strh	r1, [r0, #12]
 8008cca:	6643      	str	r3, [r0, #100]	; 0x64
 8008ccc:	81c2      	strh	r2, [r0, #14]
 8008cce:	6183      	str	r3, [r0, #24]
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	2208      	movs	r2, #8
 8008cd4:	305c      	adds	r0, #92	; 0x5c
 8008cd6:	f7ff f88d 	bl	8007df4 <memset>
 8008cda:	4b05      	ldr	r3, [pc, #20]	; (8008cf0 <std+0x38>)
 8008cdc:	6263      	str	r3, [r4, #36]	; 0x24
 8008cde:	4b05      	ldr	r3, [pc, #20]	; (8008cf4 <std+0x3c>)
 8008ce0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ce2:	4b05      	ldr	r3, [pc, #20]	; (8008cf8 <std+0x40>)
 8008ce4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ce6:	4b05      	ldr	r3, [pc, #20]	; (8008cfc <std+0x44>)
 8008ce8:	6224      	str	r4, [r4, #32]
 8008cea:	6323      	str	r3, [r4, #48]	; 0x30
 8008cec:	bd10      	pop	{r4, pc}
 8008cee:	bf00      	nop
 8008cf0:	080090a9 	.word	0x080090a9
 8008cf4:	080090cb 	.word	0x080090cb
 8008cf8:	08009103 	.word	0x08009103
 8008cfc:	08009127 	.word	0x08009127

08008d00 <_cleanup_r>:
 8008d00:	4901      	ldr	r1, [pc, #4]	; (8008d08 <_cleanup_r+0x8>)
 8008d02:	f000 b8af 	b.w	8008e64 <_fwalk_reent>
 8008d06:	bf00      	nop
 8008d08:	08008c41 	.word	0x08008c41

08008d0c <__sfmoreglue>:
 8008d0c:	b570      	push	{r4, r5, r6, lr}
 8008d0e:	2268      	movs	r2, #104	; 0x68
 8008d10:	1e4d      	subs	r5, r1, #1
 8008d12:	4355      	muls	r5, r2
 8008d14:	460e      	mov	r6, r1
 8008d16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d1a:	f7ff f975 	bl	8008008 <_malloc_r>
 8008d1e:	4604      	mov	r4, r0
 8008d20:	b140      	cbz	r0, 8008d34 <__sfmoreglue+0x28>
 8008d22:	2100      	movs	r1, #0
 8008d24:	e9c0 1600 	strd	r1, r6, [r0]
 8008d28:	300c      	adds	r0, #12
 8008d2a:	60a0      	str	r0, [r4, #8]
 8008d2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d30:	f7ff f860 	bl	8007df4 <memset>
 8008d34:	4620      	mov	r0, r4
 8008d36:	bd70      	pop	{r4, r5, r6, pc}

08008d38 <__sfp_lock_acquire>:
 8008d38:	4801      	ldr	r0, [pc, #4]	; (8008d40 <__sfp_lock_acquire+0x8>)
 8008d3a:	f000 b8b3 	b.w	8008ea4 <__retarget_lock_acquire_recursive>
 8008d3e:	bf00      	nop
 8008d40:	2000d55d 	.word	0x2000d55d

08008d44 <__sfp_lock_release>:
 8008d44:	4801      	ldr	r0, [pc, #4]	; (8008d4c <__sfp_lock_release+0x8>)
 8008d46:	f000 b8ae 	b.w	8008ea6 <__retarget_lock_release_recursive>
 8008d4a:	bf00      	nop
 8008d4c:	2000d55d 	.word	0x2000d55d

08008d50 <__sinit_lock_acquire>:
 8008d50:	4801      	ldr	r0, [pc, #4]	; (8008d58 <__sinit_lock_acquire+0x8>)
 8008d52:	f000 b8a7 	b.w	8008ea4 <__retarget_lock_acquire_recursive>
 8008d56:	bf00      	nop
 8008d58:	2000d55e 	.word	0x2000d55e

08008d5c <__sinit_lock_release>:
 8008d5c:	4801      	ldr	r0, [pc, #4]	; (8008d64 <__sinit_lock_release+0x8>)
 8008d5e:	f000 b8a2 	b.w	8008ea6 <__retarget_lock_release_recursive>
 8008d62:	bf00      	nop
 8008d64:	2000d55e 	.word	0x2000d55e

08008d68 <__sinit>:
 8008d68:	b510      	push	{r4, lr}
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	f7ff fff0 	bl	8008d50 <__sinit_lock_acquire>
 8008d70:	69a3      	ldr	r3, [r4, #24]
 8008d72:	b11b      	cbz	r3, 8008d7c <__sinit+0x14>
 8008d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d78:	f7ff bff0 	b.w	8008d5c <__sinit_lock_release>
 8008d7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d80:	6523      	str	r3, [r4, #80]	; 0x50
 8008d82:	4b13      	ldr	r3, [pc, #76]	; (8008dd0 <__sinit+0x68>)
 8008d84:	4a13      	ldr	r2, [pc, #76]	; (8008dd4 <__sinit+0x6c>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d8a:	42a3      	cmp	r3, r4
 8008d8c:	bf04      	itt	eq
 8008d8e:	2301      	moveq	r3, #1
 8008d90:	61a3      	streq	r3, [r4, #24]
 8008d92:	4620      	mov	r0, r4
 8008d94:	f000 f820 	bl	8008dd8 <__sfp>
 8008d98:	6060      	str	r0, [r4, #4]
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f000 f81c 	bl	8008dd8 <__sfp>
 8008da0:	60a0      	str	r0, [r4, #8]
 8008da2:	4620      	mov	r0, r4
 8008da4:	f000 f818 	bl	8008dd8 <__sfp>
 8008da8:	2200      	movs	r2, #0
 8008daa:	60e0      	str	r0, [r4, #12]
 8008dac:	2104      	movs	r1, #4
 8008dae:	6860      	ldr	r0, [r4, #4]
 8008db0:	f7ff ff82 	bl	8008cb8 <std>
 8008db4:	68a0      	ldr	r0, [r4, #8]
 8008db6:	2201      	movs	r2, #1
 8008db8:	2109      	movs	r1, #9
 8008dba:	f7ff ff7d 	bl	8008cb8 <std>
 8008dbe:	68e0      	ldr	r0, [r4, #12]
 8008dc0:	2202      	movs	r2, #2
 8008dc2:	2112      	movs	r1, #18
 8008dc4:	f7ff ff78 	bl	8008cb8 <std>
 8008dc8:	2301      	movs	r3, #1
 8008dca:	61a3      	str	r3, [r4, #24]
 8008dcc:	e7d2      	b.n	8008d74 <__sinit+0xc>
 8008dce:	bf00      	nop
 8008dd0:	08009364 	.word	0x08009364
 8008dd4:	08008d01 	.word	0x08008d01

08008dd8 <__sfp>:
 8008dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dda:	4607      	mov	r7, r0
 8008ddc:	f7ff ffac 	bl	8008d38 <__sfp_lock_acquire>
 8008de0:	4b1e      	ldr	r3, [pc, #120]	; (8008e5c <__sfp+0x84>)
 8008de2:	681e      	ldr	r6, [r3, #0]
 8008de4:	69b3      	ldr	r3, [r6, #24]
 8008de6:	b913      	cbnz	r3, 8008dee <__sfp+0x16>
 8008de8:	4630      	mov	r0, r6
 8008dea:	f7ff ffbd 	bl	8008d68 <__sinit>
 8008dee:	3648      	adds	r6, #72	; 0x48
 8008df0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008df4:	3b01      	subs	r3, #1
 8008df6:	d503      	bpl.n	8008e00 <__sfp+0x28>
 8008df8:	6833      	ldr	r3, [r6, #0]
 8008dfa:	b30b      	cbz	r3, 8008e40 <__sfp+0x68>
 8008dfc:	6836      	ldr	r6, [r6, #0]
 8008dfe:	e7f7      	b.n	8008df0 <__sfp+0x18>
 8008e00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e04:	b9d5      	cbnz	r5, 8008e3c <__sfp+0x64>
 8008e06:	4b16      	ldr	r3, [pc, #88]	; (8008e60 <__sfp+0x88>)
 8008e08:	60e3      	str	r3, [r4, #12]
 8008e0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e0e:	6665      	str	r5, [r4, #100]	; 0x64
 8008e10:	f000 f847 	bl	8008ea2 <__retarget_lock_init_recursive>
 8008e14:	f7ff ff96 	bl	8008d44 <__sfp_lock_release>
 8008e18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e20:	6025      	str	r5, [r4, #0]
 8008e22:	61a5      	str	r5, [r4, #24]
 8008e24:	2208      	movs	r2, #8
 8008e26:	4629      	mov	r1, r5
 8008e28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e2c:	f7fe ffe2 	bl	8007df4 <memset>
 8008e30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e38:	4620      	mov	r0, r4
 8008e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e3c:	3468      	adds	r4, #104	; 0x68
 8008e3e:	e7d9      	b.n	8008df4 <__sfp+0x1c>
 8008e40:	2104      	movs	r1, #4
 8008e42:	4638      	mov	r0, r7
 8008e44:	f7ff ff62 	bl	8008d0c <__sfmoreglue>
 8008e48:	4604      	mov	r4, r0
 8008e4a:	6030      	str	r0, [r6, #0]
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	d1d5      	bne.n	8008dfc <__sfp+0x24>
 8008e50:	f7ff ff78 	bl	8008d44 <__sfp_lock_release>
 8008e54:	230c      	movs	r3, #12
 8008e56:	603b      	str	r3, [r7, #0]
 8008e58:	e7ee      	b.n	8008e38 <__sfp+0x60>
 8008e5a:	bf00      	nop
 8008e5c:	08009364 	.word	0x08009364
 8008e60:	ffff0001 	.word	0xffff0001

08008e64 <_fwalk_reent>:
 8008e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e68:	4606      	mov	r6, r0
 8008e6a:	4688      	mov	r8, r1
 8008e6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e70:	2700      	movs	r7, #0
 8008e72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e76:	f1b9 0901 	subs.w	r9, r9, #1
 8008e7a:	d505      	bpl.n	8008e88 <_fwalk_reent+0x24>
 8008e7c:	6824      	ldr	r4, [r4, #0]
 8008e7e:	2c00      	cmp	r4, #0
 8008e80:	d1f7      	bne.n	8008e72 <_fwalk_reent+0xe>
 8008e82:	4638      	mov	r0, r7
 8008e84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e88:	89ab      	ldrh	r3, [r5, #12]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d907      	bls.n	8008e9e <_fwalk_reent+0x3a>
 8008e8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e92:	3301      	adds	r3, #1
 8008e94:	d003      	beq.n	8008e9e <_fwalk_reent+0x3a>
 8008e96:	4629      	mov	r1, r5
 8008e98:	4630      	mov	r0, r6
 8008e9a:	47c0      	blx	r8
 8008e9c:	4307      	orrs	r7, r0
 8008e9e:	3568      	adds	r5, #104	; 0x68
 8008ea0:	e7e9      	b.n	8008e76 <_fwalk_reent+0x12>

08008ea2 <__retarget_lock_init_recursive>:
 8008ea2:	4770      	bx	lr

08008ea4 <__retarget_lock_acquire_recursive>:
 8008ea4:	4770      	bx	lr

08008ea6 <__retarget_lock_release_recursive>:
 8008ea6:	4770      	bx	lr

08008ea8 <__swhatbuf_r>:
 8008ea8:	b570      	push	{r4, r5, r6, lr}
 8008eaa:	460e      	mov	r6, r1
 8008eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eb0:	2900      	cmp	r1, #0
 8008eb2:	b096      	sub	sp, #88	; 0x58
 8008eb4:	4614      	mov	r4, r2
 8008eb6:	461d      	mov	r5, r3
 8008eb8:	da08      	bge.n	8008ecc <__swhatbuf_r+0x24>
 8008eba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	602a      	str	r2, [r5, #0]
 8008ec2:	061a      	lsls	r2, r3, #24
 8008ec4:	d410      	bmi.n	8008ee8 <__swhatbuf_r+0x40>
 8008ec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eca:	e00e      	b.n	8008eea <__swhatbuf_r+0x42>
 8008ecc:	466a      	mov	r2, sp
 8008ece:	f000 f93f 	bl	8009150 <_fstat_r>
 8008ed2:	2800      	cmp	r0, #0
 8008ed4:	dbf1      	blt.n	8008eba <__swhatbuf_r+0x12>
 8008ed6:	9a01      	ldr	r2, [sp, #4]
 8008ed8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008edc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ee0:	425a      	negs	r2, r3
 8008ee2:	415a      	adcs	r2, r3
 8008ee4:	602a      	str	r2, [r5, #0]
 8008ee6:	e7ee      	b.n	8008ec6 <__swhatbuf_r+0x1e>
 8008ee8:	2340      	movs	r3, #64	; 0x40
 8008eea:	2000      	movs	r0, #0
 8008eec:	6023      	str	r3, [r4, #0]
 8008eee:	b016      	add	sp, #88	; 0x58
 8008ef0:	bd70      	pop	{r4, r5, r6, pc}
	...

08008ef4 <__smakebuf_r>:
 8008ef4:	898b      	ldrh	r3, [r1, #12]
 8008ef6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ef8:	079d      	lsls	r5, r3, #30
 8008efa:	4606      	mov	r6, r0
 8008efc:	460c      	mov	r4, r1
 8008efe:	d507      	bpl.n	8008f10 <__smakebuf_r+0x1c>
 8008f00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f04:	6023      	str	r3, [r4, #0]
 8008f06:	6123      	str	r3, [r4, #16]
 8008f08:	2301      	movs	r3, #1
 8008f0a:	6163      	str	r3, [r4, #20]
 8008f0c:	b002      	add	sp, #8
 8008f0e:	bd70      	pop	{r4, r5, r6, pc}
 8008f10:	ab01      	add	r3, sp, #4
 8008f12:	466a      	mov	r2, sp
 8008f14:	f7ff ffc8 	bl	8008ea8 <__swhatbuf_r>
 8008f18:	9900      	ldr	r1, [sp, #0]
 8008f1a:	4605      	mov	r5, r0
 8008f1c:	4630      	mov	r0, r6
 8008f1e:	f7ff f873 	bl	8008008 <_malloc_r>
 8008f22:	b948      	cbnz	r0, 8008f38 <__smakebuf_r+0x44>
 8008f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f28:	059a      	lsls	r2, r3, #22
 8008f2a:	d4ef      	bmi.n	8008f0c <__smakebuf_r+0x18>
 8008f2c:	f023 0303 	bic.w	r3, r3, #3
 8008f30:	f043 0302 	orr.w	r3, r3, #2
 8008f34:	81a3      	strh	r3, [r4, #12]
 8008f36:	e7e3      	b.n	8008f00 <__smakebuf_r+0xc>
 8008f38:	4b0d      	ldr	r3, [pc, #52]	; (8008f70 <__smakebuf_r+0x7c>)
 8008f3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f3c:	89a3      	ldrh	r3, [r4, #12]
 8008f3e:	6020      	str	r0, [r4, #0]
 8008f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f44:	81a3      	strh	r3, [r4, #12]
 8008f46:	9b00      	ldr	r3, [sp, #0]
 8008f48:	6163      	str	r3, [r4, #20]
 8008f4a:	9b01      	ldr	r3, [sp, #4]
 8008f4c:	6120      	str	r0, [r4, #16]
 8008f4e:	b15b      	cbz	r3, 8008f68 <__smakebuf_r+0x74>
 8008f50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f54:	4630      	mov	r0, r6
 8008f56:	f000 f90d 	bl	8009174 <_isatty_r>
 8008f5a:	b128      	cbz	r0, 8008f68 <__smakebuf_r+0x74>
 8008f5c:	89a3      	ldrh	r3, [r4, #12]
 8008f5e:	f023 0303 	bic.w	r3, r3, #3
 8008f62:	f043 0301 	orr.w	r3, r3, #1
 8008f66:	81a3      	strh	r3, [r4, #12]
 8008f68:	89a0      	ldrh	r0, [r4, #12]
 8008f6a:	4305      	orrs	r5, r0
 8008f6c:	81a5      	strh	r5, [r4, #12]
 8008f6e:	e7cd      	b.n	8008f0c <__smakebuf_r+0x18>
 8008f70:	08008d01 	.word	0x08008d01

08008f74 <memmove>:
 8008f74:	4288      	cmp	r0, r1
 8008f76:	b510      	push	{r4, lr}
 8008f78:	eb01 0402 	add.w	r4, r1, r2
 8008f7c:	d902      	bls.n	8008f84 <memmove+0x10>
 8008f7e:	4284      	cmp	r4, r0
 8008f80:	4623      	mov	r3, r4
 8008f82:	d807      	bhi.n	8008f94 <memmove+0x20>
 8008f84:	1e43      	subs	r3, r0, #1
 8008f86:	42a1      	cmp	r1, r4
 8008f88:	d008      	beq.n	8008f9c <memmove+0x28>
 8008f8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f92:	e7f8      	b.n	8008f86 <memmove+0x12>
 8008f94:	4402      	add	r2, r0
 8008f96:	4601      	mov	r1, r0
 8008f98:	428a      	cmp	r2, r1
 8008f9a:	d100      	bne.n	8008f9e <memmove+0x2a>
 8008f9c:	bd10      	pop	{r4, pc}
 8008f9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fa6:	e7f7      	b.n	8008f98 <memmove+0x24>

08008fa8 <__malloc_lock>:
 8008fa8:	4801      	ldr	r0, [pc, #4]	; (8008fb0 <__malloc_lock+0x8>)
 8008faa:	f7ff bf7b 	b.w	8008ea4 <__retarget_lock_acquire_recursive>
 8008fae:	bf00      	nop
 8008fb0:	2000d55c 	.word	0x2000d55c

08008fb4 <__malloc_unlock>:
 8008fb4:	4801      	ldr	r0, [pc, #4]	; (8008fbc <__malloc_unlock+0x8>)
 8008fb6:	f7ff bf76 	b.w	8008ea6 <__retarget_lock_release_recursive>
 8008fba:	bf00      	nop
 8008fbc:	2000d55c 	.word	0x2000d55c

08008fc0 <_realloc_r>:
 8008fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc4:	4680      	mov	r8, r0
 8008fc6:	4614      	mov	r4, r2
 8008fc8:	460e      	mov	r6, r1
 8008fca:	b921      	cbnz	r1, 8008fd6 <_realloc_r+0x16>
 8008fcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	f7ff b819 	b.w	8008008 <_malloc_r>
 8008fd6:	b92a      	cbnz	r2, 8008fe4 <_realloc_r+0x24>
 8008fd8:	f7fe ffaa 	bl	8007f30 <_free_r>
 8008fdc:	4625      	mov	r5, r4
 8008fde:	4628      	mov	r0, r5
 8008fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fe4:	f000 f8e8 	bl	80091b8 <_malloc_usable_size_r>
 8008fe8:	4284      	cmp	r4, r0
 8008fea:	4607      	mov	r7, r0
 8008fec:	d802      	bhi.n	8008ff4 <_realloc_r+0x34>
 8008fee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ff2:	d812      	bhi.n	800901a <_realloc_r+0x5a>
 8008ff4:	4621      	mov	r1, r4
 8008ff6:	4640      	mov	r0, r8
 8008ff8:	f7ff f806 	bl	8008008 <_malloc_r>
 8008ffc:	4605      	mov	r5, r0
 8008ffe:	2800      	cmp	r0, #0
 8009000:	d0ed      	beq.n	8008fde <_realloc_r+0x1e>
 8009002:	42bc      	cmp	r4, r7
 8009004:	4622      	mov	r2, r4
 8009006:	4631      	mov	r1, r6
 8009008:	bf28      	it	cs
 800900a:	463a      	movcs	r2, r7
 800900c:	f7fe fee4 	bl	8007dd8 <memcpy>
 8009010:	4631      	mov	r1, r6
 8009012:	4640      	mov	r0, r8
 8009014:	f7fe ff8c 	bl	8007f30 <_free_r>
 8009018:	e7e1      	b.n	8008fde <_realloc_r+0x1e>
 800901a:	4635      	mov	r5, r6
 800901c:	e7df      	b.n	8008fde <_realloc_r+0x1e>

0800901e <_raise_r>:
 800901e:	291f      	cmp	r1, #31
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	4604      	mov	r4, r0
 8009024:	460d      	mov	r5, r1
 8009026:	d904      	bls.n	8009032 <_raise_r+0x14>
 8009028:	2316      	movs	r3, #22
 800902a:	6003      	str	r3, [r0, #0]
 800902c:	f04f 30ff 	mov.w	r0, #4294967295
 8009030:	bd38      	pop	{r3, r4, r5, pc}
 8009032:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009034:	b112      	cbz	r2, 800903c <_raise_r+0x1e>
 8009036:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800903a:	b94b      	cbnz	r3, 8009050 <_raise_r+0x32>
 800903c:	4620      	mov	r0, r4
 800903e:	f000 f831 	bl	80090a4 <_getpid_r>
 8009042:	462a      	mov	r2, r5
 8009044:	4601      	mov	r1, r0
 8009046:	4620      	mov	r0, r4
 8009048:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800904c:	f000 b818 	b.w	8009080 <_kill_r>
 8009050:	2b01      	cmp	r3, #1
 8009052:	d00a      	beq.n	800906a <_raise_r+0x4c>
 8009054:	1c59      	adds	r1, r3, #1
 8009056:	d103      	bne.n	8009060 <_raise_r+0x42>
 8009058:	2316      	movs	r3, #22
 800905a:	6003      	str	r3, [r0, #0]
 800905c:	2001      	movs	r0, #1
 800905e:	e7e7      	b.n	8009030 <_raise_r+0x12>
 8009060:	2400      	movs	r4, #0
 8009062:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009066:	4628      	mov	r0, r5
 8009068:	4798      	blx	r3
 800906a:	2000      	movs	r0, #0
 800906c:	e7e0      	b.n	8009030 <_raise_r+0x12>
	...

08009070 <raise>:
 8009070:	4b02      	ldr	r3, [pc, #8]	; (800907c <raise+0xc>)
 8009072:	4601      	mov	r1, r0
 8009074:	6818      	ldr	r0, [r3, #0]
 8009076:	f7ff bfd2 	b.w	800901e <_raise_r>
 800907a:	bf00      	nop
 800907c:	20000014 	.word	0x20000014

08009080 <_kill_r>:
 8009080:	b538      	push	{r3, r4, r5, lr}
 8009082:	4d07      	ldr	r5, [pc, #28]	; (80090a0 <_kill_r+0x20>)
 8009084:	2300      	movs	r3, #0
 8009086:	4604      	mov	r4, r0
 8009088:	4608      	mov	r0, r1
 800908a:	4611      	mov	r1, r2
 800908c:	602b      	str	r3, [r5, #0]
 800908e:	f7f7 fdcd 	bl	8000c2c <_kill>
 8009092:	1c43      	adds	r3, r0, #1
 8009094:	d102      	bne.n	800909c <_kill_r+0x1c>
 8009096:	682b      	ldr	r3, [r5, #0]
 8009098:	b103      	cbz	r3, 800909c <_kill_r+0x1c>
 800909a:	6023      	str	r3, [r4, #0]
 800909c:	bd38      	pop	{r3, r4, r5, pc}
 800909e:	bf00      	nop
 80090a0:	2000d560 	.word	0x2000d560

080090a4 <_getpid_r>:
 80090a4:	f7f7 bdba 	b.w	8000c1c <_getpid>

080090a8 <__sread>:
 80090a8:	b510      	push	{r4, lr}
 80090aa:	460c      	mov	r4, r1
 80090ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090b0:	f000 f88a 	bl	80091c8 <_read_r>
 80090b4:	2800      	cmp	r0, #0
 80090b6:	bfab      	itete	ge
 80090b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80090ba:	89a3      	ldrhlt	r3, [r4, #12]
 80090bc:	181b      	addge	r3, r3, r0
 80090be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80090c2:	bfac      	ite	ge
 80090c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80090c6:	81a3      	strhlt	r3, [r4, #12]
 80090c8:	bd10      	pop	{r4, pc}

080090ca <__swrite>:
 80090ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090ce:	461f      	mov	r7, r3
 80090d0:	898b      	ldrh	r3, [r1, #12]
 80090d2:	05db      	lsls	r3, r3, #23
 80090d4:	4605      	mov	r5, r0
 80090d6:	460c      	mov	r4, r1
 80090d8:	4616      	mov	r6, r2
 80090da:	d505      	bpl.n	80090e8 <__swrite+0x1e>
 80090dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090e0:	2302      	movs	r3, #2
 80090e2:	2200      	movs	r2, #0
 80090e4:	f000 f856 	bl	8009194 <_lseek_r>
 80090e8:	89a3      	ldrh	r3, [r4, #12]
 80090ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090f2:	81a3      	strh	r3, [r4, #12]
 80090f4:	4632      	mov	r2, r6
 80090f6:	463b      	mov	r3, r7
 80090f8:	4628      	mov	r0, r5
 80090fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090fe:	f7fe be1f 	b.w	8007d40 <_write_r>

08009102 <__sseek>:
 8009102:	b510      	push	{r4, lr}
 8009104:	460c      	mov	r4, r1
 8009106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800910a:	f000 f843 	bl	8009194 <_lseek_r>
 800910e:	1c43      	adds	r3, r0, #1
 8009110:	89a3      	ldrh	r3, [r4, #12]
 8009112:	bf15      	itete	ne
 8009114:	6560      	strne	r0, [r4, #84]	; 0x54
 8009116:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800911a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800911e:	81a3      	strheq	r3, [r4, #12]
 8009120:	bf18      	it	ne
 8009122:	81a3      	strhne	r3, [r4, #12]
 8009124:	bd10      	pop	{r4, pc}

08009126 <__sclose>:
 8009126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800912a:	f000 b801 	b.w	8009130 <_close_r>
	...

08009130 <_close_r>:
 8009130:	b538      	push	{r3, r4, r5, lr}
 8009132:	4d06      	ldr	r5, [pc, #24]	; (800914c <_close_r+0x1c>)
 8009134:	2300      	movs	r3, #0
 8009136:	4604      	mov	r4, r0
 8009138:	4608      	mov	r0, r1
 800913a:	602b      	str	r3, [r5, #0]
 800913c:	f7f7 fdad 	bl	8000c9a <_close>
 8009140:	1c43      	adds	r3, r0, #1
 8009142:	d102      	bne.n	800914a <_close_r+0x1a>
 8009144:	682b      	ldr	r3, [r5, #0]
 8009146:	b103      	cbz	r3, 800914a <_close_r+0x1a>
 8009148:	6023      	str	r3, [r4, #0]
 800914a:	bd38      	pop	{r3, r4, r5, pc}
 800914c:	2000d560 	.word	0x2000d560

08009150 <_fstat_r>:
 8009150:	b538      	push	{r3, r4, r5, lr}
 8009152:	4d07      	ldr	r5, [pc, #28]	; (8009170 <_fstat_r+0x20>)
 8009154:	2300      	movs	r3, #0
 8009156:	4604      	mov	r4, r0
 8009158:	4608      	mov	r0, r1
 800915a:	4611      	mov	r1, r2
 800915c:	602b      	str	r3, [r5, #0]
 800915e:	f7f7 fda8 	bl	8000cb2 <_fstat>
 8009162:	1c43      	adds	r3, r0, #1
 8009164:	d102      	bne.n	800916c <_fstat_r+0x1c>
 8009166:	682b      	ldr	r3, [r5, #0]
 8009168:	b103      	cbz	r3, 800916c <_fstat_r+0x1c>
 800916a:	6023      	str	r3, [r4, #0]
 800916c:	bd38      	pop	{r3, r4, r5, pc}
 800916e:	bf00      	nop
 8009170:	2000d560 	.word	0x2000d560

08009174 <_isatty_r>:
 8009174:	b538      	push	{r3, r4, r5, lr}
 8009176:	4d06      	ldr	r5, [pc, #24]	; (8009190 <_isatty_r+0x1c>)
 8009178:	2300      	movs	r3, #0
 800917a:	4604      	mov	r4, r0
 800917c:	4608      	mov	r0, r1
 800917e:	602b      	str	r3, [r5, #0]
 8009180:	f7f7 fda7 	bl	8000cd2 <_isatty>
 8009184:	1c43      	adds	r3, r0, #1
 8009186:	d102      	bne.n	800918e <_isatty_r+0x1a>
 8009188:	682b      	ldr	r3, [r5, #0]
 800918a:	b103      	cbz	r3, 800918e <_isatty_r+0x1a>
 800918c:	6023      	str	r3, [r4, #0]
 800918e:	bd38      	pop	{r3, r4, r5, pc}
 8009190:	2000d560 	.word	0x2000d560

08009194 <_lseek_r>:
 8009194:	b538      	push	{r3, r4, r5, lr}
 8009196:	4d07      	ldr	r5, [pc, #28]	; (80091b4 <_lseek_r+0x20>)
 8009198:	4604      	mov	r4, r0
 800919a:	4608      	mov	r0, r1
 800919c:	4611      	mov	r1, r2
 800919e:	2200      	movs	r2, #0
 80091a0:	602a      	str	r2, [r5, #0]
 80091a2:	461a      	mov	r2, r3
 80091a4:	f7f7 fda0 	bl	8000ce8 <_lseek>
 80091a8:	1c43      	adds	r3, r0, #1
 80091aa:	d102      	bne.n	80091b2 <_lseek_r+0x1e>
 80091ac:	682b      	ldr	r3, [r5, #0]
 80091ae:	b103      	cbz	r3, 80091b2 <_lseek_r+0x1e>
 80091b0:	6023      	str	r3, [r4, #0]
 80091b2:	bd38      	pop	{r3, r4, r5, pc}
 80091b4:	2000d560 	.word	0x2000d560

080091b8 <_malloc_usable_size_r>:
 80091b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091bc:	1f18      	subs	r0, r3, #4
 80091be:	2b00      	cmp	r3, #0
 80091c0:	bfbc      	itt	lt
 80091c2:	580b      	ldrlt	r3, [r1, r0]
 80091c4:	18c0      	addlt	r0, r0, r3
 80091c6:	4770      	bx	lr

080091c8 <_read_r>:
 80091c8:	b538      	push	{r3, r4, r5, lr}
 80091ca:	4d07      	ldr	r5, [pc, #28]	; (80091e8 <_read_r+0x20>)
 80091cc:	4604      	mov	r4, r0
 80091ce:	4608      	mov	r0, r1
 80091d0:	4611      	mov	r1, r2
 80091d2:	2200      	movs	r2, #0
 80091d4:	602a      	str	r2, [r5, #0]
 80091d6:	461a      	mov	r2, r3
 80091d8:	f7f7 fd42 	bl	8000c60 <_read>
 80091dc:	1c43      	adds	r3, r0, #1
 80091de:	d102      	bne.n	80091e6 <_read_r+0x1e>
 80091e0:	682b      	ldr	r3, [r5, #0]
 80091e2:	b103      	cbz	r3, 80091e6 <_read_r+0x1e>
 80091e4:	6023      	str	r3, [r4, #0]
 80091e6:	bd38      	pop	{r3, r4, r5, pc}
 80091e8:	2000d560 	.word	0x2000d560

080091ec <_sbrk>:
 80091ec:	4a04      	ldr	r2, [pc, #16]	; (8009200 <_sbrk+0x14>)
 80091ee:	6811      	ldr	r1, [r2, #0]
 80091f0:	4603      	mov	r3, r0
 80091f2:	b909      	cbnz	r1, 80091f8 <_sbrk+0xc>
 80091f4:	4903      	ldr	r1, [pc, #12]	; (8009204 <_sbrk+0x18>)
 80091f6:	6011      	str	r1, [r2, #0]
 80091f8:	6810      	ldr	r0, [r2, #0]
 80091fa:	4403      	add	r3, r0
 80091fc:	6013      	str	r3, [r2, #0]
 80091fe:	4770      	bx	lr
 8009200:	2000d564 	.word	0x2000d564
 8009204:	2000d568 	.word	0x2000d568

08009208 <_init>:
 8009208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920a:	bf00      	nop
 800920c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800920e:	bc08      	pop	{r3}
 8009210:	469e      	mov	lr, r3
 8009212:	4770      	bx	lr

08009214 <_fini>:
 8009214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009216:	bf00      	nop
 8009218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800921a:	bc08      	pop	{r3}
 800921c:	469e      	mov	lr, r3
 800921e:	4770      	bx	lr
