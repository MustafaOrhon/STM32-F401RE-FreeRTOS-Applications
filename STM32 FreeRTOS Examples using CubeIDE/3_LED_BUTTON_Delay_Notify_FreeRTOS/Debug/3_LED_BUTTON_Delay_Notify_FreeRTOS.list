
3_LED_BUTTON_Delay_Notify_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007654  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  080077f4  080077f4  000177f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079c4  080079c4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080079c4  080079c4  000179c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079cc  080079cc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079cc  080079cc  000179cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079d0  080079d0  000179d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080079d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d528  20000078  08007a4c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d5a0  08007a4c  0002d5a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019072  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033c1  00000000  00000000  0003911a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  0003c4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b0  00000000  00000000  0003daf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019358  00000000  00000000  0003efa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018336  00000000  00000000  00058300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cb4d  00000000  00000000  00070636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010d183  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006104  00000000  00000000  0010d1d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080077dc 	.word	0x080077dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080077dc 	.word	0x080077dc

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	2000cbb8 	.word	0x2000cbb8
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f000 fbdd 	bl	8000de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f8a5 	bl	800077c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 f937 	bl	80008a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000636:	f000 f90b 	bl	8000850 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1<<0);
 800063a:	4b41      	ldr	r3, [pc, #260]	; (8000740 <main+0x11c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a40      	ldr	r2, [pc, #256]	; (8000740 <main+0x11c>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6013      	str	r3, [r2, #0]


  SEGGER_SYSVIEW_Conf();
 8000646:	f004 fee1 	bl	800540c <SEGGER_SYSVIEW_Conf>
  vSetVarulMaxPRIGROUPValue();
 800064a:	f004 fc7f 	bl	8004f4c <vSetVarulMaxPRIGROUPValue>
  SEGGER_SYSVIEW_Start();
 800064e:	f005 ff11 	bl	8006474 <SEGGER_SYSVIEW_Start>


/**********************************PREEMPTIVE IS DISABLED SO CO-OPERATIVE SCHEDULING IS WORKING********************/
status = xTaskCreate(Task1_Handler,"Red Led Task",configMINIMAL_STACK_SIZE,NULL,3,&Task1_Handle);
 8000652:	4b3c      	ldr	r3, [pc, #240]	; (8000744 <main+0x120>)
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	2303      	movs	r3, #3
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	2300      	movs	r3, #0
 800065c:	2282      	movs	r2, #130	; 0x82
 800065e:	493a      	ldr	r1, [pc, #232]	; (8000748 <main+0x124>)
 8000660:	483a      	ldr	r0, [pc, #232]	; (800074c <main+0x128>)
 8000662:	f002 fd81 	bl	8003168 <xTaskCreate>
 8000666:	4603      	mov	r3, r0
 8000668:	4a39      	ldr	r2, [pc, #228]	; (8000750 <main+0x12c>)
 800066a:	6013      	str	r3, [r2, #0]

configASSERT(status == pdPASS); // Check if it is succesfully created
 800066c:	4b38      	ldr	r3, [pc, #224]	; (8000750 <main+0x12c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d00a      	beq.n	800068a <main+0x66>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000678:	f383 8811 	msr	BASEPRI, r3
 800067c:	f3bf 8f6f 	isb	sy
 8000680:	f3bf 8f4f 	dsb	sy
 8000684:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000686:	bf00      	nop
 8000688:	e7fe      	b.n	8000688 <main+0x64>
next_task_handle = Task1_Handle;
 800068a:	4b2e      	ldr	r3, [pc, #184]	; (8000744 <main+0x120>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a31      	ldr	r2, [pc, #196]	; (8000754 <main+0x130>)
 8000690:	6013      	str	r3, [r2, #0]

status = xTaskCreate(Task2_Handler,"Green Led Task",configMINIMAL_STACK_SIZE,NULL,2,&Task2_Handle);
 8000692:	4b31      	ldr	r3, [pc, #196]	; (8000758 <main+0x134>)
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2302      	movs	r3, #2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2300      	movs	r3, #0
 800069c:	2282      	movs	r2, #130	; 0x82
 800069e:	492f      	ldr	r1, [pc, #188]	; (800075c <main+0x138>)
 80006a0:	482f      	ldr	r0, [pc, #188]	; (8000760 <main+0x13c>)
 80006a2:	f002 fd61 	bl	8003168 <xTaskCreate>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a29      	ldr	r2, [pc, #164]	; (8000750 <main+0x12c>)
 80006aa:	6013      	str	r3, [r2, #0]

configASSERT(status == pdPASS);  // Check if it is succesfully created
 80006ac:	4b28      	ldr	r3, [pc, #160]	; (8000750 <main+0x12c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d00a      	beq.n	80006ca <main+0xa6>
        __asm volatile
 80006b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006b8:	f383 8811 	msr	BASEPRI, r3
 80006bc:	f3bf 8f6f 	isb	sy
 80006c0:	f3bf 8f4f 	dsb	sy
 80006c4:	60bb      	str	r3, [r7, #8]
    }
 80006c6:	bf00      	nop
 80006c8:	e7fe      	b.n	80006c8 <main+0xa4>

status = xTaskCreate(Task3_Handler,"Blue Leds Task",configMINIMAL_STACK_SIZE,NULL,1,&Task3_Handle);
 80006ca:	4b26      	ldr	r3, [pc, #152]	; (8000764 <main+0x140>)
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	2301      	movs	r3, #1
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2300      	movs	r3, #0
 80006d4:	2282      	movs	r2, #130	; 0x82
 80006d6:	4924      	ldr	r1, [pc, #144]	; (8000768 <main+0x144>)
 80006d8:	4824      	ldr	r0, [pc, #144]	; (800076c <main+0x148>)
 80006da:	f002 fd45 	bl	8003168 <xTaskCreate>
 80006de:	4603      	mov	r3, r0
 80006e0:	4a1b      	ldr	r2, [pc, #108]	; (8000750 <main+0x12c>)
 80006e2:	6013      	str	r3, [r2, #0]

configASSERT(status == pdPASS); // Check if it is succesfully created
 80006e4:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <main+0x12c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d00a      	beq.n	8000702 <main+0xde>
        __asm volatile
 80006ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006f0:	f383 8811 	msr	BASEPRI, r3
 80006f4:	f3bf 8f6f 	isb	sy
 80006f8:	f3bf 8f4f 	dsb	sy
 80006fc:	607b      	str	r3, [r7, #4]
    }
 80006fe:	bf00      	nop
 8000700:	e7fe      	b.n	8000700 <main+0xdc>

status = xTaskCreate(Button_Handler,"Button Control Task",configMINIMAL_STACK_SIZE,NULL,4,&Button_Control_Handle);
 8000702:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <main+0x14c>)
 8000704:	9301      	str	r3, [sp, #4]
 8000706:	2304      	movs	r3, #4
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	2300      	movs	r3, #0
 800070c:	2282      	movs	r2, #130	; 0x82
 800070e:	4919      	ldr	r1, [pc, #100]	; (8000774 <main+0x150>)
 8000710:	4819      	ldr	r0, [pc, #100]	; (8000778 <main+0x154>)
 8000712:	f002 fd29 	bl	8003168 <xTaskCreate>
 8000716:	4603      	mov	r3, r0
 8000718:	4a0d      	ldr	r2, [pc, #52]	; (8000750 <main+0x12c>)
 800071a:	6013      	str	r3, [r2, #0]

configASSERT(status == pdPASS); // Check if it is succesfully created
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <main+0x12c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d00a      	beq.n	800073a <main+0x116>
        __asm volatile
 8000724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000728:	f383 8811 	msr	BASEPRI, r3
 800072c:	f3bf 8f6f 	isb	sy
 8000730:	f3bf 8f4f 	dsb	sy
 8000734:	603b      	str	r3, [r7, #0]
    }
 8000736:	bf00      	nop
 8000738:	e7fe      	b.n	8000738 <main+0x114>

vTaskStartScheduler();
 800073a:	f002 ff83 	bl	8003644 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800073e:	e7fe      	b.n	800073e <main+0x11a>
 8000740:	e0001000 	.word	0xe0001000
 8000744:	200000d8 	.word	0x200000d8
 8000748:	080077f4 	.word	0x080077f4
 800074c:	08000945 	.word	0x08000945
 8000750:	200000ec 	.word	0x200000ec
 8000754:	200000e8 	.word	0x200000e8
 8000758:	200000dc 	.word	0x200000dc
 800075c:	08007804 	.word	0x08007804
 8000760:	080009c1 	.word	0x080009c1
 8000764:	200000e0 	.word	0x200000e0
 8000768:	08007814 	.word	0x08007814
 800076c:	08000a3d 	.word	0x08000a3d
 8000770:	200000e4 	.word	0x200000e4
 8000774:	08007824 	.word	0x08007824
 8000778:	08000ac1 	.word	0x08000ac1

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	; 0x50
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	2230      	movs	r2, #48	; 0x30
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f006 fbb0 	bl	8006ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	4b28      	ldr	r3, [pc, #160]	; (8000848 <SystemClock_Config+0xcc>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	4a27      	ldr	r2, [pc, #156]	; (8000848 <SystemClock_Config+0xcc>)
 80007aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ae:	6413      	str	r3, [r2, #64]	; 0x40
 80007b0:	4b25      	ldr	r3, [pc, #148]	; (8000848 <SystemClock_Config+0xcc>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	4b22      	ldr	r3, [pc, #136]	; (800084c <SystemClock_Config+0xd0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007c8:	4a20      	ldr	r2, [pc, #128]	; (800084c <SystemClock_Config+0xd0>)
 80007ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	4b1e      	ldr	r3, [pc, #120]	; (800084c <SystemClock_Config+0xd0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007dc:	2302      	movs	r3, #2
 80007de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e0:	2301      	movs	r3, #1
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e4:	2310      	movs	r3, #16
 80007e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e8:	2302      	movs	r3, #2
 80007ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ec:	2300      	movs	r3, #0
 80007ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007f0:	2308      	movs	r3, #8
 80007f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80007f4:	2354      	movs	r3, #84	; 0x54
 80007f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007fc:	2304      	movs	r3, #4
 80007fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000800:	f107 0320 	add.w	r3, r7, #32
 8000804:	4618      	mov	r0, r3
 8000806:	f000 fdff 	bl	8001408 <HAL_RCC_OscConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000810:	f000 f99d 	bl	8000b4e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000814:	230f      	movs	r3, #15
 8000816:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000818:	2302      	movs	r3, #2
 800081a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000824:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	2102      	movs	r1, #2
 8000830:	4618      	mov	r0, r3
 8000832:	f001 f861 	bl	80018f8 <HAL_RCC_ClockConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800083c:	f000 f987 	bl	8000b4e <Error_Handler>
  }
}
 8000840:	bf00      	nop
 8000842:	3750      	adds	r7, #80	; 0x50
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40023800 	.word	0x40023800
 800084c:	40007000 	.word	0x40007000

08000850 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <MX_USART2_UART_Init+0x50>)
 8000858:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <MX_USART2_UART_Init+0x4c>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_USART2_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000888:	f001 fcc8 	bl	800221c <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000892:	f000 f95c 	bl	8000b4e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000094 	.word	0x20000094
 80008a0:	40004400 	.word	0x40004400

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	4b1f      	ldr	r3, [pc, #124]	; (800093c <MX_GPIO_Init+0x98>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a1e      	ldr	r2, [pc, #120]	; (800093c <MX_GPIO_Init+0x98>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b1c      	ldr	r3, [pc, #112]	; (800093c <MX_GPIO_Init+0x98>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_GPIO_Init+0x98>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a17      	ldr	r2, [pc, #92]	; (800093c <MX_GPIO_Init+0x98>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_GPIO_Init+0x98>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	210f      	movs	r1, #15
 80008f6:	4812      	ldr	r0, [pc, #72]	; (8000940 <MX_GPIO_Init+0x9c>)
 80008f8:	f000 fd36 	bl	8001368 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80008fc:	230f      	movs	r3, #15
 80008fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	4619      	mov	r1, r3
 8000912:	480b      	ldr	r0, [pc, #44]	; (8000940 <MX_GPIO_Init+0x9c>)
 8000914:	f000 fb8c 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800091c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000922:	2302      	movs	r3, #2
 8000924:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	4619      	mov	r1, r3
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_GPIO_Init+0x9c>)
 800092e:	f000 fb7f 	bl	8001030 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000932:	bf00      	nop
 8000934:	3720      	adds	r7, #32
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40020800 	.word	0x40020800

08000944 <Task1_Handler>:

/* USER CODE BEGIN 4 */
static void Task1_Handler(void *params)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af02      	add	r7, sp, #8
 800094a:	6078      	str	r0, [r7, #4]
    BaseType_t status;

	while(1)
	{
        HAL_UART_Transmit(&huart2,(uint8_t*)tx_buffer,sprintf(tx_buffer,"Toggling Red Button\r\n"),HAL_MAX_DELAY);
 800094c:	4916      	ldr	r1, [pc, #88]	; (80009a8 <Task1_Handler+0x64>)
 800094e:	4817      	ldr	r0, [pc, #92]	; (80009ac <Task1_Handler+0x68>)
 8000950:	f006 fad6 	bl	8006f00 <siprintf>
 8000954:	4603      	mov	r3, r0
 8000956:	b29a      	uxth	r2, r3
 8000958:	f04f 33ff 	mov.w	r3, #4294967295
 800095c:	4913      	ldr	r1, [pc, #76]	; (80009ac <Task1_Handler+0x68>)
 800095e:	4814      	ldr	r0, [pc, #80]	; (80009b0 <Task1_Handler+0x6c>)
 8000960:	f001 fca9 	bl	80022b6 <HAL_UART_Transmit>
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8000964:	2102      	movs	r1, #2
 8000966:	4813      	ldr	r0, [pc, #76]	; (80009b4 <Task1_Handler+0x70>)
 8000968:	f000 fd17 	bl	800139a <HAL_GPIO_TogglePin>
        status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 800096c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2300      	movs	r3, #0
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	2000      	movs	r0, #0
 800097a:	f003 fc17 	bl	80041ac <xTaskGenericNotifyWait>
 800097e:	60f8      	str	r0, [r7, #12]
        if(status == pdTRUE)
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d1e2      	bne.n	800094c <Task1_Handler+0x8>
        {
           vTaskSuspendAll();
 8000986:	f002 febf 	bl	8003708 <vTaskSuspendAll>
           next_task_handle = Task2_Handle;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <Task1_Handler+0x74>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a0b      	ldr	r2, [pc, #44]	; (80009bc <Task1_Handler+0x78>)
 8000990:	6013      	str	r3, [r2, #0]
           xTaskResumeAll();
 8000992:	f002 fec7 	bl	8003724 <xTaskResumeAll>
           HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000996:	2201      	movs	r2, #1
 8000998:	2102      	movs	r1, #2
 800099a:	4806      	ldr	r0, [pc, #24]	; (80009b4 <Task1_Handler+0x70>)
 800099c:	f000 fce4 	bl	8001368 <HAL_GPIO_WritePin>
           vTaskDelete(NULL); // Delete itself
 80009a0:	2000      	movs	r0, #0
 80009a2:	f002 fd69 	bl	8003478 <vTaskDelete>
        HAL_UART_Transmit(&huart2,(uint8_t*)tx_buffer,sprintf(tx_buffer,"Toggling Red Button\r\n"),HAL_MAX_DELAY);
 80009a6:	e7d1      	b.n	800094c <Task1_Handler+0x8>
 80009a8:	08007838 	.word	0x08007838
 80009ac:	200000f0 	.word	0x200000f0
 80009b0:	20000094 	.word	0x20000094
 80009b4:	40020800 	.word	0x40020800
 80009b8:	200000dc 	.word	0x200000dc
 80009bc:	200000e8 	.word	0x200000e8

080009c0 <Task2_Handler>:

	}

}
static void Task2_Handler(void *params)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af02      	add	r7, sp, #8
 80009c6:	6078      	str	r0, [r7, #4]
    BaseType_t status;

	while(1)
	{
        HAL_UART_Transmit(&huart2,(uint8_t*)tx_buffer,sprintf(tx_buffer,"Toggling Green Button\r\n"),HAL_MAX_DELAY);
 80009c8:	4916      	ldr	r1, [pc, #88]	; (8000a24 <Task2_Handler+0x64>)
 80009ca:	4817      	ldr	r0, [pc, #92]	; (8000a28 <Task2_Handler+0x68>)
 80009cc:	f006 fa98 	bl	8006f00 <siprintf>
 80009d0:	4603      	mov	r3, r0
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	f04f 33ff 	mov.w	r3, #4294967295
 80009d8:	4913      	ldr	r1, [pc, #76]	; (8000a28 <Task2_Handler+0x68>)
 80009da:	4814      	ldr	r0, [pc, #80]	; (8000a2c <Task2_Handler+0x6c>)
 80009dc:	f001 fc6b 	bl	80022b6 <HAL_UART_Transmit>
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 80009e0:	2101      	movs	r1, #1
 80009e2:	4813      	ldr	r0, [pc, #76]	; (8000a30 <Task2_Handler+0x70>)
 80009e4:	f000 fcd9 	bl	800139a <HAL_GPIO_TogglePin>
        status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 80009e8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	2300      	movs	r3, #0
 80009f0:	2200      	movs	r2, #0
 80009f2:	2100      	movs	r1, #0
 80009f4:	2000      	movs	r0, #0
 80009f6:	f003 fbd9 	bl	80041ac <xTaskGenericNotifyWait>
 80009fa:	60f8      	str	r0, [r7, #12]
        if(status == pdTRUE)
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d1e2      	bne.n	80009c8 <Task2_Handler+0x8>
        {
           vTaskSuspendAll();
 8000a02:	f002 fe81 	bl	8003708 <vTaskSuspendAll>
           next_task_handle = Task3_Handle;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <Task2_Handler+0x74>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <Task2_Handler+0x78>)
 8000a0c:	6013      	str	r3, [r2, #0]
           xTaskResumeAll();
 8000a0e:	f002 fe89 	bl	8003724 <xTaskResumeAll>
           HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 8000a12:	2201      	movs	r2, #1
 8000a14:	2101      	movs	r1, #1
 8000a16:	4806      	ldr	r0, [pc, #24]	; (8000a30 <Task2_Handler+0x70>)
 8000a18:	f000 fca6 	bl	8001368 <HAL_GPIO_WritePin>
           vTaskDelete(NULL); // Delete itself
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f002 fd2b 	bl	8003478 <vTaskDelete>
        HAL_UART_Transmit(&huart2,(uint8_t*)tx_buffer,sprintf(tx_buffer,"Toggling Green Button\r\n"),HAL_MAX_DELAY);
 8000a22:	e7d1      	b.n	80009c8 <Task2_Handler+0x8>
 8000a24:	08007850 	.word	0x08007850
 8000a28:	200000f0 	.word	0x200000f0
 8000a2c:	20000094 	.word	0x20000094
 8000a30:	40020800 	.word	0x40020800
 8000a34:	200000e0 	.word	0x200000e0
 8000a38:	200000e8 	.word	0x200000e8

08000a3c <Task3_Handler>:
        }

	}
}
static void Task3_Handler(void *params)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af02      	add	r7, sp, #8
 8000a42:	6078      	str	r0, [r7, #4]
    BaseType_t status;

	while(1)
	{
        HAL_UART_Transmit(&huart2,(uint8_t*)tx_buffer,sprintf(tx_buffer,"Toggling Blue Buttons\r\n"),HAL_MAX_DELAY);
 8000a44:	4918      	ldr	r1, [pc, #96]	; (8000aa8 <Task3_Handler+0x6c>)
 8000a46:	4819      	ldr	r0, [pc, #100]	; (8000aac <Task3_Handler+0x70>)
 8000a48:	f006 fa5a 	bl	8006f00 <siprintf>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	f04f 33ff 	mov.w	r3, #4294967295
 8000a54:	4915      	ldr	r1, [pc, #84]	; (8000aac <Task3_Handler+0x70>)
 8000a56:	4816      	ldr	r0, [pc, #88]	; (8000ab0 <Task3_Handler+0x74>)
 8000a58:	f001 fc2d 	bl	80022b6 <HAL_UART_Transmit>
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3);
 8000a5c:	210c      	movs	r1, #12
 8000a5e:	4815      	ldr	r0, [pc, #84]	; (8000ab4 <Task3_Handler+0x78>)
 8000a60:	f000 fc9b 	bl	800139a <HAL_GPIO_TogglePin>
        status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 8000a64:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2000      	movs	r0, #0
 8000a72:	f003 fb9b 	bl	80041ac <xTaskGenericNotifyWait>
 8000a76:	60f8      	str	r0, [r7, #12]
        if(status == pdTRUE)
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d1e2      	bne.n	8000a44 <Task3_Handler+0x8>
        {
           vTaskSuspendAll();
 8000a7e:	f002 fe43 	bl	8003708 <vTaskSuspendAll>
           next_task_handle = NULL;
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <Task3_Handler+0x7c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
           xTaskResumeAll();
 8000a88:	f002 fe4c 	bl	8003724 <xTaskResumeAll>
           HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2|GPIO_PIN_3,GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	210c      	movs	r1, #12
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <Task3_Handler+0x78>)
 8000a92:	f000 fc69 	bl	8001368 <HAL_GPIO_WritePin>
           vTaskDelete(Button_Control_Handle); // Delete Button Task
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <Task3_Handler+0x80>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f002 fcec 	bl	8003478 <vTaskDelete>
           vTaskDelete(NULL); // Delete itself
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f002 fce9 	bl	8003478 <vTaskDelete>
        HAL_UART_Transmit(&huart2,(uint8_t*)tx_buffer,sprintf(tx_buffer,"Toggling Blue Buttons\r\n"),HAL_MAX_DELAY);
 8000aa6:	e7cd      	b.n	8000a44 <Task3_Handler+0x8>
 8000aa8:	08007868 	.word	0x08007868
 8000aac:	200000f0 	.word	0x200000f0
 8000ab0:	20000094 	.word	0x20000094
 8000ab4:	40020800 	.word	0x40020800
 8000ab8:	200000e8 	.word	0x200000e8
 8000abc:	200000e4 	.word	0x200000e4

08000ac0 <Button_Handler>:
        }

	}
}
static void Button_Handler(void *params)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af02      	add	r7, sp, #8
 8000ac6:	6078      	str	r0, [r7, #4]
	bool btn_read = false;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	73bb      	strb	r3, [r7, #14]
	bool prvs_read = false;
 8000acc:	2300      	movs	r3, #0
 8000ace:	73fb      	strb	r3, [r7, #15]

	 while(1)
	 {
         btn_read = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10);
 8000ad0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad4:	4810      	ldr	r0, [pc, #64]	; (8000b18 <Button_Handler+0x58>)
 8000ad6:	f000 fc2f 	bl	8001338 <HAL_GPIO_ReadPin>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	bf14      	ite	ne
 8000ae0:	2301      	movne	r3, #1
 8000ae2:	2300      	moveq	r3, #0
 8000ae4:	73bb      	strb	r3, [r7, #14]
         if(btn_read)
 8000ae6:	7bbb      	ldrb	r3, [r7, #14]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d00e      	beq.n	8000b0a <Button_Handler+0x4a>
         {
        	  if(!prvs_read)
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
 8000aee:	f083 0301 	eor.w	r3, r3, #1
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d008      	beq.n	8000b0a <Button_Handler+0x4a>
        	  {
        		xTaskNotify(next_task_handle,0,eNoAction);
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <Button_Handler+0x5c>)
 8000afa:	6818      	ldr	r0, [r3, #0]
 8000afc:	2300      	movs	r3, #0
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	2300      	movs	r3, #0
 8000b02:	2200      	movs	r2, #0
 8000b04:	2100      	movs	r1, #0
 8000b06:	f003 fbd9 	bl	80042bc <xTaskGenericNotify>
        	  }
         }
         prvs_read = btn_read;
 8000b0a:	7bbb      	ldrb	r3, [r7, #14]
 8000b0c:	73fb      	strb	r3, [r7, #15]
         vTaskDelay(pdMS_TO_TICKS(10));
 8000b0e:	200a      	movs	r0, #10
 8000b10:	f002 fd60 	bl	80035d4 <vTaskDelay>
         btn_read = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10);
 8000b14:	e7dc      	b.n	8000ad0 <Button_Handler+0x10>
 8000b16:	bf00      	nop
 8000b18:	40020800 	.word	0x40020800
 8000b1c:	200000e8 	.word	0x200000e8

08000b20 <vApplicationIdleHook>:

	 }

}
void vApplicationIdleHook(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
 8000b24:	2101      	movs	r1, #1
 8000b26:	2000      	movs	r0, #0
 8000b28:	f000 fc52 	bl	80013d0 <HAL_PWR_EnterSLEEPMode>
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b40:	d101      	bne.n	8000b46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b42:	f000 f973 	bl	8000e2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b52:	b672      	cpsid	i
}
 8000b54:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <Error_Handler+0x8>

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	4a08      	ldr	r2, [pc, #32]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b88:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MspInit 1 */
  //NVIC_SetPriorityGrouping(0);

  /* USER CODE END MspInit 1 */
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800

08000ba8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a19      	ldr	r2, [pc, #100]	; (8000c2c <HAL_UART_MspInit+0x84>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d12b      	bne.n	8000c22 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <HAL_UART_MspInit+0x88>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a17      	ldr	r2, [pc, #92]	; (8000c30 <HAL_UART_MspInit+0x88>)
 8000bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <HAL_UART_MspInit+0x88>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <HAL_UART_MspInit+0x88>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a10      	ldr	r2, [pc, #64]	; (8000c30 <HAL_UART_MspInit+0x88>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <HAL_UART_MspInit+0x88>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c02:	230c      	movs	r3, #12
 8000c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c12:	2307      	movs	r3, #7
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4805      	ldr	r0, [pc, #20]	; (8000c34 <HAL_UART_MspInit+0x8c>)
 8000c1e:	f000 fa07 	bl	8001030 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c22:	bf00      	nop
 8000c24:	3728      	adds	r7, #40	; 0x28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40004400 	.word	0x40004400
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020000 	.word	0x40020000

08000c38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08e      	sub	sp, #56	; 0x38
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	4b34      	ldr	r3, [pc, #208]	; (8000d20 <HAL_InitTick+0xe8>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c50:	4a33      	ldr	r2, [pc, #204]	; (8000d20 <HAL_InitTick+0xe8>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	6413      	str	r3, [r2, #64]	; 0x40
 8000c58:	4b31      	ldr	r3, [pc, #196]	; (8000d20 <HAL_InitTick+0xe8>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c64:	f107 0210 	add.w	r2, r7, #16
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f001 f822 	bl	8001cb8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c74:	6a3b      	ldr	r3, [r7, #32]
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d103      	bne.n	8000c86 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c7e:	f000 fff3 	bl	8001c68 <HAL_RCC_GetPCLK1Freq>
 8000c82:	6378      	str	r0, [r7, #52]	; 0x34
 8000c84:	e004      	b.n	8000c90 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c86:	f000 ffef 	bl	8001c68 <HAL_RCC_GetPCLK1Freq>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c92:	4a24      	ldr	r2, [pc, #144]	; (8000d24 <HAL_InitTick+0xec>)
 8000c94:	fba2 2303 	umull	r2, r3, r2, r3
 8000c98:	0c9b      	lsrs	r3, r3, #18
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000c9e:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <HAL_InitTick+0xf0>)
 8000ca0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ca4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000ca6:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <HAL_InitTick+0xf0>)
 8000ca8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cac:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000cae:	4a1e      	ldr	r2, [pc, #120]	; (8000d28 <HAL_InitTick+0xf0>)
 8000cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <HAL_InitTick+0xf0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cba:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <HAL_InitTick+0xf0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc0:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <HAL_InitTick+0xf0>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000cc6:	4818      	ldr	r0, [pc, #96]	; (8000d28 <HAL_InitTick+0xf0>)
 8000cc8:	f001 f828 	bl	8001d1c <HAL_TIM_Base_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000cd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d11b      	bne.n	8000d12 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000cda:	4813      	ldr	r0, [pc, #76]	; (8000d28 <HAL_InitTick+0xf0>)
 8000cdc:	f001 f878 	bl	8001dd0 <HAL_TIM_Base_Start_IT>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ce6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d111      	bne.n	8000d12 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cee:	201c      	movs	r0, #28
 8000cf0:	f000 f990 	bl	8001014 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b0f      	cmp	r3, #15
 8000cf8:	d808      	bhi.n	8000d0c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	6879      	ldr	r1, [r7, #4]
 8000cfe:	201c      	movs	r0, #28
 8000d00:	f000 f96c 	bl	8000fdc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d04:	4a09      	ldr	r2, [pc, #36]	; (8000d2c <HAL_InitTick+0xf4>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6013      	str	r3, [r2, #0]
 8000d0a:	e002      	b.n	8000d12 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3738      	adds	r7, #56	; 0x38
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023800 	.word	0x40023800
 8000d24:	431bde83 	.word	0x431bde83
 8000d28:	20000124 	.word	0x20000124
 8000d2c:	20000004 	.word	0x20000004

08000d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <NMI_Handler+0x4>

08000d36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <MemManage_Handler+0x4>

08000d42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <TIM2_IRQHandler+0x10>)
 8000d62:	f001 f897 	bl	8001e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000124 	.word	0x20000124

08000d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <SystemInit+0x20>)
 8000d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <SystemInit+0x20>)
 8000d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d98:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d9a:	490e      	ldr	r1, [pc, #56]	; (8000dd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d9c:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000db0:	4c0b      	ldr	r4, [pc, #44]	; (8000de0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dbe:	f7ff ffd7 	bl	8000d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f006 f853 	bl	8006e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fc2d 	bl	8000624 <main>
  bx  lr    
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dcc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000dd8:	080079d4 	.word	0x080079d4
  ldr r2, =_sbss
 8000ddc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000de0:	2000d5a0 	.word	0x2000d5a0

08000de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <HAL_Init+0x40>)
 8000df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <HAL_Init+0x40>)
 8000dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <HAL_Init+0x40>)
 8000e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 f8d8 	bl	8000fc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e16:	200f      	movs	r0, #15
 8000e18:	f7ff ff0e 	bl	8000c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e1c:	f7ff fe9c 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023c00 	.word	0x40023c00

08000e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_IncTick+0x20>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_IncTick+0x24>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <HAL_IncTick+0x24>)
 8000e3e:	6013      	str	r3, [r2, #0]
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	2000016c 	.word	0x2000016c

08000e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return uwTick;
 8000e58:	4b03      	ldr	r3, [pc, #12]	; (8000e68 <HAL_GetTick+0x14>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	2000016c 	.word	0x2000016c

08000e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9e:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	60d3      	str	r3, [r2, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <__NVIC_GetPriorityGrouping+0x18>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	f003 0307 	and.w	r3, r3, #7
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	db0b      	blt.n	8000efa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f003 021f 	and.w	r2, r3, #31
 8000ee8:	4907      	ldr	r1, [pc, #28]	; (8000f08 <__NVIC_EnableIRQ+0x38>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	095b      	lsrs	r3, r3, #5
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000e100 	.word	0xe000e100

08000f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db0a      	blt.n	8000f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	490c      	ldr	r1, [pc, #48]	; (8000f58 <__NVIC_SetPriority+0x4c>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	0112      	lsls	r2, r2, #4
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	440b      	add	r3, r1
 8000f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f34:	e00a      	b.n	8000f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4908      	ldr	r1, [pc, #32]	; (8000f5c <__NVIC_SetPriority+0x50>)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	3b04      	subs	r3, #4
 8000f44:	0112      	lsls	r2, r2, #4
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	440b      	add	r3, r1
 8000f4a:	761a      	strb	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000e100 	.word	0xe000e100
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	; 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f1c3 0307 	rsb	r3, r3, #7
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	bf28      	it	cs
 8000f7e:	2304      	movcs	r3, #4
 8000f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3304      	adds	r3, #4
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	d902      	bls.n	8000f90 <NVIC_EncodePriority+0x30>
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3b03      	subs	r3, #3
 8000f8e:	e000      	b.n	8000f92 <NVIC_EncodePriority+0x32>
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	43d9      	mvns	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	4313      	orrs	r3, r2
         );
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3724      	adds	r7, #36	; 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ff4c 	bl	8000e6c <__NVIC_SetPriorityGrouping>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fee:	f7ff ff61 	bl	8000eb4 <__NVIC_GetPriorityGrouping>
 8000ff2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	68b9      	ldr	r1, [r7, #8]
 8000ff8:	6978      	ldr	r0, [r7, #20]
 8000ffa:	f7ff ffb1 	bl	8000f60 <NVIC_EncodePriority>
 8000ffe:	4602      	mov	r2, r0
 8001000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001004:	4611      	mov	r1, r2
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ff80 	bl	8000f0c <__NVIC_SetPriority>
}
 800100c:	bf00      	nop
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ff54 	bl	8000ed0 <__NVIC_EnableIRQ>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
 800104a:	e159      	b.n	8001300 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800104c:	2201      	movs	r2, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	429a      	cmp	r2, r3
 8001066:	f040 8148 	bne.w	80012fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	2b01      	cmp	r3, #1
 8001074:	d005      	beq.n	8001082 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107e:	2b02      	cmp	r3, #2
 8001080:	d130      	bne.n	80010e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	2203      	movs	r2, #3
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b8:	2201      	movs	r2, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	091b      	lsrs	r3, r3, #4
 80010ce:	f003 0201 	and.w	r2, r3, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	d017      	beq.n	8001120 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d123      	bne.n	8001174 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	08da      	lsrs	r2, r3, #3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3208      	adds	r2, #8
 8001134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	220f      	movs	r2, #15
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	691a      	ldr	r2, [r3, #16]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	08da      	lsrs	r2, r3, #3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3208      	adds	r2, #8
 800116e:	69b9      	ldr	r1, [r7, #24]
 8001170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	2203      	movs	r2, #3
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0203 	and.w	r2, r3, #3
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 80a2 	beq.w	80012fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b57      	ldr	r3, [pc, #348]	; (8001318 <HAL_GPIO_Init+0x2e8>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	4a56      	ldr	r2, [pc, #344]	; (8001318 <HAL_GPIO_Init+0x2e8>)
 80011c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c4:	6453      	str	r3, [r2, #68]	; 0x44
 80011c6:	4b54      	ldr	r3, [pc, #336]	; (8001318 <HAL_GPIO_Init+0x2e8>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011d2:	4a52      	ldr	r2, [pc, #328]	; (800131c <HAL_GPIO_Init+0x2ec>)
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	3302      	adds	r3, #2
 80011da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	220f      	movs	r2, #15
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a49      	ldr	r2, [pc, #292]	; (8001320 <HAL_GPIO_Init+0x2f0>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d019      	beq.n	8001232 <HAL_GPIO_Init+0x202>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a48      	ldr	r2, [pc, #288]	; (8001324 <HAL_GPIO_Init+0x2f4>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d013      	beq.n	800122e <HAL_GPIO_Init+0x1fe>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a47      	ldr	r2, [pc, #284]	; (8001328 <HAL_GPIO_Init+0x2f8>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d00d      	beq.n	800122a <HAL_GPIO_Init+0x1fa>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a46      	ldr	r2, [pc, #280]	; (800132c <HAL_GPIO_Init+0x2fc>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d007      	beq.n	8001226 <HAL_GPIO_Init+0x1f6>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a45      	ldr	r2, [pc, #276]	; (8001330 <HAL_GPIO_Init+0x300>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d101      	bne.n	8001222 <HAL_GPIO_Init+0x1f2>
 800121e:	2304      	movs	r3, #4
 8001220:	e008      	b.n	8001234 <HAL_GPIO_Init+0x204>
 8001222:	2307      	movs	r3, #7
 8001224:	e006      	b.n	8001234 <HAL_GPIO_Init+0x204>
 8001226:	2303      	movs	r3, #3
 8001228:	e004      	b.n	8001234 <HAL_GPIO_Init+0x204>
 800122a:	2302      	movs	r3, #2
 800122c:	e002      	b.n	8001234 <HAL_GPIO_Init+0x204>
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <HAL_GPIO_Init+0x204>
 8001232:	2300      	movs	r3, #0
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	f002 0203 	and.w	r2, r2, #3
 800123a:	0092      	lsls	r2, r2, #2
 800123c:	4093      	lsls	r3, r2
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001244:	4935      	ldr	r1, [pc, #212]	; (800131c <HAL_GPIO_Init+0x2ec>)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	089b      	lsrs	r3, r3, #2
 800124a:	3302      	adds	r3, #2
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001252:	4b38      	ldr	r3, [pc, #224]	; (8001334 <HAL_GPIO_Init+0x304>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001276:	4a2f      	ldr	r2, [pc, #188]	; (8001334 <HAL_GPIO_Init+0x304>)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800127c:	4b2d      	ldr	r3, [pc, #180]	; (8001334 <HAL_GPIO_Init+0x304>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012a0:	4a24      	ldr	r2, [pc, #144]	; (8001334 <HAL_GPIO_Init+0x304>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012a6:	4b23      	ldr	r3, [pc, #140]	; (8001334 <HAL_GPIO_Init+0x304>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ca:	4a1a      	ldr	r2, [pc, #104]	; (8001334 <HAL_GPIO_Init+0x304>)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d0:	4b18      	ldr	r3, [pc, #96]	; (8001334 <HAL_GPIO_Init+0x304>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012f4:	4a0f      	ldr	r2, [pc, #60]	; (8001334 <HAL_GPIO_Init+0x304>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3301      	adds	r3, #1
 80012fe:	61fb      	str	r3, [r7, #28]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	2b0f      	cmp	r3, #15
 8001304:	f67f aea2 	bls.w	800104c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3724      	adds	r7, #36	; 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40013800 	.word	0x40013800
 8001320:	40020000 	.word	0x40020000
 8001324:	40020400 	.word	0x40020400
 8001328:	40020800 	.word	0x40020800
 800132c:	40020c00 	.word	0x40020c00
 8001330:	40021000 	.word	0x40021000
 8001334:	40013c00 	.word	0x40013c00

08001338 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691a      	ldr	r2, [r3, #16]
 8001348:	887b      	ldrh	r3, [r7, #2]
 800134a:	4013      	ands	r3, r2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d002      	beq.n	8001356 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001350:	2301      	movs	r3, #1
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	e001      	b.n	800135a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001356:	2300      	movs	r3, #0
 8001358:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800135a:	7bfb      	ldrb	r3, [r7, #15]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
 8001374:	4613      	mov	r3, r2
 8001376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001378:	787b      	ldrb	r3, [r7, #1]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800137e:	887a      	ldrh	r2, [r7, #2]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001384:	e003      	b.n	800138e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001386:	887b      	ldrh	r3, [r7, #2]
 8001388:	041a      	lsls	r2, r3, #16
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	619a      	str	r2, [r3, #24]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800139a:	b480      	push	{r7}
 800139c:	b085      	sub	sp, #20
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	460b      	mov	r3, r1
 80013a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013ac:	887a      	ldrh	r2, [r7, #2]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4013      	ands	r3, r2
 80013b2:	041a      	lsls	r2, r3, #16
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	43d9      	mvns	r1, r3
 80013b8:	887b      	ldrh	r3, [r7, #2]
 80013ba:	400b      	ands	r3, r1
 80013bc:	431a      	orrs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	619a      	str	r2, [r3, #24]
}
 80013c2:	bf00      	nop
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_PWR_EnterSLEEPMode+0x34>)
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	4a08      	ldr	r2, [pc, #32]	; (8001404 <HAL_PWR_EnterSLEEPMode+0x34>)
 80013e2:	f023 0304 	bic.w	r3, r3, #4
 80013e6:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80013e8:	78fb      	ldrb	r3, [r7, #3]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d101      	bne.n	80013f2 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80013ee:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80013f0:	e002      	b.n	80013f8 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 80013f2:	bf40      	sev
    __WFE();
 80013f4:	bf20      	wfe
    __WFE();
 80013f6:	bf20      	wfe
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e267      	b.n	80018ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	2b00      	cmp	r3, #0
 8001424:	d075      	beq.n	8001512 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001426:	4b88      	ldr	r3, [pc, #544]	; (8001648 <HAL_RCC_OscConfig+0x240>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 030c 	and.w	r3, r3, #12
 800142e:	2b04      	cmp	r3, #4
 8001430:	d00c      	beq.n	800144c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001432:	4b85      	ldr	r3, [pc, #532]	; (8001648 <HAL_RCC_OscConfig+0x240>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800143a:	2b08      	cmp	r3, #8
 800143c:	d112      	bne.n	8001464 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800143e:	4b82      	ldr	r3, [pc, #520]	; (8001648 <HAL_RCC_OscConfig+0x240>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001446:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800144a:	d10b      	bne.n	8001464 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800144c:	4b7e      	ldr	r3, [pc, #504]	; (8001648 <HAL_RCC_OscConfig+0x240>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d05b      	beq.n	8001510 <HAL_RCC_OscConfig+0x108>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d157      	bne.n	8001510 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e242      	b.n	80018ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800146c:	d106      	bne.n	800147c <HAL_RCC_OscConfig+0x74>
 800146e:	4b76      	ldr	r3, [pc, #472]	; (8001648 <HAL_RCC_OscConfig+0x240>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a75      	ldr	r2, [pc, #468]	; (8001648 <HAL_RCC_OscConfig+0x240>)
 8001474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e01d      	b.n	80014b8 <HAL_RCC_OscConfig+0xb0>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001484:	d10c      	bne.n	80014a0 <HAL_RCC_OscConfig+0x98>
 8001486:	4b70      	ldr	r3, [pc, #448]	; (8001648 <HAL_RCC_OscConfig+0x240>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a6f      	ldr	r2, [pc, #444]	; (8001648 <HAL_RCC_OscConfig+0x240>)
 800148c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	4b6d      	ldr	r3, [pc, #436]	; (8001648 <HAL_RCC_OscConfig+0x240>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a6c      	ldr	r2, [pc, #432]	; (8001648 <HAL_RCC_OscConfig+0x240>)
 8001498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	e00b      	b.n	80014b8 <HAL_RCC_OscConfig+0xb0>
 80014a0:	4b69      	ldr	r3, [pc, #420]	; (8001648 <HAL_RCC_OscConfig+0x240>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a68      	ldr	r2, [pc, #416]	; (8001648 <HAL_RCC_OscConfig+0x240>)
 80014a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	4b66      	ldr	r3, [pc, #408]	; (8001648 <HAL_RCC_OscConfig+0x240>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a65      	ldr	r2, [pc, #404]	; (8001648 <HAL_RCC_OscConfig+0x240>)
 80014b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d013      	beq.n	80014e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fcc8 	bl	8000e54 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c8:	f7ff fcc4 	bl	8000e54 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b64      	cmp	r3, #100	; 0x64
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e207      	b.n	80018ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014da:	4b5b      	ldr	r3, [pc, #364]	; (8001648 <HAL_RCC_OscConfig+0x240>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0xc0>
 80014e6:	e014      	b.n	8001512 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7ff fcb4 	bl	8000e54 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f0:	f7ff fcb0 	bl	8000e54 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b64      	cmp	r3, #100	; 0x64
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e1f3      	b.n	80018ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001502:	4b51      	ldr	r3, [pc, #324]	; (8001648 <HAL_RCC_OscConfig+0x240>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0xe8>
 800150e:	e000      	b.n	8001512 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d063      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800151e:	4b4a      	ldr	r3, [pc, #296]	; (8001648 <HAL_RCC_OscConfig+0x240>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00b      	beq.n	8001542 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800152a:	4b47      	ldr	r3, [pc, #284]	; (8001648 <HAL_RCC_OscConfig+0x240>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001532:	2b08      	cmp	r3, #8
 8001534:	d11c      	bne.n	8001570 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001536:	4b44      	ldr	r3, [pc, #272]	; (8001648 <HAL_RCC_OscConfig+0x240>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d116      	bne.n	8001570 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001542:	4b41      	ldr	r3, [pc, #260]	; (8001648 <HAL_RCC_OscConfig+0x240>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d005      	beq.n	800155a <HAL_RCC_OscConfig+0x152>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d001      	beq.n	800155a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e1c7      	b.n	80018ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155a:	4b3b      	ldr	r3, [pc, #236]	; (8001648 <HAL_RCC_OscConfig+0x240>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	4937      	ldr	r1, [pc, #220]	; (8001648 <HAL_RCC_OscConfig+0x240>)
 800156a:	4313      	orrs	r3, r2
 800156c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156e:	e03a      	b.n	80015e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d020      	beq.n	80015ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001578:	4b34      	ldr	r3, [pc, #208]	; (800164c <HAL_RCC_OscConfig+0x244>)
 800157a:	2201      	movs	r2, #1
 800157c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157e:	f7ff fc69 	bl	8000e54 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001586:	f7ff fc65 	bl	8000e54 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e1a8      	b.n	80018ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001598:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <HAL_RCC_OscConfig+0x240>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a4:	4b28      	ldr	r3, [pc, #160]	; (8001648 <HAL_RCC_OscConfig+0x240>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	4925      	ldr	r1, [pc, #148]	; (8001648 <HAL_RCC_OscConfig+0x240>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	600b      	str	r3, [r1, #0]
 80015b8:	e015      	b.n	80015e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ba:	4b24      	ldr	r3, [pc, #144]	; (800164c <HAL_RCC_OscConfig+0x244>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c0:	f7ff fc48 	bl	8000e54 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c8:	f7ff fc44 	bl	8000e54 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e187      	b.n	80018ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015da:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <HAL_RCC_OscConfig+0x240>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d036      	beq.n	8001660 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d016      	beq.n	8001628 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <HAL_RCC_OscConfig+0x248>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001600:	f7ff fc28 	bl	8000e54 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001608:	f7ff fc24 	bl	8000e54 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e167      	b.n	80018ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_RCC_OscConfig+0x240>)
 800161c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0x200>
 8001626:	e01b      	b.n	8001660 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_RCC_OscConfig+0x248>)
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162e:	f7ff fc11 	bl	8000e54 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001634:	e00e      	b.n	8001654 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001636:	f7ff fc0d 	bl	8000e54 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d907      	bls.n	8001654 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e150      	b.n	80018ea <HAL_RCC_OscConfig+0x4e2>
 8001648:	40023800 	.word	0x40023800
 800164c:	42470000 	.word	0x42470000
 8001650:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001654:	4b88      	ldr	r3, [pc, #544]	; (8001878 <HAL_RCC_OscConfig+0x470>)
 8001656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1ea      	bne.n	8001636 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 8097 	beq.w	800179c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800166e:	2300      	movs	r3, #0
 8001670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001672:	4b81      	ldr	r3, [pc, #516]	; (8001878 <HAL_RCC_OscConfig+0x470>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10f      	bne.n	800169e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	4b7d      	ldr	r3, [pc, #500]	; (8001878 <HAL_RCC_OscConfig+0x470>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	4a7c      	ldr	r2, [pc, #496]	; (8001878 <HAL_RCC_OscConfig+0x470>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168c:	6413      	str	r3, [r2, #64]	; 0x40
 800168e:	4b7a      	ldr	r3, [pc, #488]	; (8001878 <HAL_RCC_OscConfig+0x470>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800169a:	2301      	movs	r3, #1
 800169c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169e:	4b77      	ldr	r3, [pc, #476]	; (800187c <HAL_RCC_OscConfig+0x474>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d118      	bne.n	80016dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016aa:	4b74      	ldr	r3, [pc, #464]	; (800187c <HAL_RCC_OscConfig+0x474>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a73      	ldr	r2, [pc, #460]	; (800187c <HAL_RCC_OscConfig+0x474>)
 80016b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b6:	f7ff fbcd 	bl	8000e54 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016be:	f7ff fbc9 	bl	8000e54 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e10c      	b.n	80018ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d0:	4b6a      	ldr	r3, [pc, #424]	; (800187c <HAL_RCC_OscConfig+0x474>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0f0      	beq.n	80016be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d106      	bne.n	80016f2 <HAL_RCC_OscConfig+0x2ea>
 80016e4:	4b64      	ldr	r3, [pc, #400]	; (8001878 <HAL_RCC_OscConfig+0x470>)
 80016e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e8:	4a63      	ldr	r2, [pc, #396]	; (8001878 <HAL_RCC_OscConfig+0x470>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	6713      	str	r3, [r2, #112]	; 0x70
 80016f0:	e01c      	b.n	800172c <HAL_RCC_OscConfig+0x324>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2b05      	cmp	r3, #5
 80016f8:	d10c      	bne.n	8001714 <HAL_RCC_OscConfig+0x30c>
 80016fa:	4b5f      	ldr	r3, [pc, #380]	; (8001878 <HAL_RCC_OscConfig+0x470>)
 80016fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fe:	4a5e      	ldr	r2, [pc, #376]	; (8001878 <HAL_RCC_OscConfig+0x470>)
 8001700:	f043 0304 	orr.w	r3, r3, #4
 8001704:	6713      	str	r3, [r2, #112]	; 0x70
 8001706:	4b5c      	ldr	r3, [pc, #368]	; (8001878 <HAL_RCC_OscConfig+0x470>)
 8001708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170a:	4a5b      	ldr	r2, [pc, #364]	; (8001878 <HAL_RCC_OscConfig+0x470>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6713      	str	r3, [r2, #112]	; 0x70
 8001712:	e00b      	b.n	800172c <HAL_RCC_OscConfig+0x324>
 8001714:	4b58      	ldr	r3, [pc, #352]	; (8001878 <HAL_RCC_OscConfig+0x470>)
 8001716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001718:	4a57      	ldr	r2, [pc, #348]	; (8001878 <HAL_RCC_OscConfig+0x470>)
 800171a:	f023 0301 	bic.w	r3, r3, #1
 800171e:	6713      	str	r3, [r2, #112]	; 0x70
 8001720:	4b55      	ldr	r3, [pc, #340]	; (8001878 <HAL_RCC_OscConfig+0x470>)
 8001722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001724:	4a54      	ldr	r2, [pc, #336]	; (8001878 <HAL_RCC_OscConfig+0x470>)
 8001726:	f023 0304 	bic.w	r3, r3, #4
 800172a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d015      	beq.n	8001760 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001734:	f7ff fb8e 	bl	8000e54 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800173a:	e00a      	b.n	8001752 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800173c:	f7ff fb8a 	bl	8000e54 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	f241 3288 	movw	r2, #5000	; 0x1388
 800174a:	4293      	cmp	r3, r2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e0cb      	b.n	80018ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001752:	4b49      	ldr	r3, [pc, #292]	; (8001878 <HAL_RCC_OscConfig+0x470>)
 8001754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0ee      	beq.n	800173c <HAL_RCC_OscConfig+0x334>
 800175e:	e014      	b.n	800178a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001760:	f7ff fb78 	bl	8000e54 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001766:	e00a      	b.n	800177e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001768:	f7ff fb74 	bl	8000e54 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f241 3288 	movw	r2, #5000	; 0x1388
 8001776:	4293      	cmp	r3, r2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e0b5      	b.n	80018ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800177e:	4b3e      	ldr	r3, [pc, #248]	; (8001878 <HAL_RCC_OscConfig+0x470>)
 8001780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1ee      	bne.n	8001768 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800178a:	7dfb      	ldrb	r3, [r7, #23]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d105      	bne.n	800179c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001790:	4b39      	ldr	r3, [pc, #228]	; (8001878 <HAL_RCC_OscConfig+0x470>)
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	4a38      	ldr	r2, [pc, #224]	; (8001878 <HAL_RCC_OscConfig+0x470>)
 8001796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800179a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f000 80a1 	beq.w	80018e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017a6:	4b34      	ldr	r3, [pc, #208]	; (8001878 <HAL_RCC_OscConfig+0x470>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 030c 	and.w	r3, r3, #12
 80017ae:	2b08      	cmp	r3, #8
 80017b0:	d05c      	beq.n	800186c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d141      	bne.n	800183e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ba:	4b31      	ldr	r3, [pc, #196]	; (8001880 <HAL_RCC_OscConfig+0x478>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff fb48 	bl	8000e54 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c8:	f7ff fb44 	bl	8000e54 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e087      	b.n	80018ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017da:	4b27      	ldr	r3, [pc, #156]	; (8001878 <HAL_RCC_OscConfig+0x470>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69da      	ldr	r2, [r3, #28]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f4:	019b      	lsls	r3, r3, #6
 80017f6:	431a      	orrs	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fc:	085b      	lsrs	r3, r3, #1
 80017fe:	3b01      	subs	r3, #1
 8001800:	041b      	lsls	r3, r3, #16
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	061b      	lsls	r3, r3, #24
 800180a:	491b      	ldr	r1, [pc, #108]	; (8001878 <HAL_RCC_OscConfig+0x470>)
 800180c:	4313      	orrs	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001810:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <HAL_RCC_OscConfig+0x478>)
 8001812:	2201      	movs	r2, #1
 8001814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001816:	f7ff fb1d 	bl	8000e54 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800181e:	f7ff fb19 	bl	8000e54 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e05c      	b.n	80018ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <HAL_RCC_OscConfig+0x470>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0x416>
 800183c:	e054      	b.n	80018e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <HAL_RCC_OscConfig+0x478>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7ff fb06 	bl	8000e54 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800184c:	f7ff fb02 	bl	8000e54 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e045      	b.n	80018ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185e:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_RCC_OscConfig+0x470>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x444>
 800186a:	e03d      	b.n	80018e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d107      	bne.n	8001884 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e038      	b.n	80018ea <HAL_RCC_OscConfig+0x4e2>
 8001878:	40023800 	.word	0x40023800
 800187c:	40007000 	.word	0x40007000
 8001880:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001884:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <HAL_RCC_OscConfig+0x4ec>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d028      	beq.n	80018e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800189c:	429a      	cmp	r2, r3
 800189e:	d121      	bne.n	80018e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d11a      	bne.n	80018e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018b4:	4013      	ands	r3, r2
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018bc:	4293      	cmp	r3, r2
 80018be:	d111      	bne.n	80018e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ca:	085b      	lsrs	r3, r3, #1
 80018cc:	3b01      	subs	r3, #1
 80018ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d107      	bne.n	80018e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d001      	beq.n	80018e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e000      	b.n	80018ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800

080018f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0cc      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800190c:	4b68      	ldr	r3, [pc, #416]	; (8001ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d90c      	bls.n	8001934 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191a:	4b65      	ldr	r3, [pc, #404]	; (8001ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001922:	4b63      	ldr	r3, [pc, #396]	; (8001ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	429a      	cmp	r2, r3
 800192e:	d001      	beq.n	8001934 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e0b8      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d020      	beq.n	8001982 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	d005      	beq.n	8001958 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800194c:	4b59      	ldr	r3, [pc, #356]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	4a58      	ldr	r2, [pc, #352]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001952:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001956:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0308 	and.w	r3, r3, #8
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001964:	4b53      	ldr	r3, [pc, #332]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	4a52      	ldr	r2, [pc, #328]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800196e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001970:	4b50      	ldr	r3, [pc, #320]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	494d      	ldr	r1, [pc, #308]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	4313      	orrs	r3, r2
 8001980:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	d044      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d107      	bne.n	80019a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001996:	4b47      	ldr	r3, [pc, #284]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d119      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e07f      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d003      	beq.n	80019b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019b2:	2b03      	cmp	r3, #3
 80019b4:	d107      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b6:	4b3f      	ldr	r3, [pc, #252]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d109      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e06f      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c6:	4b3b      	ldr	r3, [pc, #236]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e067      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019d6:	4b37      	ldr	r3, [pc, #220]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f023 0203 	bic.w	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	4934      	ldr	r1, [pc, #208]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019e8:	f7ff fa34 	bl	8000e54 <HAL_GetTick>
 80019ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ee:	e00a      	b.n	8001a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f0:	f7ff fa30 	bl	8000e54 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e04f      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a06:	4b2b      	ldr	r3, [pc, #172]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 020c 	and.w	r2, r3, #12
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d1eb      	bne.n	80019f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a18:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d20c      	bcs.n	8001a40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a26:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2e:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d001      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e032      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d008      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	4916      	ldr	r1, [pc, #88]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d009      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a6a:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	490e      	ldr	r1, [pc, #56]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a7e:	f000 f821 	bl	8001ac4 <HAL_RCC_GetSysClockFreq>
 8001a82:	4602      	mov	r2, r0
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	091b      	lsrs	r3, r3, #4
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	490a      	ldr	r1, [pc, #40]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a90:	5ccb      	ldrb	r3, [r1, r3]
 8001a92:	fa22 f303 	lsr.w	r3, r2, r3
 8001a96:	4a09      	ldr	r2, [pc, #36]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff f8ca 	bl	8000c38 <HAL_InitTick>

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40023c00 	.word	0x40023c00
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	08007950 	.word	0x08007950
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	20000004 	.word	0x20000004

08001ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ac8:	b090      	sub	sp, #64	; 0x40
 8001aca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	637b      	str	r3, [r7, #52]	; 0x34
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001adc:	4b59      	ldr	r3, [pc, #356]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 030c 	and.w	r3, r3, #12
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d00d      	beq.n	8001b04 <HAL_RCC_GetSysClockFreq+0x40>
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	f200 80a1 	bhi.w	8001c30 <HAL_RCC_GetSysClockFreq+0x16c>
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d002      	beq.n	8001af8 <HAL_RCC_GetSysClockFreq+0x34>
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d003      	beq.n	8001afe <HAL_RCC_GetSysClockFreq+0x3a>
 8001af6:	e09b      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001af8:	4b53      	ldr	r3, [pc, #332]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x184>)
 8001afa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001afc:	e09b      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001afe:	4b53      	ldr	r3, [pc, #332]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x188>)
 8001b00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b02:	e098      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b04:	4b4f      	ldr	r3, [pc, #316]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b0c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b0e:	4b4d      	ldr	r3, [pc, #308]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d028      	beq.n	8001b6c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b1a:	4b4a      	ldr	r3, [pc, #296]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	099b      	lsrs	r3, r3, #6
 8001b20:	2200      	movs	r2, #0
 8001b22:	623b      	str	r3, [r7, #32]
 8001b24:	627a      	str	r2, [r7, #36]	; 0x24
 8001b26:	6a3b      	ldr	r3, [r7, #32]
 8001b28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4b47      	ldr	r3, [pc, #284]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x188>)
 8001b30:	fb03 f201 	mul.w	r2, r3, r1
 8001b34:	2300      	movs	r3, #0
 8001b36:	fb00 f303 	mul.w	r3, r0, r3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	4a43      	ldr	r2, [pc, #268]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x188>)
 8001b3e:	fba0 1202 	umull	r1, r2, r0, r2
 8001b42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b44:	460a      	mov	r2, r1
 8001b46:	62ba      	str	r2, [r7, #40]	; 0x28
 8001b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b4a:	4413      	add	r3, r2
 8001b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b50:	2200      	movs	r2, #0
 8001b52:	61bb      	str	r3, [r7, #24]
 8001b54:	61fa      	str	r2, [r7, #28]
 8001b56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b5e:	f7fe fbdf 	bl	8000320 <__aeabi_uldivmod>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4613      	mov	r3, r2
 8001b68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b6a:	e053      	b.n	8001c14 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b6c:	4b35      	ldr	r3, [pc, #212]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	099b      	lsrs	r3, r3, #6
 8001b72:	2200      	movs	r2, #0
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	617a      	str	r2, [r7, #20]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b7e:	f04f 0b00 	mov.w	fp, #0
 8001b82:	4652      	mov	r2, sl
 8001b84:	465b      	mov	r3, fp
 8001b86:	f04f 0000 	mov.w	r0, #0
 8001b8a:	f04f 0100 	mov.w	r1, #0
 8001b8e:	0159      	lsls	r1, r3, #5
 8001b90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b94:	0150      	lsls	r0, r2, #5
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	ebb2 080a 	subs.w	r8, r2, sl
 8001b9e:	eb63 090b 	sbc.w	r9, r3, fp
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001bae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001bb2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001bb6:	ebb2 0408 	subs.w	r4, r2, r8
 8001bba:	eb63 0509 	sbc.w	r5, r3, r9
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	00eb      	lsls	r3, r5, #3
 8001bc8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bcc:	00e2      	lsls	r2, r4, #3
 8001bce:	4614      	mov	r4, r2
 8001bd0:	461d      	mov	r5, r3
 8001bd2:	eb14 030a 	adds.w	r3, r4, sl
 8001bd6:	603b      	str	r3, [r7, #0]
 8001bd8:	eb45 030b 	adc.w	r3, r5, fp
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	f04f 0300 	mov.w	r3, #0
 8001be6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bea:	4629      	mov	r1, r5
 8001bec:	028b      	lsls	r3, r1, #10
 8001bee:	4621      	mov	r1, r4
 8001bf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bf4:	4621      	mov	r1, r4
 8001bf6:	028a      	lsls	r2, r1, #10
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	60fa      	str	r2, [r7, #12]
 8001c04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c08:	f7fe fb8a 	bl	8000320 <__aeabi_uldivmod>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4613      	mov	r3, r2
 8001c12:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	0c1b      	lsrs	r3, r3, #16
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	3301      	adds	r3, #1
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001c24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c2e:	e002      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c30:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c32:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3740      	adds	r7, #64	; 0x40
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c42:	bf00      	nop
 8001c44:	40023800 	.word	0x40023800
 8001c48:	00f42400 	.word	0x00f42400
 8001c4c:	017d7840 	.word	0x017d7840

08001c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20000000 	.word	0x20000000

08001c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c6c:	f7ff fff0 	bl	8001c50 <HAL_RCC_GetHCLKFreq>
 8001c70:	4602      	mov	r2, r0
 8001c72:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	0a9b      	lsrs	r3, r3, #10
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	4903      	ldr	r1, [pc, #12]	; (8001c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c7e:	5ccb      	ldrb	r3, [r1, r3]
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	08007960 	.word	0x08007960

08001c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c94:	f7ff ffdc 	bl	8001c50 <HAL_RCC_GetHCLKFreq>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	0b5b      	lsrs	r3, r3, #13
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	4903      	ldr	r1, [pc, #12]	; (8001cb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ca6:	5ccb      	ldrb	r3, [r1, r3]
 8001ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	08007960 	.word	0x08007960

08001cb8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	220f      	movs	r2, #15
 8001cc6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cc8:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <HAL_RCC_GetClockConfig+0x5c>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 0203 	and.w	r2, r3, #3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <HAL_RCC_GetClockConfig+0x5c>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <HAL_RCC_GetClockConfig+0x5c>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <HAL_RCC_GetClockConfig+0x5c>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	08db      	lsrs	r3, r3, #3
 8001cf2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cfa:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <HAL_RCC_GetClockConfig+0x60>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0207 	and.w	r2, r3, #7
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	601a      	str	r2, [r3, #0]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40023c00 	.word	0x40023c00

08001d1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e041      	b.n	8001db2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d106      	bne.n	8001d48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f839 	bl	8001dba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3304      	adds	r3, #4
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	f000 f9ca 	bl	80020f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d001      	beq.n	8001de8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e044      	b.n	8001e72 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2202      	movs	r2, #2
 8001dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a1e      	ldr	r2, [pc, #120]	; (8001e80 <HAL_TIM_Base_Start_IT+0xb0>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d018      	beq.n	8001e3c <HAL_TIM_Base_Start_IT+0x6c>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e12:	d013      	beq.n	8001e3c <HAL_TIM_Base_Start_IT+0x6c>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a1a      	ldr	r2, [pc, #104]	; (8001e84 <HAL_TIM_Base_Start_IT+0xb4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d00e      	beq.n	8001e3c <HAL_TIM_Base_Start_IT+0x6c>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a19      	ldr	r2, [pc, #100]	; (8001e88 <HAL_TIM_Base_Start_IT+0xb8>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d009      	beq.n	8001e3c <HAL_TIM_Base_Start_IT+0x6c>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a17      	ldr	r2, [pc, #92]	; (8001e8c <HAL_TIM_Base_Start_IT+0xbc>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d004      	beq.n	8001e3c <HAL_TIM_Base_Start_IT+0x6c>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a16      	ldr	r2, [pc, #88]	; (8001e90 <HAL_TIM_Base_Start_IT+0xc0>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d111      	bne.n	8001e60 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b06      	cmp	r3, #6
 8001e4c:	d010      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f042 0201 	orr.w	r2, r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e5e:	e007      	b.n	8001e70 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40010000 	.word	0x40010000
 8001e84:	40000400 	.word	0x40000400
 8001e88:	40000800 	.word	0x40000800
 8001e8c:	40000c00 	.word	0x40000c00
 8001e90:	40014000 	.word	0x40014000

08001e94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d122      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d11b      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0202 	mvn.w	r2, #2
 8001ec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f8ee 	bl	80020b8 <HAL_TIM_IC_CaptureCallback>
 8001edc:	e005      	b.n	8001eea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f8e0 	bl	80020a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f8f1 	bl	80020cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d122      	bne.n	8001f44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d11b      	bne.n	8001f44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f06f 0204 	mvn.w	r2, #4
 8001f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2202      	movs	r2, #2
 8001f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f8c4 	bl	80020b8 <HAL_TIM_IC_CaptureCallback>
 8001f30:	e005      	b.n	8001f3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f8b6 	bl	80020a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f8c7 	bl	80020cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d122      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d11b      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0208 	mvn.w	r2, #8
 8001f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f89a 	bl	80020b8 <HAL_TIM_IC_CaptureCallback>
 8001f84:	e005      	b.n	8001f92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f88c 	bl	80020a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f89d 	bl	80020cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	2b10      	cmp	r3, #16
 8001fa4:	d122      	bne.n	8001fec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 0310 	and.w	r3, r3, #16
 8001fb0:	2b10      	cmp	r3, #16
 8001fb2:	d11b      	bne.n	8001fec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0210 	mvn.w	r2, #16
 8001fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2208      	movs	r2, #8
 8001fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f870 	bl	80020b8 <HAL_TIM_IC_CaptureCallback>
 8001fd8:	e005      	b.n	8001fe6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f862 	bl	80020a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f873 	bl	80020cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d10e      	bne.n	8002018 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b01      	cmp	r3, #1
 8002006:	d107      	bne.n	8002018 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0201 	mvn.w	r2, #1
 8002010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7fe fd8c 	bl	8000b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002022:	2b80      	cmp	r3, #128	; 0x80
 8002024:	d10e      	bne.n	8002044 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002030:	2b80      	cmp	r3, #128	; 0x80
 8002032:	d107      	bne.n	8002044 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800203c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f8e2 	bl	8002208 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204e:	2b40      	cmp	r3, #64	; 0x40
 8002050:	d10e      	bne.n	8002070 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205c:	2b40      	cmp	r3, #64	; 0x40
 800205e:	d107      	bne.n	8002070 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f838 	bl	80020e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f003 0320 	and.w	r3, r3, #32
 800207a:	2b20      	cmp	r3, #32
 800207c:	d10e      	bne.n	800209c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0320 	and.w	r3, r3, #32
 8002088:	2b20      	cmp	r3, #32
 800208a:	d107      	bne.n	800209c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0220 	mvn.w	r2, #32
 8002094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f8ac 	bl	80021f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a34      	ldr	r2, [pc, #208]	; (80021d8 <TIM_Base_SetConfig+0xe4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d00f      	beq.n	800212c <TIM_Base_SetConfig+0x38>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002112:	d00b      	beq.n	800212c <TIM_Base_SetConfig+0x38>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a31      	ldr	r2, [pc, #196]	; (80021dc <TIM_Base_SetConfig+0xe8>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d007      	beq.n	800212c <TIM_Base_SetConfig+0x38>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a30      	ldr	r2, [pc, #192]	; (80021e0 <TIM_Base_SetConfig+0xec>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d003      	beq.n	800212c <TIM_Base_SetConfig+0x38>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a2f      	ldr	r2, [pc, #188]	; (80021e4 <TIM_Base_SetConfig+0xf0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d108      	bne.n	800213e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	4313      	orrs	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a25      	ldr	r2, [pc, #148]	; (80021d8 <TIM_Base_SetConfig+0xe4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d01b      	beq.n	800217e <TIM_Base_SetConfig+0x8a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800214c:	d017      	beq.n	800217e <TIM_Base_SetConfig+0x8a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a22      	ldr	r2, [pc, #136]	; (80021dc <TIM_Base_SetConfig+0xe8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d013      	beq.n	800217e <TIM_Base_SetConfig+0x8a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a21      	ldr	r2, [pc, #132]	; (80021e0 <TIM_Base_SetConfig+0xec>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d00f      	beq.n	800217e <TIM_Base_SetConfig+0x8a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a20      	ldr	r2, [pc, #128]	; (80021e4 <TIM_Base_SetConfig+0xf0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00b      	beq.n	800217e <TIM_Base_SetConfig+0x8a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a1f      	ldr	r2, [pc, #124]	; (80021e8 <TIM_Base_SetConfig+0xf4>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d007      	beq.n	800217e <TIM_Base_SetConfig+0x8a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a1e      	ldr	r2, [pc, #120]	; (80021ec <TIM_Base_SetConfig+0xf8>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d003      	beq.n	800217e <TIM_Base_SetConfig+0x8a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a1d      	ldr	r2, [pc, #116]	; (80021f0 <TIM_Base_SetConfig+0xfc>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d108      	bne.n	8002190 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4313      	orrs	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	4313      	orrs	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a08      	ldr	r2, [pc, #32]	; (80021d8 <TIM_Base_SetConfig+0xe4>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d103      	bne.n	80021c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	615a      	str	r2, [r3, #20]
}
 80021ca:	bf00      	nop
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40010000 	.word	0x40010000
 80021dc:	40000400 	.word	0x40000400
 80021e0:	40000800 	.word	0x40000800
 80021e4:	40000c00 	.word	0x40000c00
 80021e8:	40014000 	.word	0x40014000
 80021ec:	40014400 	.word	0x40014400
 80021f0:	40014800 	.word	0x40014800

080021f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e03f      	b.n	80022ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d106      	bne.n	8002248 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7fe fcb0 	bl	8000ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2224      	movs	r2, #36	; 0x24
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800225e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f929 	bl	80024b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002274:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	695a      	ldr	r2, [r3, #20]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002284:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002294:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2220      	movs	r2, #32
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b08a      	sub	sp, #40	; 0x28
 80022ba:	af02      	add	r7, sp, #8
 80022bc:	60f8      	str	r0, [r7, #12]
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	603b      	str	r3, [r7, #0]
 80022c2:	4613      	mov	r3, r2
 80022c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b20      	cmp	r3, #32
 80022d4:	d17c      	bne.n	80023d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <HAL_UART_Transmit+0x2c>
 80022dc:	88fb      	ldrh	r3, [r7, #6]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e075      	b.n	80023d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_UART_Transmit+0x3e>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e06e      	b.n	80023d2 <HAL_UART_Transmit+0x11c>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2221      	movs	r2, #33	; 0x21
 8002306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800230a:	f7fe fda3 	bl	8000e54 <HAL_GetTick>
 800230e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	88fa      	ldrh	r2, [r7, #6]
 8002314:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	88fa      	ldrh	r2, [r7, #6]
 800231a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002324:	d108      	bne.n	8002338 <HAL_UART_Transmit+0x82>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d104      	bne.n	8002338 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	61bb      	str	r3, [r7, #24]
 8002336:	e003      	b.n	8002340 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800233c:	2300      	movs	r3, #0
 800233e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002348:	e02a      	b.n	80023a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2200      	movs	r2, #0
 8002352:	2180      	movs	r1, #128	; 0x80
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 f840 	bl	80023da <UART_WaitOnFlagUntilTimeout>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e036      	b.n	80023d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10b      	bne.n	8002382 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002378:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	3302      	adds	r3, #2
 800237e:	61bb      	str	r3, [r7, #24]
 8002380:	e007      	b.n	8002392 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	781a      	ldrb	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	3301      	adds	r3, #1
 8002390:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002396:	b29b      	uxth	r3, r3
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1cf      	bne.n	800234a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2200      	movs	r2, #0
 80023b2:	2140      	movs	r1, #64	; 0x40
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 f810 	bl	80023da <UART_WaitOnFlagUntilTimeout>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e006      	b.n	80023d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2220      	movs	r2, #32
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	e000      	b.n	80023d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80023d0:	2302      	movs	r3, #2
  }
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3720      	adds	r7, #32
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b090      	sub	sp, #64	; 0x40
 80023de:	af00      	add	r7, sp, #0
 80023e0:	60f8      	str	r0, [r7, #12]
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	603b      	str	r3, [r7, #0]
 80023e6:	4613      	mov	r3, r2
 80023e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023ea:	e050      	b.n	800248e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f2:	d04c      	beq.n	800248e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d007      	beq.n	800240a <UART_WaitOnFlagUntilTimeout+0x30>
 80023fa:	f7fe fd2b 	bl	8000e54 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002406:	429a      	cmp	r2, r3
 8002408:	d241      	bcs.n	800248e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	330c      	adds	r3, #12
 8002410:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002414:	e853 3f00 	ldrex	r3, [r3]
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002420:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	330c      	adds	r3, #12
 8002428:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800242a:	637a      	str	r2, [r7, #52]	; 0x34
 800242c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800242e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002430:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002432:	e841 2300 	strex	r3, r2, [r1]
 8002436:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1e5      	bne.n	800240a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	3314      	adds	r3, #20
 8002444:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	e853 3f00 	ldrex	r3, [r3]
 800244c:	613b      	str	r3, [r7, #16]
   return(result);
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	f023 0301 	bic.w	r3, r3, #1
 8002454:	63bb      	str	r3, [r7, #56]	; 0x38
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	3314      	adds	r3, #20
 800245c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800245e:	623a      	str	r2, [r7, #32]
 8002460:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002462:	69f9      	ldr	r1, [r7, #28]
 8002464:	6a3a      	ldr	r2, [r7, #32]
 8002466:	e841 2300 	strex	r3, r2, [r1]
 800246a:	61bb      	str	r3, [r7, #24]
   return(result);
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1e5      	bne.n	800243e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2220      	movs	r2, #32
 8002476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2220      	movs	r2, #32
 800247e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e00f      	b.n	80024ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	4013      	ands	r3, r2
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	429a      	cmp	r2, r3
 800249c:	bf0c      	ite	eq
 800249e:	2301      	moveq	r3, #1
 80024a0:	2300      	movne	r3, #0
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	461a      	mov	r2, r3
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d09f      	beq.n	80023ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3740      	adds	r7, #64	; 0x40
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024bc:	b0c0      	sub	sp, #256	; 0x100
 80024be:	af00      	add	r7, sp, #0
 80024c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80024d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024d4:	68d9      	ldr	r1, [r3, #12]
 80024d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	ea40 0301 	orr.w	r3, r0, r1
 80024e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	431a      	orrs	r2, r3
 80024f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	431a      	orrs	r2, r3
 80024f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	4313      	orrs	r3, r2
 8002500:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002510:	f021 010c 	bic.w	r1, r1, #12
 8002514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800251e:	430b      	orrs	r3, r1
 8002520:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800252e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002532:	6999      	ldr	r1, [r3, #24]
 8002534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	ea40 0301 	orr.w	r3, r0, r1
 800253e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	4b8f      	ldr	r3, [pc, #572]	; (8002784 <UART_SetConfig+0x2cc>)
 8002548:	429a      	cmp	r2, r3
 800254a:	d005      	beq.n	8002558 <UART_SetConfig+0xa0>
 800254c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	4b8d      	ldr	r3, [pc, #564]	; (8002788 <UART_SetConfig+0x2d0>)
 8002554:	429a      	cmp	r2, r3
 8002556:	d104      	bne.n	8002562 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002558:	f7ff fb9a 	bl	8001c90 <HAL_RCC_GetPCLK2Freq>
 800255c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002560:	e003      	b.n	800256a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002562:	f7ff fb81 	bl	8001c68 <HAL_RCC_GetPCLK1Freq>
 8002566:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800256a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002574:	f040 810c 	bne.w	8002790 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002578:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800257c:	2200      	movs	r2, #0
 800257e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002582:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002586:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800258a:	4622      	mov	r2, r4
 800258c:	462b      	mov	r3, r5
 800258e:	1891      	adds	r1, r2, r2
 8002590:	65b9      	str	r1, [r7, #88]	; 0x58
 8002592:	415b      	adcs	r3, r3
 8002594:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002596:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800259a:	4621      	mov	r1, r4
 800259c:	eb12 0801 	adds.w	r8, r2, r1
 80025a0:	4629      	mov	r1, r5
 80025a2:	eb43 0901 	adc.w	r9, r3, r1
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025ba:	4690      	mov	r8, r2
 80025bc:	4699      	mov	r9, r3
 80025be:	4623      	mov	r3, r4
 80025c0:	eb18 0303 	adds.w	r3, r8, r3
 80025c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80025c8:	462b      	mov	r3, r5
 80025ca:	eb49 0303 	adc.w	r3, r9, r3
 80025ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80025d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80025de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80025e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80025e6:	460b      	mov	r3, r1
 80025e8:	18db      	adds	r3, r3, r3
 80025ea:	653b      	str	r3, [r7, #80]	; 0x50
 80025ec:	4613      	mov	r3, r2
 80025ee:	eb42 0303 	adc.w	r3, r2, r3
 80025f2:	657b      	str	r3, [r7, #84]	; 0x54
 80025f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80025f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80025fc:	f7fd fe90 	bl	8000320 <__aeabi_uldivmod>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4b61      	ldr	r3, [pc, #388]	; (800278c <UART_SetConfig+0x2d4>)
 8002606:	fba3 2302 	umull	r2, r3, r3, r2
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	011c      	lsls	r4, r3, #4
 800260e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002612:	2200      	movs	r2, #0
 8002614:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002618:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800261c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002620:	4642      	mov	r2, r8
 8002622:	464b      	mov	r3, r9
 8002624:	1891      	adds	r1, r2, r2
 8002626:	64b9      	str	r1, [r7, #72]	; 0x48
 8002628:	415b      	adcs	r3, r3
 800262a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800262c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002630:	4641      	mov	r1, r8
 8002632:	eb12 0a01 	adds.w	sl, r2, r1
 8002636:	4649      	mov	r1, r9
 8002638:	eb43 0b01 	adc.w	fp, r3, r1
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002648:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800264c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002650:	4692      	mov	sl, r2
 8002652:	469b      	mov	fp, r3
 8002654:	4643      	mov	r3, r8
 8002656:	eb1a 0303 	adds.w	r3, sl, r3
 800265a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800265e:	464b      	mov	r3, r9
 8002660:	eb4b 0303 	adc.w	r3, fp, r3
 8002664:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002674:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002678:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800267c:	460b      	mov	r3, r1
 800267e:	18db      	adds	r3, r3, r3
 8002680:	643b      	str	r3, [r7, #64]	; 0x40
 8002682:	4613      	mov	r3, r2
 8002684:	eb42 0303 	adc.w	r3, r2, r3
 8002688:	647b      	str	r3, [r7, #68]	; 0x44
 800268a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800268e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002692:	f7fd fe45 	bl	8000320 <__aeabi_uldivmod>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4611      	mov	r1, r2
 800269c:	4b3b      	ldr	r3, [pc, #236]	; (800278c <UART_SetConfig+0x2d4>)
 800269e:	fba3 2301 	umull	r2, r3, r3, r1
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	2264      	movs	r2, #100	; 0x64
 80026a6:	fb02 f303 	mul.w	r3, r2, r3
 80026aa:	1acb      	subs	r3, r1, r3
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80026b2:	4b36      	ldr	r3, [pc, #216]	; (800278c <UART_SetConfig+0x2d4>)
 80026b4:	fba3 2302 	umull	r2, r3, r3, r2
 80026b8:	095b      	lsrs	r3, r3, #5
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026c0:	441c      	add	r4, r3
 80026c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026c6:	2200      	movs	r2, #0
 80026c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80026d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80026d4:	4642      	mov	r2, r8
 80026d6:	464b      	mov	r3, r9
 80026d8:	1891      	adds	r1, r2, r2
 80026da:	63b9      	str	r1, [r7, #56]	; 0x38
 80026dc:	415b      	adcs	r3, r3
 80026de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80026e4:	4641      	mov	r1, r8
 80026e6:	1851      	adds	r1, r2, r1
 80026e8:	6339      	str	r1, [r7, #48]	; 0x30
 80026ea:	4649      	mov	r1, r9
 80026ec:	414b      	adcs	r3, r1
 80026ee:	637b      	str	r3, [r7, #52]	; 0x34
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80026fc:	4659      	mov	r1, fp
 80026fe:	00cb      	lsls	r3, r1, #3
 8002700:	4651      	mov	r1, sl
 8002702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002706:	4651      	mov	r1, sl
 8002708:	00ca      	lsls	r2, r1, #3
 800270a:	4610      	mov	r0, r2
 800270c:	4619      	mov	r1, r3
 800270e:	4603      	mov	r3, r0
 8002710:	4642      	mov	r2, r8
 8002712:	189b      	adds	r3, r3, r2
 8002714:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002718:	464b      	mov	r3, r9
 800271a:	460a      	mov	r2, r1
 800271c:	eb42 0303 	adc.w	r3, r2, r3
 8002720:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002730:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002734:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002738:	460b      	mov	r3, r1
 800273a:	18db      	adds	r3, r3, r3
 800273c:	62bb      	str	r3, [r7, #40]	; 0x28
 800273e:	4613      	mov	r3, r2
 8002740:	eb42 0303 	adc.w	r3, r2, r3
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002746:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800274a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800274e:	f7fd fde7 	bl	8000320 <__aeabi_uldivmod>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4b0d      	ldr	r3, [pc, #52]	; (800278c <UART_SetConfig+0x2d4>)
 8002758:	fba3 1302 	umull	r1, r3, r3, r2
 800275c:	095b      	lsrs	r3, r3, #5
 800275e:	2164      	movs	r1, #100	; 0x64
 8002760:	fb01 f303 	mul.w	r3, r1, r3
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	3332      	adds	r3, #50	; 0x32
 800276a:	4a08      	ldr	r2, [pc, #32]	; (800278c <UART_SetConfig+0x2d4>)
 800276c:	fba2 2303 	umull	r2, r3, r2, r3
 8002770:	095b      	lsrs	r3, r3, #5
 8002772:	f003 0207 	and.w	r2, r3, #7
 8002776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4422      	add	r2, r4
 800277e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002780:	e105      	b.n	800298e <UART_SetConfig+0x4d6>
 8002782:	bf00      	nop
 8002784:	40011000 	.word	0x40011000
 8002788:	40011400 	.word	0x40011400
 800278c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002794:	2200      	movs	r2, #0
 8002796:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800279a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800279e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80027a2:	4642      	mov	r2, r8
 80027a4:	464b      	mov	r3, r9
 80027a6:	1891      	adds	r1, r2, r2
 80027a8:	6239      	str	r1, [r7, #32]
 80027aa:	415b      	adcs	r3, r3
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
 80027ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027b2:	4641      	mov	r1, r8
 80027b4:	1854      	adds	r4, r2, r1
 80027b6:	4649      	mov	r1, r9
 80027b8:	eb43 0501 	adc.w	r5, r3, r1
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	00eb      	lsls	r3, r5, #3
 80027c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027ca:	00e2      	lsls	r2, r4, #3
 80027cc:	4614      	mov	r4, r2
 80027ce:	461d      	mov	r5, r3
 80027d0:	4643      	mov	r3, r8
 80027d2:	18e3      	adds	r3, r4, r3
 80027d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80027d8:	464b      	mov	r3, r9
 80027da:	eb45 0303 	adc.w	r3, r5, r3
 80027de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80027e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80027ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80027fe:	4629      	mov	r1, r5
 8002800:	008b      	lsls	r3, r1, #2
 8002802:	4621      	mov	r1, r4
 8002804:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002808:	4621      	mov	r1, r4
 800280a:	008a      	lsls	r2, r1, #2
 800280c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002810:	f7fd fd86 	bl	8000320 <__aeabi_uldivmod>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4b60      	ldr	r3, [pc, #384]	; (800299c <UART_SetConfig+0x4e4>)
 800281a:	fba3 2302 	umull	r2, r3, r3, r2
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	011c      	lsls	r4, r3, #4
 8002822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002826:	2200      	movs	r2, #0
 8002828:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800282c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002830:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002834:	4642      	mov	r2, r8
 8002836:	464b      	mov	r3, r9
 8002838:	1891      	adds	r1, r2, r2
 800283a:	61b9      	str	r1, [r7, #24]
 800283c:	415b      	adcs	r3, r3
 800283e:	61fb      	str	r3, [r7, #28]
 8002840:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002844:	4641      	mov	r1, r8
 8002846:	1851      	adds	r1, r2, r1
 8002848:	6139      	str	r1, [r7, #16]
 800284a:	4649      	mov	r1, r9
 800284c:	414b      	adcs	r3, r1
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800285c:	4659      	mov	r1, fp
 800285e:	00cb      	lsls	r3, r1, #3
 8002860:	4651      	mov	r1, sl
 8002862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002866:	4651      	mov	r1, sl
 8002868:	00ca      	lsls	r2, r1, #3
 800286a:	4610      	mov	r0, r2
 800286c:	4619      	mov	r1, r3
 800286e:	4603      	mov	r3, r0
 8002870:	4642      	mov	r2, r8
 8002872:	189b      	adds	r3, r3, r2
 8002874:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002878:	464b      	mov	r3, r9
 800287a:	460a      	mov	r2, r1
 800287c:	eb42 0303 	adc.w	r3, r2, r3
 8002880:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	67bb      	str	r3, [r7, #120]	; 0x78
 800288e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	f04f 0300 	mov.w	r3, #0
 8002898:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800289c:	4649      	mov	r1, r9
 800289e:	008b      	lsls	r3, r1, #2
 80028a0:	4641      	mov	r1, r8
 80028a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028a6:	4641      	mov	r1, r8
 80028a8:	008a      	lsls	r2, r1, #2
 80028aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80028ae:	f7fd fd37 	bl	8000320 <__aeabi_uldivmod>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4b39      	ldr	r3, [pc, #228]	; (800299c <UART_SetConfig+0x4e4>)
 80028b8:	fba3 1302 	umull	r1, r3, r3, r2
 80028bc:	095b      	lsrs	r3, r3, #5
 80028be:	2164      	movs	r1, #100	; 0x64
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	3332      	adds	r3, #50	; 0x32
 80028ca:	4a34      	ldr	r2, [pc, #208]	; (800299c <UART_SetConfig+0x4e4>)
 80028cc:	fba2 2303 	umull	r2, r3, r2, r3
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028d6:	441c      	add	r4, r3
 80028d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028dc:	2200      	movs	r2, #0
 80028de:	673b      	str	r3, [r7, #112]	; 0x70
 80028e0:	677a      	str	r2, [r7, #116]	; 0x74
 80028e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80028e6:	4642      	mov	r2, r8
 80028e8:	464b      	mov	r3, r9
 80028ea:	1891      	adds	r1, r2, r2
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	415b      	adcs	r3, r3
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028f6:	4641      	mov	r1, r8
 80028f8:	1851      	adds	r1, r2, r1
 80028fa:	6039      	str	r1, [r7, #0]
 80028fc:	4649      	mov	r1, r9
 80028fe:	414b      	adcs	r3, r1
 8002900:	607b      	str	r3, [r7, #4]
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800290e:	4659      	mov	r1, fp
 8002910:	00cb      	lsls	r3, r1, #3
 8002912:	4651      	mov	r1, sl
 8002914:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002918:	4651      	mov	r1, sl
 800291a:	00ca      	lsls	r2, r1, #3
 800291c:	4610      	mov	r0, r2
 800291e:	4619      	mov	r1, r3
 8002920:	4603      	mov	r3, r0
 8002922:	4642      	mov	r2, r8
 8002924:	189b      	adds	r3, r3, r2
 8002926:	66bb      	str	r3, [r7, #104]	; 0x68
 8002928:	464b      	mov	r3, r9
 800292a:	460a      	mov	r2, r1
 800292c:	eb42 0303 	adc.w	r3, r2, r3
 8002930:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	663b      	str	r3, [r7, #96]	; 0x60
 800293c:	667a      	str	r2, [r7, #100]	; 0x64
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800294a:	4649      	mov	r1, r9
 800294c:	008b      	lsls	r3, r1, #2
 800294e:	4641      	mov	r1, r8
 8002950:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002954:	4641      	mov	r1, r8
 8002956:	008a      	lsls	r2, r1, #2
 8002958:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800295c:	f7fd fce0 	bl	8000320 <__aeabi_uldivmod>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4b0d      	ldr	r3, [pc, #52]	; (800299c <UART_SetConfig+0x4e4>)
 8002966:	fba3 1302 	umull	r1, r3, r3, r2
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	2164      	movs	r1, #100	; 0x64
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	3332      	adds	r3, #50	; 0x32
 8002978:	4a08      	ldr	r2, [pc, #32]	; (800299c <UART_SetConfig+0x4e4>)
 800297a:	fba2 2303 	umull	r2, r3, r2, r3
 800297e:	095b      	lsrs	r3, r3, #5
 8002980:	f003 020f 	and.w	r2, r3, #15
 8002984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4422      	add	r2, r4
 800298c:	609a      	str	r2, [r3, #8]
}
 800298e:	bf00      	nop
 8002990:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002994:	46bd      	mov	sp, r7
 8002996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800299a:	bf00      	nop
 800299c:	51eb851f 	.word	0x51eb851f

080029a0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f103 0208 	add.w	r2, r3, #8
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f04f 32ff 	mov.w	r2, #4294967295
 80029b8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f103 0208 	add.w	r2, r3, #8
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f103 0208 	add.w	r2, r3, #8
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80029fa:	b480      	push	{r7}
 80029fc:	b085      	sub	sp, #20
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	601a      	str	r2, [r3, #0]
}
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002a42:	b480      	push	{r7}
 8002a44:	b085      	sub	sp, #20
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d103      	bne.n	8002a62 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	e00c      	b.n	8002a7c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3308      	adds	r3, #8
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	e002      	b.n	8002a70 <vListInsert+0x2e>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d2f6      	bcs.n	8002a6a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	601a      	str	r2, [r3, #0]
}
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6892      	ldr	r2, [r2, #8]
 8002aca:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6852      	ldr	r2, [r2, #4]
 8002ad4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d103      	bne.n	8002ae8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	1e5a      	subs	r2, r3, #1
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002b12:	2301      	movs	r3, #1
 8002b14:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10a      	bne.n	8002b36 <xQueueGenericReset+0x2e>
        __asm volatile
 8002b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b24:	f383 8811 	msr	BASEPRI, r3
 8002b28:	f3bf 8f6f 	isb	sy
 8002b2c:	f3bf 8f4f 	dsb	sy
 8002b30:	60fb      	str	r3, [r7, #12]
    }
 8002b32:	bf00      	nop
 8002b34:	e7fe      	b.n	8002b34 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d05d      	beq.n	8002bf8 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d059      	beq.n	8002bf8 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d000      	beq.n	8002b58 <xQueueGenericReset+0x50>
 8002b56:	2101      	movs	r1, #1
 8002b58:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d14c      	bne.n	8002bf8 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002b5e:	f002 f913 	bl	8004d88 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6a:	6939      	ldr	r1, [r7, #16]
 8002b6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	441a      	add	r2, r3
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	6939      	ldr	r1, [r7, #16]
 8002b92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b94:	fb01 f303 	mul.w	r3, r1, r3
 8002b98:	441a      	add	r2, r3
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	22ff      	movs	r2, #255	; 0xff
 8002ba2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	22ff      	movs	r2, #255	; 0xff
 8002baa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d114      	bne.n	8002bde <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d01a      	beq.n	8002bf2 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	3310      	adds	r3, #16
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f001 f8c1 	bl	8003d48 <xTaskRemoveFromEventList>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d012      	beq.n	8002bf2 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002bcc:	4b15      	ldr	r3, [pc, #84]	; (8002c24 <xQueueGenericReset+0x11c>)
 8002bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	f3bf 8f4f 	dsb	sy
 8002bd8:	f3bf 8f6f 	isb	sy
 8002bdc:	e009      	b.n	8002bf2 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	3310      	adds	r3, #16
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fedc 	bl	80029a0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	3324      	adds	r3, #36	; 0x24
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fed7 	bl	80029a0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002bf2:	f002 f8f9 	bl	8004de8 <vPortExitCritical>
 8002bf6:	e001      	b.n	8002bfc <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10a      	bne.n	8002c18 <xQueueGenericReset+0x110>
        __asm volatile
 8002c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c06:	f383 8811 	msr	BASEPRI, r3
 8002c0a:	f3bf 8f6f 	isb	sy
 8002c0e:	f3bf 8f4f 	dsb	sy
 8002c12:	60bb      	str	r3, [r7, #8]
    }
 8002c14:	bf00      	nop
 8002c16:	e7fe      	b.n	8002c16 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002c18:	697b      	ldr	r3, [r7, #20]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	e000ed04 	.word	0xe000ed04

08002c28 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b08a      	sub	sp, #40	; 0x28
 8002c2c:	af02      	add	r7, sp, #8
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	4613      	mov	r3, r2
 8002c34:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d02e      	beq.n	8002c9e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002c40:	2100      	movs	r1, #0
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	fba3 2302 	umull	r2, r3, r3, r2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d000      	beq.n	8002c50 <xQueueGenericCreate+0x28>
 8002c4e:	2101      	movs	r1, #1
 8002c50:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d123      	bne.n	8002c9e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002c5e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002c62:	d81c      	bhi.n	8002c9e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	fb02 f303 	mul.w	r3, r2, r3
 8002c6c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	3350      	adds	r3, #80	; 0x50
 8002c72:	4618      	mov	r0, r3
 8002c74:	f002 f9f0 	bl	8005058 <pvPortMalloc>
 8002c78:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d01c      	beq.n	8002cba <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	3350      	adds	r3, #80	; 0x50
 8002c88:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c8a:	79fa      	ldrb	r2, [r7, #7]
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	4613      	mov	r3, r2
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	68b9      	ldr	r1, [r7, #8]
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 f814 	bl	8002cc4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002c9c:	e00d      	b.n	8002cba <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10a      	bne.n	8002cba <xQueueGenericCreate+0x92>
        __asm volatile
 8002ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca8:	f383 8811 	msr	BASEPRI, r3
 8002cac:	f3bf 8f6f 	isb	sy
 8002cb0:	f3bf 8f4f 	dsb	sy
 8002cb4:	613b      	str	r3, [r7, #16]
    }
 8002cb6:	bf00      	nop
 8002cb8:	e7fe      	b.n	8002cb8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002cba:	69fb      	ldr	r3, [r7, #28]
    }
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3720      	adds	r7, #32
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
 8002cd0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d103      	bne.n	8002ce0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	e002      	b.n	8002ce6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	69b8      	ldr	r0, [r7, #24]
 8002cf6:	f7ff ff07 	bl	8002b08 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	78fa      	ldrb	r2, [r7, #3]
 8002cfe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002d02:	78fb      	ldrb	r3, [r7, #3]
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	68f9      	ldr	r1, [r7, #12]
 8002d08:	2073      	movs	r0, #115	; 0x73
 8002d0a:	f003 faab 	bl	8006264 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002d0e:	bf00      	nop
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002d18:	b590      	push	{r4, r7, lr}
 8002d1a:	b08f      	sub	sp, #60	; 0x3c
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002d24:	2300      	movs	r3, #0
 8002d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10a      	bne.n	8002d48 <xQueueReceive+0x30>
        __asm volatile
 8002d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d36:	f383 8811 	msr	BASEPRI, r3
 8002d3a:	f3bf 8f6f 	isb	sy
 8002d3e:	f3bf 8f4f 	dsb	sy
 8002d42:	623b      	str	r3, [r7, #32]
    }
 8002d44:	bf00      	nop
 8002d46:	e7fe      	b.n	8002d46 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d103      	bne.n	8002d56 <xQueueReceive+0x3e>
 8002d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <xQueueReceive+0x42>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <xQueueReceive+0x44>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10a      	bne.n	8002d76 <xQueueReceive+0x5e>
        __asm volatile
 8002d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d64:	f383 8811 	msr	BASEPRI, r3
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	61fb      	str	r3, [r7, #28]
    }
 8002d72:	bf00      	nop
 8002d74:	e7fe      	b.n	8002d74 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d76:	f001 f9fb 	bl	8004170 <xTaskGetSchedulerState>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d102      	bne.n	8002d86 <xQueueReceive+0x6e>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <xQueueReceive+0x72>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <xQueueReceive+0x74>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <xQueueReceive+0x8e>
        __asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	61bb      	str	r3, [r7, #24]
    }
 8002da2:	bf00      	nop
 8002da4:	e7fe      	b.n	8002da4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002da6:	f001 ffef 	bl	8004d88 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d02f      	beq.n	8002e16 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002db6:	68b9      	ldr	r1, [r7, #8]
 8002db8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dba:	f000 f8bd 	bl	8002f38 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f003 ff01 	bl	8006bc8 <SEGGER_SYSVIEW_ShrinkId>
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	2000      	movs	r0, #0
 8002dca:	f003 fefd 	bl	8006bc8 <SEGGER_SYSVIEW_ShrinkId>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	9100      	str	r1, [sp, #0]
 8002dd6:	4621      	mov	r1, r4
 8002dd8:	205c      	movs	r0, #92	; 0x5c
 8002dda:	f003 fab9 	bl	8006350 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	1e5a      	subs	r2, r3, #1
 8002de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00f      	beq.n	8002e0e <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df0:	3310      	adds	r3, #16
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 ffa8 	bl	8003d48 <xTaskRemoveFromEventList>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d007      	beq.n	8002e0e <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002dfe:	4b4d      	ldr	r3, [pc, #308]	; (8002f34 <xQueueReceive+0x21c>)
 8002e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	f3bf 8f4f 	dsb	sy
 8002e0a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002e0e:	f001 ffeb 	bl	8004de8 <vPortExitCritical>
                return pdPASS;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e08a      	b.n	8002f2c <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d113      	bne.n	8002e44 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002e1c:	f001 ffe4 	bl	8004de8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e22:	4618      	mov	r0, r3
 8002e24:	f003 fed0 	bl	8006bc8 <SEGGER_SYSVIEW_ShrinkId>
 8002e28:	4604      	mov	r4, r0
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	f003 fecc 	bl	8006bc8 <SEGGER_SYSVIEW_ShrinkId>
 8002e30:	4602      	mov	r2, r0
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2101      	movs	r1, #1
 8002e36:	9100      	str	r1, [sp, #0]
 8002e38:	4621      	mov	r1, r4
 8002e3a:	205c      	movs	r0, #92	; 0x5c
 8002e3c:	f003 fa88 	bl	8006350 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002e40:	2300      	movs	r3, #0
 8002e42:	e073      	b.n	8002f2c <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d106      	bne.n	8002e58 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002e4a:	f107 0310 	add.w	r3, r7, #16
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f001 f852 	bl	8003ef8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002e54:	2301      	movs	r3, #1
 8002e56:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002e58:	f001 ffc6 	bl	8004de8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002e5c:	f000 fc54 	bl	8003708 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002e60:	f001 ff92 	bl	8004d88 <vPortEnterCritical>
 8002e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e6a:	b25b      	sxtb	r3, r3
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e70:	d103      	bne.n	8002e7a <xQueueReceive+0x162>
 8002e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e80:	b25b      	sxtb	r3, r3
 8002e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e86:	d103      	bne.n	8002e90 <xQueueReceive+0x178>
 8002e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e90:	f001 ffaa 	bl	8004de8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e94:	1d3a      	adds	r2, r7, #4
 8002e96:	f107 0310 	add.w	r3, r7, #16
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f001 f841 	bl	8003f24 <xTaskCheckForTimeOut>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d124      	bne.n	8002ef2 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eaa:	f000 f8bd 	bl	8003028 <prvIsQueueEmpty>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d018      	beq.n	8002ee6 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb6:	3324      	adds	r3, #36	; 0x24
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 fed7 	bl	8003c70 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002ec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ec4:	f000 f85e 	bl	8002f84 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002ec8:	f000 fc2c 	bl	8003724 <xTaskResumeAll>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f47f af69 	bne.w	8002da6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002ed4:	4b17      	ldr	r3, [pc, #92]	; (8002f34 <xQueueReceive+0x21c>)
 8002ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	f3bf 8f6f 	isb	sy
 8002ee4:	e75f      	b.n	8002da6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002ee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ee8:	f000 f84c 	bl	8002f84 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002eec:	f000 fc1a 	bl	8003724 <xTaskResumeAll>
 8002ef0:	e759      	b.n	8002da6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ef4:	f000 f846 	bl	8002f84 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002ef8:	f000 fc14 	bl	8003724 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002efe:	f000 f893 	bl	8003028 <prvIsQueueEmpty>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f43f af4e 	beq.w	8002da6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f003 fe5b 	bl	8006bc8 <SEGGER_SYSVIEW_ShrinkId>
 8002f12:	4604      	mov	r4, r0
 8002f14:	2000      	movs	r0, #0
 8002f16:	f003 fe57 	bl	8006bc8 <SEGGER_SYSVIEW_ShrinkId>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2101      	movs	r1, #1
 8002f20:	9100      	str	r1, [sp, #0]
 8002f22:	4621      	mov	r1, r4
 8002f24:	205c      	movs	r0, #92	; 0x5c
 8002f26:	f003 fa13 	bl	8006350 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002f2a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3734      	adds	r7, #52	; 0x34
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd90      	pop	{r4, r7, pc}
 8002f34:	e000ed04 	.word	0xe000ed04

08002f38 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d018      	beq.n	8002f7c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	441a      	add	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d303      	bcc.n	8002f6c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68d9      	ldr	r1, [r3, #12]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	461a      	mov	r2, r3
 8002f76:	6838      	ldr	r0, [r7, #0]
 8002f78:	f003 ffac 	bl	8006ed4 <memcpy>
    }
}
 8002f7c:	bf00      	nop
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002f8c:	f001 fefc 	bl	8004d88 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f96:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f98:	e011      	b.n	8002fbe <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d012      	beq.n	8002fc8 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3324      	adds	r3, #36	; 0x24
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fece 	bl	8003d48 <xTaskRemoveFromEventList>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002fb2:	f001 f81d 	bl	8003ff0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	dce9      	bgt.n	8002f9a <prvUnlockQueue+0x16>
 8002fc6:	e000      	b.n	8002fca <prvUnlockQueue+0x46>
                    break;
 8002fc8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	22ff      	movs	r2, #255	; 0xff
 8002fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002fd2:	f001 ff09 	bl	8004de8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002fd6:	f001 fed7 	bl	8004d88 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fe0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fe2:	e011      	b.n	8003008 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d012      	beq.n	8003012 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3310      	adds	r3, #16
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 fea9 	bl	8003d48 <xTaskRemoveFromEventList>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002ffc:	f000 fff8 	bl	8003ff0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003000:	7bbb      	ldrb	r3, [r7, #14]
 8003002:	3b01      	subs	r3, #1
 8003004:	b2db      	uxtb	r3, r3
 8003006:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003008:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800300c:	2b00      	cmp	r3, #0
 800300e:	dce9      	bgt.n	8002fe4 <prvUnlockQueue+0x60>
 8003010:	e000      	b.n	8003014 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003012:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	22ff      	movs	r2, #255	; 0xff
 8003018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800301c:	f001 fee4 	bl	8004de8 <vPortExitCritical>
}
 8003020:	bf00      	nop
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003030:	f001 feaa 	bl	8004d88 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003038:	2b00      	cmp	r3, #0
 800303a:	d102      	bne.n	8003042 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800303c:	2301      	movs	r3, #1
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	e001      	b.n	8003046 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003046:	f001 fecf 	bl	8004de8 <vPortExitCritical>

    return xReturn;
 800304a:	68fb      	ldr	r3, [r7, #12]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800305e:	2300      	movs	r3, #0
 8003060:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10a      	bne.n	800307e <vQueueAddToRegistry+0x2a>
        __asm volatile
 8003068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306c:	f383 8811 	msr	BASEPRI, r3
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	60fb      	str	r3, [r7, #12]
    }
 800307a:	bf00      	nop
 800307c:	e7fe      	b.n	800307c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d024      	beq.n	80030ce <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	e01e      	b.n	80030c8 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800308a:	4a1c      	ldr	r2, [pc, #112]	; (80030fc <vQueueAddToRegistry+0xa8>)
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	4413      	add	r3, r2
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	429a      	cmp	r2, r3
 8003098:	d105      	bne.n	80030a6 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	4a17      	ldr	r2, [pc, #92]	; (80030fc <vQueueAddToRegistry+0xa8>)
 80030a0:	4413      	add	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
                    break;
 80030a4:	e013      	b.n	80030ce <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10a      	bne.n	80030c2 <vQueueAddToRegistry+0x6e>
 80030ac:	4a13      	ldr	r2, [pc, #76]	; (80030fc <vQueueAddToRegistry+0xa8>)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d104      	bne.n	80030c2 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4a0f      	ldr	r2, [pc, #60]	; (80030fc <vQueueAddToRegistry+0xa8>)
 80030be:	4413      	add	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	3301      	adds	r3, #1
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	2b07      	cmp	r3, #7
 80030cc:	d9dd      	bls.n	800308a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00f      	beq.n	80030f4 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f003 fd70 	bl	8006bc8 <SEGGER_SYSVIEW_ShrinkId>
 80030e8:	4601      	mov	r1, r0
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	2071      	movs	r0, #113	; 0x71
 80030f0:	f003 f85e 	bl	80061b0 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80030f4:	bf00      	nop
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20000170 	.word	0x20000170

08003100 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003110:	f001 fe3a 	bl	8004d88 <vPortEnterCritical>
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800311a:	b25b      	sxtb	r3, r3
 800311c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003120:	d103      	bne.n	800312a <vQueueWaitForMessageRestricted+0x2a>
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003130:	b25b      	sxtb	r3, r3
 8003132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003136:	d103      	bne.n	8003140 <vQueueWaitForMessageRestricted+0x40>
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003140:	f001 fe52 	bl	8004de8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003148:	2b00      	cmp	r3, #0
 800314a:	d106      	bne.n	800315a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	3324      	adds	r3, #36	; 0x24
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	68b9      	ldr	r1, [r7, #8]
 8003154:	4618      	mov	r0, r3
 8003156:	f000 fdaf 	bl	8003cb8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800315a:	6978      	ldr	r0, [r7, #20]
 800315c:	f7ff ff12 	bl	8002f84 <prvUnlockQueue>
    }
 8003160:	bf00      	nop
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003168:	b580      	push	{r7, lr}
 800316a:	b08c      	sub	sp, #48	; 0x30
 800316c:	af04      	add	r7, sp, #16
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	4613      	mov	r3, r2
 8003176:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003178:	88fb      	ldrh	r3, [r7, #6]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4618      	mov	r0, r3
 800317e:	f001 ff6b 	bl	8005058 <pvPortMalloc>
 8003182:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d013      	beq.n	80031b2 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800318a:	2058      	movs	r0, #88	; 0x58
 800318c:	f001 ff64 	bl	8005058 <pvPortMalloc>
 8003190:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d008      	beq.n	80031aa <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003198:	2258      	movs	r2, #88	; 0x58
 800319a:	2100      	movs	r1, #0
 800319c:	69f8      	ldr	r0, [r7, #28]
 800319e:	f003 fea7 	bl	8006ef0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	631a      	str	r2, [r3, #48]	; 0x30
 80031a8:	e005      	b.n	80031b6 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80031aa:	6978      	ldr	r0, [r7, #20]
 80031ac:	f002 f80e 	bl	80051cc <vPortFree>
 80031b0:	e001      	b.n	80031b6 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d013      	beq.n	80031e4 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80031bc:	88fa      	ldrh	r2, [r7, #6]
 80031be:	2300      	movs	r3, #0
 80031c0:	9303      	str	r3, [sp, #12]
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	9302      	str	r3, [sp, #8]
 80031c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c8:	9301      	str	r3, [sp, #4]
 80031ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68b9      	ldr	r1, [r7, #8]
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 f80e 	bl	80031f4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80031d8:	69f8      	ldr	r0, [r7, #28]
 80031da:	f000 f899 	bl	8003310 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80031de:	2301      	movs	r3, #1
 80031e0:	61bb      	str	r3, [r7, #24]
 80031e2:	e002      	b.n	80031ea <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80031e4:	f04f 33ff 	mov.w	r3, #4294967295
 80031e8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80031ea:	69bb      	ldr	r3, [r7, #24]
    }
 80031ec:	4618      	mov	r0, r3
 80031ee:	3720      	adds	r7, #32
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b088      	sub	sp, #32
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003204:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	461a      	mov	r2, r3
 800320c:	21a5      	movs	r1, #165	; 0xa5
 800320e:	f003 fe6f 	bl	8006ef0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800321c:	3b01      	subs	r3, #1
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	f023 0307 	bic.w	r3, r3, #7
 800322a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00a      	beq.n	800324c <prvInitialiseNewTask+0x58>
        __asm volatile
 8003236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323a:	f383 8811 	msr	BASEPRI, r3
 800323e:	f3bf 8f6f 	isb	sy
 8003242:	f3bf 8f4f 	dsb	sy
 8003246:	617b      	str	r3, [r7, #20]
    }
 8003248:	bf00      	nop
 800324a:	e7fe      	b.n	800324a <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d01e      	beq.n	8003290 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
 8003256:	e012      	b.n	800327e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	4413      	add	r3, r2
 800325e:	7819      	ldrb	r1, [r3, #0]
 8003260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	4413      	add	r3, r2
 8003266:	3334      	adds	r3, #52	; 0x34
 8003268:	460a      	mov	r2, r1
 800326a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	4413      	add	r3, r2
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d006      	beq.n	8003286 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	3301      	adds	r3, #1
 800327c:	61fb      	str	r3, [r7, #28]
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	2b09      	cmp	r3, #9
 8003282:	d9e9      	bls.n	8003258 <prvInitialiseNewTask+0x64>
 8003284:	e000      	b.n	8003288 <prvInitialiseNewTask+0x94>
            {
                break;
 8003286:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003292:	2b04      	cmp	r3, #4
 8003294:	d90a      	bls.n	80032ac <prvInitialiseNewTask+0xb8>
        __asm volatile
 8003296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329a:	f383 8811 	msr	BASEPRI, r3
 800329e:	f3bf 8f6f 	isb	sy
 80032a2:	f3bf 8f4f 	dsb	sy
 80032a6:	613b      	str	r3, [r7, #16]
    }
 80032a8:	bf00      	nop
 80032aa:	e7fe      	b.n	80032aa <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80032ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d901      	bls.n	80032b6 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80032b2:	2304      	movs	r3, #4
 80032b4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80032b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032ba:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80032bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032c0:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80032c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c4:	3304      	adds	r3, #4
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff fb8a 	bl	80029e0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80032cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ce:	3318      	adds	r3, #24
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fb85 	bl	80029e0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80032d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032da:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032de:	f1c3 0205 	rsb	r2, r3, #5
 80032e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80032e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ea:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	68f9      	ldr	r1, [r7, #12]
 80032f0:	69b8      	ldr	r0, [r7, #24]
 80032f2:	f001 fc1b 	bl	8004b2c <pxPortInitialiseStack>
 80032f6:	4602      	mov	r2, r0
 80032f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fa:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80032fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003306:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003308:	bf00      	nop
 800330a:	3720      	adds	r7, #32
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003310:	b5b0      	push	{r4, r5, r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af02      	add	r7, sp, #8
 8003316:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003318:	f001 fd36 	bl	8004d88 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800331c:	4b4f      	ldr	r3, [pc, #316]	; (800345c <prvAddNewTaskToReadyList+0x14c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	3301      	adds	r3, #1
 8003322:	4a4e      	ldr	r2, [pc, #312]	; (800345c <prvAddNewTaskToReadyList+0x14c>)
 8003324:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003326:	4b4e      	ldr	r3, [pc, #312]	; (8003460 <prvAddNewTaskToReadyList+0x150>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800332e:	4a4c      	ldr	r2, [pc, #304]	; (8003460 <prvAddNewTaskToReadyList+0x150>)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003334:	4b49      	ldr	r3, [pc, #292]	; (800345c <prvAddNewTaskToReadyList+0x14c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d110      	bne.n	800335e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800333c:	f000 fe7e 	bl	800403c <prvInitialiseTaskLists>
 8003340:	e00d      	b.n	800335e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003342:	4b48      	ldr	r3, [pc, #288]	; (8003464 <prvAddNewTaskToReadyList+0x154>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d109      	bne.n	800335e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800334a:	4b45      	ldr	r3, [pc, #276]	; (8003460 <prvAddNewTaskToReadyList+0x150>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	429a      	cmp	r2, r3
 8003356:	d802      	bhi.n	800335e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003358:	4a41      	ldr	r2, [pc, #260]	; (8003460 <prvAddNewTaskToReadyList+0x150>)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800335e:	4b42      	ldr	r3, [pc, #264]	; (8003468 <prvAddNewTaskToReadyList+0x158>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	3301      	adds	r3, #1
 8003364:	4a40      	ldr	r2, [pc, #256]	; (8003468 <prvAddNewTaskToReadyList+0x158>)
 8003366:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003368:	4b3f      	ldr	r3, [pc, #252]	; (8003468 <prvAddNewTaskToReadyList+0x158>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d016      	beq.n	80033a4 <prvAddNewTaskToReadyList+0x94>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4618      	mov	r0, r3
 800337a:	f003 fb5f 	bl	8006a3c <SEGGER_SYSVIEW_OnTaskCreate>
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	461d      	mov	r5, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	461c      	mov	r4, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	1ae3      	subs	r3, r4, r3
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	462b      	mov	r3, r5
 80033a0:	f002 f8d6 	bl	8005550 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f003 fbcc 	bl	8006b44 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	2201      	movs	r2, #1
 80033b2:	409a      	lsls	r2, r3
 80033b4:	4b2d      	ldr	r3, [pc, #180]	; (800346c <prvAddNewTaskToReadyList+0x15c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	4a2c      	ldr	r2, [pc, #176]	; (800346c <prvAddNewTaskToReadyList+0x15c>)
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c2:	492b      	ldr	r1, [pc, #172]	; (8003470 <prvAddNewTaskToReadyList+0x160>)
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	3304      	adds	r3, #4
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	609a      	str	r2, [r3, #8]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	60da      	str	r2, [r3, #12]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	3204      	adds	r2, #4
 80033ea:	605a      	str	r2, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	1d1a      	adds	r2, r3, #4
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4a1b      	ldr	r2, [pc, #108]	; (8003470 <prvAddNewTaskToReadyList+0x160>)
 8003402:	441a      	add	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	615a      	str	r2, [r3, #20]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340c:	4918      	ldr	r1, [pc, #96]	; (8003470 <prvAddNewTaskToReadyList+0x160>)
 800340e:	4613      	mov	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	1c59      	adds	r1, r3, #1
 800341c:	4814      	ldr	r0, [pc, #80]	; (8003470 <prvAddNewTaskToReadyList+0x160>)
 800341e:	4613      	mov	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4403      	add	r3, r0
 8003428:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800342a:	f001 fcdd 	bl	8004de8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800342e:	4b0d      	ldr	r3, [pc, #52]	; (8003464 <prvAddNewTaskToReadyList+0x154>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00e      	beq.n	8003454 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003436:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <prvAddNewTaskToReadyList+0x150>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	429a      	cmp	r2, r3
 8003442:	d207      	bcs.n	8003454 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003444:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <prvAddNewTaskToReadyList+0x164>)
 8003446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003454:	bf00      	nop
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bdb0      	pop	{r4, r5, r7, pc}
 800345c:	20000288 	.word	0x20000288
 8003460:	200001b0 	.word	0x200001b0
 8003464:	20000294 	.word	0x20000294
 8003468:	200002a4 	.word	0x200002a4
 800346c:	20000290 	.word	0x20000290
 8003470:	200001b4 	.word	0x200001b4
 8003474:	e000ed04 	.word	0xe000ed04

08003478 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8003480:	f001 fc82 	bl	8004d88 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d102      	bne.n	8003490 <vTaskDelete+0x18>
 800348a:	4b48      	ldr	r3, [pc, #288]	; (80035ac <vTaskDelete+0x134>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	e000      	b.n	8003492 <vTaskDelete+0x1a>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	3304      	adds	r3, #4
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff fb0b 	bl	8002ab4 <uxListRemove>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d115      	bne.n	80034d0 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a8:	4941      	ldr	r1, [pc, #260]	; (80035b0 <vTaskDelete+0x138>)
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10a      	bne.n	80034d0 <vTaskDelete+0x58>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034be:	2201      	movs	r2, #1
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	43da      	mvns	r2, r3
 80034c6:	4b3b      	ldr	r3, [pc, #236]	; (80035b4 <vTaskDelete+0x13c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4013      	ands	r3, r2
 80034cc:	4a39      	ldr	r2, [pc, #228]	; (80035b4 <vTaskDelete+0x13c>)
 80034ce:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d004      	beq.n	80034e2 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	3318      	adds	r3, #24
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff fae9 	bl	8002ab4 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80034e2:	4b35      	ldr	r3, [pc, #212]	; (80035b8 <vTaskDelete+0x140>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	3301      	adds	r3, #1
 80034e8:	4a33      	ldr	r2, [pc, #204]	; (80035b8 <vTaskDelete+0x140>)
 80034ea:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 80034ec:	4b2f      	ldr	r3, [pc, #188]	; (80035ac <vTaskDelete+0x134>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d118      	bne.n	8003528 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	3304      	adds	r3, #4
 80034fa:	4619      	mov	r1, r3
 80034fc:	482f      	ldr	r0, [pc, #188]	; (80035bc <vTaskDelete+0x144>)
 80034fe:	f7ff fa7c 	bl	80029fa <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8003502:	4b2f      	ldr	r3, [pc, #188]	; (80035c0 <vTaskDelete+0x148>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	3301      	adds	r3, #1
 8003508:	4a2d      	ldr	r2, [pc, #180]	; (80035c0 <vTaskDelete+0x148>)
 800350a:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4618      	mov	r0, r3
 8003510:	f003 fb5a 	bl	8006bc8 <SEGGER_SYSVIEW_ShrinkId>
 8003514:	4603      	mov	r3, r0
 8003516:	4619      	mov	r1, r3
 8003518:	2022      	movs	r0, #34	; 0x22
 800351a:	f002 fe0d 	bl	8006138 <SEGGER_SYSVIEW_RecordU32>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4618      	mov	r0, r3
 8003522:	f002 f87d 	bl	8005620 <SYSVIEW_DeleteTask>
 8003526:	e013      	b.n	8003550 <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8003528:	4b26      	ldr	r3, [pc, #152]	; (80035c4 <vTaskDelete+0x14c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3b01      	subs	r3, #1
 800352e:	4a25      	ldr	r2, [pc, #148]	; (80035c4 <vTaskDelete+0x14c>)
 8003530:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4618      	mov	r0, r3
 8003536:	f003 fb47 	bl	8006bc8 <SEGGER_SYSVIEW_ShrinkId>
 800353a:	4603      	mov	r3, r0
 800353c:	4619      	mov	r1, r3
 800353e:	2022      	movs	r0, #34	; 0x22
 8003540:	f002 fdfa 	bl	8006138 <SEGGER_SYSVIEW_RecordU32>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4618      	mov	r0, r3
 8003548:	f002 f86a 	bl	8005620 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 800354c:	f000 fdf4 	bl	8004138 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8003550:	f001 fc4a 	bl	8004de8 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8003554:	4b15      	ldr	r3, [pc, #84]	; (80035ac <vTaskDelete+0x134>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	429a      	cmp	r2, r3
 800355c:	d002      	beq.n	8003564 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 fdda 	bl	8004118 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8003564:	4b18      	ldr	r3, [pc, #96]	; (80035c8 <vTaskDelete+0x150>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d01b      	beq.n	80035a4 <vTaskDelete+0x12c>
        {
            if( pxTCB == pxCurrentTCB )
 800356c:	4b0f      	ldr	r3, [pc, #60]	; (80035ac <vTaskDelete+0x134>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	429a      	cmp	r2, r3
 8003574:	d116      	bne.n	80035a4 <vTaskDelete+0x12c>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8003576:	4b15      	ldr	r3, [pc, #84]	; (80035cc <vTaskDelete+0x154>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <vTaskDelete+0x11c>
        __asm volatile
 800357e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003582:	f383 8811 	msr	BASEPRI, r3
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	60bb      	str	r3, [r7, #8]
    }
 8003590:	bf00      	nop
 8003592:	e7fe      	b.n	8003592 <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8003594:	4b0e      	ldr	r3, [pc, #56]	; (80035d0 <vTaskDelete+0x158>)
 8003596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80035a4:	bf00      	nop
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	200001b0 	.word	0x200001b0
 80035b0:	200001b4 	.word	0x200001b4
 80035b4:	20000290 	.word	0x20000290
 80035b8:	200002a4 	.word	0x200002a4
 80035bc:	2000025c 	.word	0x2000025c
 80035c0:	20000270 	.word	0x20000270
 80035c4:	20000288 	.word	0x20000288
 80035c8:	20000294 	.word	0x20000294
 80035cc:	200002b0 	.word	0x200002b0
 80035d0:	e000ed04 	.word	0xe000ed04

080035d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80035dc:	2300      	movs	r3, #0
 80035de:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d01b      	beq.n	800361e <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80035e6:	4b15      	ldr	r3, [pc, #84]	; (800363c <vTaskDelay+0x68>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <vTaskDelay+0x30>
        __asm volatile
 80035ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	60bb      	str	r3, [r7, #8]
    }
 8003600:	bf00      	nop
 8003602:	e7fe      	b.n	8003602 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003604:	f000 f880 	bl	8003708 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	2023      	movs	r0, #35	; 0x23
 800360c:	f002 fd94 	bl	8006138 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003610:	2100      	movs	r1, #0
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 ff86 	bl	8004524 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003618:	f000 f884 	bl	8003724 <xTaskResumeAll>
 800361c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d107      	bne.n	8003634 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8003624:	4b06      	ldr	r3, [pc, #24]	; (8003640 <vTaskDelay+0x6c>)
 8003626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003634:	bf00      	nop
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	200002b0 	.word	0x200002b0
 8003640:	e000ed04 	.word	0xe000ed04

08003644 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800364a:	4b27      	ldr	r3, [pc, #156]	; (80036e8 <vTaskStartScheduler+0xa4>)
 800364c:	9301      	str	r3, [sp, #4]
 800364e:	2300      	movs	r3, #0
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	2300      	movs	r3, #0
 8003654:	2282      	movs	r2, #130	; 0x82
 8003656:	4925      	ldr	r1, [pc, #148]	; (80036ec <vTaskStartScheduler+0xa8>)
 8003658:	4825      	ldr	r0, [pc, #148]	; (80036f0 <vTaskStartScheduler+0xac>)
 800365a:	f7ff fd85 	bl	8003168 <xTaskCreate>
 800365e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d102      	bne.n	800366c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8003666:	f000 ffdd 	bl	8004624 <xTimerCreateTimerTask>
 800366a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d124      	bne.n	80036bc <vTaskStartScheduler+0x78>
        __asm volatile
 8003672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003676:	f383 8811 	msr	BASEPRI, r3
 800367a:	f3bf 8f6f 	isb	sy
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	60bb      	str	r3, [r7, #8]
    }
 8003684:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003686:	4b1b      	ldr	r3, [pc, #108]	; (80036f4 <vTaskStartScheduler+0xb0>)
 8003688:	f04f 32ff 	mov.w	r2, #4294967295
 800368c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800368e:	4b1a      	ldr	r3, [pc, #104]	; (80036f8 <vTaskStartScheduler+0xb4>)
 8003690:	2201      	movs	r2, #1
 8003692:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003694:	4b19      	ldr	r3, [pc, #100]	; (80036fc <vTaskStartScheduler+0xb8>)
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800369a:	4b19      	ldr	r3, [pc, #100]	; (8003700 <vTaskStartScheduler+0xbc>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4b12      	ldr	r3, [pc, #72]	; (80036e8 <vTaskStartScheduler+0xa4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d102      	bne.n	80036ac <vTaskStartScheduler+0x68>
 80036a6:	f003 f9ad 	bl	8006a04 <SEGGER_SYSVIEW_OnIdle>
 80036aa:	e004      	b.n	80036b6 <vTaskStartScheduler+0x72>
 80036ac:	4b14      	ldr	r3, [pc, #80]	; (8003700 <vTaskStartScheduler+0xbc>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f003 fa05 	bl	8006ac0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80036b6:	f001 fac5 	bl	8004c44 <xPortStartScheduler>
 80036ba:	e00e      	b.n	80036da <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c2:	d10a      	bne.n	80036da <vTaskStartScheduler+0x96>
        __asm volatile
 80036c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c8:	f383 8811 	msr	BASEPRI, r3
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	607b      	str	r3, [r7, #4]
    }
 80036d6:	bf00      	nop
 80036d8:	e7fe      	b.n	80036d8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80036da:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <vTaskStartScheduler+0xc0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
}
 80036de:	bf00      	nop
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	200002ac 	.word	0x200002ac
 80036ec:	08007880 	.word	0x08007880
 80036f0:	08004009 	.word	0x08004009
 80036f4:	200002a8 	.word	0x200002a8
 80036f8:	20000294 	.word	0x20000294
 80036fc:	2000028c 	.word	0x2000028c
 8003700:	200001b0 	.word	0x200001b0
 8003704:	2000000c 	.word	0x2000000c

08003708 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800370c:	4b04      	ldr	r3, [pc, #16]	; (8003720 <vTaskSuspendAll+0x18>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3301      	adds	r3, #1
 8003712:	4a03      	ldr	r2, [pc, #12]	; (8003720 <vTaskSuspendAll+0x18>)
 8003714:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003716:	bf00      	nop
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	200002b0 	.word	0x200002b0

08003724 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800372e:	2300      	movs	r3, #0
 8003730:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003732:	4b73      	ldr	r3, [pc, #460]	; (8003900 <xTaskResumeAll+0x1dc>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10a      	bne.n	8003750 <xTaskResumeAll+0x2c>
        __asm volatile
 800373a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373e:	f383 8811 	msr	BASEPRI, r3
 8003742:	f3bf 8f6f 	isb	sy
 8003746:	f3bf 8f4f 	dsb	sy
 800374a:	607b      	str	r3, [r7, #4]
    }
 800374c:	bf00      	nop
 800374e:	e7fe      	b.n	800374e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003750:	f001 fb1a 	bl	8004d88 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003754:	4b6a      	ldr	r3, [pc, #424]	; (8003900 <xTaskResumeAll+0x1dc>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3b01      	subs	r3, #1
 800375a:	4a69      	ldr	r2, [pc, #420]	; (8003900 <xTaskResumeAll+0x1dc>)
 800375c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800375e:	4b68      	ldr	r3, [pc, #416]	; (8003900 <xTaskResumeAll+0x1dc>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	f040 80c4 	bne.w	80038f0 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003768:	4b66      	ldr	r3, [pc, #408]	; (8003904 <xTaskResumeAll+0x1e0>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 80bf 	beq.w	80038f0 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003772:	e08e      	b.n	8003892 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003774:	4b64      	ldr	r3, [pc, #400]	; (8003908 <xTaskResumeAll+0x1e4>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	69fa      	ldr	r2, [r7, #28]
 8003788:	6a12      	ldr	r2, [r2, #32]
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	69fa      	ldr	r2, [r7, #28]
 8003792:	69d2      	ldr	r2, [r2, #28]
 8003794:	605a      	str	r2, [r3, #4]
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	3318      	adds	r3, #24
 800379e:	429a      	cmp	r2, r3
 80037a0:	d103      	bne.n	80037aa <xTaskResumeAll+0x86>
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	6a1a      	ldr	r2, [r3, #32]
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	2200      	movs	r2, #0
 80037ae:	629a      	str	r2, [r3, #40]	; 0x28
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	1e5a      	subs	r2, r3, #1
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	69fa      	ldr	r2, [r7, #28]
 80037c6:	68d2      	ldr	r2, [r2, #12]
 80037c8:	609a      	str	r2, [r3, #8]
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	69fa      	ldr	r2, [r7, #28]
 80037d0:	6892      	ldr	r2, [r2, #8]
 80037d2:	605a      	str	r2, [r3, #4]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	3304      	adds	r3, #4
 80037dc:	429a      	cmp	r2, r3
 80037de:	d103      	bne.n	80037e8 <xTaskResumeAll+0xc4>
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	605a      	str	r2, [r3, #4]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	2200      	movs	r2, #0
 80037ec:	615a      	str	r2, [r3, #20]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	1e5a      	subs	r2, r3, #1
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f003 f9a2 	bl	8006b44 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	2201      	movs	r2, #1
 8003806:	409a      	lsls	r2, r3
 8003808:	4b40      	ldr	r3, [pc, #256]	; (800390c <xTaskResumeAll+0x1e8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4313      	orrs	r3, r2
 800380e:	4a3f      	ldr	r2, [pc, #252]	; (800390c <xTaskResumeAll+0x1e8>)
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003816:	493e      	ldr	r1, [pc, #248]	; (8003910 <xTaskResumeAll+0x1ec>)
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	3304      	adds	r3, #4
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	60bb      	str	r3, [r7, #8]
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	609a      	str	r2, [r3, #8]
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	60da      	str	r2, [r3, #12]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	69fa      	ldr	r2, [r7, #28]
 800383c:	3204      	adds	r2, #4
 800383e:	605a      	str	r2, [r3, #4]
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	1d1a      	adds	r2, r3, #4
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	609a      	str	r2, [r3, #8]
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384c:	4613      	mov	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4a2e      	ldr	r2, [pc, #184]	; (8003910 <xTaskResumeAll+0x1ec>)
 8003856:	441a      	add	r2, r3
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	615a      	str	r2, [r3, #20]
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003860:	492b      	ldr	r1, [pc, #172]	; (8003910 <xTaskResumeAll+0x1ec>)
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	1c59      	adds	r1, r3, #1
 8003870:	4827      	ldr	r0, [pc, #156]	; (8003910 <xTaskResumeAll+0x1ec>)
 8003872:	4613      	mov	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4403      	add	r3, r0
 800387c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003882:	4b24      	ldr	r3, [pc, #144]	; (8003914 <xTaskResumeAll+0x1f0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	429a      	cmp	r2, r3
 800388a:	d302      	bcc.n	8003892 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 800388c:	4b22      	ldr	r3, [pc, #136]	; (8003918 <xTaskResumeAll+0x1f4>)
 800388e:	2201      	movs	r2, #1
 8003890:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003892:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <xTaskResumeAll+0x1e4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	f47f af6c 	bne.w	8003774 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80038a2:	f000 fc49 	bl	8004138 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80038a6:	4b1d      	ldr	r3, [pc, #116]	; (800391c <xTaskResumeAll+0x1f8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d010      	beq.n	80038d4 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80038b2:	f000 f859 	bl	8003968 <xTaskIncrementTick>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80038bc:	4b16      	ldr	r3, [pc, #88]	; (8003918 <xTaskResumeAll+0x1f4>)
 80038be:	2201      	movs	r2, #1
 80038c0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	3b01      	subs	r3, #1
 80038c6:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f1      	bne.n	80038b2 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80038ce:	4b13      	ldr	r3, [pc, #76]	; (800391c <xTaskResumeAll+0x1f8>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80038d4:	4b10      	ldr	r3, [pc, #64]	; (8003918 <xTaskResumeAll+0x1f4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d009      	beq.n	80038f0 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80038dc:	2301      	movs	r3, #1
 80038de:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80038e0:	4b0f      	ldr	r3, [pc, #60]	; (8003920 <xTaskResumeAll+0x1fc>)
 80038e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80038f0:	f001 fa7a 	bl	8004de8 <vPortExitCritical>

    return xAlreadyYielded;
 80038f4:	69bb      	ldr	r3, [r7, #24]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3720      	adds	r7, #32
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	200002b0 	.word	0x200002b0
 8003904:	20000288 	.word	0x20000288
 8003908:	20000248 	.word	0x20000248
 800390c:	20000290 	.word	0x20000290
 8003910:	200001b4 	.word	0x200001b4
 8003914:	200001b0 	.word	0x200001b0
 8003918:	2000029c 	.word	0x2000029c
 800391c:	20000298 	.word	0x20000298
 8003920:	e000ed04 	.word	0xe000ed04

08003924 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800392a:	4b05      	ldr	r3, [pc, #20]	; (8003940 <xTaskGetTickCount+0x1c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003930:	687b      	ldr	r3, [r7, #4]
}
 8003932:	4618      	mov	r0, r3
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	2000028c 	.word	0x2000028c

08003944 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800394a:	f001 fb45 	bl	8004fd8 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800394e:	2300      	movs	r3, #0
 8003950:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003952:	4b04      	ldr	r3, [pc, #16]	; (8003964 <xTaskGetTickCountFromISR+0x20>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003958:	683b      	ldr	r3, [r7, #0]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	2000028c 	.word	0x2000028c

08003968 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08a      	sub	sp, #40	; 0x28
 800396c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800396e:	2300      	movs	r3, #0
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003972:	4b7f      	ldr	r3, [pc, #508]	; (8003b70 <xTaskIncrementTick+0x208>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	f040 80f0 	bne.w	8003b5c <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800397c:	4b7d      	ldr	r3, [pc, #500]	; (8003b74 <xTaskIncrementTick+0x20c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3301      	adds	r3, #1
 8003982:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003984:	4a7b      	ldr	r2, [pc, #492]	; (8003b74 <xTaskIncrementTick+0x20c>)
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d120      	bne.n	80039d2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003990:	4b79      	ldr	r3, [pc, #484]	; (8003b78 <xTaskIncrementTick+0x210>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <xTaskIncrementTick+0x48>
        __asm volatile
 800399a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	607b      	str	r3, [r7, #4]
    }
 80039ac:	bf00      	nop
 80039ae:	e7fe      	b.n	80039ae <xTaskIncrementTick+0x46>
 80039b0:	4b71      	ldr	r3, [pc, #452]	; (8003b78 <xTaskIncrementTick+0x210>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	61fb      	str	r3, [r7, #28]
 80039b6:	4b71      	ldr	r3, [pc, #452]	; (8003b7c <xTaskIncrementTick+0x214>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a6f      	ldr	r2, [pc, #444]	; (8003b78 <xTaskIncrementTick+0x210>)
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	4a6f      	ldr	r2, [pc, #444]	; (8003b7c <xTaskIncrementTick+0x214>)
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	4b6e      	ldr	r3, [pc, #440]	; (8003b80 <xTaskIncrementTick+0x218>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3301      	adds	r3, #1
 80039ca:	4a6d      	ldr	r2, [pc, #436]	; (8003b80 <xTaskIncrementTick+0x218>)
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	f000 fbb3 	bl	8004138 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80039d2:	4b6c      	ldr	r3, [pc, #432]	; (8003b84 <xTaskIncrementTick+0x21c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6a3a      	ldr	r2, [r7, #32]
 80039d8:	429a      	cmp	r2, r3
 80039da:	f0c0 80aa 	bcc.w	8003b32 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039de:	4b66      	ldr	r3, [pc, #408]	; (8003b78 <xTaskIncrementTick+0x210>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d104      	bne.n	80039f2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039e8:	4b66      	ldr	r3, [pc, #408]	; (8003b84 <xTaskIncrementTick+0x21c>)
 80039ea:	f04f 32ff 	mov.w	r2, #4294967295
 80039ee:	601a      	str	r2, [r3, #0]
                    break;
 80039f0:	e09f      	b.n	8003b32 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039f2:	4b61      	ldr	r3, [pc, #388]	; (8003b78 <xTaskIncrementTick+0x210>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003a02:	6a3a      	ldr	r2, [r7, #32]
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d203      	bcs.n	8003a12 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003a0a:	4a5e      	ldr	r2, [pc, #376]	; (8003b84 <xTaskIncrementTick+0x21c>)
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003a10:	e08f      	b.n	8003b32 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	613b      	str	r3, [r7, #16]
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	68d2      	ldr	r2, [r2, #12]
 8003a20:	609a      	str	r2, [r3, #8]
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	6892      	ldr	r2, [r2, #8]
 8003a2a:	605a      	str	r2, [r3, #4]
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	3304      	adds	r3, #4
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d103      	bne.n	8003a40 <xTaskIncrementTick+0xd8>
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	605a      	str	r2, [r3, #4]
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	2200      	movs	r2, #0
 8003a44:	615a      	str	r2, [r3, #20]
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	1e5a      	subs	r2, r3, #1
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d01e      	beq.n	8003a96 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	6a12      	ldr	r2, [r2, #32]
 8003a66:	609a      	str	r2, [r3, #8]
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	69d2      	ldr	r2, [r2, #28]
 8003a70:	605a      	str	r2, [r3, #4]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	3318      	adds	r3, #24
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d103      	bne.n	8003a86 <xTaskIncrementTick+0x11e>
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	6a1a      	ldr	r2, [r3, #32]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	605a      	str	r2, [r3, #4]
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	629a      	str	r2, [r3, #40]	; 0x28
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	1e5a      	subs	r2, r3, #1
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f003 f853 	bl	8006b44 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	409a      	lsls	r2, r3
 8003aa6:	4b38      	ldr	r3, [pc, #224]	; (8003b88 <xTaskIncrementTick+0x220>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	4a36      	ldr	r2, [pc, #216]	; (8003b88 <xTaskIncrementTick+0x220>)
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab4:	4935      	ldr	r1, [pc, #212]	; (8003b8c <xTaskIncrementTick+0x224>)
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	609a      	str	r2, [r3, #8]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	60da      	str	r2, [r3, #12]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	3204      	adds	r2, #4
 8003adc:	605a      	str	r2, [r3, #4]
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	1d1a      	adds	r2, r3, #4
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	609a      	str	r2, [r3, #8]
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aea:	4613      	mov	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4a26      	ldr	r2, [pc, #152]	; (8003b8c <xTaskIncrementTick+0x224>)
 8003af4:	441a      	add	r2, r3
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	615a      	str	r2, [r3, #20]
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afe:	4923      	ldr	r1, [pc, #140]	; (8003b8c <xTaskIncrementTick+0x224>)
 8003b00:	4613      	mov	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	1c59      	adds	r1, r3, #1
 8003b0e:	481f      	ldr	r0, [pc, #124]	; (8003b8c <xTaskIncrementTick+0x224>)
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4403      	add	r3, r0
 8003b1a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b20:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <xTaskIncrementTick+0x228>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	429a      	cmp	r2, r3
 8003b28:	f67f af59 	bls.w	80039de <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b30:	e755      	b.n	80039de <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b32:	4b17      	ldr	r3, [pc, #92]	; (8003b90 <xTaskIncrementTick+0x228>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b38:	4914      	ldr	r1, [pc, #80]	; (8003b8c <xTaskIncrementTick+0x224>)
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4413      	add	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	440b      	add	r3, r1
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d901      	bls.n	8003b4e <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003b4e:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <xTaskIncrementTick+0x22c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d007      	beq.n	8003b66 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8003b56:	2301      	movs	r3, #1
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5a:	e004      	b.n	8003b66 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003b5c:	4b0e      	ldr	r3, [pc, #56]	; (8003b98 <xTaskIncrementTick+0x230>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	3301      	adds	r3, #1
 8003b62:	4a0d      	ldr	r2, [pc, #52]	; (8003b98 <xTaskIncrementTick+0x230>)
 8003b64:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3728      	adds	r7, #40	; 0x28
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	200002b0 	.word	0x200002b0
 8003b74:	2000028c 	.word	0x2000028c
 8003b78:	20000240 	.word	0x20000240
 8003b7c:	20000244 	.word	0x20000244
 8003b80:	200002a0 	.word	0x200002a0
 8003b84:	200002a8 	.word	0x200002a8
 8003b88:	20000290 	.word	0x20000290
 8003b8c:	200001b4 	.word	0x200001b4
 8003b90:	200001b0 	.word	0x200001b0
 8003b94:	2000029c 	.word	0x2000029c
 8003b98:	20000298 	.word	0x20000298

08003b9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ba2:	4b2d      	ldr	r3, [pc, #180]	; (8003c58 <vTaskSwitchContext+0xbc>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003baa:	4b2c      	ldr	r3, [pc, #176]	; (8003c5c <vTaskSwitchContext+0xc0>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003bb0:	e04d      	b.n	8003c4e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003bb2:	4b2a      	ldr	r3, [pc, #168]	; (8003c5c <vTaskSwitchContext+0xc0>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bb8:	4b29      	ldr	r3, [pc, #164]	; (8003c60 <vTaskSwitchContext+0xc4>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	fab3 f383 	clz	r3, r3
 8003bc4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003bc6:	7afb      	ldrb	r3, [r7, #11]
 8003bc8:	f1c3 031f 	rsb	r3, r3, #31
 8003bcc:	617b      	str	r3, [r7, #20]
 8003bce:	4925      	ldr	r1, [pc, #148]	; (8003c64 <vTaskSwitchContext+0xc8>)
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10a      	bne.n	8003bf8 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	607b      	str	r3, [r7, #4]
    }
 8003bf4:	bf00      	nop
 8003bf6:	e7fe      	b.n	8003bf6 <vTaskSwitchContext+0x5a>
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4a18      	ldr	r2, [pc, #96]	; (8003c64 <vTaskSwitchContext+0xc8>)
 8003c04:	4413      	add	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	605a      	str	r2, [r3, #4]
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	3308      	adds	r3, #8
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d104      	bne.n	8003c28 <vTaskSwitchContext+0x8c>
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	605a      	str	r2, [r3, #4]
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	4a0e      	ldr	r2, [pc, #56]	; (8003c68 <vTaskSwitchContext+0xcc>)
 8003c30:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003c32:	4b0d      	ldr	r3, [pc, #52]	; (8003c68 <vTaskSwitchContext+0xcc>)
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <vTaskSwitchContext+0xd0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d102      	bne.n	8003c44 <vTaskSwitchContext+0xa8>
 8003c3e:	f002 fee1 	bl	8006a04 <SEGGER_SYSVIEW_OnIdle>
}
 8003c42:	e004      	b.n	8003c4e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003c44:	4b08      	ldr	r3, [pc, #32]	; (8003c68 <vTaskSwitchContext+0xcc>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f002 ff39 	bl	8006ac0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003c4e:	bf00      	nop
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	200002b0 	.word	0x200002b0
 8003c5c:	2000029c 	.word	0x2000029c
 8003c60:	20000290 	.word	0x20000290
 8003c64:	200001b4 	.word	0x200001b4
 8003c68:	200001b0 	.word	0x200001b0
 8003c6c:	200002ac 	.word	0x200002ac

08003c70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10a      	bne.n	8003c96 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	60fb      	str	r3, [r7, #12]
    }
 8003c92:	bf00      	nop
 8003c94:	e7fe      	b.n	8003c94 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c96:	4b07      	ldr	r3, [pc, #28]	; (8003cb4 <vTaskPlaceOnEventList+0x44>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	3318      	adds	r3, #24
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7fe fecf 	bl	8002a42 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	6838      	ldr	r0, [r7, #0]
 8003ca8:	f000 fc3c 	bl	8004524 <prvAddCurrentTaskToDelayedList>
}
 8003cac:	bf00      	nop
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	200001b0 	.word	0x200001b0

08003cb8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10a      	bne.n	8003ce0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	613b      	str	r3, [r7, #16]
    }
 8003cdc:	bf00      	nop
 8003cde:	e7fe      	b.n	8003cde <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	4b17      	ldr	r3, [pc, #92]	; (8003d44 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	61da      	str	r2, [r3, #28]
 8003cee:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	6892      	ldr	r2, [r2, #8]
 8003cf6:	621a      	str	r2, [r3, #32]
 8003cf8:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	3218      	adds	r2, #24
 8003d02:	605a      	str	r2, [r3, #4]
 8003d04:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f103 0218 	add.w	r2, r3, #24
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	609a      	str	r2, [r3, #8]
 8003d10:	4b0c      	ldr	r3, [pc, #48]	; (8003d44 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	629a      	str	r2, [r3, #40]	; 0x28
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003d28:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003d2e:	2024      	movs	r0, #36	; 0x24
 8003d30:	f002 f9e4 	bl	80060fc <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	68b8      	ldr	r0, [r7, #8]
 8003d38:	f000 fbf4 	bl	8004524 <prvAddCurrentTaskToDelayedList>
    }
 8003d3c:	bf00      	nop
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	200001b0 	.word	0x200001b0

08003d48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08a      	sub	sp, #40	; 0x28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10a      	bne.n	8003d74 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	60fb      	str	r3, [r7, #12]
    }
 8003d70:	bf00      	nop
 8003d72:	e7fe      	b.n	8003d72 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d78:	61fb      	str	r3, [r7, #28]
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	6a3a      	ldr	r2, [r7, #32]
 8003d80:	6a12      	ldr	r2, [r2, #32]
 8003d82:	609a      	str	r2, [r3, #8]
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	6a3a      	ldr	r2, [r7, #32]
 8003d8a:	69d2      	ldr	r2, [r2, #28]
 8003d8c:	605a      	str	r2, [r3, #4]
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	3318      	adds	r3, #24
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d103      	bne.n	8003da2 <xTaskRemoveFromEventList+0x5a>
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	6a1a      	ldr	r2, [r3, #32]
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	605a      	str	r2, [r3, #4]
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	2200      	movs	r2, #0
 8003da6:	629a      	str	r2, [r3, #40]	; 0x28
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	1e5a      	subs	r2, r3, #1
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003db2:	4b4b      	ldr	r3, [pc, #300]	; (8003ee0 <xTaskRemoveFromEventList+0x198>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d162      	bne.n	8003e80 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	6a3a      	ldr	r2, [r7, #32]
 8003dc6:	68d2      	ldr	r2, [r2, #12]
 8003dc8:	609a      	str	r2, [r3, #8]
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	6a3a      	ldr	r2, [r7, #32]
 8003dd0:	6892      	ldr	r2, [r2, #8]
 8003dd2:	605a      	str	r2, [r3, #4]
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d103      	bne.n	8003de8 <xTaskRemoveFromEventList+0xa0>
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	605a      	str	r2, [r3, #4]
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	2200      	movs	r2, #0
 8003dec:	615a      	str	r2, [r3, #20]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	1e5a      	subs	r2, r3, #1
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f002 fea2 	bl	8006b44 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	2201      	movs	r2, #1
 8003e06:	409a      	lsls	r2, r3
 8003e08:	4b36      	ldr	r3, [pc, #216]	; (8003ee4 <xTaskRemoveFromEventList+0x19c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	4a35      	ldr	r2, [pc, #212]	; (8003ee4 <xTaskRemoveFromEventList+0x19c>)
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e16:	4934      	ldr	r1, [pc, #208]	; (8003ee8 <xTaskRemoveFromEventList+0x1a0>)
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	3304      	adds	r3, #4
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	613b      	str	r3, [r7, #16]
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	609a      	str	r2, [r3, #8]
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	60da      	str	r2, [r3, #12]
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	6a3a      	ldr	r2, [r7, #32]
 8003e3c:	3204      	adds	r2, #4
 8003e3e:	605a      	str	r2, [r3, #4]
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	1d1a      	adds	r2, r3, #4
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	609a      	str	r2, [r3, #8]
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4a24      	ldr	r2, [pc, #144]	; (8003ee8 <xTaskRemoveFromEventList+0x1a0>)
 8003e56:	441a      	add	r2, r3
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	615a      	str	r2, [r3, #20]
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e60:	4921      	ldr	r1, [pc, #132]	; (8003ee8 <xTaskRemoveFromEventList+0x1a0>)
 8003e62:	4613      	mov	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	1c59      	adds	r1, r3, #1
 8003e70:	481d      	ldr	r0, [pc, #116]	; (8003ee8 <xTaskRemoveFromEventList+0x1a0>)
 8003e72:	4613      	mov	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4403      	add	r3, r0
 8003e7c:	6019      	str	r1, [r3, #0]
 8003e7e:	e01b      	b.n	8003eb8 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e80:	4b1a      	ldr	r3, [pc, #104]	; (8003eec <xTaskRemoveFromEventList+0x1a4>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	61bb      	str	r3, [r7, #24]
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	61da      	str	r2, [r3, #28]
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	621a      	str	r2, [r3, #32]
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	6a3a      	ldr	r2, [r7, #32]
 8003e9a:	3218      	adds	r2, #24
 8003e9c:	605a      	str	r2, [r3, #4]
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	f103 0218 	add.w	r2, r3, #24
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	609a      	str	r2, [r3, #8]
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	4a10      	ldr	r2, [pc, #64]	; (8003eec <xTaskRemoveFromEventList+0x1a4>)
 8003eac:	629a      	str	r2, [r3, #40]	; 0x28
 8003eae:	4b0f      	ldr	r3, [pc, #60]	; (8003eec <xTaskRemoveFromEventList+0x1a4>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	4a0d      	ldr	r2, [pc, #52]	; (8003eec <xTaskRemoveFromEventList+0x1a4>)
 8003eb6:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <xTaskRemoveFromEventList+0x1a8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d905      	bls.n	8003ed2 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003eca:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <xTaskRemoveFromEventList+0x1ac>)
 8003ecc:	2201      	movs	r2, #1
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	e001      	b.n	8003ed6 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3728      	adds	r7, #40	; 0x28
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	200002b0 	.word	0x200002b0
 8003ee4:	20000290 	.word	0x20000290
 8003ee8:	200001b4 	.word	0x200001b4
 8003eec:	20000248 	.word	0x20000248
 8003ef0:	200001b0 	.word	0x200001b0
 8003ef4:	2000029c 	.word	0x2000029c

08003ef8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f00:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <vTaskInternalSetTimeOutState+0x24>)
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003f08:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <vTaskInternalSetTimeOutState+0x28>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	605a      	str	r2, [r3, #4]
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	200002a0 	.word	0x200002a0
 8003f20:	2000028c 	.word	0x2000028c

08003f24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10a      	bne.n	8003f4a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	613b      	str	r3, [r7, #16]
    }
 8003f46:	bf00      	nop
 8003f48:	e7fe      	b.n	8003f48 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10a      	bne.n	8003f66 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f54:	f383 8811 	msr	BASEPRI, r3
 8003f58:	f3bf 8f6f 	isb	sy
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	60fb      	str	r3, [r7, #12]
    }
 8003f62:	bf00      	nop
 8003f64:	e7fe      	b.n	8003f64 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003f66:	f000 ff0f 	bl	8004d88 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003f6a:	4b1f      	ldr	r3, [pc, #124]	; (8003fe8 <xTaskCheckForTimeOut+0xc4>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f82:	d102      	bne.n	8003f8a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003f84:	2300      	movs	r3, #0
 8003f86:	61fb      	str	r3, [r7, #28]
 8003f88:	e026      	b.n	8003fd8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	4b17      	ldr	r3, [pc, #92]	; (8003fec <xTaskCheckForTimeOut+0xc8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d00a      	beq.n	8003fac <xTaskCheckForTimeOut+0x88>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d305      	bcc.n	8003fac <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	e015      	b.n	8003fd8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d20b      	bcs.n	8003fce <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	1ad2      	subs	r2, r2, r3
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff ff98 	bl	8003ef8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	61fb      	str	r3, [r7, #28]
 8003fcc:	e004      	b.n	8003fd8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003fd8:	f000 ff06 	bl	8004de8 <vPortExitCritical>

    return xReturn;
 8003fdc:	69fb      	ldr	r3, [r7, #28]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3720      	adds	r7, #32
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	2000028c 	.word	0x2000028c
 8003fec:	200002a0 	.word	0x200002a0

08003ff0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003ff4:	4b03      	ldr	r3, [pc, #12]	; (8004004 <vTaskMissedYield+0x14>)
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]
}
 8003ffa:	bf00      	nop
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	2000029c 	.word	0x2000029c

08004008 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004010:	f000 f854 	bl	80040bc <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004014:	4b07      	ldr	r3, [pc, #28]	; (8004034 <prvIdleTask+0x2c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d907      	bls.n	800402c <prvIdleTask+0x24>
            {
                taskYIELD();
 800401c:	4b06      	ldr	r3, [pc, #24]	; (8004038 <prvIdleTask+0x30>)
 800401e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	f3bf 8f6f 	isb	sy
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 800402c:	f7fc fd78 	bl	8000b20 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8004030:	e7ee      	b.n	8004010 <prvIdleTask+0x8>
 8004032:	bf00      	nop
 8004034:	200001b4 	.word	0x200001b4
 8004038:	e000ed04 	.word	0xe000ed04

0800403c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004042:	2300      	movs	r3, #0
 8004044:	607b      	str	r3, [r7, #4]
 8004046:	e00c      	b.n	8004062 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4a12      	ldr	r2, [pc, #72]	; (800409c <prvInitialiseTaskLists+0x60>)
 8004054:	4413      	add	r3, r2
 8004056:	4618      	mov	r0, r3
 8004058:	f7fe fca2 	bl	80029a0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3301      	adds	r3, #1
 8004060:	607b      	str	r3, [r7, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b04      	cmp	r3, #4
 8004066:	d9ef      	bls.n	8004048 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004068:	480d      	ldr	r0, [pc, #52]	; (80040a0 <prvInitialiseTaskLists+0x64>)
 800406a:	f7fe fc99 	bl	80029a0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800406e:	480d      	ldr	r0, [pc, #52]	; (80040a4 <prvInitialiseTaskLists+0x68>)
 8004070:	f7fe fc96 	bl	80029a0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004074:	480c      	ldr	r0, [pc, #48]	; (80040a8 <prvInitialiseTaskLists+0x6c>)
 8004076:	f7fe fc93 	bl	80029a0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800407a:	480c      	ldr	r0, [pc, #48]	; (80040ac <prvInitialiseTaskLists+0x70>)
 800407c:	f7fe fc90 	bl	80029a0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004080:	480b      	ldr	r0, [pc, #44]	; (80040b0 <prvInitialiseTaskLists+0x74>)
 8004082:	f7fe fc8d 	bl	80029a0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004086:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <prvInitialiseTaskLists+0x78>)
 8004088:	4a05      	ldr	r2, [pc, #20]	; (80040a0 <prvInitialiseTaskLists+0x64>)
 800408a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800408c:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <prvInitialiseTaskLists+0x7c>)
 800408e:	4a05      	ldr	r2, [pc, #20]	; (80040a4 <prvInitialiseTaskLists+0x68>)
 8004090:	601a      	str	r2, [r3, #0]
}
 8004092:	bf00      	nop
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	200001b4 	.word	0x200001b4
 80040a0:	20000218 	.word	0x20000218
 80040a4:	2000022c 	.word	0x2000022c
 80040a8:	20000248 	.word	0x20000248
 80040ac:	2000025c 	.word	0x2000025c
 80040b0:	20000274 	.word	0x20000274
 80040b4:	20000240 	.word	0x20000240
 80040b8:	20000244 	.word	0x20000244

080040bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040c2:	e019      	b.n	80040f8 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80040c4:	f000 fe60 	bl	8004d88 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040c8:	4b10      	ldr	r3, [pc, #64]	; (800410c <prvCheckTasksWaitingTermination+0x50>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3304      	adds	r3, #4
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fe fced 	bl	8002ab4 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80040da:	4b0d      	ldr	r3, [pc, #52]	; (8004110 <prvCheckTasksWaitingTermination+0x54>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3b01      	subs	r3, #1
 80040e0:	4a0b      	ldr	r2, [pc, #44]	; (8004110 <prvCheckTasksWaitingTermination+0x54>)
 80040e2:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80040e4:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <prvCheckTasksWaitingTermination+0x58>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3b01      	subs	r3, #1
 80040ea:	4a0a      	ldr	r2, [pc, #40]	; (8004114 <prvCheckTasksWaitingTermination+0x58>)
 80040ec:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80040ee:	f000 fe7b 	bl	8004de8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f810 	bl	8004118 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040f8:	4b06      	ldr	r3, [pc, #24]	; (8004114 <prvCheckTasksWaitingTermination+0x58>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1e1      	bne.n	80040c4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004100:	bf00      	nop
 8004102:	bf00      	nop
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	2000025c 	.word	0x2000025c
 8004110:	20000288 	.word	0x20000288
 8004114:	20000270 	.word	0x20000270

08004118 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004124:	4618      	mov	r0, r3
 8004126:	f001 f851 	bl	80051cc <vPortFree>
            vPortFree( pxTCB );
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f001 f84e 	bl	80051cc <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004130:	bf00      	nop
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800413c:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <prvResetNextTaskUnblockTime+0x30>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d104      	bne.n	8004150 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004146:	4b09      	ldr	r3, [pc, #36]	; (800416c <prvResetNextTaskUnblockTime+0x34>)
 8004148:	f04f 32ff 	mov.w	r2, #4294967295
 800414c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800414e:	e005      	b.n	800415c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004150:	4b05      	ldr	r3, [pc, #20]	; (8004168 <prvResetNextTaskUnblockTime+0x30>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a04      	ldr	r2, [pc, #16]	; (800416c <prvResetNextTaskUnblockTime+0x34>)
 800415a:	6013      	str	r3, [r2, #0]
}
 800415c:	bf00      	nop
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	20000240 	.word	0x20000240
 800416c:	200002a8 	.word	0x200002a8

08004170 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004176:	4b0b      	ldr	r3, [pc, #44]	; (80041a4 <xTaskGetSchedulerState+0x34>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d102      	bne.n	8004184 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800417e:	2301      	movs	r3, #1
 8004180:	607b      	str	r3, [r7, #4]
 8004182:	e008      	b.n	8004196 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004184:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <xTaskGetSchedulerState+0x38>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d102      	bne.n	8004192 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800418c:	2302      	movs	r3, #2
 800418e:	607b      	str	r3, [r7, #4]
 8004190:	e001      	b.n	8004196 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004192:	2300      	movs	r3, #0
 8004194:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004196:	687b      	ldr	r3, [r7, #4]
    }
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	20000294 	.word	0x20000294
 80041a8:	200002b0 	.word	0x200002b0

080041ac <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
 80041b8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 80041c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	613b      	str	r3, [r7, #16]
    }
 80041d2:	bf00      	nop
 80041d4:	e7fe      	b.n	80041d4 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80041d6:	f000 fdd7 	bl	8004d88 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80041da:	4b36      	ldr	r3, [pc, #216]	; (80042b4 <xTaskGenericNotifyWait+0x108>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	4413      	add	r3, r2
 80041e2:	3354      	adds	r3, #84	; 0x54
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d022      	beq.n	8004232 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80041ec:	4b31      	ldr	r3, [pc, #196]	; (80042b4 <xTaskGenericNotifyWait+0x108>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	3214      	adds	r2, #20
 80041f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	43d2      	mvns	r2, r2
 80041fc:	4011      	ands	r1, r2
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	3214      	adds	r2, #20
 8004202:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8004206:	4b2b      	ldr	r3, [pc, #172]	; (80042b4 <xTaskGenericNotifyWait+0x108>)
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4413      	add	r3, r2
 800420e:	3354      	adds	r3, #84	; 0x54
 8004210:	2201      	movs	r2, #1
 8004212:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00b      	beq.n	8004232 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800421a:	2101      	movs	r1, #1
 800421c:	6a38      	ldr	r0, [r7, #32]
 800421e:	f000 f981 	bl	8004524 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8004222:	4b25      	ldr	r3, [pc, #148]	; (80042b8 <xTaskGenericNotifyWait+0x10c>)
 8004224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004232:	f000 fdd9 	bl	8004de8 <vPortExitCritical>

        taskENTER_CRITICAL();
 8004236:	f000 fda7 	bl	8004d88 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT();
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	4613      	mov	r3, r2
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	68b9      	ldr	r1, [r7, #8]
 8004246:	2040      	movs	r0, #64	; 0x40
 8004248:	f002 f882 	bl	8006350 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d007      	beq.n	8004262 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8004252:	4b18      	ldr	r3, [pc, #96]	; (80042b4 <xTaskGenericNotifyWait+0x108>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	3214      	adds	r2, #20
 800425a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004262:	4b14      	ldr	r3, [pc, #80]	; (80042b4 <xTaskGenericNotifyWait+0x108>)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4413      	add	r3, r2
 800426a:	3354      	adds	r3, #84	; 0x54
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d002      	beq.n	800427a <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	e00e      	b.n	8004298 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800427a:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <xTaskGenericNotifyWait+0x108>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	3214      	adds	r2, #20
 8004282:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	43d2      	mvns	r2, r2
 800428a:	4011      	ands	r1, r2
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	3214      	adds	r2, #20
 8004290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8004294:	2301      	movs	r3, #1
 8004296:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8004298:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <xTaskGenericNotifyWait+0x108>)
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4413      	add	r3, r2
 80042a0:	3354      	adds	r3, #84	; 0x54
 80042a2:	2200      	movs	r2, #0
 80042a4:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80042a6:	f000 fd9f 	bl	8004de8 <vPortExitCritical>

        return xReturn;
 80042aa:	697b      	ldr	r3, [r7, #20]
    }
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	200001b0 	.word	0x200001b0
 80042b8:	e000ed04 	.word	0xe000ed04

080042bc <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80042bc:	b580      	push	{r7, lr}
 80042be:	b090      	sub	sp, #64	; 0x40
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80042ca:	2301      	movs	r3, #1
 80042cc:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00a      	beq.n	80042ea <xTaskGenericNotify+0x2e>
        __asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	623b      	str	r3, [r7, #32]
    }
 80042e6:	bf00      	nop
 80042e8:	e7fe      	b.n	80042e8 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10a      	bne.n	8004306 <xTaskGenericNotify+0x4a>
        __asm volatile
 80042f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f4:	f383 8811 	msr	BASEPRI, r3
 80042f8:	f3bf 8f6f 	isb	sy
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	61fb      	str	r3, [r7, #28]
    }
 8004302:	bf00      	nop
 8004304:	e7fe      	b.n	8004304 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 800430a:	f000 fd3d 	bl	8004d88 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800430e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004310:	2b00      	cmp	r3, #0
 8004312:	d006      	beq.n	8004322 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	3214      	adds	r2, #20
 800431a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800431e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004320:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4413      	add	r3, r2
 8004328:	3354      	adds	r3, #84	; 0x54
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	4413      	add	r3, r2
 8004336:	3354      	adds	r3, #84	; 0x54
 8004338:	2202      	movs	r2, #2
 800433a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	2b04      	cmp	r3, #4
 8004340:	d83b      	bhi.n	80043ba <xTaskGenericNotify+0xfe>
 8004342:	a201      	add	r2, pc, #4	; (adr r2, 8004348 <xTaskGenericNotify+0x8c>)
 8004344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004348:	080043d9 	.word	0x080043d9
 800434c:	0800435d 	.word	0x0800435d
 8004350:	08004379 	.word	0x08004379
 8004354:	08004391 	.word	0x08004391
 8004358:	0800439f 	.word	0x0800439f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	3214      	adds	r2, #20
 8004362:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	ea42 0103 	orr.w	r1, r2, r3
 800436c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	3214      	adds	r2, #20
 8004372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004376:	e032      	b.n	80043de <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	3214      	adds	r2, #20
 800437e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004382:	1c59      	adds	r1, r3, #1
 8004384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	3214      	adds	r2, #20
 800438a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800438e:	e026      	b.n	80043de <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	3214      	adds	r2, #20
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800439c:	e01f      	b.n	80043de <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800439e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d006      	beq.n	80043b4 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80043a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	3214      	adds	r2, #20
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80043b2:	e014      	b.n	80043de <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80043b4:	2300      	movs	r3, #0
 80043b6:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 80043b8:	e011      	b.n	80043de <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80043ba:	4b55      	ldr	r3, [pc, #340]	; (8004510 <xTaskGenericNotify+0x254>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00c      	beq.n	80043dc <xTaskGenericNotify+0x120>
        __asm volatile
 80043c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	61bb      	str	r3, [r7, #24]
    }
 80043d4:	bf00      	nop
 80043d6:	e7fe      	b.n	80043d6 <xTaskGenericNotify+0x11a>
                    break;
 80043d8:	bf00      	nop
 80043da:	e000      	b.n	80043de <xTaskGenericNotify+0x122>

                    break;
 80043dc:	bf00      	nop
            }

            traceTASK_NOTIFY();
 80043de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e0:	4618      	mov	r0, r3
 80043e2:	f002 fbf1 	bl	8006bc8 <SEGGER_SYSVIEW_ShrinkId>
 80043e6:	4601      	mov	r1, r0
 80043e8:	78fa      	ldrb	r2, [r7, #3]
 80043ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	4613      	mov	r3, r2
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	203e      	movs	r0, #62	; 0x3e
 80043f4:	f001 ffac 	bl	8006350 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80043f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d17f      	bne.n	8004500 <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	62bb      	str	r3, [r7, #40]	; 0x28
 8004406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800440c:	68d2      	ldr	r2, [r2, #12]
 800440e:	609a      	str	r2, [r3, #8]
 8004410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004416:	6892      	ldr	r2, [r2, #8]
 8004418:	605a      	str	r2, [r3, #4]
 800441a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004420:	3304      	adds	r3, #4
 8004422:	429a      	cmp	r2, r3
 8004424:	d103      	bne.n	800442e <xTaskGenericNotify+0x172>
 8004426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442c:	605a      	str	r2, [r3, #4]
 800442e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004430:	2200      	movs	r2, #0
 8004432:	615a      	str	r2, [r3, #20]
 8004434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	1e5a      	subs	r2, r3, #1
 800443a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443c:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	4618      	mov	r0, r3
 8004442:	f002 fb7f 	bl	8006b44 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	2201      	movs	r2, #1
 800444c:	409a      	lsls	r2, r3
 800444e:	4b31      	ldr	r3, [pc, #196]	; (8004514 <xTaskGenericNotify+0x258>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4313      	orrs	r3, r2
 8004454:	4a2f      	ldr	r2, [pc, #188]	; (8004514 <xTaskGenericNotify+0x258>)
 8004456:	6013      	str	r3, [r2, #0]
 8004458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445c:	492e      	ldr	r1, [pc, #184]	; (8004518 <xTaskGenericNotify+0x25c>)
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	440b      	add	r3, r1
 8004468:	3304      	adds	r3, #4
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004472:	609a      	str	r2, [r3, #8]
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447a:	60da      	str	r2, [r3, #12]
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004482:	3204      	adds	r2, #4
 8004484:	605a      	str	r2, [r3, #4]
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	1d1a      	adds	r2, r3, #4
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	609a      	str	r2, [r3, #8]
 800448e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004492:	4613      	mov	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4a1f      	ldr	r2, [pc, #124]	; (8004518 <xTaskGenericNotify+0x25c>)
 800449c:	441a      	add	r2, r3
 800449e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a0:	615a      	str	r2, [r3, #20]
 80044a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a6:	491c      	ldr	r1, [pc, #112]	; (8004518 <xTaskGenericNotify+0x25c>)
 80044a8:	4613      	mov	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4413      	add	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	440b      	add	r3, r1
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	1c59      	adds	r1, r3, #1
 80044b6:	4818      	ldr	r0, [pc, #96]	; (8004518 <xTaskGenericNotify+0x25c>)
 80044b8:	4613      	mov	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4403      	add	r3, r0
 80044c2:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80044c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <xTaskGenericNotify+0x226>
        __asm volatile
 80044cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	617b      	str	r3, [r7, #20]
    }
 80044de:	bf00      	nop
 80044e0:	e7fe      	b.n	80044e0 <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e6:	4b0d      	ldr	r3, [pc, #52]	; (800451c <xTaskGenericNotify+0x260>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d907      	bls.n	8004500 <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80044f0:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <xTaskGenericNotify+0x264>)
 80044f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004500:	f000 fc72 	bl	8004de8 <vPortExitCritical>

        return xReturn;
 8004504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8004506:	4618      	mov	r0, r3
 8004508:	3738      	adds	r7, #56	; 0x38
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	2000028c 	.word	0x2000028c
 8004514:	20000290 	.word	0x20000290
 8004518:	200001b4 	.word	0x200001b4
 800451c:	200001b0 	.word	0x200001b0
 8004520:	e000ed04 	.word	0xe000ed04

08004524 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800452e:	4b36      	ldr	r3, [pc, #216]	; (8004608 <prvAddCurrentTaskToDelayedList+0xe4>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004534:	4b35      	ldr	r3, [pc, #212]	; (800460c <prvAddCurrentTaskToDelayedList+0xe8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3304      	adds	r3, #4
 800453a:	4618      	mov	r0, r3
 800453c:	f7fe faba 	bl	8002ab4 <uxListRemove>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10b      	bne.n	800455e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004546:	4b31      	ldr	r3, [pc, #196]	; (800460c <prvAddCurrentTaskToDelayedList+0xe8>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	2201      	movs	r2, #1
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	43da      	mvns	r2, r3
 8004554:	4b2e      	ldr	r3, [pc, #184]	; (8004610 <prvAddCurrentTaskToDelayedList+0xec>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4013      	ands	r3, r2
 800455a:	4a2d      	ldr	r2, [pc, #180]	; (8004610 <prvAddCurrentTaskToDelayedList+0xec>)
 800455c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004564:	d124      	bne.n	80045b0 <prvAddCurrentTaskToDelayedList+0x8c>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d021      	beq.n	80045b0 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800456c:	4b29      	ldr	r3, [pc, #164]	; (8004614 <prvAddCurrentTaskToDelayedList+0xf0>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	613b      	str	r3, [r7, #16]
 8004572:	4b26      	ldr	r3, [pc, #152]	; (800460c <prvAddCurrentTaskToDelayedList+0xe8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	609a      	str	r2, [r3, #8]
 800457a:	4b24      	ldr	r3, [pc, #144]	; (800460c <prvAddCurrentTaskToDelayedList+0xe8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	6892      	ldr	r2, [r2, #8]
 8004582:	60da      	str	r2, [r3, #12]
 8004584:	4b21      	ldr	r3, [pc, #132]	; (800460c <prvAddCurrentTaskToDelayedList+0xe8>)
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	3204      	adds	r2, #4
 800458e:	605a      	str	r2, [r3, #4]
 8004590:	4b1e      	ldr	r3, [pc, #120]	; (800460c <prvAddCurrentTaskToDelayedList+0xe8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	1d1a      	adds	r2, r3, #4
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	609a      	str	r2, [r3, #8]
 800459a:	4b1c      	ldr	r3, [pc, #112]	; (800460c <prvAddCurrentTaskToDelayedList+0xe8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a1d      	ldr	r2, [pc, #116]	; (8004614 <prvAddCurrentTaskToDelayedList+0xf0>)
 80045a0:	615a      	str	r2, [r3, #20]
 80045a2:	4b1c      	ldr	r3, [pc, #112]	; (8004614 <prvAddCurrentTaskToDelayedList+0xf0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3301      	adds	r3, #1
 80045a8:	4a1a      	ldr	r2, [pc, #104]	; (8004614 <prvAddCurrentTaskToDelayedList+0xf0>)
 80045aa:	6013      	str	r3, [r2, #0]
 80045ac:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80045ae:	e026      	b.n	80045fe <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4413      	add	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045b8:	4b14      	ldr	r3, [pc, #80]	; (800460c <prvAddCurrentTaskToDelayedList+0xe8>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d209      	bcs.n	80045dc <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045c8:	4b13      	ldr	r3, [pc, #76]	; (8004618 <prvAddCurrentTaskToDelayedList+0xf4>)
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	4b0f      	ldr	r3, [pc, #60]	; (800460c <prvAddCurrentTaskToDelayedList+0xe8>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3304      	adds	r3, #4
 80045d2:	4619      	mov	r1, r3
 80045d4:	4610      	mov	r0, r2
 80045d6:	f7fe fa34 	bl	8002a42 <vListInsert>
}
 80045da:	e010      	b.n	80045fe <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045dc:	4b0f      	ldr	r3, [pc, #60]	; (800461c <prvAddCurrentTaskToDelayedList+0xf8>)
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	4b0a      	ldr	r3, [pc, #40]	; (800460c <prvAddCurrentTaskToDelayedList+0xe8>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3304      	adds	r3, #4
 80045e6:	4619      	mov	r1, r3
 80045e8:	4610      	mov	r0, r2
 80045ea:	f7fe fa2a 	bl	8002a42 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80045ee:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <prvAddCurrentTaskToDelayedList+0xfc>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d202      	bcs.n	80045fe <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80045f8:	4a09      	ldr	r2, [pc, #36]	; (8004620 <prvAddCurrentTaskToDelayedList+0xfc>)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6013      	str	r3, [r2, #0]
}
 80045fe:	bf00      	nop
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	2000028c 	.word	0x2000028c
 800460c:	200001b0 	.word	0x200001b0
 8004610:	20000290 	.word	0x20000290
 8004614:	20000274 	.word	0x20000274
 8004618:	20000244 	.word	0x20000244
 800461c:	20000240 	.word	0x20000240
 8004620:	200002a8 	.word	0x200002a8

08004624 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800462a:	2300      	movs	r3, #0
 800462c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800462e:	f000 fa47 	bl	8004ac0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004632:	4b11      	ldr	r3, [pc, #68]	; (8004678 <xTimerCreateTimerTask+0x54>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00b      	beq.n	8004652 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800463a:	4b10      	ldr	r3, [pc, #64]	; (800467c <xTimerCreateTimerTask+0x58>)
 800463c:	9301      	str	r3, [sp, #4]
 800463e:	2302      	movs	r3, #2
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	2300      	movs	r3, #0
 8004644:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004648:	490d      	ldr	r1, [pc, #52]	; (8004680 <xTimerCreateTimerTask+0x5c>)
 800464a:	480e      	ldr	r0, [pc, #56]	; (8004684 <xTimerCreateTimerTask+0x60>)
 800464c:	f7fe fd8c 	bl	8003168 <xTaskCreate>
 8004650:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10a      	bne.n	800466e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	603b      	str	r3, [r7, #0]
    }
 800466a:	bf00      	nop
 800466c:	e7fe      	b.n	800466c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800466e:	687b      	ldr	r3, [r7, #4]
    }
 8004670:	4618      	mov	r0, r3
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	200002e4 	.word	0x200002e4
 800467c:	200002e8 	.word	0x200002e8
 8004680:	08007888 	.word	0x08007888
 8004684:	0800472d 	.word	0x0800472d

08004688 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004694:	e008      	b.n	80046a8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	4413      	add	r3, r2
 800469e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	699a      	ldr	r2, [r3, #24]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	18d1      	adds	r1, r2, r3
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 f8dd 	bl	8004874 <prvInsertTimerInActiveList>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1ea      	bne.n	8004696 <prvReloadTimer+0xe>
        }
    }
 80046c0:	bf00      	nop
 80046c2:	bf00      	nop
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046d6:	4b14      	ldr	r3, [pc, #80]	; (8004728 <prvProcessExpiredTimer+0x5c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3304      	adds	r3, #4
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fe f9e5 	bl	8002ab4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d005      	beq.n	8004704 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f7ff ffc3 	bl	8004688 <prvReloadTimer>
 8004702:	e008      	b.n	8004716 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800470a:	f023 0301 	bic.w	r3, r3, #1
 800470e:	b2da      	uxtb	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	4798      	blx	r3
    }
 800471e:	bf00      	nop
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	200002dc 	.word	0x200002dc

0800472c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004734:	f107 0308 	add.w	r3, r7, #8
 8004738:	4618      	mov	r0, r3
 800473a:	f000 f857 	bl	80047ec <prvGetNextExpireTime>
 800473e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	4619      	mov	r1, r3
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 f803 	bl	8004750 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800474a:	f000 f8d5 	bl	80048f8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800474e:	e7f1      	b.n	8004734 <prvTimerTask+0x8>

08004750 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800475a:	f7fe ffd5 	bl	8003708 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800475e:	f107 0308 	add.w	r3, r7, #8
 8004762:	4618      	mov	r0, r3
 8004764:	f000 f866 	bl	8004834 <prvSampleTimeNow>
 8004768:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d130      	bne.n	80047d2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10a      	bne.n	800478c <prvProcessTimerOrBlockTask+0x3c>
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	429a      	cmp	r2, r3
 800477c:	d806      	bhi.n	800478c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800477e:	f7fe ffd1 	bl	8003724 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004782:	68f9      	ldr	r1, [r7, #12]
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff ffa1 	bl	80046cc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800478a:	e024      	b.n	80047d6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d008      	beq.n	80047a4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004792:	4b13      	ldr	r3, [pc, #76]	; (80047e0 <prvProcessTimerOrBlockTask+0x90>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <prvProcessTimerOrBlockTask+0x50>
 800479c:	2301      	movs	r3, #1
 800479e:	e000      	b.n	80047a2 <prvProcessTimerOrBlockTask+0x52>
 80047a0:	2300      	movs	r3, #0
 80047a2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80047a4:	4b0f      	ldr	r3, [pc, #60]	; (80047e4 <prvProcessTimerOrBlockTask+0x94>)
 80047a6:	6818      	ldr	r0, [r3, #0]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	4619      	mov	r1, r3
 80047b2:	f7fe fca5 	bl	8003100 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80047b6:	f7fe ffb5 	bl	8003724 <xTaskResumeAll>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10a      	bne.n	80047d6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80047c0:	4b09      	ldr	r3, [pc, #36]	; (80047e8 <prvProcessTimerOrBlockTask+0x98>)
 80047c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	f3bf 8f6f 	isb	sy
    }
 80047d0:	e001      	b.n	80047d6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80047d2:	f7fe ffa7 	bl	8003724 <xTaskResumeAll>
    }
 80047d6:	bf00      	nop
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	200002e0 	.word	0x200002e0
 80047e4:	200002e4 	.word	0x200002e4
 80047e8:	e000ed04 	.word	0xe000ed04

080047ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80047f4:	4b0e      	ldr	r3, [pc, #56]	; (8004830 <prvGetNextExpireTime+0x44>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <prvGetNextExpireTime+0x16>
 80047fe:	2201      	movs	r2, #1
 8004800:	e000      	b.n	8004804 <prvGetNextExpireTime+0x18>
 8004802:	2200      	movs	r2, #0
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d105      	bne.n	800481c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004810:	4b07      	ldr	r3, [pc, #28]	; (8004830 <prvGetNextExpireTime+0x44>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	e001      	b.n	8004820 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004820:	68fb      	ldr	r3, [r7, #12]
    }
 8004822:	4618      	mov	r0, r3
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	200002dc 	.word	0x200002dc

08004834 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800483c:	f7ff f872 	bl	8003924 <xTaskGetTickCount>
 8004840:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004842:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <prvSampleTimeNow+0x3c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	429a      	cmp	r2, r3
 800484a:	d205      	bcs.n	8004858 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800484c:	f000 f912 	bl	8004a74 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	e002      	b.n	800485e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800485e:	4a04      	ldr	r2, [pc, #16]	; (8004870 <prvSampleTimeNow+0x3c>)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004864:	68fb      	ldr	r3, [r7, #12]
    }
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	200002ec 	.word	0x200002ec

08004874 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
 8004880:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	429a      	cmp	r2, r3
 8004898:	d812      	bhi.n	80048c0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	1ad2      	subs	r2, r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d302      	bcc.n	80048ae <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80048a8:	2301      	movs	r3, #1
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	e01b      	b.n	80048e6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80048ae:	4b10      	ldr	r3, [pc, #64]	; (80048f0 <prvInsertTimerInActiveList+0x7c>)
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	3304      	adds	r3, #4
 80048b6:	4619      	mov	r1, r3
 80048b8:	4610      	mov	r0, r2
 80048ba:	f7fe f8c2 	bl	8002a42 <vListInsert>
 80048be:	e012      	b.n	80048e6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d206      	bcs.n	80048d6 <prvInsertTimerInActiveList+0x62>
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d302      	bcc.n	80048d6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80048d0:	2301      	movs	r3, #1
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	e007      	b.n	80048e6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048d6:	4b07      	ldr	r3, [pc, #28]	; (80048f4 <prvInsertTimerInActiveList+0x80>)
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	3304      	adds	r3, #4
 80048de:	4619      	mov	r1, r3
 80048e0:	4610      	mov	r0, r2
 80048e2:	f7fe f8ae 	bl	8002a42 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80048e6:	697b      	ldr	r3, [r7, #20]
    }
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	200002e0 	.word	0x200002e0
 80048f4:	200002dc 	.word	0x200002dc

080048f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b088      	sub	sp, #32
 80048fc:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048fe:	e0a6      	b.n	8004a4e <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	f2c0 80a2 	blt.w	8004a4c <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d004      	beq.n	800491e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	3304      	adds	r3, #4
 8004918:	4618      	mov	r0, r3
 800491a:	f7fe f8cb 	bl	8002ab4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800491e:	1d3b      	adds	r3, r7, #4
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff ff87 	bl	8004834 <prvSampleTimeNow>
 8004926:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	3b01      	subs	r3, #1
 800492c:	2b08      	cmp	r3, #8
 800492e:	f200 808e 	bhi.w	8004a4e <prvProcessReceivedCommands+0x156>
 8004932:	a201      	add	r2, pc, #4	; (adr r2, 8004938 <prvProcessReceivedCommands+0x40>)
 8004934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004938:	0800495d 	.word	0x0800495d
 800493c:	0800495d 	.word	0x0800495d
 8004940:	080049c5 	.word	0x080049c5
 8004944:	080049d9 	.word	0x080049d9
 8004948:	08004a23 	.word	0x08004a23
 800494c:	0800495d 	.word	0x0800495d
 8004950:	0800495d 	.word	0x0800495d
 8004954:	080049c5 	.word	0x080049c5
 8004958:	080049d9 	.word	0x080049d9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004962:	f043 0301 	orr.w	r3, r3, #1
 8004966:	b2da      	uxtb	r2, r3
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	18d1      	adds	r1, r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	69f8      	ldr	r0, [r7, #28]
 800497c:	f7ff ff7a 	bl	8004874 <prvInsertTimerInActiveList>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d063      	beq.n	8004a4e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	d009      	beq.n	80049a8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	4413      	add	r3, r2
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	4619      	mov	r1, r3
 80049a0:	69f8      	ldr	r0, [r7, #28]
 80049a2:	f7ff fe71 	bl	8004688 <prvReloadTimer>
 80049a6:	e008      	b.n	80049ba <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049ae:	f023 0301 	bic.w	r3, r3, #1
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	69f8      	ldr	r0, [r7, #28]
 80049c0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80049c2:	e044      	b.n	8004a4e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049ca:	f023 0301 	bic.w	r3, r3, #1
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80049d6:	e03a      	b.n	8004a4e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049de:	f043 0301 	orr.w	r3, r3, #1
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10a      	bne.n	8004a0e <prvProcessReceivedCommands+0x116>
        __asm volatile
 80049f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fc:	f383 8811 	msr	BASEPRI, r3
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	617b      	str	r3, [r7, #20]
    }
 8004a0a:	bf00      	nop
 8004a0c:	e7fe      	b.n	8004a0c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	699a      	ldr	r2, [r3, #24]
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	18d1      	adds	r1, r2, r3
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	69f8      	ldr	r0, [r7, #28]
 8004a1c:	f7ff ff2a 	bl	8004874 <prvInsertTimerInActiveList>
                        break;
 8004a20:	e015      	b.n	8004a4e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d103      	bne.n	8004a38 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8004a30:	69f8      	ldr	r0, [r7, #28]
 8004a32:	f000 fbcb 	bl	80051cc <vPortFree>
 8004a36:	e00a      	b.n	8004a4e <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a3e:	f023 0301 	bic.w	r3, r3, #1
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004a4a:	e000      	b.n	8004a4e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004a4c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a4e:	4b08      	ldr	r3, [pc, #32]	; (8004a70 <prvProcessReceivedCommands+0x178>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f107 0108 	add.w	r1, r7, #8
 8004a56:	2200      	movs	r2, #0
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7fe f95d 	bl	8002d18 <xQueueReceive>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f47f af4d 	bne.w	8004900 <prvProcessReceivedCommands+0x8>
        }
    }
 8004a66:	bf00      	nop
 8004a68:	bf00      	nop
 8004a6a:	3720      	adds	r7, #32
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	200002e4 	.word	0x200002e4

08004a74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a7a:	e009      	b.n	8004a90 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a7c:	4b0e      	ldr	r3, [pc, #56]	; (8004ab8 <prvSwitchTimerLists+0x44>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004a86:	f04f 31ff 	mov.w	r1, #4294967295
 8004a8a:	6838      	ldr	r0, [r7, #0]
 8004a8c:	f7ff fe1e 	bl	80046cc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a90:	4b09      	ldr	r3, [pc, #36]	; (8004ab8 <prvSwitchTimerLists+0x44>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1f0      	bne.n	8004a7c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004a9a:	4b07      	ldr	r3, [pc, #28]	; (8004ab8 <prvSwitchTimerLists+0x44>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004aa0:	4b06      	ldr	r3, [pc, #24]	; (8004abc <prvSwitchTimerLists+0x48>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a04      	ldr	r2, [pc, #16]	; (8004ab8 <prvSwitchTimerLists+0x44>)
 8004aa6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004aa8:	4a04      	ldr	r2, [pc, #16]	; (8004abc <prvSwitchTimerLists+0x48>)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6013      	str	r3, [r2, #0]
    }
 8004aae:	bf00      	nop
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	200002dc 	.word	0x200002dc
 8004abc:	200002e0 	.word	0x200002e0

08004ac0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004ac4:	f000 f960 	bl	8004d88 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004ac8:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <prvCheckForValidListAndQueue+0x54>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d11d      	bne.n	8004b0c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004ad0:	4811      	ldr	r0, [pc, #68]	; (8004b18 <prvCheckForValidListAndQueue+0x58>)
 8004ad2:	f7fd ff65 	bl	80029a0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004ad6:	4811      	ldr	r0, [pc, #68]	; (8004b1c <prvCheckForValidListAndQueue+0x5c>)
 8004ad8:	f7fd ff62 	bl	80029a0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004adc:	4b10      	ldr	r3, [pc, #64]	; (8004b20 <prvCheckForValidListAndQueue+0x60>)
 8004ade:	4a0e      	ldr	r2, [pc, #56]	; (8004b18 <prvCheckForValidListAndQueue+0x58>)
 8004ae0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004ae2:	4b10      	ldr	r3, [pc, #64]	; (8004b24 <prvCheckForValidListAndQueue+0x64>)
 8004ae4:	4a0d      	ldr	r2, [pc, #52]	; (8004b1c <prvCheckForValidListAndQueue+0x5c>)
 8004ae6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004ae8:	2200      	movs	r2, #0
 8004aea:	210c      	movs	r1, #12
 8004aec:	200a      	movs	r0, #10
 8004aee:	f7fe f89b 	bl	8002c28 <xQueueGenericCreate>
 8004af2:	4603      	mov	r3, r0
 8004af4:	4a07      	ldr	r2, [pc, #28]	; (8004b14 <prvCheckForValidListAndQueue+0x54>)
 8004af6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004af8:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <prvCheckForValidListAndQueue+0x54>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d005      	beq.n	8004b0c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b00:	4b04      	ldr	r3, [pc, #16]	; (8004b14 <prvCheckForValidListAndQueue+0x54>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4908      	ldr	r1, [pc, #32]	; (8004b28 <prvCheckForValidListAndQueue+0x68>)
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7fe faa4 	bl	8003054 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004b0c:	f000 f96c 	bl	8004de8 <vPortExitCritical>
    }
 8004b10:	bf00      	nop
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	200002e4 	.word	0x200002e4
 8004b18:	200002b4 	.word	0x200002b4
 8004b1c:	200002c8 	.word	0x200002c8
 8004b20:	200002dc 	.word	0x200002dc
 8004b24:	200002e0 	.word	0x200002e0
 8004b28:	08007890 	.word	0x08007890

08004b2c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3b04      	subs	r3, #4
 8004b3c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b44:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	3b04      	subs	r3, #4
 8004b4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f023 0201 	bic.w	r2, r3, #1
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	3b04      	subs	r3, #4
 8004b5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004b5c:	4a0c      	ldr	r2, [pc, #48]	; (8004b90 <pxPortInitialiseStack+0x64>)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	3b14      	subs	r3, #20
 8004b66:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3b04      	subs	r3, #4
 8004b72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f06f 0202 	mvn.w	r2, #2
 8004b7a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	3b20      	subs	r3, #32
 8004b80:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004b82:	68fb      	ldr	r3, [r7, #12]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	08004b95 	.word	0x08004b95

08004b94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004b9e:	4b12      	ldr	r3, [pc, #72]	; (8004be8 <prvTaskExitError+0x54>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba6:	d00a      	beq.n	8004bbe <prvTaskExitError+0x2a>
        __asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	60fb      	str	r3, [r7, #12]
    }
 8004bba:	bf00      	nop
 8004bbc:	e7fe      	b.n	8004bbc <prvTaskExitError+0x28>
        __asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	60bb      	str	r3, [r7, #8]
    }
 8004bd0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004bd2:	bf00      	nop
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0fc      	beq.n	8004bd4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004bda:	bf00      	nop
 8004bdc:	bf00      	nop
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	20000010 	.word	0x20000010
 8004bec:	00000000 	.word	0x00000000

08004bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004bf0:	4b07      	ldr	r3, [pc, #28]	; (8004c10 <pxCurrentTCBConst2>)
 8004bf2:	6819      	ldr	r1, [r3, #0]
 8004bf4:	6808      	ldr	r0, [r1, #0]
 8004bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bfa:	f380 8809 	msr	PSP, r0
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f04f 0000 	mov.w	r0, #0
 8004c06:	f380 8811 	msr	BASEPRI, r0
 8004c0a:	4770      	bx	lr
 8004c0c:	f3af 8000 	nop.w

08004c10 <pxCurrentTCBConst2>:
 8004c10:	200001b0 	.word	0x200001b0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop

08004c18 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004c18:	4808      	ldr	r0, [pc, #32]	; (8004c3c <prvPortStartFirstTask+0x24>)
 8004c1a:	6800      	ldr	r0, [r0, #0]
 8004c1c:	6800      	ldr	r0, [r0, #0]
 8004c1e:	f380 8808 	msr	MSP, r0
 8004c22:	f04f 0000 	mov.w	r0, #0
 8004c26:	f380 8814 	msr	CONTROL, r0
 8004c2a:	b662      	cpsie	i
 8004c2c:	b661      	cpsie	f
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	df00      	svc	0
 8004c38:	bf00      	nop
 8004c3a:	0000      	.short	0x0000
 8004c3c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004c40:	bf00      	nop
 8004c42:	bf00      	nop

08004c44 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c4a:	4b46      	ldr	r3, [pc, #280]	; (8004d64 <xPortStartScheduler+0x120>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a46      	ldr	r2, [pc, #280]	; (8004d68 <xPortStartScheduler+0x124>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d10a      	bne.n	8004c6a <xPortStartScheduler+0x26>
        __asm volatile
 8004c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	613b      	str	r3, [r7, #16]
    }
 8004c66:	bf00      	nop
 8004c68:	e7fe      	b.n	8004c68 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c6a:	4b3e      	ldr	r3, [pc, #248]	; (8004d64 <xPortStartScheduler+0x120>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a3f      	ldr	r2, [pc, #252]	; (8004d6c <xPortStartScheduler+0x128>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d10a      	bne.n	8004c8a <xPortStartScheduler+0x46>
        __asm volatile
 8004c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	60fb      	str	r3, [r7, #12]
    }
 8004c86:	bf00      	nop
 8004c88:	e7fe      	b.n	8004c88 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c8a:	4b39      	ldr	r3, [pc, #228]	; (8004d70 <xPortStartScheduler+0x12c>)
 8004c8c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	22ff      	movs	r2, #255	; 0xff
 8004c9a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ca4:	78fb      	ldrb	r3, [r7, #3]
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	4b31      	ldr	r3, [pc, #196]	; (8004d74 <xPortStartScheduler+0x130>)
 8004cb0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cb2:	4b31      	ldr	r3, [pc, #196]	; (8004d78 <xPortStartScheduler+0x134>)
 8004cb4:	2207      	movs	r2, #7
 8004cb6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cb8:	e009      	b.n	8004cce <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8004cba:	4b2f      	ldr	r3, [pc, #188]	; (8004d78 <xPortStartScheduler+0x134>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	4a2d      	ldr	r2, [pc, #180]	; (8004d78 <xPortStartScheduler+0x134>)
 8004cc2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004cc4:	78fb      	ldrb	r3, [r7, #3]
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cce:	78fb      	ldrb	r3, [r7, #3]
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd6:	2b80      	cmp	r3, #128	; 0x80
 8004cd8:	d0ef      	beq.n	8004cba <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cda:	4b27      	ldr	r3, [pc, #156]	; (8004d78 <xPortStartScheduler+0x134>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f1c3 0307 	rsb	r3, r3, #7
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d00a      	beq.n	8004cfc <xPortStartScheduler+0xb8>
        __asm volatile
 8004ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cea:	f383 8811 	msr	BASEPRI, r3
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	60bb      	str	r3, [r7, #8]
    }
 8004cf8:	bf00      	nop
 8004cfa:	e7fe      	b.n	8004cfa <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004cfc:	4b1e      	ldr	r3, [pc, #120]	; (8004d78 <xPortStartScheduler+0x134>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	021b      	lsls	r3, r3, #8
 8004d02:	4a1d      	ldr	r2, [pc, #116]	; (8004d78 <xPortStartScheduler+0x134>)
 8004d04:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d06:	4b1c      	ldr	r3, [pc, #112]	; (8004d78 <xPortStartScheduler+0x134>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d0e:	4a1a      	ldr	r2, [pc, #104]	; (8004d78 <xPortStartScheduler+0x134>)
 8004d10:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004d1a:	4b18      	ldr	r3, [pc, #96]	; (8004d7c <xPortStartScheduler+0x138>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a17      	ldr	r2, [pc, #92]	; (8004d7c <xPortStartScheduler+0x138>)
 8004d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d24:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004d26:	4b15      	ldr	r3, [pc, #84]	; (8004d7c <xPortStartScheduler+0x138>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a14      	ldr	r2, [pc, #80]	; (8004d7c <xPortStartScheduler+0x138>)
 8004d2c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d30:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004d32:	f000 f8db 	bl	8004eec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004d36:	4b12      	ldr	r3, [pc, #72]	; (8004d80 <xPortStartScheduler+0x13c>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004d3c:	f000 f8fa 	bl	8004f34 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d40:	4b10      	ldr	r3, [pc, #64]	; (8004d84 <xPortStartScheduler+0x140>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a0f      	ldr	r2, [pc, #60]	; (8004d84 <xPortStartScheduler+0x140>)
 8004d46:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d4a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004d4c:	f7ff ff64 	bl	8004c18 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004d50:	f7fe ff24 	bl	8003b9c <vTaskSwitchContext>
    prvTaskExitError();
 8004d54:	f7ff ff1e 	bl	8004b94 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	e000ed00 	.word	0xe000ed00
 8004d68:	410fc271 	.word	0x410fc271
 8004d6c:	410fc270 	.word	0x410fc270
 8004d70:	e000e400 	.word	0xe000e400
 8004d74:	200002f0 	.word	0x200002f0
 8004d78:	200002f4 	.word	0x200002f4
 8004d7c:	e000ed20 	.word	0xe000ed20
 8004d80:	20000010 	.word	0x20000010
 8004d84:	e000ef34 	.word	0xe000ef34

08004d88 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
        __asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	607b      	str	r3, [r7, #4]
    }
 8004da0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004da2:	4b0f      	ldr	r3, [pc, #60]	; (8004de0 <vPortEnterCritical+0x58>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3301      	adds	r3, #1
 8004da8:	4a0d      	ldr	r2, [pc, #52]	; (8004de0 <vPortEnterCritical+0x58>)
 8004daa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004dac:	4b0c      	ldr	r3, [pc, #48]	; (8004de0 <vPortEnterCritical+0x58>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d10f      	bne.n	8004dd4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004db4:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <vPortEnterCritical+0x5c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <vPortEnterCritical+0x4c>
        __asm volatile
 8004dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc2:	f383 8811 	msr	BASEPRI, r3
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	603b      	str	r3, [r7, #0]
    }
 8004dd0:	bf00      	nop
 8004dd2:	e7fe      	b.n	8004dd2 <vPortEnterCritical+0x4a>
    }
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	20000010 	.word	0x20000010
 8004de4:	e000ed04 	.word	0xe000ed04

08004de8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004dee:	4b12      	ldr	r3, [pc, #72]	; (8004e38 <vPortExitCritical+0x50>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10a      	bne.n	8004e0c <vPortExitCritical+0x24>
        __asm volatile
 8004df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfa:	f383 8811 	msr	BASEPRI, r3
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	607b      	str	r3, [r7, #4]
    }
 8004e08:	bf00      	nop
 8004e0a:	e7fe      	b.n	8004e0a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004e0c:	4b0a      	ldr	r3, [pc, #40]	; (8004e38 <vPortExitCritical+0x50>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	3b01      	subs	r3, #1
 8004e12:	4a09      	ldr	r2, [pc, #36]	; (8004e38 <vPortExitCritical+0x50>)
 8004e14:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004e16:	4b08      	ldr	r3, [pc, #32]	; (8004e38 <vPortExitCritical+0x50>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d105      	bne.n	8004e2a <vPortExitCritical+0x42>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004e28:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004e2a:	bf00      	nop
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	20000010 	.word	0x20000010
 8004e3c:	00000000 	.word	0x00000000

08004e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004e40:	f3ef 8009 	mrs	r0, PSP
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	4b15      	ldr	r3, [pc, #84]	; (8004ea0 <pxCurrentTCBConst>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	f01e 0f10 	tst.w	lr, #16
 8004e50:	bf08      	it	eq
 8004e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e5a:	6010      	str	r0, [r2, #0]
 8004e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e64:	f380 8811 	msr	BASEPRI, r0
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f7fe fe94 	bl	8003b9c <vTaskSwitchContext>
 8004e74:	f04f 0000 	mov.w	r0, #0
 8004e78:	f380 8811 	msr	BASEPRI, r0
 8004e7c:	bc09      	pop	{r0, r3}
 8004e7e:	6819      	ldr	r1, [r3, #0]
 8004e80:	6808      	ldr	r0, [r1, #0]
 8004e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e86:	f01e 0f10 	tst.w	lr, #16
 8004e8a:	bf08      	it	eq
 8004e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e90:	f380 8809 	msr	PSP, r0
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	f3af 8000 	nop.w

08004ea0 <pxCurrentTCBConst>:
 8004ea0:	200001b0 	.word	0x200001b0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004ea4:	bf00      	nop
 8004ea6:	bf00      	nop

08004ea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
        __asm volatile
 8004eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	607b      	str	r3, [r7, #4]
    }
 8004ec0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004ec2:	f7fe fd51 	bl	8003968 <xTaskIncrementTick>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ecc:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <SysTick_Handler+0x40>)
 8004ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	f383 8811 	msr	BASEPRI, r3
    }
 8004ede:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004ee0:	bf00      	nop
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	e000ed04 	.word	0xe000ed04

08004eec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ef0:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <vPortSetupTimerInterrupt+0x34>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ef6:	4b0b      	ldr	r3, [pc, #44]	; (8004f24 <vPortSetupTimerInterrupt+0x38>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004efc:	4b0a      	ldr	r3, [pc, #40]	; (8004f28 <vPortSetupTimerInterrupt+0x3c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a0a      	ldr	r2, [pc, #40]	; (8004f2c <vPortSetupTimerInterrupt+0x40>)
 8004f02:	fba2 2303 	umull	r2, r3, r2, r3
 8004f06:	099b      	lsrs	r3, r3, #6
 8004f08:	4a09      	ldr	r2, [pc, #36]	; (8004f30 <vPortSetupTimerInterrupt+0x44>)
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f0e:	4b04      	ldr	r3, [pc, #16]	; (8004f20 <vPortSetupTimerInterrupt+0x34>)
 8004f10:	2207      	movs	r2, #7
 8004f12:	601a      	str	r2, [r3, #0]
}
 8004f14:	bf00      	nop
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	e000e010 	.word	0xe000e010
 8004f24:	e000e018 	.word	0xe000e018
 8004f28:	20000000 	.word	0x20000000
 8004f2c:	10624dd3 	.word	0x10624dd3
 8004f30:	e000e014 	.word	0xe000e014

08004f34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004f34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f44 <vPortEnableVFP+0x10>
 8004f38:	6801      	ldr	r1, [r0, #0]
 8004f3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f3e:	6001      	str	r1, [r0, #0]
 8004f40:	4770      	bx	lr
 8004f42:	0000      	.short	0x0000
 8004f44:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004f48:	bf00      	nop
 8004f4a:	bf00      	nop

08004f4c <vSetVarulMaxPRIGROUPValue>:
/*-----------------------------------------------------------*/
/////////
#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue( void )
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f52:	4b1f      	ldr	r3, [pc, #124]	; (8004fd0 <vSetVarulMaxPRIGROUPValue+0x84>)
 8004f54:	60fb      	str	r3, [r7, #12]
	volatile uint8_t ucMaxPriorityValue;
	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	22ff      	movs	r2, #255	; 0xff
 8004f5a:	701a      	strb	r2, [r3, #0]
	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	71fb      	strb	r3, [r7, #7]
	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f64:	4b1b      	ldr	r3, [pc, #108]	; (8004fd4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004f66:	2207      	movs	r2, #7
 8004f68:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f6a:	e009      	b.n	8004f80 <vSetVarulMaxPRIGROUPValue+0x34>
	{
		ulMaxPRIGROUPValue--;
 8004f6c:	4b19      	ldr	r3, [pc, #100]	; (8004fd4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3b01      	subs	r3, #1
 8004f72:	4a18      	ldr	r2, [pc, #96]	; (8004fd4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004f74:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f76:	79fb      	ldrb	r3, [r7, #7]
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	71fb      	strb	r3, [r7, #7]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f80:	79fb      	ldrb	r3, [r7, #7]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f88:	2b80      	cmp	r3, #128	; 0x80
 8004f8a:	d0ef      	beq.n	8004f6c <vSetVarulMaxPRIGROUPValue+0x20>
#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f8c:	4b11      	ldr	r3, [pc, #68]	; (8004fd4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f1c3 0307 	rsb	r3, r3, #7
 8004f94:	2b04      	cmp	r3, #4
 8004f96:	d00a      	beq.n	8004fae <vSetVarulMaxPRIGROUPValue+0x62>
        __asm volatile
 8004f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9c:	f383 8811 	msr	BASEPRI, r3
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	60bb      	str	r3, [r7, #8]
    }
 8004faa:	bf00      	nop
 8004fac:	e7fe      	b.n	8004fac <vSetVarulMaxPRIGROUPValue+0x60>
	}
#endif
	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004fae:	4b09      	ldr	r3, [pc, #36]	; (8004fd4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	021b      	lsls	r3, r3, #8
 8004fb4:	4a07      	ldr	r2, [pc, #28]	; (8004fd4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004fb6:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004fb8:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004fc0:	4a04      	ldr	r2, [pc, #16]	; (8004fd4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004fc2:	6013      	str	r3, [r2, #0]
}
 8004fc4:	bf00      	nop
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	e000e400 	.word	0xe000e400
 8004fd4:	200002f4 	.word	0x200002f4

08004fd8 <vPortValidateInterruptPriority>:

////////
#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004fde:	f3ef 8305 	mrs	r3, IPSR
 8004fe2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b0f      	cmp	r3, #15
 8004fe8:	d914      	bls.n	8005014 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004fea:	4a17      	ldr	r2, [pc, #92]	; (8005048 <vPortValidateInterruptPriority+0x70>)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4413      	add	r3, r2
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ff4:	4b15      	ldr	r3, [pc, #84]	; (800504c <vPortValidateInterruptPriority+0x74>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	7afa      	ldrb	r2, [r7, #11]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d20a      	bcs.n	8005014 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	607b      	str	r3, [r7, #4]
    }
 8005010:	bf00      	nop
 8005012:	e7fe      	b.n	8005012 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005014:	4b0e      	ldr	r3, [pc, #56]	; (8005050 <vPortValidateInterruptPriority+0x78>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800501c:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <vPortValidateInterruptPriority+0x7c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	429a      	cmp	r2, r3
 8005022:	d90a      	bls.n	800503a <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	603b      	str	r3, [r7, #0]
    }
 8005036:	bf00      	nop
 8005038:	e7fe      	b.n	8005038 <vPortValidateInterruptPriority+0x60>
    }
 800503a:	bf00      	nop
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	e000e3f0 	.word	0xe000e3f0
 800504c:	200002f0 	.word	0x200002f0
 8005050:	e000ed0c 	.word	0xe000ed0c
 8005054:	200002f4 	.word	0x200002f4

08005058 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b08a      	sub	sp, #40	; 0x28
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005060:	2300      	movs	r3, #0
 8005062:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8005064:	f7fe fb50 	bl	8003708 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005068:	4b53      	ldr	r3, [pc, #332]	; (80051b8 <pvPortMalloc+0x160>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005070:	f000 f908 	bl	8005284 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d012      	beq.n	80050a0 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800507a:	2208      	movs	r2, #8
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	3308      	adds	r3, #8
 8005086:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	43db      	mvns	r3, r3
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	429a      	cmp	r2, r3
 8005090:	d804      	bhi.n	800509c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	4413      	add	r3, r2
 8005098:	607b      	str	r3, [r7, #4]
 800509a:	e001      	b.n	80050a0 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800509c:	2300      	movs	r3, #0
 800509e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	db70      	blt.n	8005188 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d06d      	beq.n	8005188 <pvPortMalloc+0x130>
 80050ac:	4b43      	ldr	r3, [pc, #268]	; (80051bc <pvPortMalloc+0x164>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d868      	bhi.n	8005188 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80050b6:	4b42      	ldr	r3, [pc, #264]	; (80051c0 <pvPortMalloc+0x168>)
 80050b8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80050ba:	4b41      	ldr	r3, [pc, #260]	; (80051c0 <pvPortMalloc+0x168>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050c0:	e004      	b.n	80050cc <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d903      	bls.n	80050de <pvPortMalloc+0x86>
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f1      	bne.n	80050c2 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80050de:	4b36      	ldr	r3, [pc, #216]	; (80051b8 <pvPortMalloc+0x160>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d04f      	beq.n	8005188 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2208      	movs	r2, #8
 80050ee:	4413      	add	r3, r2
 80050f0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	1ad2      	subs	r2, r2, r3
 8005102:	2308      	movs	r3, #8
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	429a      	cmp	r2, r3
 8005108:	d91f      	bls.n	800514a <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800510a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4413      	add	r3, r2
 8005110:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00a      	beq.n	8005132 <pvPortMalloc+0xda>
        __asm volatile
 800511c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	613b      	str	r3, [r7, #16]
    }
 800512e:	bf00      	nop
 8005130:	e7fe      	b.n	8005130 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	1ad2      	subs	r2, r2, r3
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005144:	6978      	ldr	r0, [r7, #20]
 8005146:	f000 f8f9 	bl	800533c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800514a:	4b1c      	ldr	r3, [pc, #112]	; (80051bc <pvPortMalloc+0x164>)
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	4a19      	ldr	r2, [pc, #100]	; (80051bc <pvPortMalloc+0x164>)
 8005156:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005158:	4b18      	ldr	r3, [pc, #96]	; (80051bc <pvPortMalloc+0x164>)
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	4b19      	ldr	r3, [pc, #100]	; (80051c4 <pvPortMalloc+0x16c>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d203      	bcs.n	800516c <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005164:	4b15      	ldr	r3, [pc, #84]	; (80051bc <pvPortMalloc+0x164>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a16      	ldr	r2, [pc, #88]	; (80051c4 <pvPortMalloc+0x16c>)
 800516a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	2200      	movs	r2, #0
 800517c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800517e:	4b12      	ldr	r3, [pc, #72]	; (80051c8 <pvPortMalloc+0x170>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3301      	adds	r3, #1
 8005184:	4a10      	ldr	r2, [pc, #64]	; (80051c8 <pvPortMalloc+0x170>)
 8005186:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005188:	f7fe facc 	bl	8003724 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <pvPortMalloc+0x154>
        __asm volatile
 8005196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519a:	f383 8811 	msr	BASEPRI, r3
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f3bf 8f4f 	dsb	sy
 80051a6:	60fb      	str	r3, [r7, #12]
    }
 80051a8:	bf00      	nop
 80051aa:	e7fe      	b.n	80051aa <pvPortMalloc+0x152>
    return pvReturn;
 80051ac:	69fb      	ldr	r3, [r7, #28]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3728      	adds	r7, #40	; 0x28
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	2000cb00 	.word	0x2000cb00
 80051bc:	2000cb04 	.word	0x2000cb04
 80051c0:	2000caf8 	.word	0x2000caf8
 80051c4:	2000cb08 	.word	0x2000cb08
 80051c8:	2000cb0c 	.word	0x2000cb0c

080051cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d049      	beq.n	8005272 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80051de:	2308      	movs	r3, #8
 80051e0:	425b      	negs	r3, r3
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	4413      	add	r3, r2
 80051e6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	db0a      	blt.n	800520a <vPortFree+0x3e>
        __asm volatile
 80051f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	60fb      	str	r3, [r7, #12]
    }
 8005206:	bf00      	nop
 8005208:	e7fe      	b.n	8005208 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00a      	beq.n	8005228 <vPortFree+0x5c>
        __asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	60bb      	str	r3, [r7, #8]
    }
 8005224:	bf00      	nop
 8005226:	e7fe      	b.n	8005226 <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	0fdb      	lsrs	r3, r3, #31
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	d01c      	beq.n	8005272 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d118      	bne.n	8005272 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800524c:	f7fe fa5c 	bl	8003708 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	4b09      	ldr	r3, [pc, #36]	; (800527c <vPortFree+0xb0>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4413      	add	r3, r2
 800525a:	4a08      	ldr	r2, [pc, #32]	; (800527c <vPortFree+0xb0>)
 800525c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800525e:	6938      	ldr	r0, [r7, #16]
 8005260:	f000 f86c 	bl	800533c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005264:	4b06      	ldr	r3, [pc, #24]	; (8005280 <vPortFree+0xb4>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3301      	adds	r3, #1
 800526a:	4a05      	ldr	r2, [pc, #20]	; (8005280 <vPortFree+0xb4>)
 800526c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800526e:	f7fe fa59 	bl	8003724 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005272:	bf00      	nop
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	2000cb04 	.word	0x2000cb04
 8005280:	2000cb10 	.word	0x2000cb10

08005284 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800528a:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 800528e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005290:	4b25      	ldr	r3, [pc, #148]	; (8005328 <prvHeapInit+0xa4>)
 8005292:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00c      	beq.n	80052b8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	3307      	adds	r3, #7
 80052a2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0307 	bic.w	r3, r3, #7
 80052aa:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	4a1d      	ldr	r2, [pc, #116]	; (8005328 <prvHeapInit+0xa4>)
 80052b4:	4413      	add	r3, r2
 80052b6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052bc:	4a1b      	ldr	r2, [pc, #108]	; (800532c <prvHeapInit+0xa8>)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80052c2:	4b1a      	ldr	r3, [pc, #104]	; (800532c <prvHeapInit+0xa8>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	4413      	add	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80052d0:	2208      	movs	r2, #8
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	1a9b      	subs	r3, r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 0307 	bic.w	r3, r3, #7
 80052de:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4a13      	ldr	r2, [pc, #76]	; (8005330 <prvHeapInit+0xac>)
 80052e4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80052e6:	4b12      	ldr	r3, [pc, #72]	; (8005330 <prvHeapInit+0xac>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2200      	movs	r2, #0
 80052ec:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80052ee:	4b10      	ldr	r3, [pc, #64]	; (8005330 <prvHeapInit+0xac>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	1ad2      	subs	r2, r2, r3
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005304:	4b0a      	ldr	r3, [pc, #40]	; (8005330 <prvHeapInit+0xac>)
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	4a08      	ldr	r2, [pc, #32]	; (8005334 <prvHeapInit+0xb0>)
 8005312:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	4a07      	ldr	r2, [pc, #28]	; (8005338 <prvHeapInit+0xb4>)
 800531a:	6013      	str	r3, [r2, #0]
}
 800531c:	bf00      	nop
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	200002f8 	.word	0x200002f8
 800532c:	2000caf8 	.word	0x2000caf8
 8005330:	2000cb00 	.word	0x2000cb00
 8005334:	2000cb08 	.word	0x2000cb08
 8005338:	2000cb04 	.word	0x2000cb04

0800533c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005344:	4b28      	ldr	r3, [pc, #160]	; (80053e8 <prvInsertBlockIntoFreeList+0xac>)
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	e002      	b.n	8005350 <prvInsertBlockIntoFreeList+0x14>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	429a      	cmp	r2, r3
 8005358:	d8f7      	bhi.n	800534a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	4413      	add	r3, r2
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	429a      	cmp	r2, r3
 800536a:	d108      	bne.n	800537e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	441a      	add	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	441a      	add	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	429a      	cmp	r2, r3
 8005390:	d118      	bne.n	80053c4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	4b15      	ldr	r3, [pc, #84]	; (80053ec <prvInsertBlockIntoFreeList+0xb0>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d00d      	beq.n	80053ba <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	441a      	add	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	e008      	b.n	80053cc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80053ba:	4b0c      	ldr	r3, [pc, #48]	; (80053ec <prvInsertBlockIntoFreeList+0xb0>)
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	e003      	b.n	80053cc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d002      	beq.n	80053da <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80053da:	bf00      	nop
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	2000caf8 	.word	0x2000caf8
 80053ec:	2000cb00 	.word	0x2000cb00

080053f0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80053f4:	4803      	ldr	r0, [pc, #12]	; (8005404 <_cbSendSystemDesc+0x14>)
 80053f6:	f001 faaf 	bl	8006958 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80053fa:	4803      	ldr	r0, [pc, #12]	; (8005408 <_cbSendSystemDesc+0x18>)
 80053fc:	f001 faac 	bl	8006958 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005400:	bf00      	nop
 8005402:	bd80      	pop	{r7, pc}
 8005404:	08007898 	.word	0x08007898
 8005408:	080078cc 	.word	0x080078cc

0800540c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005410:	4b06      	ldr	r3, [pc, #24]	; (800542c <SEGGER_SYSVIEW_Conf+0x20>)
 8005412:	6818      	ldr	r0, [r3, #0]
 8005414:	4b05      	ldr	r3, [pc, #20]	; (800542c <SEGGER_SYSVIEW_Conf+0x20>)
 8005416:	6819      	ldr	r1, [r3, #0]
 8005418:	4b05      	ldr	r3, [pc, #20]	; (8005430 <SEGGER_SYSVIEW_Conf+0x24>)
 800541a:	4a06      	ldr	r2, [pc, #24]	; (8005434 <SEGGER_SYSVIEW_Conf+0x28>)
 800541c:	f000 fe1a 	bl	8006054 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005420:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005424:	f000 fe5a 	bl	80060dc <SEGGER_SYSVIEW_SetRAMBase>
}
 8005428:	bf00      	nop
 800542a:	bd80      	pop	{r7, pc}
 800542c:	20000000 	.word	0x20000000
 8005430:	080053f1 	.word	0x080053f1
 8005434:	08007968 	.word	0x08007968

08005438 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800543a:	b085      	sub	sp, #20
 800543c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800543e:	2300      	movs	r3, #0
 8005440:	607b      	str	r3, [r7, #4]
 8005442:	e033      	b.n	80054ac <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005444:	491e      	ldr	r1, [pc, #120]	; (80054c0 <_cbSendTaskList+0x88>)
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	6818      	ldr	r0, [r3, #0]
 8005454:	491a      	ldr	r1, [pc, #104]	; (80054c0 <_cbSendTaskList+0x88>)
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	4613      	mov	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	440b      	add	r3, r1
 8005462:	3304      	adds	r3, #4
 8005464:	6819      	ldr	r1, [r3, #0]
 8005466:	4c16      	ldr	r4, [pc, #88]	; (80054c0 <_cbSendTaskList+0x88>)
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	4613      	mov	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4423      	add	r3, r4
 8005474:	3308      	adds	r3, #8
 8005476:	681c      	ldr	r4, [r3, #0]
 8005478:	4d11      	ldr	r5, [pc, #68]	; (80054c0 <_cbSendTaskList+0x88>)
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	4613      	mov	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	442b      	add	r3, r5
 8005486:	330c      	adds	r3, #12
 8005488:	681d      	ldr	r5, [r3, #0]
 800548a:	4e0d      	ldr	r6, [pc, #52]	; (80054c0 <_cbSendTaskList+0x88>)
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	4613      	mov	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4433      	add	r3, r6
 8005498:	3310      	adds	r3, #16
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	462b      	mov	r3, r5
 80054a0:	4622      	mov	r2, r4
 80054a2:	f000 f979 	bl	8005798 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	3301      	adds	r3, #1
 80054aa:	607b      	str	r3, [r7, #4]
 80054ac:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <_cbSendTaskList+0x8c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d3c6      	bcc.n	8005444 <_cbSendTaskList+0xc>
  }
}
 80054b6:	bf00      	nop
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054c0:	2000cb14 	.word	0x2000cb14
 80054c4:	2000cbb4 	.word	0x2000cbb4

080054c8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80054c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054cc:	b082      	sub	sp, #8
 80054ce:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80054d0:	f7fe fa38 	bl	8003944 <xTaskGetTickCountFromISR>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2200      	movs	r2, #0
 80054d8:	469a      	mov	sl, r3
 80054da:	4693      	mov	fp, r2
 80054dc:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80054e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	f04f 0a00 	mov.w	sl, #0
 80054ec:	f04f 0b00 	mov.w	fp, #0
 80054f0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80054f4:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80054f8:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80054fc:	4652      	mov	r2, sl
 80054fe:	465b      	mov	r3, fp
 8005500:	1a14      	subs	r4, r2, r0
 8005502:	eb63 0501 	sbc.w	r5, r3, r1
 8005506:	f04f 0200 	mov.w	r2, #0
 800550a:	f04f 0300 	mov.w	r3, #0
 800550e:	00ab      	lsls	r3, r5, #2
 8005510:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005514:	00a2      	lsls	r2, r4, #2
 8005516:	4614      	mov	r4, r2
 8005518:	461d      	mov	r5, r3
 800551a:	eb14 0800 	adds.w	r8, r4, r0
 800551e:	eb45 0901 	adc.w	r9, r5, r1
 8005522:	f04f 0200 	mov.w	r2, #0
 8005526:	f04f 0300 	mov.w	r3, #0
 800552a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800552e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005532:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005536:	4690      	mov	r8, r2
 8005538:	4699      	mov	r9, r3
 800553a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800553e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005542:	4610      	mov	r0, r2
 8005544:	4619      	mov	r1, r3
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005550 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af02      	add	r7, sp, #8
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800555e:	2205      	movs	r2, #5
 8005560:	492b      	ldr	r1, [pc, #172]	; (8005610 <SYSVIEW_AddTask+0xc0>)
 8005562:	68b8      	ldr	r0, [r7, #8]
 8005564:	f001 fca6 	bl	8006eb4 <memcmp>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d04b      	beq.n	8005606 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800556e:	4b29      	ldr	r3, [pc, #164]	; (8005614 <SYSVIEW_AddTask+0xc4>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b07      	cmp	r3, #7
 8005574:	d903      	bls.n	800557e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005576:	4828      	ldr	r0, [pc, #160]	; (8005618 <SYSVIEW_AddTask+0xc8>)
 8005578:	f001 fc1c 	bl	8006db4 <SEGGER_SYSVIEW_Warn>
    return;
 800557c:	e044      	b.n	8005608 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800557e:	4b25      	ldr	r3, [pc, #148]	; (8005614 <SYSVIEW_AddTask+0xc4>)
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	4926      	ldr	r1, [pc, #152]	; (800561c <SYSVIEW_AddTask+0xcc>)
 8005584:	4613      	mov	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	440b      	add	r3, r1
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005592:	4b20      	ldr	r3, [pc, #128]	; (8005614 <SYSVIEW_AddTask+0xc4>)
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	4921      	ldr	r1, [pc, #132]	; (800561c <SYSVIEW_AddTask+0xcc>)
 8005598:	4613      	mov	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	440b      	add	r3, r1
 80055a2:	3304      	adds	r3, #4
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80055a8:	4b1a      	ldr	r3, [pc, #104]	; (8005614 <SYSVIEW_AddTask+0xc4>)
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	491b      	ldr	r1, [pc, #108]	; (800561c <SYSVIEW_AddTask+0xcc>)
 80055ae:	4613      	mov	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	3308      	adds	r3, #8
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80055be:	4b15      	ldr	r3, [pc, #84]	; (8005614 <SYSVIEW_AddTask+0xc4>)
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	4916      	ldr	r1, [pc, #88]	; (800561c <SYSVIEW_AddTask+0xcc>)
 80055c4:	4613      	mov	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	4413      	add	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	440b      	add	r3, r1
 80055ce:	330c      	adds	r3, #12
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80055d4:	4b0f      	ldr	r3, [pc, #60]	; (8005614 <SYSVIEW_AddTask+0xc4>)
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	4910      	ldr	r1, [pc, #64]	; (800561c <SYSVIEW_AddTask+0xcc>)
 80055da:	4613      	mov	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4413      	add	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	440b      	add	r3, r1
 80055e4:	3310      	adds	r3, #16
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80055ea:	4b0a      	ldr	r3, [pc, #40]	; (8005614 <SYSVIEW_AddTask+0xc4>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3301      	adds	r3, #1
 80055f0:	4a08      	ldr	r2, [pc, #32]	; (8005614 <SYSVIEW_AddTask+0xc4>)
 80055f2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	68b9      	ldr	r1, [r7, #8]
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f000 f8ca 	bl	8005798 <SYSVIEW_SendTaskInfo>
 8005604:	e000      	b.n	8005608 <SYSVIEW_AddTask+0xb8>
    return;
 8005606:	bf00      	nop

}
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	080078dc 	.word	0x080078dc
 8005614:	2000cbb4 	.word	0x2000cbb4
 8005618:	080078e4 	.word	0x080078e4
 800561c:	2000cb14 	.word	0x2000cb14

08005620 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8005628:	4b59      	ldr	r3, [pc, #356]	; (8005790 <SYSVIEW_DeleteTask+0x170>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 80ab 	beq.w	8005788 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	e00d      	b.n	8005654 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8005638:	4956      	ldr	r1, [pc, #344]	; (8005794 <SYSVIEW_DeleteTask+0x174>)
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	4613      	mov	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	429a      	cmp	r2, r3
 800564c:	d008      	beq.n	8005660 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	3301      	adds	r3, #1
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	4b4e      	ldr	r3, [pc, #312]	; (8005790 <SYSVIEW_DeleteTask+0x170>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	429a      	cmp	r2, r3
 800565c:	d3ec      	bcc.n	8005638 <SYSVIEW_DeleteTask+0x18>
 800565e:	e000      	b.n	8005662 <SYSVIEW_DeleteTask+0x42>
      break;
 8005660:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8005662:	4b4b      	ldr	r3, [pc, #300]	; (8005790 <SYSVIEW_DeleteTask+0x170>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3b01      	subs	r3, #1
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	429a      	cmp	r2, r3
 800566c:	d111      	bne.n	8005692 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4613      	mov	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4a46      	ldr	r2, [pc, #280]	; (8005794 <SYSVIEW_DeleteTask+0x174>)
 800567a:	4413      	add	r3, r2
 800567c:	2214      	movs	r2, #20
 800567e:	2100      	movs	r1, #0
 8005680:	4618      	mov	r0, r3
 8005682:	f001 fc35 	bl	8006ef0 <memset>
    _NumTasks--;
 8005686:	4b42      	ldr	r3, [pc, #264]	; (8005790 <SYSVIEW_DeleteTask+0x170>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	3b01      	subs	r3, #1
 800568c:	4a40      	ldr	r2, [pc, #256]	; (8005790 <SYSVIEW_DeleteTask+0x170>)
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	e07b      	b.n	800578a <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8005692:	4b3f      	ldr	r3, [pc, #252]	; (8005790 <SYSVIEW_DeleteTask+0x170>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	429a      	cmp	r2, r3
 800569a:	d276      	bcs.n	800578a <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 800569c:	4b3c      	ldr	r3, [pc, #240]	; (8005790 <SYSVIEW_DeleteTask+0x170>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	1e5a      	subs	r2, r3, #1
 80056a2:	493c      	ldr	r1, [pc, #240]	; (8005794 <SYSVIEW_DeleteTask+0x174>)
 80056a4:	4613      	mov	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	440b      	add	r3, r1
 80056ae:	6819      	ldr	r1, [r3, #0]
 80056b0:	4838      	ldr	r0, [pc, #224]	; (8005794 <SYSVIEW_DeleteTask+0x174>)
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4613      	mov	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4403      	add	r3, r0
 80056be:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 80056c0:	4b33      	ldr	r3, [pc, #204]	; (8005790 <SYSVIEW_DeleteTask+0x170>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	1e5a      	subs	r2, r3, #1
 80056c6:	4933      	ldr	r1, [pc, #204]	; (8005794 <SYSVIEW_DeleteTask+0x174>)
 80056c8:	4613      	mov	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	440b      	add	r3, r1
 80056d2:	3304      	adds	r3, #4
 80056d4:	6819      	ldr	r1, [r3, #0]
 80056d6:	482f      	ldr	r0, [pc, #188]	; (8005794 <SYSVIEW_DeleteTask+0x174>)
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	4613      	mov	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4403      	add	r3, r0
 80056e4:	3304      	adds	r3, #4
 80056e6:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 80056e8:	4b29      	ldr	r3, [pc, #164]	; (8005790 <SYSVIEW_DeleteTask+0x170>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	1e5a      	subs	r2, r3, #1
 80056ee:	4929      	ldr	r1, [pc, #164]	; (8005794 <SYSVIEW_DeleteTask+0x174>)
 80056f0:	4613      	mov	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	440b      	add	r3, r1
 80056fa:	3308      	adds	r3, #8
 80056fc:	6819      	ldr	r1, [r3, #0]
 80056fe:	4825      	ldr	r0, [pc, #148]	; (8005794 <SYSVIEW_DeleteTask+0x174>)
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	4613      	mov	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4403      	add	r3, r0
 800570c:	3308      	adds	r3, #8
 800570e:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8005710:	4b1f      	ldr	r3, [pc, #124]	; (8005790 <SYSVIEW_DeleteTask+0x170>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	1e5a      	subs	r2, r3, #1
 8005716:	491f      	ldr	r1, [pc, #124]	; (8005794 <SYSVIEW_DeleteTask+0x174>)
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	440b      	add	r3, r1
 8005722:	330c      	adds	r3, #12
 8005724:	6819      	ldr	r1, [r3, #0]
 8005726:	481b      	ldr	r0, [pc, #108]	; (8005794 <SYSVIEW_DeleteTask+0x174>)
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4613      	mov	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4413      	add	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4403      	add	r3, r0
 8005734:	330c      	adds	r3, #12
 8005736:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8005738:	4b15      	ldr	r3, [pc, #84]	; (8005790 <SYSVIEW_DeleteTask+0x170>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	1e5a      	subs	r2, r3, #1
 800573e:	4915      	ldr	r1, [pc, #84]	; (8005794 <SYSVIEW_DeleteTask+0x174>)
 8005740:	4613      	mov	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	440b      	add	r3, r1
 800574a:	3310      	adds	r3, #16
 800574c:	6819      	ldr	r1, [r3, #0]
 800574e:	4811      	ldr	r0, [pc, #68]	; (8005794 <SYSVIEW_DeleteTask+0x174>)
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	4613      	mov	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4403      	add	r3, r0
 800575c:	3310      	adds	r3, #16
 800575e:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8005760:	4b0b      	ldr	r3, [pc, #44]	; (8005790 <SYSVIEW_DeleteTask+0x170>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	1e5a      	subs	r2, r3, #1
 8005766:	4613      	mov	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4a09      	ldr	r2, [pc, #36]	; (8005794 <SYSVIEW_DeleteTask+0x174>)
 8005770:	4413      	add	r3, r2
 8005772:	2214      	movs	r2, #20
 8005774:	2100      	movs	r1, #0
 8005776:	4618      	mov	r0, r3
 8005778:	f001 fbba 	bl	8006ef0 <memset>
    _NumTasks--;
 800577c:	4b04      	ldr	r3, [pc, #16]	; (8005790 <SYSVIEW_DeleteTask+0x170>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	3b01      	subs	r3, #1
 8005782:	4a03      	ldr	r2, [pc, #12]	; (8005790 <SYSVIEW_DeleteTask+0x170>)
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	e000      	b.n	800578a <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8005788:	bf00      	nop
  }
}
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	2000cbb4 	.word	0x2000cbb4
 8005794:	2000cb14 	.word	0x2000cb14

08005798 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005798:	b580      	push	{r7, lr}
 800579a:	b08a      	sub	sp, #40	; 0x28
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80057a6:	f107 0314 	add.w	r3, r7, #20
 80057aa:	2214      	movs	r2, #20
 80057ac:	2100      	movs	r1, #0
 80057ae:	4618      	mov	r0, r3
 80057b0:	f001 fb9e 	bl	8006ef0 <memset>
  TaskInfo.TaskID     = TaskID;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80057c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80057c8:	f107 0314 	add.w	r3, r7, #20
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 ffcb 	bl	8006768 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80057d2:	bf00      	nop
 80057d4:	3728      	adds	r7, #40	; 0x28
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
	...

080057dc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80057e2:	4b26      	ldr	r3, [pc, #152]	; (800587c <_DoInit+0xa0>)
 80057e4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80057e6:	22a8      	movs	r2, #168	; 0xa8
 80057e8:	2100      	movs	r1, #0
 80057ea:	6838      	ldr	r0, [r7, #0]
 80057ec:	f001 fb80 	bl	8006ef0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2203      	movs	r2, #3
 80057f4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2203      	movs	r2, #3
 80057fa:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	4a20      	ldr	r2, [pc, #128]	; (8005880 <_DoInit+0xa4>)
 8005800:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	4a1f      	ldr	r2, [pc, #124]	; (8005884 <_DoInit+0xa8>)
 8005806:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800580e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	2200      	movs	r2, #0
 8005814:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2200      	movs	r2, #0
 800581a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	2200      	movs	r2, #0
 8005820:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	4a16      	ldr	r2, [pc, #88]	; (8005880 <_DoInit+0xa4>)
 8005826:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	4a17      	ldr	r2, [pc, #92]	; (8005888 <_DoInit+0xac>)
 800582c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	2210      	movs	r2, #16
 8005832:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	2200      	movs	r2, #0
 8005838:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2200      	movs	r2, #0
 800583e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2200      	movs	r2, #0
 8005844:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005846:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800584a:	2300      	movs	r3, #0
 800584c:	607b      	str	r3, [r7, #4]
 800584e:	e00c      	b.n	800586a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f1c3 030f 	rsb	r3, r3, #15
 8005856:	4a0d      	ldr	r2, [pc, #52]	; (800588c <_DoInit+0xb0>)
 8005858:	5cd1      	ldrb	r1, [r2, r3]
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4413      	add	r3, r2
 8005860:	460a      	mov	r2, r1
 8005862:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	3301      	adds	r3, #1
 8005868:	607b      	str	r3, [r7, #4]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b0f      	cmp	r3, #15
 800586e:	d9ef      	bls.n	8005850 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005870:	f3bf 8f5f 	dmb	sy
}
 8005874:	bf00      	nop
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	2000cbb8 	.word	0x2000cbb8
 8005880:	08007934 	.word	0x08007934
 8005884:	2000cc60 	.word	0x2000cc60
 8005888:	2000d060 	.word	0x2000d060
 800588c:	08007970 	.word	0x08007970

08005890 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005890:	b580      	push	{r7, lr}
 8005892:	b08c      	sub	sp, #48	; 0x30
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800589c:	4b3e      	ldr	r3, [pc, #248]	; (8005998 <SEGGER_RTT_ReadNoLock+0x108>)
 800589e:	623b      	str	r3, [r7, #32]
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <SEGGER_RTT_ReadNoLock+0x1e>
 80058aa:	f7ff ff97 	bl	80057dc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	4613      	mov	r3, r2
 80058b2:	005b      	lsls	r3, r3, #1
 80058b4:	4413      	add	r3, r2
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	3360      	adds	r3, #96	; 0x60
 80058ba:	4a37      	ldr	r2, [pc, #220]	; (8005998 <SEGGER_RTT_ReadNoLock+0x108>)
 80058bc:	4413      	add	r3, r2
 80058be:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80058d0:	2300      	movs	r3, #0
 80058d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80058d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d92b      	bls.n	8005934 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4293      	cmp	r3, r2
 80058ec:	bf28      	it	cs
 80058ee:	4613      	movcs	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f8:	4413      	add	r3, r2
 80058fa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	6939      	ldr	r1, [r7, #16]
 8005900:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005902:	f001 fae7 	bl	8006ed4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	4413      	add	r3, r2
 800590c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800590e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	4413      	add	r3, r2
 8005914:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800591e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	4413      	add	r3, r2
 8005924:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800592c:	429a      	cmp	r2, r3
 800592e:	d101      	bne.n	8005934 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005930:	2300      	movs	r3, #0
 8005932:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4293      	cmp	r3, r2
 8005942:	bf28      	it	cs
 8005944:	4613      	movcs	r3, r2
 8005946:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d019      	beq.n	8005982 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005954:	4413      	add	r3, r2
 8005956:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	6939      	ldr	r1, [r7, #16]
 800595c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800595e:	f001 fab9 	bl	8006ed4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	4413      	add	r3, r2
 8005968:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800596a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	4413      	add	r3, r2
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800597a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	4413      	add	r3, r2
 8005980:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800598c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800598e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005990:	4618      	mov	r0, r3
 8005992:	3730      	adds	r7, #48	; 0x30
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	2000cbb8 	.word	0x2000cbb8

0800599c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
 80059a8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80059aa:	4b3d      	ldr	r3, [pc, #244]	; (8005aa0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80059ac:	61bb      	str	r3, [r7, #24]
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <SEGGER_RTT_AllocUpBuffer+0x20>
 80059b8:	f7ff ff10 	bl	80057dc <_DoInit>
  SEGGER_RTT_LOCK();
 80059bc:	f3ef 8311 	mrs	r3, BASEPRI
 80059c0:	f04f 0120 	mov.w	r1, #32
 80059c4:	f381 8811 	msr	BASEPRI, r1
 80059c8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80059ca:	4b35      	ldr	r3, [pc, #212]	; (8005aa0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80059cc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80059ce:	2300      	movs	r3, #0
 80059d0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80059d2:	6939      	ldr	r1, [r7, #16]
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	1c5a      	adds	r2, r3, #1
 80059d8:	4613      	mov	r3, r2
 80059da:	005b      	lsls	r3, r3, #1
 80059dc:	4413      	add	r3, r2
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	440b      	add	r3, r1
 80059e2:	3304      	adds	r3, #4
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d008      	beq.n	80059fc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	3301      	adds	r3, #1
 80059ee:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	69fa      	ldr	r2, [r7, #28]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	dbeb      	blt.n	80059d2 <SEGGER_RTT_AllocUpBuffer+0x36>
 80059fa:	e000      	b.n	80059fe <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80059fc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	69fa      	ldr	r2, [r7, #28]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	da3f      	bge.n	8005a88 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005a08:	6939      	ldr	r1, [r7, #16]
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	4613      	mov	r3, r2
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	4413      	add	r3, r2
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	440b      	add	r3, r1
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005a1c:	6939      	ldr	r1, [r7, #16]
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	1c5a      	adds	r2, r3, #1
 8005a22:	4613      	mov	r3, r2
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	4413      	add	r3, r2
 8005a28:	00db      	lsls	r3, r3, #3
 8005a2a:	440b      	add	r3, r1
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005a32:	6939      	ldr	r1, [r7, #16]
 8005a34:	69fa      	ldr	r2, [r7, #28]
 8005a36:	4613      	mov	r3, r2
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	4413      	add	r3, r2
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	440b      	add	r3, r1
 8005a40:	3320      	adds	r3, #32
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005a46:	6939      	ldr	r1, [r7, #16]
 8005a48:	69fa      	ldr	r2, [r7, #28]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	4413      	add	r3, r2
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	440b      	add	r3, r1
 8005a54:	3328      	adds	r3, #40	; 0x28
 8005a56:	2200      	movs	r2, #0
 8005a58:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005a5a:	6939      	ldr	r1, [r7, #16]
 8005a5c:	69fa      	ldr	r2, [r7, #28]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	4413      	add	r3, r2
 8005a64:	00db      	lsls	r3, r3, #3
 8005a66:	440b      	add	r3, r1
 8005a68:	3324      	adds	r3, #36	; 0x24
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005a6e:	6939      	ldr	r1, [r7, #16]
 8005a70:	69fa      	ldr	r2, [r7, #28]
 8005a72:	4613      	mov	r3, r2
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	4413      	add	r3, r2
 8005a78:	00db      	lsls	r3, r3, #3
 8005a7a:	440b      	add	r3, r1
 8005a7c:	332c      	adds	r3, #44	; 0x2c
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a82:	f3bf 8f5f 	dmb	sy
 8005a86:	e002      	b.n	8005a8e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005a88:	f04f 33ff 	mov.w	r3, #4294967295
 8005a8c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005a94:	69fb      	ldr	r3, [r7, #28]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3720      	adds	r7, #32
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	2000cbb8 	.word	0x2000cbb8

08005aa4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b08a      	sub	sp, #40	; 0x28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
 8005ab0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005ab2:	4b21      	ldr	r3, [pc, #132]	; (8005b38 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005ab4:	623b      	str	r3, [r7, #32]
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005ac0:	f7ff fe8c 	bl	80057dc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005ac4:	4b1c      	ldr	r3, [pc, #112]	; (8005b38 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005ac6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d82c      	bhi.n	8005b28 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005ace:	f3ef 8311 	mrs	r3, BASEPRI
 8005ad2:	f04f 0120 	mov.w	r1, #32
 8005ad6:	f381 8811 	msr	BASEPRI, r1
 8005ada:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	4413      	add	r3, r2
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	3360      	adds	r3, #96	; 0x60
 8005ae8:	69fa      	ldr	r2, [r7, #28]
 8005aea:	4413      	add	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00e      	beq.n	8005b12 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b16:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005b18:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	627b      	str	r3, [r7, #36]	; 0x24
 8005b26:	e002      	b.n	8005b2e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005b28:	f04f 33ff 	mov.w	r3, #4294967295
 8005b2c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3728      	adds	r7, #40	; 0x28
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	2000cbb8 	.word	0x2000cbb8

08005b3c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	1c5a      	adds	r2, r3, #1
 8005b50:	60fa      	str	r2, [r7, #12]
 8005b52:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b80      	cmp	r3, #128	; 0x80
 8005b58:	d90a      	bls.n	8005b70 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005b5a:	2380      	movs	r3, #128	; 0x80
 8005b5c:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005b5e:	e007      	b.n	8005b70 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	1c53      	adds	r3, r2, #1
 8005b64:	60bb      	str	r3, [r7, #8]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	1c59      	adds	r1, r3, #1
 8005b6a:	60f9      	str	r1, [r7, #12]
 8005b6c:	7812      	ldrb	r2, [r2, #0]
 8005b6e:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	1e5a      	subs	r2, r3, #1
 8005b74:	607a      	str	r2, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <_EncodeStr+0x46>
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1ee      	bne.n	8005b60 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	371c      	adds	r7, #28
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	3307      	adds	r3, #7
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005bba:	4b35      	ldr	r3, [pc, #212]	; (8005c90 <_HandleIncomingPacket+0xdc>)
 8005bbc:	7e1b      	ldrb	r3, [r3, #24]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	1cfb      	adds	r3, r7, #3
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	f7ff fe63 	bl	8005890 <SEGGER_RTT_ReadNoLock>
 8005bca:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d052      	beq.n	8005c78 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8005bd2:	78fb      	ldrb	r3, [r7, #3]
 8005bd4:	2b80      	cmp	r3, #128	; 0x80
 8005bd6:	d031      	beq.n	8005c3c <_HandleIncomingPacket+0x88>
 8005bd8:	2b80      	cmp	r3, #128	; 0x80
 8005bda:	dc40      	bgt.n	8005c5e <_HandleIncomingPacket+0xaa>
 8005bdc:	2b07      	cmp	r3, #7
 8005bde:	dc15      	bgt.n	8005c0c <_HandleIncomingPacket+0x58>
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	dd3c      	ble.n	8005c5e <_HandleIncomingPacket+0xaa>
 8005be4:	3b01      	subs	r3, #1
 8005be6:	2b06      	cmp	r3, #6
 8005be8:	d839      	bhi.n	8005c5e <_HandleIncomingPacket+0xaa>
 8005bea:	a201      	add	r2, pc, #4	; (adr r2, 8005bf0 <_HandleIncomingPacket+0x3c>)
 8005bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf0:	08005c13 	.word	0x08005c13
 8005bf4:	08005c19 	.word	0x08005c19
 8005bf8:	08005c1f 	.word	0x08005c1f
 8005bfc:	08005c25 	.word	0x08005c25
 8005c00:	08005c2b 	.word	0x08005c2b
 8005c04:	08005c31 	.word	0x08005c31
 8005c08:	08005c37 	.word	0x08005c37
 8005c0c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c0e:	d035      	beq.n	8005c7c <_HandleIncomingPacket+0xc8>
 8005c10:	e025      	b.n	8005c5e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005c12:	f000 fc2f 	bl	8006474 <SEGGER_SYSVIEW_Start>
      break;
 8005c16:	e036      	b.n	8005c86 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005c18:	f000 fce6 	bl	80065e8 <SEGGER_SYSVIEW_Stop>
      break;
 8005c1c:	e033      	b.n	8005c86 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005c1e:	f000 febf 	bl	80069a0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005c22:	e030      	b.n	8005c86 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005c24:	f000 fe84 	bl	8006930 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005c28:	e02d      	b.n	8005c86 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005c2a:	f000 fd03 	bl	8006634 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005c2e:	e02a      	b.n	8005c86 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005c30:	f001 f882 	bl	8006d38 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005c34:	e027      	b.n	8005c86 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005c36:	f001 f861 	bl	8006cfc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005c3a:	e024      	b.n	8005c86 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c3c:	4b14      	ldr	r3, [pc, #80]	; (8005c90 <_HandleIncomingPacket+0xdc>)
 8005c3e:	7e1b      	ldrb	r3, [r3, #24]
 8005c40:	4618      	mov	r0, r3
 8005c42:	1cfb      	adds	r3, r7, #3
 8005c44:	2201      	movs	r2, #1
 8005c46:	4619      	mov	r1, r3
 8005c48:	f7ff fe22 	bl	8005890 <SEGGER_RTT_ReadNoLock>
 8005c4c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d015      	beq.n	8005c80 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005c54:	78fb      	ldrb	r3, [r7, #3]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 ffc6 	bl	8006be8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005c5c:	e010      	b.n	8005c80 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005c5e:	78fb      	ldrb	r3, [r7, #3]
 8005c60:	b25b      	sxtb	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	da0e      	bge.n	8005c84 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c66:	4b0a      	ldr	r3, [pc, #40]	; (8005c90 <_HandleIncomingPacket+0xdc>)
 8005c68:	7e1b      	ldrb	r3, [r3, #24]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	1cfb      	adds	r3, r7, #3
 8005c6e:	2201      	movs	r2, #1
 8005c70:	4619      	mov	r1, r3
 8005c72:	f7ff fe0d 	bl	8005890 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005c76:	e005      	b.n	8005c84 <_HandleIncomingPacket+0xd0>
    }
  }
 8005c78:	bf00      	nop
 8005c7a:	e004      	b.n	8005c86 <_HandleIncomingPacket+0xd2>
      break;
 8005c7c:	bf00      	nop
 8005c7e:	e002      	b.n	8005c86 <_HandleIncomingPacket+0xd2>
      break;
 8005c80:	bf00      	nop
 8005c82:	e000      	b.n	8005c86 <_HandleIncomingPacket+0xd2>
      break;
 8005c84:	bf00      	nop
}
 8005c86:	bf00      	nop
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	2000d478 	.word	0x2000d478

08005c94 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b08c      	sub	sp, #48	; 0x30
 8005c98:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005c9e:	1d3b      	adds	r3, r7, #4
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ca8:	4b31      	ldr	r3, [pc, #196]	; (8005d70 <_TrySendOverflowPacket+0xdc>)
 8005caa:	695b      	ldr	r3, [r3, #20]
 8005cac:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cae:	e00b      	b.n	8005cc8 <_TrySendOverflowPacket+0x34>
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	b2da      	uxtb	r2, r3
 8005cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb6:	1c59      	adds	r1, r3, #1
 8005cb8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005cba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cbe:	b2d2      	uxtb	r2, r2
 8005cc0:	701a      	strb	r2, [r3, #0]
 8005cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc4:	09db      	lsrs	r3, r3, #7
 8005cc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cca:	2b7f      	cmp	r3, #127	; 0x7f
 8005ccc:	d8f0      	bhi.n	8005cb0 <_TrySendOverflowPacket+0x1c>
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	1c5a      	adds	r2, r3, #1
 8005cd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cd6:	b2d2      	uxtb	r2, r2
 8005cd8:	701a      	strb	r2, [r3, #0]
 8005cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cdc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005cde:	4b25      	ldr	r3, [pc, #148]	; (8005d74 <_TrySendOverflowPacket+0xe0>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005ce4:	4b22      	ldr	r3, [pc, #136]	; (8005d70 <_TrySendOverflowPacket+0xdc>)
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	623b      	str	r3, [r7, #32]
 8005cf6:	e00b      	b.n	8005d10 <_TrySendOverflowPacket+0x7c>
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	1c59      	adds	r1, r3, #1
 8005d00:	6279      	str	r1, [r7, #36]	; 0x24
 8005d02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d06:	b2d2      	uxtb	r2, r2
 8005d08:	701a      	strb	r2, [r3, #0]
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	09db      	lsrs	r3, r3, #7
 8005d0e:	623b      	str	r3, [r7, #32]
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	2b7f      	cmp	r3, #127	; 0x7f
 8005d14:	d8f0      	bhi.n	8005cf8 <_TrySendOverflowPacket+0x64>
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	627a      	str	r2, [r7, #36]	; 0x24
 8005d1c:	6a3a      	ldr	r2, [r7, #32]
 8005d1e:	b2d2      	uxtb	r2, r2
 8005d20:	701a      	strb	r2, [r3, #0]
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005d26:	4b12      	ldr	r3, [pc, #72]	; (8005d70 <_TrySendOverflowPacket+0xdc>)
 8005d28:	785b      	ldrb	r3, [r3, #1]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	1d3b      	adds	r3, r7, #4
 8005d2e:	69fa      	ldr	r2, [r7, #28]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	461a      	mov	r2, r3
 8005d34:	1d3b      	adds	r3, r7, #4
 8005d36:	4619      	mov	r1, r3
 8005d38:	f7fa fa52 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d009      	beq.n	8005d5a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005d46:	4a0a      	ldr	r2, [pc, #40]	; (8005d70 <_TrySendOverflowPacket+0xdc>)
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005d4c:	4b08      	ldr	r3, [pc, #32]	; (8005d70 <_TrySendOverflowPacket+0xdc>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	3b01      	subs	r3, #1
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	4b06      	ldr	r3, [pc, #24]	; (8005d70 <_TrySendOverflowPacket+0xdc>)
 8005d56:	701a      	strb	r2, [r3, #0]
 8005d58:	e004      	b.n	8005d64 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005d5a:	4b05      	ldr	r3, [pc, #20]	; (8005d70 <_TrySendOverflowPacket+0xdc>)
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	4a03      	ldr	r2, [pc, #12]	; (8005d70 <_TrySendOverflowPacket+0xdc>)
 8005d62:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005d64:	693b      	ldr	r3, [r7, #16]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3730      	adds	r7, #48	; 0x30
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	2000d478 	.word	0x2000d478
 8005d74:	e0001004 	.word	0xe0001004

08005d78 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08a      	sub	sp, #40	; 0x28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005d84:	4b98      	ldr	r3, [pc, #608]	; (8005fe8 <_SendPacket+0x270>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d010      	beq.n	8005dae <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005d8c:	4b96      	ldr	r3, [pc, #600]	; (8005fe8 <_SendPacket+0x270>)
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 812d 	beq.w	8005ff0 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005d96:	4b94      	ldr	r3, [pc, #592]	; (8005fe8 <_SendPacket+0x270>)
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d109      	bne.n	8005db2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005d9e:	f7ff ff79 	bl	8005c94 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005da2:	4b91      	ldr	r3, [pc, #580]	; (8005fe8 <_SendPacket+0x270>)
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	f040 8124 	bne.w	8005ff4 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8005dac:	e001      	b.n	8005db2 <_SendPacket+0x3a>
    goto Send;
 8005dae:	bf00      	nop
 8005db0:	e000      	b.n	8005db4 <_SendPacket+0x3c>
Send:
 8005db2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b1f      	cmp	r3, #31
 8005db8:	d809      	bhi.n	8005dce <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005dba:	4b8b      	ldr	r3, [pc, #556]	; (8005fe8 <_SendPacket+0x270>)
 8005dbc:	69da      	ldr	r2, [r3, #28]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f040 8115 	bne.w	8005ff8 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b17      	cmp	r3, #23
 8005dd2:	d807      	bhi.n	8005de4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	701a      	strb	r2, [r3, #0]
 8005de2:	e0c4      	b.n	8005f6e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	2b7f      	cmp	r3, #127	; 0x7f
 8005df0:	d912      	bls.n	8005e18 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	09da      	lsrs	r2, r3, #7
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	b2d2      	uxtb	r2, r2
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	3a01      	subs	r2, #1
 8005e0a:	60fa      	str	r2, [r7, #12]
 8005e0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	701a      	strb	r2, [r3, #0]
 8005e16:	e006      	b.n	8005e26 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	60fb      	str	r3, [r7, #12]
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b7e      	cmp	r3, #126	; 0x7e
 8005e2a:	d807      	bhi.n	8005e3c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	b2da      	uxtb	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	701a      	strb	r2, [r3, #0]
 8005e3a:	e098      	b.n	8005f6e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e42:	d212      	bcs.n	8005e6a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	09da      	lsrs	r2, r3, #7
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	60fb      	str	r3, [r7, #12]
 8005e4e:	b2d2      	uxtb	r2, r2
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	3a01      	subs	r2, #1
 8005e5c:	60fa      	str	r2, [r7, #12]
 8005e5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e62:	b2da      	uxtb	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	701a      	strb	r2, [r3, #0]
 8005e68:	e081      	b.n	8005f6e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e70:	d21d      	bcs.n	8005eae <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	0b9a      	lsrs	r2, r3, #14
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	60fb      	str	r3, [r7, #12]
 8005e7c:	b2d2      	uxtb	r2, r2
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	09db      	lsrs	r3, r3, #7
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	3a01      	subs	r2, #1
 8005e8c:	60fa      	str	r2, [r7, #12]
 8005e8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	3a01      	subs	r2, #1
 8005ea0:	60fa      	str	r2, [r7, #12]
 8005ea2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ea6:	b2da      	uxtb	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	701a      	strb	r2, [r3, #0]
 8005eac:	e05f      	b.n	8005f6e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005eb4:	d228      	bcs.n	8005f08 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	0d5a      	lsrs	r2, r3, #21
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	b2d2      	uxtb	r2, r2
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	0b9b      	lsrs	r3, r3, #14
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	3a01      	subs	r2, #1
 8005ed0:	60fa      	str	r2, [r7, #12]
 8005ed2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	09db      	lsrs	r3, r3, #7
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	3a01      	subs	r2, #1
 8005ee6:	60fa      	str	r2, [r7, #12]
 8005ee8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	3a01      	subs	r2, #1
 8005efa:	60fa      	str	r2, [r7, #12]
 8005efc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f00:	b2da      	uxtb	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	e032      	b.n	8005f6e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	0f1a      	lsrs	r2, r3, #28
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	60fb      	str	r3, [r7, #12]
 8005f12:	b2d2      	uxtb	r2, r2
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	0d5b      	lsrs	r3, r3, #21
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	3a01      	subs	r2, #1
 8005f22:	60fa      	str	r2, [r7, #12]
 8005f24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	0b9b      	lsrs	r3, r3, #14
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	3a01      	subs	r2, #1
 8005f38:	60fa      	str	r2, [r7, #12]
 8005f3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	09db      	lsrs	r3, r3, #7
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	3a01      	subs	r2, #1
 8005f4e:	60fa      	str	r2, [r7, #12]
 8005f50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	3a01      	subs	r2, #1
 8005f62:	60fa      	str	r2, [r7, #12]
 8005f64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f6e:	4b1f      	ldr	r3, [pc, #124]	; (8005fec <_SendPacket+0x274>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005f74:	4b1c      	ldr	r3, [pc, #112]	; (8005fe8 <_SendPacket+0x270>)
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	627b      	str	r3, [r7, #36]	; 0x24
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	623b      	str	r3, [r7, #32]
 8005f86:	e00b      	b.n	8005fa0 <_SendPacket+0x228>
 8005f88:	6a3b      	ldr	r3, [r7, #32]
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	1c59      	adds	r1, r3, #1
 8005f90:	6279      	str	r1, [r7, #36]	; 0x24
 8005f92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f96:	b2d2      	uxtb	r2, r2
 8005f98:	701a      	strb	r2, [r3, #0]
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	09db      	lsrs	r3, r3, #7
 8005f9e:	623b      	str	r3, [r7, #32]
 8005fa0:	6a3b      	ldr	r3, [r7, #32]
 8005fa2:	2b7f      	cmp	r3, #127	; 0x7f
 8005fa4:	d8f0      	bhi.n	8005f88 <_SendPacket+0x210>
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	1c5a      	adds	r2, r3, #1
 8005faa:	627a      	str	r2, [r7, #36]	; 0x24
 8005fac:	6a3a      	ldr	r2, [r7, #32]
 8005fae:	b2d2      	uxtb	r2, r2
 8005fb0:	701a      	strb	r2, [r3, #0]
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005fb6:	4b0c      	ldr	r3, [pc, #48]	; (8005fe8 <_SendPacket+0x270>)
 8005fb8:	785b      	ldrb	r3, [r3, #1]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	68f9      	ldr	r1, [r7, #12]
 8005fc6:	f7fa f90b 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005fca:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005fd2:	4a05      	ldr	r2, [pc, #20]	; (8005fe8 <_SendPacket+0x270>)
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	60d3      	str	r3, [r2, #12]
 8005fd8:	e00f      	b.n	8005ffa <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005fda:	4b03      	ldr	r3, [pc, #12]	; (8005fe8 <_SendPacket+0x270>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	4b01      	ldr	r3, [pc, #4]	; (8005fe8 <_SendPacket+0x270>)
 8005fe4:	701a      	strb	r2, [r3, #0]
 8005fe6:	e008      	b.n	8005ffa <_SendPacket+0x282>
 8005fe8:	2000d478 	.word	0x2000d478
 8005fec:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005ff0:	bf00      	nop
 8005ff2:	e002      	b.n	8005ffa <_SendPacket+0x282>
      goto SendDone;
 8005ff4:	bf00      	nop
 8005ff6:	e000      	b.n	8005ffa <_SendPacket+0x282>
      goto SendDone;
 8005ff8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005ffa:	4b14      	ldr	r3, [pc, #80]	; (800604c <_SendPacket+0x2d4>)
 8005ffc:	7e1b      	ldrb	r3, [r3, #24]
 8005ffe:	4619      	mov	r1, r3
 8006000:	4a13      	ldr	r2, [pc, #76]	; (8006050 <_SendPacket+0x2d8>)
 8006002:	460b      	mov	r3, r1
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	440b      	add	r3, r1
 8006008:	00db      	lsls	r3, r3, #3
 800600a:	4413      	add	r3, r2
 800600c:	336c      	adds	r3, #108	; 0x6c
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	4b0e      	ldr	r3, [pc, #56]	; (800604c <_SendPacket+0x2d4>)
 8006012:	7e1b      	ldrb	r3, [r3, #24]
 8006014:	4618      	mov	r0, r3
 8006016:	490e      	ldr	r1, [pc, #56]	; (8006050 <_SendPacket+0x2d8>)
 8006018:	4603      	mov	r3, r0
 800601a:	005b      	lsls	r3, r3, #1
 800601c:	4403      	add	r3, r0
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	440b      	add	r3, r1
 8006022:	3370      	adds	r3, #112	; 0x70
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	429a      	cmp	r2, r3
 8006028:	d00b      	beq.n	8006042 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800602a:	4b08      	ldr	r3, [pc, #32]	; (800604c <_SendPacket+0x2d4>)
 800602c:	789b      	ldrb	r3, [r3, #2]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d107      	bne.n	8006042 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006032:	4b06      	ldr	r3, [pc, #24]	; (800604c <_SendPacket+0x2d4>)
 8006034:	2201      	movs	r2, #1
 8006036:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006038:	f7ff fdbc 	bl	8005bb4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800603c:	4b03      	ldr	r3, [pc, #12]	; (800604c <_SendPacket+0x2d4>)
 800603e:	2200      	movs	r2, #0
 8006040:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006042:	bf00      	nop
 8006044:	3728      	adds	r7, #40	; 0x28
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	2000d478 	.word	0x2000d478
 8006050:	2000cbb8 	.word	0x2000cbb8

08006054 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af02      	add	r7, sp, #8
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
 8006060:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006062:	2300      	movs	r3, #0
 8006064:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006068:	4917      	ldr	r1, [pc, #92]	; (80060c8 <SEGGER_SYSVIEW_Init+0x74>)
 800606a:	4818      	ldr	r0, [pc, #96]	; (80060cc <SEGGER_SYSVIEW_Init+0x78>)
 800606c:	f7ff fc96 	bl	800599c <SEGGER_RTT_AllocUpBuffer>
 8006070:	4603      	mov	r3, r0
 8006072:	b2da      	uxtb	r2, r3
 8006074:	4b16      	ldr	r3, [pc, #88]	; (80060d0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006076:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006078:	4b15      	ldr	r3, [pc, #84]	; (80060d0 <SEGGER_SYSVIEW_Init+0x7c>)
 800607a:	785a      	ldrb	r2, [r3, #1]
 800607c:	4b14      	ldr	r3, [pc, #80]	; (80060d0 <SEGGER_SYSVIEW_Init+0x7c>)
 800607e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006080:	4b13      	ldr	r3, [pc, #76]	; (80060d0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006082:	7e1b      	ldrb	r3, [r3, #24]
 8006084:	4618      	mov	r0, r3
 8006086:	2300      	movs	r3, #0
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	2308      	movs	r3, #8
 800608c:	4a11      	ldr	r2, [pc, #68]	; (80060d4 <SEGGER_SYSVIEW_Init+0x80>)
 800608e:	490f      	ldr	r1, [pc, #60]	; (80060cc <SEGGER_SYSVIEW_Init+0x78>)
 8006090:	f7ff fd08 	bl	8005aa4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006094:	4b0e      	ldr	r3, [pc, #56]	; (80060d0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006096:	2200      	movs	r2, #0
 8006098:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800609a:	4b0f      	ldr	r3, [pc, #60]	; (80060d8 <SEGGER_SYSVIEW_Init+0x84>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a0c      	ldr	r2, [pc, #48]	; (80060d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80060a0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80060a2:	4a0b      	ldr	r2, [pc, #44]	; (80060d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80060a8:	4a09      	ldr	r2, [pc, #36]	; (80060d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80060ae:	4a08      	ldr	r2, [pc, #32]	; (80060d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80060b4:	4a06      	ldr	r2, [pc, #24]	; (80060d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80060ba:	4b05      	ldr	r3, [pc, #20]	; (80060d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80060bc:	2200      	movs	r2, #0
 80060be:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80060c0:	bf00      	nop
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	2000d070 	.word	0x2000d070
 80060cc:	08007948 	.word	0x08007948
 80060d0:	2000d478 	.word	0x2000d478
 80060d4:	2000d470 	.word	0x2000d470
 80060d8:	e0001004 	.word	0xe0001004

080060dc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80060e4:	4a04      	ldr	r2, [pc, #16]	; (80060f8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6113      	str	r3, [r2, #16]
}
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	2000d478 	.word	0x2000d478

080060fc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006104:	f3ef 8311 	mrs	r3, BASEPRI
 8006108:	f04f 0120 	mov.w	r1, #32
 800610c:	f381 8811 	msr	BASEPRI, r1
 8006110:	60fb      	str	r3, [r7, #12]
 8006112:	4808      	ldr	r0, [pc, #32]	; (8006134 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006114:	f7ff fd42 	bl	8005b9c <_PreparePacket>
 8006118:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	68b9      	ldr	r1, [r7, #8]
 800611e:	68b8      	ldr	r0, [r7, #8]
 8006120:	f7ff fe2a 	bl	8005d78 <_SendPacket>
  RECORD_END();
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f383 8811 	msr	BASEPRI, r3
}
 800612a:	bf00      	nop
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	2000d4a8 	.word	0x2000d4a8

08006138 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006138:	b580      	push	{r7, lr}
 800613a:	b088      	sub	sp, #32
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006142:	f3ef 8311 	mrs	r3, BASEPRI
 8006146:	f04f 0120 	mov.w	r1, #32
 800614a:	f381 8811 	msr	BASEPRI, r1
 800614e:	617b      	str	r3, [r7, #20]
 8006150:	4816      	ldr	r0, [pc, #88]	; (80061ac <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006152:	f7ff fd23 	bl	8005b9c <_PreparePacket>
 8006156:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	61bb      	str	r3, [r7, #24]
 8006164:	e00b      	b.n	800617e <SEGGER_SYSVIEW_RecordU32+0x46>
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	b2da      	uxtb	r2, r3
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	1c59      	adds	r1, r3, #1
 800616e:	61f9      	str	r1, [r7, #28]
 8006170:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006174:	b2d2      	uxtb	r2, r2
 8006176:	701a      	strb	r2, [r3, #0]
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	09db      	lsrs	r3, r3, #7
 800617c:	61bb      	str	r3, [r7, #24]
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	2b7f      	cmp	r3, #127	; 0x7f
 8006182:	d8f0      	bhi.n	8006166 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	61fa      	str	r2, [r7, #28]
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	b2d2      	uxtb	r2, r2
 800618e:	701a      	strb	r2, [r3, #0]
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	68f9      	ldr	r1, [r7, #12]
 8006198:	6938      	ldr	r0, [r7, #16]
 800619a:	f7ff fded 	bl	8005d78 <_SendPacket>
  RECORD_END();
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f383 8811 	msr	BASEPRI, r3
}
 80061a4:	bf00      	nop
 80061a6:	3720      	adds	r7, #32
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	2000d4a8 	.word	0x2000d4a8

080061b0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08c      	sub	sp, #48	; 0x30
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80061bc:	f3ef 8311 	mrs	r3, BASEPRI
 80061c0:	f04f 0120 	mov.w	r1, #32
 80061c4:	f381 8811 	msr	BASEPRI, r1
 80061c8:	61fb      	str	r3, [r7, #28]
 80061ca:	4825      	ldr	r0, [pc, #148]	; (8006260 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80061cc:	f7ff fce6 	bl	8005b9c <_PreparePacket>
 80061d0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80061de:	e00b      	b.n	80061f8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80061e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e6:	1c59      	adds	r1, r3, #1
 80061e8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061ee:	b2d2      	uxtb	r2, r2
 80061f0:	701a      	strb	r2, [r3, #0]
 80061f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f4:	09db      	lsrs	r3, r3, #7
 80061f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80061f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fa:	2b7f      	cmp	r3, #127	; 0x7f
 80061fc:	d8f0      	bhi.n	80061e0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80061fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006200:	1c5a      	adds	r2, r3, #1
 8006202:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	701a      	strb	r2, [r3, #0]
 800620a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	627b      	str	r3, [r7, #36]	; 0x24
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	623b      	str	r3, [r7, #32]
 8006216:	e00b      	b.n	8006230 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	b2da      	uxtb	r2, r3
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	1c59      	adds	r1, r3, #1
 8006220:	6279      	str	r1, [r7, #36]	; 0x24
 8006222:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006226:	b2d2      	uxtb	r2, r2
 8006228:	701a      	strb	r2, [r3, #0]
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	09db      	lsrs	r3, r3, #7
 800622e:	623b      	str	r3, [r7, #32]
 8006230:	6a3b      	ldr	r3, [r7, #32]
 8006232:	2b7f      	cmp	r3, #127	; 0x7f
 8006234:	d8f0      	bhi.n	8006218 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006238:	1c5a      	adds	r2, r3, #1
 800623a:	627a      	str	r2, [r7, #36]	; 0x24
 800623c:	6a3a      	ldr	r2, [r7, #32]
 800623e:	b2d2      	uxtb	r2, r2
 8006240:	701a      	strb	r2, [r3, #0]
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	6979      	ldr	r1, [r7, #20]
 800624a:	69b8      	ldr	r0, [r7, #24]
 800624c:	f7ff fd94 	bl	8005d78 <_SendPacket>
  RECORD_END();
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	f383 8811 	msr	BASEPRI, r3
}
 8006256:	bf00      	nop
 8006258:	3730      	adds	r7, #48	; 0x30
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	2000d4a8 	.word	0x2000d4a8

08006264 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006264:	b580      	push	{r7, lr}
 8006266:	b08e      	sub	sp, #56	; 0x38
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
 8006270:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006272:	f3ef 8311 	mrs	r3, BASEPRI
 8006276:	f04f 0120 	mov.w	r1, #32
 800627a:	f381 8811 	msr	BASEPRI, r1
 800627e:	61fb      	str	r3, [r7, #28]
 8006280:	4832      	ldr	r0, [pc, #200]	; (800634c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006282:	f7ff fc8b 	bl	8005b9c <_PreparePacket>
 8006286:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	637b      	str	r3, [r7, #52]	; 0x34
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	633b      	str	r3, [r7, #48]	; 0x30
 8006294:	e00b      	b.n	80062ae <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	b2da      	uxtb	r2, r3
 800629a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800629c:	1c59      	adds	r1, r3, #1
 800629e:	6379      	str	r1, [r7, #52]	; 0x34
 80062a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062a4:	b2d2      	uxtb	r2, r2
 80062a6:	701a      	strb	r2, [r3, #0]
 80062a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062aa:	09db      	lsrs	r3, r3, #7
 80062ac:	633b      	str	r3, [r7, #48]	; 0x30
 80062ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b0:	2b7f      	cmp	r3, #127	; 0x7f
 80062b2:	d8f0      	bhi.n	8006296 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80062b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b6:	1c5a      	adds	r2, r3, #1
 80062b8:	637a      	str	r2, [r7, #52]	; 0x34
 80062ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062bc:	b2d2      	uxtb	r2, r2
 80062be:	701a      	strb	r2, [r3, #0]
 80062c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80062cc:	e00b      	b.n	80062e6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80062ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d4:	1c59      	adds	r1, r3, #1
 80062d6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80062d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062dc:	b2d2      	uxtb	r2, r2
 80062de:	701a      	strb	r2, [r3, #0]
 80062e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e2:	09db      	lsrs	r3, r3, #7
 80062e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80062e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e8:	2b7f      	cmp	r3, #127	; 0x7f
 80062ea:	d8f0      	bhi.n	80062ce <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80062ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ee:	1c5a      	adds	r2, r3, #1
 80062f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062f4:	b2d2      	uxtb	r2, r2
 80062f6:	701a      	strb	r2, [r3, #0]
 80062f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	623b      	str	r3, [r7, #32]
 8006304:	e00b      	b.n	800631e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	b2da      	uxtb	r2, r3
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	1c59      	adds	r1, r3, #1
 800630e:	6279      	str	r1, [r7, #36]	; 0x24
 8006310:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006314:	b2d2      	uxtb	r2, r2
 8006316:	701a      	strb	r2, [r3, #0]
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	09db      	lsrs	r3, r3, #7
 800631c:	623b      	str	r3, [r7, #32]
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	2b7f      	cmp	r3, #127	; 0x7f
 8006322:	d8f0      	bhi.n	8006306 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	627a      	str	r2, [r7, #36]	; 0x24
 800632a:	6a3a      	ldr	r2, [r7, #32]
 800632c:	b2d2      	uxtb	r2, r2
 800632e:	701a      	strb	r2, [r3, #0]
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	6979      	ldr	r1, [r7, #20]
 8006338:	69b8      	ldr	r0, [r7, #24]
 800633a:	f7ff fd1d 	bl	8005d78 <_SendPacket>
  RECORD_END();
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	f383 8811 	msr	BASEPRI, r3
}
 8006344:	bf00      	nop
 8006346:	3738      	adds	r7, #56	; 0x38
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	2000d4a8 	.word	0x2000d4a8

08006350 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006350:	b580      	push	{r7, lr}
 8006352:	b090      	sub	sp, #64	; 0x40
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
 800635c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800635e:	f3ef 8311 	mrs	r3, BASEPRI
 8006362:	f04f 0120 	mov.w	r1, #32
 8006366:	f381 8811 	msr	BASEPRI, r1
 800636a:	61fb      	str	r3, [r7, #28]
 800636c:	4840      	ldr	r0, [pc, #256]	; (8006470 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800636e:	f7ff fc15 	bl	8005b9c <_PreparePacket>
 8006372:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006380:	e00b      	b.n	800639a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006384:	b2da      	uxtb	r2, r3
 8006386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006388:	1c59      	adds	r1, r3, #1
 800638a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800638c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006390:	b2d2      	uxtb	r2, r2
 8006392:	701a      	strb	r2, [r3, #0]
 8006394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006396:	09db      	lsrs	r3, r3, #7
 8006398:	63bb      	str	r3, [r7, #56]	; 0x38
 800639a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639c:	2b7f      	cmp	r3, #127	; 0x7f
 800639e:	d8f0      	bhi.n	8006382 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80063a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a2:	1c5a      	adds	r2, r3, #1
 80063a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80063a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063a8:	b2d2      	uxtb	r2, r2
 80063aa:	701a      	strb	r2, [r3, #0]
 80063ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	637b      	str	r3, [r7, #52]	; 0x34
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	633b      	str	r3, [r7, #48]	; 0x30
 80063b8:	e00b      	b.n	80063d2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80063ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c0:	1c59      	adds	r1, r3, #1
 80063c2:	6379      	str	r1, [r7, #52]	; 0x34
 80063c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063c8:	b2d2      	uxtb	r2, r2
 80063ca:	701a      	strb	r2, [r3, #0]
 80063cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ce:	09db      	lsrs	r3, r3, #7
 80063d0:	633b      	str	r3, [r7, #48]	; 0x30
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	2b7f      	cmp	r3, #127	; 0x7f
 80063d6:	d8f0      	bhi.n	80063ba <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80063d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063da:	1c5a      	adds	r2, r3, #1
 80063dc:	637a      	str	r2, [r7, #52]	; 0x34
 80063de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063e0:	b2d2      	uxtb	r2, r2
 80063e2:	701a      	strb	r2, [r3, #0]
 80063e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80063f0:	e00b      	b.n	800640a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80063f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f8:	1c59      	adds	r1, r3, #1
 80063fa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80063fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006400:	b2d2      	uxtb	r2, r2
 8006402:	701a      	strb	r2, [r3, #0]
 8006404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006406:	09db      	lsrs	r3, r3, #7
 8006408:	62bb      	str	r3, [r7, #40]	; 0x28
 800640a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640c:	2b7f      	cmp	r3, #127	; 0x7f
 800640e:	d8f0      	bhi.n	80063f2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006418:	b2d2      	uxtb	r2, r2
 800641a:	701a      	strb	r2, [r3, #0]
 800641c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	627b      	str	r3, [r7, #36]	; 0x24
 8006424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006426:	623b      	str	r3, [r7, #32]
 8006428:	e00b      	b.n	8006442 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	b2da      	uxtb	r2, r3
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	1c59      	adds	r1, r3, #1
 8006432:	6279      	str	r1, [r7, #36]	; 0x24
 8006434:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006438:	b2d2      	uxtb	r2, r2
 800643a:	701a      	strb	r2, [r3, #0]
 800643c:	6a3b      	ldr	r3, [r7, #32]
 800643e:	09db      	lsrs	r3, r3, #7
 8006440:	623b      	str	r3, [r7, #32]
 8006442:	6a3b      	ldr	r3, [r7, #32]
 8006444:	2b7f      	cmp	r3, #127	; 0x7f
 8006446:	d8f0      	bhi.n	800642a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	1c5a      	adds	r2, r3, #1
 800644c:	627a      	str	r2, [r7, #36]	; 0x24
 800644e:	6a3a      	ldr	r2, [r7, #32]
 8006450:	b2d2      	uxtb	r2, r2
 8006452:	701a      	strb	r2, [r3, #0]
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	6979      	ldr	r1, [r7, #20]
 800645c:	69b8      	ldr	r0, [r7, #24]
 800645e:	f7ff fc8b 	bl	8005d78 <_SendPacket>
  RECORD_END();
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	f383 8811 	msr	BASEPRI, r3
}
 8006468:	bf00      	nop
 800646a:	3740      	adds	r7, #64	; 0x40
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	2000d4a8 	.word	0x2000d4a8

08006474 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006474:	b580      	push	{r7, lr}
 8006476:	b08c      	sub	sp, #48	; 0x30
 8006478:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800647a:	4b58      	ldr	r3, [pc, #352]	; (80065dc <SEGGER_SYSVIEW_Start+0x168>)
 800647c:	2201      	movs	r2, #1
 800647e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006480:	f3ef 8311 	mrs	r3, BASEPRI
 8006484:	f04f 0120 	mov.w	r1, #32
 8006488:	f381 8811 	msr	BASEPRI, r1
 800648c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800648e:	4b53      	ldr	r3, [pc, #332]	; (80065dc <SEGGER_SYSVIEW_Start+0x168>)
 8006490:	785b      	ldrb	r3, [r3, #1]
 8006492:	220a      	movs	r2, #10
 8006494:	4952      	ldr	r1, [pc, #328]	; (80065e0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006496:	4618      	mov	r0, r3
 8006498:	f7f9 fea2 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80064a2:	200a      	movs	r0, #10
 80064a4:	f7ff fe2a 	bl	80060fc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80064a8:	f3ef 8311 	mrs	r3, BASEPRI
 80064ac:	f04f 0120 	mov.w	r1, #32
 80064b0:	f381 8811 	msr	BASEPRI, r1
 80064b4:	60bb      	str	r3, [r7, #8]
 80064b6:	484b      	ldr	r0, [pc, #300]	; (80065e4 <SEGGER_SYSVIEW_Start+0x170>)
 80064b8:	f7ff fb70 	bl	8005b9c <_PreparePacket>
 80064bc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064c6:	4b45      	ldr	r3, [pc, #276]	; (80065dc <SEGGER_SYSVIEW_Start+0x168>)
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80064cc:	e00b      	b.n	80064e6 <SEGGER_SYSVIEW_Start+0x72>
 80064ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d0:	b2da      	uxtb	r2, r3
 80064d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d4:	1c59      	adds	r1, r3, #1
 80064d6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80064d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064dc:	b2d2      	uxtb	r2, r2
 80064de:	701a      	strb	r2, [r3, #0]
 80064e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e2:	09db      	lsrs	r3, r3, #7
 80064e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80064e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e8:	2b7f      	cmp	r3, #127	; 0x7f
 80064ea:	d8f0      	bhi.n	80064ce <SEGGER_SYSVIEW_Start+0x5a>
 80064ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ee:	1c5a      	adds	r2, r3, #1
 80064f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064f4:	b2d2      	uxtb	r2, r2
 80064f6:	701a      	strb	r2, [r3, #0]
 80064f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006500:	4b36      	ldr	r3, [pc, #216]	; (80065dc <SEGGER_SYSVIEW_Start+0x168>)
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	623b      	str	r3, [r7, #32]
 8006506:	e00b      	b.n	8006520 <SEGGER_SYSVIEW_Start+0xac>
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	b2da      	uxtb	r2, r3
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	1c59      	adds	r1, r3, #1
 8006510:	6279      	str	r1, [r7, #36]	; 0x24
 8006512:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006516:	b2d2      	uxtb	r2, r2
 8006518:	701a      	strb	r2, [r3, #0]
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	09db      	lsrs	r3, r3, #7
 800651e:	623b      	str	r3, [r7, #32]
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	2b7f      	cmp	r3, #127	; 0x7f
 8006524:	d8f0      	bhi.n	8006508 <SEGGER_SYSVIEW_Start+0x94>
 8006526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006528:	1c5a      	adds	r2, r3, #1
 800652a:	627a      	str	r2, [r7, #36]	; 0x24
 800652c:	6a3a      	ldr	r2, [r7, #32]
 800652e:	b2d2      	uxtb	r2, r2
 8006530:	701a      	strb	r2, [r3, #0]
 8006532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006534:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	61fb      	str	r3, [r7, #28]
 800653a:	4b28      	ldr	r3, [pc, #160]	; (80065dc <SEGGER_SYSVIEW_Start+0x168>)
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	61bb      	str	r3, [r7, #24]
 8006540:	e00b      	b.n	800655a <SEGGER_SYSVIEW_Start+0xe6>
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	b2da      	uxtb	r2, r3
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	1c59      	adds	r1, r3, #1
 800654a:	61f9      	str	r1, [r7, #28]
 800654c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006550:	b2d2      	uxtb	r2, r2
 8006552:	701a      	strb	r2, [r3, #0]
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	09db      	lsrs	r3, r3, #7
 8006558:	61bb      	str	r3, [r7, #24]
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	2b7f      	cmp	r3, #127	; 0x7f
 800655e:	d8f0      	bhi.n	8006542 <SEGGER_SYSVIEW_Start+0xce>
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	1c5a      	adds	r2, r3, #1
 8006564:	61fa      	str	r2, [r7, #28]
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	b2d2      	uxtb	r2, r2
 800656a:	701a      	strb	r2, [r3, #0]
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	617b      	str	r3, [r7, #20]
 8006574:	2300      	movs	r3, #0
 8006576:	613b      	str	r3, [r7, #16]
 8006578:	e00b      	b.n	8006592 <SEGGER_SYSVIEW_Start+0x11e>
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	b2da      	uxtb	r2, r3
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	1c59      	adds	r1, r3, #1
 8006582:	6179      	str	r1, [r7, #20]
 8006584:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006588:	b2d2      	uxtb	r2, r2
 800658a:	701a      	strb	r2, [r3, #0]
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	09db      	lsrs	r3, r3, #7
 8006590:	613b      	str	r3, [r7, #16]
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	2b7f      	cmp	r3, #127	; 0x7f
 8006596:	d8f0      	bhi.n	800657a <SEGGER_SYSVIEW_Start+0x106>
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	617a      	str	r2, [r7, #20]
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	b2d2      	uxtb	r2, r2
 80065a2:	701a      	strb	r2, [r3, #0]
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80065a8:	2218      	movs	r2, #24
 80065aa:	6839      	ldr	r1, [r7, #0]
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7ff fbe3 	bl	8005d78 <_SendPacket>
      RECORD_END();
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80065b8:	4b08      	ldr	r3, [pc, #32]	; (80065dc <SEGGER_SYSVIEW_Start+0x168>)
 80065ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80065c0:	4b06      	ldr	r3, [pc, #24]	; (80065dc <SEGGER_SYSVIEW_Start+0x168>)
 80065c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80065c6:	f000 f9eb 	bl	80069a0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80065ca:	f000 f9b1 	bl	8006930 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80065ce:	f000 fbb3 	bl	8006d38 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80065d2:	bf00      	nop
 80065d4:	3730      	adds	r7, #48	; 0x30
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	2000d478 	.word	0x2000d478
 80065e0:	08007984 	.word	0x08007984
 80065e4:	2000d4a8 	.word	0x2000d4a8

080065e8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80065ee:	f3ef 8311 	mrs	r3, BASEPRI
 80065f2:	f04f 0120 	mov.w	r1, #32
 80065f6:	f381 8811 	msr	BASEPRI, r1
 80065fa:	607b      	str	r3, [r7, #4]
 80065fc:	480b      	ldr	r0, [pc, #44]	; (800662c <SEGGER_SYSVIEW_Stop+0x44>)
 80065fe:	f7ff facd 	bl	8005b9c <_PreparePacket>
 8006602:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006604:	4b0a      	ldr	r3, [pc, #40]	; (8006630 <SEGGER_SYSVIEW_Stop+0x48>)
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d007      	beq.n	800661c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800660c:	220b      	movs	r2, #11
 800660e:	6839      	ldr	r1, [r7, #0]
 8006610:	6838      	ldr	r0, [r7, #0]
 8006612:	f7ff fbb1 	bl	8005d78 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006616:	4b06      	ldr	r3, [pc, #24]	; (8006630 <SEGGER_SYSVIEW_Stop+0x48>)
 8006618:	2200      	movs	r2, #0
 800661a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f383 8811 	msr	BASEPRI, r3
}
 8006622:	bf00      	nop
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	2000d4a8 	.word	0x2000d4a8
 8006630:	2000d478 	.word	0x2000d478

08006634 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006634:	b580      	push	{r7, lr}
 8006636:	b08c      	sub	sp, #48	; 0x30
 8006638:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800663a:	f3ef 8311 	mrs	r3, BASEPRI
 800663e:	f04f 0120 	mov.w	r1, #32
 8006642:	f381 8811 	msr	BASEPRI, r1
 8006646:	60fb      	str	r3, [r7, #12]
 8006648:	4845      	ldr	r0, [pc, #276]	; (8006760 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800664a:	f7ff faa7 	bl	8005b9c <_PreparePacket>
 800664e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006658:	4b42      	ldr	r3, [pc, #264]	; (8006764 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	62bb      	str	r3, [r7, #40]	; 0x28
 800665e:	e00b      	b.n	8006678 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006662:	b2da      	uxtb	r2, r3
 8006664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006666:	1c59      	adds	r1, r3, #1
 8006668:	62f9      	str	r1, [r7, #44]	; 0x2c
 800666a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800666e:	b2d2      	uxtb	r2, r2
 8006670:	701a      	strb	r2, [r3, #0]
 8006672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006674:	09db      	lsrs	r3, r3, #7
 8006676:	62bb      	str	r3, [r7, #40]	; 0x28
 8006678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667a:	2b7f      	cmp	r3, #127	; 0x7f
 800667c:	d8f0      	bhi.n	8006660 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800667e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006686:	b2d2      	uxtb	r2, r2
 8006688:	701a      	strb	r2, [r3, #0]
 800668a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	627b      	str	r3, [r7, #36]	; 0x24
 8006692:	4b34      	ldr	r3, [pc, #208]	; (8006764 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	623b      	str	r3, [r7, #32]
 8006698:	e00b      	b.n	80066b2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	b2da      	uxtb	r2, r3
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	1c59      	adds	r1, r3, #1
 80066a2:	6279      	str	r1, [r7, #36]	; 0x24
 80066a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066a8:	b2d2      	uxtb	r2, r2
 80066aa:	701a      	strb	r2, [r3, #0]
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	09db      	lsrs	r3, r3, #7
 80066b0:	623b      	str	r3, [r7, #32]
 80066b2:	6a3b      	ldr	r3, [r7, #32]
 80066b4:	2b7f      	cmp	r3, #127	; 0x7f
 80066b6:	d8f0      	bhi.n	800669a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80066b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ba:	1c5a      	adds	r2, r3, #1
 80066bc:	627a      	str	r2, [r7, #36]	; 0x24
 80066be:	6a3a      	ldr	r2, [r7, #32]
 80066c0:	b2d2      	uxtb	r2, r2
 80066c2:	701a      	strb	r2, [r3, #0]
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	61fb      	str	r3, [r7, #28]
 80066cc:	4b25      	ldr	r3, [pc, #148]	; (8006764 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	61bb      	str	r3, [r7, #24]
 80066d2:	e00b      	b.n	80066ec <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	1c59      	adds	r1, r3, #1
 80066dc:	61f9      	str	r1, [r7, #28]
 80066de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066e2:	b2d2      	uxtb	r2, r2
 80066e4:	701a      	strb	r2, [r3, #0]
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	09db      	lsrs	r3, r3, #7
 80066ea:	61bb      	str	r3, [r7, #24]
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	2b7f      	cmp	r3, #127	; 0x7f
 80066f0:	d8f0      	bhi.n	80066d4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	61fa      	str	r2, [r7, #28]
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	b2d2      	uxtb	r2, r2
 80066fc:	701a      	strb	r2, [r3, #0]
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	617b      	str	r3, [r7, #20]
 8006706:	2300      	movs	r3, #0
 8006708:	613b      	str	r3, [r7, #16]
 800670a:	e00b      	b.n	8006724 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	b2da      	uxtb	r2, r3
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	1c59      	adds	r1, r3, #1
 8006714:	6179      	str	r1, [r7, #20]
 8006716:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800671a:	b2d2      	uxtb	r2, r2
 800671c:	701a      	strb	r2, [r3, #0]
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	09db      	lsrs	r3, r3, #7
 8006722:	613b      	str	r3, [r7, #16]
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	2b7f      	cmp	r3, #127	; 0x7f
 8006728:	d8f0      	bhi.n	800670c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	1c5a      	adds	r2, r3, #1
 800672e:	617a      	str	r2, [r7, #20]
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	b2d2      	uxtb	r2, r2
 8006734:	701a      	strb	r2, [r3, #0]
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800673a:	2218      	movs	r2, #24
 800673c:	6879      	ldr	r1, [r7, #4]
 800673e:	68b8      	ldr	r0, [r7, #8]
 8006740:	f7ff fb1a 	bl	8005d78 <_SendPacket>
  RECORD_END();
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800674a:	4b06      	ldr	r3, [pc, #24]	; (8006764 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800674c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674e:	2b00      	cmp	r3, #0
 8006750:	d002      	beq.n	8006758 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006752:	4b04      	ldr	r3, [pc, #16]	; (8006764 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006756:	4798      	blx	r3
  }
}
 8006758:	bf00      	nop
 800675a:	3730      	adds	r7, #48	; 0x30
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	2000d4a8 	.word	0x2000d4a8
 8006764:	2000d478 	.word	0x2000d478

08006768 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006768:	b580      	push	{r7, lr}
 800676a:	b092      	sub	sp, #72	; 0x48
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006770:	f3ef 8311 	mrs	r3, BASEPRI
 8006774:	f04f 0120 	mov.w	r1, #32
 8006778:	f381 8811 	msr	BASEPRI, r1
 800677c:	617b      	str	r3, [r7, #20]
 800677e:	486a      	ldr	r0, [pc, #424]	; (8006928 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006780:	f7ff fa0c 	bl	8005b9c <_PreparePacket>
 8006784:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	647b      	str	r3, [r7, #68]	; 0x44
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	4b66      	ldr	r3, [pc, #408]	; (800692c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	643b      	str	r3, [r7, #64]	; 0x40
 800679a:	e00b      	b.n	80067b4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800679c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067a2:	1c59      	adds	r1, r3, #1
 80067a4:	6479      	str	r1, [r7, #68]	; 0x44
 80067a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067aa:	b2d2      	uxtb	r2, r2
 80067ac:	701a      	strb	r2, [r3, #0]
 80067ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067b0:	09db      	lsrs	r3, r3, #7
 80067b2:	643b      	str	r3, [r7, #64]	; 0x40
 80067b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067b6:	2b7f      	cmp	r3, #127	; 0x7f
 80067b8:	d8f0      	bhi.n	800679c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80067ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067bc:	1c5a      	adds	r2, r3, #1
 80067be:	647a      	str	r2, [r7, #68]	; 0x44
 80067c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067c2:	b2d2      	uxtb	r2, r2
 80067c4:	701a      	strb	r2, [r3, #0]
 80067c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80067d4:	e00b      	b.n	80067ee <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80067d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067dc:	1c59      	adds	r1, r3, #1
 80067de:	63f9      	str	r1, [r7, #60]	; 0x3c
 80067e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067e4:	b2d2      	uxtb	r2, r2
 80067e6:	701a      	strb	r2, [r3, #0]
 80067e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ea:	09db      	lsrs	r3, r3, #7
 80067ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80067ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f0:	2b7f      	cmp	r3, #127	; 0x7f
 80067f2:	d8f0      	bhi.n	80067d6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80067f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80067fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067fc:	b2d2      	uxtb	r2, r2
 80067fe:	701a      	strb	r2, [r3, #0]
 8006800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006802:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	2220      	movs	r2, #32
 800680a:	4619      	mov	r1, r3
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f7ff f995 	bl	8005b3c <_EncodeStr>
 8006812:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006814:	2209      	movs	r2, #9
 8006816:	68f9      	ldr	r1, [r7, #12]
 8006818:	6938      	ldr	r0, [r7, #16]
 800681a:	f7ff faad 	bl	8005d78 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	637b      	str	r3, [r7, #52]	; 0x34
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	4b40      	ldr	r3, [pc, #256]	; (800692c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	633b      	str	r3, [r7, #48]	; 0x30
 8006832:	e00b      	b.n	800684c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006836:	b2da      	uxtb	r2, r3
 8006838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800683a:	1c59      	adds	r1, r3, #1
 800683c:	6379      	str	r1, [r7, #52]	; 0x34
 800683e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006842:	b2d2      	uxtb	r2, r2
 8006844:	701a      	strb	r2, [r3, #0]
 8006846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006848:	09db      	lsrs	r3, r3, #7
 800684a:	633b      	str	r3, [r7, #48]	; 0x30
 800684c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684e:	2b7f      	cmp	r3, #127	; 0x7f
 8006850:	d8f0      	bhi.n	8006834 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006854:	1c5a      	adds	r2, r3, #1
 8006856:	637a      	str	r2, [r7, #52]	; 0x34
 8006858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800685a:	b2d2      	uxtb	r2, r2
 800685c:	701a      	strb	r2, [r3, #0]
 800685e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006860:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	62bb      	str	r3, [r7, #40]	; 0x28
 800686c:	e00b      	b.n	8006886 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800686e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006870:	b2da      	uxtb	r2, r3
 8006872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006874:	1c59      	adds	r1, r3, #1
 8006876:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006878:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800687c:	b2d2      	uxtb	r2, r2
 800687e:	701a      	strb	r2, [r3, #0]
 8006880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006882:	09db      	lsrs	r3, r3, #7
 8006884:	62bb      	str	r3, [r7, #40]	; 0x28
 8006886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006888:	2b7f      	cmp	r3, #127	; 0x7f
 800688a:	d8f0      	bhi.n	800686e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800688c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688e:	1c5a      	adds	r2, r3, #1
 8006890:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006894:	b2d2      	uxtb	r2, r2
 8006896:	701a      	strb	r2, [r3, #0]
 8006898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	627b      	str	r3, [r7, #36]	; 0x24
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	623b      	str	r3, [r7, #32]
 80068a6:	e00b      	b.n	80068c0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80068a8:	6a3b      	ldr	r3, [r7, #32]
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ae:	1c59      	adds	r1, r3, #1
 80068b0:	6279      	str	r1, [r7, #36]	; 0x24
 80068b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068b6:	b2d2      	uxtb	r2, r2
 80068b8:	701a      	strb	r2, [r3, #0]
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	09db      	lsrs	r3, r3, #7
 80068be:	623b      	str	r3, [r7, #32]
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	2b7f      	cmp	r3, #127	; 0x7f
 80068c4:	d8f0      	bhi.n	80068a8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	1c5a      	adds	r2, r3, #1
 80068ca:	627a      	str	r2, [r7, #36]	; 0x24
 80068cc:	6a3a      	ldr	r2, [r7, #32]
 80068ce:	b2d2      	uxtb	r2, r2
 80068d0:	701a      	strb	r2, [r3, #0]
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	61fb      	str	r3, [r7, #28]
 80068da:	2300      	movs	r3, #0
 80068dc:	61bb      	str	r3, [r7, #24]
 80068de:	e00b      	b.n	80068f8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	1c59      	adds	r1, r3, #1
 80068e8:	61f9      	str	r1, [r7, #28]
 80068ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068ee:	b2d2      	uxtb	r2, r2
 80068f0:	701a      	strb	r2, [r3, #0]
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	09db      	lsrs	r3, r3, #7
 80068f6:	61bb      	str	r3, [r7, #24]
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	2b7f      	cmp	r3, #127	; 0x7f
 80068fc:	d8f0      	bhi.n	80068e0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	1c5a      	adds	r2, r3, #1
 8006902:	61fa      	str	r2, [r7, #28]
 8006904:	69ba      	ldr	r2, [r7, #24]
 8006906:	b2d2      	uxtb	r2, r2
 8006908:	701a      	strb	r2, [r3, #0]
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800690e:	2215      	movs	r2, #21
 8006910:	68f9      	ldr	r1, [r7, #12]
 8006912:	6938      	ldr	r0, [r7, #16]
 8006914:	f7ff fa30 	bl	8005d78 <_SendPacket>
  RECORD_END();
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f383 8811 	msr	BASEPRI, r3
}
 800691e:	bf00      	nop
 8006920:	3748      	adds	r7, #72	; 0x48
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	2000d4a8 	.word	0x2000d4a8
 800692c:	2000d478 	.word	0x2000d478

08006930 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006930:	b580      	push	{r7, lr}
 8006932:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006934:	4b07      	ldr	r3, [pc, #28]	; (8006954 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006936:	6a1b      	ldr	r3, [r3, #32]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d008      	beq.n	800694e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800693c:	4b05      	ldr	r3, [pc, #20]	; (8006954 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d003      	beq.n	800694e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006946:	4b03      	ldr	r3, [pc, #12]	; (8006954 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	4798      	blx	r3
  }
}
 800694e:	bf00      	nop
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	2000d478 	.word	0x2000d478

08006958 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006960:	f3ef 8311 	mrs	r3, BASEPRI
 8006964:	f04f 0120 	mov.w	r1, #32
 8006968:	f381 8811 	msr	BASEPRI, r1
 800696c:	617b      	str	r3, [r7, #20]
 800696e:	480b      	ldr	r0, [pc, #44]	; (800699c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006970:	f7ff f914 	bl	8005b9c <_PreparePacket>
 8006974:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006976:	2280      	movs	r2, #128	; 0x80
 8006978:	6879      	ldr	r1, [r7, #4]
 800697a:	6938      	ldr	r0, [r7, #16]
 800697c:	f7ff f8de 	bl	8005b3c <_EncodeStr>
 8006980:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006982:	220e      	movs	r2, #14
 8006984:	68f9      	ldr	r1, [r7, #12]
 8006986:	6938      	ldr	r0, [r7, #16]
 8006988:	f7ff f9f6 	bl	8005d78 <_SendPacket>
  RECORD_END();
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f383 8811 	msr	BASEPRI, r3
}
 8006992:	bf00      	nop
 8006994:	3718      	adds	r7, #24
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	2000d4a8 	.word	0x2000d4a8

080069a0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80069a0:	b590      	push	{r4, r7, lr}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80069a6:	4b15      	ldr	r3, [pc, #84]	; (80069fc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d01a      	beq.n	80069e4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80069ae:	4b13      	ldr	r3, [pc, #76]	; (80069fc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d015      	beq.n	80069e4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80069b8:	4b10      	ldr	r3, [pc, #64]	; (80069fc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4798      	blx	r3
 80069c0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80069c4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80069c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069ca:	f04f 0200 	mov.w	r2, #0
 80069ce:	f04f 0300 	mov.w	r3, #0
 80069d2:	000a      	movs	r2, r1
 80069d4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80069d6:	4613      	mov	r3, r2
 80069d8:	461a      	mov	r2, r3
 80069da:	4621      	mov	r1, r4
 80069dc:	200d      	movs	r0, #13
 80069de:	f7ff fbe7 	bl	80061b0 <SEGGER_SYSVIEW_RecordU32x2>
 80069e2:	e006      	b.n	80069f2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80069e4:	4b06      	ldr	r3, [pc, #24]	; (8006a00 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4619      	mov	r1, r3
 80069ea:	200c      	movs	r0, #12
 80069ec:	f7ff fba4 	bl	8006138 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80069f0:	bf00      	nop
 80069f2:	bf00      	nop
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd90      	pop	{r4, r7, pc}
 80069fa:	bf00      	nop
 80069fc:	2000d478 	.word	0x2000d478
 8006a00:	e0001004 	.word	0xe0001004

08006a04 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a0a:	f3ef 8311 	mrs	r3, BASEPRI
 8006a0e:	f04f 0120 	mov.w	r1, #32
 8006a12:	f381 8811 	msr	BASEPRI, r1
 8006a16:	607b      	str	r3, [r7, #4]
 8006a18:	4807      	ldr	r0, [pc, #28]	; (8006a38 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006a1a:	f7ff f8bf 	bl	8005b9c <_PreparePacket>
 8006a1e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006a20:	2211      	movs	r2, #17
 8006a22:	6839      	ldr	r1, [r7, #0]
 8006a24:	6838      	ldr	r0, [r7, #0]
 8006a26:	f7ff f9a7 	bl	8005d78 <_SendPacket>
  RECORD_END();
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f383 8811 	msr	BASEPRI, r3
}
 8006a30:	bf00      	nop
 8006a32:	3708      	adds	r7, #8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	2000d4a8 	.word	0x2000d4a8

08006a3c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b088      	sub	sp, #32
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a44:	f3ef 8311 	mrs	r3, BASEPRI
 8006a48:	f04f 0120 	mov.w	r1, #32
 8006a4c:	f381 8811 	msr	BASEPRI, r1
 8006a50:	617b      	str	r3, [r7, #20]
 8006a52:	4819      	ldr	r0, [pc, #100]	; (8006ab8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006a54:	f7ff f8a2 	bl	8005b9c <_PreparePacket>
 8006a58:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a5e:	4b17      	ldr	r3, [pc, #92]	; (8006abc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	61fb      	str	r3, [r7, #28]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	61bb      	str	r3, [r7, #24]
 8006a70:	e00b      	b.n	8006a8a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	1c59      	adds	r1, r3, #1
 8006a7a:	61f9      	str	r1, [r7, #28]
 8006a7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a80:	b2d2      	uxtb	r2, r2
 8006a82:	701a      	strb	r2, [r3, #0]
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	09db      	lsrs	r3, r3, #7
 8006a88:	61bb      	str	r3, [r7, #24]
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a8e:	d8f0      	bhi.n	8006a72 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	1c5a      	adds	r2, r3, #1
 8006a94:	61fa      	str	r2, [r7, #28]
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	b2d2      	uxtb	r2, r2
 8006a9a:	701a      	strb	r2, [r3, #0]
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006aa0:	2208      	movs	r2, #8
 8006aa2:	68f9      	ldr	r1, [r7, #12]
 8006aa4:	6938      	ldr	r0, [r7, #16]
 8006aa6:	f7ff f967 	bl	8005d78 <_SendPacket>
  RECORD_END();
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f383 8811 	msr	BASEPRI, r3
}
 8006ab0:	bf00      	nop
 8006ab2:	3720      	adds	r7, #32
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	2000d4a8 	.word	0x2000d4a8
 8006abc:	2000d478 	.word	0x2000d478

08006ac0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b088      	sub	sp, #32
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ac8:	f3ef 8311 	mrs	r3, BASEPRI
 8006acc:	f04f 0120 	mov.w	r1, #32
 8006ad0:	f381 8811 	msr	BASEPRI, r1
 8006ad4:	617b      	str	r3, [r7, #20]
 8006ad6:	4819      	ldr	r0, [pc, #100]	; (8006b3c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006ad8:	f7ff f860 	bl	8005b9c <_PreparePacket>
 8006adc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ae2:	4b17      	ldr	r3, [pc, #92]	; (8006b40 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	61fb      	str	r3, [r7, #28]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	61bb      	str	r3, [r7, #24]
 8006af4:	e00b      	b.n	8006b0e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	1c59      	adds	r1, r3, #1
 8006afe:	61f9      	str	r1, [r7, #28]
 8006b00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b04:	b2d2      	uxtb	r2, r2
 8006b06:	701a      	strb	r2, [r3, #0]
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	09db      	lsrs	r3, r3, #7
 8006b0c:	61bb      	str	r3, [r7, #24]
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	2b7f      	cmp	r3, #127	; 0x7f
 8006b12:	d8f0      	bhi.n	8006af6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	61fa      	str	r2, [r7, #28]
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	b2d2      	uxtb	r2, r2
 8006b1e:	701a      	strb	r2, [r3, #0]
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006b24:	2204      	movs	r2, #4
 8006b26:	68f9      	ldr	r1, [r7, #12]
 8006b28:	6938      	ldr	r0, [r7, #16]
 8006b2a:	f7ff f925 	bl	8005d78 <_SendPacket>
  RECORD_END();
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f383 8811 	msr	BASEPRI, r3
}
 8006b34:	bf00      	nop
 8006b36:	3720      	adds	r7, #32
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	2000d4a8 	.word	0x2000d4a8
 8006b40:	2000d478 	.word	0x2000d478

08006b44 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b088      	sub	sp, #32
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b4c:	f3ef 8311 	mrs	r3, BASEPRI
 8006b50:	f04f 0120 	mov.w	r1, #32
 8006b54:	f381 8811 	msr	BASEPRI, r1
 8006b58:	617b      	str	r3, [r7, #20]
 8006b5a:	4819      	ldr	r0, [pc, #100]	; (8006bc0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006b5c:	f7ff f81e 	bl	8005b9c <_PreparePacket>
 8006b60:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b66:	4b17      	ldr	r3, [pc, #92]	; (8006bc4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	61fb      	str	r3, [r7, #28]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	61bb      	str	r3, [r7, #24]
 8006b78:	e00b      	b.n	8006b92 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	1c59      	adds	r1, r3, #1
 8006b82:	61f9      	str	r1, [r7, #28]
 8006b84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b88:	b2d2      	uxtb	r2, r2
 8006b8a:	701a      	strb	r2, [r3, #0]
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	09db      	lsrs	r3, r3, #7
 8006b90:	61bb      	str	r3, [r7, #24]
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	2b7f      	cmp	r3, #127	; 0x7f
 8006b96:	d8f0      	bhi.n	8006b7a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	1c5a      	adds	r2, r3, #1
 8006b9c:	61fa      	str	r2, [r7, #28]
 8006b9e:	69ba      	ldr	r2, [r7, #24]
 8006ba0:	b2d2      	uxtb	r2, r2
 8006ba2:	701a      	strb	r2, [r3, #0]
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006ba8:	2206      	movs	r2, #6
 8006baa:	68f9      	ldr	r1, [r7, #12]
 8006bac:	6938      	ldr	r0, [r7, #16]
 8006bae:	f7ff f8e3 	bl	8005d78 <_SendPacket>
  RECORD_END();
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	f383 8811 	msr	BASEPRI, r3
}
 8006bb8:	bf00      	nop
 8006bba:	3720      	adds	r7, #32
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	2000d4a8 	.word	0x2000d4a8
 8006bc4:	2000d478 	.word	0x2000d478

08006bc8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006bd0:	4b04      	ldr	r3, [pc, #16]	; (8006be4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	1ad3      	subs	r3, r2, r3
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	2000d478 	.word	0x2000d478

08006be8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08c      	sub	sp, #48	; 0x30
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	4603      	mov	r3, r0
 8006bf0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006bf2:	4b40      	ldr	r3, [pc, #256]	; (8006cf4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d077      	beq.n	8006cea <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006bfa:	4b3e      	ldr	r3, [pc, #248]	; (8006cf4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006c00:	2300      	movs	r3, #0
 8006c02:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c04:	e008      	b.n	8006c18 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d007      	beq.n	8006c22 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c14:	3301      	adds	r3, #1
 8006c16:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c18:	79fb      	ldrb	r3, [r7, #7]
 8006c1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d3f2      	bcc.n	8006c06 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006c20:	e000      	b.n	8006c24 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006c22:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d055      	beq.n	8006cd6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c2a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c2e:	f04f 0120 	mov.w	r1, #32
 8006c32:	f381 8811 	msr	BASEPRI, r1
 8006c36:	617b      	str	r3, [r7, #20]
 8006c38:	482f      	ldr	r0, [pc, #188]	; (8006cf8 <SEGGER_SYSVIEW_SendModule+0x110>)
 8006c3a:	f7fe ffaf 	bl	8005b9c <_PreparePacket>
 8006c3e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	627b      	str	r3, [r7, #36]	; 0x24
 8006c48:	79fb      	ldrb	r3, [r7, #7]
 8006c4a:	623b      	str	r3, [r7, #32]
 8006c4c:	e00b      	b.n	8006c66 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006c4e:	6a3b      	ldr	r3, [r7, #32]
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	1c59      	adds	r1, r3, #1
 8006c56:	6279      	str	r1, [r7, #36]	; 0x24
 8006c58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c5c:	b2d2      	uxtb	r2, r2
 8006c5e:	701a      	strb	r2, [r3, #0]
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	09db      	lsrs	r3, r3, #7
 8006c64:	623b      	str	r3, [r7, #32]
 8006c66:	6a3b      	ldr	r3, [r7, #32]
 8006c68:	2b7f      	cmp	r3, #127	; 0x7f
 8006c6a:	d8f0      	bhi.n	8006c4e <SEGGER_SYSVIEW_SendModule+0x66>
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	627a      	str	r2, [r7, #36]	; 0x24
 8006c72:	6a3a      	ldr	r2, [r7, #32]
 8006c74:	b2d2      	uxtb	r2, r2
 8006c76:	701a      	strb	r2, [r3, #0]
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	61fb      	str	r3, [r7, #28]
 8006c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	61bb      	str	r3, [r7, #24]
 8006c86:	e00b      	b.n	8006ca0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	1c59      	adds	r1, r3, #1
 8006c90:	61f9      	str	r1, [r7, #28]
 8006c92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c96:	b2d2      	uxtb	r2, r2
 8006c98:	701a      	strb	r2, [r3, #0]
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	09db      	lsrs	r3, r3, #7
 8006c9e:	61bb      	str	r3, [r7, #24]
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ca4:	d8f0      	bhi.n	8006c88 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	61fa      	str	r2, [r7, #28]
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	b2d2      	uxtb	r2, r2
 8006cb0:	701a      	strb	r2, [r3, #0]
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2280      	movs	r2, #128	; 0x80
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f7fe ff3c 	bl	8005b3c <_EncodeStr>
 8006cc4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006cc6:	2216      	movs	r2, #22
 8006cc8:	68f9      	ldr	r1, [r7, #12]
 8006cca:	6938      	ldr	r0, [r7, #16]
 8006ccc:	f7ff f854 	bl	8005d78 <_SendPacket>
      RECORD_END();
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d006      	beq.n	8006cea <SEGGER_SYSVIEW_SendModule+0x102>
 8006cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	4798      	blx	r3
    }
  }
}
 8006cea:	bf00      	nop
 8006cec:	3730      	adds	r7, #48	; 0x30
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	2000d4a0 	.word	0x2000d4a0
 8006cf8:	2000d4a8 	.word	0x2000d4a8

08006cfc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006d02:	4b0c      	ldr	r3, [pc, #48]	; (8006d34 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00f      	beq.n	8006d2a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006d0a:	4b0a      	ldr	r3, [pc, #40]	; (8006d34 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d002      	beq.n	8006d1e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1f2      	bne.n	8006d10 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006d2a:	bf00      	nop
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	2000d4a0 	.word	0x2000d4a0

08006d38 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006d3e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d42:	f04f 0120 	mov.w	r1, #32
 8006d46:	f381 8811 	msr	BASEPRI, r1
 8006d4a:	60fb      	str	r3, [r7, #12]
 8006d4c:	4817      	ldr	r0, [pc, #92]	; (8006dac <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006d4e:	f7fe ff25 	bl	8005b9c <_PreparePacket>
 8006d52:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	617b      	str	r3, [r7, #20]
 8006d5c:	4b14      	ldr	r3, [pc, #80]	; (8006db0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	613b      	str	r3, [r7, #16]
 8006d62:	e00b      	b.n	8006d7c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	b2da      	uxtb	r2, r3
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	1c59      	adds	r1, r3, #1
 8006d6c:	6179      	str	r1, [r7, #20]
 8006d6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d72:	b2d2      	uxtb	r2, r2
 8006d74:	701a      	strb	r2, [r3, #0]
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	09db      	lsrs	r3, r3, #7
 8006d7a:	613b      	str	r3, [r7, #16]
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8006d80:	d8f0      	bhi.n	8006d64 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	617a      	str	r2, [r7, #20]
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	b2d2      	uxtb	r2, r2
 8006d8c:	701a      	strb	r2, [r3, #0]
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006d92:	221b      	movs	r2, #27
 8006d94:	6879      	ldr	r1, [r7, #4]
 8006d96:	68b8      	ldr	r0, [r7, #8]
 8006d98:	f7fe ffee 	bl	8005d78 <_SendPacket>
  RECORD_END();
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f383 8811 	msr	BASEPRI, r3
}
 8006da2:	bf00      	nop
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	2000d4a8 	.word	0x2000d4a8
 8006db0:	2000d4a4 	.word	0x2000d4a4

08006db4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b08a      	sub	sp, #40	; 0x28
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006dbc:	f3ef 8311 	mrs	r3, BASEPRI
 8006dc0:	f04f 0120 	mov.w	r1, #32
 8006dc4:	f381 8811 	msr	BASEPRI, r1
 8006dc8:	617b      	str	r3, [r7, #20]
 8006dca:	4827      	ldr	r0, [pc, #156]	; (8006e68 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006dcc:	f7fe fee6 	bl	8005b9c <_PreparePacket>
 8006dd0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006dd2:	2280      	movs	r2, #128	; 0x80
 8006dd4:	6879      	ldr	r1, [r7, #4]
 8006dd6:	6938      	ldr	r0, [r7, #16]
 8006dd8:	f7fe feb0 	bl	8005b3c <_EncodeStr>
 8006ddc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	627b      	str	r3, [r7, #36]	; 0x24
 8006de2:	2301      	movs	r3, #1
 8006de4:	623b      	str	r3, [r7, #32]
 8006de6:	e00b      	b.n	8006e00 <SEGGER_SYSVIEW_Warn+0x4c>
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	b2da      	uxtb	r2, r3
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	1c59      	adds	r1, r3, #1
 8006df0:	6279      	str	r1, [r7, #36]	; 0x24
 8006df2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006df6:	b2d2      	uxtb	r2, r2
 8006df8:	701a      	strb	r2, [r3, #0]
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	09db      	lsrs	r3, r3, #7
 8006dfe:	623b      	str	r3, [r7, #32]
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	2b7f      	cmp	r3, #127	; 0x7f
 8006e04:	d8f0      	bhi.n	8006de8 <SEGGER_SYSVIEW_Warn+0x34>
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	1c5a      	adds	r2, r3, #1
 8006e0a:	627a      	str	r2, [r7, #36]	; 0x24
 8006e0c:	6a3a      	ldr	r2, [r7, #32]
 8006e0e:	b2d2      	uxtb	r2, r2
 8006e10:	701a      	strb	r2, [r3, #0]
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	61fb      	str	r3, [r7, #28]
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	61bb      	str	r3, [r7, #24]
 8006e1e:	e00b      	b.n	8006e38 <SEGGER_SYSVIEW_Warn+0x84>
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	1c59      	adds	r1, r3, #1
 8006e28:	61f9      	str	r1, [r7, #28]
 8006e2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e2e:	b2d2      	uxtb	r2, r2
 8006e30:	701a      	strb	r2, [r3, #0]
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	09db      	lsrs	r3, r3, #7
 8006e36:	61bb      	str	r3, [r7, #24]
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	2b7f      	cmp	r3, #127	; 0x7f
 8006e3c:	d8f0      	bhi.n	8006e20 <SEGGER_SYSVIEW_Warn+0x6c>
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	1c5a      	adds	r2, r3, #1
 8006e42:	61fa      	str	r2, [r7, #28]
 8006e44:	69ba      	ldr	r2, [r7, #24]
 8006e46:	b2d2      	uxtb	r2, r2
 8006e48:	701a      	strb	r2, [r3, #0]
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006e4e:	221a      	movs	r2, #26
 8006e50:	68f9      	ldr	r1, [r7, #12]
 8006e52:	6938      	ldr	r0, [r7, #16]
 8006e54:	f7fe ff90 	bl	8005d78 <_SendPacket>
  RECORD_END();
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f383 8811 	msr	BASEPRI, r3
}
 8006e5e:	bf00      	nop
 8006e60:	3728      	adds	r7, #40	; 0x28
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	2000d4a8 	.word	0x2000d4a8

08006e6c <__libc_init_array>:
 8006e6c:	b570      	push	{r4, r5, r6, lr}
 8006e6e:	4d0d      	ldr	r5, [pc, #52]	; (8006ea4 <__libc_init_array+0x38>)
 8006e70:	4c0d      	ldr	r4, [pc, #52]	; (8006ea8 <__libc_init_array+0x3c>)
 8006e72:	1b64      	subs	r4, r4, r5
 8006e74:	10a4      	asrs	r4, r4, #2
 8006e76:	2600      	movs	r6, #0
 8006e78:	42a6      	cmp	r6, r4
 8006e7a:	d109      	bne.n	8006e90 <__libc_init_array+0x24>
 8006e7c:	4d0b      	ldr	r5, [pc, #44]	; (8006eac <__libc_init_array+0x40>)
 8006e7e:	4c0c      	ldr	r4, [pc, #48]	; (8006eb0 <__libc_init_array+0x44>)
 8006e80:	f000 fcac 	bl	80077dc <_init>
 8006e84:	1b64      	subs	r4, r4, r5
 8006e86:	10a4      	asrs	r4, r4, #2
 8006e88:	2600      	movs	r6, #0
 8006e8a:	42a6      	cmp	r6, r4
 8006e8c:	d105      	bne.n	8006e9a <__libc_init_array+0x2e>
 8006e8e:	bd70      	pop	{r4, r5, r6, pc}
 8006e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e94:	4798      	blx	r3
 8006e96:	3601      	adds	r6, #1
 8006e98:	e7ee      	b.n	8006e78 <__libc_init_array+0xc>
 8006e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e9e:	4798      	blx	r3
 8006ea0:	3601      	adds	r6, #1
 8006ea2:	e7f2      	b.n	8006e8a <__libc_init_array+0x1e>
 8006ea4:	080079cc 	.word	0x080079cc
 8006ea8:	080079cc 	.word	0x080079cc
 8006eac:	080079cc 	.word	0x080079cc
 8006eb0:	080079d0 	.word	0x080079d0

08006eb4 <memcmp>:
 8006eb4:	b510      	push	{r4, lr}
 8006eb6:	3901      	subs	r1, #1
 8006eb8:	4402      	add	r2, r0
 8006eba:	4290      	cmp	r0, r2
 8006ebc:	d101      	bne.n	8006ec2 <memcmp+0xe>
 8006ebe:	2000      	movs	r0, #0
 8006ec0:	e005      	b.n	8006ece <memcmp+0x1a>
 8006ec2:	7803      	ldrb	r3, [r0, #0]
 8006ec4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006ec8:	42a3      	cmp	r3, r4
 8006eca:	d001      	beq.n	8006ed0 <memcmp+0x1c>
 8006ecc:	1b18      	subs	r0, r3, r4
 8006ece:	bd10      	pop	{r4, pc}
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	e7f2      	b.n	8006eba <memcmp+0x6>

08006ed4 <memcpy>:
 8006ed4:	440a      	add	r2, r1
 8006ed6:	4291      	cmp	r1, r2
 8006ed8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006edc:	d100      	bne.n	8006ee0 <memcpy+0xc>
 8006ede:	4770      	bx	lr
 8006ee0:	b510      	push	{r4, lr}
 8006ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eea:	4291      	cmp	r1, r2
 8006eec:	d1f9      	bne.n	8006ee2 <memcpy+0xe>
 8006eee:	bd10      	pop	{r4, pc}

08006ef0 <memset>:
 8006ef0:	4402      	add	r2, r0
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d100      	bne.n	8006efa <memset+0xa>
 8006ef8:	4770      	bx	lr
 8006efa:	f803 1b01 	strb.w	r1, [r3], #1
 8006efe:	e7f9      	b.n	8006ef4 <memset+0x4>

08006f00 <siprintf>:
 8006f00:	b40e      	push	{r1, r2, r3}
 8006f02:	b500      	push	{lr}
 8006f04:	b09c      	sub	sp, #112	; 0x70
 8006f06:	ab1d      	add	r3, sp, #116	; 0x74
 8006f08:	9002      	str	r0, [sp, #8]
 8006f0a:	9006      	str	r0, [sp, #24]
 8006f0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f10:	4809      	ldr	r0, [pc, #36]	; (8006f38 <siprintf+0x38>)
 8006f12:	9107      	str	r1, [sp, #28]
 8006f14:	9104      	str	r1, [sp, #16]
 8006f16:	4909      	ldr	r1, [pc, #36]	; (8006f3c <siprintf+0x3c>)
 8006f18:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f1c:	9105      	str	r1, [sp, #20]
 8006f1e:	6800      	ldr	r0, [r0, #0]
 8006f20:	9301      	str	r3, [sp, #4]
 8006f22:	a902      	add	r1, sp, #8
 8006f24:	f000 f868 	bl	8006ff8 <_svfiprintf_r>
 8006f28:	9b02      	ldr	r3, [sp, #8]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	701a      	strb	r2, [r3, #0]
 8006f2e:	b01c      	add	sp, #112	; 0x70
 8006f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f34:	b003      	add	sp, #12
 8006f36:	4770      	bx	lr
 8006f38:	20000014 	.word	0x20000014
 8006f3c:	ffff0208 	.word	0xffff0208

08006f40 <__ssputs_r>:
 8006f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f44:	688e      	ldr	r6, [r1, #8]
 8006f46:	429e      	cmp	r6, r3
 8006f48:	4682      	mov	sl, r0
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	4690      	mov	r8, r2
 8006f4e:	461f      	mov	r7, r3
 8006f50:	d838      	bhi.n	8006fc4 <__ssputs_r+0x84>
 8006f52:	898a      	ldrh	r2, [r1, #12]
 8006f54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f58:	d032      	beq.n	8006fc0 <__ssputs_r+0x80>
 8006f5a:	6825      	ldr	r5, [r4, #0]
 8006f5c:	6909      	ldr	r1, [r1, #16]
 8006f5e:	eba5 0901 	sub.w	r9, r5, r1
 8006f62:	6965      	ldr	r5, [r4, #20]
 8006f64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	444b      	add	r3, r9
 8006f70:	106d      	asrs	r5, r5, #1
 8006f72:	429d      	cmp	r5, r3
 8006f74:	bf38      	it	cc
 8006f76:	461d      	movcc	r5, r3
 8006f78:	0553      	lsls	r3, r2, #21
 8006f7a:	d531      	bpl.n	8006fe0 <__ssputs_r+0xa0>
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	f000 fb55 	bl	800762c <_malloc_r>
 8006f82:	4606      	mov	r6, r0
 8006f84:	b950      	cbnz	r0, 8006f9c <__ssputs_r+0x5c>
 8006f86:	230c      	movs	r3, #12
 8006f88:	f8ca 3000 	str.w	r3, [sl]
 8006f8c:	89a3      	ldrh	r3, [r4, #12]
 8006f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f92:	81a3      	strh	r3, [r4, #12]
 8006f94:	f04f 30ff 	mov.w	r0, #4294967295
 8006f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f9c:	6921      	ldr	r1, [r4, #16]
 8006f9e:	464a      	mov	r2, r9
 8006fa0:	f7ff ff98 	bl	8006ed4 <memcpy>
 8006fa4:	89a3      	ldrh	r3, [r4, #12]
 8006fa6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fae:	81a3      	strh	r3, [r4, #12]
 8006fb0:	6126      	str	r6, [r4, #16]
 8006fb2:	6165      	str	r5, [r4, #20]
 8006fb4:	444e      	add	r6, r9
 8006fb6:	eba5 0509 	sub.w	r5, r5, r9
 8006fba:	6026      	str	r6, [r4, #0]
 8006fbc:	60a5      	str	r5, [r4, #8]
 8006fbe:	463e      	mov	r6, r7
 8006fc0:	42be      	cmp	r6, r7
 8006fc2:	d900      	bls.n	8006fc6 <__ssputs_r+0x86>
 8006fc4:	463e      	mov	r6, r7
 8006fc6:	6820      	ldr	r0, [r4, #0]
 8006fc8:	4632      	mov	r2, r6
 8006fca:	4641      	mov	r1, r8
 8006fcc:	f000 faa8 	bl	8007520 <memmove>
 8006fd0:	68a3      	ldr	r3, [r4, #8]
 8006fd2:	1b9b      	subs	r3, r3, r6
 8006fd4:	60a3      	str	r3, [r4, #8]
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	4433      	add	r3, r6
 8006fda:	6023      	str	r3, [r4, #0]
 8006fdc:	2000      	movs	r0, #0
 8006fde:	e7db      	b.n	8006f98 <__ssputs_r+0x58>
 8006fe0:	462a      	mov	r2, r5
 8006fe2:	f000 fb97 	bl	8007714 <_realloc_r>
 8006fe6:	4606      	mov	r6, r0
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	d1e1      	bne.n	8006fb0 <__ssputs_r+0x70>
 8006fec:	6921      	ldr	r1, [r4, #16]
 8006fee:	4650      	mov	r0, sl
 8006ff0:	f000 fab0 	bl	8007554 <_free_r>
 8006ff4:	e7c7      	b.n	8006f86 <__ssputs_r+0x46>
	...

08006ff8 <_svfiprintf_r>:
 8006ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffc:	4698      	mov	r8, r3
 8006ffe:	898b      	ldrh	r3, [r1, #12]
 8007000:	061b      	lsls	r3, r3, #24
 8007002:	b09d      	sub	sp, #116	; 0x74
 8007004:	4607      	mov	r7, r0
 8007006:	460d      	mov	r5, r1
 8007008:	4614      	mov	r4, r2
 800700a:	d50e      	bpl.n	800702a <_svfiprintf_r+0x32>
 800700c:	690b      	ldr	r3, [r1, #16]
 800700e:	b963      	cbnz	r3, 800702a <_svfiprintf_r+0x32>
 8007010:	2140      	movs	r1, #64	; 0x40
 8007012:	f000 fb0b 	bl	800762c <_malloc_r>
 8007016:	6028      	str	r0, [r5, #0]
 8007018:	6128      	str	r0, [r5, #16]
 800701a:	b920      	cbnz	r0, 8007026 <_svfiprintf_r+0x2e>
 800701c:	230c      	movs	r3, #12
 800701e:	603b      	str	r3, [r7, #0]
 8007020:	f04f 30ff 	mov.w	r0, #4294967295
 8007024:	e0d1      	b.n	80071ca <_svfiprintf_r+0x1d2>
 8007026:	2340      	movs	r3, #64	; 0x40
 8007028:	616b      	str	r3, [r5, #20]
 800702a:	2300      	movs	r3, #0
 800702c:	9309      	str	r3, [sp, #36]	; 0x24
 800702e:	2320      	movs	r3, #32
 8007030:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007034:	f8cd 800c 	str.w	r8, [sp, #12]
 8007038:	2330      	movs	r3, #48	; 0x30
 800703a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80071e4 <_svfiprintf_r+0x1ec>
 800703e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007042:	f04f 0901 	mov.w	r9, #1
 8007046:	4623      	mov	r3, r4
 8007048:	469a      	mov	sl, r3
 800704a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800704e:	b10a      	cbz	r2, 8007054 <_svfiprintf_r+0x5c>
 8007050:	2a25      	cmp	r2, #37	; 0x25
 8007052:	d1f9      	bne.n	8007048 <_svfiprintf_r+0x50>
 8007054:	ebba 0b04 	subs.w	fp, sl, r4
 8007058:	d00b      	beq.n	8007072 <_svfiprintf_r+0x7a>
 800705a:	465b      	mov	r3, fp
 800705c:	4622      	mov	r2, r4
 800705e:	4629      	mov	r1, r5
 8007060:	4638      	mov	r0, r7
 8007062:	f7ff ff6d 	bl	8006f40 <__ssputs_r>
 8007066:	3001      	adds	r0, #1
 8007068:	f000 80aa 	beq.w	80071c0 <_svfiprintf_r+0x1c8>
 800706c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800706e:	445a      	add	r2, fp
 8007070:	9209      	str	r2, [sp, #36]	; 0x24
 8007072:	f89a 3000 	ldrb.w	r3, [sl]
 8007076:	2b00      	cmp	r3, #0
 8007078:	f000 80a2 	beq.w	80071c0 <_svfiprintf_r+0x1c8>
 800707c:	2300      	movs	r3, #0
 800707e:	f04f 32ff 	mov.w	r2, #4294967295
 8007082:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007086:	f10a 0a01 	add.w	sl, sl, #1
 800708a:	9304      	str	r3, [sp, #16]
 800708c:	9307      	str	r3, [sp, #28]
 800708e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007092:	931a      	str	r3, [sp, #104]	; 0x68
 8007094:	4654      	mov	r4, sl
 8007096:	2205      	movs	r2, #5
 8007098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800709c:	4851      	ldr	r0, [pc, #324]	; (80071e4 <_svfiprintf_r+0x1ec>)
 800709e:	f7f9 f8ef 	bl	8000280 <memchr>
 80070a2:	9a04      	ldr	r2, [sp, #16]
 80070a4:	b9d8      	cbnz	r0, 80070de <_svfiprintf_r+0xe6>
 80070a6:	06d0      	lsls	r0, r2, #27
 80070a8:	bf44      	itt	mi
 80070aa:	2320      	movmi	r3, #32
 80070ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070b0:	0711      	lsls	r1, r2, #28
 80070b2:	bf44      	itt	mi
 80070b4:	232b      	movmi	r3, #43	; 0x2b
 80070b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070ba:	f89a 3000 	ldrb.w	r3, [sl]
 80070be:	2b2a      	cmp	r3, #42	; 0x2a
 80070c0:	d015      	beq.n	80070ee <_svfiprintf_r+0xf6>
 80070c2:	9a07      	ldr	r2, [sp, #28]
 80070c4:	4654      	mov	r4, sl
 80070c6:	2000      	movs	r0, #0
 80070c8:	f04f 0c0a 	mov.w	ip, #10
 80070cc:	4621      	mov	r1, r4
 80070ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070d2:	3b30      	subs	r3, #48	; 0x30
 80070d4:	2b09      	cmp	r3, #9
 80070d6:	d94e      	bls.n	8007176 <_svfiprintf_r+0x17e>
 80070d8:	b1b0      	cbz	r0, 8007108 <_svfiprintf_r+0x110>
 80070da:	9207      	str	r2, [sp, #28]
 80070dc:	e014      	b.n	8007108 <_svfiprintf_r+0x110>
 80070de:	eba0 0308 	sub.w	r3, r0, r8
 80070e2:	fa09 f303 	lsl.w	r3, r9, r3
 80070e6:	4313      	orrs	r3, r2
 80070e8:	9304      	str	r3, [sp, #16]
 80070ea:	46a2      	mov	sl, r4
 80070ec:	e7d2      	b.n	8007094 <_svfiprintf_r+0x9c>
 80070ee:	9b03      	ldr	r3, [sp, #12]
 80070f0:	1d19      	adds	r1, r3, #4
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	9103      	str	r1, [sp, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	bfbb      	ittet	lt
 80070fa:	425b      	neglt	r3, r3
 80070fc:	f042 0202 	orrlt.w	r2, r2, #2
 8007100:	9307      	strge	r3, [sp, #28]
 8007102:	9307      	strlt	r3, [sp, #28]
 8007104:	bfb8      	it	lt
 8007106:	9204      	strlt	r2, [sp, #16]
 8007108:	7823      	ldrb	r3, [r4, #0]
 800710a:	2b2e      	cmp	r3, #46	; 0x2e
 800710c:	d10c      	bne.n	8007128 <_svfiprintf_r+0x130>
 800710e:	7863      	ldrb	r3, [r4, #1]
 8007110:	2b2a      	cmp	r3, #42	; 0x2a
 8007112:	d135      	bne.n	8007180 <_svfiprintf_r+0x188>
 8007114:	9b03      	ldr	r3, [sp, #12]
 8007116:	1d1a      	adds	r2, r3, #4
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	9203      	str	r2, [sp, #12]
 800711c:	2b00      	cmp	r3, #0
 800711e:	bfb8      	it	lt
 8007120:	f04f 33ff 	movlt.w	r3, #4294967295
 8007124:	3402      	adds	r4, #2
 8007126:	9305      	str	r3, [sp, #20]
 8007128:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80071f4 <_svfiprintf_r+0x1fc>
 800712c:	7821      	ldrb	r1, [r4, #0]
 800712e:	2203      	movs	r2, #3
 8007130:	4650      	mov	r0, sl
 8007132:	f7f9 f8a5 	bl	8000280 <memchr>
 8007136:	b140      	cbz	r0, 800714a <_svfiprintf_r+0x152>
 8007138:	2340      	movs	r3, #64	; 0x40
 800713a:	eba0 000a 	sub.w	r0, r0, sl
 800713e:	fa03 f000 	lsl.w	r0, r3, r0
 8007142:	9b04      	ldr	r3, [sp, #16]
 8007144:	4303      	orrs	r3, r0
 8007146:	3401      	adds	r4, #1
 8007148:	9304      	str	r3, [sp, #16]
 800714a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800714e:	4826      	ldr	r0, [pc, #152]	; (80071e8 <_svfiprintf_r+0x1f0>)
 8007150:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007154:	2206      	movs	r2, #6
 8007156:	f7f9 f893 	bl	8000280 <memchr>
 800715a:	2800      	cmp	r0, #0
 800715c:	d038      	beq.n	80071d0 <_svfiprintf_r+0x1d8>
 800715e:	4b23      	ldr	r3, [pc, #140]	; (80071ec <_svfiprintf_r+0x1f4>)
 8007160:	bb1b      	cbnz	r3, 80071aa <_svfiprintf_r+0x1b2>
 8007162:	9b03      	ldr	r3, [sp, #12]
 8007164:	3307      	adds	r3, #7
 8007166:	f023 0307 	bic.w	r3, r3, #7
 800716a:	3308      	adds	r3, #8
 800716c:	9303      	str	r3, [sp, #12]
 800716e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007170:	4433      	add	r3, r6
 8007172:	9309      	str	r3, [sp, #36]	; 0x24
 8007174:	e767      	b.n	8007046 <_svfiprintf_r+0x4e>
 8007176:	fb0c 3202 	mla	r2, ip, r2, r3
 800717a:	460c      	mov	r4, r1
 800717c:	2001      	movs	r0, #1
 800717e:	e7a5      	b.n	80070cc <_svfiprintf_r+0xd4>
 8007180:	2300      	movs	r3, #0
 8007182:	3401      	adds	r4, #1
 8007184:	9305      	str	r3, [sp, #20]
 8007186:	4619      	mov	r1, r3
 8007188:	f04f 0c0a 	mov.w	ip, #10
 800718c:	4620      	mov	r0, r4
 800718e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007192:	3a30      	subs	r2, #48	; 0x30
 8007194:	2a09      	cmp	r2, #9
 8007196:	d903      	bls.n	80071a0 <_svfiprintf_r+0x1a8>
 8007198:	2b00      	cmp	r3, #0
 800719a:	d0c5      	beq.n	8007128 <_svfiprintf_r+0x130>
 800719c:	9105      	str	r1, [sp, #20]
 800719e:	e7c3      	b.n	8007128 <_svfiprintf_r+0x130>
 80071a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80071a4:	4604      	mov	r4, r0
 80071a6:	2301      	movs	r3, #1
 80071a8:	e7f0      	b.n	800718c <_svfiprintf_r+0x194>
 80071aa:	ab03      	add	r3, sp, #12
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	462a      	mov	r2, r5
 80071b0:	4b0f      	ldr	r3, [pc, #60]	; (80071f0 <_svfiprintf_r+0x1f8>)
 80071b2:	a904      	add	r1, sp, #16
 80071b4:	4638      	mov	r0, r7
 80071b6:	f3af 8000 	nop.w
 80071ba:	1c42      	adds	r2, r0, #1
 80071bc:	4606      	mov	r6, r0
 80071be:	d1d6      	bne.n	800716e <_svfiprintf_r+0x176>
 80071c0:	89ab      	ldrh	r3, [r5, #12]
 80071c2:	065b      	lsls	r3, r3, #25
 80071c4:	f53f af2c 	bmi.w	8007020 <_svfiprintf_r+0x28>
 80071c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071ca:	b01d      	add	sp, #116	; 0x74
 80071cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d0:	ab03      	add	r3, sp, #12
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	462a      	mov	r2, r5
 80071d6:	4b06      	ldr	r3, [pc, #24]	; (80071f0 <_svfiprintf_r+0x1f8>)
 80071d8:	a904      	add	r1, sp, #16
 80071da:	4638      	mov	r0, r7
 80071dc:	f000 f87a 	bl	80072d4 <_printf_i>
 80071e0:	e7eb      	b.n	80071ba <_svfiprintf_r+0x1c2>
 80071e2:	bf00      	nop
 80071e4:	0800798e 	.word	0x0800798e
 80071e8:	08007998 	.word	0x08007998
 80071ec:	00000000 	.word	0x00000000
 80071f0:	08006f41 	.word	0x08006f41
 80071f4:	08007994 	.word	0x08007994

080071f8 <_printf_common>:
 80071f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071fc:	4616      	mov	r6, r2
 80071fe:	4699      	mov	r9, r3
 8007200:	688a      	ldr	r2, [r1, #8]
 8007202:	690b      	ldr	r3, [r1, #16]
 8007204:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007208:	4293      	cmp	r3, r2
 800720a:	bfb8      	it	lt
 800720c:	4613      	movlt	r3, r2
 800720e:	6033      	str	r3, [r6, #0]
 8007210:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007214:	4607      	mov	r7, r0
 8007216:	460c      	mov	r4, r1
 8007218:	b10a      	cbz	r2, 800721e <_printf_common+0x26>
 800721a:	3301      	adds	r3, #1
 800721c:	6033      	str	r3, [r6, #0]
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	0699      	lsls	r1, r3, #26
 8007222:	bf42      	ittt	mi
 8007224:	6833      	ldrmi	r3, [r6, #0]
 8007226:	3302      	addmi	r3, #2
 8007228:	6033      	strmi	r3, [r6, #0]
 800722a:	6825      	ldr	r5, [r4, #0]
 800722c:	f015 0506 	ands.w	r5, r5, #6
 8007230:	d106      	bne.n	8007240 <_printf_common+0x48>
 8007232:	f104 0a19 	add.w	sl, r4, #25
 8007236:	68e3      	ldr	r3, [r4, #12]
 8007238:	6832      	ldr	r2, [r6, #0]
 800723a:	1a9b      	subs	r3, r3, r2
 800723c:	42ab      	cmp	r3, r5
 800723e:	dc26      	bgt.n	800728e <_printf_common+0x96>
 8007240:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007244:	1e13      	subs	r3, r2, #0
 8007246:	6822      	ldr	r2, [r4, #0]
 8007248:	bf18      	it	ne
 800724a:	2301      	movne	r3, #1
 800724c:	0692      	lsls	r2, r2, #26
 800724e:	d42b      	bmi.n	80072a8 <_printf_common+0xb0>
 8007250:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007254:	4649      	mov	r1, r9
 8007256:	4638      	mov	r0, r7
 8007258:	47c0      	blx	r8
 800725a:	3001      	adds	r0, #1
 800725c:	d01e      	beq.n	800729c <_printf_common+0xa4>
 800725e:	6823      	ldr	r3, [r4, #0]
 8007260:	68e5      	ldr	r5, [r4, #12]
 8007262:	6832      	ldr	r2, [r6, #0]
 8007264:	f003 0306 	and.w	r3, r3, #6
 8007268:	2b04      	cmp	r3, #4
 800726a:	bf08      	it	eq
 800726c:	1aad      	subeq	r5, r5, r2
 800726e:	68a3      	ldr	r3, [r4, #8]
 8007270:	6922      	ldr	r2, [r4, #16]
 8007272:	bf0c      	ite	eq
 8007274:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007278:	2500      	movne	r5, #0
 800727a:	4293      	cmp	r3, r2
 800727c:	bfc4      	itt	gt
 800727e:	1a9b      	subgt	r3, r3, r2
 8007280:	18ed      	addgt	r5, r5, r3
 8007282:	2600      	movs	r6, #0
 8007284:	341a      	adds	r4, #26
 8007286:	42b5      	cmp	r5, r6
 8007288:	d11a      	bne.n	80072c0 <_printf_common+0xc8>
 800728a:	2000      	movs	r0, #0
 800728c:	e008      	b.n	80072a0 <_printf_common+0xa8>
 800728e:	2301      	movs	r3, #1
 8007290:	4652      	mov	r2, sl
 8007292:	4649      	mov	r1, r9
 8007294:	4638      	mov	r0, r7
 8007296:	47c0      	blx	r8
 8007298:	3001      	adds	r0, #1
 800729a:	d103      	bne.n	80072a4 <_printf_common+0xac>
 800729c:	f04f 30ff 	mov.w	r0, #4294967295
 80072a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a4:	3501      	adds	r5, #1
 80072a6:	e7c6      	b.n	8007236 <_printf_common+0x3e>
 80072a8:	18e1      	adds	r1, r4, r3
 80072aa:	1c5a      	adds	r2, r3, #1
 80072ac:	2030      	movs	r0, #48	; 0x30
 80072ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072b2:	4422      	add	r2, r4
 80072b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072bc:	3302      	adds	r3, #2
 80072be:	e7c7      	b.n	8007250 <_printf_common+0x58>
 80072c0:	2301      	movs	r3, #1
 80072c2:	4622      	mov	r2, r4
 80072c4:	4649      	mov	r1, r9
 80072c6:	4638      	mov	r0, r7
 80072c8:	47c0      	blx	r8
 80072ca:	3001      	adds	r0, #1
 80072cc:	d0e6      	beq.n	800729c <_printf_common+0xa4>
 80072ce:	3601      	adds	r6, #1
 80072d0:	e7d9      	b.n	8007286 <_printf_common+0x8e>
	...

080072d4 <_printf_i>:
 80072d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072d8:	7e0f      	ldrb	r7, [r1, #24]
 80072da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072dc:	2f78      	cmp	r7, #120	; 0x78
 80072de:	4691      	mov	r9, r2
 80072e0:	4680      	mov	r8, r0
 80072e2:	460c      	mov	r4, r1
 80072e4:	469a      	mov	sl, r3
 80072e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072ea:	d807      	bhi.n	80072fc <_printf_i+0x28>
 80072ec:	2f62      	cmp	r7, #98	; 0x62
 80072ee:	d80a      	bhi.n	8007306 <_printf_i+0x32>
 80072f0:	2f00      	cmp	r7, #0
 80072f2:	f000 80d8 	beq.w	80074a6 <_printf_i+0x1d2>
 80072f6:	2f58      	cmp	r7, #88	; 0x58
 80072f8:	f000 80a3 	beq.w	8007442 <_printf_i+0x16e>
 80072fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007300:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007304:	e03a      	b.n	800737c <_printf_i+0xa8>
 8007306:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800730a:	2b15      	cmp	r3, #21
 800730c:	d8f6      	bhi.n	80072fc <_printf_i+0x28>
 800730e:	a101      	add	r1, pc, #4	; (adr r1, 8007314 <_printf_i+0x40>)
 8007310:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007314:	0800736d 	.word	0x0800736d
 8007318:	08007381 	.word	0x08007381
 800731c:	080072fd 	.word	0x080072fd
 8007320:	080072fd 	.word	0x080072fd
 8007324:	080072fd 	.word	0x080072fd
 8007328:	080072fd 	.word	0x080072fd
 800732c:	08007381 	.word	0x08007381
 8007330:	080072fd 	.word	0x080072fd
 8007334:	080072fd 	.word	0x080072fd
 8007338:	080072fd 	.word	0x080072fd
 800733c:	080072fd 	.word	0x080072fd
 8007340:	0800748d 	.word	0x0800748d
 8007344:	080073b1 	.word	0x080073b1
 8007348:	0800746f 	.word	0x0800746f
 800734c:	080072fd 	.word	0x080072fd
 8007350:	080072fd 	.word	0x080072fd
 8007354:	080074af 	.word	0x080074af
 8007358:	080072fd 	.word	0x080072fd
 800735c:	080073b1 	.word	0x080073b1
 8007360:	080072fd 	.word	0x080072fd
 8007364:	080072fd 	.word	0x080072fd
 8007368:	08007477 	.word	0x08007477
 800736c:	682b      	ldr	r3, [r5, #0]
 800736e:	1d1a      	adds	r2, r3, #4
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	602a      	str	r2, [r5, #0]
 8007374:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007378:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800737c:	2301      	movs	r3, #1
 800737e:	e0a3      	b.n	80074c8 <_printf_i+0x1f4>
 8007380:	6820      	ldr	r0, [r4, #0]
 8007382:	6829      	ldr	r1, [r5, #0]
 8007384:	0606      	lsls	r6, r0, #24
 8007386:	f101 0304 	add.w	r3, r1, #4
 800738a:	d50a      	bpl.n	80073a2 <_printf_i+0xce>
 800738c:	680e      	ldr	r6, [r1, #0]
 800738e:	602b      	str	r3, [r5, #0]
 8007390:	2e00      	cmp	r6, #0
 8007392:	da03      	bge.n	800739c <_printf_i+0xc8>
 8007394:	232d      	movs	r3, #45	; 0x2d
 8007396:	4276      	negs	r6, r6
 8007398:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800739c:	485e      	ldr	r0, [pc, #376]	; (8007518 <_printf_i+0x244>)
 800739e:	230a      	movs	r3, #10
 80073a0:	e019      	b.n	80073d6 <_printf_i+0x102>
 80073a2:	680e      	ldr	r6, [r1, #0]
 80073a4:	602b      	str	r3, [r5, #0]
 80073a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073aa:	bf18      	it	ne
 80073ac:	b236      	sxthne	r6, r6
 80073ae:	e7ef      	b.n	8007390 <_printf_i+0xbc>
 80073b0:	682b      	ldr	r3, [r5, #0]
 80073b2:	6820      	ldr	r0, [r4, #0]
 80073b4:	1d19      	adds	r1, r3, #4
 80073b6:	6029      	str	r1, [r5, #0]
 80073b8:	0601      	lsls	r1, r0, #24
 80073ba:	d501      	bpl.n	80073c0 <_printf_i+0xec>
 80073bc:	681e      	ldr	r6, [r3, #0]
 80073be:	e002      	b.n	80073c6 <_printf_i+0xf2>
 80073c0:	0646      	lsls	r6, r0, #25
 80073c2:	d5fb      	bpl.n	80073bc <_printf_i+0xe8>
 80073c4:	881e      	ldrh	r6, [r3, #0]
 80073c6:	4854      	ldr	r0, [pc, #336]	; (8007518 <_printf_i+0x244>)
 80073c8:	2f6f      	cmp	r7, #111	; 0x6f
 80073ca:	bf0c      	ite	eq
 80073cc:	2308      	moveq	r3, #8
 80073ce:	230a      	movne	r3, #10
 80073d0:	2100      	movs	r1, #0
 80073d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073d6:	6865      	ldr	r5, [r4, #4]
 80073d8:	60a5      	str	r5, [r4, #8]
 80073da:	2d00      	cmp	r5, #0
 80073dc:	bfa2      	ittt	ge
 80073de:	6821      	ldrge	r1, [r4, #0]
 80073e0:	f021 0104 	bicge.w	r1, r1, #4
 80073e4:	6021      	strge	r1, [r4, #0]
 80073e6:	b90e      	cbnz	r6, 80073ec <_printf_i+0x118>
 80073e8:	2d00      	cmp	r5, #0
 80073ea:	d04d      	beq.n	8007488 <_printf_i+0x1b4>
 80073ec:	4615      	mov	r5, r2
 80073ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80073f2:	fb03 6711 	mls	r7, r3, r1, r6
 80073f6:	5dc7      	ldrb	r7, [r0, r7]
 80073f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80073fc:	4637      	mov	r7, r6
 80073fe:	42bb      	cmp	r3, r7
 8007400:	460e      	mov	r6, r1
 8007402:	d9f4      	bls.n	80073ee <_printf_i+0x11a>
 8007404:	2b08      	cmp	r3, #8
 8007406:	d10b      	bne.n	8007420 <_printf_i+0x14c>
 8007408:	6823      	ldr	r3, [r4, #0]
 800740a:	07de      	lsls	r6, r3, #31
 800740c:	d508      	bpl.n	8007420 <_printf_i+0x14c>
 800740e:	6923      	ldr	r3, [r4, #16]
 8007410:	6861      	ldr	r1, [r4, #4]
 8007412:	4299      	cmp	r1, r3
 8007414:	bfde      	ittt	le
 8007416:	2330      	movle	r3, #48	; 0x30
 8007418:	f805 3c01 	strble.w	r3, [r5, #-1]
 800741c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007420:	1b52      	subs	r2, r2, r5
 8007422:	6122      	str	r2, [r4, #16]
 8007424:	f8cd a000 	str.w	sl, [sp]
 8007428:	464b      	mov	r3, r9
 800742a:	aa03      	add	r2, sp, #12
 800742c:	4621      	mov	r1, r4
 800742e:	4640      	mov	r0, r8
 8007430:	f7ff fee2 	bl	80071f8 <_printf_common>
 8007434:	3001      	adds	r0, #1
 8007436:	d14c      	bne.n	80074d2 <_printf_i+0x1fe>
 8007438:	f04f 30ff 	mov.w	r0, #4294967295
 800743c:	b004      	add	sp, #16
 800743e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007442:	4835      	ldr	r0, [pc, #212]	; (8007518 <_printf_i+0x244>)
 8007444:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007448:	6829      	ldr	r1, [r5, #0]
 800744a:	6823      	ldr	r3, [r4, #0]
 800744c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007450:	6029      	str	r1, [r5, #0]
 8007452:	061d      	lsls	r5, r3, #24
 8007454:	d514      	bpl.n	8007480 <_printf_i+0x1ac>
 8007456:	07df      	lsls	r7, r3, #31
 8007458:	bf44      	itt	mi
 800745a:	f043 0320 	orrmi.w	r3, r3, #32
 800745e:	6023      	strmi	r3, [r4, #0]
 8007460:	b91e      	cbnz	r6, 800746a <_printf_i+0x196>
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	f023 0320 	bic.w	r3, r3, #32
 8007468:	6023      	str	r3, [r4, #0]
 800746a:	2310      	movs	r3, #16
 800746c:	e7b0      	b.n	80073d0 <_printf_i+0xfc>
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	f043 0320 	orr.w	r3, r3, #32
 8007474:	6023      	str	r3, [r4, #0]
 8007476:	2378      	movs	r3, #120	; 0x78
 8007478:	4828      	ldr	r0, [pc, #160]	; (800751c <_printf_i+0x248>)
 800747a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800747e:	e7e3      	b.n	8007448 <_printf_i+0x174>
 8007480:	0659      	lsls	r1, r3, #25
 8007482:	bf48      	it	mi
 8007484:	b2b6      	uxthmi	r6, r6
 8007486:	e7e6      	b.n	8007456 <_printf_i+0x182>
 8007488:	4615      	mov	r5, r2
 800748a:	e7bb      	b.n	8007404 <_printf_i+0x130>
 800748c:	682b      	ldr	r3, [r5, #0]
 800748e:	6826      	ldr	r6, [r4, #0]
 8007490:	6961      	ldr	r1, [r4, #20]
 8007492:	1d18      	adds	r0, r3, #4
 8007494:	6028      	str	r0, [r5, #0]
 8007496:	0635      	lsls	r5, r6, #24
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	d501      	bpl.n	80074a0 <_printf_i+0x1cc>
 800749c:	6019      	str	r1, [r3, #0]
 800749e:	e002      	b.n	80074a6 <_printf_i+0x1d2>
 80074a0:	0670      	lsls	r0, r6, #25
 80074a2:	d5fb      	bpl.n	800749c <_printf_i+0x1c8>
 80074a4:	8019      	strh	r1, [r3, #0]
 80074a6:	2300      	movs	r3, #0
 80074a8:	6123      	str	r3, [r4, #16]
 80074aa:	4615      	mov	r5, r2
 80074ac:	e7ba      	b.n	8007424 <_printf_i+0x150>
 80074ae:	682b      	ldr	r3, [r5, #0]
 80074b0:	1d1a      	adds	r2, r3, #4
 80074b2:	602a      	str	r2, [r5, #0]
 80074b4:	681d      	ldr	r5, [r3, #0]
 80074b6:	6862      	ldr	r2, [r4, #4]
 80074b8:	2100      	movs	r1, #0
 80074ba:	4628      	mov	r0, r5
 80074bc:	f7f8 fee0 	bl	8000280 <memchr>
 80074c0:	b108      	cbz	r0, 80074c6 <_printf_i+0x1f2>
 80074c2:	1b40      	subs	r0, r0, r5
 80074c4:	6060      	str	r0, [r4, #4]
 80074c6:	6863      	ldr	r3, [r4, #4]
 80074c8:	6123      	str	r3, [r4, #16]
 80074ca:	2300      	movs	r3, #0
 80074cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074d0:	e7a8      	b.n	8007424 <_printf_i+0x150>
 80074d2:	6923      	ldr	r3, [r4, #16]
 80074d4:	462a      	mov	r2, r5
 80074d6:	4649      	mov	r1, r9
 80074d8:	4640      	mov	r0, r8
 80074da:	47d0      	blx	sl
 80074dc:	3001      	adds	r0, #1
 80074de:	d0ab      	beq.n	8007438 <_printf_i+0x164>
 80074e0:	6823      	ldr	r3, [r4, #0]
 80074e2:	079b      	lsls	r3, r3, #30
 80074e4:	d413      	bmi.n	800750e <_printf_i+0x23a>
 80074e6:	68e0      	ldr	r0, [r4, #12]
 80074e8:	9b03      	ldr	r3, [sp, #12]
 80074ea:	4298      	cmp	r0, r3
 80074ec:	bfb8      	it	lt
 80074ee:	4618      	movlt	r0, r3
 80074f0:	e7a4      	b.n	800743c <_printf_i+0x168>
 80074f2:	2301      	movs	r3, #1
 80074f4:	4632      	mov	r2, r6
 80074f6:	4649      	mov	r1, r9
 80074f8:	4640      	mov	r0, r8
 80074fa:	47d0      	blx	sl
 80074fc:	3001      	adds	r0, #1
 80074fe:	d09b      	beq.n	8007438 <_printf_i+0x164>
 8007500:	3501      	adds	r5, #1
 8007502:	68e3      	ldr	r3, [r4, #12]
 8007504:	9903      	ldr	r1, [sp, #12]
 8007506:	1a5b      	subs	r3, r3, r1
 8007508:	42ab      	cmp	r3, r5
 800750a:	dcf2      	bgt.n	80074f2 <_printf_i+0x21e>
 800750c:	e7eb      	b.n	80074e6 <_printf_i+0x212>
 800750e:	2500      	movs	r5, #0
 8007510:	f104 0619 	add.w	r6, r4, #25
 8007514:	e7f5      	b.n	8007502 <_printf_i+0x22e>
 8007516:	bf00      	nop
 8007518:	0800799f 	.word	0x0800799f
 800751c:	080079b0 	.word	0x080079b0

08007520 <memmove>:
 8007520:	4288      	cmp	r0, r1
 8007522:	b510      	push	{r4, lr}
 8007524:	eb01 0402 	add.w	r4, r1, r2
 8007528:	d902      	bls.n	8007530 <memmove+0x10>
 800752a:	4284      	cmp	r4, r0
 800752c:	4623      	mov	r3, r4
 800752e:	d807      	bhi.n	8007540 <memmove+0x20>
 8007530:	1e43      	subs	r3, r0, #1
 8007532:	42a1      	cmp	r1, r4
 8007534:	d008      	beq.n	8007548 <memmove+0x28>
 8007536:	f811 2b01 	ldrb.w	r2, [r1], #1
 800753a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800753e:	e7f8      	b.n	8007532 <memmove+0x12>
 8007540:	4402      	add	r2, r0
 8007542:	4601      	mov	r1, r0
 8007544:	428a      	cmp	r2, r1
 8007546:	d100      	bne.n	800754a <memmove+0x2a>
 8007548:	bd10      	pop	{r4, pc}
 800754a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800754e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007552:	e7f7      	b.n	8007544 <memmove+0x24>

08007554 <_free_r>:
 8007554:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007556:	2900      	cmp	r1, #0
 8007558:	d044      	beq.n	80075e4 <_free_r+0x90>
 800755a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800755e:	9001      	str	r0, [sp, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	f1a1 0404 	sub.w	r4, r1, #4
 8007566:	bfb8      	it	lt
 8007568:	18e4      	addlt	r4, r4, r3
 800756a:	f000 f913 	bl	8007794 <__malloc_lock>
 800756e:	4a1e      	ldr	r2, [pc, #120]	; (80075e8 <_free_r+0x94>)
 8007570:	9801      	ldr	r0, [sp, #4]
 8007572:	6813      	ldr	r3, [r2, #0]
 8007574:	b933      	cbnz	r3, 8007584 <_free_r+0x30>
 8007576:	6063      	str	r3, [r4, #4]
 8007578:	6014      	str	r4, [r2, #0]
 800757a:	b003      	add	sp, #12
 800757c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007580:	f000 b90e 	b.w	80077a0 <__malloc_unlock>
 8007584:	42a3      	cmp	r3, r4
 8007586:	d908      	bls.n	800759a <_free_r+0x46>
 8007588:	6825      	ldr	r5, [r4, #0]
 800758a:	1961      	adds	r1, r4, r5
 800758c:	428b      	cmp	r3, r1
 800758e:	bf01      	itttt	eq
 8007590:	6819      	ldreq	r1, [r3, #0]
 8007592:	685b      	ldreq	r3, [r3, #4]
 8007594:	1949      	addeq	r1, r1, r5
 8007596:	6021      	streq	r1, [r4, #0]
 8007598:	e7ed      	b.n	8007576 <_free_r+0x22>
 800759a:	461a      	mov	r2, r3
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	b10b      	cbz	r3, 80075a4 <_free_r+0x50>
 80075a0:	42a3      	cmp	r3, r4
 80075a2:	d9fa      	bls.n	800759a <_free_r+0x46>
 80075a4:	6811      	ldr	r1, [r2, #0]
 80075a6:	1855      	adds	r5, r2, r1
 80075a8:	42a5      	cmp	r5, r4
 80075aa:	d10b      	bne.n	80075c4 <_free_r+0x70>
 80075ac:	6824      	ldr	r4, [r4, #0]
 80075ae:	4421      	add	r1, r4
 80075b0:	1854      	adds	r4, r2, r1
 80075b2:	42a3      	cmp	r3, r4
 80075b4:	6011      	str	r1, [r2, #0]
 80075b6:	d1e0      	bne.n	800757a <_free_r+0x26>
 80075b8:	681c      	ldr	r4, [r3, #0]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	6053      	str	r3, [r2, #4]
 80075be:	4421      	add	r1, r4
 80075c0:	6011      	str	r1, [r2, #0]
 80075c2:	e7da      	b.n	800757a <_free_r+0x26>
 80075c4:	d902      	bls.n	80075cc <_free_r+0x78>
 80075c6:	230c      	movs	r3, #12
 80075c8:	6003      	str	r3, [r0, #0]
 80075ca:	e7d6      	b.n	800757a <_free_r+0x26>
 80075cc:	6825      	ldr	r5, [r4, #0]
 80075ce:	1961      	adds	r1, r4, r5
 80075d0:	428b      	cmp	r3, r1
 80075d2:	bf04      	itt	eq
 80075d4:	6819      	ldreq	r1, [r3, #0]
 80075d6:	685b      	ldreq	r3, [r3, #4]
 80075d8:	6063      	str	r3, [r4, #4]
 80075da:	bf04      	itt	eq
 80075dc:	1949      	addeq	r1, r1, r5
 80075de:	6021      	streq	r1, [r4, #0]
 80075e0:	6054      	str	r4, [r2, #4]
 80075e2:	e7ca      	b.n	800757a <_free_r+0x26>
 80075e4:	b003      	add	sp, #12
 80075e6:	bd30      	pop	{r4, r5, pc}
 80075e8:	2000d58c 	.word	0x2000d58c

080075ec <sbrk_aligned>:
 80075ec:	b570      	push	{r4, r5, r6, lr}
 80075ee:	4e0e      	ldr	r6, [pc, #56]	; (8007628 <sbrk_aligned+0x3c>)
 80075f0:	460c      	mov	r4, r1
 80075f2:	6831      	ldr	r1, [r6, #0]
 80075f4:	4605      	mov	r5, r0
 80075f6:	b911      	cbnz	r1, 80075fe <sbrk_aligned+0x12>
 80075f8:	f000 f8bc 	bl	8007774 <_sbrk_r>
 80075fc:	6030      	str	r0, [r6, #0]
 80075fe:	4621      	mov	r1, r4
 8007600:	4628      	mov	r0, r5
 8007602:	f000 f8b7 	bl	8007774 <_sbrk_r>
 8007606:	1c43      	adds	r3, r0, #1
 8007608:	d00a      	beq.n	8007620 <sbrk_aligned+0x34>
 800760a:	1cc4      	adds	r4, r0, #3
 800760c:	f024 0403 	bic.w	r4, r4, #3
 8007610:	42a0      	cmp	r0, r4
 8007612:	d007      	beq.n	8007624 <sbrk_aligned+0x38>
 8007614:	1a21      	subs	r1, r4, r0
 8007616:	4628      	mov	r0, r5
 8007618:	f000 f8ac 	bl	8007774 <_sbrk_r>
 800761c:	3001      	adds	r0, #1
 800761e:	d101      	bne.n	8007624 <sbrk_aligned+0x38>
 8007620:	f04f 34ff 	mov.w	r4, #4294967295
 8007624:	4620      	mov	r0, r4
 8007626:	bd70      	pop	{r4, r5, r6, pc}
 8007628:	2000d590 	.word	0x2000d590

0800762c <_malloc_r>:
 800762c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007630:	1ccd      	adds	r5, r1, #3
 8007632:	f025 0503 	bic.w	r5, r5, #3
 8007636:	3508      	adds	r5, #8
 8007638:	2d0c      	cmp	r5, #12
 800763a:	bf38      	it	cc
 800763c:	250c      	movcc	r5, #12
 800763e:	2d00      	cmp	r5, #0
 8007640:	4607      	mov	r7, r0
 8007642:	db01      	blt.n	8007648 <_malloc_r+0x1c>
 8007644:	42a9      	cmp	r1, r5
 8007646:	d905      	bls.n	8007654 <_malloc_r+0x28>
 8007648:	230c      	movs	r3, #12
 800764a:	603b      	str	r3, [r7, #0]
 800764c:	2600      	movs	r6, #0
 800764e:	4630      	mov	r0, r6
 8007650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007654:	4e2e      	ldr	r6, [pc, #184]	; (8007710 <_malloc_r+0xe4>)
 8007656:	f000 f89d 	bl	8007794 <__malloc_lock>
 800765a:	6833      	ldr	r3, [r6, #0]
 800765c:	461c      	mov	r4, r3
 800765e:	bb34      	cbnz	r4, 80076ae <_malloc_r+0x82>
 8007660:	4629      	mov	r1, r5
 8007662:	4638      	mov	r0, r7
 8007664:	f7ff ffc2 	bl	80075ec <sbrk_aligned>
 8007668:	1c43      	adds	r3, r0, #1
 800766a:	4604      	mov	r4, r0
 800766c:	d14d      	bne.n	800770a <_malloc_r+0xde>
 800766e:	6834      	ldr	r4, [r6, #0]
 8007670:	4626      	mov	r6, r4
 8007672:	2e00      	cmp	r6, #0
 8007674:	d140      	bne.n	80076f8 <_malloc_r+0xcc>
 8007676:	6823      	ldr	r3, [r4, #0]
 8007678:	4631      	mov	r1, r6
 800767a:	4638      	mov	r0, r7
 800767c:	eb04 0803 	add.w	r8, r4, r3
 8007680:	f000 f878 	bl	8007774 <_sbrk_r>
 8007684:	4580      	cmp	r8, r0
 8007686:	d13a      	bne.n	80076fe <_malloc_r+0xd2>
 8007688:	6821      	ldr	r1, [r4, #0]
 800768a:	3503      	adds	r5, #3
 800768c:	1a6d      	subs	r5, r5, r1
 800768e:	f025 0503 	bic.w	r5, r5, #3
 8007692:	3508      	adds	r5, #8
 8007694:	2d0c      	cmp	r5, #12
 8007696:	bf38      	it	cc
 8007698:	250c      	movcc	r5, #12
 800769a:	4629      	mov	r1, r5
 800769c:	4638      	mov	r0, r7
 800769e:	f7ff ffa5 	bl	80075ec <sbrk_aligned>
 80076a2:	3001      	adds	r0, #1
 80076a4:	d02b      	beq.n	80076fe <_malloc_r+0xd2>
 80076a6:	6823      	ldr	r3, [r4, #0]
 80076a8:	442b      	add	r3, r5
 80076aa:	6023      	str	r3, [r4, #0]
 80076ac:	e00e      	b.n	80076cc <_malloc_r+0xa0>
 80076ae:	6822      	ldr	r2, [r4, #0]
 80076b0:	1b52      	subs	r2, r2, r5
 80076b2:	d41e      	bmi.n	80076f2 <_malloc_r+0xc6>
 80076b4:	2a0b      	cmp	r2, #11
 80076b6:	d916      	bls.n	80076e6 <_malloc_r+0xba>
 80076b8:	1961      	adds	r1, r4, r5
 80076ba:	42a3      	cmp	r3, r4
 80076bc:	6025      	str	r5, [r4, #0]
 80076be:	bf18      	it	ne
 80076c0:	6059      	strne	r1, [r3, #4]
 80076c2:	6863      	ldr	r3, [r4, #4]
 80076c4:	bf08      	it	eq
 80076c6:	6031      	streq	r1, [r6, #0]
 80076c8:	5162      	str	r2, [r4, r5]
 80076ca:	604b      	str	r3, [r1, #4]
 80076cc:	4638      	mov	r0, r7
 80076ce:	f104 060b 	add.w	r6, r4, #11
 80076d2:	f000 f865 	bl	80077a0 <__malloc_unlock>
 80076d6:	f026 0607 	bic.w	r6, r6, #7
 80076da:	1d23      	adds	r3, r4, #4
 80076dc:	1af2      	subs	r2, r6, r3
 80076de:	d0b6      	beq.n	800764e <_malloc_r+0x22>
 80076e0:	1b9b      	subs	r3, r3, r6
 80076e2:	50a3      	str	r3, [r4, r2]
 80076e4:	e7b3      	b.n	800764e <_malloc_r+0x22>
 80076e6:	6862      	ldr	r2, [r4, #4]
 80076e8:	42a3      	cmp	r3, r4
 80076ea:	bf0c      	ite	eq
 80076ec:	6032      	streq	r2, [r6, #0]
 80076ee:	605a      	strne	r2, [r3, #4]
 80076f0:	e7ec      	b.n	80076cc <_malloc_r+0xa0>
 80076f2:	4623      	mov	r3, r4
 80076f4:	6864      	ldr	r4, [r4, #4]
 80076f6:	e7b2      	b.n	800765e <_malloc_r+0x32>
 80076f8:	4634      	mov	r4, r6
 80076fa:	6876      	ldr	r6, [r6, #4]
 80076fc:	e7b9      	b.n	8007672 <_malloc_r+0x46>
 80076fe:	230c      	movs	r3, #12
 8007700:	603b      	str	r3, [r7, #0]
 8007702:	4638      	mov	r0, r7
 8007704:	f000 f84c 	bl	80077a0 <__malloc_unlock>
 8007708:	e7a1      	b.n	800764e <_malloc_r+0x22>
 800770a:	6025      	str	r5, [r4, #0]
 800770c:	e7de      	b.n	80076cc <_malloc_r+0xa0>
 800770e:	bf00      	nop
 8007710:	2000d58c 	.word	0x2000d58c

08007714 <_realloc_r>:
 8007714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007718:	4680      	mov	r8, r0
 800771a:	4614      	mov	r4, r2
 800771c:	460e      	mov	r6, r1
 800771e:	b921      	cbnz	r1, 800772a <_realloc_r+0x16>
 8007720:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007724:	4611      	mov	r1, r2
 8007726:	f7ff bf81 	b.w	800762c <_malloc_r>
 800772a:	b92a      	cbnz	r2, 8007738 <_realloc_r+0x24>
 800772c:	f7ff ff12 	bl	8007554 <_free_r>
 8007730:	4625      	mov	r5, r4
 8007732:	4628      	mov	r0, r5
 8007734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007738:	f000 f838 	bl	80077ac <_malloc_usable_size_r>
 800773c:	4284      	cmp	r4, r0
 800773e:	4607      	mov	r7, r0
 8007740:	d802      	bhi.n	8007748 <_realloc_r+0x34>
 8007742:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007746:	d812      	bhi.n	800776e <_realloc_r+0x5a>
 8007748:	4621      	mov	r1, r4
 800774a:	4640      	mov	r0, r8
 800774c:	f7ff ff6e 	bl	800762c <_malloc_r>
 8007750:	4605      	mov	r5, r0
 8007752:	2800      	cmp	r0, #0
 8007754:	d0ed      	beq.n	8007732 <_realloc_r+0x1e>
 8007756:	42bc      	cmp	r4, r7
 8007758:	4622      	mov	r2, r4
 800775a:	4631      	mov	r1, r6
 800775c:	bf28      	it	cs
 800775e:	463a      	movcs	r2, r7
 8007760:	f7ff fbb8 	bl	8006ed4 <memcpy>
 8007764:	4631      	mov	r1, r6
 8007766:	4640      	mov	r0, r8
 8007768:	f7ff fef4 	bl	8007554 <_free_r>
 800776c:	e7e1      	b.n	8007732 <_realloc_r+0x1e>
 800776e:	4635      	mov	r5, r6
 8007770:	e7df      	b.n	8007732 <_realloc_r+0x1e>
	...

08007774 <_sbrk_r>:
 8007774:	b538      	push	{r3, r4, r5, lr}
 8007776:	4d06      	ldr	r5, [pc, #24]	; (8007790 <_sbrk_r+0x1c>)
 8007778:	2300      	movs	r3, #0
 800777a:	4604      	mov	r4, r0
 800777c:	4608      	mov	r0, r1
 800777e:	602b      	str	r3, [r5, #0]
 8007780:	f000 f81e 	bl	80077c0 <_sbrk>
 8007784:	1c43      	adds	r3, r0, #1
 8007786:	d102      	bne.n	800778e <_sbrk_r+0x1a>
 8007788:	682b      	ldr	r3, [r5, #0]
 800778a:	b103      	cbz	r3, 800778e <_sbrk_r+0x1a>
 800778c:	6023      	str	r3, [r4, #0]
 800778e:	bd38      	pop	{r3, r4, r5, pc}
 8007790:	2000d594 	.word	0x2000d594

08007794 <__malloc_lock>:
 8007794:	4801      	ldr	r0, [pc, #4]	; (800779c <__malloc_lock+0x8>)
 8007796:	f000 b811 	b.w	80077bc <__retarget_lock_acquire_recursive>
 800779a:	bf00      	nop
 800779c:	2000d598 	.word	0x2000d598

080077a0 <__malloc_unlock>:
 80077a0:	4801      	ldr	r0, [pc, #4]	; (80077a8 <__malloc_unlock+0x8>)
 80077a2:	f000 b80c 	b.w	80077be <__retarget_lock_release_recursive>
 80077a6:	bf00      	nop
 80077a8:	2000d598 	.word	0x2000d598

080077ac <_malloc_usable_size_r>:
 80077ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077b0:	1f18      	subs	r0, r3, #4
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	bfbc      	itt	lt
 80077b6:	580b      	ldrlt	r3, [r1, r0]
 80077b8:	18c0      	addlt	r0, r0, r3
 80077ba:	4770      	bx	lr

080077bc <__retarget_lock_acquire_recursive>:
 80077bc:	4770      	bx	lr

080077be <__retarget_lock_release_recursive>:
 80077be:	4770      	bx	lr

080077c0 <_sbrk>:
 80077c0:	4a04      	ldr	r2, [pc, #16]	; (80077d4 <_sbrk+0x14>)
 80077c2:	6811      	ldr	r1, [r2, #0]
 80077c4:	4603      	mov	r3, r0
 80077c6:	b909      	cbnz	r1, 80077cc <_sbrk+0xc>
 80077c8:	4903      	ldr	r1, [pc, #12]	; (80077d8 <_sbrk+0x18>)
 80077ca:	6011      	str	r1, [r2, #0]
 80077cc:	6810      	ldr	r0, [r2, #0]
 80077ce:	4403      	add	r3, r0
 80077d0:	6013      	str	r3, [r2, #0]
 80077d2:	4770      	bx	lr
 80077d4:	2000d59c 	.word	0x2000d59c
 80077d8:	2000d5a0 	.word	0x2000d5a0

080077dc <_init>:
 80077dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077de:	bf00      	nop
 80077e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077e2:	bc08      	pop	{r3}
 80077e4:	469e      	mov	lr, r3
 80077e6:	4770      	bx	lr

080077e8 <_fini>:
 80077e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ea:	bf00      	nop
 80077ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ee:	bc08      	pop	{r3}
 80077f0:	469e      	mov	lr, r3
 80077f2:	4770      	bx	lr
