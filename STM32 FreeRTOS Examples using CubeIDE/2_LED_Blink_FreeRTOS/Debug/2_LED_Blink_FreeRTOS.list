
2_LED_Blink_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005be0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08005d80  08005d80  00015d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ea8  08005ea8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005ea8  08005ea8  00015ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005eb0  08005eb0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005eb0  08005eb0  00015eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005eb4  08005eb4  00015eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d494  20000014  08005ecc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d4a8  08005ecc  0002d4a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c08  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da8  00000000  00000000  00034c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  000379f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d8  00000000  00000000  00038d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c3f  00000000  00000000  00039f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b27  00000000  00000000  00052b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a298  00000000  00000000  00067686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010191e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050e8  00000000  00000000  00101970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005d68 	.word	0x08005d68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08005d68 	.word	0x08005d68

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	2000cad4 	.word	0x2000cad4

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b974 	b.w	8000574 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468e      	mov	lr, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d14d      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d969      	bls.n	800038c <__udivmoddi4+0xe8>
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	b152      	cbz	r2, 80002d4 <__udivmoddi4+0x30>
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	f1c2 0120 	rsb	r1, r2, #32
 80002c6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ce:	ea41 0e03 	orr.w	lr, r1, r3
 80002d2:	4094      	lsls	r4, r2
 80002d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d8:	0c21      	lsrs	r1, r4, #16
 80002da:	fbbe f6f8 	udiv	r6, lr, r8
 80002de:	fa1f f78c 	uxth.w	r7, ip
 80002e2:	fb08 e316 	mls	r3, r8, r6, lr
 80002e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ea:	fb06 f107 	mul.w	r1, r6, r7
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002fa:	f080 811f 	bcs.w	800053c <__udivmoddi4+0x298>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 811c 	bls.w	800053c <__udivmoddi4+0x298>
 8000304:	3e02      	subs	r6, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a5b      	subs	r3, r3, r1
 800030a:	b2a4      	uxth	r4, r4
 800030c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000310:	fb08 3310 	mls	r3, r8, r0, r3
 8000314:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000318:	fb00 f707 	mul.w	r7, r0, r7
 800031c:	42a7      	cmp	r7, r4
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x92>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f100 33ff 	add.w	r3, r0, #4294967295
 8000328:	f080 810a 	bcs.w	8000540 <__udivmoddi4+0x29c>
 800032c:	42a7      	cmp	r7, r4
 800032e:	f240 8107 	bls.w	8000540 <__udivmoddi4+0x29c>
 8000332:	4464      	add	r4, ip
 8000334:	3802      	subs	r0, #2
 8000336:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033a:	1be4      	subs	r4, r4, r7
 800033c:	2600      	movs	r6, #0
 800033e:	b11d      	cbz	r5, 8000348 <__udivmoddi4+0xa4>
 8000340:	40d4      	lsrs	r4, r2
 8000342:	2300      	movs	r3, #0
 8000344:	e9c5 4300 	strd	r4, r3, [r5]
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0xc2>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80ef 	beq.w	8000536 <__udivmoddi4+0x292>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x160>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xd4>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80f9 	bhi.w	800056a <__udivmoddi4+0x2c6>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0303 	sbc.w	r3, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	469e      	mov	lr, r3
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e0      	beq.n	8000348 <__udivmoddi4+0xa4>
 8000386:	e9c5 4e00 	strd	r4, lr, [r5]
 800038a:	e7dd      	b.n	8000348 <__udivmoddi4+0xa4>
 800038c:	b902      	cbnz	r2, 8000390 <__udivmoddi4+0xec>
 800038e:	deff      	udf	#255	; 0xff
 8000390:	fab2 f282 	clz	r2, r2
 8000394:	2a00      	cmp	r2, #0
 8000396:	f040 8092 	bne.w	80004be <__udivmoddi4+0x21a>
 800039a:	eba1 010c 	sub.w	r1, r1, ip
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f fe8c 	uxth.w	lr, ip
 80003a6:	2601      	movs	r6, #1
 80003a8:	0c20      	lsrs	r0, r4, #16
 80003aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ae:	fb07 1113 	mls	r1, r7, r3, r1
 80003b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b6:	fb0e f003 	mul.w	r0, lr, r3
 80003ba:	4288      	cmp	r0, r1
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x12c>
 80003be:	eb1c 0101 	adds.w	r1, ip, r1
 80003c2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x12a>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f200 80cb 	bhi.w	8000564 <__udivmoddi4+0x2c0>
 80003ce:	4643      	mov	r3, r8
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d8:	fb07 1110 	mls	r1, r7, r0, r1
 80003dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e0:	fb0e fe00 	mul.w	lr, lr, r0
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x156>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x154>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2ca>
 80003f8:	4608      	mov	r0, r1
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000402:	e79c      	b.n	800033e <__udivmoddi4+0x9a>
 8000404:	f1c6 0720 	rsb	r7, r6, #32
 8000408:	40b3      	lsls	r3, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f407 	lsr.w	r4, r0, r7
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	431c      	orrs	r4, r3
 800041c:	40f9      	lsrs	r1, r7
 800041e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000422:	fa00 f306 	lsl.w	r3, r0, r6
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	0c20      	lsrs	r0, r4, #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fb09 1118 	mls	r1, r9, r8, r1
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	fb08 f00e 	mul.w	r0, r8, lr
 800043c:	4288      	cmp	r0, r1
 800043e:	fa02 f206 	lsl.w	r2, r2, r6
 8000442:	d90b      	bls.n	800045c <__udivmoddi4+0x1b8>
 8000444:	eb1c 0101 	adds.w	r1, ip, r1
 8000448:	f108 3aff 	add.w	sl, r8, #4294967295
 800044c:	f080 8088 	bcs.w	8000560 <__udivmoddi4+0x2bc>
 8000450:	4288      	cmp	r0, r1
 8000452:	f240 8085 	bls.w	8000560 <__udivmoddi4+0x2bc>
 8000456:	f1a8 0802 	sub.w	r8, r8, #2
 800045a:	4461      	add	r1, ip
 800045c:	1a09      	subs	r1, r1, r0
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb1 f0f9 	udiv	r0, r1, r9
 8000464:	fb09 1110 	mls	r1, r9, r0, r1
 8000468:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000470:	458e      	cmp	lr, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x1e2>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f100 34ff 	add.w	r4, r0, #4294967295
 800047c:	d26c      	bcs.n	8000558 <__udivmoddi4+0x2b4>
 800047e:	458e      	cmp	lr, r1
 8000480:	d96a      	bls.n	8000558 <__udivmoddi4+0x2b4>
 8000482:	3802      	subs	r0, #2
 8000484:	4461      	add	r1, ip
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	fba0 9402 	umull	r9, r4, r0, r2
 800048e:	eba1 010e 	sub.w	r1, r1, lr
 8000492:	42a1      	cmp	r1, r4
 8000494:	46c8      	mov	r8, r9
 8000496:	46a6      	mov	lr, r4
 8000498:	d356      	bcc.n	8000548 <__udivmoddi4+0x2a4>
 800049a:	d053      	beq.n	8000544 <__udivmoddi4+0x2a0>
 800049c:	b15d      	cbz	r5, 80004b6 <__udivmoddi4+0x212>
 800049e:	ebb3 0208 	subs.w	r2, r3, r8
 80004a2:	eb61 010e 	sbc.w	r1, r1, lr
 80004a6:	fa01 f707 	lsl.w	r7, r1, r7
 80004aa:	fa22 f306 	lsr.w	r3, r2, r6
 80004ae:	40f1      	lsrs	r1, r6
 80004b0:	431f      	orrs	r7, r3
 80004b2:	e9c5 7100 	strd	r7, r1, [r5]
 80004b6:	2600      	movs	r6, #0
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	40d8      	lsrs	r0, r3
 80004c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c8:	fa21 f303 	lsr.w	r3, r1, r3
 80004cc:	4091      	lsls	r1, r2
 80004ce:	4301      	orrs	r1, r0
 80004d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d4:	fa1f fe8c 	uxth.w	lr, ip
 80004d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004dc:	fb07 3610 	mls	r6, r7, r0, r3
 80004e0:	0c0b      	lsrs	r3, r1, #16
 80004e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e6:	fb00 f60e 	mul.w	r6, r0, lr
 80004ea:	429e      	cmp	r6, r3
 80004ec:	fa04 f402 	lsl.w	r4, r4, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x260>
 80004f2:	eb1c 0303 	adds.w	r3, ip, r3
 80004f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fa:	d22f      	bcs.n	800055c <__udivmoddi4+0x2b8>
 80004fc:	429e      	cmp	r6, r3
 80004fe:	d92d      	bls.n	800055c <__udivmoddi4+0x2b8>
 8000500:	3802      	subs	r0, #2
 8000502:	4463      	add	r3, ip
 8000504:	1b9b      	subs	r3, r3, r6
 8000506:	b289      	uxth	r1, r1
 8000508:	fbb3 f6f7 	udiv	r6, r3, r7
 800050c:	fb07 3316 	mls	r3, r7, r6, r3
 8000510:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000514:	fb06 f30e 	mul.w	r3, r6, lr
 8000518:	428b      	cmp	r3, r1
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x28a>
 800051c:	eb1c 0101 	adds.w	r1, ip, r1
 8000520:	f106 38ff 	add.w	r8, r6, #4294967295
 8000524:	d216      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 8000526:	428b      	cmp	r3, r1
 8000528:	d914      	bls.n	8000554 <__udivmoddi4+0x2b0>
 800052a:	3e02      	subs	r6, #2
 800052c:	4461      	add	r1, ip
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000534:	e738      	b.n	80003a8 <__udivmoddi4+0x104>
 8000536:	462e      	mov	r6, r5
 8000538:	4628      	mov	r0, r5
 800053a:	e705      	b.n	8000348 <__udivmoddi4+0xa4>
 800053c:	4606      	mov	r6, r0
 800053e:	e6e3      	b.n	8000308 <__udivmoddi4+0x64>
 8000540:	4618      	mov	r0, r3
 8000542:	e6f8      	b.n	8000336 <__udivmoddi4+0x92>
 8000544:	454b      	cmp	r3, r9
 8000546:	d2a9      	bcs.n	800049c <__udivmoddi4+0x1f8>
 8000548:	ebb9 0802 	subs.w	r8, r9, r2
 800054c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000550:	3801      	subs	r0, #1
 8000552:	e7a3      	b.n	800049c <__udivmoddi4+0x1f8>
 8000554:	4646      	mov	r6, r8
 8000556:	e7ea      	b.n	800052e <__udivmoddi4+0x28a>
 8000558:	4620      	mov	r0, r4
 800055a:	e794      	b.n	8000486 <__udivmoddi4+0x1e2>
 800055c:	4640      	mov	r0, r8
 800055e:	e7d1      	b.n	8000504 <__udivmoddi4+0x260>
 8000560:	46d0      	mov	r8, sl
 8000562:	e77b      	b.n	800045c <__udivmoddi4+0x1b8>
 8000564:	3b02      	subs	r3, #2
 8000566:	4461      	add	r1, ip
 8000568:	e732      	b.n	80003d0 <__udivmoddi4+0x12c>
 800056a:	4630      	mov	r0, r6
 800056c:	e709      	b.n	8000382 <__udivmoddi4+0xde>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x156>

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fa6f 	bl	8000a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f87b 	bl	800067c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f8e3 	bl	8000750 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1<<0);
 800058a:	4b31      	ldr	r3, [pc, #196]	; (8000650 <main+0xd8>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a30      	ldr	r2, [pc, #192]	; (8000650 <main+0xd8>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6013      	str	r3, [r2, #0]


  SEGGER_SYSVIEW_Conf();
 8000596:	f003 ff29 	bl	80043ec <SEGGER_SYSVIEW_Conf>
  vSetVarulMaxPRIGROUPValue();
 800059a:	f003 fcc7 	bl	8003f2c <vSetVarulMaxPRIGROUPValue>
  SEGGER_SYSVIEW_Start();
 800059e:	f004 fe9d 	bl	80052dc <SEGGER_SYSVIEW_Start>


/**********************************PREEMPTIVE IS DISABLED SO CO-OPERATIVE SCHEDULING IS WORKING********************/
status = xTaskCreate(Task1_Handler,"Task 1",configMINIMAL_STACK_SIZE,NULL,2,&Task1_Handle);
 80005a2:	4b2c      	ldr	r3, [pc, #176]	; (8000654 <main+0xdc>)
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2302      	movs	r3, #2
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2300      	movs	r3, #0
 80005ac:	2282      	movs	r2, #130	; 0x82
 80005ae:	492a      	ldr	r1, [pc, #168]	; (8000658 <main+0xe0>)
 80005b0:	482a      	ldr	r0, [pc, #168]	; (800065c <main+0xe4>)
 80005b2:	f001 ffe7 	bl	8002584 <xTaskCreate>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a29      	ldr	r2, [pc, #164]	; (8000660 <main+0xe8>)
 80005ba:	6013      	str	r3, [r2, #0]

configASSERT(status == pdPASS); // Check if it is succesfully created
 80005bc:	4b28      	ldr	r3, [pc, #160]	; (8000660 <main+0xe8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d00a      	beq.n	80005da <main+0x62>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005c8:	f383 8811 	msr	BASEPRI, r3
 80005cc:	f3bf 8f6f 	isb	sy
 80005d0:	f3bf 8f4f 	dsb	sy
 80005d4:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005d6:	bf00      	nop
 80005d8:	e7fe      	b.n	80005d8 <main+0x60>

status = xTaskCreate(Task2_Handler,"Task 2",configMINIMAL_STACK_SIZE,NULL,2,&Task2_Handle);
 80005da:	4b22      	ldr	r3, [pc, #136]	; (8000664 <main+0xec>)
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	2302      	movs	r3, #2
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2300      	movs	r3, #0
 80005e4:	2282      	movs	r2, #130	; 0x82
 80005e6:	4920      	ldr	r1, [pc, #128]	; (8000668 <main+0xf0>)
 80005e8:	4820      	ldr	r0, [pc, #128]	; (800066c <main+0xf4>)
 80005ea:	f001 ffcb 	bl	8002584 <xTaskCreate>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a1b      	ldr	r2, [pc, #108]	; (8000660 <main+0xe8>)
 80005f2:	6013      	str	r3, [r2, #0]

configASSERT(status == pdPASS);  // Check if it is succesfully created
 80005f4:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <main+0xe8>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d00a      	beq.n	8000612 <main+0x9a>
        __asm volatile
 80005fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000600:	f383 8811 	msr	BASEPRI, r3
 8000604:	f3bf 8f6f 	isb	sy
 8000608:	f3bf 8f4f 	dsb	sy
 800060c:	60bb      	str	r3, [r7, #8]
    }
 800060e:	bf00      	nop
 8000610:	e7fe      	b.n	8000610 <main+0x98>

status = xTaskCreate(Task3_Handler,"Task 3",configMINIMAL_STACK_SIZE,NULL,2,&Task3_Handle);
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <main+0xf8>)
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	2302      	movs	r3, #2
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2300      	movs	r3, #0
 800061c:	2282      	movs	r2, #130	; 0x82
 800061e:	4915      	ldr	r1, [pc, #84]	; (8000674 <main+0xfc>)
 8000620:	4815      	ldr	r0, [pc, #84]	; (8000678 <main+0x100>)
 8000622:	f001 ffaf 	bl	8002584 <xTaskCreate>
 8000626:	4603      	mov	r3, r0
 8000628:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <main+0xe8>)
 800062a:	6013      	str	r3, [r2, #0]

configASSERT(status == pdPASS); // Check if it is succesfully created
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <main+0xe8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d00a      	beq.n	800064a <main+0xd2>
        __asm volatile
 8000634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000638:	f383 8811 	msr	BASEPRI, r3
 800063c:	f3bf 8f6f 	isb	sy
 8000640:	f3bf 8f4f 	dsb	sy
 8000644:	607b      	str	r3, [r7, #4]
    }
 8000646:	bf00      	nop
 8000648:	e7fe      	b.n	8000648 <main+0xd0>

vTaskStartScheduler();
 800064a:	f002 f9a5 	bl	8002998 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064e:	e7fe      	b.n	800064e <main+0xd6>
 8000650:	e0001000 	.word	0xe0001000
 8000654:	20000030 	.word	0x20000030
 8000658:	08005d80 	.word	0x08005d80
 800065c:	080007b5 	.word	0x080007b5
 8000660:	2000003c 	.word	0x2000003c
 8000664:	20000034 	.word	0x20000034
 8000668:	08005d88 	.word	0x08005d88
 800066c:	080007e1 	.word	0x080007e1
 8000670:	20000038 	.word	0x20000038
 8000674:	08005d90 	.word	0x08005d90
 8000678:	0800080d 	.word	0x0800080d

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	; 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	; 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f005 fb64 	bl	8005d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	4b28      	ldr	r3, [pc, #160]	; (8000748 <SystemClock_Config+0xcc>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a27      	ldr	r2, [pc, #156]	; (8000748 <SystemClock_Config+0xcc>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
 80006b0:	4b25      	ldr	r3, [pc, #148]	; (8000748 <SystemClock_Config+0xcc>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b22      	ldr	r3, [pc, #136]	; (800074c <SystemClock_Config+0xd0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c8:	4a20      	ldr	r2, [pc, #128]	; (800074c <SystemClock_Config+0xd0>)
 80006ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b1e      	ldr	r3, [pc, #120]	; (800074c <SystemClock_Config+0xd0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006dc:	2302      	movs	r3, #2
 80006de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e4:	2310      	movs	r3, #16
 80006e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	2302      	movs	r3, #2
 80006ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ec:	2300      	movs	r3, #0
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f0:	2308      	movs	r3, #8
 80006f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80006f4:	2354      	movs	r3, #84	; 0x54
 80006f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 0320 	add.w	r3, r7, #32
 8000704:	4618      	mov	r0, r3
 8000706:	f000 fc87 	bl	8001018 <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000710:	f000 f8a1 	bl	8000856 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000718:	2302      	movs	r3, #2
 800071a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000724:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	2102      	movs	r1, #2
 8000730:	4618      	mov	r0, r3
 8000732:	f000 fee9 	bl	8001508 <HAL_RCC_ClockConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800073c:	f000 f88b 	bl	8000856 <Error_Handler>
  }
}
 8000740:	bf00      	nop
 8000742:	3750      	adds	r7, #80	; 0x50
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000764:	2300      	movs	r3, #0
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_GPIO_Init+0x5c>)
 800076a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076c:	4a0f      	ldr	r2, [pc, #60]	; (80007ac <MX_GPIO_Init+0x5c>)
 800076e:	f043 0304 	orr.w	r3, r3, #4
 8000772:	6313      	str	r3, [r2, #48]	; 0x30
 8000774:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <MX_GPIO_Init+0x5c>)
 8000776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000778:	f003 0304 	and.w	r3, r3, #4
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	210f      	movs	r1, #15
 8000784:	480a      	ldr	r0, [pc, #40]	; (80007b0 <MX_GPIO_Init+0x60>)
 8000786:	f000 fc13 	bl	8000fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800078a:	230f      	movs	r3, #15
 800078c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	2301      	movs	r3, #1
 8000790:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	4619      	mov	r1, r3
 800079e:	4804      	ldr	r0, [pc, #16]	; (80007b0 <MX_GPIO_Init+0x60>)
 80007a0:	f000 fa82 	bl	8000ca8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a4:	bf00      	nop
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020800 	.word	0x40020800

080007b4 <Task1_Handler>:

/* USER CODE BEGIN 4 */
static void Task1_Handler(void *params)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
   TickType_t Last_Wakeup_Time;
   Last_Wakeup_Time = xTaskGetTickCount();
 80007bc:	f002 fa5c 	bl	8002c78 <xTaskGetTickCount>
 80007c0:	4603      	mov	r3, r0
 80007c2:	60fb      	str	r3, [r7, #12]

	while(1)
	{
       HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_0);
 80007c4:	2101      	movs	r1, #1
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <Task1_Handler+0x28>)
 80007c8:	f000 fc0b 	bl	8000fe2 <HAL_GPIO_TogglePin>
       vTaskDelayUntil(&Last_Wakeup_Time,pdMS_TO_TICKS(1000));
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 f85d 	bl	8002894 <xTaskDelayUntil>
       HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_0);
 80007da:	e7f3      	b.n	80007c4 <Task1_Handler+0x10>
 80007dc:	40020800 	.word	0x40020800

080007e0 <Task2_Handler>:

	}

}
static void Task2_Handler(void *params)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	   TickType_t Last_Wakeup_Time;
	   Last_Wakeup_Time = xTaskGetTickCount();
 80007e8:	f002 fa46 	bl	8002c78 <xTaskGetTickCount>
 80007ec:	4603      	mov	r3, r0
 80007ee:	60fb      	str	r3, [r7, #12]
	while(1)
	{
	    HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_1);
 80007f0:	2102      	movs	r1, #2
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <Task2_Handler+0x28>)
 80007f4:	f000 fbf5 	bl	8000fe2 <HAL_GPIO_TogglePin>
	    vTaskDelayUntil(&Last_Wakeup_Time,pdMS_TO_TICKS(800));
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000800:	4618      	mov	r0, r3
 8000802:	f002 f847 	bl	8002894 <xTaskDelayUntil>
	    HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_1);
 8000806:	e7f3      	b.n	80007f0 <Task2_Handler+0x10>
 8000808:	40020800 	.word	0x40020800

0800080c <Task3_Handler>:
	}
}
static void Task3_Handler(void *params)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	   TickType_t Last_Wakeup_Time;
	   Last_Wakeup_Time = xTaskGetTickCount();
 8000814:	f002 fa30 	bl	8002c78 <xTaskGetTickCount>
 8000818:	4603      	mov	r3, r0
 800081a:	60fb      	str	r3, [r7, #12]
	while(1)
	{
	    HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_2|GPIO_PIN_3);
 800081c:	210c      	movs	r1, #12
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <Task3_Handler+0x28>)
 8000820:	f000 fbdf 	bl	8000fe2 <HAL_GPIO_TogglePin>
	    vTaskDelayUntil(&Last_Wakeup_Time,pdMS_TO_TICKS(4000));
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800082c:	4618      	mov	r0, r3
 800082e:	f002 f831 	bl	8002894 <xTaskDelayUntil>
	    HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_2|GPIO_PIN_3);
 8000832:	e7f3      	b.n	800081c <Task3_Handler+0x10>
 8000834:	40020800 	.word	0x40020800

08000838 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000848:	d101      	bne.n	800084e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800084a:	f000 f92b 	bl	8000aa4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085a:	b672      	cpsid	i
}
 800085c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085e:	e7fe      	b.n	800085e <Error_Handler+0x8>

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <HAL_MspInit+0x4c>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	4a0f      	ldr	r2, [pc, #60]	; (80008ac <HAL_MspInit+0x4c>)
 8000870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000874:	6453      	str	r3, [r2, #68]	; 0x44
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <HAL_MspInit+0x4c>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <HAL_MspInit+0x4c>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	4a08      	ldr	r2, [pc, #32]	; (80008ac <HAL_MspInit+0x4c>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000890:	6413      	str	r3, [r2, #64]	; 0x40
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_MspInit+0x4c>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MspInit 1 */
  //NVIC_SetPriorityGrouping(0);

  /* USER CODE END MspInit 1 */
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800

080008b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08e      	sub	sp, #56	; 0x38
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008bc:	2300      	movs	r3, #0
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	4b34      	ldr	r3, [pc, #208]	; (8000998 <HAL_InitTick+0xe8>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	4a33      	ldr	r2, [pc, #204]	; (8000998 <HAL_InitTick+0xe8>)
 80008ca:	f043 0301 	orr.w	r3, r3, #1
 80008ce:	6413      	str	r3, [r2, #64]	; 0x40
 80008d0:	4b31      	ldr	r3, [pc, #196]	; (8000998 <HAL_InitTick+0xe8>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008dc:	f107 0210 	add.w	r2, r7, #16
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4611      	mov	r1, r2
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 ffda 	bl	80018a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008ec:	6a3b      	ldr	r3, [r7, #32]
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d103      	bne.n	80008fe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008f6:	f000 ffbf 	bl	8001878 <HAL_RCC_GetPCLK1Freq>
 80008fa:	6378      	str	r0, [r7, #52]	; 0x34
 80008fc:	e004      	b.n	8000908 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008fe:	f000 ffbb 	bl	8001878 <HAL_RCC_GetPCLK1Freq>
 8000902:	4603      	mov	r3, r0
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800090a:	4a24      	ldr	r2, [pc, #144]	; (800099c <HAL_InitTick+0xec>)
 800090c:	fba2 2303 	umull	r2, r3, r2, r3
 8000910:	0c9b      	lsrs	r3, r3, #18
 8000912:	3b01      	subs	r3, #1
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000916:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <HAL_InitTick+0xf0>)
 8000918:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800091c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800091e:	4b20      	ldr	r3, [pc, #128]	; (80009a0 <HAL_InitTick+0xf0>)
 8000920:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000924:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000926:	4a1e      	ldr	r2, [pc, #120]	; (80009a0 <HAL_InitTick+0xf0>)
 8000928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800092c:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <HAL_InitTick+0xf0>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000932:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <HAL_InitTick+0xf0>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000938:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <HAL_InitTick+0xf0>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800093e:	4818      	ldr	r0, [pc, #96]	; (80009a0 <HAL_InitTick+0xf0>)
 8000940:	f000 ffe0 	bl	8001904 <HAL_TIM_Base_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800094a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800094e:	2b00      	cmp	r3, #0
 8000950:	d11b      	bne.n	800098a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000952:	4813      	ldr	r0, [pc, #76]	; (80009a0 <HAL_InitTick+0xf0>)
 8000954:	f001 f830 	bl	80019b8 <HAL_TIM_Base_Start_IT>
 8000958:	4603      	mov	r3, r0
 800095a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800095e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000962:	2b00      	cmp	r3, #0
 8000964:	d111      	bne.n	800098a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000966:	201c      	movs	r0, #28
 8000968:	f000 f990 	bl	8000c8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b0f      	cmp	r3, #15
 8000970:	d808      	bhi.n	8000984 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000972:	2200      	movs	r2, #0
 8000974:	6879      	ldr	r1, [r7, #4]
 8000976:	201c      	movs	r0, #28
 8000978:	f000 f96c 	bl	8000c54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800097c:	4a09      	ldr	r2, [pc, #36]	; (80009a4 <HAL_InitTick+0xf4>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6013      	str	r3, [r2, #0]
 8000982:	e002      	b.n	800098a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000984:	2301      	movs	r3, #1
 8000986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800098a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800098e:	4618      	mov	r0, r3
 8000990:	3738      	adds	r7, #56	; 0x38
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	431bde83 	.word	0x431bde83
 80009a0:	20000040 	.word	0x20000040
 80009a4:	20000004 	.word	0x20000004

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <NMI_Handler+0x4>

080009ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <HardFault_Handler+0x4>

080009b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <MemManage_Handler+0x4>

080009ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <BusFault_Handler+0x4>

080009c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <UsageFault_Handler+0x4>

080009c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009d8:	4802      	ldr	r0, [pc, #8]	; (80009e4 <TIM2_IRQHandler+0x10>)
 80009da:	f001 f84f 	bl	8001a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000040 	.word	0x20000040

080009e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <SystemInit+0x20>)
 80009ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <SystemInit+0x20>)
 80009f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a12:	490e      	ldr	r1, [pc, #56]	; (8000a4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a14:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a18:	e002      	b.n	8000a20 <LoopCopyDataInit>

08000a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1e:	3304      	adds	r3, #4

08000a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a24:	d3f9      	bcc.n	8000a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a26:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a28:	4c0b      	ldr	r4, [pc, #44]	; (8000a58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a2c:	e001      	b.n	8000a32 <LoopFillZerobss>

08000a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a30:	3204      	adds	r2, #4

08000a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a34:	d3fb      	bcc.n	8000a2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a36:	f7ff ffd7 	bl	80009e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f005 f94b 	bl	8005cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a3e:	f7ff fd9b 	bl	8000578 <main>
  bx  lr    
 8000a42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a4c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a50:	08005eb8 	.word	0x08005eb8
  ldr r2, =_sbss
 8000a54:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a58:	2000d4a8 	.word	0x2000d4a8

08000a5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC_IRQHandler>
	...

08000a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <HAL_Init+0x40>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <HAL_Init+0x40>)
 8000a6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <HAL_Init+0x40>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <HAL_Init+0x40>)
 8000a76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <HAL_Init+0x40>)
 8000a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a88:	2003      	movs	r0, #3
 8000a8a:	f000 f8d8 	bl	8000c3e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8e:	200f      	movs	r0, #15
 8000a90:	f7ff ff0e 	bl	80008b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a94:	f7ff fee4 	bl	8000860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023c00 	.word	0x40023c00

08000aa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_IncTick+0x20>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_IncTick+0x24>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <HAL_IncTick+0x24>)
 8000ab6:	6013      	str	r3, [r2, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	20000088 	.word	0x20000088

08000acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <HAL_GetTick+0x14>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000088 	.word	0x20000088

08000ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <__NVIC_SetPriorityGrouping+0x44>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b00:	4013      	ands	r3, r2
 8000b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b16:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <__NVIC_SetPriorityGrouping+0x44>)
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	60d3      	str	r3, [r2, #12]
}
 8000b1c:	bf00      	nop
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <__NVIC_GetPriorityGrouping+0x18>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	0a1b      	lsrs	r3, r3, #8
 8000b36:	f003 0307 	and.w	r3, r3, #7
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	db0b      	blt.n	8000b72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	f003 021f 	and.w	r2, r3, #31
 8000b60:	4907      	ldr	r1, [pc, #28]	; (8000b80 <__NVIC_EnableIRQ+0x38>)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	095b      	lsrs	r3, r3, #5
 8000b68:	2001      	movs	r0, #1
 8000b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000e100 	.word	0xe000e100

08000b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	6039      	str	r1, [r7, #0]
 8000b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	db0a      	blt.n	8000bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	490c      	ldr	r1, [pc, #48]	; (8000bd0 <__NVIC_SetPriority+0x4c>)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	0112      	lsls	r2, r2, #4
 8000ba4:	b2d2      	uxtb	r2, r2
 8000ba6:	440b      	add	r3, r1
 8000ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bac:	e00a      	b.n	8000bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4908      	ldr	r1, [pc, #32]	; (8000bd4 <__NVIC_SetPriority+0x50>)
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	f003 030f 	and.w	r3, r3, #15
 8000bba:	3b04      	subs	r3, #4
 8000bbc:	0112      	lsls	r2, r2, #4
 8000bbe:	b2d2      	uxtb	r2, r2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	761a      	strb	r2, [r3, #24]
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000e100 	.word	0xe000e100
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b089      	sub	sp, #36	; 0x24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	f1c3 0307 	rsb	r3, r3, #7
 8000bf2:	2b04      	cmp	r3, #4
 8000bf4:	bf28      	it	cs
 8000bf6:	2304      	movcs	r3, #4
 8000bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	2b06      	cmp	r3, #6
 8000c00:	d902      	bls.n	8000c08 <NVIC_EncodePriority+0x30>
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3b03      	subs	r3, #3
 8000c06:	e000      	b.n	8000c0a <NVIC_EncodePriority+0x32>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43da      	mvns	r2, r3
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c20:	f04f 31ff 	mov.w	r1, #4294967295
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2a:	43d9      	mvns	r1, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	4313      	orrs	r3, r2
         );
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3724      	adds	r7, #36	; 0x24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ff4c 	bl	8000ae4 <__NVIC_SetPriorityGrouping>
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
 8000c60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c66:	f7ff ff61 	bl	8000b2c <__NVIC_GetPriorityGrouping>
 8000c6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	68b9      	ldr	r1, [r7, #8]
 8000c70:	6978      	ldr	r0, [r7, #20]
 8000c72:	f7ff ffb1 	bl	8000bd8 <NVIC_EncodePriority>
 8000c76:	4602      	mov	r2, r0
 8000c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ff80 	bl	8000b84 <__NVIC_SetPriority>
}
 8000c84:	bf00      	nop
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff54 	bl	8000b48 <__NVIC_EnableIRQ>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
 8000cc2:	e159      	b.n	8000f78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	f040 8148 	bne.w	8000f72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 0303 	and.w	r3, r3, #3
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d005      	beq.n	8000cfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d130      	bne.n	8000d5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	2203      	movs	r2, #3
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	68da      	ldr	r2, [r3, #12]
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d30:	2201      	movs	r2, #1
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	091b      	lsrs	r3, r3, #4
 8000d46:	f003 0201 	and.w	r2, r3, #1
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 0303 	and.w	r3, r3, #3
 8000d64:	2b03      	cmp	r3, #3
 8000d66:	d017      	beq.n	8000d98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	2203      	movs	r2, #3
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	689a      	ldr	r2, [r3, #8]
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d123      	bne.n	8000dec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	08da      	lsrs	r2, r3, #3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3208      	adds	r2, #8
 8000dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	f003 0307 	and.w	r3, r3, #7
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	220f      	movs	r2, #15
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	691a      	ldr	r2, [r3, #16]
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	08da      	lsrs	r2, r3, #3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3208      	adds	r2, #8
 8000de6:	69b9      	ldr	r1, [r7, #24]
 8000de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	2203      	movs	r2, #3
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 0203 	and.w	r2, r3, #3
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f000 80a2 	beq.w	8000f72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	4b57      	ldr	r3, [pc, #348]	; (8000f90 <HAL_GPIO_Init+0x2e8>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	4a56      	ldr	r2, [pc, #344]	; (8000f90 <HAL_GPIO_Init+0x2e8>)
 8000e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3e:	4b54      	ldr	r3, [pc, #336]	; (8000f90 <HAL_GPIO_Init+0x2e8>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e4a:	4a52      	ldr	r2, [pc, #328]	; (8000f94 <HAL_GPIO_Init+0x2ec>)
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	089b      	lsrs	r3, r3, #2
 8000e50:	3302      	adds	r3, #2
 8000e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	220f      	movs	r2, #15
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a49      	ldr	r2, [pc, #292]	; (8000f98 <HAL_GPIO_Init+0x2f0>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d019      	beq.n	8000eaa <HAL_GPIO_Init+0x202>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a48      	ldr	r2, [pc, #288]	; (8000f9c <HAL_GPIO_Init+0x2f4>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d013      	beq.n	8000ea6 <HAL_GPIO_Init+0x1fe>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a47      	ldr	r2, [pc, #284]	; (8000fa0 <HAL_GPIO_Init+0x2f8>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d00d      	beq.n	8000ea2 <HAL_GPIO_Init+0x1fa>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a46      	ldr	r2, [pc, #280]	; (8000fa4 <HAL_GPIO_Init+0x2fc>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d007      	beq.n	8000e9e <HAL_GPIO_Init+0x1f6>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a45      	ldr	r2, [pc, #276]	; (8000fa8 <HAL_GPIO_Init+0x300>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d101      	bne.n	8000e9a <HAL_GPIO_Init+0x1f2>
 8000e96:	2304      	movs	r3, #4
 8000e98:	e008      	b.n	8000eac <HAL_GPIO_Init+0x204>
 8000e9a:	2307      	movs	r3, #7
 8000e9c:	e006      	b.n	8000eac <HAL_GPIO_Init+0x204>
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e004      	b.n	8000eac <HAL_GPIO_Init+0x204>
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	e002      	b.n	8000eac <HAL_GPIO_Init+0x204>
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e000      	b.n	8000eac <HAL_GPIO_Init+0x204>
 8000eaa:	2300      	movs	r3, #0
 8000eac:	69fa      	ldr	r2, [r7, #28]
 8000eae:	f002 0203 	and.w	r2, r2, #3
 8000eb2:	0092      	lsls	r2, r2, #2
 8000eb4:	4093      	lsls	r3, r2
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ebc:	4935      	ldr	r1, [pc, #212]	; (8000f94 <HAL_GPIO_Init+0x2ec>)
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	089b      	lsrs	r3, r3, #2
 8000ec2:	3302      	adds	r3, #2
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eca:	4b38      	ldr	r3, [pc, #224]	; (8000fac <HAL_GPIO_Init+0x304>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eee:	4a2f      	ldr	r2, [pc, #188]	; (8000fac <HAL_GPIO_Init+0x304>)
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ef4:	4b2d      	ldr	r3, [pc, #180]	; (8000fac <HAL_GPIO_Init+0x304>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f18:	4a24      	ldr	r2, [pc, #144]	; (8000fac <HAL_GPIO_Init+0x304>)
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f1e:	4b23      	ldr	r3, [pc, #140]	; (8000fac <HAL_GPIO_Init+0x304>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f42:	4a1a      	ldr	r2, [pc, #104]	; (8000fac <HAL_GPIO_Init+0x304>)
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f48:	4b18      	ldr	r3, [pc, #96]	; (8000fac <HAL_GPIO_Init+0x304>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f6c:	4a0f      	ldr	r2, [pc, #60]	; (8000fac <HAL_GPIO_Init+0x304>)
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3301      	adds	r3, #1
 8000f76:	61fb      	str	r3, [r7, #28]
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	2b0f      	cmp	r3, #15
 8000f7c:	f67f aea2 	bls.w	8000cc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40013800 	.word	0x40013800
 8000f98:	40020000 	.word	0x40020000
 8000f9c:	40020400 	.word	0x40020400
 8000fa0:	40020800 	.word	0x40020800
 8000fa4:	40020c00 	.word	0x40020c00
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40013c00 	.word	0x40013c00

08000fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	807b      	strh	r3, [r7, #2]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fc0:	787b      	ldrb	r3, [r7, #1]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fc6:	887a      	ldrh	r2, [r7, #2]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fcc:	e003      	b.n	8000fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fce:	887b      	ldrh	r3, [r7, #2]
 8000fd0:	041a      	lsls	r2, r3, #16
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	619a      	str	r2, [r3, #24]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b085      	sub	sp, #20
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
 8000fea:	460b      	mov	r3, r1
 8000fec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ff4:	887a      	ldrh	r2, [r7, #2]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	041a      	lsls	r2, r3, #16
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	43d9      	mvns	r1, r3
 8001000:	887b      	ldrh	r3, [r7, #2]
 8001002:	400b      	ands	r3, r1
 8001004:	431a      	orrs	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	619a      	str	r2, [r3, #24]
}
 800100a:	bf00      	nop
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e267      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b00      	cmp	r3, #0
 8001034:	d075      	beq.n	8001122 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001036:	4b88      	ldr	r3, [pc, #544]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	f003 030c 	and.w	r3, r3, #12
 800103e:	2b04      	cmp	r3, #4
 8001040:	d00c      	beq.n	800105c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001042:	4b85      	ldr	r3, [pc, #532]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800104a:	2b08      	cmp	r3, #8
 800104c:	d112      	bne.n	8001074 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800104e:	4b82      	ldr	r3, [pc, #520]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001056:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800105a:	d10b      	bne.n	8001074 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800105c:	4b7e      	ldr	r3, [pc, #504]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d05b      	beq.n	8001120 <HAL_RCC_OscConfig+0x108>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d157      	bne.n	8001120 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e242      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800107c:	d106      	bne.n	800108c <HAL_RCC_OscConfig+0x74>
 800107e:	4b76      	ldr	r3, [pc, #472]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a75      	ldr	r2, [pc, #468]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 8001084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001088:	6013      	str	r3, [r2, #0]
 800108a:	e01d      	b.n	80010c8 <HAL_RCC_OscConfig+0xb0>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001094:	d10c      	bne.n	80010b0 <HAL_RCC_OscConfig+0x98>
 8001096:	4b70      	ldr	r3, [pc, #448]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a6f      	ldr	r2, [pc, #444]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 800109c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	4b6d      	ldr	r3, [pc, #436]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a6c      	ldr	r2, [pc, #432]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 80010a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	e00b      	b.n	80010c8 <HAL_RCC_OscConfig+0xb0>
 80010b0:	4b69      	ldr	r3, [pc, #420]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a68      	ldr	r2, [pc, #416]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 80010b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	4b66      	ldr	r3, [pc, #408]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a65      	ldr	r2, [pc, #404]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 80010c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d013      	beq.n	80010f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fcfc 	bl	8000acc <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d8:	f7ff fcf8 	bl	8000acc <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b64      	cmp	r3, #100	; 0x64
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e207      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ea:	4b5b      	ldr	r3, [pc, #364]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0f0      	beq.n	80010d8 <HAL_RCC_OscConfig+0xc0>
 80010f6:	e014      	b.n	8001122 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f8:	f7ff fce8 	bl	8000acc <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001100:	f7ff fce4 	bl	8000acc <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b64      	cmp	r3, #100	; 0x64
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e1f3      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001112:	4b51      	ldr	r3, [pc, #324]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1f0      	bne.n	8001100 <HAL_RCC_OscConfig+0xe8>
 800111e:	e000      	b.n	8001122 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d063      	beq.n	80011f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800112e:	4b4a      	ldr	r3, [pc, #296]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 030c 	and.w	r3, r3, #12
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00b      	beq.n	8001152 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800113a:	4b47      	ldr	r3, [pc, #284]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001142:	2b08      	cmp	r3, #8
 8001144:	d11c      	bne.n	8001180 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001146:	4b44      	ldr	r3, [pc, #272]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d116      	bne.n	8001180 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001152:	4b41      	ldr	r3, [pc, #260]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d005      	beq.n	800116a <HAL_RCC_OscConfig+0x152>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d001      	beq.n	800116a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e1c7      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800116a:	4b3b      	ldr	r3, [pc, #236]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	4937      	ldr	r1, [pc, #220]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 800117a:	4313      	orrs	r3, r2
 800117c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800117e:	e03a      	b.n	80011f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d020      	beq.n	80011ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001188:	4b34      	ldr	r3, [pc, #208]	; (800125c <HAL_RCC_OscConfig+0x244>)
 800118a:	2201      	movs	r2, #1
 800118c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118e:	f7ff fc9d 	bl	8000acc <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001196:	f7ff fc99 	bl	8000acc <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e1a8      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a8:	4b2b      	ldr	r3, [pc, #172]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0f0      	beq.n	8001196 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b4:	4b28      	ldr	r3, [pc, #160]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	4925      	ldr	r1, [pc, #148]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 80011c4:	4313      	orrs	r3, r2
 80011c6:	600b      	str	r3, [r1, #0]
 80011c8:	e015      	b.n	80011f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ca:	4b24      	ldr	r3, [pc, #144]	; (800125c <HAL_RCC_OscConfig+0x244>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d0:	f7ff fc7c 	bl	8000acc <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d8:	f7ff fc78 	bl	8000acc <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e187      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ea:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f0      	bne.n	80011d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d036      	beq.n	8001270 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d016      	beq.n	8001238 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_RCC_OscConfig+0x248>)
 800120c:	2201      	movs	r2, #1
 800120e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001210:	f7ff fc5c 	bl	8000acc <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001218:	f7ff fc58 	bl	8000acc <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e167      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 800122c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f0      	beq.n	8001218 <HAL_RCC_OscConfig+0x200>
 8001236:	e01b      	b.n	8001270 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <HAL_RCC_OscConfig+0x248>)
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123e:	f7ff fc45 	bl	8000acc <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001244:	e00e      	b.n	8001264 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001246:	f7ff fc41 	bl	8000acc <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d907      	bls.n	8001264 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e150      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
 8001258:	40023800 	.word	0x40023800
 800125c:	42470000 	.word	0x42470000
 8001260:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001264:	4b88      	ldr	r3, [pc, #544]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 8001266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1ea      	bne.n	8001246 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 8097 	beq.w	80013ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800127e:	2300      	movs	r3, #0
 8001280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001282:	4b81      	ldr	r3, [pc, #516]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10f      	bne.n	80012ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	4b7d      	ldr	r3, [pc, #500]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	4a7c      	ldr	r2, [pc, #496]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129c:	6413      	str	r3, [r2, #64]	; 0x40
 800129e:	4b7a      	ldr	r3, [pc, #488]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012aa:	2301      	movs	r3, #1
 80012ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ae:	4b77      	ldr	r3, [pc, #476]	; (800148c <HAL_RCC_OscConfig+0x474>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d118      	bne.n	80012ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ba:	4b74      	ldr	r3, [pc, #464]	; (800148c <HAL_RCC_OscConfig+0x474>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a73      	ldr	r2, [pc, #460]	; (800148c <HAL_RCC_OscConfig+0x474>)
 80012c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012c6:	f7ff fc01 	bl	8000acc <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ce:	f7ff fbfd 	bl	8000acc <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e10c      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e0:	4b6a      	ldr	r3, [pc, #424]	; (800148c <HAL_RCC_OscConfig+0x474>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d106      	bne.n	8001302 <HAL_RCC_OscConfig+0x2ea>
 80012f4:	4b64      	ldr	r3, [pc, #400]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 80012f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f8:	4a63      	ldr	r2, [pc, #396]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001300:	e01c      	b.n	800133c <HAL_RCC_OscConfig+0x324>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	2b05      	cmp	r3, #5
 8001308:	d10c      	bne.n	8001324 <HAL_RCC_OscConfig+0x30c>
 800130a:	4b5f      	ldr	r3, [pc, #380]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 800130c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800130e:	4a5e      	ldr	r2, [pc, #376]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	6713      	str	r3, [r2, #112]	; 0x70
 8001316:	4b5c      	ldr	r3, [pc, #368]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 8001318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800131a:	4a5b      	ldr	r2, [pc, #364]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6713      	str	r3, [r2, #112]	; 0x70
 8001322:	e00b      	b.n	800133c <HAL_RCC_OscConfig+0x324>
 8001324:	4b58      	ldr	r3, [pc, #352]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 8001326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001328:	4a57      	ldr	r2, [pc, #348]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 800132a:	f023 0301 	bic.w	r3, r3, #1
 800132e:	6713      	str	r3, [r2, #112]	; 0x70
 8001330:	4b55      	ldr	r3, [pc, #340]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 8001332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001334:	4a54      	ldr	r2, [pc, #336]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 8001336:	f023 0304 	bic.w	r3, r3, #4
 800133a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d015      	beq.n	8001370 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001344:	f7ff fbc2 	bl	8000acc <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800134a:	e00a      	b.n	8001362 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800134c:	f7ff fbbe 	bl	8000acc <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	f241 3288 	movw	r2, #5000	; 0x1388
 800135a:	4293      	cmp	r3, r2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e0cb      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001362:	4b49      	ldr	r3, [pc, #292]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 8001364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0ee      	beq.n	800134c <HAL_RCC_OscConfig+0x334>
 800136e:	e014      	b.n	800139a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001370:	f7ff fbac 	bl	8000acc <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001376:	e00a      	b.n	800138e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001378:	f7ff fba8 	bl	8000acc <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	f241 3288 	movw	r2, #5000	; 0x1388
 8001386:	4293      	cmp	r3, r2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e0b5      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800138e:	4b3e      	ldr	r3, [pc, #248]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 8001390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1ee      	bne.n	8001378 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800139a:	7dfb      	ldrb	r3, [r7, #23]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d105      	bne.n	80013ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013a0:	4b39      	ldr	r3, [pc, #228]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	4a38      	ldr	r2, [pc, #224]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 80013a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 80a1 	beq.w	80014f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013b6:	4b34      	ldr	r3, [pc, #208]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 030c 	and.w	r3, r3, #12
 80013be:	2b08      	cmp	r3, #8
 80013c0:	d05c      	beq.n	800147c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d141      	bne.n	800144e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ca:	4b31      	ldr	r3, [pc, #196]	; (8001490 <HAL_RCC_OscConfig+0x478>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d0:	f7ff fb7c 	bl	8000acc <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013d8:	f7ff fb78 	bl	8000acc <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e087      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ea:	4b27      	ldr	r3, [pc, #156]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f0      	bne.n	80013d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69da      	ldr	r2, [r3, #28]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	431a      	orrs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001404:	019b      	lsls	r3, r3, #6
 8001406:	431a      	orrs	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140c:	085b      	lsrs	r3, r3, #1
 800140e:	3b01      	subs	r3, #1
 8001410:	041b      	lsls	r3, r3, #16
 8001412:	431a      	orrs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001418:	061b      	lsls	r3, r3, #24
 800141a:	491b      	ldr	r1, [pc, #108]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 800141c:	4313      	orrs	r3, r2
 800141e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <HAL_RCC_OscConfig+0x478>)
 8001422:	2201      	movs	r2, #1
 8001424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001426:	f7ff fb51 	bl	8000acc <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800142e:	f7ff fb4d 	bl	8000acc <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e05c      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0f0      	beq.n	800142e <HAL_RCC_OscConfig+0x416>
 800144c:	e054      	b.n	80014f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <HAL_RCC_OscConfig+0x478>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fb3a 	bl	8000acc <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800145c:	f7ff fb36 	bl	8000acc <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e045      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0x444>
 800147a:	e03d      	b.n	80014f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d107      	bne.n	8001494 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e038      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
 8001488:	40023800 	.word	0x40023800
 800148c:	40007000 	.word	0x40007000
 8001490:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_RCC_OscConfig+0x4ec>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d028      	beq.n	80014f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d121      	bne.n	80014f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d11a      	bne.n	80014f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014c4:	4013      	ands	r3, r2
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d111      	bne.n	80014f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014da:	085b      	lsrs	r3, r3, #1
 80014dc:	3b01      	subs	r3, #1
 80014de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d107      	bne.n	80014f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d001      	beq.n	80014f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e000      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800

08001508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e0cc      	b.n	80016b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800151c:	4b68      	ldr	r3, [pc, #416]	; (80016c0 <HAL_RCC_ClockConfig+0x1b8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d90c      	bls.n	8001544 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152a:	4b65      	ldr	r3, [pc, #404]	; (80016c0 <HAL_RCC_ClockConfig+0x1b8>)
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001532:	4b63      	ldr	r3, [pc, #396]	; (80016c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	429a      	cmp	r2, r3
 800153e:	d001      	beq.n	8001544 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e0b8      	b.n	80016b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d020      	beq.n	8001592 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	d005      	beq.n	8001568 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800155c:	4b59      	ldr	r3, [pc, #356]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	4a58      	ldr	r2, [pc, #352]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001566:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0308 	and.w	r3, r3, #8
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001574:	4b53      	ldr	r3, [pc, #332]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	4a52      	ldr	r2, [pc, #328]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 800157a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800157e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001580:	4b50      	ldr	r3, [pc, #320]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	494d      	ldr	r1, [pc, #308]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	4313      	orrs	r3, r2
 8001590:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d044      	beq.n	8001628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d107      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a6:	4b47      	ldr	r3, [pc, #284]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d119      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e07f      	b.n	80016b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d003      	beq.n	80015c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d107      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c6:	4b3f      	ldr	r3, [pc, #252]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d109      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e06f      	b.n	80016b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d6:	4b3b      	ldr	r3, [pc, #236]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e067      	b.n	80016b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015e6:	4b37      	ldr	r3, [pc, #220]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f023 0203 	bic.w	r2, r3, #3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	4934      	ldr	r1, [pc, #208]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015f8:	f7ff fa68 	bl	8000acc <HAL_GetTick>
 80015fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015fe:	e00a      	b.n	8001616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001600:	f7ff fa64 	bl	8000acc <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	f241 3288 	movw	r2, #5000	; 0x1388
 800160e:	4293      	cmp	r3, r2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e04f      	b.n	80016b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001616:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 020c 	and.w	r2, r3, #12
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	429a      	cmp	r2, r3
 8001626:	d1eb      	bne.n	8001600 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001628:	4b25      	ldr	r3, [pc, #148]	; (80016c0 <HAL_RCC_ClockConfig+0x1b8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d20c      	bcs.n	8001650 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001636:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800163e:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	429a      	cmp	r2, r3
 800164a:	d001      	beq.n	8001650 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e032      	b.n	80016b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	d008      	beq.n	800166e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800165c:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	4916      	ldr	r1, [pc, #88]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	4313      	orrs	r3, r2
 800166c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800167a:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	490e      	ldr	r1, [pc, #56]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	4313      	orrs	r3, r2
 800168c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800168e:	f000 f821 	bl	80016d4 <HAL_RCC_GetSysClockFreq>
 8001692:	4602      	mov	r2, r0
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	091b      	lsrs	r3, r3, #4
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	490a      	ldr	r1, [pc, #40]	; (80016c8 <HAL_RCC_ClockConfig+0x1c0>)
 80016a0:	5ccb      	ldrb	r3, [r1, r3]
 80016a2:	fa22 f303 	lsr.w	r3, r2, r3
 80016a6:	4a09      	ldr	r2, [pc, #36]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 80016a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_RCC_ClockConfig+0x1c8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff f8fe 	bl	80008b0 <HAL_InitTick>

  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023c00 	.word	0x40023c00
 80016c4:	40023800 	.word	0x40023800
 80016c8:	08005e68 	.word	0x08005e68
 80016cc:	20000000 	.word	0x20000000
 80016d0:	20000004 	.word	0x20000004

080016d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016d8:	b090      	sub	sp, #64	; 0x40
 80016da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	637b      	str	r3, [r7, #52]	; 0x34
 80016e0:	2300      	movs	r3, #0
 80016e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016e4:	2300      	movs	r3, #0
 80016e6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016ec:	4b59      	ldr	r3, [pc, #356]	; (8001854 <HAL_RCC_GetSysClockFreq+0x180>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f003 030c 	and.w	r3, r3, #12
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	d00d      	beq.n	8001714 <HAL_RCC_GetSysClockFreq+0x40>
 80016f8:	2b08      	cmp	r3, #8
 80016fa:	f200 80a1 	bhi.w	8001840 <HAL_RCC_GetSysClockFreq+0x16c>
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d002      	beq.n	8001708 <HAL_RCC_GetSysClockFreq+0x34>
 8001702:	2b04      	cmp	r3, #4
 8001704:	d003      	beq.n	800170e <HAL_RCC_GetSysClockFreq+0x3a>
 8001706:	e09b      	b.n	8001840 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001708:	4b53      	ldr	r3, [pc, #332]	; (8001858 <HAL_RCC_GetSysClockFreq+0x184>)
 800170a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800170c:	e09b      	b.n	8001846 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800170e:	4b53      	ldr	r3, [pc, #332]	; (800185c <HAL_RCC_GetSysClockFreq+0x188>)
 8001710:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001712:	e098      	b.n	8001846 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001714:	4b4f      	ldr	r3, [pc, #316]	; (8001854 <HAL_RCC_GetSysClockFreq+0x180>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800171c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800171e:	4b4d      	ldr	r3, [pc, #308]	; (8001854 <HAL_RCC_GetSysClockFreq+0x180>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d028      	beq.n	800177c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800172a:	4b4a      	ldr	r3, [pc, #296]	; (8001854 <HAL_RCC_GetSysClockFreq+0x180>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	099b      	lsrs	r3, r3, #6
 8001730:	2200      	movs	r2, #0
 8001732:	623b      	str	r3, [r7, #32]
 8001734:	627a      	str	r2, [r7, #36]	; 0x24
 8001736:	6a3b      	ldr	r3, [r7, #32]
 8001738:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800173c:	2100      	movs	r1, #0
 800173e:	4b47      	ldr	r3, [pc, #284]	; (800185c <HAL_RCC_GetSysClockFreq+0x188>)
 8001740:	fb03 f201 	mul.w	r2, r3, r1
 8001744:	2300      	movs	r3, #0
 8001746:	fb00 f303 	mul.w	r3, r0, r3
 800174a:	4413      	add	r3, r2
 800174c:	4a43      	ldr	r2, [pc, #268]	; (800185c <HAL_RCC_GetSysClockFreq+0x188>)
 800174e:	fba0 1202 	umull	r1, r2, r0, r2
 8001752:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001754:	460a      	mov	r2, r1
 8001756:	62ba      	str	r2, [r7, #40]	; 0x28
 8001758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800175a:	4413      	add	r3, r2
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800175e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001760:	2200      	movs	r2, #0
 8001762:	61bb      	str	r3, [r7, #24]
 8001764:	61fa      	str	r2, [r7, #28]
 8001766:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800176a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800176e:	f7fe fd81 	bl	8000274 <__aeabi_uldivmod>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4613      	mov	r3, r2
 8001778:	63fb      	str	r3, [r7, #60]	; 0x3c
 800177a:	e053      	b.n	8001824 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800177c:	4b35      	ldr	r3, [pc, #212]	; (8001854 <HAL_RCC_GetSysClockFreq+0x180>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	099b      	lsrs	r3, r3, #6
 8001782:	2200      	movs	r2, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	617a      	str	r2, [r7, #20]
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800178e:	f04f 0b00 	mov.w	fp, #0
 8001792:	4652      	mov	r2, sl
 8001794:	465b      	mov	r3, fp
 8001796:	f04f 0000 	mov.w	r0, #0
 800179a:	f04f 0100 	mov.w	r1, #0
 800179e:	0159      	lsls	r1, r3, #5
 80017a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017a4:	0150      	lsls	r0, r2, #5
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	ebb2 080a 	subs.w	r8, r2, sl
 80017ae:	eb63 090b 	sbc.w	r9, r3, fp
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80017be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80017c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80017c6:	ebb2 0408 	subs.w	r4, r2, r8
 80017ca:	eb63 0509 	sbc.w	r5, r3, r9
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	00eb      	lsls	r3, r5, #3
 80017d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017dc:	00e2      	lsls	r2, r4, #3
 80017de:	4614      	mov	r4, r2
 80017e0:	461d      	mov	r5, r3
 80017e2:	eb14 030a 	adds.w	r3, r4, sl
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	eb45 030b 	adc.w	r3, r5, fp
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017fa:	4629      	mov	r1, r5
 80017fc:	028b      	lsls	r3, r1, #10
 80017fe:	4621      	mov	r1, r4
 8001800:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001804:	4621      	mov	r1, r4
 8001806:	028a      	lsls	r2, r1, #10
 8001808:	4610      	mov	r0, r2
 800180a:	4619      	mov	r1, r3
 800180c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800180e:	2200      	movs	r2, #0
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	60fa      	str	r2, [r7, #12]
 8001814:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001818:	f7fe fd2c 	bl	8000274 <__aeabi_uldivmod>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4613      	mov	r3, r2
 8001822:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_RCC_GetSysClockFreq+0x180>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	0c1b      	lsrs	r3, r3, #16
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	3301      	adds	r3, #1
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001834:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001838:	fbb2 f3f3 	udiv	r3, r2, r3
 800183c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800183e:	e002      	b.n	8001846 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_RCC_GetSysClockFreq+0x184>)
 8001842:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001844:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001848:	4618      	mov	r0, r3
 800184a:	3740      	adds	r7, #64	; 0x40
 800184c:	46bd      	mov	sp, r7
 800184e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800
 8001858:	00f42400 	.word	0x00f42400
 800185c:	017d7840 	.word	0x017d7840

08001860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <HAL_RCC_GetHCLKFreq+0x14>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000000 	.word	0x20000000

08001878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800187c:	f7ff fff0 	bl	8001860 <HAL_RCC_GetHCLKFreq>
 8001880:	4602      	mov	r2, r0
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	0a9b      	lsrs	r3, r3, #10
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	4903      	ldr	r1, [pc, #12]	; (800189c <HAL_RCC_GetPCLK1Freq+0x24>)
 800188e:	5ccb      	ldrb	r3, [r1, r3]
 8001890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001894:	4618      	mov	r0, r3
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40023800 	.word	0x40023800
 800189c:	08005e78 	.word	0x08005e78

080018a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	220f      	movs	r2, #15
 80018ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_RCC_GetClockConfig+0x5c>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 0203 	and.w	r2, r3, #3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <HAL_RCC_GetClockConfig+0x5c>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <HAL_RCC_GetClockConfig+0x5c>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018d4:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_RCC_GetClockConfig+0x5c>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	08db      	lsrs	r3, r3, #3
 80018da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018e2:	4b07      	ldr	r3, [pc, #28]	; (8001900 <HAL_RCC_GetClockConfig+0x60>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0207 	and.w	r2, r3, #7
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	601a      	str	r2, [r3, #0]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800
 8001900:	40023c00 	.word	0x40023c00

08001904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e041      	b.n	800199a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d106      	bne.n	8001930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f839 	bl	80019a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2202      	movs	r2, #2
 8001934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3304      	adds	r3, #4
 8001940:	4619      	mov	r1, r3
 8001942:	4610      	mov	r0, r2
 8001944:	f000 f9ca 	bl	8001cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
	...

080019b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d001      	beq.n	80019d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e044      	b.n	8001a5a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2202      	movs	r2, #2
 80019d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0201 	orr.w	r2, r2, #1
 80019e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a1e      	ldr	r2, [pc, #120]	; (8001a68 <HAL_TIM_Base_Start_IT+0xb0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d018      	beq.n	8001a24 <HAL_TIM_Base_Start_IT+0x6c>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019fa:	d013      	beq.n	8001a24 <HAL_TIM_Base_Start_IT+0x6c>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a1a      	ldr	r2, [pc, #104]	; (8001a6c <HAL_TIM_Base_Start_IT+0xb4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d00e      	beq.n	8001a24 <HAL_TIM_Base_Start_IT+0x6c>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a19      	ldr	r2, [pc, #100]	; (8001a70 <HAL_TIM_Base_Start_IT+0xb8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d009      	beq.n	8001a24 <HAL_TIM_Base_Start_IT+0x6c>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a17      	ldr	r2, [pc, #92]	; (8001a74 <HAL_TIM_Base_Start_IT+0xbc>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d004      	beq.n	8001a24 <HAL_TIM_Base_Start_IT+0x6c>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a16      	ldr	r2, [pc, #88]	; (8001a78 <HAL_TIM_Base_Start_IT+0xc0>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d111      	bne.n	8001a48 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2b06      	cmp	r3, #6
 8001a34:	d010      	beq.n	8001a58 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f042 0201 	orr.w	r2, r2, #1
 8001a44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a46:	e007      	b.n	8001a58 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0201 	orr.w	r2, r2, #1
 8001a56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40010000 	.word	0x40010000
 8001a6c:	40000400 	.word	0x40000400
 8001a70:	40000800 	.word	0x40000800
 8001a74:	40000c00 	.word	0x40000c00
 8001a78:	40014000 	.word	0x40014000

08001a7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d122      	bne.n	8001ad8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d11b      	bne.n	8001ad8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f06f 0202 	mvn.w	r2, #2
 8001aa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f8ee 	bl	8001ca0 <HAL_TIM_IC_CaptureCallback>
 8001ac4:	e005      	b.n	8001ad2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f8e0 	bl	8001c8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 f8f1 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d122      	bne.n	8001b2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d11b      	bne.n	8001b2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f06f 0204 	mvn.w	r2, #4
 8001afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2202      	movs	r2, #2
 8001b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f8c4 	bl	8001ca0 <HAL_TIM_IC_CaptureCallback>
 8001b18:	e005      	b.n	8001b26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f8b6 	bl	8001c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f8c7 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d122      	bne.n	8001b80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d11b      	bne.n	8001b80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f06f 0208 	mvn.w	r2, #8
 8001b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2204      	movs	r2, #4
 8001b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f89a 	bl	8001ca0 <HAL_TIM_IC_CaptureCallback>
 8001b6c:	e005      	b.n	8001b7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f88c 	bl	8001c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f89d 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	2b10      	cmp	r3, #16
 8001b8c:	d122      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f003 0310 	and.w	r3, r3, #16
 8001b98:	2b10      	cmp	r3, #16
 8001b9a:	d11b      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f06f 0210 	mvn.w	r2, #16
 8001ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2208      	movs	r2, #8
 8001baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f870 	bl	8001ca0 <HAL_TIM_IC_CaptureCallback>
 8001bc0:	e005      	b.n	8001bce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f862 	bl	8001c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f873 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d10e      	bne.n	8001c00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d107      	bne.n	8001c00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f06f 0201 	mvn.w	r2, #1
 8001bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7fe fe1c 	bl	8000838 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0a:	2b80      	cmp	r3, #128	; 0x80
 8001c0c:	d10e      	bne.n	8001c2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c18:	2b80      	cmp	r3, #128	; 0x80
 8001c1a:	d107      	bne.n	8001c2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f8e2 	bl	8001df0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c36:	2b40      	cmp	r3, #64	; 0x40
 8001c38:	d10e      	bne.n	8001c58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c44:	2b40      	cmp	r3, #64	; 0x40
 8001c46:	d107      	bne.n	8001c58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f838 	bl	8001cc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	f003 0320 	and.w	r3, r3, #32
 8001c62:	2b20      	cmp	r3, #32
 8001c64:	d10e      	bne.n	8001c84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f003 0320 	and.w	r3, r3, #32
 8001c70:	2b20      	cmp	r3, #32
 8001c72:	d107      	bne.n	8001c84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f06f 0220 	mvn.w	r2, #32
 8001c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f8ac 	bl	8001ddc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a34      	ldr	r2, [pc, #208]	; (8001dc0 <TIM_Base_SetConfig+0xe4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d00f      	beq.n	8001d14 <TIM_Base_SetConfig+0x38>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cfa:	d00b      	beq.n	8001d14 <TIM_Base_SetConfig+0x38>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a31      	ldr	r2, [pc, #196]	; (8001dc4 <TIM_Base_SetConfig+0xe8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d007      	beq.n	8001d14 <TIM_Base_SetConfig+0x38>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a30      	ldr	r2, [pc, #192]	; (8001dc8 <TIM_Base_SetConfig+0xec>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d003      	beq.n	8001d14 <TIM_Base_SetConfig+0x38>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a2f      	ldr	r2, [pc, #188]	; (8001dcc <TIM_Base_SetConfig+0xf0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d108      	bne.n	8001d26 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a25      	ldr	r2, [pc, #148]	; (8001dc0 <TIM_Base_SetConfig+0xe4>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d01b      	beq.n	8001d66 <TIM_Base_SetConfig+0x8a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d34:	d017      	beq.n	8001d66 <TIM_Base_SetConfig+0x8a>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a22      	ldr	r2, [pc, #136]	; (8001dc4 <TIM_Base_SetConfig+0xe8>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d013      	beq.n	8001d66 <TIM_Base_SetConfig+0x8a>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a21      	ldr	r2, [pc, #132]	; (8001dc8 <TIM_Base_SetConfig+0xec>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d00f      	beq.n	8001d66 <TIM_Base_SetConfig+0x8a>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a20      	ldr	r2, [pc, #128]	; (8001dcc <TIM_Base_SetConfig+0xf0>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00b      	beq.n	8001d66 <TIM_Base_SetConfig+0x8a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a1f      	ldr	r2, [pc, #124]	; (8001dd0 <TIM_Base_SetConfig+0xf4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d007      	beq.n	8001d66 <TIM_Base_SetConfig+0x8a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a1e      	ldr	r2, [pc, #120]	; (8001dd4 <TIM_Base_SetConfig+0xf8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d003      	beq.n	8001d66 <TIM_Base_SetConfig+0x8a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a1d      	ldr	r2, [pc, #116]	; (8001dd8 <TIM_Base_SetConfig+0xfc>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d108      	bne.n	8001d78 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a08      	ldr	r2, [pc, #32]	; (8001dc0 <TIM_Base_SetConfig+0xe4>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d103      	bne.n	8001dac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	691a      	ldr	r2, [r3, #16]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	615a      	str	r2, [r3, #20]
}
 8001db2:	bf00      	nop
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40010000 	.word	0x40010000
 8001dc4:	40000400 	.word	0x40000400
 8001dc8:	40000800 	.word	0x40000800
 8001dcc:	40000c00 	.word	0x40000c00
 8001dd0:	40014000 	.word	0x40014000
 8001dd4:	40014400 	.word	0x40014400
 8001dd8:	40014800 	.word	0x40014800

08001ddc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f103 0208 	add.w	r2, r3, #8
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f04f 32ff 	mov.w	r2, #4294967295
 8001e1c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f103 0208 	add.w	r2, r3, #8
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f103 0208 	add.w	r2, r3, #8
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b085      	sub	sp, #20
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e74:	d103      	bne.n	8001e7e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	e00c      	b.n	8001e98 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3308      	adds	r3, #8
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	e002      	b.n	8001e8c <vListInsert+0x2e>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d2f6      	bcs.n	8001e86 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	601a      	str	r2, [r3, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6892      	ldr	r2, [r2, #8]
 8001ee6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6852      	ldr	r2, [r2, #4]
 8001ef0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d103      	bne.n	8001f04 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	1e5a      	subs	r2, r3, #1
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10a      	bne.n	8001f52 <xQueueGenericReset+0x2e>
        __asm volatile
 8001f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f40:	f383 8811 	msr	BASEPRI, r3
 8001f44:	f3bf 8f6f 	isb	sy
 8001f48:	f3bf 8f4f 	dsb	sy
 8001f4c:	60fb      	str	r3, [r7, #12]
    }
 8001f4e:	bf00      	nop
 8001f50:	e7fe      	b.n	8001f50 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d05d      	beq.n	8002014 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d059      	beq.n	8002014 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f68:	2100      	movs	r1, #0
 8001f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d000      	beq.n	8001f74 <xQueueGenericReset+0x50>
 8001f72:	2101      	movs	r1, #1
 8001f74:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d14c      	bne.n	8002014 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8001f7a:	f001 fef5 	bl	8003d68 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f86:	6939      	ldr	r1, [r7, #16]
 8001f88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f8a:	fb01 f303 	mul.w	r3, r1, r3
 8001f8e:	441a      	add	r2, r3
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	2200      	movs	r2, #0
 8001f98:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001faa:	3b01      	subs	r3, #1
 8001fac:	6939      	ldr	r1, [r7, #16]
 8001fae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001fb0:	fb01 f303 	mul.w	r3, r1, r3
 8001fb4:	441a      	add	r2, r3
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	22ff      	movs	r2, #255	; 0xff
 8001fbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	22ff      	movs	r2, #255	; 0xff
 8001fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d114      	bne.n	8001ffa <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d01a      	beq.n	800200e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	3310      	adds	r3, #16
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f001 f85d 	bl	800309c <xTaskRemoveFromEventList>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d012      	beq.n	800200e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001fe8:	4b15      	ldr	r3, [pc, #84]	; (8002040 <xQueueGenericReset+0x11c>)
 8001fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	f3bf 8f4f 	dsb	sy
 8001ff4:	f3bf 8f6f 	isb	sy
 8001ff8:	e009      	b.n	800200e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	3310      	adds	r3, #16
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff ff00 	bl	8001e04 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	3324      	adds	r3, #36	; 0x24
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fefb 	bl	8001e04 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800200e:	f001 fedb 	bl	8003dc8 <vPortExitCritical>
 8002012:	e001      	b.n	8002018 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10a      	bne.n	8002034 <xQueueGenericReset+0x110>
        __asm volatile
 800201e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002022:	f383 8811 	msr	BASEPRI, r3
 8002026:	f3bf 8f6f 	isb	sy
 800202a:	f3bf 8f4f 	dsb	sy
 800202e:	60bb      	str	r3, [r7, #8]
    }
 8002030:	bf00      	nop
 8002032:	e7fe      	b.n	8002032 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002034:	697b      	ldr	r3, [r7, #20]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	e000ed04 	.word	0xe000ed04

08002044 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	; 0x28
 8002048:	af02      	add	r7, sp, #8
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	4613      	mov	r3, r2
 8002050:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d02e      	beq.n	80020ba <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800205c:	2100      	movs	r1, #0
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	fba3 2302 	umull	r2, r3, r3, r2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d000      	beq.n	800206c <xQueueGenericCreate+0x28>
 800206a:	2101      	movs	r1, #1
 800206c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800206e:	2b00      	cmp	r3, #0
 8002070:	d123      	bne.n	80020ba <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800207a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800207e:	d81c      	bhi.n	80020ba <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	fb02 f303 	mul.w	r3, r2, r3
 8002088:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	3350      	adds	r3, #80	; 0x50
 800208e:	4618      	mov	r0, r3
 8002090:	f001 ffd2 	bl	8004038 <pvPortMalloc>
 8002094:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d01c      	beq.n	80020d6 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	3350      	adds	r3, #80	; 0x50
 80020a4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80020a6:	79fa      	ldrb	r2, [r7, #7]
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	4613      	mov	r3, r2
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 f814 	bl	80020e0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80020b8:	e00d      	b.n	80020d6 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10a      	bne.n	80020d6 <xQueueGenericCreate+0x92>
        __asm volatile
 80020c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c4:	f383 8811 	msr	BASEPRI, r3
 80020c8:	f3bf 8f6f 	isb	sy
 80020cc:	f3bf 8f4f 	dsb	sy
 80020d0:	613b      	str	r3, [r7, #16]
    }
 80020d2:	bf00      	nop
 80020d4:	e7fe      	b.n	80020d4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80020d6:	69fb      	ldr	r3, [r7, #28]
    }
 80020d8:	4618      	mov	r0, r3
 80020da:	3720      	adds	r7, #32
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d103      	bne.n	80020fc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	e002      	b.n	8002102 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800210e:	2101      	movs	r1, #1
 8002110:	69b8      	ldr	r0, [r7, #24]
 8002112:	f7ff ff07 	bl	8001f24 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	78fa      	ldrb	r2, [r7, #3]
 800211a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800211e:	78fb      	ldrb	r3, [r7, #3]
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	68f9      	ldr	r1, [r7, #12]
 8002124:	2073      	movs	r0, #115	; 0x73
 8002126:	f002 ffd1 	bl	80050cc <SEGGER_SYSVIEW_RecordU32x3>
}
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002134:	b590      	push	{r4, r7, lr}
 8002136:	b08f      	sub	sp, #60	; 0x3c
 8002138:	af02      	add	r7, sp, #8
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002140:	2300      	movs	r3, #0
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10a      	bne.n	8002164 <xQueueReceive+0x30>
        __asm volatile
 800214e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002152:	f383 8811 	msr	BASEPRI, r3
 8002156:	f3bf 8f6f 	isb	sy
 800215a:	f3bf 8f4f 	dsb	sy
 800215e:	623b      	str	r3, [r7, #32]
    }
 8002160:	bf00      	nop
 8002162:	e7fe      	b.n	8002162 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d103      	bne.n	8002172 <xQueueReceive+0x3e>
 800216a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <xQueueReceive+0x42>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <xQueueReceive+0x44>
 8002176:	2300      	movs	r3, #0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10a      	bne.n	8002192 <xQueueReceive+0x5e>
        __asm volatile
 800217c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002180:	f383 8811 	msr	BASEPRI, r3
 8002184:	f3bf 8f6f 	isb	sy
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	61fb      	str	r3, [r7, #28]
    }
 800218e:	bf00      	nop
 8002190:	e7fe      	b.n	8002190 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002192:	f001 f995 	bl	80034c0 <xTaskGetSchedulerState>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d102      	bne.n	80021a2 <xQueueReceive+0x6e>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <xQueueReceive+0x72>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <xQueueReceive+0x74>
 80021a6:	2300      	movs	r3, #0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10a      	bne.n	80021c2 <xQueueReceive+0x8e>
        __asm volatile
 80021ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b0:	f383 8811 	msr	BASEPRI, r3
 80021b4:	f3bf 8f6f 	isb	sy
 80021b8:	f3bf 8f4f 	dsb	sy
 80021bc:	61bb      	str	r3, [r7, #24]
    }
 80021be:	bf00      	nop
 80021c0:	e7fe      	b.n	80021c0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80021c2:	f001 fdd1 	bl	8003d68 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d02f      	beq.n	8002232 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80021d2:	68b9      	ldr	r1, [r7, #8]
 80021d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021d6:	f000 f8bd 	bl	8002354 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80021da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021dc:	4618      	mov	r0, r3
 80021de:	f003 fc27 	bl	8005a30 <SEGGER_SYSVIEW_ShrinkId>
 80021e2:	4604      	mov	r4, r0
 80021e4:	2000      	movs	r0, #0
 80021e6:	f003 fc23 	bl	8005a30 <SEGGER_SYSVIEW_ShrinkId>
 80021ea:	4602      	mov	r2, r0
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2101      	movs	r1, #1
 80021f0:	9100      	str	r1, [sp, #0]
 80021f2:	4621      	mov	r1, r4
 80021f4:	205c      	movs	r0, #92	; 0x5c
 80021f6:	f002 ffdf 	bl	80051b8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	1e5a      	subs	r2, r3, #1
 80021fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002200:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00f      	beq.n	800222a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800220a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220c:	3310      	adds	r3, #16
 800220e:	4618      	mov	r0, r3
 8002210:	f000 ff44 	bl	800309c <xTaskRemoveFromEventList>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d007      	beq.n	800222a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800221a:	4b4d      	ldr	r3, [pc, #308]	; (8002350 <xQueueReceive+0x21c>)
 800221c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	f3bf 8f4f 	dsb	sy
 8002226:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800222a:	f001 fdcd 	bl	8003dc8 <vPortExitCritical>
                return pdPASS;
 800222e:	2301      	movs	r3, #1
 8002230:	e08a      	b.n	8002348 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d113      	bne.n	8002260 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002238:	f001 fdc6 	bl	8003dc8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800223c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223e:	4618      	mov	r0, r3
 8002240:	f003 fbf6 	bl	8005a30 <SEGGER_SYSVIEW_ShrinkId>
 8002244:	4604      	mov	r4, r0
 8002246:	2000      	movs	r0, #0
 8002248:	f003 fbf2 	bl	8005a30 <SEGGER_SYSVIEW_ShrinkId>
 800224c:	4602      	mov	r2, r0
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2101      	movs	r1, #1
 8002252:	9100      	str	r1, [sp, #0]
 8002254:	4621      	mov	r1, r4
 8002256:	205c      	movs	r0, #92	; 0x5c
 8002258:	f002 ffae 	bl	80051b8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800225c:	2300      	movs	r3, #0
 800225e:	e073      	b.n	8002348 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002262:	2b00      	cmp	r3, #0
 8002264:	d106      	bne.n	8002274 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002266:	f107 0310 	add.w	r3, r7, #16
 800226a:	4618      	mov	r0, r3
 800226c:	f000 ffee 	bl	800324c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002270:	2301      	movs	r3, #1
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002274:	f001 fda8 	bl	8003dc8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002278:	f000 fbf0 	bl	8002a5c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800227c:	f001 fd74 	bl	8003d68 <vPortEnterCritical>
 8002280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002282:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002286:	b25b      	sxtb	r3, r3
 8002288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228c:	d103      	bne.n	8002296 <xQueueReceive+0x162>
 800228e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002298:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800229c:	b25b      	sxtb	r3, r3
 800229e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a2:	d103      	bne.n	80022ac <xQueueReceive+0x178>
 80022a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022ac:	f001 fd8c 	bl	8003dc8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80022b0:	1d3a      	adds	r2, r7, #4
 80022b2:	f107 0310 	add.w	r3, r7, #16
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 ffdd 	bl	8003278 <xTaskCheckForTimeOut>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d124      	bne.n	800230e <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80022c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022c6:	f000 f8bd 	bl	8002444 <prvIsQueueEmpty>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d018      	beq.n	8002302 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80022d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d2:	3324      	adds	r3, #36	; 0x24
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	4611      	mov	r1, r2
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 fe73 	bl	8002fc4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80022de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022e0:	f000 f85e 	bl	80023a0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80022e4:	f000 fbc8 	bl	8002a78 <xTaskResumeAll>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f47f af69 	bne.w	80021c2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80022f0:	4b17      	ldr	r3, [pc, #92]	; (8002350 <xQueueReceive+0x21c>)
 80022f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	f3bf 8f4f 	dsb	sy
 80022fc:	f3bf 8f6f 	isb	sy
 8002300:	e75f      	b.n	80021c2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002304:	f000 f84c 	bl	80023a0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002308:	f000 fbb6 	bl	8002a78 <xTaskResumeAll>
 800230c:	e759      	b.n	80021c2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800230e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002310:	f000 f846 	bl	80023a0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002314:	f000 fbb0 	bl	8002a78 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800231a:	f000 f893 	bl	8002444 <prvIsQueueEmpty>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	f43f af4e 	beq.w	80021c2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002328:	4618      	mov	r0, r3
 800232a:	f003 fb81 	bl	8005a30 <SEGGER_SYSVIEW_ShrinkId>
 800232e:	4604      	mov	r4, r0
 8002330:	2000      	movs	r0, #0
 8002332:	f003 fb7d 	bl	8005a30 <SEGGER_SYSVIEW_ShrinkId>
 8002336:	4602      	mov	r2, r0
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2101      	movs	r1, #1
 800233c:	9100      	str	r1, [sp, #0]
 800233e:	4621      	mov	r1, r4
 8002340:	205c      	movs	r0, #92	; 0x5c
 8002342:	f002 ff39 	bl	80051b8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002346:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002348:	4618      	mov	r0, r3
 800234a:	3734      	adds	r7, #52	; 0x34
 800234c:	46bd      	mov	sp, r7
 800234e:	bd90      	pop	{r4, r7, pc}
 8002350:	e000ed04 	.word	0xe000ed04

08002354 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	2b00      	cmp	r3, #0
 8002364:	d018      	beq.n	8002398 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	441a      	add	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	429a      	cmp	r2, r3
 800237e:	d303      	bcc.n	8002388 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68d9      	ldr	r1, [r3, #12]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	461a      	mov	r2, r3
 8002392:	6838      	ldr	r0, [r7, #0]
 8002394:	f003 fcd2 	bl	8005d3c <memcpy>
    }
}
 8002398:	bf00      	nop
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80023a8:	f001 fcde 	bl	8003d68 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023b2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80023b4:	e011      	b.n	80023da <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d012      	beq.n	80023e4 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3324      	adds	r3, #36	; 0x24
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 fe6a 	bl	800309c <xTaskRemoveFromEventList>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80023ce:	f000 ffb9 	bl	8003344 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80023da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	dce9      	bgt.n	80023b6 <prvUnlockQueue+0x16>
 80023e2:	e000      	b.n	80023e6 <prvUnlockQueue+0x46>
                    break;
 80023e4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	22ff      	movs	r2, #255	; 0xff
 80023ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80023ee:	f001 fceb 	bl	8003dc8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80023f2:	f001 fcb9 	bl	8003d68 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023fc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80023fe:	e011      	b.n	8002424 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d012      	beq.n	800242e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3310      	adds	r3, #16
 800240c:	4618      	mov	r0, r3
 800240e:	f000 fe45 	bl	800309c <xTaskRemoveFromEventList>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002418:	f000 ff94 	bl	8003344 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800241c:	7bbb      	ldrb	r3, [r7, #14]
 800241e:	3b01      	subs	r3, #1
 8002420:	b2db      	uxtb	r3, r3
 8002422:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002424:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002428:	2b00      	cmp	r3, #0
 800242a:	dce9      	bgt.n	8002400 <prvUnlockQueue+0x60>
 800242c:	e000      	b.n	8002430 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800242e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	22ff      	movs	r2, #255	; 0xff
 8002434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002438:	f001 fcc6 	bl	8003dc8 <vPortExitCritical>
}
 800243c:	bf00      	nop
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800244c:	f001 fc8c 	bl	8003d68 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002454:	2b00      	cmp	r3, #0
 8002456:	d102      	bne.n	800245e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002458:	2301      	movs	r3, #1
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	e001      	b.n	8002462 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002462:	f001 fcb1 	bl	8003dc8 <vPortExitCritical>

    return xReturn;
 8002466:	68fb      	ldr	r3, [r7, #12]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10a      	bne.n	800249a <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002488:	f383 8811 	msr	BASEPRI, r3
 800248c:	f3bf 8f6f 	isb	sy
 8002490:	f3bf 8f4f 	dsb	sy
 8002494:	60fb      	str	r3, [r7, #12]
    }
 8002496:	bf00      	nop
 8002498:	e7fe      	b.n	8002498 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d024      	beq.n	80024ea <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	e01e      	b.n	80024e4 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80024a6:	4a1c      	ldr	r2, [pc, #112]	; (8002518 <vQueueAddToRegistry+0xa8>)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	4413      	add	r3, r2
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d105      	bne.n	80024c2 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	4a17      	ldr	r2, [pc, #92]	; (8002518 <vQueueAddToRegistry+0xa8>)
 80024bc:	4413      	add	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
                    break;
 80024c0:	e013      	b.n	80024ea <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10a      	bne.n	80024de <vQueueAddToRegistry+0x6e>
 80024c8:	4a13      	ldr	r2, [pc, #76]	; (8002518 <vQueueAddToRegistry+0xa8>)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d104      	bne.n	80024de <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4a0f      	ldr	r2, [pc, #60]	; (8002518 <vQueueAddToRegistry+0xa8>)
 80024da:	4413      	add	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	3301      	adds	r3, #1
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	2b07      	cmp	r3, #7
 80024e8:	d9dd      	bls.n	80024a6 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00f      	beq.n	8002510 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4618      	mov	r0, r3
 8002500:	f003 fa96 	bl	8005a30 <SEGGER_SYSVIEW_ShrinkId>
 8002504:	4601      	mov	r1, r0
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	461a      	mov	r2, r3
 800250a:	2071      	movs	r0, #113	; 0x71
 800250c:	f002 fd84 	bl	8005018 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002510:	bf00      	nop
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	2000008c 	.word	0x2000008c

0800251c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800252c:	f001 fc1c 	bl	8003d68 <vPortEnterCritical>
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002536:	b25b      	sxtb	r3, r3
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d103      	bne.n	8002546 <vQueueWaitForMessageRestricted+0x2a>
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800254c:	b25b      	sxtb	r3, r3
 800254e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002552:	d103      	bne.n	800255c <vQueueWaitForMessageRestricted+0x40>
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800255c:	f001 fc34 	bl	8003dc8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002564:	2b00      	cmp	r3, #0
 8002566:	d106      	bne.n	8002576 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	3324      	adds	r3, #36	; 0x24
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	68b9      	ldr	r1, [r7, #8]
 8002570:	4618      	mov	r0, r3
 8002572:	f000 fd4b 	bl	800300c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002576:	6978      	ldr	r0, [r7, #20]
 8002578:	f7ff ff12 	bl	80023a0 <prvUnlockQueue>
    }
 800257c:	bf00      	nop
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002584:	b580      	push	{r7, lr}
 8002586:	b08c      	sub	sp, #48	; 0x30
 8002588:	af04      	add	r7, sp, #16
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	603b      	str	r3, [r7, #0]
 8002590:	4613      	mov	r3, r2
 8002592:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002594:	88fb      	ldrh	r3, [r7, #6]
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4618      	mov	r0, r3
 800259a:	f001 fd4d 	bl	8004038 <pvPortMalloc>
 800259e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d013      	beq.n	80025ce <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80025a6:	2058      	movs	r0, #88	; 0x58
 80025a8:	f001 fd46 	bl	8004038 <pvPortMalloc>
 80025ac:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d008      	beq.n	80025c6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80025b4:	2258      	movs	r2, #88	; 0x58
 80025b6:	2100      	movs	r1, #0
 80025b8:	69f8      	ldr	r0, [r7, #28]
 80025ba:	f003 fbcd 	bl	8005d58 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	631a      	str	r2, [r3, #48]	; 0x30
 80025c4:	e005      	b.n	80025d2 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80025c6:	6978      	ldr	r0, [r7, #20]
 80025c8:	f001 fdf0 	bl	80041ac <vPortFree>
 80025cc:	e001      	b.n	80025d2 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d013      	beq.n	8002600 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80025d8:	88fa      	ldrh	r2, [r7, #6]
 80025da:	2300      	movs	r3, #0
 80025dc:	9303      	str	r3, [sp, #12]
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	9302      	str	r3, [sp, #8]
 80025e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e4:	9301      	str	r3, [sp, #4]
 80025e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f80e 	bl	8002610 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80025f4:	69f8      	ldr	r0, [r7, #28]
 80025f6:	f000 f899 	bl	800272c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80025fa:	2301      	movs	r3, #1
 80025fc:	61bb      	str	r3, [r7, #24]
 80025fe:	e002      	b.n	8002606 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002600:	f04f 33ff 	mov.w	r3, #4294967295
 8002604:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002606:	69bb      	ldr	r3, [r7, #24]
    }
 8002608:	4618      	mov	r0, r3
 800260a:	3720      	adds	r7, #32
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
 800261c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800261e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002620:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	461a      	mov	r2, r3
 8002628:	21a5      	movs	r1, #165	; 0xa5
 800262a:	f003 fb95 	bl	8005d58 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800262e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002638:	3b01      	subs	r3, #1
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	f023 0307 	bic.w	r3, r3, #7
 8002646:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00a      	beq.n	8002668 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002656:	f383 8811 	msr	BASEPRI, r3
 800265a:	f3bf 8f6f 	isb	sy
 800265e:	f3bf 8f4f 	dsb	sy
 8002662:	617b      	str	r3, [r7, #20]
    }
 8002664:	bf00      	nop
 8002666:	e7fe      	b.n	8002666 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d01e      	beq.n	80026ac <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
 8002672:	e012      	b.n	800269a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	4413      	add	r3, r2
 800267a:	7819      	ldrb	r1, [r3, #0]
 800267c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	4413      	add	r3, r2
 8002682:	3334      	adds	r3, #52	; 0x34
 8002684:	460a      	mov	r2, r1
 8002686:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	4413      	add	r3, r2
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d006      	beq.n	80026a2 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	3301      	adds	r3, #1
 8002698:	61fb      	str	r3, [r7, #28]
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	2b09      	cmp	r3, #9
 800269e:	d9e9      	bls.n	8002674 <prvInitialiseNewTask+0x64>
 80026a0:	e000      	b.n	80026a4 <prvInitialiseNewTask+0x94>
            {
                break;
 80026a2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80026a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80026ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d90a      	bls.n	80026c8 <prvInitialiseNewTask+0xb8>
        __asm volatile
 80026b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b6:	f383 8811 	msr	BASEPRI, r3
 80026ba:	f3bf 8f6f 	isb	sy
 80026be:	f3bf 8f4f 	dsb	sy
 80026c2:	613b      	str	r3, [r7, #16]
    }
 80026c4:	bf00      	nop
 80026c6:	e7fe      	b.n	80026c6 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80026c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d901      	bls.n	80026d2 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80026ce:	2304      	movs	r3, #4
 80026d0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80026d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026d6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80026d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026dc:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80026de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e0:	3304      	adds	r3, #4
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fbae 	bl	8001e44 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80026e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ea:	3318      	adds	r3, #24
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fba9 	bl	8001e44 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80026f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026f6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fa:	f1c3 0205 	rsb	r2, r3, #5
 80026fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002700:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002706:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	68f9      	ldr	r1, [r7, #12]
 800270c:	69b8      	ldr	r0, [r7, #24]
 800270e:	f001 f9f9 	bl	8003b04 <pxPortInitialiseStack>
 8002712:	4602      	mov	r2, r0
 8002714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002716:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800271e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002722:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002724:	bf00      	nop
 8002726:	3720      	adds	r7, #32
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800272c:	b5b0      	push	{r4, r5, r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af02      	add	r7, sp, #8
 8002732:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002734:	f001 fb18 	bl	8003d68 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002738:	4b4f      	ldr	r3, [pc, #316]	; (8002878 <prvAddNewTaskToReadyList+0x14c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	3301      	adds	r3, #1
 800273e:	4a4e      	ldr	r2, [pc, #312]	; (8002878 <prvAddNewTaskToReadyList+0x14c>)
 8002740:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002742:	4b4e      	ldr	r3, [pc, #312]	; (800287c <prvAddNewTaskToReadyList+0x150>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d109      	bne.n	800275e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800274a:	4a4c      	ldr	r2, [pc, #304]	; (800287c <prvAddNewTaskToReadyList+0x150>)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002750:	4b49      	ldr	r3, [pc, #292]	; (8002878 <prvAddNewTaskToReadyList+0x14c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d110      	bne.n	800277a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002758:	f000 fe18 	bl	800338c <prvInitialiseTaskLists>
 800275c:	e00d      	b.n	800277a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800275e:	4b48      	ldr	r3, [pc, #288]	; (8002880 <prvAddNewTaskToReadyList+0x154>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d109      	bne.n	800277a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002766:	4b45      	ldr	r3, [pc, #276]	; (800287c <prvAddNewTaskToReadyList+0x150>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	429a      	cmp	r2, r3
 8002772:	d802      	bhi.n	800277a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002774:	4a41      	ldr	r2, [pc, #260]	; (800287c <prvAddNewTaskToReadyList+0x150>)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800277a:	4b42      	ldr	r3, [pc, #264]	; (8002884 <prvAddNewTaskToReadyList+0x158>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	3301      	adds	r3, #1
 8002780:	4a40      	ldr	r2, [pc, #256]	; (8002884 <prvAddNewTaskToReadyList+0x158>)
 8002782:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002784:	4b3f      	ldr	r3, [pc, #252]	; (8002884 <prvAddNewTaskToReadyList+0x158>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d016      	beq.n	80027c0 <prvAddNewTaskToReadyList+0x94>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4618      	mov	r0, r3
 8002796:	f003 f885 	bl	80058a4 <SEGGER_SYSVIEW_OnTaskCreate>
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	461d      	mov	r5, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	461c      	mov	r4, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	1ae3      	subs	r3, r4, r3
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	462b      	mov	r3, r5
 80027bc:	f001 feb8 	bl	8004530 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f003 f8f2 	bl	80059ac <SEGGER_SYSVIEW_OnTaskStartReady>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027cc:	2201      	movs	r2, #1
 80027ce:	409a      	lsls	r2, r3
 80027d0:	4b2d      	ldr	r3, [pc, #180]	; (8002888 <prvAddNewTaskToReadyList+0x15c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	4a2c      	ldr	r2, [pc, #176]	; (8002888 <prvAddNewTaskToReadyList+0x15c>)
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027de:	492b      	ldr	r1, [pc, #172]	; (800288c <prvAddNewTaskToReadyList+0x160>)
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	3304      	adds	r3, #4
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	609a      	str	r2, [r3, #8]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	3204      	adds	r2, #4
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	1d1a      	adds	r2, r3, #4
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4a1b      	ldr	r2, [pc, #108]	; (800288c <prvAddNewTaskToReadyList+0x160>)
 800281e:	441a      	add	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	615a      	str	r2, [r3, #20]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002828:	4918      	ldr	r1, [pc, #96]	; (800288c <prvAddNewTaskToReadyList+0x160>)
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	1c59      	adds	r1, r3, #1
 8002838:	4814      	ldr	r0, [pc, #80]	; (800288c <prvAddNewTaskToReadyList+0x160>)
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4403      	add	r3, r0
 8002844:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002846:	f001 fabf 	bl	8003dc8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800284a:	4b0d      	ldr	r3, [pc, #52]	; (8002880 <prvAddNewTaskToReadyList+0x154>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00e      	beq.n	8002870 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002852:	4b0a      	ldr	r3, [pc, #40]	; (800287c <prvAddNewTaskToReadyList+0x150>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285c:	429a      	cmp	r2, r3
 800285e:	d207      	bcs.n	8002870 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <prvAddNewTaskToReadyList+0x164>)
 8002862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	f3bf 8f4f 	dsb	sy
 800286c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002870:	bf00      	nop
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bdb0      	pop	{r4, r5, r7, pc}
 8002878:	200001a4 	.word	0x200001a4
 800287c:	200000cc 	.word	0x200000cc
 8002880:	200001b0 	.word	0x200001b0
 8002884:	200001c0 	.word	0x200001c0
 8002888:	200001ac 	.word	0x200001ac
 800288c:	200000d0 	.word	0x200000d0
 8002890:	e000ed04 	.word	0xe000ed04

08002894 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800289e:	2300      	movs	r3, #0
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10a      	bne.n	80028be <xTaskDelayUntil+0x2a>
        __asm volatile
 80028a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ac:	f383 8811 	msr	BASEPRI, r3
 80028b0:	f3bf 8f6f 	isb	sy
 80028b4:	f3bf 8f4f 	dsb	sy
 80028b8:	617b      	str	r3, [r7, #20]
    }
 80028ba:	bf00      	nop
 80028bc:	e7fe      	b.n	80028bc <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10a      	bne.n	80028da <xTaskDelayUntil+0x46>
        __asm volatile
 80028c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c8:	f383 8811 	msr	BASEPRI, r3
 80028cc:	f3bf 8f6f 	isb	sy
 80028d0:	f3bf 8f4f 	dsb	sy
 80028d4:	613b      	str	r3, [r7, #16]
    }
 80028d6:	bf00      	nop
 80028d8:	e7fe      	b.n	80028d8 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 80028da:	4b2c      	ldr	r3, [pc, #176]	; (800298c <xTaskDelayUntil+0xf8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00a      	beq.n	80028f8 <xTaskDelayUntil+0x64>
        __asm volatile
 80028e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e6:	f383 8811 	msr	BASEPRI, r3
 80028ea:	f3bf 8f6f 	isb	sy
 80028ee:	f3bf 8f4f 	dsb	sy
 80028f2:	60fb      	str	r3, [r7, #12]
    }
 80028f4:	bf00      	nop
 80028f6:	e7fe      	b.n	80028f6 <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 80028f8:	f000 f8b0 	bl	8002a5c <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80028fc:	4b24      	ldr	r3, [pc, #144]	; (8002990 <xTaskDelayUntil+0xfc>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	4413      	add	r3, r2
 800290a:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6a3a      	ldr	r2, [r7, #32]
 8002912:	429a      	cmp	r2, r3
 8002914:	d20b      	bcs.n	800292e <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	429a      	cmp	r2, r3
 800291e:	d211      	bcs.n	8002944 <xTaskDelayUntil+0xb0>
 8002920:	69fa      	ldr	r2, [r7, #28]
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	429a      	cmp	r2, r3
 8002926:	d90d      	bls.n	8002944 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002928:	2301      	movs	r3, #1
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
 800292c:	e00a      	b.n	8002944 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	429a      	cmp	r2, r3
 8002936:	d303      	bcc.n	8002940 <xTaskDelayUntil+0xac>
 8002938:	69fa      	ldr	r2, [r7, #28]
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	429a      	cmp	r2, r3
 800293e:	d901      	bls.n	8002944 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002940:	2301      	movs	r3, #1
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69fa      	ldr	r2, [r7, #28]
 8002948:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	2b00      	cmp	r3, #0
 800294e:	d009      	beq.n	8002964 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8002950:	2024      	movs	r0, #36	; 0x24
 8002952:	f002 fb07 	bl	8004f64 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002956:	69fa      	ldr	r2, [r7, #28]
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2100      	movs	r1, #0
 800295e:	4618      	mov	r0, r3
 8002960:	f000 fdcc 	bl	80034fc <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002964:	f000 f888 	bl	8002a78 <xTaskResumeAll>
 8002968:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d107      	bne.n	8002980 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 8002970:	4b08      	ldr	r3, [pc, #32]	; (8002994 <xTaskDelayUntil+0x100>)
 8002972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	f3bf 8f4f 	dsb	sy
 800297c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002982:	4618      	mov	r0, r3
 8002984:	3728      	adds	r7, #40	; 0x28
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	200001cc 	.word	0x200001cc
 8002990:	200001a8 	.word	0x200001a8
 8002994:	e000ed04 	.word	0xe000ed04

08002998 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800299e:	4b27      	ldr	r3, [pc, #156]	; (8002a3c <vTaskStartScheduler+0xa4>)
 80029a0:	9301      	str	r3, [sp, #4]
 80029a2:	2300      	movs	r3, #0
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	2300      	movs	r3, #0
 80029a8:	2282      	movs	r2, #130	; 0x82
 80029aa:	4925      	ldr	r1, [pc, #148]	; (8002a40 <vTaskStartScheduler+0xa8>)
 80029ac:	4825      	ldr	r0, [pc, #148]	; (8002a44 <vTaskStartScheduler+0xac>)
 80029ae:	f7ff fde9 	bl	8002584 <xTaskCreate>
 80029b2:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d102      	bne.n	80029c0 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80029ba:	f000 fe1f 	bl	80035fc <xTimerCreateTimerTask>
 80029be:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d124      	bne.n	8002a10 <vTaskStartScheduler+0x78>
        __asm volatile
 80029c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ca:	f383 8811 	msr	BASEPRI, r3
 80029ce:	f3bf 8f6f 	isb	sy
 80029d2:	f3bf 8f4f 	dsb	sy
 80029d6:	60bb      	str	r3, [r7, #8]
    }
 80029d8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80029da:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <vTaskStartScheduler+0xb0>)
 80029dc:	f04f 32ff 	mov.w	r2, #4294967295
 80029e0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80029e2:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <vTaskStartScheduler+0xb4>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80029e8:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <vTaskStartScheduler+0xb8>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80029ee:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <vTaskStartScheduler+0xbc>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <vTaskStartScheduler+0xa4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d102      	bne.n	8002a00 <vTaskStartScheduler+0x68>
 80029fa:	f002 ff37 	bl	800586c <SEGGER_SYSVIEW_OnIdle>
 80029fe:	e004      	b.n	8002a0a <vTaskStartScheduler+0x72>
 8002a00:	4b14      	ldr	r3, [pc, #80]	; (8002a54 <vTaskStartScheduler+0xbc>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f002 ff8f 	bl	8005928 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002a0a:	f001 f90b 	bl	8003c24 <xPortStartScheduler>
 8002a0e:	e00e      	b.n	8002a2e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a16:	d10a      	bne.n	8002a2e <vTaskStartScheduler+0x96>
        __asm volatile
 8002a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1c:	f383 8811 	msr	BASEPRI, r3
 8002a20:	f3bf 8f6f 	isb	sy
 8002a24:	f3bf 8f4f 	dsb	sy
 8002a28:	607b      	str	r3, [r7, #4]
    }
 8002a2a:	bf00      	nop
 8002a2c:	e7fe      	b.n	8002a2c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <vTaskStartScheduler+0xc0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
}
 8002a32:	bf00      	nop
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	200001c8 	.word	0x200001c8
 8002a40:	08005d98 	.word	0x08005d98
 8002a44:	0800335d 	.word	0x0800335d
 8002a48:	200001c4 	.word	0x200001c4
 8002a4c:	200001b0 	.word	0x200001b0
 8002a50:	200001a8 	.word	0x200001a8
 8002a54:	200000cc 	.word	0x200000cc
 8002a58:	2000000c 	.word	0x2000000c

08002a5c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002a60:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <vTaskSuspendAll+0x18>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	3301      	adds	r3, #1
 8002a66:	4a03      	ldr	r2, [pc, #12]	; (8002a74 <vTaskSuspendAll+0x18>)
 8002a68:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002a6a:	bf00      	nop
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	200001cc 	.word	0x200001cc

08002a78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002a86:	4b73      	ldr	r3, [pc, #460]	; (8002c54 <xTaskResumeAll+0x1dc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10a      	bne.n	8002aa4 <xTaskResumeAll+0x2c>
        __asm volatile
 8002a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a92:	f383 8811 	msr	BASEPRI, r3
 8002a96:	f3bf 8f6f 	isb	sy
 8002a9a:	f3bf 8f4f 	dsb	sy
 8002a9e:	607b      	str	r3, [r7, #4]
    }
 8002aa0:	bf00      	nop
 8002aa2:	e7fe      	b.n	8002aa2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002aa4:	f001 f960 	bl	8003d68 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002aa8:	4b6a      	ldr	r3, [pc, #424]	; (8002c54 <xTaskResumeAll+0x1dc>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	3b01      	subs	r3, #1
 8002aae:	4a69      	ldr	r2, [pc, #420]	; (8002c54 <xTaskResumeAll+0x1dc>)
 8002ab0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ab2:	4b68      	ldr	r3, [pc, #416]	; (8002c54 <xTaskResumeAll+0x1dc>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f040 80c4 	bne.w	8002c44 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002abc:	4b66      	ldr	r3, [pc, #408]	; (8002c58 <xTaskResumeAll+0x1e0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 80bf 	beq.w	8002c44 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ac6:	e08e      	b.n	8002be6 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ac8:	4b64      	ldr	r3, [pc, #400]	; (8002c5c <xTaskResumeAll+0x1e4>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	6a12      	ldr	r2, [r2, #32]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	69fa      	ldr	r2, [r7, #28]
 8002ae6:	69d2      	ldr	r2, [r2, #28]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	3318      	adds	r3, #24
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d103      	bne.n	8002afe <xTaskResumeAll+0x86>
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	6a1a      	ldr	r2, [r3, #32]
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	2200      	movs	r2, #0
 8002b02:	629a      	str	r2, [r3, #40]	; 0x28
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	1e5a      	subs	r2, r3, #1
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	69fa      	ldr	r2, [r7, #28]
 8002b1a:	68d2      	ldr	r2, [r2, #12]
 8002b1c:	609a      	str	r2, [r3, #8]
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	69fa      	ldr	r2, [r7, #28]
 8002b24:	6892      	ldr	r2, [r2, #8]
 8002b26:	605a      	str	r2, [r3, #4]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	3304      	adds	r3, #4
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d103      	bne.n	8002b3c <xTaskResumeAll+0xc4>
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	605a      	str	r2, [r3, #4]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	615a      	str	r2, [r3, #20]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	1e5a      	subs	r2, r3, #1
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f002 ff2c 	bl	80059ac <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	2201      	movs	r2, #1
 8002b5a:	409a      	lsls	r2, r3
 8002b5c:	4b40      	ldr	r3, [pc, #256]	; (8002c60 <xTaskResumeAll+0x1e8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	4a3f      	ldr	r2, [pc, #252]	; (8002c60 <xTaskResumeAll+0x1e8>)
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b6a:	493e      	ldr	r1, [pc, #248]	; (8002c64 <xTaskResumeAll+0x1ec>)
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	3304      	adds	r3, #4
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	60bb      	str	r3, [r7, #8]
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	609a      	str	r2, [r3, #8]
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	60da      	str	r2, [r3, #12]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	69fa      	ldr	r2, [r7, #28]
 8002b90:	3204      	adds	r2, #4
 8002b92:	605a      	str	r2, [r3, #4]
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	1d1a      	adds	r2, r3, #4
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4a2e      	ldr	r2, [pc, #184]	; (8002c64 <xTaskResumeAll+0x1ec>)
 8002baa:	441a      	add	r2, r3
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	615a      	str	r2, [r3, #20]
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb4:	492b      	ldr	r1, [pc, #172]	; (8002c64 <xTaskResumeAll+0x1ec>)
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	1c59      	adds	r1, r3, #1
 8002bc4:	4827      	ldr	r0, [pc, #156]	; (8002c64 <xTaskResumeAll+0x1ec>)
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4403      	add	r3, r0
 8002bd0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd6:	4b24      	ldr	r3, [pc, #144]	; (8002c68 <xTaskResumeAll+0x1f0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d302      	bcc.n	8002be6 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002be0:	4b22      	ldr	r3, [pc, #136]	; (8002c6c <xTaskResumeAll+0x1f4>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002be6:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <xTaskResumeAll+0x1e4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f47f af6c 	bne.w	8002ac8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002bf6:	f000 fc47 	bl	8003488 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002bfa:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <xTaskResumeAll+0x1f8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d010      	beq.n	8002c28 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002c06:	f000 f859 	bl	8002cbc <xTaskIncrementTick>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002c10:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <xTaskResumeAll+0x1f4>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f1      	bne.n	8002c06 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002c22:	4b13      	ldr	r3, [pc, #76]	; (8002c70 <xTaskResumeAll+0x1f8>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002c28:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <xTaskResumeAll+0x1f4>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d009      	beq.n	8002c44 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002c30:	2301      	movs	r3, #1
 8002c32:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002c34:	4b0f      	ldr	r3, [pc, #60]	; (8002c74 <xTaskResumeAll+0x1fc>)
 8002c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	f3bf 8f4f 	dsb	sy
 8002c40:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002c44:	f001 f8c0 	bl	8003dc8 <vPortExitCritical>

    return xAlreadyYielded;
 8002c48:	69bb      	ldr	r3, [r7, #24]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3720      	adds	r7, #32
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	200001cc 	.word	0x200001cc
 8002c58:	200001a4 	.word	0x200001a4
 8002c5c:	20000164 	.word	0x20000164
 8002c60:	200001ac 	.word	0x200001ac
 8002c64:	200000d0 	.word	0x200000d0
 8002c68:	200000cc 	.word	0x200000cc
 8002c6c:	200001b8 	.word	0x200001b8
 8002c70:	200001b4 	.word	0x200001b4
 8002c74:	e000ed04 	.word	0xe000ed04

08002c78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002c7e:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <xTaskGetTickCount+0x1c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002c84:	687b      	ldr	r3, [r7, #4]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	200001a8 	.word	0x200001a8

08002c98 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c9e:	f001 f98b 	bl	8003fb8 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002ca6:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <xTaskGetTickCountFromISR+0x20>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002cac:	683b      	ldr	r3, [r7, #0]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	200001a8 	.word	0x200001a8

08002cbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08a      	sub	sp, #40	; 0x28
 8002cc0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cc6:	4b7f      	ldr	r3, [pc, #508]	; (8002ec4 <xTaskIncrementTick+0x208>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f040 80f0 	bne.w	8002eb0 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002cd0:	4b7d      	ldr	r3, [pc, #500]	; (8002ec8 <xTaskIncrementTick+0x20c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002cd8:	4a7b      	ldr	r2, [pc, #492]	; (8002ec8 <xTaskIncrementTick+0x20c>)
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d120      	bne.n	8002d26 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002ce4:	4b79      	ldr	r3, [pc, #484]	; (8002ecc <xTaskIncrementTick+0x210>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <xTaskIncrementTick+0x48>
        __asm volatile
 8002cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf2:	f383 8811 	msr	BASEPRI, r3
 8002cf6:	f3bf 8f6f 	isb	sy
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	607b      	str	r3, [r7, #4]
    }
 8002d00:	bf00      	nop
 8002d02:	e7fe      	b.n	8002d02 <xTaskIncrementTick+0x46>
 8002d04:	4b71      	ldr	r3, [pc, #452]	; (8002ecc <xTaskIncrementTick+0x210>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	61fb      	str	r3, [r7, #28]
 8002d0a:	4b71      	ldr	r3, [pc, #452]	; (8002ed0 <xTaskIncrementTick+0x214>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a6f      	ldr	r2, [pc, #444]	; (8002ecc <xTaskIncrementTick+0x210>)
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	4a6f      	ldr	r2, [pc, #444]	; (8002ed0 <xTaskIncrementTick+0x214>)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	6013      	str	r3, [r2, #0]
 8002d18:	4b6e      	ldr	r3, [pc, #440]	; (8002ed4 <xTaskIncrementTick+0x218>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	4a6d      	ldr	r2, [pc, #436]	; (8002ed4 <xTaskIncrementTick+0x218>)
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	f000 fbb1 	bl	8003488 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002d26:	4b6c      	ldr	r3, [pc, #432]	; (8002ed8 <xTaskIncrementTick+0x21c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6a3a      	ldr	r2, [r7, #32]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	f0c0 80aa 	bcc.w	8002e86 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d32:	4b66      	ldr	r3, [pc, #408]	; (8002ecc <xTaskIncrementTick+0x210>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d104      	bne.n	8002d46 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d3c:	4b66      	ldr	r3, [pc, #408]	; (8002ed8 <xTaskIncrementTick+0x21c>)
 8002d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d42:	601a      	str	r2, [r3, #0]
                    break;
 8002d44:	e09f      	b.n	8002e86 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d46:	4b61      	ldr	r3, [pc, #388]	; (8002ecc <xTaskIncrementTick+0x210>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002d56:	6a3a      	ldr	r2, [r7, #32]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d203      	bcs.n	8002d66 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002d5e:	4a5e      	ldr	r2, [pc, #376]	; (8002ed8 <xTaskIncrementTick+0x21c>)
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002d64:	e08f      	b.n	8002e86 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	613b      	str	r3, [r7, #16]
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	68d2      	ldr	r2, [r2, #12]
 8002d74:	609a      	str	r2, [r3, #8]
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	6892      	ldr	r2, [r2, #8]
 8002d7e:	605a      	str	r2, [r3, #4]
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	3304      	adds	r3, #4
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d103      	bne.n	8002d94 <xTaskIncrementTick+0xd8>
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	605a      	str	r2, [r3, #4]
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2200      	movs	r2, #0
 8002d98:	615a      	str	r2, [r3, #20]
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	1e5a      	subs	r2, r3, #1
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d01e      	beq.n	8002dea <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	6a12      	ldr	r2, [r2, #32]
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	69d2      	ldr	r2, [r2, #28]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	3318      	adds	r3, #24
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d103      	bne.n	8002dda <xTaskIncrementTick+0x11e>
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	6a1a      	ldr	r2, [r3, #32]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	629a      	str	r2, [r3, #40]	; 0x28
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	1e5a      	subs	r2, r3, #1
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f002 fddd 	bl	80059ac <SEGGER_SYSVIEW_OnTaskStartReady>
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df6:	2201      	movs	r2, #1
 8002df8:	409a      	lsls	r2, r3
 8002dfa:	4b38      	ldr	r3, [pc, #224]	; (8002edc <xTaskIncrementTick+0x220>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	4a36      	ldr	r2, [pc, #216]	; (8002edc <xTaskIncrementTick+0x220>)
 8002e02:	6013      	str	r3, [r2, #0]
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e08:	4935      	ldr	r1, [pc, #212]	; (8002ee0 <xTaskIncrementTick+0x224>)
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	3304      	adds	r3, #4
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	60da      	str	r2, [r3, #12]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	3204      	adds	r2, #4
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	1d1a      	adds	r2, r3, #4
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	609a      	str	r2, [r3, #8]
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e3e:	4613      	mov	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4a26      	ldr	r2, [pc, #152]	; (8002ee0 <xTaskIncrementTick+0x224>)
 8002e48:	441a      	add	r2, r3
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	615a      	str	r2, [r3, #20]
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e52:	4923      	ldr	r1, [pc, #140]	; (8002ee0 <xTaskIncrementTick+0x224>)
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	1c59      	adds	r1, r3, #1
 8002e62:	481f      	ldr	r0, [pc, #124]	; (8002ee0 <xTaskIncrementTick+0x224>)
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4403      	add	r3, r0
 8002e6e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e74:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <xTaskIncrementTick+0x228>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	f67f af59 	bls.w	8002d32 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002e80:	2301      	movs	r3, #1
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e84:	e755      	b.n	8002d32 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e86:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <xTaskIncrementTick+0x228>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e8c:	4914      	ldr	r1, [pc, #80]	; (8002ee0 <xTaskIncrementTick+0x224>)
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d901      	bls.n	8002ea2 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002ea2:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <xTaskIncrementTick+0x22c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
 8002eae:	e004      	b.n	8002eba <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002eb0:	4b0e      	ldr	r3, [pc, #56]	; (8002eec <xTaskIncrementTick+0x230>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	4a0d      	ldr	r2, [pc, #52]	; (8002eec <xTaskIncrementTick+0x230>)
 8002eb8:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3728      	adds	r7, #40	; 0x28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	200001cc 	.word	0x200001cc
 8002ec8:	200001a8 	.word	0x200001a8
 8002ecc:	2000015c 	.word	0x2000015c
 8002ed0:	20000160 	.word	0x20000160
 8002ed4:	200001bc 	.word	0x200001bc
 8002ed8:	200001c4 	.word	0x200001c4
 8002edc:	200001ac 	.word	0x200001ac
 8002ee0:	200000d0 	.word	0x200000d0
 8002ee4:	200000cc 	.word	0x200000cc
 8002ee8:	200001b8 	.word	0x200001b8
 8002eec:	200001b4 	.word	0x200001b4

08002ef0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ef6:	4b2d      	ldr	r3, [pc, #180]	; (8002fac <vTaskSwitchContext+0xbc>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002efe:	4b2c      	ldr	r3, [pc, #176]	; (8002fb0 <vTaskSwitchContext+0xc0>)
 8002f00:	2201      	movs	r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002f04:	e04d      	b.n	8002fa2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002f06:	4b2a      	ldr	r3, [pc, #168]	; (8002fb0 <vTaskSwitchContext+0xc0>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f0c:	4b29      	ldr	r3, [pc, #164]	; (8002fb4 <vTaskSwitchContext+0xc4>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	fab3 f383 	clz	r3, r3
 8002f18:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002f1a:	7afb      	ldrb	r3, [r7, #11]
 8002f1c:	f1c3 031f 	rsb	r3, r3, #31
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	4925      	ldr	r1, [pc, #148]	; (8002fb8 <vTaskSwitchContext+0xc8>)
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10a      	bne.n	8002f4c <vTaskSwitchContext+0x5c>
        __asm volatile
 8002f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3a:	f383 8811 	msr	BASEPRI, r3
 8002f3e:	f3bf 8f6f 	isb	sy
 8002f42:	f3bf 8f4f 	dsb	sy
 8002f46:	607b      	str	r3, [r7, #4]
    }
 8002f48:	bf00      	nop
 8002f4a:	e7fe      	b.n	8002f4a <vTaskSwitchContext+0x5a>
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4a18      	ldr	r2, [pc, #96]	; (8002fb8 <vTaskSwitchContext+0xc8>)
 8002f58:	4413      	add	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	3308      	adds	r3, #8
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d104      	bne.n	8002f7c <vTaskSwitchContext+0x8c>
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	605a      	str	r2, [r3, #4]
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	4a0e      	ldr	r2, [pc, #56]	; (8002fbc <vTaskSwitchContext+0xcc>)
 8002f84:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <vTaskSwitchContext+0xcc>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <vTaskSwitchContext+0xd0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d102      	bne.n	8002f98 <vTaskSwitchContext+0xa8>
 8002f92:	f002 fc6b 	bl	800586c <SEGGER_SYSVIEW_OnIdle>
}
 8002f96:	e004      	b.n	8002fa2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002f98:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <vTaskSwitchContext+0xcc>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f002 fcc3 	bl	8005928 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002fa2:	bf00      	nop
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	200001cc 	.word	0x200001cc
 8002fb0:	200001b8 	.word	0x200001b8
 8002fb4:	200001ac 	.word	0x200001ac
 8002fb8:	200000d0 	.word	0x200000d0
 8002fbc:	200000cc 	.word	0x200000cc
 8002fc0:	200001c8 	.word	0x200001c8

08002fc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10a      	bne.n	8002fea <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd8:	f383 8811 	msr	BASEPRI, r3
 8002fdc:	f3bf 8f6f 	isb	sy
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	60fb      	str	r3, [r7, #12]
    }
 8002fe6:	bf00      	nop
 8002fe8:	e7fe      	b.n	8002fe8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002fea:	4b07      	ldr	r3, [pc, #28]	; (8003008 <vTaskPlaceOnEventList+0x44>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	3318      	adds	r3, #24
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fe ff33 	bl	8001e5e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	6838      	ldr	r0, [r7, #0]
 8002ffc:	f000 fa7e 	bl	80034fc <prvAddCurrentTaskToDelayedList>
}
 8003000:	bf00      	nop
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	200000cc 	.word	0x200000cc

0800300c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10a      	bne.n	8003034 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	613b      	str	r3, [r7, #16]
    }
 8003030:	bf00      	nop
 8003032:	e7fe      	b.n	8003032 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	617b      	str	r3, [r7, #20]
 800303a:	4b17      	ldr	r3, [pc, #92]	; (8003098 <vTaskPlaceOnEventListRestricted+0x8c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	61da      	str	r2, [r3, #28]
 8003042:	4b15      	ldr	r3, [pc, #84]	; (8003098 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	6892      	ldr	r2, [r2, #8]
 800304a:	621a      	str	r2, [r3, #32]
 800304c:	4b12      	ldr	r3, [pc, #72]	; (8003098 <vTaskPlaceOnEventListRestricted+0x8c>)
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	3218      	adds	r2, #24
 8003056:	605a      	str	r2, [r3, #4]
 8003058:	4b0f      	ldr	r3, [pc, #60]	; (8003098 <vTaskPlaceOnEventListRestricted+0x8c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f103 0218 	add.w	r2, r3, #24
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	629a      	str	r2, [r3, #40]	; 0x28
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d002      	beq.n	8003082 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800307c:	f04f 33ff 	mov.w	r3, #4294967295
 8003080:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003082:	2024      	movs	r0, #36	; 0x24
 8003084:	f001 ff6e 	bl	8004f64 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	68b8      	ldr	r0, [r7, #8]
 800308c:	f000 fa36 	bl	80034fc <prvAddCurrentTaskToDelayedList>
    }
 8003090:	bf00      	nop
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	200000cc 	.word	0x200000cc

0800309c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08a      	sub	sp, #40	; 0x28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10a      	bne.n	80030c8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80030b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b6:	f383 8811 	msr	BASEPRI, r3
 80030ba:	f3bf 8f6f 	isb	sy
 80030be:	f3bf 8f4f 	dsb	sy
 80030c2:	60fb      	str	r3, [r7, #12]
    }
 80030c4:	bf00      	nop
 80030c6:	e7fe      	b.n	80030c6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	6a3a      	ldr	r2, [r7, #32]
 80030d4:	6a12      	ldr	r2, [r2, #32]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	6a3a      	ldr	r2, [r7, #32]
 80030de:	69d2      	ldr	r2, [r2, #28]
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	3318      	adds	r3, #24
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d103      	bne.n	80030f6 <xTaskRemoveFromEventList+0x5a>
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	6a1a      	ldr	r2, [r3, #32]
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	605a      	str	r2, [r3, #4]
 80030f6:	6a3b      	ldr	r3, [r7, #32]
 80030f8:	2200      	movs	r2, #0
 80030fa:	629a      	str	r2, [r3, #40]	; 0x28
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	1e5a      	subs	r2, r3, #1
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003106:	4b4b      	ldr	r3, [pc, #300]	; (8003234 <xTaskRemoveFromEventList+0x198>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d162      	bne.n	80031d4 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	617b      	str	r3, [r7, #20]
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	6a3a      	ldr	r2, [r7, #32]
 800311a:	68d2      	ldr	r2, [r2, #12]
 800311c:	609a      	str	r2, [r3, #8]
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	6a3a      	ldr	r2, [r7, #32]
 8003124:	6892      	ldr	r2, [r2, #8]
 8003126:	605a      	str	r2, [r3, #4]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	3304      	adds	r3, #4
 8003130:	429a      	cmp	r2, r3
 8003132:	d103      	bne.n	800313c <xTaskRemoveFromEventList+0xa0>
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	605a      	str	r2, [r3, #4]
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	2200      	movs	r2, #0
 8003140:	615a      	str	r2, [r3, #20]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	1e5a      	subs	r2, r3, #1
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	4618      	mov	r0, r3
 8003150:	f002 fc2c 	bl	80059ac <SEGGER_SYSVIEW_OnTaskStartReady>
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	2201      	movs	r2, #1
 800315a:	409a      	lsls	r2, r3
 800315c:	4b36      	ldr	r3, [pc, #216]	; (8003238 <xTaskRemoveFromEventList+0x19c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4313      	orrs	r3, r2
 8003162:	4a35      	ldr	r2, [pc, #212]	; (8003238 <xTaskRemoveFromEventList+0x19c>)
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800316a:	4934      	ldr	r1, [pc, #208]	; (800323c <xTaskRemoveFromEventList+0x1a0>)
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	3304      	adds	r3, #4
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	609a      	str	r2, [r3, #8]
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	60da      	str	r2, [r3, #12]
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	6a3a      	ldr	r2, [r7, #32]
 8003190:	3204      	adds	r2, #4
 8003192:	605a      	str	r2, [r3, #4]
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	1d1a      	adds	r2, r3, #4
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4a24      	ldr	r2, [pc, #144]	; (800323c <xTaskRemoveFromEventList+0x1a0>)
 80031aa:	441a      	add	r2, r3
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	615a      	str	r2, [r3, #20]
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b4:	4921      	ldr	r1, [pc, #132]	; (800323c <xTaskRemoveFromEventList+0x1a0>)
 80031b6:	4613      	mov	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	1c59      	adds	r1, r3, #1
 80031c4:	481d      	ldr	r0, [pc, #116]	; (800323c <xTaskRemoveFromEventList+0x1a0>)
 80031c6:	4613      	mov	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4403      	add	r3, r0
 80031d0:	6019      	str	r1, [r3, #0]
 80031d2:	e01b      	b.n	800320c <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80031d4:	4b1a      	ldr	r3, [pc, #104]	; (8003240 <xTaskRemoveFromEventList+0x1a4>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	61bb      	str	r3, [r7, #24]
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	61da      	str	r2, [r3, #28]
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	621a      	str	r2, [r3, #32]
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	6a3a      	ldr	r2, [r7, #32]
 80031ee:	3218      	adds	r2, #24
 80031f0:	605a      	str	r2, [r3, #4]
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	f103 0218 	add.w	r2, r3, #24
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	4a10      	ldr	r2, [pc, #64]	; (8003240 <xTaskRemoveFromEventList+0x1a4>)
 8003200:	629a      	str	r2, [r3, #40]	; 0x28
 8003202:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <xTaskRemoveFromEventList+0x1a4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3301      	adds	r3, #1
 8003208:	4a0d      	ldr	r2, [pc, #52]	; (8003240 <xTaskRemoveFromEventList+0x1a4>)
 800320a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003210:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <xTaskRemoveFromEventList+0x1a8>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	429a      	cmp	r2, r3
 8003218:	d905      	bls.n	8003226 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800321a:	2301      	movs	r3, #1
 800321c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <xTaskRemoveFromEventList+0x1ac>)
 8003220:	2201      	movs	r2, #1
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	e001      	b.n	800322a <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8003226:	2300      	movs	r3, #0
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800322c:	4618      	mov	r0, r3
 800322e:	3728      	adds	r7, #40	; 0x28
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	200001cc 	.word	0x200001cc
 8003238:	200001ac 	.word	0x200001ac
 800323c:	200000d0 	.word	0x200000d0
 8003240:	20000164 	.word	0x20000164
 8003244:	200000cc 	.word	0x200000cc
 8003248:	200001b8 	.word	0x200001b8

0800324c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003254:	4b06      	ldr	r3, [pc, #24]	; (8003270 <vTaskInternalSetTimeOutState+0x24>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800325c:	4b05      	ldr	r3, [pc, #20]	; (8003274 <vTaskInternalSetTimeOutState+0x28>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	605a      	str	r2, [r3, #4]
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	200001bc 	.word	0x200001bc
 8003274:	200001a8 	.word	0x200001a8

08003278 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b088      	sub	sp, #32
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10a      	bne.n	800329e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	613b      	str	r3, [r7, #16]
    }
 800329a:	bf00      	nop
 800329c:	e7fe      	b.n	800329c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10a      	bne.n	80032ba <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80032a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a8:	f383 8811 	msr	BASEPRI, r3
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	60fb      	str	r3, [r7, #12]
    }
 80032b6:	bf00      	nop
 80032b8:	e7fe      	b.n	80032b8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80032ba:	f000 fd55 	bl	8003d68 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80032be:	4b1f      	ldr	r3, [pc, #124]	; (800333c <xTaskCheckForTimeOut+0xc4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d6:	d102      	bne.n	80032de <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80032d8:	2300      	movs	r3, #0
 80032da:	61fb      	str	r3, [r7, #28]
 80032dc:	e026      	b.n	800332c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	4b17      	ldr	r3, [pc, #92]	; (8003340 <xTaskCheckForTimeOut+0xc8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d00a      	beq.n	8003300 <xTaskCheckForTimeOut+0x88>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d305      	bcc.n	8003300 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80032f4:	2301      	movs	r3, #1
 80032f6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	e015      	b.n	800332c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	429a      	cmp	r2, r3
 8003308:	d20b      	bcs.n	8003322 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	1ad2      	subs	r2, r2, r3
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff ff98 	bl	800324c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800331c:	2300      	movs	r3, #0
 800331e:	61fb      	str	r3, [r7, #28]
 8003320:	e004      	b.n	800332c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003328:	2301      	movs	r3, #1
 800332a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800332c:	f000 fd4c 	bl	8003dc8 <vPortExitCritical>

    return xReturn;
 8003330:	69fb      	ldr	r3, [r7, #28]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3720      	adds	r7, #32
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	200001a8 	.word	0x200001a8
 8003340:	200001bc 	.word	0x200001bc

08003344 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003348:	4b03      	ldr	r3, [pc, #12]	; (8003358 <vTaskMissedYield+0x14>)
 800334a:	2201      	movs	r2, #1
 800334c:	601a      	str	r2, [r3, #0]
}
 800334e:	bf00      	nop
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	200001b8 	.word	0x200001b8

0800335c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003364:	f000 f852 	bl	800340c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <prvIdleTask+0x28>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d9f9      	bls.n	8003364 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003370:	4b05      	ldr	r3, [pc, #20]	; (8003388 <prvIdleTask+0x2c>)
 8003372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	f3bf 8f4f 	dsb	sy
 800337c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003380:	e7f0      	b.n	8003364 <prvIdleTask+0x8>
 8003382:	bf00      	nop
 8003384:	200000d0 	.word	0x200000d0
 8003388:	e000ed04 	.word	0xe000ed04

0800338c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003392:	2300      	movs	r3, #0
 8003394:	607b      	str	r3, [r7, #4]
 8003396:	e00c      	b.n	80033b2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4a12      	ldr	r2, [pc, #72]	; (80033ec <prvInitialiseTaskLists+0x60>)
 80033a4:	4413      	add	r3, r2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fe fd2c 	bl	8001e04 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3301      	adds	r3, #1
 80033b0:	607b      	str	r3, [r7, #4]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d9ef      	bls.n	8003398 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80033b8:	480d      	ldr	r0, [pc, #52]	; (80033f0 <prvInitialiseTaskLists+0x64>)
 80033ba:	f7fe fd23 	bl	8001e04 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80033be:	480d      	ldr	r0, [pc, #52]	; (80033f4 <prvInitialiseTaskLists+0x68>)
 80033c0:	f7fe fd20 	bl	8001e04 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80033c4:	480c      	ldr	r0, [pc, #48]	; (80033f8 <prvInitialiseTaskLists+0x6c>)
 80033c6:	f7fe fd1d 	bl	8001e04 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80033ca:	480c      	ldr	r0, [pc, #48]	; (80033fc <prvInitialiseTaskLists+0x70>)
 80033cc:	f7fe fd1a 	bl	8001e04 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80033d0:	480b      	ldr	r0, [pc, #44]	; (8003400 <prvInitialiseTaskLists+0x74>)
 80033d2:	f7fe fd17 	bl	8001e04 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80033d6:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <prvInitialiseTaskLists+0x78>)
 80033d8:	4a05      	ldr	r2, [pc, #20]	; (80033f0 <prvInitialiseTaskLists+0x64>)
 80033da:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80033dc:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <prvInitialiseTaskLists+0x7c>)
 80033de:	4a05      	ldr	r2, [pc, #20]	; (80033f4 <prvInitialiseTaskLists+0x68>)
 80033e0:	601a      	str	r2, [r3, #0]
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	200000d0 	.word	0x200000d0
 80033f0:	20000134 	.word	0x20000134
 80033f4:	20000148 	.word	0x20000148
 80033f8:	20000164 	.word	0x20000164
 80033fc:	20000178 	.word	0x20000178
 8003400:	20000190 	.word	0x20000190
 8003404:	2000015c 	.word	0x2000015c
 8003408:	20000160 	.word	0x20000160

0800340c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003412:	e019      	b.n	8003448 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003414:	f000 fca8 	bl	8003d68 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003418:	4b10      	ldr	r3, [pc, #64]	; (800345c <prvCheckTasksWaitingTermination+0x50>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3304      	adds	r3, #4
 8003424:	4618      	mov	r0, r3
 8003426:	f7fe fd53 	bl	8001ed0 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800342a:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <prvCheckTasksWaitingTermination+0x54>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	3b01      	subs	r3, #1
 8003430:	4a0b      	ldr	r2, [pc, #44]	; (8003460 <prvCheckTasksWaitingTermination+0x54>)
 8003432:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <prvCheckTasksWaitingTermination+0x58>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3b01      	subs	r3, #1
 800343a:	4a0a      	ldr	r2, [pc, #40]	; (8003464 <prvCheckTasksWaitingTermination+0x58>)
 800343c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800343e:	f000 fcc3 	bl	8003dc8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f810 	bl	8003468 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003448:	4b06      	ldr	r3, [pc, #24]	; (8003464 <prvCheckTasksWaitingTermination+0x58>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e1      	bne.n	8003414 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003450:	bf00      	nop
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20000178 	.word	0x20000178
 8003460:	200001a4 	.word	0x200001a4
 8003464:	2000018c 	.word	0x2000018c

08003468 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003474:	4618      	mov	r0, r3
 8003476:	f000 fe99 	bl	80041ac <vPortFree>
            vPortFree( pxTCB );
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 fe96 	bl	80041ac <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003480:	bf00      	nop
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800348c:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <prvResetNextTaskUnblockTime+0x30>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d104      	bne.n	80034a0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <prvResetNextTaskUnblockTime+0x34>)
 8003498:	f04f 32ff 	mov.w	r2, #4294967295
 800349c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800349e:	e005      	b.n	80034ac <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80034a0:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <prvResetNextTaskUnblockTime+0x30>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a04      	ldr	r2, [pc, #16]	; (80034bc <prvResetNextTaskUnblockTime+0x34>)
 80034aa:	6013      	str	r3, [r2, #0]
}
 80034ac:	bf00      	nop
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	2000015c 	.word	0x2000015c
 80034bc:	200001c4 	.word	0x200001c4

080034c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80034c6:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <xTaskGetSchedulerState+0x34>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d102      	bne.n	80034d4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80034ce:	2301      	movs	r3, #1
 80034d0:	607b      	str	r3, [r7, #4]
 80034d2:	e008      	b.n	80034e6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034d4:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <xTaskGetSchedulerState+0x38>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d102      	bne.n	80034e2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80034dc:	2302      	movs	r3, #2
 80034de:	607b      	str	r3, [r7, #4]
 80034e0:	e001      	b.n	80034e6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80034e2:	2300      	movs	r3, #0
 80034e4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80034e6:	687b      	ldr	r3, [r7, #4]
    }
 80034e8:	4618      	mov	r0, r3
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	200001b0 	.word	0x200001b0
 80034f8:	200001cc 	.word	0x200001cc

080034fc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003506:	4b36      	ldr	r3, [pc, #216]	; (80035e0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800350c:	4b35      	ldr	r3, [pc, #212]	; (80035e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3304      	adds	r3, #4
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe fcdc 	bl	8001ed0 <uxListRemove>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10b      	bne.n	8003536 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800351e:	4b31      	ldr	r3, [pc, #196]	; (80035e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003524:	2201      	movs	r2, #1
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43da      	mvns	r2, r3
 800352c:	4b2e      	ldr	r3, [pc, #184]	; (80035e8 <prvAddCurrentTaskToDelayedList+0xec>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4013      	ands	r3, r2
 8003532:	4a2d      	ldr	r2, [pc, #180]	; (80035e8 <prvAddCurrentTaskToDelayedList+0xec>)
 8003534:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353c:	d124      	bne.n	8003588 <prvAddCurrentTaskToDelayedList+0x8c>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d021      	beq.n	8003588 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003544:	4b29      	ldr	r3, [pc, #164]	; (80035ec <prvAddCurrentTaskToDelayedList+0xf0>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	4b26      	ldr	r3, [pc, #152]	; (80035e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	609a      	str	r2, [r3, #8]
 8003552:	4b24      	ldr	r3, [pc, #144]	; (80035e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	6892      	ldr	r2, [r2, #8]
 800355a:	60da      	str	r2, [r3, #12]
 800355c:	4b21      	ldr	r3, [pc, #132]	; (80035e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	3204      	adds	r2, #4
 8003566:	605a      	str	r2, [r3, #4]
 8003568:	4b1e      	ldr	r3, [pc, #120]	; (80035e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	1d1a      	adds	r2, r3, #4
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	609a      	str	r2, [r3, #8]
 8003572:	4b1c      	ldr	r3, [pc, #112]	; (80035e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a1d      	ldr	r2, [pc, #116]	; (80035ec <prvAddCurrentTaskToDelayedList+0xf0>)
 8003578:	615a      	str	r2, [r3, #20]
 800357a:	4b1c      	ldr	r3, [pc, #112]	; (80035ec <prvAddCurrentTaskToDelayedList+0xf0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	3301      	adds	r3, #1
 8003580:	4a1a      	ldr	r2, [pc, #104]	; (80035ec <prvAddCurrentTaskToDelayedList+0xf0>)
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003586:	e026      	b.n	80035d6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4413      	add	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003590:	4b14      	ldr	r3, [pc, #80]	; (80035e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	429a      	cmp	r2, r3
 800359e:	d209      	bcs.n	80035b4 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035a0:	4b13      	ldr	r3, [pc, #76]	; (80035f0 <prvAddCurrentTaskToDelayedList+0xf4>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3304      	adds	r3, #4
 80035aa:	4619      	mov	r1, r3
 80035ac:	4610      	mov	r0, r2
 80035ae:	f7fe fc56 	bl	8001e5e <vListInsert>
}
 80035b2:	e010      	b.n	80035d6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035b4:	4b0f      	ldr	r3, [pc, #60]	; (80035f4 <prvAddCurrentTaskToDelayedList+0xf8>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	3304      	adds	r3, #4
 80035be:	4619      	mov	r1, r3
 80035c0:	4610      	mov	r0, r2
 80035c2:	f7fe fc4c 	bl	8001e5e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80035c6:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <prvAddCurrentTaskToDelayedList+0xfc>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d202      	bcs.n	80035d6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80035d0:	4a09      	ldr	r2, [pc, #36]	; (80035f8 <prvAddCurrentTaskToDelayedList+0xfc>)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6013      	str	r3, [r2, #0]
}
 80035d6:	bf00      	nop
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	200001a8 	.word	0x200001a8
 80035e4:	200000cc 	.word	0x200000cc
 80035e8:	200001ac 	.word	0x200001ac
 80035ec:	20000190 	.word	0x20000190
 80035f0:	20000160 	.word	0x20000160
 80035f4:	2000015c 	.word	0x2000015c
 80035f8:	200001c4 	.word	0x200001c4

080035fc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003602:	2300      	movs	r3, #0
 8003604:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003606:	f000 fa47 	bl	8003a98 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800360a:	4b11      	ldr	r3, [pc, #68]	; (8003650 <xTimerCreateTimerTask+0x54>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00b      	beq.n	800362a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003612:	4b10      	ldr	r3, [pc, #64]	; (8003654 <xTimerCreateTimerTask+0x58>)
 8003614:	9301      	str	r3, [sp, #4]
 8003616:	2302      	movs	r3, #2
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	2300      	movs	r3, #0
 800361c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003620:	490d      	ldr	r1, [pc, #52]	; (8003658 <xTimerCreateTimerTask+0x5c>)
 8003622:	480e      	ldr	r0, [pc, #56]	; (800365c <xTimerCreateTimerTask+0x60>)
 8003624:	f7fe ffae 	bl	8002584 <xTaskCreate>
 8003628:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10a      	bne.n	8003646 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	603b      	str	r3, [r7, #0]
    }
 8003642:	bf00      	nop
 8003644:	e7fe      	b.n	8003644 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003646:	687b      	ldr	r3, [r7, #4]
    }
 8003648:	4618      	mov	r0, r3
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20000200 	.word	0x20000200
 8003654:	20000204 	.word	0x20000204
 8003658:	08005da0 	.word	0x08005da0
 800365c:	08003705 	.word	0x08003705

08003660 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800366c:	e008      	b.n	8003680 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	4413      	add	r3, r2
 8003676:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	699a      	ldr	r2, [r3, #24]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	18d1      	adds	r1, r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 f8dd 	bl	800384c <prvInsertTimerInActiveList>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1ea      	bne.n	800366e <prvReloadTimer+0xe>
        }
    }
 8003698:	bf00      	nop
 800369a:	bf00      	nop
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
	...

080036a4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036ae:	4b14      	ldr	r3, [pc, #80]	; (8003700 <prvProcessExpiredTimer+0x5c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	3304      	adds	r3, #4
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fe fc07 	bl	8001ed0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f7ff ffc3 	bl	8003660 <prvReloadTimer>
 80036da:	e008      	b.n	80036ee <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036e2:	f023 0301 	bic.w	r3, r3, #1
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	4798      	blx	r3
    }
 80036f6:	bf00      	nop
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	200001f8 	.word	0x200001f8

08003704 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800370c:	f107 0308 	add.w	r3, r7, #8
 8003710:	4618      	mov	r0, r3
 8003712:	f000 f857 	bl	80037c4 <prvGetNextExpireTime>
 8003716:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4619      	mov	r1, r3
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 f803 	bl	8003728 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003722:	f000 f8d5 	bl	80038d0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003726:	e7f1      	b.n	800370c <prvTimerTask+0x8>

08003728 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003732:	f7ff f993 	bl	8002a5c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003736:	f107 0308 	add.w	r3, r7, #8
 800373a:	4618      	mov	r0, r3
 800373c:	f000 f866 	bl	800380c <prvSampleTimeNow>
 8003740:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d130      	bne.n	80037aa <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10a      	bne.n	8003764 <prvProcessTimerOrBlockTask+0x3c>
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	429a      	cmp	r2, r3
 8003754:	d806      	bhi.n	8003764 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003756:	f7ff f98f 	bl	8002a78 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800375a:	68f9      	ldr	r1, [r7, #12]
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff ffa1 	bl	80036a4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003762:	e024      	b.n	80037ae <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d008      	beq.n	800377c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800376a:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <prvProcessTimerOrBlockTask+0x90>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <prvProcessTimerOrBlockTask+0x50>
 8003774:	2301      	movs	r3, #1
 8003776:	e000      	b.n	800377a <prvProcessTimerOrBlockTask+0x52>
 8003778:	2300      	movs	r3, #0
 800377a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800377c:	4b0f      	ldr	r3, [pc, #60]	; (80037bc <prvProcessTimerOrBlockTask+0x94>)
 800377e:	6818      	ldr	r0, [r3, #0]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	4619      	mov	r1, r3
 800378a:	f7fe fec7 	bl	800251c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800378e:	f7ff f973 	bl	8002a78 <xTaskResumeAll>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10a      	bne.n	80037ae <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003798:	4b09      	ldr	r3, [pc, #36]	; (80037c0 <prvProcessTimerOrBlockTask+0x98>)
 800379a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	f3bf 8f4f 	dsb	sy
 80037a4:	f3bf 8f6f 	isb	sy
    }
 80037a8:	e001      	b.n	80037ae <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80037aa:	f7ff f965 	bl	8002a78 <xTaskResumeAll>
    }
 80037ae:	bf00      	nop
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	200001fc 	.word	0x200001fc
 80037bc:	20000200 	.word	0x20000200
 80037c0:	e000ed04 	.word	0xe000ed04

080037c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80037cc:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <prvGetNextExpireTime+0x44>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <prvGetNextExpireTime+0x16>
 80037d6:	2201      	movs	r2, #1
 80037d8:	e000      	b.n	80037dc <prvGetNextExpireTime+0x18>
 80037da:	2200      	movs	r2, #0
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d105      	bne.n	80037f4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037e8:	4b07      	ldr	r3, [pc, #28]	; (8003808 <prvGetNextExpireTime+0x44>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	e001      	b.n	80037f8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80037f8:	68fb      	ldr	r3, [r7, #12]
    }
 80037fa:	4618      	mov	r0, r3
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	200001f8 	.word	0x200001f8

0800380c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003814:	f7ff fa30 	bl	8002c78 <xTaskGetTickCount>
 8003818:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800381a:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <prvSampleTimeNow+0x3c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	429a      	cmp	r2, r3
 8003822:	d205      	bcs.n	8003830 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003824:	f000 f912 	bl	8003a4c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	e002      	b.n	8003836 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003836:	4a04      	ldr	r2, [pc, #16]	; (8003848 <prvSampleTimeNow+0x3c>)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800383c:	68fb      	ldr	r3, [r7, #12]
    }
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	20000208 	.word	0x20000208

0800384c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
 8003858:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	429a      	cmp	r2, r3
 8003870:	d812      	bhi.n	8003898 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	1ad2      	subs	r2, r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	429a      	cmp	r2, r3
 800387e:	d302      	bcc.n	8003886 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003880:	2301      	movs	r3, #1
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	e01b      	b.n	80038be <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003886:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <prvInsertTimerInActiveList+0x7c>)
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	3304      	adds	r3, #4
 800388e:	4619      	mov	r1, r3
 8003890:	4610      	mov	r0, r2
 8003892:	f7fe fae4 	bl	8001e5e <vListInsert>
 8003896:	e012      	b.n	80038be <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d206      	bcs.n	80038ae <prvInsertTimerInActiveList+0x62>
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d302      	bcc.n	80038ae <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80038a8:	2301      	movs	r3, #1
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	e007      	b.n	80038be <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038ae:	4b07      	ldr	r3, [pc, #28]	; (80038cc <prvInsertTimerInActiveList+0x80>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	3304      	adds	r3, #4
 80038b6:	4619      	mov	r1, r3
 80038b8:	4610      	mov	r0, r2
 80038ba:	f7fe fad0 	bl	8001e5e <vListInsert>
            }
        }

        return xProcessTimerNow;
 80038be:	697b      	ldr	r3, [r7, #20]
    }
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	200001fc 	.word	0x200001fc
 80038cc:	200001f8 	.word	0x200001f8

080038d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80038d6:	e0a6      	b.n	8003a26 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f2c0 80a2 	blt.w	8003a24 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d004      	beq.n	80038f6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	3304      	adds	r3, #4
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7fe faed 	bl	8001ed0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038f6:	1d3b      	adds	r3, r7, #4
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff ff87 	bl	800380c <prvSampleTimeNow>
 80038fe:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	3b01      	subs	r3, #1
 8003904:	2b08      	cmp	r3, #8
 8003906:	f200 808e 	bhi.w	8003a26 <prvProcessReceivedCommands+0x156>
 800390a:	a201      	add	r2, pc, #4	; (adr r2, 8003910 <prvProcessReceivedCommands+0x40>)
 800390c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003910:	08003935 	.word	0x08003935
 8003914:	08003935 	.word	0x08003935
 8003918:	0800399d 	.word	0x0800399d
 800391c:	080039b1 	.word	0x080039b1
 8003920:	080039fb 	.word	0x080039fb
 8003924:	08003935 	.word	0x08003935
 8003928:	08003935 	.word	0x08003935
 800392c:	0800399d 	.word	0x0800399d
 8003930:	080039b1 	.word	0x080039b1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800393a:	f043 0301 	orr.w	r3, r3, #1
 800393e:	b2da      	uxtb	r2, r3
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	18d1      	adds	r1, r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	69f8      	ldr	r0, [r7, #28]
 8003954:	f7ff ff7a 	bl	800384c <prvInsertTimerInActiveList>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d063      	beq.n	8003a26 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d009      	beq.n	8003980 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	4413      	add	r3, r2
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4619      	mov	r1, r3
 8003978:	69f8      	ldr	r0, [r7, #28]
 800397a:	f7ff fe71 	bl	8003660 <prvReloadTimer>
 800397e:	e008      	b.n	8003992 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003986:	f023 0301 	bic.w	r3, r3, #1
 800398a:	b2da      	uxtb	r2, r3
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	69f8      	ldr	r0, [r7, #28]
 8003998:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800399a:	e044      	b.n	8003a26 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039a2:	f023 0301 	bic.w	r3, r3, #1
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80039ae:	e03a      	b.n	8003a26 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039b6:	f043 0301 	orr.w	r3, r3, #1
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10a      	bne.n	80039e6 <prvProcessReceivedCommands+0x116>
        __asm volatile
 80039d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	617b      	str	r3, [r7, #20]
    }
 80039e2:	bf00      	nop
 80039e4:	e7fe      	b.n	80039e4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	699a      	ldr	r2, [r3, #24]
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	18d1      	adds	r1, r2, r3
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	69f8      	ldr	r0, [r7, #28]
 80039f4:	f7ff ff2a 	bl	800384c <prvInsertTimerInActiveList>
                        break;
 80039f8:	e015      	b.n	8003a26 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d103      	bne.n	8003a10 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003a08:	69f8      	ldr	r0, [r7, #28]
 8003a0a:	f000 fbcf 	bl	80041ac <vPortFree>
 8003a0e:	e00a      	b.n	8003a26 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a16:	f023 0301 	bic.w	r3, r3, #1
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003a22:	e000      	b.n	8003a26 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003a24:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a26:	4b08      	ldr	r3, [pc, #32]	; (8003a48 <prvProcessReceivedCommands+0x178>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f107 0108 	add.w	r1, r7, #8
 8003a2e:	2200      	movs	r2, #0
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fe fb7f 	bl	8002134 <xQueueReceive>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f47f af4d 	bne.w	80038d8 <prvProcessReceivedCommands+0x8>
        }
    }
 8003a3e:	bf00      	nop
 8003a40:	bf00      	nop
 8003a42:	3720      	adds	r7, #32
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20000200 	.word	0x20000200

08003a4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a52:	e009      	b.n	8003a68 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a54:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <prvSwitchTimerLists+0x44>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003a5e:	f04f 31ff 	mov.w	r1, #4294967295
 8003a62:	6838      	ldr	r0, [r7, #0]
 8003a64:	f7ff fe1e 	bl	80036a4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a68:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <prvSwitchTimerLists+0x44>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f0      	bne.n	8003a54 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003a72:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <prvSwitchTimerLists+0x44>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003a78:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <prvSwitchTimerLists+0x48>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a04      	ldr	r2, [pc, #16]	; (8003a90 <prvSwitchTimerLists+0x44>)
 8003a7e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003a80:	4a04      	ldr	r2, [pc, #16]	; (8003a94 <prvSwitchTimerLists+0x48>)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6013      	str	r3, [r2, #0]
    }
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	200001f8 	.word	0x200001f8
 8003a94:	200001fc 	.word	0x200001fc

08003a98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003a9c:	f000 f964 	bl	8003d68 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003aa0:	4b12      	ldr	r3, [pc, #72]	; (8003aec <prvCheckForValidListAndQueue+0x54>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d11d      	bne.n	8003ae4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003aa8:	4811      	ldr	r0, [pc, #68]	; (8003af0 <prvCheckForValidListAndQueue+0x58>)
 8003aaa:	f7fe f9ab 	bl	8001e04 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003aae:	4811      	ldr	r0, [pc, #68]	; (8003af4 <prvCheckForValidListAndQueue+0x5c>)
 8003ab0:	f7fe f9a8 	bl	8001e04 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003ab4:	4b10      	ldr	r3, [pc, #64]	; (8003af8 <prvCheckForValidListAndQueue+0x60>)
 8003ab6:	4a0e      	ldr	r2, [pc, #56]	; (8003af0 <prvCheckForValidListAndQueue+0x58>)
 8003ab8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003aba:	4b10      	ldr	r3, [pc, #64]	; (8003afc <prvCheckForValidListAndQueue+0x64>)
 8003abc:	4a0d      	ldr	r2, [pc, #52]	; (8003af4 <prvCheckForValidListAndQueue+0x5c>)
 8003abe:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	210c      	movs	r1, #12
 8003ac4:	200a      	movs	r0, #10
 8003ac6:	f7fe fabd 	bl	8002044 <xQueueGenericCreate>
 8003aca:	4603      	mov	r3, r0
 8003acc:	4a07      	ldr	r2, [pc, #28]	; (8003aec <prvCheckForValidListAndQueue+0x54>)
 8003ace:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003ad0:	4b06      	ldr	r3, [pc, #24]	; (8003aec <prvCheckForValidListAndQueue+0x54>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003ad8:	4b04      	ldr	r3, [pc, #16]	; (8003aec <prvCheckForValidListAndQueue+0x54>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4908      	ldr	r1, [pc, #32]	; (8003b00 <prvCheckForValidListAndQueue+0x68>)
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fe fcc6 	bl	8002470 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003ae4:	f000 f970 	bl	8003dc8 <vPortExitCritical>
    }
 8003ae8:	bf00      	nop
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	20000200 	.word	0x20000200
 8003af0:	200001d0 	.word	0x200001d0
 8003af4:	200001e4 	.word	0x200001e4
 8003af8:	200001f8 	.word	0x200001f8
 8003afc:	200001fc 	.word	0x200001fc
 8003b00:	08005da8 	.word	0x08005da8

08003b04 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	3b04      	subs	r3, #4
 8003b14:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b1c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	3b04      	subs	r3, #4
 8003b22:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f023 0201 	bic.w	r2, r3, #1
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	3b04      	subs	r3, #4
 8003b32:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003b34:	4a0c      	ldr	r2, [pc, #48]	; (8003b68 <pxPortInitialiseStack+0x64>)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	3b14      	subs	r3, #20
 8003b3e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	3b04      	subs	r3, #4
 8003b4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f06f 0202 	mvn.w	r2, #2
 8003b52:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	3b20      	subs	r3, #32
 8003b58:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	08003b6d 	.word	0x08003b6d

08003b6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003b72:	2300      	movs	r3, #0
 8003b74:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003b76:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <prvTaskExitError+0x54>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7e:	d00a      	beq.n	8003b96 <prvTaskExitError+0x2a>
        __asm volatile
 8003b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b84:	f383 8811 	msr	BASEPRI, r3
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	60fb      	str	r3, [r7, #12]
    }
 8003b92:	bf00      	nop
 8003b94:	e7fe      	b.n	8003b94 <prvTaskExitError+0x28>
        __asm volatile
 8003b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	60bb      	str	r3, [r7, #8]
    }
 8003ba8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003baa:	bf00      	nop
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0fc      	beq.n	8003bac <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003bb2:	bf00      	nop
 8003bb4:	bf00      	nop
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	20000010 	.word	0x20000010
	...

08003bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003bd0:	4b07      	ldr	r3, [pc, #28]	; (8003bf0 <pxCurrentTCBConst2>)
 8003bd2:	6819      	ldr	r1, [r3, #0]
 8003bd4:	6808      	ldr	r0, [r1, #0]
 8003bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bda:	f380 8809 	msr	PSP, r0
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f04f 0000 	mov.w	r0, #0
 8003be6:	f380 8811 	msr	BASEPRI, r0
 8003bea:	4770      	bx	lr
 8003bec:	f3af 8000 	nop.w

08003bf0 <pxCurrentTCBConst2>:
 8003bf0:	200000cc 	.word	0x200000cc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003bf4:	bf00      	nop
 8003bf6:	bf00      	nop

08003bf8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003bf8:	4808      	ldr	r0, [pc, #32]	; (8003c1c <prvPortStartFirstTask+0x24>)
 8003bfa:	6800      	ldr	r0, [r0, #0]
 8003bfc:	6800      	ldr	r0, [r0, #0]
 8003bfe:	f380 8808 	msr	MSP, r0
 8003c02:	f04f 0000 	mov.w	r0, #0
 8003c06:	f380 8814 	msr	CONTROL, r0
 8003c0a:	b662      	cpsie	i
 8003c0c:	b661      	cpsie	f
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	f3bf 8f6f 	isb	sy
 8003c16:	df00      	svc	0
 8003c18:	bf00      	nop
 8003c1a:	0000      	.short	0x0000
 8003c1c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003c20:	bf00      	nop
 8003c22:	bf00      	nop

08003c24 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003c2a:	4b46      	ldr	r3, [pc, #280]	; (8003d44 <xPortStartScheduler+0x120>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a46      	ldr	r2, [pc, #280]	; (8003d48 <xPortStartScheduler+0x124>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d10a      	bne.n	8003c4a <xPortStartScheduler+0x26>
        __asm volatile
 8003c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c38:	f383 8811 	msr	BASEPRI, r3
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	613b      	str	r3, [r7, #16]
    }
 8003c46:	bf00      	nop
 8003c48:	e7fe      	b.n	8003c48 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003c4a:	4b3e      	ldr	r3, [pc, #248]	; (8003d44 <xPortStartScheduler+0x120>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a3f      	ldr	r2, [pc, #252]	; (8003d4c <xPortStartScheduler+0x128>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d10a      	bne.n	8003c6a <xPortStartScheduler+0x46>
        __asm volatile
 8003c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c58:	f383 8811 	msr	BASEPRI, r3
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	60fb      	str	r3, [r7, #12]
    }
 8003c66:	bf00      	nop
 8003c68:	e7fe      	b.n	8003c68 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c6a:	4b39      	ldr	r3, [pc, #228]	; (8003d50 <xPortStartScheduler+0x12c>)
 8003c6c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	22ff      	movs	r2, #255	; 0xff
 8003c7a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c84:	78fb      	ldrb	r3, [r7, #3]
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	4b31      	ldr	r3, [pc, #196]	; (8003d54 <xPortStartScheduler+0x130>)
 8003c90:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c92:	4b31      	ldr	r3, [pc, #196]	; (8003d58 <xPortStartScheduler+0x134>)
 8003c94:	2207      	movs	r2, #7
 8003c96:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c98:	e009      	b.n	8003cae <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8003c9a:	4b2f      	ldr	r3, [pc, #188]	; (8003d58 <xPortStartScheduler+0x134>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	4a2d      	ldr	r2, [pc, #180]	; (8003d58 <xPortStartScheduler+0x134>)
 8003ca2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cae:	78fb      	ldrb	r3, [r7, #3]
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb6:	2b80      	cmp	r3, #128	; 0x80
 8003cb8:	d0ef      	beq.n	8003c9a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003cba:	4b27      	ldr	r3, [pc, #156]	; (8003d58 <xPortStartScheduler+0x134>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f1c3 0307 	rsb	r3, r3, #7
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d00a      	beq.n	8003cdc <xPortStartScheduler+0xb8>
        __asm volatile
 8003cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cca:	f383 8811 	msr	BASEPRI, r3
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	60bb      	str	r3, [r7, #8]
    }
 8003cd8:	bf00      	nop
 8003cda:	e7fe      	b.n	8003cda <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003cdc:	4b1e      	ldr	r3, [pc, #120]	; (8003d58 <xPortStartScheduler+0x134>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	021b      	lsls	r3, r3, #8
 8003ce2:	4a1d      	ldr	r2, [pc, #116]	; (8003d58 <xPortStartScheduler+0x134>)
 8003ce4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003ce6:	4b1c      	ldr	r3, [pc, #112]	; (8003d58 <xPortStartScheduler+0x134>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cee:	4a1a      	ldr	r2, [pc, #104]	; (8003d58 <xPortStartScheduler+0x134>)
 8003cf0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003cfa:	4b18      	ldr	r3, [pc, #96]	; (8003d5c <xPortStartScheduler+0x138>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a17      	ldr	r2, [pc, #92]	; (8003d5c <xPortStartScheduler+0x138>)
 8003d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d04:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003d06:	4b15      	ldr	r3, [pc, #84]	; (8003d5c <xPortStartScheduler+0x138>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a14      	ldr	r2, [pc, #80]	; (8003d5c <xPortStartScheduler+0x138>)
 8003d0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003d10:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003d12:	f000 f8db 	bl	8003ecc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003d16:	4b12      	ldr	r3, [pc, #72]	; (8003d60 <xPortStartScheduler+0x13c>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003d1c:	f000 f8fa 	bl	8003f14 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003d20:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <xPortStartScheduler+0x140>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a0f      	ldr	r2, [pc, #60]	; (8003d64 <xPortStartScheduler+0x140>)
 8003d26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003d2a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003d2c:	f7ff ff64 	bl	8003bf8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003d30:	f7ff f8de 	bl	8002ef0 <vTaskSwitchContext>
    prvTaskExitError();
 8003d34:	f7ff ff1a 	bl	8003b6c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3718      	adds	r7, #24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	e000ed00 	.word	0xe000ed00
 8003d48:	410fc271 	.word	0x410fc271
 8003d4c:	410fc270 	.word	0x410fc270
 8003d50:	e000e400 	.word	0xe000e400
 8003d54:	2000020c 	.word	0x2000020c
 8003d58:	20000210 	.word	0x20000210
 8003d5c:	e000ed20 	.word	0xe000ed20
 8003d60:	20000010 	.word	0x20000010
 8003d64:	e000ef34 	.word	0xe000ef34

08003d68 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
        __asm volatile
 8003d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	607b      	str	r3, [r7, #4]
    }
 8003d80:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003d82:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <vPortEnterCritical+0x58>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	3301      	adds	r3, #1
 8003d88:	4a0d      	ldr	r2, [pc, #52]	; (8003dc0 <vPortEnterCritical+0x58>)
 8003d8a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <vPortEnterCritical+0x58>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d10f      	bne.n	8003db4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d94:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <vPortEnterCritical+0x5c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <vPortEnterCritical+0x4c>
        __asm volatile
 8003d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	603b      	str	r3, [r7, #0]
    }
 8003db0:	bf00      	nop
 8003db2:	e7fe      	b.n	8003db2 <vPortEnterCritical+0x4a>
    }
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	20000010 	.word	0x20000010
 8003dc4:	e000ed04 	.word	0xe000ed04

08003dc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003dce:	4b12      	ldr	r3, [pc, #72]	; (8003e18 <vPortExitCritical+0x50>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10a      	bne.n	8003dec <vPortExitCritical+0x24>
        __asm volatile
 8003dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dda:	f383 8811 	msr	BASEPRI, r3
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	f3bf 8f4f 	dsb	sy
 8003de6:	607b      	str	r3, [r7, #4]
    }
 8003de8:	bf00      	nop
 8003dea:	e7fe      	b.n	8003dea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003dec:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <vPortExitCritical+0x50>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3b01      	subs	r3, #1
 8003df2:	4a09      	ldr	r2, [pc, #36]	; (8003e18 <vPortExitCritical+0x50>)
 8003df4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003df6:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <vPortExitCritical+0x50>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d105      	bne.n	8003e0a <vPortExitCritical+0x42>
 8003dfe:	2300      	movs	r3, #0
 8003e00:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003e08:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	20000010 	.word	0x20000010
 8003e1c:	00000000 	.word	0x00000000

08003e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003e20:	f3ef 8009 	mrs	r0, PSP
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	4b15      	ldr	r3, [pc, #84]	; (8003e80 <pxCurrentTCBConst>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	f01e 0f10 	tst.w	lr, #16
 8003e30:	bf08      	it	eq
 8003e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e3a:	6010      	str	r0, [r2, #0]
 8003e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003e40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003e44:	f380 8811 	msr	BASEPRI, r0
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f7ff f84e 	bl	8002ef0 <vTaskSwitchContext>
 8003e54:	f04f 0000 	mov.w	r0, #0
 8003e58:	f380 8811 	msr	BASEPRI, r0
 8003e5c:	bc09      	pop	{r0, r3}
 8003e5e:	6819      	ldr	r1, [r3, #0]
 8003e60:	6808      	ldr	r0, [r1, #0]
 8003e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e66:	f01e 0f10 	tst.w	lr, #16
 8003e6a:	bf08      	it	eq
 8003e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003e70:	f380 8809 	msr	PSP, r0
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	f3af 8000 	nop.w

08003e80 <pxCurrentTCBConst>:
 8003e80:	200000cc 	.word	0x200000cc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003e84:	bf00      	nop
 8003e86:	bf00      	nop

08003e88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
        __asm volatile
 8003e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e92:	f383 8811 	msr	BASEPRI, r3
 8003e96:	f3bf 8f6f 	isb	sy
 8003e9a:	f3bf 8f4f 	dsb	sy
 8003e9e:	607b      	str	r3, [r7, #4]
    }
 8003ea0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003ea2:	f7fe ff0b 	bl	8002cbc <xTaskIncrementTick>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003eac:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <SysTick_Handler+0x40>)
 8003eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	f383 8811 	msr	BASEPRI, r3
    }
 8003ebe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003ec0:	bf00      	nop
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	e000ed04 	.word	0xe000ed04

08003ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <vPortSetupTimerInterrupt+0x34>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <vPortSetupTimerInterrupt+0x38>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003edc:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <vPortSetupTimerInterrupt+0x3c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a0a      	ldr	r2, [pc, #40]	; (8003f0c <vPortSetupTimerInterrupt+0x40>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	099b      	lsrs	r3, r3, #6
 8003ee8:	4a09      	ldr	r2, [pc, #36]	; (8003f10 <vPortSetupTimerInterrupt+0x44>)
 8003eea:	3b01      	subs	r3, #1
 8003eec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003eee:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <vPortSetupTimerInterrupt+0x34>)
 8003ef0:	2207      	movs	r2, #7
 8003ef2:	601a      	str	r2, [r3, #0]
}
 8003ef4:	bf00      	nop
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	e000e010 	.word	0xe000e010
 8003f04:	e000e018 	.word	0xe000e018
 8003f08:	20000000 	.word	0x20000000
 8003f0c:	10624dd3 	.word	0x10624dd3
 8003f10:	e000e014 	.word	0xe000e014

08003f14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003f14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003f24 <vPortEnableVFP+0x10>
 8003f18:	6801      	ldr	r1, [r0, #0]
 8003f1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003f1e:	6001      	str	r1, [r0, #0]
 8003f20:	4770      	bx	lr
 8003f22:	0000      	.short	0x0000
 8003f24:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003f28:	bf00      	nop
 8003f2a:	bf00      	nop

08003f2c <vSetVarulMaxPRIGROUPValue>:
/*-----------------------------------------------------------*/
/////////
#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue( void )
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f32:	4b1f      	ldr	r3, [pc, #124]	; (8003fb0 <vSetVarulMaxPRIGROUPValue+0x84>)
 8003f34:	60fb      	str	r3, [r7, #12]
	volatile uint8_t ucMaxPriorityValue;
	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	22ff      	movs	r2, #255	; 0xff
 8003f3a:	701a      	strb	r2, [r3, #0]
	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	71fb      	strb	r3, [r7, #7]
	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f44:	4b1b      	ldr	r3, [pc, #108]	; (8003fb4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8003f46:	2207      	movs	r2, #7
 8003f48:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f4a:	e009      	b.n	8003f60 <vSetVarulMaxPRIGROUPValue+0x34>
	{
		ulMaxPRIGROUPValue--;
 8003f4c:	4b19      	ldr	r3, [pc, #100]	; (8003fb4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3b01      	subs	r3, #1
 8003f52:	4a18      	ldr	r2, [pc, #96]	; (8003fb4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8003f54:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	71fb      	strb	r3, [r7, #7]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f60:	79fb      	ldrb	r3, [r7, #7]
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f68:	2b80      	cmp	r3, #128	; 0x80
 8003f6a:	d0ef      	beq.n	8003f4c <vSetVarulMaxPRIGROUPValue+0x20>
#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f6c:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f1c3 0307 	rsb	r3, r3, #7
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d00a      	beq.n	8003f8e <vSetVarulMaxPRIGROUPValue+0x62>
        __asm volatile
 8003f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7c:	f383 8811 	msr	BASEPRI, r3
 8003f80:	f3bf 8f6f 	isb	sy
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	60bb      	str	r3, [r7, #8]
    }
 8003f8a:	bf00      	nop
 8003f8c:	e7fe      	b.n	8003f8c <vSetVarulMaxPRIGROUPValue+0x60>
	}
#endif
	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f8e:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	021b      	lsls	r3, r3, #8
 8003f94:	4a07      	ldr	r2, [pc, #28]	; (8003fb4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8003f96:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f98:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fa0:	4a04      	ldr	r2, [pc, #16]	; (8003fb4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8003fa2:	6013      	str	r3, [r2, #0]
}
 8003fa4:	bf00      	nop
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	e000e400 	.word	0xe000e400
 8003fb4:	20000210 	.word	0x20000210

08003fb8 <vPortValidateInterruptPriority>:

////////
#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003fbe:	f3ef 8305 	mrs	r3, IPSR
 8003fc2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b0f      	cmp	r3, #15
 8003fc8:	d914      	bls.n	8003ff4 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003fca:	4a17      	ldr	r2, [pc, #92]	; (8004028 <vPortValidateInterruptPriority+0x70>)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4413      	add	r3, r2
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003fd4:	4b15      	ldr	r3, [pc, #84]	; (800402c <vPortValidateInterruptPriority+0x74>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	7afa      	ldrb	r2, [r7, #11]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d20a      	bcs.n	8003ff4 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	607b      	str	r3, [r7, #4]
    }
 8003ff0:	bf00      	nop
 8003ff2:	e7fe      	b.n	8003ff2 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003ff4:	4b0e      	ldr	r3, [pc, #56]	; (8004030 <vPortValidateInterruptPriority+0x78>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ffc:	4b0d      	ldr	r3, [pc, #52]	; (8004034 <vPortValidateInterruptPriority+0x7c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d90a      	bls.n	800401a <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004008:	f383 8811 	msr	BASEPRI, r3
 800400c:	f3bf 8f6f 	isb	sy
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	603b      	str	r3, [r7, #0]
    }
 8004016:	bf00      	nop
 8004018:	e7fe      	b.n	8004018 <vPortValidateInterruptPriority+0x60>
    }
 800401a:	bf00      	nop
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	e000e3f0 	.word	0xe000e3f0
 800402c:	2000020c 	.word	0x2000020c
 8004030:	e000ed0c 	.word	0xe000ed0c
 8004034:	20000210 	.word	0x20000210

08004038 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b08a      	sub	sp, #40	; 0x28
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004040:	2300      	movs	r3, #0
 8004042:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004044:	f7fe fd0a 	bl	8002a5c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004048:	4b53      	ldr	r3, [pc, #332]	; (8004198 <pvPortMalloc+0x160>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004050:	f000 f908 	bl	8004264 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d012      	beq.n	8004080 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800405a:	2208      	movs	r2, #8
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	3308      	adds	r3, #8
 8004066:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	43db      	mvns	r3, r3
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	429a      	cmp	r2, r3
 8004070:	d804      	bhi.n	800407c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	4413      	add	r3, r2
 8004078:	607b      	str	r3, [r7, #4]
 800407a:	e001      	b.n	8004080 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800407c:	2300      	movs	r3, #0
 800407e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	db70      	blt.n	8004168 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d06d      	beq.n	8004168 <pvPortMalloc+0x130>
 800408c:	4b43      	ldr	r3, [pc, #268]	; (800419c <pvPortMalloc+0x164>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	429a      	cmp	r2, r3
 8004094:	d868      	bhi.n	8004168 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004096:	4b42      	ldr	r3, [pc, #264]	; (80041a0 <pvPortMalloc+0x168>)
 8004098:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800409a:	4b41      	ldr	r3, [pc, #260]	; (80041a0 <pvPortMalloc+0x168>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040a0:	e004      	b.n	80040ac <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d903      	bls.n	80040be <pvPortMalloc+0x86>
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1f1      	bne.n	80040a2 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80040be:	4b36      	ldr	r3, [pc, #216]	; (8004198 <pvPortMalloc+0x160>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d04f      	beq.n	8004168 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80040c8:	6a3b      	ldr	r3, [r7, #32]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2208      	movs	r2, #8
 80040ce:	4413      	add	r3, r2
 80040d0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	1ad2      	subs	r2, r2, r3
 80040e2:	2308      	movs	r3, #8
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d91f      	bls.n	800412a <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80040ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4413      	add	r3, r2
 80040f0:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <pvPortMalloc+0xda>
        __asm volatile
 80040fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004100:	f383 8811 	msr	BASEPRI, r3
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	613b      	str	r3, [r7, #16]
    }
 800410e:	bf00      	nop
 8004110:	e7fe      	b.n	8004110 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	1ad2      	subs	r2, r2, r3
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004124:	6978      	ldr	r0, [r7, #20]
 8004126:	f000 f8f9 	bl	800431c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800412a:	4b1c      	ldr	r3, [pc, #112]	; (800419c <pvPortMalloc+0x164>)
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	4a19      	ldr	r2, [pc, #100]	; (800419c <pvPortMalloc+0x164>)
 8004136:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004138:	4b18      	ldr	r3, [pc, #96]	; (800419c <pvPortMalloc+0x164>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	4b19      	ldr	r3, [pc, #100]	; (80041a4 <pvPortMalloc+0x16c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d203      	bcs.n	800414c <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004144:	4b15      	ldr	r3, [pc, #84]	; (800419c <pvPortMalloc+0x164>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a16      	ldr	r2, [pc, #88]	; (80041a4 <pvPortMalloc+0x16c>)
 800414a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004156:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	2200      	movs	r2, #0
 800415c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800415e:	4b12      	ldr	r3, [pc, #72]	; (80041a8 <pvPortMalloc+0x170>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3301      	adds	r3, #1
 8004164:	4a10      	ldr	r2, [pc, #64]	; (80041a8 <pvPortMalloc+0x170>)
 8004166:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004168:	f7fe fc86 	bl	8002a78 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <pvPortMalloc+0x154>
        __asm volatile
 8004176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	60fb      	str	r3, [r7, #12]
    }
 8004188:	bf00      	nop
 800418a:	e7fe      	b.n	800418a <pvPortMalloc+0x152>
    return pvReturn;
 800418c:	69fb      	ldr	r3, [r7, #28]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3728      	adds	r7, #40	; 0x28
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	2000ca1c 	.word	0x2000ca1c
 800419c:	2000ca20 	.word	0x2000ca20
 80041a0:	2000ca14 	.word	0x2000ca14
 80041a4:	2000ca24 	.word	0x2000ca24
 80041a8:	2000ca28 	.word	0x2000ca28

080041ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d049      	beq.n	8004252 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80041be:	2308      	movs	r3, #8
 80041c0:	425b      	negs	r3, r3
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4413      	add	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	db0a      	blt.n	80041ea <vPortFree+0x3e>
        __asm volatile
 80041d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	60fb      	str	r3, [r7, #12]
    }
 80041e6:	bf00      	nop
 80041e8:	e7fe      	b.n	80041e8 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00a      	beq.n	8004208 <vPortFree+0x5c>
        __asm volatile
 80041f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	60bb      	str	r3, [r7, #8]
    }
 8004204:	bf00      	nop
 8004206:	e7fe      	b.n	8004206 <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	0fdb      	lsrs	r3, r3, #31
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d01c      	beq.n	8004252 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d118      	bne.n	8004252 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800422c:	f7fe fc16 	bl	8002a5c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	4b09      	ldr	r3, [pc, #36]	; (800425c <vPortFree+0xb0>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4413      	add	r3, r2
 800423a:	4a08      	ldr	r2, [pc, #32]	; (800425c <vPortFree+0xb0>)
 800423c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800423e:	6938      	ldr	r0, [r7, #16]
 8004240:	f000 f86c 	bl	800431c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004244:	4b06      	ldr	r3, [pc, #24]	; (8004260 <vPortFree+0xb4>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3301      	adds	r3, #1
 800424a:	4a05      	ldr	r2, [pc, #20]	; (8004260 <vPortFree+0xb4>)
 800424c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800424e:	f7fe fc13 	bl	8002a78 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004252:	bf00      	nop
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	2000ca20 	.word	0x2000ca20
 8004260:	2000ca2c 	.word	0x2000ca2c

08004264 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800426a:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 800426e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004270:	4b25      	ldr	r3, [pc, #148]	; (8004308 <prvHeapInit+0xa4>)
 8004272:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00c      	beq.n	8004298 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3307      	adds	r3, #7
 8004282:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0307 	bic.w	r3, r3, #7
 800428a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	4a1d      	ldr	r2, [pc, #116]	; (8004308 <prvHeapInit+0xa4>)
 8004294:	4413      	add	r3, r2
 8004296:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800429c:	4a1b      	ldr	r2, [pc, #108]	; (800430c <prvHeapInit+0xa8>)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80042a2:	4b1a      	ldr	r3, [pc, #104]	; (800430c <prvHeapInit+0xa8>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	4413      	add	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80042b0:	2208      	movs	r2, #8
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	1a9b      	subs	r3, r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0307 	bic.w	r3, r3, #7
 80042be:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4a13      	ldr	r2, [pc, #76]	; (8004310 <prvHeapInit+0xac>)
 80042c4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80042c6:	4b12      	ldr	r3, [pc, #72]	; (8004310 <prvHeapInit+0xac>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2200      	movs	r2, #0
 80042cc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80042ce:	4b10      	ldr	r3, [pc, #64]	; (8004310 <prvHeapInit+0xac>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	1ad2      	subs	r2, r2, r3
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80042e4:	4b0a      	ldr	r3, [pc, #40]	; (8004310 <prvHeapInit+0xac>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	4a08      	ldr	r2, [pc, #32]	; (8004314 <prvHeapInit+0xb0>)
 80042f2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	4a07      	ldr	r2, [pc, #28]	; (8004318 <prvHeapInit+0xb4>)
 80042fa:	6013      	str	r3, [r2, #0]
}
 80042fc:	bf00      	nop
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	20000214 	.word	0x20000214
 800430c:	2000ca14 	.word	0x2000ca14
 8004310:	2000ca1c 	.word	0x2000ca1c
 8004314:	2000ca24 	.word	0x2000ca24
 8004318:	2000ca20 	.word	0x2000ca20

0800431c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004324:	4b28      	ldr	r3, [pc, #160]	; (80043c8 <prvInsertBlockIntoFreeList+0xac>)
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	e002      	b.n	8004330 <prvInsertBlockIntoFreeList+0x14>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	429a      	cmp	r2, r3
 8004338:	d8f7      	bhi.n	800432a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	4413      	add	r3, r2
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	429a      	cmp	r2, r3
 800434a:	d108      	bne.n	800435e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	441a      	add	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	441a      	add	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d118      	bne.n	80043a4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	4b15      	ldr	r3, [pc, #84]	; (80043cc <prvInsertBlockIntoFreeList+0xb0>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d00d      	beq.n	800439a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	441a      	add	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	e008      	b.n	80043ac <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800439a:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <prvInsertBlockIntoFreeList+0xb0>)
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	e003      	b.n	80043ac <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d002      	beq.n	80043ba <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80043ba:	bf00      	nop
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	2000ca14 	.word	0x2000ca14
 80043cc:	2000ca1c 	.word	0x2000ca1c

080043d0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80043d4:	4803      	ldr	r0, [pc, #12]	; (80043e4 <_cbSendSystemDesc+0x14>)
 80043d6:	f001 f9f3 	bl	80057c0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80043da:	4803      	ldr	r0, [pc, #12]	; (80043e8 <_cbSendSystemDesc+0x18>)
 80043dc:	f001 f9f0 	bl	80057c0 <SEGGER_SYSVIEW_SendSysDesc>
}
 80043e0:	bf00      	nop
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	08005db0 	.word	0x08005db0
 80043e8:	08005de4 	.word	0x08005de4

080043ec <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80043f0:	4b06      	ldr	r3, [pc, #24]	; (800440c <SEGGER_SYSVIEW_Conf+0x20>)
 80043f2:	6818      	ldr	r0, [r3, #0]
 80043f4:	4b05      	ldr	r3, [pc, #20]	; (800440c <SEGGER_SYSVIEW_Conf+0x20>)
 80043f6:	6819      	ldr	r1, [r3, #0]
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <SEGGER_SYSVIEW_Conf+0x24>)
 80043fa:	4a06      	ldr	r2, [pc, #24]	; (8004414 <SEGGER_SYSVIEW_Conf+0x28>)
 80043fc:	f000 fd5e 	bl	8004ebc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004400:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004404:	f000 fd9e 	bl	8004f44 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004408:	bf00      	nop
 800440a:	bd80      	pop	{r7, pc}
 800440c:	20000000 	.word	0x20000000
 8004410:	080043d1 	.word	0x080043d1
 8004414:	08005e80 	.word	0x08005e80

08004418 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800441a:	b085      	sub	sp, #20
 800441c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800441e:	2300      	movs	r3, #0
 8004420:	607b      	str	r3, [r7, #4]
 8004422:	e033      	b.n	800448c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004424:	491e      	ldr	r1, [pc, #120]	; (80044a0 <_cbSendTaskList+0x88>)
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	4613      	mov	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	6818      	ldr	r0, [r3, #0]
 8004434:	491a      	ldr	r1, [pc, #104]	; (80044a0 <_cbSendTaskList+0x88>)
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	4613      	mov	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	3304      	adds	r3, #4
 8004444:	6819      	ldr	r1, [r3, #0]
 8004446:	4c16      	ldr	r4, [pc, #88]	; (80044a0 <_cbSendTaskList+0x88>)
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	4613      	mov	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4423      	add	r3, r4
 8004454:	3308      	adds	r3, #8
 8004456:	681c      	ldr	r4, [r3, #0]
 8004458:	4d11      	ldr	r5, [pc, #68]	; (80044a0 <_cbSendTaskList+0x88>)
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	4613      	mov	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	442b      	add	r3, r5
 8004466:	330c      	adds	r3, #12
 8004468:	681d      	ldr	r5, [r3, #0]
 800446a:	4e0d      	ldr	r6, [pc, #52]	; (80044a0 <_cbSendTaskList+0x88>)
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	4613      	mov	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4413      	add	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4433      	add	r3, r6
 8004478:	3310      	adds	r3, #16
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	462b      	mov	r3, r5
 8004480:	4622      	mov	r2, r4
 8004482:	f000 f8bd 	bl	8004600 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3301      	adds	r3, #1
 800448a:	607b      	str	r3, [r7, #4]
 800448c:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <_cbSendTaskList+0x8c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	429a      	cmp	r2, r3
 8004494:	d3c6      	bcc.n	8004424 <_cbSendTaskList+0xc>
  }
}
 8004496:	bf00      	nop
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044a0:	2000ca30 	.word	0x2000ca30
 80044a4:	2000cad0 	.word	0x2000cad0

080044a8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80044a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044ac:	b082      	sub	sp, #8
 80044ae:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80044b0:	f7fe fbf2 	bl	8002c98 <xTaskGetTickCountFromISR>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2200      	movs	r2, #0
 80044b8:	469a      	mov	sl, r3
 80044ba:	4693      	mov	fp, r2
 80044bc:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80044c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044c4:	4602      	mov	r2, r0
 80044c6:	460b      	mov	r3, r1
 80044c8:	f04f 0a00 	mov.w	sl, #0
 80044cc:	f04f 0b00 	mov.w	fp, #0
 80044d0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80044d4:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80044d8:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80044dc:	4652      	mov	r2, sl
 80044de:	465b      	mov	r3, fp
 80044e0:	1a14      	subs	r4, r2, r0
 80044e2:	eb63 0501 	sbc.w	r5, r3, r1
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	00ab      	lsls	r3, r5, #2
 80044f0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80044f4:	00a2      	lsls	r2, r4, #2
 80044f6:	4614      	mov	r4, r2
 80044f8:	461d      	mov	r5, r3
 80044fa:	eb14 0800 	adds.w	r8, r4, r0
 80044fe:	eb45 0901 	adc.w	r9, r5, r1
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	f04f 0300 	mov.w	r3, #0
 800450a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800450e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004512:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004516:	4690      	mov	r8, r2
 8004518:	4699      	mov	r9, r3
 800451a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800451e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004522:	4610      	mov	r0, r2
 8004524:	4619      	mov	r1, r3
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004530 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af02      	add	r7, sp, #8
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800453e:	2205      	movs	r2, #5
 8004540:	492b      	ldr	r1, [pc, #172]	; (80045f0 <SYSVIEW_AddTask+0xc0>)
 8004542:	68b8      	ldr	r0, [r7, #8]
 8004544:	f001 fbea 	bl	8005d1c <memcmp>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d04b      	beq.n	80045e6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800454e:	4b29      	ldr	r3, [pc, #164]	; (80045f4 <SYSVIEW_AddTask+0xc4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b07      	cmp	r3, #7
 8004554:	d903      	bls.n	800455e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004556:	4828      	ldr	r0, [pc, #160]	; (80045f8 <SYSVIEW_AddTask+0xc8>)
 8004558:	f001 fb60 	bl	8005c1c <SEGGER_SYSVIEW_Warn>
    return;
 800455c:	e044      	b.n	80045e8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800455e:	4b25      	ldr	r3, [pc, #148]	; (80045f4 <SYSVIEW_AddTask+0xc4>)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4926      	ldr	r1, [pc, #152]	; (80045fc <SYSVIEW_AddTask+0xcc>)
 8004564:	4613      	mov	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4413      	add	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	440b      	add	r3, r1
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004572:	4b20      	ldr	r3, [pc, #128]	; (80045f4 <SYSVIEW_AddTask+0xc4>)
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	4921      	ldr	r1, [pc, #132]	; (80045fc <SYSVIEW_AddTask+0xcc>)
 8004578:	4613      	mov	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	3304      	adds	r3, #4
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004588:	4b1a      	ldr	r3, [pc, #104]	; (80045f4 <SYSVIEW_AddTask+0xc4>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	491b      	ldr	r1, [pc, #108]	; (80045fc <SYSVIEW_AddTask+0xcc>)
 800458e:	4613      	mov	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	440b      	add	r3, r1
 8004598:	3308      	adds	r3, #8
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800459e:	4b15      	ldr	r3, [pc, #84]	; (80045f4 <SYSVIEW_AddTask+0xc4>)
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	4916      	ldr	r1, [pc, #88]	; (80045fc <SYSVIEW_AddTask+0xcc>)
 80045a4:	4613      	mov	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	440b      	add	r3, r1
 80045ae:	330c      	adds	r3, #12
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80045b4:	4b0f      	ldr	r3, [pc, #60]	; (80045f4 <SYSVIEW_AddTask+0xc4>)
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	4910      	ldr	r1, [pc, #64]	; (80045fc <SYSVIEW_AddTask+0xcc>)
 80045ba:	4613      	mov	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	440b      	add	r3, r1
 80045c4:	3310      	adds	r3, #16
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80045ca:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <SYSVIEW_AddTask+0xc4>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	3301      	adds	r3, #1
 80045d0:	4a08      	ldr	r2, [pc, #32]	; (80045f4 <SYSVIEW_AddTask+0xc4>)
 80045d2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	68b9      	ldr	r1, [r7, #8]
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 f80e 	bl	8004600 <SYSVIEW_SendTaskInfo>
 80045e4:	e000      	b.n	80045e8 <SYSVIEW_AddTask+0xb8>
    return;
 80045e6:	bf00      	nop

}
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	08005df4 	.word	0x08005df4
 80045f4:	2000cad0 	.word	0x2000cad0
 80045f8:	08005dfc 	.word	0x08005dfc
 80045fc:	2000ca30 	.word	0x2000ca30

08004600 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004600:	b580      	push	{r7, lr}
 8004602:	b08a      	sub	sp, #40	; 0x28
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
 800460c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800460e:	f107 0314 	add.w	r3, r7, #20
 8004612:	2214      	movs	r2, #20
 8004614:	2100      	movs	r1, #0
 8004616:	4618      	mov	r0, r3
 8004618:	f001 fb9e 	bl	8005d58 <memset>
  TaskInfo.TaskID     = TaskID;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800462c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004630:	f107 0314 	add.w	r3, r7, #20
 8004634:	4618      	mov	r0, r3
 8004636:	f000 ffcb 	bl	80055d0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800463a:	bf00      	nop
 800463c:	3728      	adds	r7, #40	; 0x28
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800464a:	4b26      	ldr	r3, [pc, #152]	; (80046e4 <_DoInit+0xa0>)
 800464c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800464e:	22a8      	movs	r2, #168	; 0xa8
 8004650:	2100      	movs	r1, #0
 8004652:	6838      	ldr	r0, [r7, #0]
 8004654:	f001 fb80 	bl	8005d58 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2203      	movs	r2, #3
 800465c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2203      	movs	r2, #3
 8004662:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	4a20      	ldr	r2, [pc, #128]	; (80046e8 <_DoInit+0xa4>)
 8004668:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	4a1f      	ldr	r2, [pc, #124]	; (80046ec <_DoInit+0xa8>)
 800466e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004676:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2200      	movs	r2, #0
 800467c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2200      	movs	r2, #0
 8004682:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	2200      	movs	r2, #0
 8004688:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	4a16      	ldr	r2, [pc, #88]	; (80046e8 <_DoInit+0xa4>)
 800468e:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	4a17      	ldr	r2, [pc, #92]	; (80046f0 <_DoInit+0xac>)
 8004694:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2210      	movs	r2, #16
 800469a:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	2200      	movs	r2, #0
 80046a0:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2200      	movs	r2, #0
 80046a6:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2200      	movs	r2, #0
 80046ac:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80046ae:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80046b2:	2300      	movs	r3, #0
 80046b4:	607b      	str	r3, [r7, #4]
 80046b6:	e00c      	b.n	80046d2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f1c3 030f 	rsb	r3, r3, #15
 80046be:	4a0d      	ldr	r2, [pc, #52]	; (80046f4 <_DoInit+0xb0>)
 80046c0:	5cd1      	ldrb	r1, [r2, r3]
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4413      	add	r3, r2
 80046c8:	460a      	mov	r2, r1
 80046ca:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3301      	adds	r3, #1
 80046d0:	607b      	str	r3, [r7, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b0f      	cmp	r3, #15
 80046d6:	d9ef      	bls.n	80046b8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80046d8:	f3bf 8f5f 	dmb	sy
}
 80046dc:	bf00      	nop
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	2000cad4 	.word	0x2000cad4
 80046e8:	08005e4c 	.word	0x08005e4c
 80046ec:	2000cb7c 	.word	0x2000cb7c
 80046f0:	2000cf7c 	.word	0x2000cf7c
 80046f4:	08005e88 	.word	0x08005e88

080046f8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08c      	sub	sp, #48	; 0x30
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004704:	4b3e      	ldr	r3, [pc, #248]	; (8004800 <SEGGER_RTT_ReadNoLock+0x108>)
 8004706:	623b      	str	r3, [r7, #32]
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <SEGGER_RTT_ReadNoLock+0x1e>
 8004712:	f7ff ff97 	bl	8004644 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4613      	mov	r3, r2
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	4413      	add	r3, r2
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	3360      	adds	r3, #96	; 0x60
 8004722:	4a37      	ldr	r2, [pc, #220]	; (8004800 <SEGGER_RTT_ReadNoLock+0x108>)
 8004724:	4413      	add	r3, r2
 8004726:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004738:	2300      	movs	r3, #0
 800473a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800473c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	429a      	cmp	r2, r3
 8004742:	d92b      	bls.n	800479c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4293      	cmp	r3, r2
 8004754:	bf28      	it	cs
 8004756:	4613      	movcs	r3, r2
 8004758:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004760:	4413      	add	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	6939      	ldr	r1, [r7, #16]
 8004768:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800476a:	f001 fae7 	bl	8005d3c <memcpy>
    NumBytesRead += NumBytesRem;
 800476e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	4413      	add	r3, r2
 8004774:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	4413      	add	r3, r2
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	4413      	add	r3, r2
 800478c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004794:	429a      	cmp	r2, r3
 8004796:	d101      	bne.n	800479c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004798:	2300      	movs	r3, #0
 800479a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4293      	cmp	r3, r2
 80047aa:	bf28      	it	cs
 80047ac:	4613      	movcs	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d019      	beq.n	80047ea <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047bc:	4413      	add	r3, r2
 80047be:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	6939      	ldr	r1, [r7, #16]
 80047c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047c6:	f001 fab9 	bl	8005d3c <memcpy>
    NumBytesRead += NumBytesRem;
 80047ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	4413      	add	r3, r2
 80047d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80047d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	4413      	add	r3, r2
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80047e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	4413      	add	r3, r2
 80047e8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80047ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047f4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80047f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3730      	adds	r7, #48	; 0x30
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	2000cad4 	.word	0x2000cad4

08004804 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004804:	b580      	push	{r7, lr}
 8004806:	b088      	sub	sp, #32
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
 8004810:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004812:	4b3d      	ldr	r3, [pc, #244]	; (8004908 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004814:	61bb      	str	r3, [r7, #24]
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004820:	f7ff ff10 	bl	8004644 <_DoInit>
  SEGGER_RTT_LOCK();
 8004824:	f3ef 8311 	mrs	r3, BASEPRI
 8004828:	f04f 0120 	mov.w	r1, #32
 800482c:	f381 8811 	msr	BASEPRI, r1
 8004830:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004832:	4b35      	ldr	r3, [pc, #212]	; (8004908 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004834:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004836:	2300      	movs	r3, #0
 8004838:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800483a:	6939      	ldr	r1, [r7, #16]
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	4613      	mov	r3, r2
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	4413      	add	r3, r2
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	440b      	add	r3, r1
 800484a:	3304      	adds	r3, #4
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d008      	beq.n	8004864 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	3301      	adds	r3, #1
 8004856:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	429a      	cmp	r2, r3
 8004860:	dbeb      	blt.n	800483a <SEGGER_RTT_AllocUpBuffer+0x36>
 8004862:	e000      	b.n	8004866 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004864:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	69fa      	ldr	r2, [r7, #28]
 800486c:	429a      	cmp	r2, r3
 800486e:	da3f      	bge.n	80048f0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004870:	6939      	ldr	r1, [r7, #16]
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	4613      	mov	r3, r2
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	4413      	add	r3, r2
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	440b      	add	r3, r1
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004884:	6939      	ldr	r1, [r7, #16]
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	4613      	mov	r3, r2
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	4413      	add	r3, r2
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	440b      	add	r3, r1
 8004894:	3304      	adds	r3, #4
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800489a:	6939      	ldr	r1, [r7, #16]
 800489c:	69fa      	ldr	r2, [r7, #28]
 800489e:	4613      	mov	r3, r2
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	4413      	add	r3, r2
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	440b      	add	r3, r1
 80048a8:	3320      	adds	r3, #32
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80048ae:	6939      	ldr	r1, [r7, #16]
 80048b0:	69fa      	ldr	r2, [r7, #28]
 80048b2:	4613      	mov	r3, r2
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	4413      	add	r3, r2
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	440b      	add	r3, r1
 80048bc:	3328      	adds	r3, #40	; 0x28
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80048c2:	6939      	ldr	r1, [r7, #16]
 80048c4:	69fa      	ldr	r2, [r7, #28]
 80048c6:	4613      	mov	r3, r2
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	4413      	add	r3, r2
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	440b      	add	r3, r1
 80048d0:	3324      	adds	r3, #36	; 0x24
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80048d6:	6939      	ldr	r1, [r7, #16]
 80048d8:	69fa      	ldr	r2, [r7, #28]
 80048da:	4613      	mov	r3, r2
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	4413      	add	r3, r2
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	440b      	add	r3, r1
 80048e4:	332c      	adds	r3, #44	; 0x2c
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80048ea:	f3bf 8f5f 	dmb	sy
 80048ee:	e002      	b.n	80048f6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80048f0:	f04f 33ff 	mov.w	r3, #4294967295
 80048f4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80048fc:	69fb      	ldr	r3, [r7, #28]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3720      	adds	r7, #32
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	2000cad4 	.word	0x2000cad4

0800490c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800490c:	b580      	push	{r7, lr}
 800490e:	b08a      	sub	sp, #40	; 0x28
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
 8004918:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800491a:	4b21      	ldr	r3, [pc, #132]	; (80049a0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800491c:	623b      	str	r3, [r7, #32]
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004928:	f7ff fe8c 	bl	8004644 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800492c:	4b1c      	ldr	r3, [pc, #112]	; (80049a0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800492e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b02      	cmp	r3, #2
 8004934:	d82c      	bhi.n	8004990 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004936:	f3ef 8311 	mrs	r3, BASEPRI
 800493a:	f04f 0120 	mov.w	r1, #32
 800493e:	f381 8811 	msr	BASEPRI, r1
 8004942:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4613      	mov	r3, r2
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	4413      	add	r3, r2
 800494c:	00db      	lsls	r3, r3, #3
 800494e:	3360      	adds	r3, #96	; 0x60
 8004950:	69fa      	ldr	r2, [r7, #28]
 8004952:	4413      	add	r3, r2
 8004954:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00e      	beq.n	800497a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2200      	movs	r2, #0
 8004972:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	2200      	movs	r2, #0
 8004978:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800497e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004980:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800498a:	2300      	movs	r3, #0
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
 800498e:	e002      	b.n	8004996 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004990:	f04f 33ff 	mov.w	r3, #4294967295
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004998:	4618      	mov	r0, r3
 800499a:	3728      	adds	r7, #40	; 0x28
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	2000cad4 	.word	0x2000cad4

080049a4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	60fa      	str	r2, [r7, #12]
 80049ba:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b80      	cmp	r3, #128	; 0x80
 80049c0:	d90a      	bls.n	80049d8 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80049c2:	2380      	movs	r3, #128	; 0x80
 80049c4:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80049c6:	e007      	b.n	80049d8 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	1c53      	adds	r3, r2, #1
 80049cc:	60bb      	str	r3, [r7, #8]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	1c59      	adds	r1, r3, #1
 80049d2:	60f9      	str	r1, [r7, #12]
 80049d4:	7812      	ldrb	r2, [r2, #0]
 80049d6:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	1e5a      	subs	r2, r3, #1
 80049dc:	607a      	str	r2, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <_EncodeStr+0x46>
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1ee      	bne.n	80049c8 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80049f6:	68fb      	ldr	r3, [r7, #12]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	371c      	adds	r7, #28
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3307      	adds	r3, #7
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004a22:	4b35      	ldr	r3, [pc, #212]	; (8004af8 <_HandleIncomingPacket+0xdc>)
 8004a24:	7e1b      	ldrb	r3, [r3, #24]
 8004a26:	4618      	mov	r0, r3
 8004a28:	1cfb      	adds	r3, r7, #3
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	f7ff fe63 	bl	80046f8 <SEGGER_RTT_ReadNoLock>
 8004a32:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d052      	beq.n	8004ae0 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	2b80      	cmp	r3, #128	; 0x80
 8004a3e:	d031      	beq.n	8004aa4 <_HandleIncomingPacket+0x88>
 8004a40:	2b80      	cmp	r3, #128	; 0x80
 8004a42:	dc40      	bgt.n	8004ac6 <_HandleIncomingPacket+0xaa>
 8004a44:	2b07      	cmp	r3, #7
 8004a46:	dc15      	bgt.n	8004a74 <_HandleIncomingPacket+0x58>
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	dd3c      	ble.n	8004ac6 <_HandleIncomingPacket+0xaa>
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	2b06      	cmp	r3, #6
 8004a50:	d839      	bhi.n	8004ac6 <_HandleIncomingPacket+0xaa>
 8004a52:	a201      	add	r2, pc, #4	; (adr r2, 8004a58 <_HandleIncomingPacket+0x3c>)
 8004a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a58:	08004a7b 	.word	0x08004a7b
 8004a5c:	08004a81 	.word	0x08004a81
 8004a60:	08004a87 	.word	0x08004a87
 8004a64:	08004a8d 	.word	0x08004a8d
 8004a68:	08004a93 	.word	0x08004a93
 8004a6c:	08004a99 	.word	0x08004a99
 8004a70:	08004a9f 	.word	0x08004a9f
 8004a74:	2b7f      	cmp	r3, #127	; 0x7f
 8004a76:	d035      	beq.n	8004ae4 <_HandleIncomingPacket+0xc8>
 8004a78:	e025      	b.n	8004ac6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004a7a:	f000 fc2f 	bl	80052dc <SEGGER_SYSVIEW_Start>
      break;
 8004a7e:	e036      	b.n	8004aee <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004a80:	f000 fce6 	bl	8005450 <SEGGER_SYSVIEW_Stop>
      break;
 8004a84:	e033      	b.n	8004aee <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004a86:	f000 febf 	bl	8005808 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004a8a:	e030      	b.n	8004aee <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004a8c:	f000 fe84 	bl	8005798 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004a90:	e02d      	b.n	8004aee <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004a92:	f000 fd03 	bl	800549c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004a96:	e02a      	b.n	8004aee <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004a98:	f001 f882 	bl	8005ba0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004a9c:	e027      	b.n	8004aee <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004a9e:	f001 f861 	bl	8005b64 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004aa2:	e024      	b.n	8004aee <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004aa4:	4b14      	ldr	r3, [pc, #80]	; (8004af8 <_HandleIncomingPacket+0xdc>)
 8004aa6:	7e1b      	ldrb	r3, [r3, #24]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	1cfb      	adds	r3, r7, #3
 8004aac:	2201      	movs	r2, #1
 8004aae:	4619      	mov	r1, r3
 8004ab0:	f7ff fe22 	bl	80046f8 <SEGGER_RTT_ReadNoLock>
 8004ab4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d015      	beq.n	8004ae8 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004abc:	78fb      	ldrb	r3, [r7, #3]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 ffc6 	bl	8005a50 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004ac4:	e010      	b.n	8004ae8 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004ac6:	78fb      	ldrb	r3, [r7, #3]
 8004ac8:	b25b      	sxtb	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	da0e      	bge.n	8004aec <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004ace:	4b0a      	ldr	r3, [pc, #40]	; (8004af8 <_HandleIncomingPacket+0xdc>)
 8004ad0:	7e1b      	ldrb	r3, [r3, #24]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	1cfb      	adds	r3, r7, #3
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	4619      	mov	r1, r3
 8004ada:	f7ff fe0d 	bl	80046f8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004ade:	e005      	b.n	8004aec <_HandleIncomingPacket+0xd0>
    }
  }
 8004ae0:	bf00      	nop
 8004ae2:	e004      	b.n	8004aee <_HandleIncomingPacket+0xd2>
      break;
 8004ae4:	bf00      	nop
 8004ae6:	e002      	b.n	8004aee <_HandleIncomingPacket+0xd2>
      break;
 8004ae8:	bf00      	nop
 8004aea:	e000      	b.n	8004aee <_HandleIncomingPacket+0xd2>
      break;
 8004aec:	bf00      	nop
}
 8004aee:	bf00      	nop
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	2000d394 	.word	0x2000d394

08004afc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b08c      	sub	sp, #48	; 0x30
 8004b00:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004b02:	2301      	movs	r3, #1
 8004b04:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004b06:	1d3b      	adds	r3, r7, #4
 8004b08:	3301      	adds	r3, #1
 8004b0a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b10:	4b31      	ldr	r3, [pc, #196]	; (8004bd8 <_TrySendOverflowPacket+0xdc>)
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b16:	e00b      	b.n	8004b30 <_TrySendOverflowPacket+0x34>
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1e:	1c59      	adds	r1, r3, #1
 8004b20:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004b22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	701a      	strb	r2, [r3, #0]
 8004b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2c:	09db      	lsrs	r3, r3, #7
 8004b2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b32:	2b7f      	cmp	r3, #127	; 0x7f
 8004b34:	d8f0      	bhi.n	8004b18 <_TrySendOverflowPacket+0x1c>
 8004b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	701a      	strb	r2, [r3, #0]
 8004b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b44:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004b46:	4b25      	ldr	r3, [pc, #148]	; (8004bdc <_TrySendOverflowPacket+0xe0>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004b4c:	4b22      	ldr	r3, [pc, #136]	; (8004bd8 <_TrySendOverflowPacket+0xdc>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	627b      	str	r3, [r7, #36]	; 0x24
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	623b      	str	r3, [r7, #32]
 8004b5e:	e00b      	b.n	8004b78 <_TrySendOverflowPacket+0x7c>
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	1c59      	adds	r1, r3, #1
 8004b68:	6279      	str	r1, [r7, #36]	; 0x24
 8004b6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	701a      	strb	r2, [r3, #0]
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	09db      	lsrs	r3, r3, #7
 8004b76:	623b      	str	r3, [r7, #32]
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	2b7f      	cmp	r3, #127	; 0x7f
 8004b7c:	d8f0      	bhi.n	8004b60 <_TrySendOverflowPacket+0x64>
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	627a      	str	r2, [r7, #36]	; 0x24
 8004b84:	6a3a      	ldr	r2, [r7, #32]
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004b8e:	4b12      	ldr	r3, [pc, #72]	; (8004bd8 <_TrySendOverflowPacket+0xdc>)
 8004b90:	785b      	ldrb	r3, [r3, #1]
 8004b92:	4618      	mov	r0, r3
 8004b94:	1d3b      	adds	r3, r7, #4
 8004b96:	69fa      	ldr	r2, [r7, #28]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	1d3b      	adds	r3, r7, #4
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	f7fb fb1e 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d009      	beq.n	8004bc2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004bae:	4a0a      	ldr	r2, [pc, #40]	; (8004bd8 <_TrySendOverflowPacket+0xdc>)
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004bb4:	4b08      	ldr	r3, [pc, #32]	; (8004bd8 <_TrySendOverflowPacket+0xdc>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	4b06      	ldr	r3, [pc, #24]	; (8004bd8 <_TrySendOverflowPacket+0xdc>)
 8004bbe:	701a      	strb	r2, [r3, #0]
 8004bc0:	e004      	b.n	8004bcc <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004bc2:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <_TrySendOverflowPacket+0xdc>)
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	4a03      	ldr	r2, [pc, #12]	; (8004bd8 <_TrySendOverflowPacket+0xdc>)
 8004bca:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004bcc:	693b      	ldr	r3, [r7, #16]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3730      	adds	r7, #48	; 0x30
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	2000d394 	.word	0x2000d394
 8004bdc:	e0001004 	.word	0xe0001004

08004be0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b08a      	sub	sp, #40	; 0x28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004bec:	4b98      	ldr	r3, [pc, #608]	; (8004e50 <_SendPacket+0x270>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d010      	beq.n	8004c16 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004bf4:	4b96      	ldr	r3, [pc, #600]	; (8004e50 <_SendPacket+0x270>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 812d 	beq.w	8004e58 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004bfe:	4b94      	ldr	r3, [pc, #592]	; (8004e50 <_SendPacket+0x270>)
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d109      	bne.n	8004c1a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004c06:	f7ff ff79 	bl	8004afc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004c0a:	4b91      	ldr	r3, [pc, #580]	; (8004e50 <_SendPacket+0x270>)
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	f040 8124 	bne.w	8004e5c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004c14:	e001      	b.n	8004c1a <_SendPacket+0x3a>
    goto Send;
 8004c16:	bf00      	nop
 8004c18:	e000      	b.n	8004c1c <_SendPacket+0x3c>
Send:
 8004c1a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b1f      	cmp	r3, #31
 8004c20:	d809      	bhi.n	8004c36 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004c22:	4b8b      	ldr	r3, [pc, #556]	; (8004e50 <_SendPacket+0x270>)
 8004c24:	69da      	ldr	r2, [r3, #28]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	fa22 f303 	lsr.w	r3, r2, r3
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f040 8115 	bne.w	8004e60 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b17      	cmp	r3, #23
 8004c3a:	d807      	bhi.n	8004c4c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	701a      	strb	r2, [r3, #0]
 8004c4a:	e0c4      	b.n	8004dd6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	2b7f      	cmp	r3, #127	; 0x7f
 8004c58:	d912      	bls.n	8004c80 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	09da      	lsrs	r2, r3, #7
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	3b01      	subs	r3, #1
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	3a01      	subs	r2, #1
 8004c72:	60fa      	str	r2, [r7, #12]
 8004c74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	701a      	strb	r2, [r3, #0]
 8004c7e:	e006      	b.n	8004c8e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b7e      	cmp	r3, #126	; 0x7e
 8004c92:	d807      	bhi.n	8004ca4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	701a      	strb	r2, [r3, #0]
 8004ca2:	e098      	b.n	8004dd6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004caa:	d212      	bcs.n	8004cd2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	09da      	lsrs	r2, r3, #7
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	3a01      	subs	r2, #1
 8004cc4:	60fa      	str	r2, [r7, #12]
 8004cc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	701a      	strb	r2, [r3, #0]
 8004cd0:	e081      	b.n	8004dd6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cd8:	d21d      	bcs.n	8004d16 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	0b9a      	lsrs	r2, r3, #14
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	b2d2      	uxtb	r2, r2
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	09db      	lsrs	r3, r3, #7
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	3a01      	subs	r2, #1
 8004cf4:	60fa      	str	r2, [r7, #12]
 8004cf6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	3a01      	subs	r2, #1
 8004d08:	60fa      	str	r2, [r7, #12]
 8004d0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	701a      	strb	r2, [r3, #0]
 8004d14:	e05f      	b.n	8004dd6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d1c:	d228      	bcs.n	8004d70 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	0d5a      	lsrs	r2, r3, #21
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	3b01      	subs	r3, #1
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	0b9b      	lsrs	r3, r3, #14
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	3a01      	subs	r2, #1
 8004d38:	60fa      	str	r2, [r7, #12]
 8004d3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	09db      	lsrs	r3, r3, #7
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	3a01      	subs	r2, #1
 8004d4e:	60fa      	str	r2, [r7, #12]
 8004d50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	3a01      	subs	r2, #1
 8004d62:	60fa      	str	r2, [r7, #12]
 8004d64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	e032      	b.n	8004dd6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	0f1a      	lsrs	r2, r3, #28
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	0d5b      	lsrs	r3, r3, #21
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	3a01      	subs	r2, #1
 8004d8a:	60fa      	str	r2, [r7, #12]
 8004d8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	0b9b      	lsrs	r3, r3, #14
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	3a01      	subs	r2, #1
 8004da0:	60fa      	str	r2, [r7, #12]
 8004da2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	09db      	lsrs	r3, r3, #7
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	3a01      	subs	r2, #1
 8004db6:	60fa      	str	r2, [r7, #12]
 8004db8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	3a01      	subs	r2, #1
 8004dca:	60fa      	str	r2, [r7, #12]
 8004dcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004dd6:	4b1f      	ldr	r3, [pc, #124]	; (8004e54 <_SendPacket+0x274>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004ddc:	4b1c      	ldr	r3, [pc, #112]	; (8004e50 <_SendPacket+0x270>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	623b      	str	r3, [r7, #32]
 8004dee:	e00b      	b.n	8004e08 <_SendPacket+0x228>
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	1c59      	adds	r1, r3, #1
 8004df8:	6279      	str	r1, [r7, #36]	; 0x24
 8004dfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	701a      	strb	r2, [r3, #0]
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	09db      	lsrs	r3, r3, #7
 8004e06:	623b      	str	r3, [r7, #32]
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	2b7f      	cmp	r3, #127	; 0x7f
 8004e0c:	d8f0      	bhi.n	8004df0 <_SendPacket+0x210>
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	627a      	str	r2, [r7, #36]	; 0x24
 8004e14:	6a3a      	ldr	r2, [r7, #32]
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	701a      	strb	r2, [r3, #0]
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004e1e:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <_SendPacket+0x270>)
 8004e20:	785b      	ldrb	r3, [r3, #1]
 8004e22:	4618      	mov	r0, r3
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	68f9      	ldr	r1, [r7, #12]
 8004e2e:	f7fb f9d7 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004e32:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004e3a:	4a05      	ldr	r2, [pc, #20]	; (8004e50 <_SendPacket+0x270>)
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	60d3      	str	r3, [r2, #12]
 8004e40:	e00f      	b.n	8004e62 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004e42:	4b03      	ldr	r3, [pc, #12]	; (8004e50 <_SendPacket+0x270>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	3301      	adds	r3, #1
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	4b01      	ldr	r3, [pc, #4]	; (8004e50 <_SendPacket+0x270>)
 8004e4c:	701a      	strb	r2, [r3, #0]
 8004e4e:	e008      	b.n	8004e62 <_SendPacket+0x282>
 8004e50:	2000d394 	.word	0x2000d394
 8004e54:	e0001004 	.word	0xe0001004
    goto SendDone;
 8004e58:	bf00      	nop
 8004e5a:	e002      	b.n	8004e62 <_SendPacket+0x282>
      goto SendDone;
 8004e5c:	bf00      	nop
 8004e5e:	e000      	b.n	8004e62 <_SendPacket+0x282>
      goto SendDone;
 8004e60:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004e62:	4b14      	ldr	r3, [pc, #80]	; (8004eb4 <_SendPacket+0x2d4>)
 8004e64:	7e1b      	ldrb	r3, [r3, #24]
 8004e66:	4619      	mov	r1, r3
 8004e68:	4a13      	ldr	r2, [pc, #76]	; (8004eb8 <_SendPacket+0x2d8>)
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	440b      	add	r3, r1
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	4413      	add	r3, r2
 8004e74:	336c      	adds	r3, #108	; 0x6c
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	4b0e      	ldr	r3, [pc, #56]	; (8004eb4 <_SendPacket+0x2d4>)
 8004e7a:	7e1b      	ldrb	r3, [r3, #24]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	490e      	ldr	r1, [pc, #56]	; (8004eb8 <_SendPacket+0x2d8>)
 8004e80:	4603      	mov	r3, r0
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	4403      	add	r3, r0
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	440b      	add	r3, r1
 8004e8a:	3370      	adds	r3, #112	; 0x70
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d00b      	beq.n	8004eaa <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004e92:	4b08      	ldr	r3, [pc, #32]	; (8004eb4 <_SendPacket+0x2d4>)
 8004e94:	789b      	ldrb	r3, [r3, #2]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d107      	bne.n	8004eaa <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004e9a:	4b06      	ldr	r3, [pc, #24]	; (8004eb4 <_SendPacket+0x2d4>)
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004ea0:	f7ff fdbc 	bl	8004a1c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004ea4:	4b03      	ldr	r3, [pc, #12]	; (8004eb4 <_SendPacket+0x2d4>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004eaa:	bf00      	nop
 8004eac:	3728      	adds	r7, #40	; 0x28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	2000d394 	.word	0x2000d394
 8004eb8:	2000cad4 	.word	0x2000cad4

08004ebc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af02      	add	r7, sp, #8
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004eca:	2300      	movs	r3, #0
 8004ecc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ed0:	4917      	ldr	r1, [pc, #92]	; (8004f30 <SEGGER_SYSVIEW_Init+0x74>)
 8004ed2:	4818      	ldr	r0, [pc, #96]	; (8004f34 <SEGGER_SYSVIEW_Init+0x78>)
 8004ed4:	f7ff fc96 	bl	8004804 <SEGGER_RTT_AllocUpBuffer>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	4b16      	ldr	r3, [pc, #88]	; (8004f38 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ede:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004ee0:	4b15      	ldr	r3, [pc, #84]	; (8004f38 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ee2:	785a      	ldrb	r2, [r3, #1]
 8004ee4:	4b14      	ldr	r3, [pc, #80]	; (8004f38 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ee6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004ee8:	4b13      	ldr	r3, [pc, #76]	; (8004f38 <SEGGER_SYSVIEW_Init+0x7c>)
 8004eea:	7e1b      	ldrb	r3, [r3, #24]
 8004eec:	4618      	mov	r0, r3
 8004eee:	2300      	movs	r3, #0
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	4a11      	ldr	r2, [pc, #68]	; (8004f3c <SEGGER_SYSVIEW_Init+0x80>)
 8004ef6:	490f      	ldr	r1, [pc, #60]	; (8004f34 <SEGGER_SYSVIEW_Init+0x78>)
 8004ef8:	f7ff fd08 	bl	800490c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004efc:	4b0e      	ldr	r3, [pc, #56]	; (8004f38 <SEGGER_SYSVIEW_Init+0x7c>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004f02:	4b0f      	ldr	r3, [pc, #60]	; (8004f40 <SEGGER_SYSVIEW_Init+0x84>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a0c      	ldr	r2, [pc, #48]	; (8004f38 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f08:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004f0a:	4a0b      	ldr	r2, [pc, #44]	; (8004f38 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004f10:	4a09      	ldr	r2, [pc, #36]	; (8004f38 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004f16:	4a08      	ldr	r2, [pc, #32]	; (8004f38 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004f1c:	4a06      	ldr	r2, [pc, #24]	; (8004f38 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004f22:	4b05      	ldr	r3, [pc, #20]	; (8004f38 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004f28:	bf00      	nop
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	2000cf8c 	.word	0x2000cf8c
 8004f34:	08005e60 	.word	0x08005e60
 8004f38:	2000d394 	.word	0x2000d394
 8004f3c:	2000d38c 	.word	0x2000d38c
 8004f40:	e0001004 	.word	0xe0001004

08004f44 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004f4c:	4a04      	ldr	r2, [pc, #16]	; (8004f60 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6113      	str	r3, [r2, #16]
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	2000d394 	.word	0x2000d394

08004f64 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f6c:	f3ef 8311 	mrs	r3, BASEPRI
 8004f70:	f04f 0120 	mov.w	r1, #32
 8004f74:	f381 8811 	msr	BASEPRI, r1
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	4808      	ldr	r0, [pc, #32]	; (8004f9c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004f7c:	f7ff fd42 	bl	8004a04 <_PreparePacket>
 8004f80:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	68b9      	ldr	r1, [r7, #8]
 8004f86:	68b8      	ldr	r0, [r7, #8]
 8004f88:	f7ff fe2a 	bl	8004be0 <_SendPacket>
  RECORD_END();
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f383 8811 	msr	BASEPRI, r3
}
 8004f92:	bf00      	nop
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	2000d3c4 	.word	0x2000d3c4

08004fa0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b088      	sub	sp, #32
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004faa:	f3ef 8311 	mrs	r3, BASEPRI
 8004fae:	f04f 0120 	mov.w	r1, #32
 8004fb2:	f381 8811 	msr	BASEPRI, r1
 8004fb6:	617b      	str	r3, [r7, #20]
 8004fb8:	4816      	ldr	r0, [pc, #88]	; (8005014 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004fba:	f7ff fd23 	bl	8004a04 <_PreparePacket>
 8004fbe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	61fb      	str	r3, [r7, #28]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	61bb      	str	r3, [r7, #24]
 8004fcc:	e00b      	b.n	8004fe6 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	1c59      	adds	r1, r3, #1
 8004fd6:	61f9      	str	r1, [r7, #28]
 8004fd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fdc:	b2d2      	uxtb	r2, r2
 8004fde:	701a      	strb	r2, [r3, #0]
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	09db      	lsrs	r3, r3, #7
 8004fe4:	61bb      	str	r3, [r7, #24]
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	2b7f      	cmp	r3, #127	; 0x7f
 8004fea:	d8f0      	bhi.n	8004fce <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	61fa      	str	r2, [r7, #28]
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	701a      	strb	r2, [r3, #0]
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	68f9      	ldr	r1, [r7, #12]
 8005000:	6938      	ldr	r0, [r7, #16]
 8005002:	f7ff fded 	bl	8004be0 <_SendPacket>
  RECORD_END();
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f383 8811 	msr	BASEPRI, r3
}
 800500c:	bf00      	nop
 800500e:	3720      	adds	r7, #32
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	2000d3c4 	.word	0x2000d3c4

08005018 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005018:	b580      	push	{r7, lr}
 800501a:	b08c      	sub	sp, #48	; 0x30
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005024:	f3ef 8311 	mrs	r3, BASEPRI
 8005028:	f04f 0120 	mov.w	r1, #32
 800502c:	f381 8811 	msr	BASEPRI, r1
 8005030:	61fb      	str	r3, [r7, #28]
 8005032:	4825      	ldr	r0, [pc, #148]	; (80050c8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005034:	f7ff fce6 	bl	8004a04 <_PreparePacket>
 8005038:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	62bb      	str	r3, [r7, #40]	; 0x28
 8005046:	e00b      	b.n	8005060 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504a:	b2da      	uxtb	r2, r3
 800504c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504e:	1c59      	adds	r1, r3, #1
 8005050:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005052:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	701a      	strb	r2, [r3, #0]
 800505a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505c:	09db      	lsrs	r3, r3, #7
 800505e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005062:	2b7f      	cmp	r3, #127	; 0x7f
 8005064:	d8f0      	bhi.n	8005048 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800506c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	701a      	strb	r2, [r3, #0]
 8005072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005074:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	623b      	str	r3, [r7, #32]
 800507e:	e00b      	b.n	8005098 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	b2da      	uxtb	r2, r3
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	1c59      	adds	r1, r3, #1
 8005088:	6279      	str	r1, [r7, #36]	; 0x24
 800508a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	701a      	strb	r2, [r3, #0]
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	09db      	lsrs	r3, r3, #7
 8005096:	623b      	str	r3, [r7, #32]
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	2b7f      	cmp	r3, #127	; 0x7f
 800509c:	d8f0      	bhi.n	8005080 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	627a      	str	r2, [r7, #36]	; 0x24
 80050a4:	6a3a      	ldr	r2, [r7, #32]
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	6979      	ldr	r1, [r7, #20]
 80050b2:	69b8      	ldr	r0, [r7, #24]
 80050b4:	f7ff fd94 	bl	8004be0 <_SendPacket>
  RECORD_END();
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	f383 8811 	msr	BASEPRI, r3
}
 80050be:	bf00      	nop
 80050c0:	3730      	adds	r7, #48	; 0x30
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	2000d3c4 	.word	0x2000d3c4

080050cc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b08e      	sub	sp, #56	; 0x38
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80050da:	f3ef 8311 	mrs	r3, BASEPRI
 80050de:	f04f 0120 	mov.w	r1, #32
 80050e2:	f381 8811 	msr	BASEPRI, r1
 80050e6:	61fb      	str	r3, [r7, #28]
 80050e8:	4832      	ldr	r0, [pc, #200]	; (80051b4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80050ea:	f7ff fc8b 	bl	8004a04 <_PreparePacket>
 80050ee:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	637b      	str	r3, [r7, #52]	; 0x34
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	633b      	str	r3, [r7, #48]	; 0x30
 80050fc:	e00b      	b.n	8005116 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80050fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005100:	b2da      	uxtb	r2, r3
 8005102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005104:	1c59      	adds	r1, r3, #1
 8005106:	6379      	str	r1, [r7, #52]	; 0x34
 8005108:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	701a      	strb	r2, [r3, #0]
 8005110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005112:	09db      	lsrs	r3, r3, #7
 8005114:	633b      	str	r3, [r7, #48]	; 0x30
 8005116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005118:	2b7f      	cmp	r3, #127	; 0x7f
 800511a:	d8f0      	bhi.n	80050fe <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800511c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	637a      	str	r2, [r7, #52]	; 0x34
 8005122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	701a      	strb	r2, [r3, #0]
 8005128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	62bb      	str	r3, [r7, #40]	; 0x28
 8005134:	e00b      	b.n	800514e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005138:	b2da      	uxtb	r2, r3
 800513a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513c:	1c59      	adds	r1, r3, #1
 800513e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005140:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005144:	b2d2      	uxtb	r2, r2
 8005146:	701a      	strb	r2, [r3, #0]
 8005148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514a:	09db      	lsrs	r3, r3, #7
 800514c:	62bb      	str	r3, [r7, #40]	; 0x28
 800514e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005150:	2b7f      	cmp	r3, #127	; 0x7f
 8005152:	d8f0      	bhi.n	8005136 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	62fa      	str	r2, [r7, #44]	; 0x2c
 800515a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	701a      	strb	r2, [r3, #0]
 8005160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005162:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	627b      	str	r3, [r7, #36]	; 0x24
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	623b      	str	r3, [r7, #32]
 800516c:	e00b      	b.n	8005186 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	b2da      	uxtb	r2, r3
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	1c59      	adds	r1, r3, #1
 8005176:	6279      	str	r1, [r7, #36]	; 0x24
 8005178:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800517c:	b2d2      	uxtb	r2, r2
 800517e:	701a      	strb	r2, [r3, #0]
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	09db      	lsrs	r3, r3, #7
 8005184:	623b      	str	r3, [r7, #32]
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	2b7f      	cmp	r3, #127	; 0x7f
 800518a:	d8f0      	bhi.n	800516e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	1c5a      	adds	r2, r3, #1
 8005190:	627a      	str	r2, [r7, #36]	; 0x24
 8005192:	6a3a      	ldr	r2, [r7, #32]
 8005194:	b2d2      	uxtb	r2, r2
 8005196:	701a      	strb	r2, [r3, #0]
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	6979      	ldr	r1, [r7, #20]
 80051a0:	69b8      	ldr	r0, [r7, #24]
 80051a2:	f7ff fd1d 	bl	8004be0 <_SendPacket>
  RECORD_END();
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	f383 8811 	msr	BASEPRI, r3
}
 80051ac:	bf00      	nop
 80051ae:	3738      	adds	r7, #56	; 0x38
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	2000d3c4 	.word	0x2000d3c4

080051b8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b090      	sub	sp, #64	; 0x40
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80051c6:	f3ef 8311 	mrs	r3, BASEPRI
 80051ca:	f04f 0120 	mov.w	r1, #32
 80051ce:	f381 8811 	msr	BASEPRI, r1
 80051d2:	61fb      	str	r3, [r7, #28]
 80051d4:	4840      	ldr	r0, [pc, #256]	; (80052d8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80051d6:	f7ff fc15 	bl	8004a04 <_PreparePacket>
 80051da:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80051e8:	e00b      	b.n	8005202 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80051ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f0:	1c59      	adds	r1, r3, #1
 80051f2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80051f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	701a      	strb	r2, [r3, #0]
 80051fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fe:	09db      	lsrs	r3, r3, #7
 8005200:	63bb      	str	r3, [r7, #56]	; 0x38
 8005202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005204:	2b7f      	cmp	r3, #127	; 0x7f
 8005206:	d8f0      	bhi.n	80051ea <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800520e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005210:	b2d2      	uxtb	r2, r2
 8005212:	701a      	strb	r2, [r3, #0]
 8005214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005216:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	637b      	str	r3, [r7, #52]	; 0x34
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	633b      	str	r3, [r7, #48]	; 0x30
 8005220:	e00b      	b.n	800523a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005224:	b2da      	uxtb	r2, r3
 8005226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005228:	1c59      	adds	r1, r3, #1
 800522a:	6379      	str	r1, [r7, #52]	; 0x34
 800522c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005230:	b2d2      	uxtb	r2, r2
 8005232:	701a      	strb	r2, [r3, #0]
 8005234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005236:	09db      	lsrs	r3, r3, #7
 8005238:	633b      	str	r3, [r7, #48]	; 0x30
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	2b7f      	cmp	r3, #127	; 0x7f
 800523e:	d8f0      	bhi.n	8005222 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	637a      	str	r2, [r7, #52]	; 0x34
 8005246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005248:	b2d2      	uxtb	r2, r2
 800524a:	701a      	strb	r2, [r3, #0]
 800524c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800524e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	62bb      	str	r3, [r7, #40]	; 0x28
 8005258:	e00b      	b.n	8005272 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800525a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525c:	b2da      	uxtb	r2, r3
 800525e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005260:	1c59      	adds	r1, r3, #1
 8005262:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005264:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005268:	b2d2      	uxtb	r2, r2
 800526a:	701a      	strb	r2, [r3, #0]
 800526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526e:	09db      	lsrs	r3, r3, #7
 8005270:	62bb      	str	r3, [r7, #40]	; 0x28
 8005272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005274:	2b7f      	cmp	r3, #127	; 0x7f
 8005276:	d8f0      	bhi.n	800525a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527a:	1c5a      	adds	r2, r3, #1
 800527c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800527e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005280:	b2d2      	uxtb	r2, r2
 8005282:	701a      	strb	r2, [r3, #0]
 8005284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005286:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	627b      	str	r3, [r7, #36]	; 0x24
 800528c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800528e:	623b      	str	r3, [r7, #32]
 8005290:	e00b      	b.n	80052aa <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	b2da      	uxtb	r2, r3
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	1c59      	adds	r1, r3, #1
 800529a:	6279      	str	r1, [r7, #36]	; 0x24
 800529c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052a0:	b2d2      	uxtb	r2, r2
 80052a2:	701a      	strb	r2, [r3, #0]
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	09db      	lsrs	r3, r3, #7
 80052a8:	623b      	str	r3, [r7, #32]
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	2b7f      	cmp	r3, #127	; 0x7f
 80052ae:	d8f0      	bhi.n	8005292 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	627a      	str	r2, [r7, #36]	; 0x24
 80052b6:	6a3a      	ldr	r2, [r7, #32]
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	701a      	strb	r2, [r3, #0]
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	6979      	ldr	r1, [r7, #20]
 80052c4:	69b8      	ldr	r0, [r7, #24]
 80052c6:	f7ff fc8b 	bl	8004be0 <_SendPacket>
  RECORD_END();
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	f383 8811 	msr	BASEPRI, r3
}
 80052d0:	bf00      	nop
 80052d2:	3740      	adds	r7, #64	; 0x40
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	2000d3c4 	.word	0x2000d3c4

080052dc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80052dc:	b580      	push	{r7, lr}
 80052de:	b08c      	sub	sp, #48	; 0x30
 80052e0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80052e2:	4b58      	ldr	r3, [pc, #352]	; (8005444 <SEGGER_SYSVIEW_Start+0x168>)
 80052e4:	2201      	movs	r2, #1
 80052e6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80052e8:	f3ef 8311 	mrs	r3, BASEPRI
 80052ec:	f04f 0120 	mov.w	r1, #32
 80052f0:	f381 8811 	msr	BASEPRI, r1
 80052f4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80052f6:	4b53      	ldr	r3, [pc, #332]	; (8005444 <SEGGER_SYSVIEW_Start+0x168>)
 80052f8:	785b      	ldrb	r3, [r3, #1]
 80052fa:	220a      	movs	r2, #10
 80052fc:	4952      	ldr	r1, [pc, #328]	; (8005448 <SEGGER_SYSVIEW_Start+0x16c>)
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fa ff6e 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800530a:	200a      	movs	r0, #10
 800530c:	f7ff fe2a 	bl	8004f64 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005310:	f3ef 8311 	mrs	r3, BASEPRI
 8005314:	f04f 0120 	mov.w	r1, #32
 8005318:	f381 8811 	msr	BASEPRI, r1
 800531c:	60bb      	str	r3, [r7, #8]
 800531e:	484b      	ldr	r0, [pc, #300]	; (800544c <SEGGER_SYSVIEW_Start+0x170>)
 8005320:	f7ff fb70 	bl	8004a04 <_PreparePacket>
 8005324:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800532e:	4b45      	ldr	r3, [pc, #276]	; (8005444 <SEGGER_SYSVIEW_Start+0x168>)
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	62bb      	str	r3, [r7, #40]	; 0x28
 8005334:	e00b      	b.n	800534e <SEGGER_SYSVIEW_Start+0x72>
 8005336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005338:	b2da      	uxtb	r2, r3
 800533a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533c:	1c59      	adds	r1, r3, #1
 800533e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005340:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005344:	b2d2      	uxtb	r2, r2
 8005346:	701a      	strb	r2, [r3, #0]
 8005348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534a:	09db      	lsrs	r3, r3, #7
 800534c:	62bb      	str	r3, [r7, #40]	; 0x28
 800534e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005350:	2b7f      	cmp	r3, #127	; 0x7f
 8005352:	d8f0      	bhi.n	8005336 <SEGGER_SYSVIEW_Start+0x5a>
 8005354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	62fa      	str	r2, [r7, #44]	; 0x2c
 800535a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800535c:	b2d2      	uxtb	r2, r2
 800535e:	701a      	strb	r2, [r3, #0]
 8005360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005362:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	627b      	str	r3, [r7, #36]	; 0x24
 8005368:	4b36      	ldr	r3, [pc, #216]	; (8005444 <SEGGER_SYSVIEW_Start+0x168>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	623b      	str	r3, [r7, #32]
 800536e:	e00b      	b.n	8005388 <SEGGER_SYSVIEW_Start+0xac>
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	b2da      	uxtb	r2, r3
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	1c59      	adds	r1, r3, #1
 8005378:	6279      	str	r1, [r7, #36]	; 0x24
 800537a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	09db      	lsrs	r3, r3, #7
 8005386:	623b      	str	r3, [r7, #32]
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	2b7f      	cmp	r3, #127	; 0x7f
 800538c:	d8f0      	bhi.n	8005370 <SEGGER_SYSVIEW_Start+0x94>
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	627a      	str	r2, [r7, #36]	; 0x24
 8005394:	6a3a      	ldr	r2, [r7, #32]
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	701a      	strb	r2, [r3, #0]
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	61fb      	str	r3, [r7, #28]
 80053a2:	4b28      	ldr	r3, [pc, #160]	; (8005444 <SEGGER_SYSVIEW_Start+0x168>)
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	61bb      	str	r3, [r7, #24]
 80053a8:	e00b      	b.n	80053c2 <SEGGER_SYSVIEW_Start+0xe6>
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	1c59      	adds	r1, r3, #1
 80053b2:	61f9      	str	r1, [r7, #28]
 80053b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053b8:	b2d2      	uxtb	r2, r2
 80053ba:	701a      	strb	r2, [r3, #0]
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	09db      	lsrs	r3, r3, #7
 80053c0:	61bb      	str	r3, [r7, #24]
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	2b7f      	cmp	r3, #127	; 0x7f
 80053c6:	d8f0      	bhi.n	80053aa <SEGGER_SYSVIEW_Start+0xce>
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	1c5a      	adds	r2, r3, #1
 80053cc:	61fa      	str	r2, [r7, #28]
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	b2d2      	uxtb	r2, r2
 80053d2:	701a      	strb	r2, [r3, #0]
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	2300      	movs	r3, #0
 80053de:	613b      	str	r3, [r7, #16]
 80053e0:	e00b      	b.n	80053fa <SEGGER_SYSVIEW_Start+0x11e>
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	1c59      	adds	r1, r3, #1
 80053ea:	6179      	str	r1, [r7, #20]
 80053ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	701a      	strb	r2, [r3, #0]
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	09db      	lsrs	r3, r3, #7
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	2b7f      	cmp	r3, #127	; 0x7f
 80053fe:	d8f0      	bhi.n	80053e2 <SEGGER_SYSVIEW_Start+0x106>
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	617a      	str	r2, [r7, #20]
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	b2d2      	uxtb	r2, r2
 800540a:	701a      	strb	r2, [r3, #0]
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005410:	2218      	movs	r2, #24
 8005412:	6839      	ldr	r1, [r7, #0]
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff fbe3 	bl	8004be0 <_SendPacket>
      RECORD_END();
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005420:	4b08      	ldr	r3, [pc, #32]	; (8005444 <SEGGER_SYSVIEW_Start+0x168>)
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005428:	4b06      	ldr	r3, [pc, #24]	; (8005444 <SEGGER_SYSVIEW_Start+0x168>)
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800542e:	f000 f9eb 	bl	8005808 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005432:	f000 f9b1 	bl	8005798 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005436:	f000 fbb3 	bl	8005ba0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800543a:	bf00      	nop
 800543c:	3730      	adds	r7, #48	; 0x30
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	2000d394 	.word	0x2000d394
 8005448:	08005e9c 	.word	0x08005e9c
 800544c:	2000d3c4 	.word	0x2000d3c4

08005450 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005456:	f3ef 8311 	mrs	r3, BASEPRI
 800545a:	f04f 0120 	mov.w	r1, #32
 800545e:	f381 8811 	msr	BASEPRI, r1
 8005462:	607b      	str	r3, [r7, #4]
 8005464:	480b      	ldr	r0, [pc, #44]	; (8005494 <SEGGER_SYSVIEW_Stop+0x44>)
 8005466:	f7ff facd 	bl	8004a04 <_PreparePacket>
 800546a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800546c:	4b0a      	ldr	r3, [pc, #40]	; (8005498 <SEGGER_SYSVIEW_Stop+0x48>)
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d007      	beq.n	8005484 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005474:	220b      	movs	r2, #11
 8005476:	6839      	ldr	r1, [r7, #0]
 8005478:	6838      	ldr	r0, [r7, #0]
 800547a:	f7ff fbb1 	bl	8004be0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800547e:	4b06      	ldr	r3, [pc, #24]	; (8005498 <SEGGER_SYSVIEW_Stop+0x48>)
 8005480:	2200      	movs	r2, #0
 8005482:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f383 8811 	msr	BASEPRI, r3
}
 800548a:	bf00      	nop
 800548c:	3708      	adds	r7, #8
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	2000d3c4 	.word	0x2000d3c4
 8005498:	2000d394 	.word	0x2000d394

0800549c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800549c:	b580      	push	{r7, lr}
 800549e:	b08c      	sub	sp, #48	; 0x30
 80054a0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80054a2:	f3ef 8311 	mrs	r3, BASEPRI
 80054a6:	f04f 0120 	mov.w	r1, #32
 80054aa:	f381 8811 	msr	BASEPRI, r1
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	4845      	ldr	r0, [pc, #276]	; (80055c8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80054b2:	f7ff faa7 	bl	8004a04 <_PreparePacket>
 80054b6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054c0:	4b42      	ldr	r3, [pc, #264]	; (80055cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80054c6:	e00b      	b.n	80054e0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80054c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ce:	1c59      	adds	r1, r3, #1
 80054d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80054d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054d6:	b2d2      	uxtb	r2, r2
 80054d8:	701a      	strb	r2, [r3, #0]
 80054da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054dc:	09db      	lsrs	r3, r3, #7
 80054de:	62bb      	str	r3, [r7, #40]	; 0x28
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e2:	2b7f      	cmp	r3, #127	; 0x7f
 80054e4:	d8f0      	bhi.n	80054c8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80054e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	701a      	strb	r2, [r3, #0]
 80054f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
 80054fa:	4b34      	ldr	r3, [pc, #208]	; (80055cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	623b      	str	r3, [r7, #32]
 8005500:	e00b      	b.n	800551a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005502:	6a3b      	ldr	r3, [r7, #32]
 8005504:	b2da      	uxtb	r2, r3
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	1c59      	adds	r1, r3, #1
 800550a:	6279      	str	r1, [r7, #36]	; 0x24
 800550c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005510:	b2d2      	uxtb	r2, r2
 8005512:	701a      	strb	r2, [r3, #0]
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	09db      	lsrs	r3, r3, #7
 8005518:	623b      	str	r3, [r7, #32]
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	2b7f      	cmp	r3, #127	; 0x7f
 800551e:	d8f0      	bhi.n	8005502 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	1c5a      	adds	r2, r3, #1
 8005524:	627a      	str	r2, [r7, #36]	; 0x24
 8005526:	6a3a      	ldr	r2, [r7, #32]
 8005528:	b2d2      	uxtb	r2, r2
 800552a:	701a      	strb	r2, [r3, #0]
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	61fb      	str	r3, [r7, #28]
 8005534:	4b25      	ldr	r3, [pc, #148]	; (80055cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	61bb      	str	r3, [r7, #24]
 800553a:	e00b      	b.n	8005554 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	b2da      	uxtb	r2, r3
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	1c59      	adds	r1, r3, #1
 8005544:	61f9      	str	r1, [r7, #28]
 8005546:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	701a      	strb	r2, [r3, #0]
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	09db      	lsrs	r3, r3, #7
 8005552:	61bb      	str	r3, [r7, #24]
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	2b7f      	cmp	r3, #127	; 0x7f
 8005558:	d8f0      	bhi.n	800553c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	61fa      	str	r2, [r7, #28]
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	b2d2      	uxtb	r2, r2
 8005564:	701a      	strb	r2, [r3, #0]
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	617b      	str	r3, [r7, #20]
 800556e:	2300      	movs	r3, #0
 8005570:	613b      	str	r3, [r7, #16]
 8005572:	e00b      	b.n	800558c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	b2da      	uxtb	r2, r3
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	1c59      	adds	r1, r3, #1
 800557c:	6179      	str	r1, [r7, #20]
 800557e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005582:	b2d2      	uxtb	r2, r2
 8005584:	701a      	strb	r2, [r3, #0]
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	09db      	lsrs	r3, r3, #7
 800558a:	613b      	str	r3, [r7, #16]
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	2b7f      	cmp	r3, #127	; 0x7f
 8005590:	d8f0      	bhi.n	8005574 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	1c5a      	adds	r2, r3, #1
 8005596:	617a      	str	r2, [r7, #20]
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	701a      	strb	r2, [r3, #0]
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80055a2:	2218      	movs	r2, #24
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	68b8      	ldr	r0, [r7, #8]
 80055a8:	f7ff fb1a 	bl	8004be0 <_SendPacket>
  RECORD_END();
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80055b2:	4b06      	ldr	r3, [pc, #24]	; (80055cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80055ba:	4b04      	ldr	r3, [pc, #16]	; (80055cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	4798      	blx	r3
  }
}
 80055c0:	bf00      	nop
 80055c2:	3730      	adds	r7, #48	; 0x30
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	2000d3c4 	.word	0x2000d3c4
 80055cc:	2000d394 	.word	0x2000d394

080055d0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b092      	sub	sp, #72	; 0x48
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80055d8:	f3ef 8311 	mrs	r3, BASEPRI
 80055dc:	f04f 0120 	mov.w	r1, #32
 80055e0:	f381 8811 	msr	BASEPRI, r1
 80055e4:	617b      	str	r3, [r7, #20]
 80055e6:	486a      	ldr	r0, [pc, #424]	; (8005790 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80055e8:	f7ff fa0c 	bl	8004a04 <_PreparePacket>
 80055ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	647b      	str	r3, [r7, #68]	; 0x44
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4b66      	ldr	r3, [pc, #408]	; (8005794 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	643b      	str	r3, [r7, #64]	; 0x40
 8005602:	e00b      	b.n	800561c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005606:	b2da      	uxtb	r2, r3
 8005608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800560a:	1c59      	adds	r1, r3, #1
 800560c:	6479      	str	r1, [r7, #68]	; 0x44
 800560e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	701a      	strb	r2, [r3, #0]
 8005616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005618:	09db      	lsrs	r3, r3, #7
 800561a:	643b      	str	r3, [r7, #64]	; 0x40
 800561c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800561e:	2b7f      	cmp	r3, #127	; 0x7f
 8005620:	d8f0      	bhi.n	8005604 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	647a      	str	r2, [r7, #68]	; 0x44
 8005628:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800562a:	b2d2      	uxtb	r2, r2
 800562c:	701a      	strb	r2, [r3, #0]
 800562e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005630:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	63bb      	str	r3, [r7, #56]	; 0x38
 800563c:	e00b      	b.n	8005656 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800563e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005640:	b2da      	uxtb	r2, r3
 8005642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005644:	1c59      	adds	r1, r3, #1
 8005646:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005648:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800564c:	b2d2      	uxtb	r2, r2
 800564e:	701a      	strb	r2, [r3, #0]
 8005650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005652:	09db      	lsrs	r3, r3, #7
 8005654:	63bb      	str	r3, [r7, #56]	; 0x38
 8005656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005658:	2b7f      	cmp	r3, #127	; 0x7f
 800565a:	d8f0      	bhi.n	800563e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800565c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005662:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	701a      	strb	r2, [r3, #0]
 8005668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800566a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	2220      	movs	r2, #32
 8005672:	4619      	mov	r1, r3
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f7ff f995 	bl	80049a4 <_EncodeStr>
 800567a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800567c:	2209      	movs	r2, #9
 800567e:	68f9      	ldr	r1, [r7, #12]
 8005680:	6938      	ldr	r0, [r7, #16]
 8005682:	f7ff faad 	bl	8004be0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	637b      	str	r3, [r7, #52]	; 0x34
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	4b40      	ldr	r3, [pc, #256]	; (8005794 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	633b      	str	r3, [r7, #48]	; 0x30
 800569a:	e00b      	b.n	80056b4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800569c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a2:	1c59      	adds	r1, r3, #1
 80056a4:	6379      	str	r1, [r7, #52]	; 0x34
 80056a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056aa:	b2d2      	uxtb	r2, r2
 80056ac:	701a      	strb	r2, [r3, #0]
 80056ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b0:	09db      	lsrs	r3, r3, #7
 80056b2:	633b      	str	r3, [r7, #48]	; 0x30
 80056b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b6:	2b7f      	cmp	r3, #127	; 0x7f
 80056b8:	d8f0      	bhi.n	800569c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80056ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056bc:	1c5a      	adds	r2, r3, #1
 80056be:	637a      	str	r2, [r7, #52]	; 0x34
 80056c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056c2:	b2d2      	uxtb	r2, r2
 80056c4:	701a      	strb	r2, [r3, #0]
 80056c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80056d4:	e00b      	b.n	80056ee <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80056d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056dc:	1c59      	adds	r1, r3, #1
 80056de:	62f9      	str	r1, [r7, #44]	; 0x2c
 80056e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056e4:	b2d2      	uxtb	r2, r2
 80056e6:	701a      	strb	r2, [r3, #0]
 80056e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ea:	09db      	lsrs	r3, r3, #7
 80056ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80056ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f0:	2b7f      	cmp	r3, #127	; 0x7f
 80056f2:	d8f0      	bhi.n	80056d6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80056f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f6:	1c5a      	adds	r2, r3, #1
 80056f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056fc:	b2d2      	uxtb	r2, r2
 80056fe:	701a      	strb	r2, [r3, #0]
 8005700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005702:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	627b      	str	r3, [r7, #36]	; 0x24
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	623b      	str	r3, [r7, #32]
 800570e:	e00b      	b.n	8005728 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	b2da      	uxtb	r2, r3
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	1c59      	adds	r1, r3, #1
 8005718:	6279      	str	r1, [r7, #36]	; 0x24
 800571a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	701a      	strb	r2, [r3, #0]
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	09db      	lsrs	r3, r3, #7
 8005726:	623b      	str	r3, [r7, #32]
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	2b7f      	cmp	r3, #127	; 0x7f
 800572c:	d8f0      	bhi.n	8005710 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	627a      	str	r2, [r7, #36]	; 0x24
 8005734:	6a3a      	ldr	r2, [r7, #32]
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	701a      	strb	r2, [r3, #0]
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	61fb      	str	r3, [r7, #28]
 8005742:	2300      	movs	r3, #0
 8005744:	61bb      	str	r3, [r7, #24]
 8005746:	e00b      	b.n	8005760 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	b2da      	uxtb	r2, r3
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	1c59      	adds	r1, r3, #1
 8005750:	61f9      	str	r1, [r7, #28]
 8005752:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	701a      	strb	r2, [r3, #0]
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	09db      	lsrs	r3, r3, #7
 800575e:	61bb      	str	r3, [r7, #24]
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	2b7f      	cmp	r3, #127	; 0x7f
 8005764:	d8f0      	bhi.n	8005748 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	61fa      	str	r2, [r7, #28]
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	701a      	strb	r2, [r3, #0]
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005776:	2215      	movs	r2, #21
 8005778:	68f9      	ldr	r1, [r7, #12]
 800577a:	6938      	ldr	r0, [r7, #16]
 800577c:	f7ff fa30 	bl	8004be0 <_SendPacket>
  RECORD_END();
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f383 8811 	msr	BASEPRI, r3
}
 8005786:	bf00      	nop
 8005788:	3748      	adds	r7, #72	; 0x48
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	2000d3c4 	.word	0x2000d3c4
 8005794:	2000d394 	.word	0x2000d394

08005798 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005798:	b580      	push	{r7, lr}
 800579a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800579c:	4b07      	ldr	r3, [pc, #28]	; (80057bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d008      	beq.n	80057b6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80057a4:	4b05      	ldr	r3, [pc, #20]	; (80057bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d003      	beq.n	80057b6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80057ae:	4b03      	ldr	r3, [pc, #12]	; (80057bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	4798      	blx	r3
  }
}
 80057b6:	bf00      	nop
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	2000d394 	.word	0x2000d394

080057c0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80057c8:	f3ef 8311 	mrs	r3, BASEPRI
 80057cc:	f04f 0120 	mov.w	r1, #32
 80057d0:	f381 8811 	msr	BASEPRI, r1
 80057d4:	617b      	str	r3, [r7, #20]
 80057d6:	480b      	ldr	r0, [pc, #44]	; (8005804 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80057d8:	f7ff f914 	bl	8004a04 <_PreparePacket>
 80057dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80057de:	2280      	movs	r2, #128	; 0x80
 80057e0:	6879      	ldr	r1, [r7, #4]
 80057e2:	6938      	ldr	r0, [r7, #16]
 80057e4:	f7ff f8de 	bl	80049a4 <_EncodeStr>
 80057e8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80057ea:	220e      	movs	r2, #14
 80057ec:	68f9      	ldr	r1, [r7, #12]
 80057ee:	6938      	ldr	r0, [r7, #16]
 80057f0:	f7ff f9f6 	bl	8004be0 <_SendPacket>
  RECORD_END();
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f383 8811 	msr	BASEPRI, r3
}
 80057fa:	bf00      	nop
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	2000d3c4 	.word	0x2000d3c4

08005808 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005808:	b590      	push	{r4, r7, lr}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800580e:	4b15      	ldr	r3, [pc, #84]	; (8005864 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d01a      	beq.n	800584c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005816:	4b13      	ldr	r3, [pc, #76]	; (8005864 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d015      	beq.n	800584c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005820:	4b10      	ldr	r3, [pc, #64]	; (8005864 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4798      	blx	r3
 8005828:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800582c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800582e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005832:	f04f 0200 	mov.w	r2, #0
 8005836:	f04f 0300 	mov.w	r3, #0
 800583a:	000a      	movs	r2, r1
 800583c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800583e:	4613      	mov	r3, r2
 8005840:	461a      	mov	r2, r3
 8005842:	4621      	mov	r1, r4
 8005844:	200d      	movs	r0, #13
 8005846:	f7ff fbe7 	bl	8005018 <SEGGER_SYSVIEW_RecordU32x2>
 800584a:	e006      	b.n	800585a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800584c:	4b06      	ldr	r3, [pc, #24]	; (8005868 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4619      	mov	r1, r3
 8005852:	200c      	movs	r0, #12
 8005854:	f7ff fba4 	bl	8004fa0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005858:	bf00      	nop
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	bd90      	pop	{r4, r7, pc}
 8005862:	bf00      	nop
 8005864:	2000d394 	.word	0x2000d394
 8005868:	e0001004 	.word	0xe0001004

0800586c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005872:	f3ef 8311 	mrs	r3, BASEPRI
 8005876:	f04f 0120 	mov.w	r1, #32
 800587a:	f381 8811 	msr	BASEPRI, r1
 800587e:	607b      	str	r3, [r7, #4]
 8005880:	4807      	ldr	r0, [pc, #28]	; (80058a0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005882:	f7ff f8bf 	bl	8004a04 <_PreparePacket>
 8005886:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005888:	2211      	movs	r2, #17
 800588a:	6839      	ldr	r1, [r7, #0]
 800588c:	6838      	ldr	r0, [r7, #0]
 800588e:	f7ff f9a7 	bl	8004be0 <_SendPacket>
  RECORD_END();
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f383 8811 	msr	BASEPRI, r3
}
 8005898:	bf00      	nop
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	2000d3c4 	.word	0x2000d3c4

080058a4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b088      	sub	sp, #32
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80058ac:	f3ef 8311 	mrs	r3, BASEPRI
 80058b0:	f04f 0120 	mov.w	r1, #32
 80058b4:	f381 8811 	msr	BASEPRI, r1
 80058b8:	617b      	str	r3, [r7, #20]
 80058ba:	4819      	ldr	r0, [pc, #100]	; (8005920 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80058bc:	f7ff f8a2 	bl	8004a04 <_PreparePacket>
 80058c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80058c6:	4b17      	ldr	r3, [pc, #92]	; (8005924 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	61fb      	str	r3, [r7, #28]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	61bb      	str	r3, [r7, #24]
 80058d8:	e00b      	b.n	80058f2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	1c59      	adds	r1, r3, #1
 80058e2:	61f9      	str	r1, [r7, #28]
 80058e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058e8:	b2d2      	uxtb	r2, r2
 80058ea:	701a      	strb	r2, [r3, #0]
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	09db      	lsrs	r3, r3, #7
 80058f0:	61bb      	str	r3, [r7, #24]
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	2b7f      	cmp	r3, #127	; 0x7f
 80058f6:	d8f0      	bhi.n	80058da <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	61fa      	str	r2, [r7, #28]
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	b2d2      	uxtb	r2, r2
 8005902:	701a      	strb	r2, [r3, #0]
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005908:	2208      	movs	r2, #8
 800590a:	68f9      	ldr	r1, [r7, #12]
 800590c:	6938      	ldr	r0, [r7, #16]
 800590e:	f7ff f967 	bl	8004be0 <_SendPacket>
  RECORD_END();
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f383 8811 	msr	BASEPRI, r3
}
 8005918:	bf00      	nop
 800591a:	3720      	adds	r7, #32
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	2000d3c4 	.word	0x2000d3c4
 8005924:	2000d394 	.word	0x2000d394

08005928 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005928:	b580      	push	{r7, lr}
 800592a:	b088      	sub	sp, #32
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005930:	f3ef 8311 	mrs	r3, BASEPRI
 8005934:	f04f 0120 	mov.w	r1, #32
 8005938:	f381 8811 	msr	BASEPRI, r1
 800593c:	617b      	str	r3, [r7, #20]
 800593e:	4819      	ldr	r0, [pc, #100]	; (80059a4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005940:	f7ff f860 	bl	8004a04 <_PreparePacket>
 8005944:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800594a:	4b17      	ldr	r3, [pc, #92]	; (80059a8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	61fb      	str	r3, [r7, #28]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	61bb      	str	r3, [r7, #24]
 800595c:	e00b      	b.n	8005976 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	b2da      	uxtb	r2, r3
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	1c59      	adds	r1, r3, #1
 8005966:	61f9      	str	r1, [r7, #28]
 8005968:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800596c:	b2d2      	uxtb	r2, r2
 800596e:	701a      	strb	r2, [r3, #0]
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	09db      	lsrs	r3, r3, #7
 8005974:	61bb      	str	r3, [r7, #24]
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	2b7f      	cmp	r3, #127	; 0x7f
 800597a:	d8f0      	bhi.n	800595e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	1c5a      	adds	r2, r3, #1
 8005980:	61fa      	str	r2, [r7, #28]
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	701a      	strb	r2, [r3, #0]
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800598c:	2204      	movs	r2, #4
 800598e:	68f9      	ldr	r1, [r7, #12]
 8005990:	6938      	ldr	r0, [r7, #16]
 8005992:	f7ff f925 	bl	8004be0 <_SendPacket>
  RECORD_END();
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f383 8811 	msr	BASEPRI, r3
}
 800599c:	bf00      	nop
 800599e:	3720      	adds	r7, #32
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	2000d3c4 	.word	0x2000d3c4
 80059a8:	2000d394 	.word	0x2000d394

080059ac <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80059b4:	f3ef 8311 	mrs	r3, BASEPRI
 80059b8:	f04f 0120 	mov.w	r1, #32
 80059bc:	f381 8811 	msr	BASEPRI, r1
 80059c0:	617b      	str	r3, [r7, #20]
 80059c2:	4819      	ldr	r0, [pc, #100]	; (8005a28 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80059c4:	f7ff f81e 	bl	8004a04 <_PreparePacket>
 80059c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80059ce:	4b17      	ldr	r3, [pc, #92]	; (8005a2c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	61fb      	str	r3, [r7, #28]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	61bb      	str	r3, [r7, #24]
 80059e0:	e00b      	b.n	80059fa <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	1c59      	adds	r1, r3, #1
 80059ea:	61f9      	str	r1, [r7, #28]
 80059ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059f0:	b2d2      	uxtb	r2, r2
 80059f2:	701a      	strb	r2, [r3, #0]
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	09db      	lsrs	r3, r3, #7
 80059f8:	61bb      	str	r3, [r7, #24]
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	2b7f      	cmp	r3, #127	; 0x7f
 80059fe:	d8f0      	bhi.n	80059e2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	61fa      	str	r2, [r7, #28]
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	701a      	strb	r2, [r3, #0]
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005a10:	2206      	movs	r2, #6
 8005a12:	68f9      	ldr	r1, [r7, #12]
 8005a14:	6938      	ldr	r0, [r7, #16]
 8005a16:	f7ff f8e3 	bl	8004be0 <_SendPacket>
  RECORD_END();
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f383 8811 	msr	BASEPRI, r3
}
 8005a20:	bf00      	nop
 8005a22:	3720      	adds	r7, #32
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	2000d3c4 	.word	0x2000d3c4
 8005a2c:	2000d394 	.word	0x2000d394

08005a30 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005a38:	4b04      	ldr	r3, [pc, #16]	; (8005a4c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	1ad3      	subs	r3, r2, r3
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	2000d394 	.word	0x2000d394

08005a50 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08c      	sub	sp, #48	; 0x30
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	4603      	mov	r3, r0
 8005a58:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005a5a:	4b40      	ldr	r3, [pc, #256]	; (8005b5c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d077      	beq.n	8005b52 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005a62:	4b3e      	ldr	r3, [pc, #248]	; (8005b5c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005a68:	2300      	movs	r3, #0
 8005a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a6c:	e008      	b.n	8005a80 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d007      	beq.n	8005a8a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a80:	79fb      	ldrb	r3, [r7, #7]
 8005a82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d3f2      	bcc.n	8005a6e <SEGGER_SYSVIEW_SendModule+0x1e>
 8005a88:	e000      	b.n	8005a8c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005a8a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d055      	beq.n	8005b3e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a92:	f3ef 8311 	mrs	r3, BASEPRI
 8005a96:	f04f 0120 	mov.w	r1, #32
 8005a9a:	f381 8811 	msr	BASEPRI, r1
 8005a9e:	617b      	str	r3, [r7, #20]
 8005aa0:	482f      	ldr	r0, [pc, #188]	; (8005b60 <SEGGER_SYSVIEW_SendModule+0x110>)
 8005aa2:	f7fe ffaf 	bl	8004a04 <_PreparePacket>
 8005aa6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab0:	79fb      	ldrb	r3, [r7, #7]
 8005ab2:	623b      	str	r3, [r7, #32]
 8005ab4:	e00b      	b.n	8005ace <SEGGER_SYSVIEW_SendModule+0x7e>
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abc:	1c59      	adds	r1, r3, #1
 8005abe:	6279      	str	r1, [r7, #36]	; 0x24
 8005ac0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ac4:	b2d2      	uxtb	r2, r2
 8005ac6:	701a      	strb	r2, [r3, #0]
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	09db      	lsrs	r3, r3, #7
 8005acc:	623b      	str	r3, [r7, #32]
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ad2:	d8f0      	bhi.n	8005ab6 <SEGGER_SYSVIEW_SendModule+0x66>
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	627a      	str	r2, [r7, #36]	; 0x24
 8005ada:	6a3a      	ldr	r2, [r7, #32]
 8005adc:	b2d2      	uxtb	r2, r2
 8005ade:	701a      	strb	r2, [r3, #0]
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	61fb      	str	r3, [r7, #28]
 8005ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	61bb      	str	r3, [r7, #24]
 8005aee:	e00b      	b.n	8005b08 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	1c59      	adds	r1, r3, #1
 8005af8:	61f9      	str	r1, [r7, #28]
 8005afa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005afe:	b2d2      	uxtb	r2, r2
 8005b00:	701a      	strb	r2, [r3, #0]
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	09db      	lsrs	r3, r3, #7
 8005b06:	61bb      	str	r3, [r7, #24]
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b0c:	d8f0      	bhi.n	8005af0 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	1c5a      	adds	r2, r3, #1
 8005b12:	61fa      	str	r2, [r7, #28]
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	b2d2      	uxtb	r2, r2
 8005b18:	701a      	strb	r2, [r3, #0]
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2280      	movs	r2, #128	; 0x80
 8005b24:	4619      	mov	r1, r3
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f7fe ff3c 	bl	80049a4 <_EncodeStr>
 8005b2c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005b2e:	2216      	movs	r2, #22
 8005b30:	68f9      	ldr	r1, [r7, #12]
 8005b32:	6938      	ldr	r0, [r7, #16]
 8005b34:	f7ff f854 	bl	8004be0 <_SendPacket>
      RECORD_END();
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d006      	beq.n	8005b52 <SEGGER_SYSVIEW_SendModule+0x102>
 8005b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d002      	beq.n	8005b52 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	4798      	blx	r3
    }
  }
}
 8005b52:	bf00      	nop
 8005b54:	3730      	adds	r7, #48	; 0x30
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	2000d3bc 	.word	0x2000d3bc
 8005b60:	2000d3c4 	.word	0x2000d3c4

08005b64 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005b6a:	4b0c      	ldr	r3, [pc, #48]	; (8005b9c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00f      	beq.n	8005b92 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005b72:	4b0a      	ldr	r3, [pc, #40]	; (8005b9c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d002      	beq.n	8005b86 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1f2      	bne.n	8005b78 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005b92:	bf00      	nop
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	2000d3bc 	.word	0x2000d3bc

08005ba0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005ba6:	f3ef 8311 	mrs	r3, BASEPRI
 8005baa:	f04f 0120 	mov.w	r1, #32
 8005bae:	f381 8811 	msr	BASEPRI, r1
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	4817      	ldr	r0, [pc, #92]	; (8005c14 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005bb6:	f7fe ff25 	bl	8004a04 <_PreparePacket>
 8005bba:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	617b      	str	r3, [r7, #20]
 8005bc4:	4b14      	ldr	r3, [pc, #80]	; (8005c18 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	613b      	str	r3, [r7, #16]
 8005bca:	e00b      	b.n	8005be4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	b2da      	uxtb	r2, r3
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	1c59      	adds	r1, r3, #1
 8005bd4:	6179      	str	r1, [r7, #20]
 8005bd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	701a      	strb	r2, [r3, #0]
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	09db      	lsrs	r3, r3, #7
 8005be2:	613b      	str	r3, [r7, #16]
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	2b7f      	cmp	r3, #127	; 0x7f
 8005be8:	d8f0      	bhi.n	8005bcc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	617a      	str	r2, [r7, #20]
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	701a      	strb	r2, [r3, #0]
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005bfa:	221b      	movs	r2, #27
 8005bfc:	6879      	ldr	r1, [r7, #4]
 8005bfe:	68b8      	ldr	r0, [r7, #8]
 8005c00:	f7fe ffee 	bl	8004be0 <_SendPacket>
  RECORD_END();
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f383 8811 	msr	BASEPRI, r3
}
 8005c0a:	bf00      	nop
 8005c0c:	3718      	adds	r7, #24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	2000d3c4 	.word	0x2000d3c4
 8005c18:	2000d3c0 	.word	0x2000d3c0

08005c1c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08a      	sub	sp, #40	; 0x28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c24:	f3ef 8311 	mrs	r3, BASEPRI
 8005c28:	f04f 0120 	mov.w	r1, #32
 8005c2c:	f381 8811 	msr	BASEPRI, r1
 8005c30:	617b      	str	r3, [r7, #20]
 8005c32:	4827      	ldr	r0, [pc, #156]	; (8005cd0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005c34:	f7fe fee6 	bl	8004a04 <_PreparePacket>
 8005c38:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c3a:	2280      	movs	r2, #128	; 0x80
 8005c3c:	6879      	ldr	r1, [r7, #4]
 8005c3e:	6938      	ldr	r0, [r7, #16]
 8005c40:	f7fe feb0 	bl	80049a4 <_EncodeStr>
 8005c44:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	627b      	str	r3, [r7, #36]	; 0x24
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	623b      	str	r3, [r7, #32]
 8005c4e:	e00b      	b.n	8005c68 <SEGGER_SYSVIEW_Warn+0x4c>
 8005c50:	6a3b      	ldr	r3, [r7, #32]
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	1c59      	adds	r1, r3, #1
 8005c58:	6279      	str	r1, [r7, #36]	; 0x24
 8005c5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c5e:	b2d2      	uxtb	r2, r2
 8005c60:	701a      	strb	r2, [r3, #0]
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	09db      	lsrs	r3, r3, #7
 8005c66:	623b      	str	r3, [r7, #32]
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c6c:	d8f0      	bhi.n	8005c50 <SEGGER_SYSVIEW_Warn+0x34>
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	1c5a      	adds	r2, r3, #1
 8005c72:	627a      	str	r2, [r7, #36]	; 0x24
 8005c74:	6a3a      	ldr	r2, [r7, #32]
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	701a      	strb	r2, [r3, #0]
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	61fb      	str	r3, [r7, #28]
 8005c82:	2300      	movs	r3, #0
 8005c84:	61bb      	str	r3, [r7, #24]
 8005c86:	e00b      	b.n	8005ca0 <SEGGER_SYSVIEW_Warn+0x84>
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	1c59      	adds	r1, r3, #1
 8005c90:	61f9      	str	r1, [r7, #28]
 8005c92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c96:	b2d2      	uxtb	r2, r2
 8005c98:	701a      	strb	r2, [r3, #0]
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	09db      	lsrs	r3, r3, #7
 8005c9e:	61bb      	str	r3, [r7, #24]
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ca4:	d8f0      	bhi.n	8005c88 <SEGGER_SYSVIEW_Warn+0x6c>
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	61fa      	str	r2, [r7, #28]
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005cb6:	221a      	movs	r2, #26
 8005cb8:	68f9      	ldr	r1, [r7, #12]
 8005cba:	6938      	ldr	r0, [r7, #16]
 8005cbc:	f7fe ff90 	bl	8004be0 <_SendPacket>
  RECORD_END();
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f383 8811 	msr	BASEPRI, r3
}
 8005cc6:	bf00      	nop
 8005cc8:	3728      	adds	r7, #40	; 0x28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	2000d3c4 	.word	0x2000d3c4

08005cd4 <__libc_init_array>:
 8005cd4:	b570      	push	{r4, r5, r6, lr}
 8005cd6:	4d0d      	ldr	r5, [pc, #52]	; (8005d0c <__libc_init_array+0x38>)
 8005cd8:	4c0d      	ldr	r4, [pc, #52]	; (8005d10 <__libc_init_array+0x3c>)
 8005cda:	1b64      	subs	r4, r4, r5
 8005cdc:	10a4      	asrs	r4, r4, #2
 8005cde:	2600      	movs	r6, #0
 8005ce0:	42a6      	cmp	r6, r4
 8005ce2:	d109      	bne.n	8005cf8 <__libc_init_array+0x24>
 8005ce4:	4d0b      	ldr	r5, [pc, #44]	; (8005d14 <__libc_init_array+0x40>)
 8005ce6:	4c0c      	ldr	r4, [pc, #48]	; (8005d18 <__libc_init_array+0x44>)
 8005ce8:	f000 f83e 	bl	8005d68 <_init>
 8005cec:	1b64      	subs	r4, r4, r5
 8005cee:	10a4      	asrs	r4, r4, #2
 8005cf0:	2600      	movs	r6, #0
 8005cf2:	42a6      	cmp	r6, r4
 8005cf4:	d105      	bne.n	8005d02 <__libc_init_array+0x2e>
 8005cf6:	bd70      	pop	{r4, r5, r6, pc}
 8005cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cfc:	4798      	blx	r3
 8005cfe:	3601      	adds	r6, #1
 8005d00:	e7ee      	b.n	8005ce0 <__libc_init_array+0xc>
 8005d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d06:	4798      	blx	r3
 8005d08:	3601      	adds	r6, #1
 8005d0a:	e7f2      	b.n	8005cf2 <__libc_init_array+0x1e>
 8005d0c:	08005eb0 	.word	0x08005eb0
 8005d10:	08005eb0 	.word	0x08005eb0
 8005d14:	08005eb0 	.word	0x08005eb0
 8005d18:	08005eb4 	.word	0x08005eb4

08005d1c <memcmp>:
 8005d1c:	b510      	push	{r4, lr}
 8005d1e:	3901      	subs	r1, #1
 8005d20:	4402      	add	r2, r0
 8005d22:	4290      	cmp	r0, r2
 8005d24:	d101      	bne.n	8005d2a <memcmp+0xe>
 8005d26:	2000      	movs	r0, #0
 8005d28:	e005      	b.n	8005d36 <memcmp+0x1a>
 8005d2a:	7803      	ldrb	r3, [r0, #0]
 8005d2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005d30:	42a3      	cmp	r3, r4
 8005d32:	d001      	beq.n	8005d38 <memcmp+0x1c>
 8005d34:	1b18      	subs	r0, r3, r4
 8005d36:	bd10      	pop	{r4, pc}
 8005d38:	3001      	adds	r0, #1
 8005d3a:	e7f2      	b.n	8005d22 <memcmp+0x6>

08005d3c <memcpy>:
 8005d3c:	440a      	add	r2, r1
 8005d3e:	4291      	cmp	r1, r2
 8005d40:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d44:	d100      	bne.n	8005d48 <memcpy+0xc>
 8005d46:	4770      	bx	lr
 8005d48:	b510      	push	{r4, lr}
 8005d4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d52:	4291      	cmp	r1, r2
 8005d54:	d1f9      	bne.n	8005d4a <memcpy+0xe>
 8005d56:	bd10      	pop	{r4, pc}

08005d58 <memset>:
 8005d58:	4402      	add	r2, r0
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d100      	bne.n	8005d62 <memset+0xa>
 8005d60:	4770      	bx	lr
 8005d62:	f803 1b01 	strb.w	r1, [r3], #1
 8005d66:	e7f9      	b.n	8005d5c <memset+0x4>

08005d68 <_init>:
 8005d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6a:	bf00      	nop
 8005d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d6e:	bc08      	pop	{r3}
 8005d70:	469e      	mov	lr, r3
 8005d72:	4770      	bx	lr

08005d74 <_fini>:
 8005d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d76:	bf00      	nop
 8005d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d7a:	bc08      	pop	{r3}
 8005d7c:	469e      	mov	lr, r3
 8005d7e:	4770      	bx	lr
